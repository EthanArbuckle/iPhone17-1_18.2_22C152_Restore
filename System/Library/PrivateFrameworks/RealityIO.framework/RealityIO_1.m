uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

void closure #2 in ImportSession.init<A>(core:entityType:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v71 = a5;
  uint64_t v94 = type metadata accessor for __SceneImportOperation.__ImportedScene();
  uint64_t v84 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  v93 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  v92 = (char *)v67 - v15;
  uint64_t v83 = type metadata accessor for __AssetRef();
  uint64_t v16 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  v82 = (char *)v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v18 - 8);
  v20 = (char *)v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  v81 = (char *)v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  v91 = (char *)v67 - v25;
  uint64_t v26 = type metadata accessor for __SceneRef();
  MEMORY[0x270FA5388](v26);
  v90 = (char *)v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && a3)
  {
    if (a4 < 0)
    {
      __break(1u);
    }
    else
    {
      v67[1] = a6;
      v67[0] = a1;
      uint64_t v68 = a7;
      v69 = a2;
      v70 = a3;
      if (a4)
      {
        v88 = (void (**)(char *, uint64_t))(v27 + 8);
        v87 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
        v78 = (void (**)(char *, char *, uint64_t))(v22 + 32);
        v77 = (void (**)(char *, uint64_t))(v16 + 8);
        v76 = (void (**)(char *, char *, uint64_t))(v22 + 16);
        v75 = (void (**)(char *, char *, uint64_t))(v84 + 16);
        uint64_t v74 = v84 + 32;
        uint64_t v73 = v84 + 8;
        unint64_t v89 = MEMORY[0x263F8EE78];
        v30 = (void *)MEMORY[0x263F8DD08];
        v72 = (void (**)(char *, uint64_t))(v22 + 8);
        v31 = a2;
        v32 = a3;
        uint64_t v33 = v71;
        uint64_t v34 = v21;
        uint64_t v35 = v28;
        v80 = v20;
        uint64_t v95 = v34;
        uint64_t v79 = v28;
        do
        {
          uint64_t v37 = *v31++;
          uint64_t v36 = v37;
          if (v37)
          {
            uint64_t v38 = *v32;
            if (*v32)
            {
              v96 = v31;
              type metadata accessor for Scene();
              v98 = v30;
              aBlock[0] = v36;
              uint64_t v39 = v35;
              v40 = v20;
              v41 = v90;
              static __SceneRef.__fromCore(_:)();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
              uint64_t v42 = static Scene.__fromCore(_:)();
              v43 = v41;
              v20 = v40;
              uint64_t v35 = v39;
              (*v88)(v43, v39);
              Scene.__sceneIdentifier.getter();
              uint64_t v44 = v95;
              if ((*v87)(v20, 1, v95) == 1)
              {
                swift_release();
                outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
                v31 = v96;
              }
              else
              {
                v45 = v91;
                (*v78)(v91, v20, v44);
                type metadata accessor for __REAsset();
                uint64_t v85 = v42;
                v98 = v30;
                aBlock[0] = v38;
                v46 = v82;
                static __AssetRef.__fromCore(_:)();
                __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
                uint64_t v47 = static __REAsset.__fromHandle(_:)();
                (*v77)(v46, v83);
                (*v76)(v81, v45, v44);
                dispatch thunk of Scene.name.getter();
                swift_retain();
                v48 = v92;
                uint64_t v86 = v47;
                __SceneImportOperation.__ImportedScene.init(sceneIdentifier:sceneName:sceneAsset:sceneActive:)();
                (*v75)(v93, v48, v94);
                unint64_t v49 = v89;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v49 + 16) + 1, 1, v49);
                }
                v31 = v96;
                unint64_t v51 = *(void *)(v49 + 16);
                unint64_t v50 = *(void *)(v49 + 24);
                if (v51 >= v50 >> 1) {
                  unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v49);
                }
                *(void *)(v49 + 16) = v51 + 1;
                uint64_t v52 = v84;
                unint64_t v53 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
                unint64_t v89 = v49;
                uint64_t v54 = v94;
                (*(void (**)(unint64_t, char *, uint64_t))(v84 + 32))(v49 + v53 + *(void *)(v84 + 72) * v51, v93, v94);
                swift_release();
                swift_release();
                (*(void (**)(char *, uint64_t))(v52 + 8))(v92, v54);
                (*v72)(v91, v95);
                uint64_t v35 = v79;
                v30 = (void *)MEMORY[0x263F8DD08];
                v20 = v80;
              }
            }
          }
          --v33;
          ++v32;
          --a4;
        }
        while (a4);
      }
      else
      {
        unint64_t v89 = MEMORY[0x263F8EE78];
      }
      uint64_t v55 = v70[v71];
      if (!v55) {
        goto LABEL_21;
      }
      if (!v69[v71]) {
        goto LABEL_21;
      }
      uint64_t v56 = v68;
      RESceneGetName();
      uint64_t v57 = String.init(cString:)();
      uint64_t v59 = v58;
      type metadata accessor for __SceneResourceCache();
      swift_unownedRetainStrong();
      static __SceneResourceCache.attachImportedScenesForSceneChangeToEntity(importedScenes:entity:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v61 = Strong;
        v62 = (void *)swift_allocObject();
        v62[2] = v57;
        v62[3] = v59;
        v62[4] = v55;
        v62[5] = v56;
        v62[6] = v67[0];
        v63 = (void **)(v61 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
        swift_beginAccess();
        v64 = *v63;
        v99 = partial apply for closure #1 in closure #2 in ImportSession.init<A>(core:entityType:);
        v100 = v62;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        v98 = &block_descriptor_270;
        v65 = _Block_copy(aBlock);
        swift_retain();
        id v66 = v64;
        swift_retain();
        swift_release();
        RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue();
        _Block_release(v65);
        swift_release();
        swift_release();
      }
      else
      {
LABEL_21:
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t closure #1 in closure #2 in ImportSession.init<A>(core:entityType:)()
{
  String.utf8CString.getter();
  RESceneCreate();
  swift_release();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  dispatch thunk of __REAssetService.__handle.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  RESceneLoadFromAsset();
  RESceneGetEntitiesArray();
  if (v0 < 1) {
    return RERelease();
  }
  type metadata accessor for Entity();
  static Entity.fromCore(_:ignoringEntityInfo:)();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v2 = (id *)(result + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    id v3 = *v2;
    swift_release();
    RIOImportSessionOverridePrimPathToEntityForSceneAssetEntities();

    REEntityInsertChild();
    swift_retain();
    v4._countAndFlagsBits = 0;
    v4._object = (void *)0xE000000000000000;
    Entity.setLoadContext(fileName:)(v4);
    swift_release_n();
    return RERelease();
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v11(a2, a3, a4, a5, a6);
  return swift_release();
}

void ImportSession.registerDefaultSwiftBuilders()()
{
  v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  Swift::String v4 = (void *)swift_allocObject();
  v4[2] = v3;
  v4[3] = closure #1 in ImportSession.registerDefaultSwiftBuilders();
  v4[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v4;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_119;
  v5 = _Block_copy(&aBlock);
  id v6 = v2;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v5);

  v7 = *v1;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  v9 = (void *)swift_allocObject();
  v9[2] = v8;
  v9[3] = closure #2 in ImportSession.registerDefaultSwiftBuilders();
  v9[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v9;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_127;
  v10 = _Block_copy(&aBlock);
  id v11 = v7;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v10);

  v12 = *v1;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v13;
  v14[3] = closure #3 in ImportSession.registerDefaultSwiftBuilders();
  v14[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_135;
  uint64_t v15 = _Block_copy(&aBlock);
  id v16 = v12;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v15);

  uint64_t v17 = *v1;
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v18;
  v19[3] = closure #4 in ImportSession.registerDefaultSwiftBuilders();
  v19[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v19;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_143;
  v20 = _Block_copy(&aBlock);
  id v21 = v17;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v20);

  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  uint64_t v23 = *v1;
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v24;
  v25[3] = partial apply for closure #5 in ImportSession.registerDefaultSwiftBuilders();
  v25[4] = v22;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v25;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_152;
  uint64_t v26 = _Block_copy(&aBlock);
  swift_retain_n();
  id v27 = v23;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v26);
  swift_release_n();

  uint64_t v28 = *v1;
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  v30 = (void *)swift_allocObject();
  v30[2] = v29;
  v30[3] = closure #6 in ImportSession.registerDefaultSwiftBuilders();
  v30[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_160;
  v31 = _Block_copy(&aBlock);
  id v32 = v28;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v31);

  uint64_t v33 = *v1;
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = v34;
  v35[3] = closure #7 in ImportSession.registerDefaultSwiftBuilders();
  v35[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v35;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_168;
  uint64_t v36 = _Block_copy(&aBlock);
  id v37 = v33;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v36);

  uint64_t v38 = *v1;
  uint64_t v39 = swift_allocObject();
  swift_weakInit();
  v40 = (void *)swift_allocObject();
  v40[2] = v39;
  v40[3] = closure #8 in ImportSession.registerDefaultSwiftBuilders();
  v40[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v40;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_176;
  v41 = _Block_copy(&aBlock);
  id v42 = v38;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v41);

  v43 = *v1;
  uint64_t v44 = swift_allocObject();
  swift_weakInit();
  v45 = (void *)swift_allocObject();
  v45[2] = v44;
  v45[3] = closure #9 in ImportSession.registerDefaultSwiftBuilders();
  v45[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v45;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_184;
  v46 = _Block_copy(&aBlock);
  id v47 = v43;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v46);

  v48 = *v1;
  uint64_t v49 = swift_allocObject();
  swift_weakInit();
  unint64_t v50 = (void *)swift_allocObject();
  v50[2] = v49;
  v50[3] = closure #10 in ImportSession.registerDefaultSwiftBuilders();
  v50[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v50;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_192;
  unint64_t v51 = _Block_copy(&aBlock);
  id v52 = v48;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v51);

  unint64_t v53 = *v1;
  uint64_t v54 = swift_allocObject();
  swift_weakInit();
  uint64_t v55 = (void *)swift_allocObject();
  v55[2] = v54;
  v55[3] = closure #11 in ImportSession.registerDefaultSwiftBuilders();
  v55[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v55;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_200;
  uint64_t v56 = _Block_copy(&aBlock);
  id v57 = v53;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v56);

  uint64_t v58 = *v1;
  uint64_t v59 = swift_allocObject();
  swift_weakInit();
  v60 = (void *)swift_allocObject();
  v60[2] = v59;
  v60[3] = closure #12 in ImportSession.registerDefaultSwiftBuilders();
  v60[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v60;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_208;
  uint64_t v61 = _Block_copy(&aBlock);
  id v62 = v58;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v61);

  v63 = *v1;
  uint64_t v64 = swift_allocObject();
  swift_weakInit();
  v65 = (void *)swift_allocObject();
  v65[2] = v64;
  v65[3] = closure #13 in ImportSession.registerDefaultSwiftBuilders();
  v65[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v65;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_216;
  id v66 = _Block_copy(&aBlock);
  id v67 = v63;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v66);

  uint64_t v68 = *v1;
  uint64_t v69 = swift_allocObject();
  swift_weakInit();
  v70 = (void *)swift_allocObject();
  v70[2] = v69;
  v70[3] = closure #14 in ImportSession.registerDefaultSwiftBuilders();
  v70[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v70;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_224;
  uint64_t v71 = _Block_copy(&aBlock);
  id v72 = v68;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v71);

  uint64_t v73 = *v1;
  uint64_t v74 = swift_allocObject();
  swift_weakInit();
  v75 = (void *)swift_allocObject();
  v75[2] = v74;
  v75[3] = closure #15 in ImportSession.registerDefaultSwiftBuilders();
  v75[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v75;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_232;
  v76 = _Block_copy(&aBlock);
  id v77 = v73;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v76);

  v78 = *v1;
  uint64_t v79 = swift_allocObject();
  swift_weakInit();
  v80 = (void *)swift_allocObject();
  v80[2] = v79;
  v80[3] = closure #16 in ImportSession.registerDefaultSwiftBuilders();
  v80[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v80;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_240;
  v81 = _Block_copy(&aBlock);
  id v82 = v78;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v81);

  uint64_t v83 = *v1;
  uint64_t v84 = swift_allocObject();
  swift_weakInit();
  uint64_t v85 = (void *)swift_allocObject();
  v85[2] = v84;
  v85[3] = closure #17 in ImportSession.registerDefaultSwiftBuilders();
  v85[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v85;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_248;
  uint64_t v86 = _Block_copy(&aBlock);
  id v87 = v83;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v86);

  v88 = *v1;
  uint64_t v89 = swift_allocObject();
  swift_weakInit();
  v90 = (void *)swift_allocObject();
  v90[2] = v89;
  v90[3] = closure #18 in ImportSession.registerDefaultSwiftBuilders();
  v90[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v90;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_256;
  v91 = _Block_copy(&aBlock);
  id v92 = v88;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v91);

  v93 = *v1;
  uint64_t v94 = swift_allocObject();
  swift_weakInit();
  uint64_t v95 = (void *)swift_allocObject();
  v95[2] = v94;
  v95[3] = closure #19 in ImportSession.registerDefaultSwiftBuilders();
  v95[4] = 0;
  v102 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v103 = v95;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v99 = 1107296256;
  v100 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v101 = &block_descriptor_264;
  v96 = _Block_copy(&aBlock);
  id v97 = v93;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v96);
}

Swift::Void __swiftcall ImportSession.setIsLoadModelUseCase(isLoadModel:)(Swift::Bool isLoadModel)
{
}

void ImportSession.setOriginalUrl(url:)()
{
  v1 = (id *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  id v2 = *v1;
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  RIOImportSessionSetOriginalUrl();
}

Swift::Void __swiftcall ImportSession.setLoadSubdsAsSubds(loadAsSubd:)(Swift::Bool loadAsSubd)
{
}

uint64_t ImportSession.setIsLoadModelUseCase(isLoadModel:)(char a1, uint64_t (*a2)(void, void))
{
  v5 = (void *)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  return a2(*v5, a1 & 1);
}

uint64_t ImportSession.getLoadSubdsAsSubds(url:)()
{
  return RIOImportSessionGetLoadSubdsAsSubds();
}

uint64_t ImportSession.deinit()
{
  swift_release();
  swift_release();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0
                                                                         + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ImportSession.__deallocating_deinit()
{
  ImportSession.deinit();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for TimelineBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  return result;
}

uint64_t closure #2 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for TimelineTrackAndActionBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  return result;
}

uint64_t closure #3 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for TriggerBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  return result;
}

uint64_t closure #4 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for ActionBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  return result;
}

uint64_t closure #5 in ImportSession.registerDefaultSwiftBuilders()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter);
    swift_retain();
    swift_release();
    type metadata accessor for BehaviorBuilder();
    uint64_t result = swift_allocObject();
    *(unsigned char *)(result + 16) = 2;
    *(void *)(result + 24) = v1;
  }
  return result;
}

uint64_t closure #6 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for PhysicsComponentBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  return result;
}

uint64_t closure #7 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for ReferenceImageBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  return result;
}

double closure #8 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for AudioFileBuilder();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 2;
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(void *)(v0 + 56) = 0;
  return result;
}

uint64_t closure #9 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for AudioFileGroupBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t closure #10 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for AudioMixGroupBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  return result;
}

uint64_t closure #11 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for ImageBasedLightReceiverBuilder();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #12 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for ImageBasedLightBuilder();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_WORD *)(result + 40) = 2;
  return result;
}

uint64_t closure #13 in ImportSession.registerDefaultSwiftBuilders()()
{
  return VirtualEnvironmentProbeComponentBuilder.init()();
}

uint64_t closure #14 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for ModelSortGroupBuilder();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 2;
  uint64_t v1 = v0 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup;
  uint64_t v2 = type metadata accessor for ModelSortGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t closure #15 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for ModelSortGroupComponentBuilder();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #16 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for AnchoringComponentBuilder();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

uint64_t closure #17 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for SpotLightComponentBuilder();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #18 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for DirectionalLightComponentBuilder();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #19 in ImportSession.registerDefaultSwiftBuilders()()
{
  return CustomComponentBuilder.init()();
}

Swift::Void __swiftcall ImportSession.requestUpdate()()
{
}

Swift::Void __swiftcall ImportSession.requestCancel()()
{
}

void ImportSession.reloadAsset(assetURL:)()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  id v2 = *v1;
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  char v6 = RIOImportSessionReloadAsset();

  if ((v6 & 1) == 0)
  {
    lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
    swift_allocError();
    unsigned char *v7 = 1;
    swift_willThrow();
  }
}

void ImportSession.performBlockAfterAssetLoadOnEngineQueue(block:)(uint64_t a1, uint64_t a2)
{
  v5 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  char v6 = *v5;
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_23;
  v7 = _Block_copy(aBlock);
  id v8 = v6;
  swift_retain();
  swift_release();
  RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue();
  _Block_release(v7);
}

uint64_t ImportSession.activeSceneCount.getter()
{
  swift_beginAccess();
  uint64_t result = RIOImportSessionGetSceneCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v2 = result;
    if (result)
    {
      uint64_t v3 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v1++, 1)) {
            break;
          }
        }
        if (v2 == ++v3) {
          return v1;
        }
      }
      __break(1u);
    }
    return v1;
  }
  return result;
}

uint64_t ImportSession.entityTaggingEditMode.getter()
{
  return RIOPxrUsdStageGetEntityTaggingEditMode();
}

uint64_t ImportSession.entityTaggingEditMode.setter(char a1)
{
  return MEMORY[0x270F22DE8](*(void *)(*(void *)(v1 + 16) + 16), a1 & 1);
}

uint64_t (*ImportSession.entityTaggingEditMode.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = RIOPxrUsdStageGetEntityTaggingEditMode();
  return ImportSession.entityTaggingEditMode.modify;
}

uint64_t ImportSession.entityTaggingEditMode.modify(unsigned __int8 *a1, uint64_t a2)
{
  return ImportSession.entityTaggingEditMode.modify(a1, a2, MEMORY[0x263F37AF0]);
}

uint64_t ImportSession.includeUnusedMaterials.getter()
{
  return RIOPxrUsdStageGetIncludeUnusedMaterials();
}

uint64_t (*ImportSession.includeUnusedMaterials.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = RIOPxrUsdStageGetIncludeUnusedMaterials();
  return ImportSession.includeUnusedMaterials.modify;
}

uint64_t ImportSession.includeUnusedMaterials.modify(unsigned __int8 *a1, uint64_t a2)
{
  return ImportSession.entityTaggingEditMode.modify(a1, a2, MEMORY[0x263F37AF8]);
}

uint64_t ImportSession.entityTaggingEditMode.modify(unsigned __int8 *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)(*(void *)a1 + 16), a1[8]);
}

Swift::Void __swiftcall ImportSession.runSampleScene()()
{
}

uint64_t ImportSession.requestUpdateSynchronouslyOnEngineQueue()(uint64_t (*a1)(void))
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  return a1(*v3);
}

Swift::Bool __swiftcall ImportSession.dumpDependencies(_:)(Swift::String a1)
{
  return ImportSession.dumpDiagnostics(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x263F37710]);
}

uint64_t ImportSession.dumpDiagnostics(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  v5 = (void **)(v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  char v6 = *v5;
  String.utf8CString.getter();
  id v7 = v6;
  uint64_t v8 = a3();

  swift_release();
  return v8;
}

uint64_t ImportSession.getStatistics()()
{
  swift_beginAccess();
  uint64_t result = RIOImportSessionCopyStatistics();
  if (result) {
    uint64_t result = static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  }
  else {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static ImportSession.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RIOImportSessionRef(0);
  Swift::String v4 = (void **)(a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v5 = *v4;
  char v6 = (void **)(a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  id v7 = *v6;
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
  id v8 = v5;
  id v9 = v7;
  LOBYTE(v6) = static _CFObject.== infix(_:_:)();

  return v6 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImportSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for RIOImportSessionRef(0);
  Swift::String v4 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v5 = *v4;
  char v6 = (void **)(v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  id v7 = *v6;
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
  id v8 = v5;
  id v9 = v7;
  LOBYTE(v6) = static _CFObject.== infix(_:_:)();

  return v6 & 1;
}

uint64_t ImportSession.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImportSession.Type);
  uint64_t v0 = String.init<A>(describing:)();
  swift_retain();
  uint64_t v1 = (void *)RIOPxrUsdStageCopyUSDA();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_release();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 0x203A656761747328;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = dispatch thunk of Entity.name.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 10537;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x800000023AAAF4D0;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImportSession()
{
  return ImportSession.description.getter();
}

void *ImportSession.prim(of:)()
{
  uint64_t v0 = type metadata accessor for __EntityRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.__coreEntity.getter();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t result = (id)MEMORY[0x23ECBBB10](v8[1]);
  if (result)
  {
    Swift::String v5 = result;
    id v6 = (id)RIOPxrTfTokenEmpty();
    uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

    type metadata accessor for Prim();
    uint64_t result = (void *)swift_allocObject();
    result[2] = PrimIfNeeded;
  }
  return result;
}

uint64_t ImportSession.primPath(of:)()
{
  uint64_t v0 = type metadata accessor for __EntityRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.__coreEntity.getter();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v4 = (id)MEMORY[0x23ECBBB10](v9[1]);
  if (!v4) {
    return 0;
  }
  id v5 = v4;
  id v6 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t static ImportSession.allComponents.getter()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x263F8EE80];
  uint64_t v1 = (uint64_t *)(v0 + 16);
  void v5[4] = partial apply for closure #1 in static ImportSession.allComponents.getter;
  v5[5] = v0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
  v5[3] = &block_descriptor_30_0;
  uint64_t v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  REGlobalTypeRegistryWithReadLock();
  _Block_release(v2);
  swift_beginAccess();
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

uint64_t closure #1 in static ImportSession.allComponents.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = RETypeRegistryGetTypeInfoByTypeName();
  if (result)
  {
    uint64_t result = RETypeInfoGetSubClassCount();
    if (result < 0) {
      goto LABEL_25;
    }
    if (result)
    {
      uint64_t v4 = 0;
      uint64_t v24 = (void *)(a2 + 16);
      uint64_t v25 = result;
      while (result != v4)
      {
        uint64_t v27 = v4;
        RETypeInfoGetSubClass();
        Swift::UInt v26 = REComponentClassFromTypeInfo();
        if (v26)
        {
          if (RETypeInfoGetName())
          {
            String.init(cString:)();
            uint64_t ID = RETypeInfoGetID();
            uint64_t v8 = v7;
            lazy protocol witness table accessor for type String and conformance String();
            char v9 = StringProtocol.contains<A>(_:)();
            swift_bridgeObjectRelease();
            if ((v9 & 1) == 0)
            {
              swift_beginAccess();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              id v11 = (void *)*v24;
              *uint64_t v24 = 0x8000000000000000;
              unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
              uint64_t v14 = v11[2];
              BOOL v15 = (v12 & 1) == 0;
              uint64_t v16 = v14 + v15;
              if (__OFADD__(v14, v15)) {
                goto LABEL_23;
              }
              char v17 = v12;
              if (v11[3] >= v16)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  specialized _NativeDictionary.copy()();
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
                unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
                if ((v17 & 1) != (v19 & 1))
                {
                  type metadata accessor for REComponentClassPtr(0);
                  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return result;
                }
                unint64_t v13 = v18;
              }
              if (v17)
              {
                id v5 = (uint64_t *)(v11[7] + 16 * v13);
                uint64_t *v5 = ID;
                v5[1] = v8;
              }
              else
              {
                v11[(v13 >> 6) + 8] |= 1 << v13;
                *(void *)(v11[6] + 8 * v13) = v26;
                v20 = (uint64_t *)(v11[7] + 16 * v13);
                uint64_t *v20 = ID;
                v20[1] = v8;
                uint64_t v21 = v11[2];
                BOOL v22 = __OFADD__(v21, 1);
                uint64_t v23 = v21 + 1;
                if (v22) {
                  goto LABEL_24;
                }
                v11[2] = v23;
              }
              *uint64_t v24 = v11;
              swift_bridgeObjectRelease();
              swift_endAccess();
            }
          }
        }
        uint64_t v4 = v27 + 1;
        uint64_t result = v25;
        if (v25 == v27 + 1) {
          return result;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t one-time initialization function for realityKitComponentClasses()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<REComponentClassPtr>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23AAB51D0;
  *(void *)(v0 + 32) = REAnchoringComponentGetComponentType();
  *(void *)(v0 + 40) = REBallSocketJointComponentGetComponentType();
  *(void *)(v0 + 48) = REBodyTrackingComponentGetComponentType();
  *(void *)(v0 + 56) = REColliderComponentGetComponentType();
  *(void *)(v0 + 64) = REDebugMeshComponentGetComponentType();
  *(void *)(v0 + 72) = REDirectionalLightComponentGetComponentType();
  *(void *)(v0 + 80) = REHingeJointComponentGetComponentType();
  *(void *)(v0 + 88) = REMeshComponentGetComponentType();
  *(void *)(v0 + 96) = REMeshSortingComponentGetComponentType();
  *(void *)(v0 + 104) = REPerspectiveCameraComponentGetComponentType();
  *(void *)(v0 + 112) = RERigidBodyComponentGetComponentType();
  *(void *)(v0 + 120) = REMotionStateComponentGetComponentType();
  *(void *)(v0 + 128) = REPinComponentGetComponentType();
  *(void *)(v0 + 136) = REPointLightComponentGetComponentType();
  *(void *)(v0 + 144) = RESceneUnderstandingComponentGetComponentType();
  *(void *)(v0 + 152) = RESpotLightComponentGetComponentType();
  *(void *)(v0 + 160) = RENetworkComponentGetComponentType();
  *(void *)(v0 + 168) = RETransformComponentGetComponentType();
  *(void *)(v0 + 176) = REImageBasedLightComponentGetComponentType();
  *(void *)(v0 + 184) = REImageBasedLightReceiverComponentGetComponentType();
  uint64_t result = REVirtualEnvironmentProbeComponentGetComponentType();
  *(void *)(v0 + 192) = result;
  static ImportSession.realityKitComponentClasses = (_UNKNOWN *)v0;
  return result;
}

uint64_t static ImportSession.realityKitComponentClasses.getter()
{
  if (one-time initialization token for realityKitComponentClasses != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ImportSession.realityKitComponentClasses.setter(void *a1)
{
  if (one-time initialization token for realityKitComponentClasses != -1) {
    swift_once();
  }
  swift_beginAccess();
  static ImportSession.realityKitComponentClasses = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ImportSession.realityKitComponentClasses.modify())()
{
  if (one-time initialization token for realityKitComponentClasses != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CompileSession.includeUnusedMaterials.modify;
}

uint64_t static ImportSession.realityKitComponents.getter()
{
  return static ImportSession.realityKitComponents.getter((uint64_t)partial apply for closure #1 in static ImportSession.allComponents.getter, (uint64_t)&block_descriptor_35, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
}

uint64_t static ImportSession.internalComponents.getter()
{
  return static ImportSession.realityKitComponents.getter((uint64_t)partial apply for closure #1 in static ImportSession.allComponents.getter, (uint64_t)&block_descriptor_40, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
}

uint64_t static ImportSession.realityKitComponents.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = MEMORY[0x263F8EE80];
  uint64_t v7 = (uint64_t *)(v6 + 16);
  aBlock[4] = a1;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
  void aBlock[3] = a2;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  REGlobalTypeRegistryWithReadLock();
  _Block_release(v8);
  swift_beginAccess();
  uint64_t v9 = *v7;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v10 = specialized _NativeDictionary.filter(_:)(v9, a3);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t static ImportSession.getRealityKitComponentName(componentClass:)()
{
  REComponentClassGetName();
  return String.init(cString:)();
}

uint64_t static ImportSession.getSwiftRealityKitComponentName(reComponentName:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB51E0;
  *(void *)(inited + 32) = 0x726564696C6C6F43;
  *(void *)(inited + 40) = 0xE800000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23AAB22A0;
  *(void *)(v5 + 32) = 0x6F6973696C6C6F43;
  *(void *)(v5 + 40) = 0xE90000000000006ELL;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = 1752393037;
  *(void *)(inited + 64) = 0xE400000000000000;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22A0;
  *(void *)(v6 + 32) = 0x6C65646F4DLL;
  *(void *)(v6 + 40) = 0xE500000000000000;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = 0x73654D6775626544;
  *(void *)(inited + 88) = 0xE900000000000068;
  *(void *)(inited + 96) = &outlined read-only object #0 of static ImportSession.getSwiftRealityKitComponentName(reComponentName:);
  *(void *)(inited + 104) = 0x646F426469676952;
  *(void *)(inited + 112) = 0xE900000000000079;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23AAB22A0;
  *(void *)(v7 + 32) = 0x4273636973796850;
  *(void *)(v7 + 40) = 0xEB0000000079646FLL;
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 128) = 0x74536E6F69746F4DLL;
  *(void *)(inited + 136) = 0xEB00000000657461;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23AAB22A0;
  strcpy((char *)(v8 + 32), "PhysicsMotion");
  *(_WORD *)(v8 + 46) = -4864;
  *(void *)(inited + 144) = v8;
  *(void *)(inited + 152) = 0x6B726F7774654ELL;
  *(void *)(inited + 160) = 0xE700000000000000;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AAB22A0;
  *(void *)(v9 + 32) = 0x6E6F7268636E7953;
  *(void *)(v9 + 40) = 0xEF6E6F6974617A69;
  *(void *)(inited + 168) = v9;
  *(void *)(inited + 176) = 0x614D776F64616853;
  *(void *)(inited + 184) = 0xE900000000000070;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AAB24E0;
  *(void *)(v10 + 32) = 0xD000000000000016;
  *(void *)(v10 + 40) = 0x800000023AAAF500;
  *(void *)(v10 + 48) = 0x6867694C746F7053;
  *(void *)(v10 + 56) = 0xEF776F6461685374;
  *(void *)(inited + 192) = v10;
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v14 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t ImportSession.TextureOperatorContainer.deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v3 = v1 + 64;
  uint64_t v2 = v4;
  uint64_t v5 = 1 << *(unsigned char *)(*(void *)(v0 + 16) + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & v2;
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    int64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v10;
    if (!v12)
    {
      int64_t v10 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      uint64_t v12 = *(void *)(v3 + 8 * v10);
      if (!v12)
      {
        int64_t v10 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        uint64_t v12 = *(void *)(v3 + 8 * v10);
        if (!v12)
        {
          int64_t v10 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v10);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v7 = (v12 - 1) & v12;
LABEL_5:
    uint64_t result = RERelease();
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v0;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v10 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v10);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t ImportSession.TextureOperatorContainer.__deallocating_deinit()
{
  ImportSession.TextureOperatorContainer.deinit();
  return swift_deallocClassInstance();
}

uint64_t ImportSession.TextureOperatorContainer.count.getter()
{
  return *(void *)(*(void *)(v0 + 16) + 16);
}

uint64_t ImportSession.TextureOperatorContainer.keys.getter()
{
  return swift_bridgeObjectRetain();
}

void *ImportSession.TextureOperatorContainer.makeIterator()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  uint64_t v4 = v2 & *(void *)(v1 + 64);
  uint64_t v5 = ~v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : OpaquePointer].Iterator>);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v1;
  v6[3] = v1 + 64;
  v6[4] = v5;
  v6[5] = 0;
  v6[6] = v4;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t ImportSession.TextureOperatorContainer.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(v3 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

void ImportSession.TextureOperatorContainer.setDownsample(factor:for:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 24);
  if (!*(void *)(v4 + 16)) {
    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v9 = *(void *)(*(void *)(v4 + 56) + 8 * v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int64_t v10 = 0;
  uint64_t v30 = v9 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & *(void *)(v9 + 56);
  int64_t v31 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v13 &= v13 - 1;
      goto LABEL_24;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v17 >= v31) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(v30 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v31) {
        goto LABEL_35;
      }
      uint64_t v18 = *(void *)(v30 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v31) {
          goto LABEL_35;
        }
        uint64_t v18 = *(void *)(v30 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v13 = (v18 - 1) & v18;
LABEL_24:
    String.utf8CString.getter();
    v20 = (void *)RIOPxrSdfPathCreateFromCString();
    swift_release();
    id v21 = (id)RIOPxrTfTokenEmpty();
    uint64_t PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

    type metadata accessor for Prim();
    *(void *)(swift_initStackObject() + 16) = PrimIfNeeded;
    if (String.count.getter() < 1) {
      id v23 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v23 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v24 = v23;
    if (!RIOPxrUsdPrimHasAttribute())
    {

      lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
      swift_willThrowTypedImpl();
      swift_allocError();
      *uint64_t v29 = 0;
      swift_release();
      swift_release();
      return;
    }
    uint64_t v25 = RIOPxrUsdPrimCopyAttribute();

    type metadata accessor for AnyAttribute();
    Swift::UInt v26 = (void *)swift_allocObject();
    v26[2] = v25;
    swift_retain();
    if (String.count.getter() <= 0) {
      id v27 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v27 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v28 = v27;
    if (String.count.getter() < 1) {
      id v14 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v14 = (id)RIOPxrTfTokenCreateWithCString();
    }
    BOOL v15 = v14;
    uint64_t v16 = (void *)RIOPxrVtValueCreateWithInt32();
    RIOPxrUsdObjectMetadataSetValue();

    outlined consume of Result<AnyAttribute, Object.Error>(v26, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v26, 0);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v31)
  {
LABEL_35:
    swift_release();
    return;
  }
  uint64_t v18 = *(void *)(v30 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(v30 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_38:
  __break(1u);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ImportSession.TextureOperatorContainer@<X0>(void *a1@<X8>)
{
  uint64_t v2 = ImportSession.TextureOperatorContainer.makeIterator()();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ImportSession.TextureOperatorContainer()
{
  return 0;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance ImportSession.TextureOperatorContainer()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ImportSession.TextureOperatorContainer()
{
  uint64_t v0 = specialized _copySequenceToContiguousArray<A>(_:)();
  swift_release();
  return v0;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ImportSession.TextureOperatorContainer(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t specialized Sequence._copyContents(initializing:)(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = ImportSession.TextureOperatorContainer.makeIterator()();
  uint64_t result = swift_release();
  uint64_t v8 = 0;
  if (!a2 || !a3)
  {
LABEL_9:
    *a1 = v6;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    long long v9 = v12;
    uint64_t v8 = 0;
    if ((void)v12)
    {
      uint64_t v10 = v11;
      while (1)
      {
        *(void *)a2 = v10;
        *(_OWORD *)(a2 + 8) = v9;
        if (a3 - 1 == v8) {
          break;
        }
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t v10 = v11;
        long long v9 = v12;
        a2 += 24;
        ++v8;
      }
      uint64_t v8 = a3;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ImportSession.TextureOperatorContainer()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t ImportSession.gatherUsedTexturesAsImportOperations()()
{
  return ImportSession.gatherUsedTexturesAsImportOperations()((uint64_t)&unk_26EE0E3B0, (uint64_t)partial apply for closure #1 in ImportSession.gatherUsedTexturesAsImportOperations(), (uint64_t)&block_descriptor_52, MEMORY[0x263F37728]);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @unowned UnsafePointer<Int8>, @unowned UnsafePointer<Int8>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

uint64_t ImportSession.gatherTexturesAsImportOperations()()
{
  return ImportSession.gatherUsedTexturesAsImportOperations()((uint64_t)&unk_26EE0E400, (uint64_t)partial apply for closure #1 in ImportSession.gatherUsedTexturesAsImportOperations(), (uint64_t)&block_descriptor_60, MEMORY[0x263F37720]);
}

uint64_t ImportSession.gatherUsedTexturesAsImportOperations()(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t, void *))
{
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)(v7 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v8);
  uint64_t v10 = (void **)(v4 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v11 = *v10;
  type metadata accessor for __ServiceLocator();
  id v12 = v11;
  static __ServiceLocator.shared.getter();
  uint64_t v13 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v9;
  *(void *)(v14 + 24) = v7;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @unowned UnsafePointer<Int8>, @unowned UnsafePointer<Int8>) -> ();
  void aBlock[3] = a3;
  BOOL v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  a4(v12, v13, v15);
  _Block_release(v15);

  swift_beginAccess();
  uint64_t v16 = *(void *)(v7 + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  type metadata accessor for ImportSession.TextureOperatorContainer();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v16;
  *(void *)(result + 24) = v17;
  return result;
}

uint64_t ImportSession.gatherTexturesAsImportOperations(onlyUsedTextures:)()
{
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v2);
  uint64_t v4 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v5 = *v4;
  type metadata accessor for __ServiceLocator();
  id v6 = v5;
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in ImportSession.gatherTexturesAsImportOperations(onlyUsedTextures:);
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @unowned UnsafePointer<Int8>, @unowned UnsafePointer<Int8>) -> ();
  void aBlock[3] = &block_descriptor_68;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  RIOImportSessionGatherTextureInfoWithOptionallyUnusedTextures();
  _Block_release(v8);

  swift_beginAccess();
  uint64_t v9 = *(void *)(v1 + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  type metadata accessor for ImportSession.TextureOperatorContainer();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v9;
  *(void *)(result + 24) = v10;
  return result;
}

uint64_t closure #1 in ImportSession.gatherUsedTexturesAsImportOperations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (uint64_t *)(a4 + 16);
  Swift::Int v9 = String.init(cString:)();
  Swift::Int v11 = v10;
  uint64_t v12 = String.init(cString:)();
  uint64_t v14 = v13;
  swift_beginAccess();
  uint64_t v15 = *(void *)(a4 + 16);
  if (*(void *)(v15 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
    if (v17)
    {
      uint64_t v29 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Set._Variant.insert(_:)(&v28, v9, v11);
      swift_bridgeObjectRelease();
      uint64_t v18 = v29;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *v8;
      *uint64_t v8 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v12, v14, isUniquelyReferenced_nonNull_native);
      uint64_t v20 = v27;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v9;
  *(void *)(inited + 40) = v11;
  swift_bridgeObjectRetain();
  Swift::Int v22 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_beginAccess();
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *v8;
  *uint64_t v8 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v12, v14, v23);
  uint64_t v20 = v29;
LABEL_6:
  *uint64_t v8 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a1) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v24 = (uint64_t *)(a5 + 16);
  swift_beginAccess();
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *v24;
  *uint64_t v24 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v12, v14, v25);
  *uint64_t v24 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

  return RERetain();
}

uint64_t ImportSession.MeshAssetEstimate.meshCount.getter()
{
  return *(void *)v0;
}

uint64_t ImportSession.MeshAssetEstimate.vertexTotal.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ImportSession.MeshAssetEstimate.triangleTotal.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ImportSession.MeshAssetEstimate.attrDimension.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ImportSession.MeshAssetEstimate.approximateFootprint.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((unint64_t)(v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = v0[2];
  uint64_t v5 = (unsigned __int128)(v4 * (__int128)3) >> 64;
  uint64_t v6 = 3 * v4;
  if (v5 != v6 >> 63)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((unint64_t)(v6 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = 4 * v3;
  uint64_t result = v7 + 4 * v6;
  if (__OFADD__(v7, 4 * v6)) {
LABEL_11:
  }
    __break(1u);
  return result;
}

void *static ImportSession.MeshAssetEstimate.+ infix(_:_:)@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, *a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = result[1];
  BOOL v5 = __OFADD__(v4, v3);
  uint64_t v6 = v4 + v3;
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = result[2];
  uint64_t v8 = a2[2];
  BOOL v5 = __OFADD__(v7, v8);
  uint64_t v9 = v7 + v8;
  if (v5)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v10 = result[3];
  if (a2[3] > v10) {
    uint64_t v10 = a2[3];
  }
  *a3 = *result + *a2;
  a3[1] = v6;
  a3[2] = v9;
  a3[3] = v10;
  return result;
}

double static ImportSession.MeshAssetEstimate.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ImportSession.MeshAssetEstimates.entityCount.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t ImportSession.MeshAssetEstimates.entityPaths.getter()
{
  return swift_bridgeObjectRetain();
}

void *ImportSession.MeshAssetEstimates.makeIterator()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(*v0 + 32);
  uint64_t v4 = *v0 + 64;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  uint64_t v5 = v2 & *(void *)(*v0 + 64);
  uint64_t v6 = ~v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : ImportSession.MeshAssetEstimate].Iterator>);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v1;
  v7[3] = v4;
  v7[4] = v6;
  v7[5] = 0;
  v7[6] = v5;
  swift_bridgeObjectRetain();
  return v7;
}

double ImportSession.MeshAssetEstimates.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 32) = 1;
    return result;
  }
  uint64_t v10 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v8);
  long long v11 = v10[1];
  *(_OWORD *)a3 = *v10;
  *(_OWORD *)(a3 + 16) = v11;
  *(unsigned char *)(a3 + 32) = 0;
  swift_bridgeObjectRelease();
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ImportSession.MeshAssetEstimates@<X0>(void *a1@<X8>)
{
  uint64_t v2 = ImportSession.MeshAssetEstimates.makeIterator()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ImportSession.MeshAssetEstimates()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance ImportSession.MeshAssetEstimates(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ImportSession.MeshAssetEstimates()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

RealityIO::ImportSession::MeshAssetEstimates __swiftcall ImportSession.gatherEntitiesWithMeshAssetEstimates()()
{
  uint64_t v2 = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = (void **)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v5 = *v4;
  aBlock[4] = partial apply for closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned Int, @unowned Int, @unowned Int, @unowned Int) -> ();
  void aBlock[3] = &block_descriptor_74;
  uint64_t v6 = _Block_copy(aBlock);
  id v7 = v5;
  swift_retain();
  swift_release();
  RIOImportSessionGatherMeshEstimates();
  _Block_release(v6);

  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  result.table._rawValue = (void *)swift_release();
  void *v2 = v8;
  return result;
}

uint64_t closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = String.init(cString:)();
  uint64_t v13 = v12;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(a6 + 16);
  *(void *)(a6 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, a4, a5, v11, v13, isUniquelyReferenced_nonNull_native);
  *(void *)(a6 + 16) = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned Int, @unowned Int, @unowned Int, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v11(a2, a3, a4, a5, a6);
  return swift_release();
}

void ImportSession.EvaluationFault.hash(into:)()
{
  uint64_t v1 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v21 = *(void *)(v1 - 8);
  uint64_t v22 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ImportSession.EvaluationFault(v0, (uint64_t)v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      Swift::UInt v14 = 2;
      goto LABEL_8;
    case 2u:
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
      Hasher._combine(_:)(3uLL);
      __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
      Swift::UInt32 v15 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
      Hasher._combine(_:)(v15);
      uint64_t v16 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
      Hasher._combine(_:)(HIDWORD(v16));
      __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
      Hasher._combine(_:)(v17);
      __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, MEMORY[0x263F161C8]);
      uint64_t v18 = v22;
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v18);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return;
    case 3u:
      Swift::UInt v14 = 4;
      goto LABEL_8;
    case 4u:
      Swift::UInt v14 = 5;
      goto LABEL_8;
    case 5u:
      Swift::UInt v14 = 6;
      goto LABEL_8;
    case 6u:
      Hasher._combine(_:)(0);
      return;
    default:
      Swift::UInt v14 = 1;
LABEL_8:
      Hasher._combine(_:)(v14);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return;
  }
}

Swift::Int ImportSession.EvaluationFault.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImportSession.EvaluationFault()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImportSession.EvaluationFault()
{
  return Hasher._finalize()();
}

uint64_t ImportSession.getEvaluationFaults()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v5, (uint64_t)v3, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10RealityKit15__REAssetBundleV13ExportOptionsV16DeploymentTargetV_s5NeverOSo25RERealityFileMajorVersionVTg503_s9c66IO13ImportSessionC19getEvaluationFaultsSDySSSayAC0F5FaultOGGyFSo25lmno11V0A3Kit15__ef3V13gh3V16iJ6VXEfU_SDySSSay0C2IO0rS0C0U5FaultOGGz_XxTf1cn_nTf4ng_n((uint64_t)v3, v4);
  swift_release();
  outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  uint64_t v6 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v7 = *v6;
  aBlock[4] = partial apply for closure #2 in ImportSession.getEvaluationFaults();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned RIOImportSessionFaultType, @unowned UnsafePointer<Int8>) -> ();
  void aBlock[3] = &block_descriptor_80;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  id v9 = v7;
  swift_release();
  RIOImportSessionGatherFaultRecords();
  _Block_release(v8);

  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v10;
}

uint64_t addFault #1 (_:_:) in ImportSession.getEvaluationFaults()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 16);
  if (!*(void *)(v9 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>);
    uint64_t v18 = *(void *)(type metadata accessor for ImportSession.EvaluationFault(0) - 8);
    unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_23AAB22A0;
    outlined init with copy of ImportSession.EvaluationFault(a3, v20 + v19);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    uint64_t v17 = v20;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>);
  uint64_t v13 = *(void *)(type metadata accessor for ImportSession.EvaluationFault(0) - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23AAB22A0;
  outlined init with copy of ImportSession.EvaluationFault(a3, v15 + v14);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v15);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *v8;
  *uint64_t v8 = 0x8000000000000000;
  uint64_t v17 = v12;
LABEL_6:
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t closure #1 in ImportSession.getEvaluationFaults()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v21 = a3;
  uint64_t v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  LODWORD(v7) = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  unint64_t v11 = (unint64_t)__REAssetBundle.ExportOptions.DeploymentTarget.version.getter() >> 32;
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  v12.n128_u64[0] = __PAIR64__(v11, v7);
  v12.n128_u64[1] = v13;
  __n128 v20 = v12;
  uint64_t v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = MEMORY[0x23ECBB170](v14 + 32, v20);
  uint64_t result = swift_release();
  if (!v15)
  {
    uint64_t v17 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v6, a1, v17);
    swift_storeEnumTagMultiPayload();
    addFault #1 (_:_:) in ImportSession.getEvaluationFaults()(0, 0xE000000000000000, (uint64_t)v6, v19);
    uint64_t result = outlined destroy of ImportSession.EvaluationFault((uint64_t)v6);
  }
  *uint64_t v21 = v15;
  return result;
}

uint64_t closure #2 in ImportSession.getEvaluationFaults()(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = String.init(cString:)();
  uint64_t v11 = v10;
  switch(a2)
  {
    case 0:
      break;
    default:
      *uint64_t v8 = String.init(cString:)();
      v8[1] = v12;
      break;
  }
  swift_storeEnumTagMultiPayload();
  addFault #1 (_:_:) in ImportSession.getEvaluationFaults()(v9, v11, (uint64_t)v8, a4);
  swift_bridgeObjectRelease();
  return outlined destroy of ImportSession.EvaluationFault((uint64_t)v8);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned RIOImportSessionFaultType, @unowned UnsafePointer<Int8>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

uint64_t ImportSession.getCompatibilityFaults(for:)(uint64_t a1)
{
  uint64_t v1 = ImportSession.getCompatibilityFaultsByPrimPath(for:)(a1);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  for (uint64_t i = MEMORY[0x263F8EE88]; ; uint64_t i = v12)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_5;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v6) {
      goto LABEL_25;
    }
    uint64_t v14 = *(void *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v6) {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(v2 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v6) {
          goto LABEL_25;
        }
        uint64_t v14 = *(void *)(v2 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 3;
          if (v13 + 3 >= v6) {
            goto LABEL_25;
          }
          uint64_t v14 = *(void *)(v2 + 8 * v8);
          if (!v14)
          {
            int64_t v8 = v13 + 4;
            if (v13 + 4 >= v6) {
              goto LABEL_25;
            }
            uint64_t v14 = *(void *)(v2 + 8 * v8);
            if (!v14) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    uint64_t v5 = (v14 - 1) & v14;
LABEL_5:
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    specialized Set.union<A>(_:)(v10, i);
    uint64_t v12 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 5;
  if (v15 >= v6)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return i;
  }
  uint64_t v14 = *(void *)(v2 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    uint64_t v14 = *(void *)(v2 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t addFault #1 (_:_:) in ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v27 - v13;
  int64_t v15 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  uint64_t v16 = *(void *)(a4 + 16);
  if (!*(void *)(v16 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>);
    unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_23AAB22A0;
    outlined init with copy of ImportSession.EvaluationFault(a3, v23 + v22);
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized Set.init(_nonEmptyArrayLiteral:)(v23);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v15;
    *int64_t v15 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, a1, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v21 = v29;
    goto LABEL_6;
  }
  uint64_t v29 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of ImportSession.EvaluationFault(a3, (uint64_t)v11);
  specialized Set._Variant.insert(_:)((uint64_t)v14, (uint64_t)v11);
  outlined destroy of ImportSession.EvaluationFault((uint64_t)v14);
  uint64_t v19 = v29;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *v15;
  *int64_t v15 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a1, a2, v20);
  uint64_t v21 = v28;
LABEL_6:
  *int64_t v15 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = String.init(cString:)();
  uint64_t v11 = v10;
  if (a2 == 4 || a2 == 3)
  {
    *uint64_t v8 = String.init(cString:)();
    v8[1] = v12;
    swift_storeEnumTagMultiPayload();
    addFault #1 (_:_:) in ImportSession.getCompatibilityFaultsByPrimPath(for:)(v9, v11, (uint64_t)v8, a4);
    swift_bridgeObjectRelease();
    return outlined destroy of ImportSession.EvaluationFault((uint64_t)v8);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.hash(into:)()
{
  uint64_t v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  Swift::UInt32 v8 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v8);
  uint64_t v9 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v9));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v10);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, MEMORY[0x263F161C8]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

Swift::Int __REAssetBundle.ExportOptions.DeploymentTarget.hashValue.getter()
{
  uint64_t v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  Swift::UInt32 v8 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v8);
  uint64_t v9 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v9));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v10);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, MEMORY[0x263F161C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __REAssetBundle.ExportOptions.DeploymentTarget()
{
  uint64_t v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  Swift::UInt32 v8 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v8);
  uint64_t v9 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v9));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v10);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, MEMORY[0x263F161C8]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAssetBundle.ExportOptions.DeploymentTarget()
{
  uint64_t v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  Swift::UInt32 v8 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v8);
  uint64_t v9 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v9));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v10);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, MEMORY[0x263F161C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return Hasher._finalize()();
}

uint64_t static ImportSession.primPathMetadataKey.getter()
{
  RIOImportSessionPrimPathMetadataKey();
  return String.init(cString:)();
}

uint64_t static ImportSession.resolvedPathMetadataKey.getter()
{
  RIOImportSessionResolvedPathMetadataKey();
  return String.init(cString:)();
}

uint64_t static ImportSession.assetInfoMetadataKey.getter()
{
  RIOImportSessionAssetInfoMetadataKey();
  return String.init(cString:)();
}

uint64_t partial apply for closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1, int a2, uint64_t a3)
{
  return closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:)(a1, a2, a3, v3);
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t outlined assign with take of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AA34EC8()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ImportSession.register(builderGenerator:)(void *a1)
{
  return closure #1 in ImportSession.register(builderGenerator:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for ImportSession(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for ImportSession);
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  Swift::UInt32 v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t result = *(void *)(v17 + 8 * v10);
        *(void *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)a2, a1, v16);
      id v21 = a2;
      return 0;
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, void *a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[8] = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v6 = a2;
  v4[9] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[10] = specialized _NativeDictionary.subscript.modify(v4 + 4, v6, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 80))();

  v2(v1, 0);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, void *a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  Swift::UInt32 v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *Swift::UInt32 v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (void *)(*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *a1;
  if (*a1)
  {
    Swift::UInt32 v8 = (void *)*a3;
    if (a2)
    {
      *(void *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)a5, v7, v8);
      id v10 = a5;
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = v2;
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v9;
    }
  }
  else
  {
    id v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v4 = a2((char *)v10, v7, v5);
    MEMORY[0x23ECBE8B0](v10, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  id v21 = (unint64_t *)result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      do
      {
LABEL_5:
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v5 << 6);
        }
        else
        {
          BOOL v11 = __OFADD__(v5++, 1);
          if (v11) {
            goto LABEL_36;
          }
          if (v5 >= v10) {
            return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14)
          {
            int64_t v15 = v5 + 1;
            if (v5 + 1 >= v10) {
              return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v5 + 2;
              if (v5 + 2 >= v10) {
                return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
              }
              unint64_t v14 = *(void *)(v6 + 8 * v15);
              if (!v14)
              {
                int64_t v15 = v5 + 3;
                if (v5 + 3 >= v10) {
                  return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
                }
                unint64_t v14 = *(void *)(v6 + 8 * v15);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v5 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_38;
                    }
                    if (v5 >= v10) {
                      return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
                    }
                    unint64_t v14 = *(void *)(v6 + 8 * v5);
                    ++v15;
                    if (v14) {
                      goto LABEL_17;
                    }
                  }
                }
              }
            }
            int64_t v5 = v15;
          }
LABEL_17:
          unint64_t v9 = (v14 - 1) & v14;
          unint64_t v13 = __clz(__rbit64(v14)) + (v5 << 6);
        }
        uint64_t v16 = *(void *)(*(void *)(a3 + 48) + 8 * v13);
        if (one-time initialization token for realityKitComponentClasses != -1) {
          swift_once();
        }
        uint64_t result = swift_beginAccess();
        uint64_t v17 = *((void *)static ImportSession.realityKitComponentClasses + 2);
      }
      while (!v17);
      if (*((void *)static ImportSession.realityKitComponentClasses + 4) != v16) {
        break;
      }
LABEL_4:
      *(unint64_t *)((char *)v21 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      BOOL v11 = __OFADD__(v4++, 1);
      if (v11) {
        goto LABEL_37;
      }
    }
    if (v17 != 1)
    {
      if (*((void *)static ImportSession.realityKitComponentClasses + 5) == v16) {
        goto LABEL_4;
      }
      if (v17 != 2) {
        break;
      }
    }
  }
  uint64_t v18 = 6;
  while (1)
  {
    uint64_t v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1)) {
      break;
    }
    if (*((void *)static ImportSession.realityKitComponentClasses + v18) == v16) {
      goto LABEL_4;
    }
    ++v18;
    if (v19 == v17) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v21;

  id v21 = (unint64_t *)result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    while (1)
    {
LABEL_5:
      if (v9)
      {
        unint64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        BOOL v11 = __OFADD__(v5++, 1);
        if (v11) {
          goto LABEL_36;
        }
        if (v5 >= v10) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v15 = v5 + 1;
          if (v5 + 1 >= v10) {
            return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
          }
          unint64_t v14 = *(void *)(v6 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v5 + 2;
            if (v5 + 2 >= v10) {
              return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v5 + 3;
              if (v5 + 3 >= v10) {
                return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
              }
              unint64_t v14 = *(void *)(v6 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v5 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v5 >= v10) {
                    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
                  }
                  unint64_t v14 = *(void *)(v6 + 8 * v5);
                  ++v15;
                  if (v14) {
                    goto LABEL_17;
                  }
                }
              }
            }
          }
          int64_t v5 = v15;
        }
LABEL_17:
        unint64_t v9 = (v14 - 1) & v14;
        unint64_t v13 = __clz(__rbit64(v14)) + (v5 << 6);
      }
      uint64_t v16 = *(void *)(*(void *)(a3 + 48) + 8 * v13);
      if (one-time initialization token for realityKitComponentClasses != -1) {
        swift_once();
      }
      uint64_t result = swift_beginAccess();
      uint64_t v17 = *((void *)static ImportSession.realityKitComponentClasses + 2);
      if (v17) {
        break;
      }
LABEL_4:
      *(unint64_t *)((char *)v21 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      BOOL v11 = __OFADD__(v4++, 1);
      if (v11) {
        goto LABEL_37;
      }
    }
    if (*((void *)static ImportSession.realityKitComponentClasses + 4) != v16)
    {
      if (v17 == 1) {
        goto LABEL_4;
      }
      if (*((void *)static ImportSession.realityKitComponentClasses + 5) != v16) {
        break;
      }
    }
  }
  if (v17 == 2) {
    goto LABEL_4;
  }
  uint64_t v18 = 6;
  while (1)
  {
    uint64_t v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1)) {
      break;
    }
    if (*((void *)static ImportSession.realityKitComponentClasses + v18) == v16) {
      goto LABEL_5;
    }
    ++v18;
    if (v19 == v17) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, RETypeID>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v28 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = v28[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = v28[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = v28[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    Swift::UInt v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    long long v29 = *(_OWORD *)(*(void *)(v4 + 56) + 16 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v9 + 48) + 8 * v22) = v18;
    *(_OWORD *)(*(void *)(v9 + 56) + 16 * v22) = v29;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = ~v2;
  uint64_t v5 = -v2;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(a1 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : ImportSession.MeshAssetEstimate].Iterator>);
  uint64_t inited = (void *)swift_initStackObject();
  inited[2] = a1;
  inited[3] = v3;
  inited[4] = v4;
  inited[5] = 0;
  inited[6] = v7;
  swift_bridgeObjectRetain();
  uint64_t result = specialized _IteratorBox.next()((uint64_t)&v31);
  uint64_t v10 = v32;
  uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  uint64_t v12 = 0;
  if (v32)
  {
    uint64_t v13 = MEMORY[0x263F8EE78] + 32;
    long long v15 = v33;
    long long v14 = v34;
    while (1)
    {
      uint64_t v16 = v31;
      if (!v12)
      {
        unint64_t v17 = v11[3];
        if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_27;
        }
        long long v29 = v15;
        long long v30 = v14;
        int64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
        if (v18 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v18;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: ImportSession.MeshAssetEstimate)>);
        unint64_t v20 = (void *)swift_allocObject();
        uint64_t v21 = (uint64_t)(_swift_stdlib_malloc_size(v20) - 32) / 48;
        v20[2] = v19;
        v20[3] = 2 * v21;
        unint64_t v22 = (unint64_t)(v20 + 4);
        uint64_t v23 = v11[3] >> 1;
        if (v11[2])
        {
          if (v20 != v11 || v22 >= (unint64_t)&v11[6 * v23 + 4]) {
            memmove(v20 + 4, v11 + 4, 48 * v23);
          }
          v11[2] = 0;
        }
        uint64_t v13 = v22 + 48 * v23;
        uint64_t v12 = (v21 & 0x7FFFFFFFFFFFFFFFLL) - v23;
        uint64_t result = swift_release();
        uint64_t v11 = v20;
        long long v15 = v29;
        long long v14 = v30;
      }
      BOOL v25 = __OFSUB__(v12--, 1);
      if (v25) {
        break;
      }
      *(void *)uint64_t v13 = v16;
      *(void *)(v13 + 8) = v10;
      *(_OWORD *)(v13 + 16) = v15;
      *(_OWORD *)(v13 + 32) = v14;
      uint64_t result = specialized _IteratorBox.next()((uint64_t)&v31);
      uint64_t v10 = v32;
      v13 += 48;
      long long v15 = v33;
      long long v14 = v34;
      if (!v32) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_22:
  swift_setDeallocating();
  uint64_t result = outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
  unint64_t v26 = v11[3];
  if (v26 < 2) {
    return (uint64_t)v11;
  }
  unint64_t v27 = v26 >> 1;
  BOOL v25 = __OFSUB__(v27, v12);
  uint64_t v28 = v27 - v12;
  if (!v25)
  {
    v11[2] = v28;
    return (uint64_t)v11;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)()
{
  ImportSession.TextureOperatorContainer.makeIterator()();
  uint64_t result = dispatch thunk of _AnyIteratorBoxBase.next()();
  long long v1 = v18;
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  uint64_t v3 = 0;
  if ((void)v18)
  {
    uint64_t v4 = v17;
    for (uint64_t i = MEMORY[0x263F8EE78] + 32; ; i += 24)
    {
      if (!v3)
      {
        unint64_t v6 = v2[3];
        if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_23;
        }
        long long v16 = v1;
        int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        if (v7 <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v7;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: OpaquePointer)>);
        uint64_t v9 = (void *)swift_allocObject();
        uint64_t v10 = (uint64_t)(_swift_stdlib_malloc_size(v9) - 32) / 24;
        void v9[2] = v8;
        v9[3] = 2 * v10;
        unint64_t v11 = (unint64_t)(v9 + 4);
        uint64_t v12 = v2[3] >> 1;
        if (v2[2])
        {
          if (v9 != v2 || v11 >= (unint64_t)&v2[3 * v12 + 4]) {
            memmove(v9 + 4, v2 + 4, 24 * v12);
          }
          v2[2] = 0;
        }
        uint64_t i = v11 + 24 * v12;
        uint64_t v3 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - v12;
        uint64_t result = swift_release();
        uint64_t v2 = v9;
        long long v1 = v16;
      }
      if (__OFSUB__(v3--, 1)) {
        break;
      }
      *(void *)uint64_t i = v4;
      *(_OWORD *)(i + 8) = v1;
      uint64_t result = dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t v4 = v17;
      long long v1 = v18;
    }
    __break(1u);
LABEL_23:
    __break(1u);
    __break(1u);
  }
  else
  {
    swift_release();
    unint64_t v15 = v2[3];
    if (v15 >= 2) {
      v2[2] = v15 >> 1;
    }
    return (uint64_t)v2;
  }
  return result;
}

uint64_t specialized static __REAssetBundle.ExportOptions.DeploymentTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v48 = (char *)&v47 - v7;
  uint64_t v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v53 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v55 = (char *)&v47 - v12;
  MEMORY[0x270FA5388](v13);
  id v52 = (char *)&v47 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v18 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  unint64_t v24 = (char *)&v47 - v23;
  uint64_t v56 = a1;
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  uint64_t v54 = a2;
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v59 == v57 && v60 == v58) {
    char v25 = 1;
  }
  else {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  v26(v21, v18);
  v26(v24, v18);
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v27(v17, v56, v8);
  uint64_t v28 = v52;
  uint64_t v29 = v54;
  v27(v52, v54, v8);
  if (v25)
  {
    uint64_t v30 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    int v32 = v31;
    BOOL v34 = v30 == __REAssetBundle.ExportOptions.DeploymentTarget.version.getter() && v32 == v33;
  }
  else
  {
    BOOL v34 = 0;
  }
  uint64_t v35 = v28;
  uint64_t v36 = v53;
  id v37 = v55;
  uint64_t v38 = *(void (**)(char *, uint64_t))(v9 + 8);
  v38(v35, v8);
  v38(v17, v8);
  v27(v37, v56, v8);
  v27(v36, v29, v8);
  if (v34)
  {
    uint64_t v39 = v48;
    __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
    v40 = v49;
    __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
    char v41 = static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)();
    id v42 = *(void (**)(char *, uint64_t))(v50 + 8);
    v43 = v40;
    uint64_t v44 = v51;
    v42(v43, v51);
    uint64_t v45 = v44;
    id v37 = v55;
    v42(v39, v45);
  }
  else
  {
    char v41 = 0;
  }
  v38(v36, v8);
  v38(v37, v8);
  return v41 & 1;
}

uint64_t specialized static ImportSession.EvaluationFault.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a2;
  uint64_t v3 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x270FA5388](v3);
  id v42 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v42 - v9);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v42 - v12);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v42 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (uint64_t *)((char *)&v42 - v18);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (uint64_t *)((char *)&v42 - v21);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
  MEMORY[0x270FA5388](v23 - 8);
  char v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = &v25[*(int *)(v26 + 56)];
  outlined init with copy of ImportSession.EvaluationFault(a1, (uint64_t)v25);
  outlined init with copy of ImportSession.EvaluationFault(v45, (uint64_t)v27);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of ImportSession.EvaluationFault((uint64_t)v25, (uint64_t)v19);
      uint64_t v31 = *v19;
      uint64_t v30 = v19[1];
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_21;
      }
      if (v31 == *(void *)v27 && v30 == *((void *)v27 + 1)) {
        goto LABEL_19;
      }
      goto LABEL_17;
    case 2u:
      outlined init with copy of ImportSession.EvaluationFault((uint64_t)v25, (uint64_t)v16);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v34 = (uint64_t)v42;
        uint64_t v33 = v43;
        uint64_t v35 = v27;
        uint64_t v36 = v44;
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v35, v44);
        char v37 = specialized static __REAssetBundle.ExportOptions.DeploymentTarget.== infix(_:_:)((uint64_t)v16, v34);
        uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
        v38(v34, v36);
        v38((uint64_t)v16, v36);
        outlined destroy of ImportSession.EvaluationFault((uint64_t)v25);
        return v37 & 1;
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v44);
      goto LABEL_22;
    case 3u:
      outlined init with copy of ImportSession.EvaluationFault((uint64_t)v25, (uint64_t)v13);
      uint64_t v29 = *v13;
      uint64_t v28 = v13[1];
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_13;
      }
      goto LABEL_21;
    case 4u:
      outlined init with copy of ImportSession.EvaluationFault((uint64_t)v25, (uint64_t)v10);
      uint64_t v29 = *v10;
      uint64_t v28 = v10[1];
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_21;
      }
      goto LABEL_13;
    case 5u:
      outlined init with copy of ImportSession.EvaluationFault((uint64_t)v25, (uint64_t)v7);
      uint64_t v29 = *v7;
      uint64_t v28 = v7[1];
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_21;
      }
      goto LABEL_13;
    case 6u:
      if (swift_getEnumCaseMultiPayload() == 6) {
        goto LABEL_27;
      }
      goto LABEL_22;
    default:
      outlined init with copy of ImportSession.EvaluationFault((uint64_t)v25, (uint64_t)v22);
      uint64_t v29 = *v22;
      uint64_t v28 = v22[1];
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_21:
        swift_bridgeObjectRelease();
LABEL_22:
        outlined destroy of Any?((uint64_t)v25, &demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
        goto LABEL_23;
      }
LABEL_13:
      if (v29 == *(void *)v27 && v28 == *((void *)v27 + 1))
      {
LABEL_19:
        swift_bridgeObjectRelease_n();
      }
      else
      {
LABEL_17:
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
        {
          outlined destroy of ImportSession.EvaluationFault((uint64_t)v25);
LABEL_23:
          char v37 = 0;
          return v37 & 1;
        }
      }
LABEL_27:
      outlined destroy of ImportSession.EvaluationFault((uint64_t)v25);
      char v37 = 1;
      return v37 & 1;
  }
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10RealityKit15__REAssetBundleV13ExportOptionsV16DeploymentTargetV_s5NeverOSo25RERealityFileMajorVersionVTg503_s9c66IO13ImportSessionC19getEvaluationFaultsSDySSSayAC0F5FaultOGGyFSo25lmno11V0A3Kit15__ef3V13gh3V16iJ6VXEfU_SDySSSay0C2IO0rS0C0U5FaultOGGz_XxTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v11, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1) {
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  closure #1 in ImportSession.getEvaluationFaults()((uint64_t)v8, a2, v13);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v13[0];
}

unint64_t lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError;
  if (!lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError;
  if (!lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError);
  }
  return result;
}

void *specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  getEngine(_:)(a2);
  uint64_t v6 = (void *)RIOImportSessionCreateWithStage();
  swift_allocObject();
  return ImportSession.init<A>(core:entityType:)(v6, a5);
}

uint64_t sub_23AA36BA0()
{
  return objectdestroy_16Tm(MEMORY[0x263F8EF20]);
}

uint64_t _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in static ImportSession.allComponents.getter(uint64_t a1)
{
  return closure #1 in static ImportSession.allComponents.getter(a1, v1);
}

uint64_t sub_23AA36C08()
{
  return objectdestroy_16Tm(MEMORY[0x263F8EED8]);
}

uint64_t type metadata accessor for ImportSession.TextureOperatorContainer()
{
  return self;
}

uint64_t sub_23AA36C44()
{
  return objectdestroy_16Tm(MEMORY[0x263F8EED8]);
}

uint64_t sub_23AA36C5C()
{
  return objectdestroy_16Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_16Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();
  return MEMORY[0x270FA0238](v1, 32, 7);
}

uint64_t partial apply for closure #1 in ImportSession.gatherTexturesAsImportOperations(onlyUsedTextures:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in ImportSession.gatherUsedTexturesAsImportOperations()(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t partial apply for closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates()(a1, a2, a3, a4, a5, v5);
}

uint64_t partial apply for closure #2 in ImportSession.getEvaluationFaults()(uint64_t a1, int a2, uint64_t a3)
{
  return closure #2 in ImportSession.getEvaluationFaults()(a1, a2, a3, v3);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ImportSession.TextureOperatorContainer()
{
  return lazy protocol witness table accessor for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>, &demangling cache variable for type metadata for AnyIterator<(key: String, value: OpaquePointer)>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ImportSession.MeshAssetEstimates()
{
  return lazy protocol witness table accessor for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<(key: String, value: ImportSession.MeshAssetEstimate)> and conformance AnyIterator<A>, &demangling cache variable for type metadata for AnyIterator<(key: String, value: ImportSession.MeshAssetEstimate)>);
}

uint64_t lazy protocol witness table accessor for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ImportSession.EvaluationFault()
{
  return _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type ImportSession.EvaluationFault and conformance ImportSession.EvaluationFault, (void (*)(uint64_t))type metadata accessor for ImportSession.EvaluationFault);
}

uint64_t base witness table accessor for Equatable in __REAssetBundle.ExportOptions.DeploymentTarget()
{
  return _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.DeploymentTarget and conformance __REAssetBundle.ExportOptions.DeploymentTarget, MEMORY[0x263F161C0]);
}

uint64_t sub_23AA36E70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  return outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v3, a2, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
}

uint64_t sub_23AA36EDC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_83Tm(a1, MEMORY[0x263F37AE0], a2);
}

uint64_t sub_23AA36EF4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_84Tm(a1, a2, a3, a4, MEMORY[0x263F37AF0]);
}

uint64_t sub_23AA36F0C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_83Tm(a1, MEMORY[0x263F37AE8], a2);
}

uint64_t keypath_get_83Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(*(void *)(*(void *)(*(void *)a1 + 16) + 16));
  *a3 = result;
  return result;
}

uint64_t sub_23AA36F5C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_84Tm(a1, a2, a3, a4, MEMORY[0x263F37AF8]);
}

uint64_t keypath_set_84Tm(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(*(void *)(*(void *)(*(void *)a2 + 16) + 16), *a1);
}

uint64_t ObjC metadata update function for ImportSession()
{
  return type metadata accessor for ImportSession(0);
}

void type metadata completion function for ImportSession()
{
  type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ImportSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ImportSession);
}

uint64_t dispatch thunk of ImportSession.deploymentTarget.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ImportSession.deploymentTarget.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ImportSession.deploymentTarget.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ImportSession.register(builderGenerator:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ImportSession.__allocating_init<A>(core:entityType:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t getEnumTagSinglePayload for ImportSession.LoadError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ImportSession.LoadError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23AA37288);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImportSession.LoadError()
{
  return &type metadata for ImportSession.LoadError;
}

uint64_t method lookup function for ImportSession.TextureOperatorContainer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ImportSession.TextureOperatorContainer);
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.keys.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.values.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.makeIterator()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.setDownsample(factor:for:in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for ImportSession.MeshAssetEstimate()
{
  return &type metadata for ImportSession.MeshAssetEstimate;
}

ValueMetadata *type metadata accessor for ImportSession.MeshAssetEstimates()
{
  return &type metadata for ImportSession.MeshAssetEstimates;
}

uint64_t *initializeBufferWithCopyOfBuffer for ImportSession.EvaluationFault(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 3u:
      case 4u:
      case 5u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v10 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ImportSession.EvaluationFault(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v3 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for ImportSession.EvaluationFault(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 4u:
    case 5u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 2u:
      uint64_t v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for ImportSession.EvaluationFault(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ImportSession.EvaluationFault((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 3u:
      case 4u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for ImportSession.EvaluationFault(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ImportSession.EvaluationFault(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ImportSession.EvaluationFault((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ImportSession.EvaluationFault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ImportSession.EvaluationFault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for ImportSession.EvaluationFault()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ImportSession.EvaluationFault()
{
  uint64_t result = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_23AA37C68()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #5 in ImportSession.registerDefaultSwiftBuilders()()
{
  return closure #5 in ImportSession.registerDefaultSwiftBuilders()();
}

uint64_t objectdestroy_5Tm()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_23AA37D84()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #2 in ImportSession.init<A>(core:entityType:)()
{
  return closure #1 in closure #2 in ImportSession.init<A>(core:entityType:)();
}

id static ToolsFoundations.Token.Scope.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Xform.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Mesh.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Capsule.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Cone.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Cube.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Cylinder.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Sphere.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.PreliminaryText.getter@<X0>(void *a1@<X8>)
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  *a1 = result;
  return result;
}

uint64_t ToolsFoundations.Token.schemaPropertyNames()()
{
  uint64_t v0 = (void *)RIOPxrTfTokenCopyTypeSchemaPropertyNames();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();

    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v1;
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v7 = MEMORY[0x23ECBA630](i, v2);
        unint64_t v9 = *(void *)(v5 + 16);
        unint64_t v8 = *(void *)(v5 + 24);
        if (v9 >= v8 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        }
        *(void *)(v5 + 16) = v9 + 1;
        *(void *)(v5 + 8 * v9 + 32) = v7;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v3; ++j)
      {
        unint64_t v11 = *(void *)(v1 + 16);
        unint64_t v12 = *(void *)(v1 + 24);
        id v13 = *(id *)(v2 + 8 * j + 32);
        if (v11 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        }
        *(void *)(v1 + 16) = v11 + 1;
        *(void *)(v1 + 8 * v11 + 32) = v13;
      }
    }
    swift_bridgeObjectRelease();

    return v5;
  }
  __break(1u);
  return result;
}

void RigidSchema.xformTranslateOp.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6B0;
}

uint64_t (*RigidSchema.xformTranslateOp.modify(void *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6B0;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.xformOrientOp.getter(char *a1@<X8>)
{
  a1[15] = -18;
}

void RigidSchema.xformOrientOp.getter(char *a1@<X8>)
{
  a1[15] = -18;
}

uint64_t (*specialized RigidSchema.xformOrientOp.modify(char *a1))()
{
  a1[15] = -18;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.xformOrientOp.modify(char *a1))()
{
  a1[15] = -18;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.xformScaleOp.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

void RigidSchema.xformScaleOp.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t (*specialized RigidSchema.xformScaleOp.modify(uint64_t a1))()
{
  *(_WORD *)(a1 + 14) = -4864;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.xformScaleOp.modify(uint64_t a1))()
{
  *(_WORD *)(a1 + 14) = -4864;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.xformOpOrder.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void RigidSchema.xformOpOrder.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t RigidSchema.xformOpOrder.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*specialized RigidSchema.xformOpOrder.modify(uint64_t a1))()
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.xformOpOrder.modify(uint64_t a1))()
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for AttributeMetadata;
}

void specialized RigidSchema.radius.getter(void *a1@<X8>)
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
}

void RigidSchema.radius.getter(void *a1@<X8>)
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
}

uint64_t (*specialized RigidSchema.radius.modify(void *a1))()
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.radius.modify(void *a1))()
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.height.getter(void *a1@<X8>)
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
}

void RigidSchema.height.getter(void *a1@<X8>)
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
}

uint64_t (*specialized RigidSchema.height.modify(void *a1))()
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.height.modify(void *a1))()
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.size.getter(void *a1@<X8>)
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
}

void RigidSchema.size.getter(void *a1@<X8>)
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
}

uint64_t (*specialized RigidSchema.size.modify(void *a1))()
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.size.modify(void *a1))()
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.content.getter(void *a1@<X8>)
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
}

void RigidSchema.content.getter(void *a1@<X8>)
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
}

uint64_t (*specialized RigidSchema.content.modify(void *a1))()
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.content.modify(void *a1))()
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.font.getter(void *a1@<X8>)
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
}

void RigidSchema.font.getter(void *a1@<X8>)
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
}

uint64_t (*specialized RigidSchema.font.modify(void *a1))()
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.font.modify(void *a1))()
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.pointSize.getter(void *a1@<X8>)
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
}

void RigidSchema.pointSize.getter(void *a1@<X8>)
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
}

uint64_t (*specialized RigidSchema.pointSize.modify(void *a1))()
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.pointSize.modify(void *a1))()
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.width.getter(void *a1@<X8>)
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
}

void RigidSchema.width.getter(void *a1@<X8>)
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
}

uint64_t (*specialized RigidSchema.width.modify(void *a1))()
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.width.modify(void *a1))()
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.depth.getter(void *a1@<X8>)
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
}

void RigidSchema.depth.getter(void *a1@<X8>)
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
}

uint64_t (*specialized RigidSchema.depth.modify(void *a1))()
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.depth.modify(void *a1))()
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

void RigidSchema.horizontalAlignment.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023AAAF6D0;
}

uint64_t (*RigidSchema.horizontalAlignment.modify(void *a1))()
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023AAAF6D0;
  return destroy for RelationshipMetadata;
}

void RigidSchema.verticalAlignment.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6F0;
}

uint64_t (*RigidSchema.verticalAlignment.modify(void *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6F0;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.wrapMode.getter(void *a1@<X8>)
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
}

void RigidSchema.wrapMode.getter(void *a1@<X8>)
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
}

uint64_t key path setter for RigidSchema.xformTranslateOp : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  v9[0] = v7;
  v9[1] = v6;
  swift_bridgeObjectRetain();
  return a5(v9);
}

uint64_t (*specialized RigidSchema.wrapMode.modify(void *a1))()
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.wrapMode.modify(void *a1))()
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*protocol witness for Capsule.radius.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.radius.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Capsule.height.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.height.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Cube.size.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.size.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.content.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.content.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.font.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.font.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.pointSize.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.pointSize.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.width.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.width.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.depth.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.depth.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

void protocol witness for PreliminaryText.horizontalAlignment.getter in conformance Schema(void *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023AAAF6D0;
}

uint64_t (*protocol witness for PreliminaryText.horizontalAlignment.modify in conformance Schema(void *a1))()
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023AAAF6D0;
  return destroy for RelationshipMetadata;
}

void protocol witness for PreliminaryText.verticalAlignment.getter in conformance Schema(void *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6F0;
}

uint64_t (*protocol witness for PreliminaryText.verticalAlignment.modify in conformance Schema(void *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6F0;
  return destroy for RelationshipMetadata;
}

uint64_t (*protocol witness for PreliminaryText.wrapMode.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.wrapMode.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

void protocol witness for Xformable.xformTranslateOp.getter in conformance Schema(void *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6B0;
}

uint64_t (*protocol witness for Xformable.xformTranslateOp.modify in conformance Schema(void *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023AAAF6B0;
  return destroy for RelationshipMetadata;
}

uint64_t (*protocol witness for Xformable.xformOrientOp.modify in conformance Schema(char **a1))()
{
  uint64_t v2 = (char *)malloc(0x28uLL);
  *a1 = v2;
  *((void *)v2 + 4) = specialized RigidSchema.xformOrientOp.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Xformable.xformScaleOp.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.xformScaleOp.modify((uint64_t)v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Xformable.xformOpOrder.modify in conformance Schema(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.xformOpOrder.modify((uint64_t)v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

void protocol witness for Capsule.radius.modify in conformance Schema(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void __swiftcall UsdGeomXformable.localTransformation(at:)(simd_double4x4_optional *__return_ptr retstr, Swift::Double at)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  id v4 = *(id *)((*(uint64_t (**)(void))(*(void *)(v2 + 8) + 8))() + 16);
  swift_release();
  int LocalTransformation = RIOPxrUsdGeomXformableXformQueryGetLocalTransformation();

  if (LocalTransformation)
  {
    memset(v6, 0, 128);
    _s9RealityIO7Frame4DVSgWOi_((uint64_t)v6);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of simd_double4x4?((uint64_t)v6, (uint64_t)v7);
  outlined init with take of simd_double4x4?((uint64_t)v7, (uint64_t)retstr);
}

void __swiftcall UsdGeomXformable.localTransformation(at:)(simd_float4x4_optional *__return_ptr retstr, Swift::Double at)
{
  UsdGeomXformable.localTransformation(at:)(&v8, at);
  outlined init with take of simd_double4x4?((uint64_t)&v8, (uint64_t)v9);
  int v3 = _sSo14simd_double4x4aSgWOg((uint64_t)v9);
  float32x4_t v4 = 0uLL;
  float32x4_t v5 = 0uLL;
  float32x4_t v6 = 0uLL;
  float32x4_t v7 = 0uLL;
  if (v3 != 1)
  {
    float32x4_t v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[0]), v9[1]);
    float32x4_t v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[2]), v9[3]);
    float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[4]), v9[5]);
    float32x4_t v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[6]), v9[7]);
  }
  retstr->value.columns[0] = (simd_float4)v4;
  retstr->value.columns[1] = (simd_float4)v5;
  retstr->value.columns[2] = (simd_float4)v6;
  retstr->value.columns[3] = (simd_float4)v7;
  retstr->is_nil = v3 == 1;
}

uint64_t UsdGeomXformable.timeSamples.getter(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)((*(uint64_t (**)(void))(*(void *)(a2 + 8) + 8))() + 16);
  swift_release();
  CopyTimeSamples = (void *)RIOPxrUsdGeomXformableXformQueryCopyTimeSamples();

  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  return MEMORY[0x263F8EE78];
}

void XformPrim.__allocating_init(prim:type:)()
{
}

void XformPrim.init(prim:type:)()
{
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t XformPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Xform>);
}

uint64_t XformPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Xform>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to XformPrim.__allocating_init(prim:type:)()
{
}

void MeshPrim.__allocating_init(prim:type:)()
{
}

void MeshPrim.init(prim:type:)()
{
}

uint64_t MeshPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Mesh>);
}

uint64_t XformPrim.deinit(uint64_t *a1)
{
  swift_release();
  outlined destroy of Any?(v1 + 24, a1);
  return v1;
}

uint64_t MeshPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Mesh>);
}

uint64_t XformPrim.__deallocating_deinit(uint64_t *a1)
{
  swift_release();
  outlined destroy of Any?(v1 + 24, a1);
  return swift_deallocClassInstance();
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to MeshPrim.__allocating_init(prim:type:)()
{
}

void CapsulePrim.__allocating_init(prim:type:)()
{
}

void CapsulePrim.init(prim:type:)()
{
}

uint64_t CapsulePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Capsule>);
}

uint64_t CapsulePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Capsule>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to CapsulePrim.__allocating_init(prim:type:)()
{
}

void ConePrim.__allocating_init(prim:type:)()
{
}

void ConePrim.init(prim:type:)()
{
}

uint64_t ConePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Cone>);
}

uint64_t ConePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Cone>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to ConePrim.__allocating_init(prim:type:)()
{
}

void CubePrim.__allocating_init(prim:type:)()
{
}

void CubePrim.init(prim:type:)()
{
}

uint64_t CubePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Cube>);
}

uint64_t CubePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Cube>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to CubePrim.__allocating_init(prim:type:)()
{
}

void CylinderPrim.__allocating_init(prim:type:)()
{
}

void CylinderPrim.init(prim:type:)()
{
}

uint64_t CylinderPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Cylinder>);
}

uint64_t CylinderPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Cylinder>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to CylinderPrim.__allocating_init(prim:type:)()
{
}

void SpherePrim.__allocating_init(prim:type:)()
{
}

void SpherePrim.init(prim:type:)()
{
}

uint64_t SpherePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Sphere>);
}

uint64_t SpherePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Sphere>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to SpherePrim.__allocating_init(prim:type:)()
{
}

void PreliminaryTextPrim.__allocating_init(prim:type:)()
{
}

void PreliminaryTextPrim.init(prim:type:)()
{
}

uint64_t PreliminaryTextPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<PreliminaryText>);
}

uint64_t PreliminaryTextPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<PreliminaryText>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to PreliminaryTextPrim.__allocating_init(prim:type:)()
{
}

void *Stage.xform(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for XformPrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

void *Stage.mesh(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for MeshPrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

void *Stage.capsule(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for CapsulePrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

void *Stage.cone(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for ConePrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

void *Stage.cube(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for CubePrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

void *Stage.cylinder(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for CylinderPrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

void *Stage.sphere(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for SpherePrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

void *Stage.preliminaryText(at:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for PreliminaryTextPrim(0);
  float32x4_t v4 = (void *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

uint64_t Stage.materialBindingAPI(at:)()
{
  id v0 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = PrimIfNeeded;
  type metadata accessor for MaterialBindingAPI();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t MaterialBindingAPI.prim.getter()
{
  return swift_retain();
}

uint64_t MaterialBindingAPI.deinit()
{
  swift_release();
  return v0;
}

uint64_t MaterialBindingAPI.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UsdSchemaBase.prim.getter in conformance MaterialBindingAPI()
{
  return swift_retain();
}

uint64_t MaterialBindingAPI.bind(material:)()
{
  uint64_t v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v1 = RIOPxrUsdShadeMaterialBindingAPIBind();

  return v1;
}

uint64_t MaterialBindingAPI.bind(material:collection:)()
{
  uint64_t v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v1 = RIOPxrUsdShadeMaterialBindingAPIBindCollection();

  return v1;
}

Swift::Bool __swiftcall MaterialBindingAPI.unbind()()
{
  uint64_t v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  char v1 = RIOPxrUsdShadeMaterialBindingAPIUnbind();

  return v1;
}

uint64_t MaterialBindingAPI.unbind(collection:)()
{
  uint64_t v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v1 = RIOPxrUsdShadeMaterialBindingAPIUnbindCollection();

  return v1;
}

void MaterialBindingAPI.directBinding.getter(uint64_t *a1@<X8>)
{
}

void MaterialBindingAPI.materialBindingStrengthForDirectBinding.getter(uint64_t *a1@<X8>)
{
}

void key path getter for MaterialBindingAPI.materialBindingStrengthForDirectBinding : MaterialBindingAPI(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v3 = RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding();

  *a1 = v3;
}

void key path setter for MaterialBindingAPI.materialBindingStrengthForDirectBinding : MaterialBindingAPI(id *a1)
{
  id v2 = *a1;
  uint64_t v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();
}

void MaterialBindingAPI.materialBindingStrengthForDirectBinding.setter(id *a1)
{
  id v2 = *a1;
  uint64_t v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();
}

void (*MaterialBindingAPI.materialBindingStrengthForDirectBinding.modify(uint64_t *a1))(void **a1, char a2)
{
  a1[1] = *(void *)(v1 + 16);
  uint64_t v3 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v4 = RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding();

  *a1 = v4;
  return MaterialBindingAPI.materialBindingStrengthForDirectBinding.modify;
}

void MaterialBindingAPI.materialBindingStrengthForDirectBinding.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    id v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();
  }
  else
  {
    id v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();
  }
}

uint64_t MaterialBindingAPI.collectionBindings.getter()
{
  uint64_t v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  id v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindings();

  if (v2)
  {
    type metadata accessor for RIOPxrUsdShadeMaterialBindingAPICollectionBindingRef(0);
    id v3 = v2;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  unint64_t v4 = MEMORY[0x263F8EE78];
  swift_retain();
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo042RIOPxrUsdShadeMaterialBindingAPICollectionH3RefaG_9RealityIO0g10CollectionH0Cs5NeverOTg503_s9k4IO18gh33APIC18collectionBindingsSayAA0c10m13D0CGvgAFSo014de9Shadecd13I11D3RefaXEfU_AI0gH3APICTf1cn_nTf4ng_n(v4, v0);
  swift_bridgeObjectRelease();

  swift_release();
  return v5;
}

void MaterialBindingAPI.resolvedMaterial.getter(uint64_t *a1@<X8>)
{
}

void MaterialBindingAPI.directBinding.getter(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v5 = a1();

  *a2 = v5;
}

uint64_t outlined init with take of simd_double4x4?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_double4x4?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for XformPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for XformPrim);
}

uint64_t type metadata accessor for MeshPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for MeshPrim);
}

uint64_t type metadata accessor for CapsulePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CapsulePrim);
}

uint64_t type metadata accessor for ConePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for ConePrim);
}

uint64_t type metadata accessor for CubePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CubePrim);
}

uint64_t type metadata accessor for CylinderPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CylinderPrim);
}

uint64_t type metadata accessor for SpherePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for SpherePrim);
}

uint64_t type metadata accessor for PreliminaryTextPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for PreliminaryTextPrim);
}

uint64_t type metadata accessor for MaterialBindingAPI()
{
  return self;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo042RIOPxrUsdShadeMaterialBindingAPICollectionH3RefaG_9RealityIO0g10CollectionH0Cs5NeverOTg503_s9k4IO18gh33APIC18collectionBindingsSayAA0c10m13D0CGvgAFSo014de9Shadecd13I11D3RefaXEfU_AI0gH3APICTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v4) {
      break;
    }
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x23ECBA630](v6, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      id v8 = v7;
      ++v6;
      type metadata accessor for MaterialCollectionBinding();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = a2;
      *(void *)(v9 + 24) = v8;
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6) {
        return v10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_23AA3A9F4@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.xformTranslateOp.getter, a1);
}

uint64_t sub_23AA3AA0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.xformTranslateOp.setter);
}

uint64_t sub_23AA3AA38()
{
  return 16;
}

__n128 sub_23AA3AA44(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AA50@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.xformOrientOp.getter, a1);
}

uint64_t sub_23AA3AA68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.xformOrientOp.setter);
}

uint64_t sub_23AA3AA94()
{
  return 16;
}

__n128 sub_23AA3AAA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AAAC@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.xformScaleOp.getter, a1);
}

uint64_t sub_23AA3AAC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.xformScaleOp.setter);
}

uint64_t sub_23AA3AAF0()
{
  return 16;
}

__n128 sub_23AA3AAFC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AB08@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.xformOpOrder.getter, a1);
}

uint64_t sub_23AA3AB20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.xformOpOrder.setter);
}

uint64_t sub_23AA3AB4C()
{
  return 16;
}

__n128 sub_23AA3AB58(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AB64@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.radius.getter, a1);
}

uint64_t sub_23AA3AB7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.radius.setter);
}

uint64_t sub_23AA3ABA8()
{
  return 16;
}

__n128 sub_23AA3ABB4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3ABC0@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.height.getter, a1);
}

uint64_t sub_23AA3ABD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.height.setter);
}

uint64_t sub_23AA3AC04()
{
  return 16;
}

__n128 sub_23AA3AC10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AC1C@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.size.getter, a1);
}

uint64_t sub_23AA3AC34(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.size.setter);
}

uint64_t sub_23AA3AC60()
{
  return 16;
}

__n128 sub_23AA3AC6C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AC78@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.content.getter, a1);
}

uint64_t sub_23AA3AC90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.content.setter);
}

uint64_t sub_23AA3ACBC()
{
  return 16;
}

__n128 sub_23AA3ACC8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3ACD4@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.font.getter, a1);
}

uint64_t sub_23AA3ACEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.font.setter);
}

uint64_t sub_23AA3AD18()
{
  return 16;
}

__n128 sub_23AA3AD24(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AD30@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.pointSize.getter, a1);
}

uint64_t sub_23AA3AD48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.pointSize.setter);
}

uint64_t sub_23AA3AD74()
{
  return 16;
}

__n128 sub_23AA3AD80(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AD8C@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.width.getter, a1);
}

uint64_t sub_23AA3ADA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.width.setter);
}

uint64_t sub_23AA3ADD0()
{
  return 16;
}

__n128 sub_23AA3ADDC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3ADE8@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.depth.getter, a1);
}

uint64_t sub_23AA3AE00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.depth.setter);
}

uint64_t sub_23AA3AE2C()
{
  return 16;
}

__n128 sub_23AA3AE38(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AE44@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.horizontalAlignment.getter, a1);
}

uint64_t sub_23AA3AE5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.horizontalAlignment.setter);
}

uint64_t sub_23AA3AE88()
{
  return 16;
}

__n128 sub_23AA3AE94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AEA0@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.verticalAlignment.getter, a1);
}

uint64_t sub_23AA3AEB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.verticalAlignment.setter);
}

uint64_t sub_23AA3AEE4()
{
  return 16;
}

__n128 sub_23AA3AEF0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA3AEFC@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(void *__return_ptr))RigidSchema.wrapMode.getter, a1);
}

void *keypath_getTm@<X0>(void *(*a1)(void *__return_ptr)@<X3>, void *a2@<X8>)
{
  __n128 result = a1(v5);
  uint64_t v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t sub_23AA3AF50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))RigidSchema.wrapMode.setter);
}

uint64_t sub_23AA3AF7C()
{
  return 16;
}

__n128 sub_23AA3AF88(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of Xformable.xformTranslateOp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Xformable.xformTranslateOp.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Xformable.xformTranslateOp.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Xformable.xformOrientOp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Xformable.xformOrientOp.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of Xformable.xformOrientOp.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of Xformable.xformScaleOp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Xformable.xformScaleOp.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of Xformable.xformScaleOp.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of Xformable.xformOpOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of Xformable.xformOpOrder.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of Xformable.xformOpOrder.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of Capsule.radius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Capsule.radius.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Capsule.radius.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Capsule.height.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Capsule.height.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of Capsule.height.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of Cone.radius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Cone.radius.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Cone.radius.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Cone.height.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Cone.height.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of Cone.height.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of Cube.size.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Cube.size.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Cube.size.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Cylinder.radius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Cylinder.radius.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Cylinder.radius.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Cylinder.height.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Cylinder.height.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of Cylinder.height.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of Sphere.radius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Sphere.radius.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Sphere.radius.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PreliminaryText.content.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PreliminaryText.content.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PreliminaryText.content.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PreliminaryText.font.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PreliminaryText.font.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PreliminaryText.font.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PreliminaryText.pointSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PreliminaryText.pointSize.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PreliminaryText.pointSize.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of PreliminaryText.width.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PreliminaryText.width.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of PreliminaryText.width.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of PreliminaryText.height.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of PreliminaryText.height.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of PreliminaryText.height.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of PreliminaryText.depth.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of PreliminaryText.depth.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of PreliminaryText.depth.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of PreliminaryText.horizontalAlignment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of PreliminaryText.horizontalAlignment.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of PreliminaryText.horizontalAlignment.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of PreliminaryText.verticalAlignment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of PreliminaryText.verticalAlignment.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of PreliminaryText.verticalAlignment.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of PreliminaryText.wrapMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of PreliminaryText.wrapMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of PreliminaryText.wrapMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

ValueMetadata *type metadata accessor for Schema()
{
  return &type metadata for Schema;
}

uint64_t dispatch thunk of UsdSchemaBase.prim.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for XformPrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XformPrim);
}

uint64_t method lookup function for MeshPrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshPrim);
}

uint64_t method lookup function for CapsulePrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CapsulePrim);
}

uint64_t method lookup function for ConePrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ConePrim);
}

uint64_t method lookup function for CubePrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CubePrim);
}

uint64_t method lookup function for CylinderPrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CylinderPrim);
}

uint64_t method lookup function for SpherePrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SpherePrim);
}

uint64_t type metadata completion function for XformPrim()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PreliminaryTextPrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PreliminaryTextPrim);
}

uint64_t method lookup function for MaterialBindingAPI(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MaterialBindingAPI);
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (*(void *)&aNone_3[8 * a1] == *(void *)&aNone_3[8 * a2] && qword_23AAB5D28[a1] == qword_23AAB5D28[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  void *v2;
  void *v3;
  char v4;
  void *v6;
  void *v7;
  char v8;
  char v9;

  uint64_t v9 = a1;
  id v8 = a2;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v7);
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v6);
  char v3 = v6;
  id v2 = v7;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  uint64_t v4 = static _CFObject.== infix(_:_:)();

  return v4 & 1;
}

{
  void *v2;
  void *v3;
  char v4;
  void *v6;
  void *v7;
  char v8;
  char v9;

  uint64_t v9 = a1 & 1;
  id v8 = a2 & 1;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v7);
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v6);
  char v3 = v6;
  id v2 = v7;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  uint64_t v4 = static _CFObject.== infix(_:_:)();

  return v4 & 1;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

id one-time initialization function for iblPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.iblPropertyName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static VirtualEnvironmentProbeComponentBuilder.iblPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for iblBlendPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.iblBlendPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for blendEnablePropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.blendEnablePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for modePropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.modePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for rotationEnablePropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.rotationEnablePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for mixFactorPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.mixFactorPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for blendIBLsFactorPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.blendIBLsFactorPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for isGlobalPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.isGlobalPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for intensityPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.intensityPropertyName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static VirtualEnvironmentProbeComponentBuilder.intensityPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for mixColorPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.mixColorPropertyName = (uint64_t)result;
  return result;
}

uint64_t ImageBasedLightBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v121 = *MEMORY[0x263EF8340];
  Inputs.prim.getter();
  uint64_t v4 = (void *)RIOPxrUsdObjectCopyName();
  uint64_t v5 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v9 = (id)static ImageBasedLightBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

    goto LABEL_26;
  }
  uint64_t v10 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v11 = RIOPxrUsdAttributeCopyValue();
  if (!v11)
  {
    swift_bridgeObjectRelease();

    goto LABEL_26;
  }
  unint64_t v12 = (void *)v11;
  uint64_t v13 = RIOPxrVtValueCopyToken();
  if (!v13)
  {
    swift_bridgeObjectRelease();

    goto LABEL_26;
  }
  uint64_t v14 = (void *)v13;

  uint64_t v15 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v16 != 0xD00000000000001ALL || v18 != 0x800000023AAAF9F0)
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
LABEL_26:
    ImageBasedLightBuilder.clear(inputs:)();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_13:
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for iblComponents != -1) {
        swift_once();
      }
      uint64_t v114 = static OS_os_log.iblComponents;
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_23AAB24E0;
      uint64_t v26 = (void *)RIOPxrUsdObjectCopyPath();
      unint64_t v27 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      uint64_t v31 = MEMORY[0x263F8D310];
      *(void *)(v25 + 56) = MEMORY[0x263F8D310];
      unint64_t v32 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v25 + 32) = v28;
      *(void *)(v25 + 40) = v30;
      *(void *)(v25 + 96) = v31;
      *(void *)(v25 + 104) = v32;
      *(void *)(v25 + 64) = v32;
      *(void *)(v25 + 72) = v6;
      *(void *)(v25 + 80) = v8;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v20 = static EntityBuilder.OutputName;
  uint64_t v21 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v20, v21, &aBlock);
  if (v118)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast())
    {
      uint64_t v112 = v115;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0)
      {
        ImageBasedLightBuilder.clear(inputs:)();
        swift_release();
        return swift_release();
      }
      if (one-time initialization token for iblPropertyName != -1) {
        swift_once();
      }
      id v22 = (id)static ImageBasedLightBuilder.iblPropertyName;
      if (RIOPxrUsdPrimHasAttribute())
      {
        uint64_t v23 = RIOPxrUsdPrimCopyAttribute();
        type metadata accessor for AnyAttribute();
        uint64_t v114 = swift_allocObject();
        *(void *)(v114 + 16) = v23;
      }
      else
      {

        *(void *)&long long aBlock = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
        uint64_t v114 = 0;
      }
      if (one-time initialization token for iblBlendPropertyName != -1) {
        swift_once();
      }
      id v34 = (id)static ImageBasedLightBuilder.iblBlendPropertyName;
      if (RIOPxrUsdPrimHasAttribute())
      {
        uint64_t v35 = RIOPxrUsdPrimCopyAttribute();
        type metadata accessor for AnyAttribute();
        uint64_t v113 = swift_allocObject();
        *(void *)(v113 + 16) = v35;
      }
      else
      {

        *(void *)&long long aBlock = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
        uint64_t v113 = 0;
      }
      if (one-time initialization token for blendEnablePropertyName != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static ImageBasedLightBuilder.blendEnablePropertyName;
      id v36 = (id)static ImageBasedLightBuilder.blendEnablePropertyName;
      char v37 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      if (v37 && (LOBYTE(aBlock) = 0, char Bool = RIOPxrVtValueGetBool(), v37, (Bool & 1) != 0)) {
        int v39 = aBlock;
      }
      else {
        int v39 = 0;
      }
      v108[5] = v39;
      if (one-time initialization token for rotationEnablePropertyName != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static ImageBasedLightBuilder.rotationEnablePropertyName;
      id v40 = (id)static ImageBasedLightBuilder.rotationEnablePropertyName;
      char v41 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      if (v41 && (LOBYTE(aBlock) = 0, char v42 = RIOPxrVtValueGetBool(), v41, (v42 & 1) != 0)) {
        int v43 = aBlock;
      }
      else {
        int v43 = 0;
      }
      v108[4] = v43;
      if (one-time initialization token for mixFactorPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static ImageBasedLightBuilder.mixFactorPropertyName;
      id v44 = (id)static ImageBasedLightBuilder.mixFactorPropertyName;
      uint64_t v45 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      int v46 = 0;
      if (v45)
      {
        LODWORD(aBlock) = 0;
        char Float = RIOPxrVtValueGetFloat();

        if (Float) {
          int v46 = aBlock;
        }
      }
      if (one-time initialization token for blendIBLsFactorPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static ImageBasedLightBuilder.blendIBLsFactorPropertyName;
      id v48 = (id)static ImageBasedLightBuilder.blendIBLsFactorPropertyName;
      uint64_t v49 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      int v50 = 0;
      if (v49)
      {
        LODWORD(aBlock) = 0;
        char v51 = RIOPxrVtValueGetFloat();

        if (v51) {
          int v50 = aBlock;
        }
      }
      if (one-time initialization token for isGlobalPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static ImageBasedLightBuilder.isGlobalPropertyName;
      id v52 = (id)static ImageBasedLightBuilder.isGlobalPropertyName;
      unint64_t v53 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      if (v53 && (LOBYTE(aBlock) = 0, char v54 = RIOPxrVtValueGetBool(), v53, (v54 & 1) != 0)) {
        int v55 = aBlock;
      }
      else {
        int v55 = 0;
      }
      v108[3] = v55;
      if (one-time initialization token for intensityPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static ImageBasedLightBuilder.intensityPropertyName;
      id v56 = (id)static ImageBasedLightBuilder.intensityPropertyName;
      uint64_t v57 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      int v58 = 0;
      if (v57)
      {
        LODWORD(aBlock) = 0;
        char v59 = RIOPxrVtValueGetFloat();

        if (v59) {
          int v58 = aBlock;
        }
      }
      if (one-time initialization token for mixColorPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static ImageBasedLightBuilder.mixColorPropertyName;
      id v60 = (id)static ImageBasedLightBuilder.mixColorPropertyName;
      uint64_t v61 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      long long v110 = 0u;
      if (v61)
      {
        long long aBlock = 0uLL;
        char Float3 = RIOPxrVtValueGetFloat3();

        if (Float3) {
          long long v110 = aBlock;
        }
      }
      uint64_t v63 = specialized ImageBasedLightBuilder.getMode(fromPrim:)();
      uint64_t v64 = v63;
      uint64_t v65 = *(char *)(v2 + 16);
      char v66 = v63 == 3 && v65 == 3;
      if (v65 != 3 && v63 != 3)
      {
        uint64_t v67 = v65;
        if (*(void *)&aNone_3[v67 * 8] == *(void *)&aNone_3[8 * (char)v63]
          && qword_23AAB5D28[v67] == qword_23AAB5D28[(char)v63])
        {
          char v66 = 1;
        }
        else
        {
          char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        uint64_t v63 = swift_bridgeObjectRelease();
      }
      uint64_t v109 = v64;
      if (v114)
      {
        swift_retain();
        EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
        if (!EmptyValue) {
          EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
        }
        swift_release();
        id v111 = (id)RIOPxrVtValueCopyAssetPath();
      }
      else
      {
        id v111 = 0;
      }
      uint64_t v69 = *(void **)(v2 + 24);
      if (v69)
      {
        if (v111)
        {
          type metadata accessor for RIOPxrSdfAssetPathRef(0);
          lazy protocol witness table accessor for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
          id v70 = v69;
          id v71 = v111;
          char v72 = static _CFObject.== infix(_:_:)();

          if (v66)
          {
            char v73 = v72 ^ 1;
            if (!v113)
            {
LABEL_102:
              uint64_t v74 = 0;
              goto LABEL_111;
            }
LABEL_108:
            swift_retain();
            v76 = (void *)RIOPxrUsdAttributeCopyValue();
            if (!v76) {
              v76 = (void *)RIOPxrVtValueCreateEmptyValue();
            }
            swift_release();
            uint64_t v74 = (void *)RIOPxrVtValueCopyAssetPath();

LABEL_111:
            id v77 = *(void **)(v2 + 32);
            if (v77)
            {
              if (v74)
              {
                type metadata accessor for RIOPxrSdfAssetPathRef(0);
                lazy protocol witness table accessor for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
                id v78 = v77;
                uint64_t v79 = v74;
                id v80 = v74;
                static _CFObject.== infix(_:_:)();

                goto LABEL_118;
              }
              uint64_t v79 = 0;
              id v81 = v77;
            }
            else
            {
              uint64_t v79 = v74;
              if (!v74)
              {
LABEL_118:
                *(void *)&long long v110 = v108;
                *(double *)&long long v82 = MEMORY[0x270FA5388](v63);
                v91[16] = v73 & 1;
                uint64_t v92 = v114;
                uint64_t v93 = a1;
                char v94 = v83 & 1;
                id v84 = v111;
                uint64_t v95 = v113;
                uint64_t v96 = v112;
                uint64_t v97 = v2;
                char v98 = v109;
                int v99 = v50;
                char v100 = v85;
                int v101 = v58;
                char v102 = v86;
                char v103 = v87;
                int v104 = v46;
                long long v105 = v82;
                id v106 = v111;
                v107 = v79;
                uint64_t v88 = swift_allocObject();
                *(void *)(v88 + 16) = partial apply for closure #1 in ImageBasedLightBuilder.run(inputs:);
                *(void *)(v88 + 24) = v91;
                v119 = thunk for @callee_guaranteed () -> ()partial apply;
                uint64_t v120 = v88;
                *(void *)&long long aBlock = MEMORY[0x263EF8330];
                *((void *)&aBlock + 1) = 1107296256;
                v117 = thunk for @escaping @callee_guaranteed () -> ();
                v118 = &block_descriptor_30_1;
                uint64_t v89 = _Block_copy(&aBlock);
                swift_retain();
                swift_release();
                RIOBuilderInputsPerformBlockSyncOnEngineQueue();
                _Block_release(v89);
                char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
                swift_release();
                swift_release();
                swift_release();

                swift_release();
                uint64_t result = swift_release();
                if (isEscapingClosureAtFileLocation) {
                  __break(1u);
                }
                return result;
              }
              id v81 = 0;
            }

            goto LABEL_118;
          }
LABEL_107:
          char v73 = 1;
          if (!v113) {
            goto LABEL_102;
          }
          goto LABEL_108;
        }
        id v75 = v69;
      }
      else
      {
        if (!v111)
        {
          if (v66)
          {
            char v73 = 0;
            if (!v113) {
              goto LABEL_102;
            }
            goto LABEL_108;
          }
          goto LABEL_107;
        }
        id v75 = 0;
      }

      goto LABEL_107;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&aBlock);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for iblComponents != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23AAB22A0;
  *(void *)(v33 + 56) = MEMORY[0x263F8D310];
  *(void *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v33 + 32) = v6;
  *(void *)(v33 + 40) = v8;
  os_log(_:dso:log:type:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ImageBasedLightBuilder.run(inputs:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, void *a10, void *a11)
{
  uint64_t v15 = 0;
  if ((a1 & 1) != 0 && a2)
  {
    swift_retain();
    Inputs.createIBLAsset(on:)();
    uint64_t v15 = v16;
    swift_release();
  }
  uint64_t v17 = 0;
  if ((a4 & 1) != 0 && a5)
  {
    swift_retain();
    Inputs.createIBLAsset(on:)();
    uint64_t v17 = v18;
    swift_release();
  }
  __AssetRef.__as<A>(_:)();
  REImageBasedLightComponentGetComponentType();
  uint64_t v19 = REEntityGetOrAddComponentByClass();
  swift_beginAccess();
  id v20 = objc_getAssociatedObject((id)a7, &static BuilderAssociatedKeys.CoreReference);
  swift_endAccess();
  if (!v20)
  {
    __break(1u);
    JUMPOUT(0x23AA3CFD8);
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v28, &v29);
  type metadata accessor for RIOBuilderRef(0);
  swift_dynamicCast();
  RIOBuilderAddComponent();

  switch(a8)
  {
    case 1:
      if (a1) {
        REImageBasedLightComponentSetIBLNullable();
      }
      REImageBasedLightComponentSetEnableBlend();
      *(unsigned char *)(a7 + 16) = a8;
      break;
    case 2:
      if (a1) {
        REImageBasedLightComponentSetIBLNullable();
      }
      if (a4) {
        REImageBasedLightComponentSetIBLBlendNullable();
      }
      REImageBasedLightComponentSetEnableBlend();
      REImageBasedLightComponentSetBlendIBLsFactor();
      *(unsigned char *)(a7 + 16) = a8;
      break;
    case 3:
      if (a1) {
        REImageBasedLightComponentSetIBLNullable();
      }
      if (a4) {
        REImageBasedLightComponentSetIBLBlendNullable();
      }
      REImageBasedLightComponentSetEnableBlend();
      REImageBasedLightComponentSetBlendIBLsFactor();
      break;
    default:
      REImageBasedLightComponentSetIBLNullable();
      *(unsigned char *)(a7 + 16) = a8;
      break;
  }
  REImageBasedLightComponentSetIntensityExponent();
  REImageBasedLightComponentSetRotationEnabled();
  REImageBasedLightComponentSetBlendRotationEnabled();
  REImageBasedLightComponentSetGlobalIBL();
  REImageBasedLightComponentSetMixFactor();
  REImageBasedLightComponentSetMixColor();
  MEMORY[0x23ECBAEA0](v19);
  uint64_t v21 = *(void **)(a7 + 24);
  *(void *)(a7 + 24) = a10;
  id v22 = a10;

  uint64_t v23 = *(void **)(a7 + 32);
  *(void *)(a7 + 32) = a11;
  id v24 = a11;

  if (v15) {
    RERelease();
  }
  uint64_t result = v17;
  if (v17) {
    uint64_t result = RERelease();
  }
  *(unsigned char *)(a7 + 41) = 1;
  return result;
}

uint64_t ImageBasedLightBuilder.clear(inputs:)()
{
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = static EntityBuilder.OutputName;
  uint64_t v2 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v1, v2, &aBlock);
  if (!v12)
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = v15;
  uint64_t v4 = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 41) & 1) == 0) {
    return swift_release();
  }
  MEMORY[0x270FA5388](v4);
  void v9[2] = v3;
  v9[3] = v0;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in ImageBasedLightBuilder.clear(inputs:);
  *(void *)(v5 + 24) = v9;
  uint64_t v13 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v14 = v5;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v11 = thunk for @escaping @callee_guaranteed () -> ();
  unint64_t v12 = &block_descriptor_14;
  uint64_t v6 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void closure #1 in ImageBasedLightBuilder.clear(inputs:)(uint64_t a1, uint64_t a2)
{
  __AssetRef.__as<A>(_:)();
  REImageBasedLightComponentGetComponentType();
  REEntityRemoveComponentByClass();
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = 0;

  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a2 + 32) = 0;

  *(unsigned char *)(a2 + 41) = 0;
}

uint64_t ImageBasedLightBuilder.Mode.rawValue.getter(char a1)
{
  return *(void *)&aNone_3[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImageBasedLightBuilder.Mode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImageBasedLightBuilder.Mode()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageBasedLightBuilder.Mode()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImageBasedLightBuilder.Mode()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ImageBasedLightBuilder.Mode@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ImageBasedLightBuilder.Mode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ImageBasedLightBuilder.Mode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ImageBasedLightBuilder.Mode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ImageBasedLightBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ImageBasedLightBuilder()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ImageBasedLightBuilder.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23AA3D450);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ImageBasedLightBuilder.Mode()
{
  return &unk_26EE0F358;
}

unint64_t lazy protocol witness table accessor for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode;
  if (!lazy protocol witness table cache variable for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode);
  }
  return result;
}

void protocol witness for Builder.buildOrder.getter in conformance ImageBasedLightBuilder(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

uint64_t specialized ImageBasedLightBuilder.stageSubscription.getter()
{
  if (one-time initialization token for realityKitComponentTypeName != -1) {
    swift_once();
  }
  unint64_t v9 = static ImageBasedLightBuilder.realityKitComponentTypeName;
  id v0 = (id)static ImageBasedLightBuilder.realityKitComponentTypeName;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v9;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v9 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t specialized ImageBasedLightBuilder.Mode.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ImageBasedLightBuilder.Mode.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

void partial apply for closure #1 in ImageBasedLightBuilder.clear(inputs:)()
{
  closure #1 in ImageBasedLightBuilder.clear(inputs:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_23AA3D694()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t specialized ImageBasedLightBuilder.getMode(fromPrim:)()
{
  if (one-time initialization token for modePropertyName != -1) {
    swift_once();
  }
  id v0 = (id)static ImageBasedLightBuilder.modePropertyName;
  uint64_t v1 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  if (!v1) {
    return 3;
  }
  uint64_t v2 = (void *)RIOPxrVtValueCopyToken();

  if (!v2) {
    return 3;
  }
  unint64_t v3 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  unint64_t v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ImageBasedLightBuilder.Mode.init(rawValue:), v7);
  swift_bridgeObjectRelease();
  if (v8 >= 3) {
    return 3;
  }
  else {
    return v8;
  }
}

uint64_t partial apply for closure #1 in ImageBasedLightBuilder.run(inputs:)()
{
  BYTE2(v2) = *(unsigned char *)(v0 + 89);
  BYTE1(v2) = *(unsigned char *)(v0 + 88);
  LOBYTE(v2) = *(unsigned char *)(v0 + 80);
  return closure #1 in ImageBasedLightBuilder.run(inputs:)(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), v2, *(void **)(v0 + 112), *(void **)(v0 + 120));
}

uint64_t sub_23AA3D818()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t lazy protocol witness table accessor for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolsFoundations()
{
  return &type metadata for ToolsFoundations;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v4)
  {
    v4 &= v4 - 1;
LABEL_22:
    uint64_t result = InputDescriptor.convertToCore()();
    if (result)
    {
      MEMORY[0x23ECBA100]();
      if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v8 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v8 >= v5) {
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v8);
  ++v7;
  if (v9) {
    goto LABEL_21;
  }
  int64_t v7 = v8 + 1;
  if (v8 + 1 >= v5) {
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v7);
  if (v9) {
    goto LABEL_21;
  }
  int64_t v7 = v8 + 2;
  if (v8 + 2 >= v5) {
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v7);
  if (v9) {
    goto LABEL_21;
  }
  int64_t v7 = v8 + 3;
  if (v8 + 3 >= v5) {
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v7);
  if (v9)
  {
LABEL_21:
    uint64_t v4 = (v9 - 1) & v9;
    goto LABEL_22;
  }
  int64_t v10 = v8 + 4;
  if (v10 >= v5)
  {
LABEL_26:
    swift_release();
    return v11;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v10);
  if (v9)
  {
    int64_t v7 = v10;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_26;
    }
    uint64_t v9 = *(void *)(v1 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t result = MEMORY[0x263F8EE78];
  int64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    while (1)
    {
      int64_t v5 = *(id *)(a1 + 8 * v4 + 32);
      if (RIOPxrUsdPrimHasAttribute()) {
        break;
      }
      lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
      swift_willThrowTypedImpl();
      outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
      if (RIOPxrUsdPrimHasRelationship())
      {
        uint64_t v6 = RIOPxrUsdPrimCopyRelationship();
        type metadata accessor for Relationship();
        goto LABEL_9;
      }
      swift_willThrowTypedImpl();
      outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

LABEL_4:
      if (v3 == ++v4)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    uint64_t v6 = RIOPxrUsdPrimCopyAttribute();
    type metadata accessor for AnyAttribute();
LABEL_9:
    *(void *)(swift_allocObject() + 16) = v6;

    MEMORY[0x23ECBA100]();
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_4;
  }
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v17 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v18 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  while (v4)
  {
    unint64_t v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v7 = v6 | (v5 << 6);
LABEL_19:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 40 * v7);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = (void *)MEMORY[0x23ECB9F30](v13, v12);
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      id v15 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      id v15 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    uint64_t v16 = RIOBuilderOutputDescriptorCreateWithNameAndOutputIdentifierAndOptionality();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v16)
    {
      MEMORY[0x23ECBA100]();
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  if (__OFADD__(v5++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v5 >= v18) {
    goto LABEL_30;
  }
  unint64_t v9 = *(void *)(v17 + 8 * v5);
  if (v9)
  {
LABEL_18:
    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v5 << 6);
    goto LABEL_19;
  }
  int64_t v10 = v5 + 1;
  if (v5 + 1 >= v18) {
    goto LABEL_30;
  }
  unint64_t v9 = *(void *)(v17 + 8 * v10);
  if (v9) {
    goto LABEL_17;
  }
  int64_t v10 = v5 + 2;
  if (v5 + 2 >= v18) {
    goto LABEL_30;
  }
  unint64_t v9 = *(void *)(v17 + 8 * v10);
  if (v9) {
    goto LABEL_17;
  }
  int64_t v10 = v5 + 3;
  if (v5 + 3 >= v18) {
    goto LABEL_30;
  }
  unint64_t v9 = *(void *)(v17 + 8 * v10);
  if (v9) {
    goto LABEL_17;
  }
  int64_t v10 = v5 + 4;
  if (v5 + 4 >= v18)
  {
LABEL_30:
    swift_release();
    return;
  }
  unint64_t v9 = *(void *)(v17 + 8 * v10);
  if (v9)
  {
LABEL_17:
    int64_t v5 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v5 >= v18) {
      goto LABEL_30;
    }
    unint64_t v9 = *(void *)(v17 + 8 * v5);
    ++v10;
    if (v9) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO15StageDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d68IO7BuilderPAAE12generateCore7primRefySo015RIOPxrUsdObjectG0a_tFSo030igfjw6AA0mL5H52Ccfu_32bf63a0112cb27e84fc959358271e62f1AkITf3nnnpk_nTf1cn_n(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.count.getter();
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v3) {
      return result;
    }
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = __CocoaSet.startIndex.getter();
    uint64_t v20 = v5;
    unsigned __int8 v21 = 1;
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = specialized _NativeSet.startIndex.getter(a1);
    uint64_t v20 = v6;
    unsigned __int8 v21 = v7 & 1;
    while (1)
    {
LABEL_9:
      while (1)
      {
        uint64_t v13 = v19;
        uint64_t v14 = v20;
        uint64_t v15 = v21;
        id v16 = *(id *)(specialized Set.subscript.getter(v19, v20, v21, a1) + 32);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if (v2) {
          break;
        }
        uint64_t v8 = specialized _NativeSet.index(after:)(v13, v14, v15, a1);
        uint64_t v10 = v9;
        char v12 = v11;
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v13, v14, v15);
        uint64_t v19 = v8;
        uint64_t v20 = v10;
        unsigned __int8 v21 = v12 & 1;
        if (!--v3) {
          goto LABEL_14;
        }
      }
      if ((v15 & 1) == 0) {
        break;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<StageDirtyState>.Index);
      uint64_t v17 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v17(v18, 0);
      if (!--v3)
      {
LABEL_14:
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v19, v20, v21);
        return v22;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t Builder.outputs.getter(uint64_t a1, uint64_t a2)
{
  return Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.OutputsReference, (void (*)(void))type metadata accessor for Outputs);
}

void Builder.addComponent<A>(component:)()
{
  uint64_t v0 = type metadata accessor for __ComponentTypeRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static Component.__coreComponentType.getter();
  type metadata accessor for REComponentType(0);
  __ComponentTypeRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = REComponentClassFromType();
  if (v4)
  {
    uint64_t v6 = (void *)Builder.outputs.getter(v4, v5, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
    RIOBuilderAddComponentByClass();
  }
}

uint64_t Builder.prim.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  uint64_t v3 = RIOBuilderCopyPrim();

  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  return result;
}

Swift::Void __swiftcall Builder.addComponent(componentRef:)(Swift::OpaquePointer componentRef)
{
  id v2 = (id)Builder.outputs.getter((uint64_t)componentRef._rawValue, v1, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  RIOBuilderAddComponent();
}

void Builder.generateCore(primRef:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t aBlock = a2;
  swift_getMetatypeMetadata();
  uint64_t v6 = String.init<A>(reflecting:)();
  uint64_t v25 = (void *)MEMORY[0x23ECB9F30](v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&aBlock, a2, a3);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  unint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO15StageDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d68IO7BuilderPAAE12generateCore7primRefySo015RIOPxrUsdObjectG0a_tFSo030igfjw6AA0mL5H52Ccfu_32bf63a0112cb27e84fc959358271e62f1AkITf3nnnpk_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) != 0 || (v8 & 0x4000000000000000) != 0)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for RIOBuilderDirtyStageDescriptorRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v10 = (void *)RIOBuilderDirtyStageSubscriptionCreateWithDirtyStageDescriptors();

  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v12 = (void *)swift_allocObject();
  void v12[2] = a2;
  v12[3] = a3;
  v12[4] = v11;
  uint64_t v30 = partial apply for closure #1 in Builder.generateCore(primRef:);
  uint64_t v31 = v12;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v27 = 1107296256;
  long long v28 = (void (*)(uint64_t, void *))thunk for @escaping @callee_guaranteed () -> (@unowned Unmanaged<RIOBuilderInputsDescriptorRef>);
  long long v29 = &block_descriptor_15;
  uint64_t v13 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = v14;
  uint64_t v30 = partial apply for closure #2 in Builder.generateCore(primRef:);
  uint64_t v31 = v15;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v27 = 1107296256;
  long long v28 = (void (*)(uint64_t, void *))thunk for @escaping @callee_guaranteed () -> (@unowned Unmanaged<RIOBuilderInputsDescriptorRef>);
  long long v29 = &block_descriptor_10;
  id v16 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  int64_t v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = v17;
  uint64_t v30 = partial apply for closure #3 in Builder.generateCore(primRef:);
  uint64_t v31 = v18;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v27 = 1107296256;
  long long v28 = thunk for @escaping @callee_guaranteed (@guaranteed RIOBuilderInputsRef) -> ();
  long long v29 = &block_descriptor_17;
  uint64_t v19 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unsigned __int8 v21 = (void *)swift_allocObject();
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = v20;
  uint64_t v30 = partial apply for closure #4 in Builder.generateCore(primRef:);
  uint64_t v31 = v21;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v27 = 1107296256;
  long long v28 = thunk for @escaping @callee_guaranteed (@guaranteed RIOBuilderInputsRef) -> ();
  long long v29 = &block_descriptor_24;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v23 = (void *)RIOBuilderCreateWithBuilderInfo();
  _Block_release(v22);
  _Block_release(v19);
  _Block_release(v16);
  _Block_release(v13);

  if (v23)
  {
    swift_beginAccess();
    id v24 = v23;
    objc_setAssociatedObject(v3, &static BuilderAssociatedKeys.CoreReference, v24, (void *)1);
    swift_endAccess();

    RIOBuilderSetSwiftObject();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall Builder.generateOutputs()()
{
  uint64_t v3 = v2;
  uint64_t v4 = (void *)Builder.outputs.getter(v0, v1, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  uint64_t v5 = (void *)RIOBuilderOutputsCreate();

  id v6 = (id)RIOBuilderOutputsGetSwiftObject();
  type metadata accessor for Outputs();
  if (v6)
  {
    uint64_t v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v7 = (uint64_t)Outputs.init(core:)((uint64_t)v5);
  }
  unint64_t v8 = (void *)v7;
  swift_beginAccess();
  swift_retain();
  objc_setAssociatedObject(v3, &static BuilderAssociatedKeys.OutputsReference, v8, (void *)1);
  swift_endAccess();

  swift_release_n();
}

uint64_t Builder.core.getter(uint64_t a1, uint64_t a2)
{
  return Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
}

uint64_t Builder.outputs.getter(uint64_t a1, uint64_t a2, const void *a3, void (*a4)(void))
{
  swift_beginAccess();
  id v7 = objc_getAssociatedObject(v4, a3);
  uint64_t result = swift_endAccess();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v10, &v11);
    a4(0);
    swift_dynamicCast();
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void Builder.primPath.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (void *)Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  uint64_t v5 = RIOBuilderCopyPrimPath();

  *a3 = v5;
}

uint64_t closure #1 in Builder.generateCore(primRef:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  if (MEMORY[0x23ECBE950](v5))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    specialized Sequence.compactMap<A>(_:)(v6);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOBuilderInputDescriptorRef(0);
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v8 = RIOBuilderInputsDescriptorCreateWithInputDescriptors();
    swift_unknownObjectRelease();
  }
  else
  {
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v8 = RIOBuilderInputsDescriptorCreateWithInputDescriptors();
  }

  return v8;
}

uint64_t closure #2 in Builder.generateCore(primRef:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  if (MEMORY[0x23ECBE950](v5))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    specialized Sequence.compactMap<A>(_:)(v6);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOBuilderOutputDescriptorRef(0);
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v8 = RIOBuilderOutputsDescriptorCreateWithOutputDescriptors();
    swift_unknownObjectRelease();
  }
  else
  {
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v8 = RIOBuilderOutputsDescriptorCreateWithOutputDescriptors();
  }

  return v8;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Unmanaged<RIOBuilderInputsDescriptorRef>)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

void *closure #3 in Builder.generateCore(primRef:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x23ECBE950](v7);
  if (result)
  {
    type metadata accessor for Inputs();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 56) = a1;
    id v10 = a1;
    uint64_t result = (void *)RIOBuilderInputsCopyStageDelta();
    if (result)
    {
      Inputs.StageDelta.init(core:)(result, (uint64_t)v13);
      uint64_t v11 = v14;
      long long v12 = v13[1];
      *(_OWORD *)(v9 + 16) = v13[0];
      *(_OWORD *)(v9 + 32) = v12;
      *(void *)(v9 + 48) = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v9, a3, a4);
      swift_unknownObjectRelease();
      return (void *)swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed RIOBuilderInputsRef) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void *closure #4 in Builder.generateCore(primRef:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x23ECBE950](v7);
  if (result)
  {
    type metadata accessor for Inputs();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 56) = a1;
    id v10 = a1;
    uint64_t result = (void *)RIOBuilderInputsCopyStageDelta();
    if (result)
    {
      Inputs.StageDelta.init(core:)(result, (uint64_t)v13);
      uint64_t v11 = v14;
      long long v12 = v13[1];
      *(_OWORD *)(v9 + 16) = v13[0];
      *(_OWORD *)(v9 + 32) = v12;
      *(void *)(v9 + 48) = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(v9, a3, a4);
      swift_unknownObjectRelease();
      return (void *)swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized Set.subscript.getter(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if (a3) {
      goto LABEL_13;
    }
    if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
    {
      if (*(_DWORD *)(a4 + 36) == a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        uint64_t v15 = __CocoaSet.Index.element.getter();
        type metadata accessor for PrimDirtyState();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v8 = v14[0];
        swift_unknownObjectRelease();
        Hasher.init(_seed:)();
        (*(void (**)(void *))(*(void *)v14[0] + 128))(v14);
        Swift::Int v9 = Hasher._finalize()();
        uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
        unint64_t v5 = v9 & ~v10;
        if ((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
        {
          uint64_t v11 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a4 + 48) + 8 * v5) + 136);
          swift_retain();
          LOBYTE(v11) = v11(v8);
          swift_release();
          if ((v11 & 1) == 0)
          {
            uint64_t v12 = ~v10;
            do
            {
              unint64_t v5 = (v5 + 1) & v12;
              if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
                goto LABEL_25;
              }
              uint64_t v13 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a4 + 48) + 8 * v5) + 136);
              swift_retain();
              LOBYTE(v13) = v13(v8);
              swift_release();
            }
            while ((v13 & 1) == 0);
          }
          swift_release();
LABEL_20:
          uint64_t v7 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
LABEL_25:
        uint64_t result = swift_release();
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  if (a3)
  {
    if (a4 < 0) {
      uint64_t v6 = a4;
    }
    else {
      uint64_t v6 = a4 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = MEMORY[0x23ECBA530](result, a2, v6);
    type metadata accessor for PrimDirtyState();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v7 = v14[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void v14[9];
  uint64_t v15;

  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if (a3) {
      goto LABEL_13;
    }
    if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
    {
      if (*(_DWORD *)(a4 + 36) == a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        uint64_t v15 = __CocoaSet.Index.element.getter();
        type metadata accessor for PropertyDirtyState();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v8 = v14[0];
        swift_unknownObjectRelease();
        Hasher.init(_seed:)();
        (*(void (**)(void *))(*(void *)v14[0] + 120))(v14);
        Swift::Int v9 = Hasher._finalize()();
        uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
        unint64_t v5 = v9 & ~v10;
        if ((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
        {
          uint64_t v11 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a4 + 48) + 8 * v5) + 128);
          swift_retain();
          LOBYTE(v11) = v11(v8);
          swift_release();
          if ((v11 & 1) == 0)
          {
            uint64_t v12 = ~v10;
            do
            {
              unint64_t v5 = (v5 + 1) & v12;
              if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
                goto LABEL_25;
              }
              uint64_t v13 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a4 + 48) + 8 * v5) + 128);
              swift_retain();
              LOBYTE(v13) = v13(v8);
              swift_release();
            }
            while ((v13 & 1) == 0);
          }
          swift_release();
LABEL_20:
          uint64_t v7 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
LABEL_25:
        uint64_t result = swift_release();
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  if (a3)
  {
    if (a4 < 0) {
      uint64_t v6 = a4;
    }
    else {
      uint64_t v6 = a4 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = MEMORY[0x23ECBA530](result, a2, v6);
    type metadata accessor for PropertyDirtyState();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v7 = v14[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  long long v18[4];
  uint64_t v19;

  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v6 = a4;
      }
      else {
        uint64_t v6 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v19 = MEMORY[0x23ECBA530](result, a2, v6);
      type metadata accessor for StageDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v7 = *(void *)&v18[0];
      swift_unknownObjectRelease();
      return v7;
    }
    goto LABEL_27;
  }
  if ((a3 & 1) == 0)
  {
    if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
    {
      if (*(_DWORD *)(a4 + 36) == a2) {
        goto LABEL_21;
      }
      __break(1u);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v19 = __CocoaSet.Index.element.getter();
  type metadata accessor for StageDirtyState();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v8 = *(void *)&v18[0];
  swift_unknownObjectRelease();
  Hasher.init(_seed:)();
  Swift::Int v9 = *(void *)(*(void *)&v18[0] + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v18, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v8 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v18, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v5 = v11 & ~v12;
  if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
  {
LABEL_26:
    uint64_t result = swift_release();
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  uint64_t v13 = ~v12;
  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
    uint64_t v15 = *(void *)(v14 + 24);
    id v16 = *(void *)(v8 + 24);
    swift_retain();
    if (specialized static Set.== infix(_:_:)(v15, v16)) {
      break;
    }
    swift_release();
LABEL_17:
    unint64_t v5 = (v5 + 1) & v13;
    if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      goto LABEL_26;
    }
  }
  uint64_t v17 = specialized static Set.== infix(_:_:)(*(void *)(v14 + 16), *(void *)(v8 + 16));
  swift_release();
  if ((v17 & 1) == 0) {
    goto LABEL_17;
  }
  swift_release();
LABEL_21:
  uint64_t v7 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
  swift_retain();
  return v7;
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || (uint64_t v4 = result, 1 << *(unsigned char *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 36) != a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v8 = *(void *)(v7 - 8);
  Swift::Int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v6 + *(void *)(v8 + 72) * v4;
  return v9(a4, v10, v7);
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  Swift::Int v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized static StageDirtyStateBuilder.buildBlock(_:)(unint64_t a1)
{
  uint64_t v7 = MEMORY[0x263F8EE88];
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x23ECBA630](v4, a1);
      }
      else
      {
        uint64_t v5 = *(void *)(a1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      swift_retain();
      specialized Set._Variant.insert(_:)(&v6, v5);
      swift_release();
      swift_release();
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

ValueMetadata *type metadata accessor for StageDirtyStateBuilder()
{
  return &type metadata for StageDirtyStateBuilder;
}

uint64_t dispatch thunk of Builder.stageSubscription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Builder.buildOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Builder.inputDescriptors()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Builder.outputDescriptors()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Builder.run(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Builder.clear(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_23AA3F74C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in Builder.generateCore(primRef:)()
{
  return closure #1 in Builder.generateCore(primRef:)(v0[4], v0[2], v0[3]);
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in Builder.generateCore(primRef:)()
{
  return closure #2 in Builder.generateCore(primRef:)(v0[4], v0[2], v0[3]);
}

uint64_t sub_23AA3F7B4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void *partial apply for closure #3 in Builder.generateCore(primRef:)(void *a1)
{
  return closure #3 in Builder.generateCore(primRef:)(a1, v1[4], v1[2], v1[3]);
}

void *partial apply for closure #4 in Builder.generateCore(primRef:)(void *a1)
{
  return closure #4 in Builder.generateCore(primRef:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9RealityIO4PrimCsAE_pTg5(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v9 = *(void *)(type metadata accessor for UUID() - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    while (1)
    {
      a1(&v13, v10, &v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v10 += v11;
      if (!--v6) {
        return v14;
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Path.deletingLastPathComponent()@<X0>(uint64_t *a1@<X8>)
{
  id v3 = *v1;
  uint64_t v4 = (void *)RIOPxrSdfPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v6 = MEMORY[0x23ECBA430](47, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x263F8D310], v5);
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 16) < 2uLL)
  {
    swift_bridgeObjectRelease();
    uint64_t result = RIOPxrSdfPathCreateFromCString();
    uint64_t v11 = result;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
    lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    uint64_t v7 = Sequence<>.joined(separator:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = RIOPxrSdfPathCreateFromCString();
    uint64_t result = swift_release();
  }
  *a1 = v11;
  return result;
}

void specialized EnumeratedSequence.Iterator.next()(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
  v5.n128_f64[0] = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  unint64_t v8 = v1[1];
  unint64_t v10 = *(void *)(*v1 + 16);
  if (v8 == v10)
  {
    uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
    v11(a1, 1, 1, v3, v5);
  }
  else
  {
    if (v8 >= v10)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = v4;
      uint64_t v12 = type metadata accessor for __RKEntityTriggerSpecification();
      uint64_t v13 = *(void *)(v12 - 8);
      uint64_t v14 = v13;
      unint64_t v15 = v9
          + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + *(void *)(v13 + 72) * v8;
      v1[1] = v8 + 1;
      id v16 = &v7[*(int *)(v3 + 48)];
      uint64_t v17 = v1[2];
      (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v16, v15, v12);
      if (!__OFADD__(v17, 1))
      {
        v1[2] = v17 + 1;
        int64_t v18 = (char *)a1 + *(int *)(v3 + 48);
        *a1 = v17;
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v16, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v3);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t InteractionSpecificationsUSDStageErrors.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v61 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v61 - v12;
  uint64_t v14 = type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
  MEMORY[0x270FA5388](v14);
  id v16 = (void **)((char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of InteractionSpecificationsUSDStageErrors(v0, (uint64_t)v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      int64_t v18 = *v16;
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType));
      outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)v16 + *(int *)(v19 + 48), (uint64_t)v10);
      uint64_t v61 = 0;
      unint64_t v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v20._countAndFlagsBits = 0xD00000000000002BLL;
      v20._object = (void *)0x800000023AAAFD70;
      String.append(_:)(v20);
      id v21 = v18;
      uint64_t v22 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      v26._countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0xD00000000000001CLL;
      v27._object = (void *)0x800000023AAAFDA0;
      String.append(_:)(v27);
      _print_unlocked<A, B>(_:_:)();
      v28._countAndFlagsBits = 34;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);

      uint64_t v29 = v61;
      uint64_t v13 = v10;
    }
    else
    {
      id v44 = *v16;
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      int v46 = (uint64_t *)((char *)v16 + *(int *)(v45 + 64));
      uint64_t v48 = *v46;
      uint64_t v47 = (void *)v46[1];
      outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)v16 + *(int *)(v45 + 48), (uint64_t)v7);
      uint64_t v61 = 0;
      unint64_t v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(89);
      v49._countAndFlagsBits = 0xD000000000000019;
      v49._object = (void *)0x800000023AAAFD20;
      String.append(_:)(v49);
      id v50 = v44;
      char v51 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v54 = v53;

      v55._countAndFlagsBits = v52;
      v55._object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 0x65756C6156202E22;
      v56._object = (void *)0xEB0000000022203ALL;
      String.append(_:)(v56);
      v57._countAndFlagsBits = v48;
      v57._object = v47;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58._countAndFlagsBits = 0xD00000000000002ELL;
      v58._object = (void *)0x800000023AAAFD40;
      String.append(_:)(v58);
      _print_unlocked<A, B>(_:_:)();
      v59._countAndFlagsBits = 34;
      v59._object = (void *)0xE100000000000000;
      String.append(_:)(v59);

      uint64_t v29 = v61;
      uint64_t v13 = v7;
    }
  }
  else
  {
    uint64_t v30 = *v16;
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    unint64_t v32 = (char *)v16 + *(int *)(v31 + 64);
    outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)v16 + *(int *)(v31 + 48), (uint64_t)v13);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v32, v1);
    uint64_t v61 = 0;
    unint64_t v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(129);
    v33._countAndFlagsBits = 0xD00000000000001ELL;
    v33._object = (void *)0x800000023AAAFDC0;
    String.append(_:)(v33);
    id v34 = v30;
    uint64_t v35 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    v39._countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 0xD000000000000049;
    v40._object = (void *)0x800000023AAAFDE0;
    String.append(_:)(v40);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._object = (void *)0x800000023AAAFE30;
    v42._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v42);
    _print_unlocked<A, B>(_:_:)();
    v43._countAndFlagsBits = 34;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);

    uint64_t v29 = v61;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  outlined destroy of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)v13, type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType);
  return v29;
}

uint64_t Stage.setBehavior(_:at:mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v94 = a4;
  uint64_t v86 = type metadata accessor for __RKEntityActionGroupArguments();
  uint64_t v85 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  id v84 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char **)((char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v83 - v10;
  uint64_t v12 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v89 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  char v87 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v93 = (char **)((char *)&v83 - v15);
  uint64_t v97 = type metadata accessor for __RKEntityTriggerSpecification();
  uint64_t v92 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  uint64_t v17 = (uint64_t *)((char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  Swift::String v20 = (void **)((char *)&v83 - v19);
  MEMORY[0x270FA5388](v21);
  v91 = (char *)&v83 - v22;
  String.utf8CString.getter();
  uint64_t v23 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  id v24 = (id)RIOPxrTfTokenEmpty();
  uint64_t v95 = v4;
  id v96 = v23;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = PrimIfNeeded;
  uint64_t v27 = v26;

  if (String.count.getter() < 1) {
    id v28 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v28 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v29 = v28;
  uint64_t v90 = v12;
  RIOPxrUsdPrimSetTypeName();

  v104[4] = &type metadata for Schema;
  v104[5] = &protocol witness table for Schema;
  v104[0] = v27;
  uint64_t v88 = v27;
  swift_retain();
  uint64_t v30 = (uint64_t *)v91;
  __RKEntityInteractionSpecification.trigger.getter();
  __RKEntityInteractionSpecification.action.getter();
  uint64_t v31 = v92;
  uint64_t v32 = v97;
  (*(void (**)(void **, uint64_t *, uint64_t))(v92 + 16))(v20, v30, v97);
  if ((*(unsigned int (**)(void **, uint64_t))(v31 + 88))(v20, v32) != *MEMORY[0x263F163D0])
  {
    id v43 = v96;
    uint64_t v100 = (uint64_t)v96;
    SceneDescriptionFoundations.Path.appendingPathComponent(_:)(0x5272656767697254, (void *)0xEB00000000746F6FLL, (uint64_t *)v103);
    id v44 = v103[0];
    uint64_t v45 = v94;
    uint64_t v46 = v98;
    Stage.setTrigger(trigger:at:mapping:)(v30, v103, v94);
    uint64_t v98 = v46;
    if (v46)
    {
      uint64_t v47 = v30;
      uint64_t v48 = v88;
      swift_release();

      (*(void (**)(void *, uint64_t))(v89 + 8))(v93, v90);
      Swift::String v49 = *(void (**)(uint64_t *, uint64_t))(v92 + 8);
      v49(v47, v32);
      outlined destroy of Any?((uint64_t)v104, &demangling cache variable for type metadata for Properties<BehaviorSchema>);

      uint64_t v50 = v32;
      uint64_t v51 = v48;
      v49((uint64_t *)v20, v50);
      return v51;
    }
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
    swift_retain();
    *(void *)(inited + 32) = RIOPxrUsdObjectCopyPath();
    swift_release();
    specialized Properties.subscript.setter(inited);

    swift_release();
    (*(void (**)(void **, uint64_t))(v92 + 8))(v20, v32);
    uint64_t v53 = v98;
LABEL_30:
    id v63 = v96;
    uint64_t v100 = (uint64_t)v96;
    SceneDescriptionFoundations.Path.appendingPathComponent(_:)(0x6F526E6F69746341, (void *)0xEA0000000000746FLL, (uint64_t *)v103);
    uint64_t v64 = v103[0];
    uint64_t v65 = v93;
    Stage.setAction(action:at:mapping:)(v93, v103, v45);
    if (v53)
    {
      uint64_t v66 = v88;
      swift_release();

      (*(void (**)(void *, uint64_t))(v89 + 8))(v65, v90);
      uint64_t v67 = v32;
      uint64_t v51 = v66;
      (*(void (**)(char *, uint64_t))(v92 + 8))(v91, v67);
      outlined destroy of Any?((uint64_t)v104, &demangling cache variable for type metadata for Properties<BehaviorSchema>);
    }
    else
    {
      uint64_t v68 = v64;
      uint64_t v98 = 0;
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t v69 = v65;
      uint64_t v70 = swift_initStackObject();
      *(_OWORD *)(v70 + 16) = xmmword_23AAB22A0;
      swift_retain();
      *(void *)(v70 + 32) = RIOPxrUsdObjectCopyPath();
      swift_release();
      specialized Properties.subscript.setter(v70);
      uint64_t v71 = v89;
      char v72 = v87;
      uint64_t v73 = v90;
      (*(void (**)(char *, void *, uint64_t))(v89 + 16))(v87, v69, v90);
      if ((*(unsigned int (**)(char *, uint64_t))(v71 + 88))(v72, v73) == *MEMORY[0x263F163A8])
      {
        (*(void (**)(char *, uint64_t))(v71 + 96))(v72, v73);
        uint64_t v74 = v85;
        id v75 = v84;
        v76 = v72;
        uint64_t v77 = v86;
        (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v84, v76, v86);
        uint64_t v78 = v71;
        char v79 = __RKEntityActionGroupArguments.exclusive.getter();
        id v80 = v75;
        id v63 = v96;
        (*(void (**)(char *, uint64_t))(v74 + 8))(v80, v77);
        unsigned __int8 v81 = v79 & 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        unsigned __int8 v81 = 0;
        uint64_t v78 = v71;
      }
      uint64_t KeyPath = swift_getKeyPath();
      specialized Properties.subscript.setter(v81, KeyPath, 0, 0);
      swift_release();

      (*(void (**)(void *, uint64_t))(v78 + 8))(v93, v73);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v91, v32);
      outlined destroy of Any?((uint64_t)v104, &demangling cache variable for type metadata for Properties<BehaviorSchema>);
      return v88;
    }
    return v51;
  }
  id v34 = *(void (**)(void **, uint64_t))(v31 + 96);
  uint64_t v33 = v31 + 96;
  v34(v20, v32);
  uint64_t v35 = *v20;
  long long v105 = (uint64_t *)MEMORY[0x263F8EE78];
  uint64_t v36 = (void (**)(uint64_t *, char *, uint64_t))(v33 - 64);
  char v37 = (void (**)(uint64_t *, uint64_t))(v33 - 88);
  v103[1] = 0;
  v103[2] = 0;
  v103[0] = v35;
  while (1)
  {
    specialized EnumeratedSequence.Iterator.next()(v8);
    outlined init with take of (URL, __REAsset)((uint64_t)v8, (uint64_t)v11, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v11, 1, v38) == 1) {
      break;
    }
    uint64_t v39 = *(void *)v11;
    (*v36)(v17, &v11[*(int *)(v38 + 48)], v32);
    uint64_t v100 = 0x5F72656767697254;
    int v101 = (void *)0xE800000000000000;
    id v102 = v96;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v99 = v39 + 1;
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    SceneDescriptionFoundations.Path.appendingPathComponent(_:)(v100, v101, &v100);
    swift_bridgeObjectRelease();
    Swift::String v41 = (void *)v100;
    uint64_t v42 = v98;
    Stage.setTrigger(trigger:at:mapping:)(v17, (void **)&v100, v94);
    uint64_t v98 = v42;
    if (v42)
    {
      uint64_t v51 = v88;
      swift_release();

      id v60 = *v37;
      uint64_t v61 = v97;
      (*v37)(v17, v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v89 + 8))(v93, v90);
      v60((uint64_t *)v91, v61);
      outlined destroy of Any?((uint64_t)v104, &demangling cache variable for type metadata for Properties<BehaviorSchema>);

      return v51;
    }
    MEMORY[0x23ECBA100]();
    if (*(void *)(((unint64_t)v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v105 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t v32 = v97;
    (*v37)(v17, v97);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = (char *)swift_getKeyPath();
  uint64_t v17 = v105;
  if (!((unint64_t)v105 >> 62))
  {
    uint64_t v52 = *(void *)(((unint64_t)v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
LABEL_38:
  swift_bridgeObjectRetain();
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
LABEL_16:
  uint64_t v53 = v98;
  if (!v52)
  {
    swift_bridgeObjectRelease();
    Swift::String v56 = (void *)MEMORY[0x263F8EE78];
LABEL_29:
    swift_bridgeObjectRelease();
    specialized Properties.subscript.setter((uint64_t)v56);
    uint64_t v45 = v94;
    goto LABEL_30;
  }
  char v83 = v11;
  v103[0] = (void *)MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52 & ~(v52 >> 63), 0);
  if ((v52 & 0x8000000000000000) == 0)
  {
    uint64_t v55 = 0;
    Swift::String v56 = v103[0];
    do
    {
      if (((unint64_t)v17 & 0xC000000000000001) != 0) {
        MEMORY[0x23ECBA630](v55, v17);
      }
      else {
        swift_retain();
      }
      uint64_t v57 = RIOPxrUsdObjectCopyPath();
      swift_release();
      v103[0] = v56;
      unint64_t v59 = v56[2];
      unint64_t v58 = v56[3];
      if (v59 >= v58 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
        Swift::String v56 = v103[0];
      }
      ++v55;
      v56[2] = v59 + 1;
      v56[v59 + 4] = v57;
      uint64_t v32 = v97;
    }
    while (v52 != v55);
    swift_bridgeObjectRelease();
    uint64_t v53 = v98;
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t SceneDescriptionFoundations.Path.appendingPathComponent(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v7 = *v3;
  uint64_t v8 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  BOOL v12 = v9 == 47 && v11 == 0xE100000000000000;
  if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13._countAndFlagsBits = 47;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
  }
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = RIOPxrSdfPathCreateFromCString();
  uint64_t result = swift_release();
  *a3 = v15;
  return result;
}

uint64_t Stage.setTrigger(trigger:at:mapping:)(uint64_t *a1, void **a2, uint64_t a3)
{
  uint64_t v117 = a3;
  v119 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void (***)(char *, uint64_t *, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v115 = (char *)&v110 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v112 = (char *)&v110 - v10;
  uint64_t v11 = type metadata accessor for __RKEntityTriggerSpecification();
  BOOL v12 = *(void (***)(char *, uint64_t *, uint64_t))(v11 - 8);
  MEMORY[0x270FA5388](v11);
  Swift::String v14 = (uint64_t *)((char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *a2;
  id v16 = (id)RIOPxrTfTokenEmpty();
  v116 = v15;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = PrimIfNeeded;

  if (String.count.getter() < 1) {
    id v19 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v19 = (id)RIOPxrTfTokenCreateWithCString();
  }
  Swift::String v20 = v19;
  uint64_t v118 = v18;
  RIOPxrUsdPrimSetTypeName();

  uint64_t v21 = v12[2];
  uint64_t v22 = v11;
  v21((char *)v14, v119, v11);
  int v23 = ((uint64_t (*)(uint64_t *, uint64_t))v12[11])(v14, v11);
  if (v23 == *MEMORY[0x263F163F0])
  {
    ((void (*)(uint64_t *, uint64_t))v12[12])(v14, v11);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
    float v25 = *(float *)((char *)v14 + *(int *)(v24 + 48));
    uint64_t v113 = (char *)v14 + *(int *)(v24 + 64);
    uint64_t v26 = (uint64_t)v115;
    v5[4](v115, v14, v4);
    if (*(void *)(v117 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v26), (v27 & 1) != 0))
    {
      id v28 = (void *)RIOPxrUsdObjectCopyPath();
      uint64_t v121 = &type metadata for Schema;
      v122 = &protocol witness table for Schema;
      uint64_t v29 = v118;
      v120[0] = v118;
      uint64_t KeyPath = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v31 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v31 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v31, KeyPath, 0, 0);
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
      *(void *)(inited + 32) = v28;
      id v81 = v28;
      specialized Properties.subscript.setter(inited);
      uint64_t v82 = swift_getKeyPath();
      specialized Properties.subscript.setter(COERCE__INT64(v25), 0, v82, 0, 0);

      outlined destroy of Any?((uint64_t)v120, &demangling cache variable for type metadata for Properties<ProximityToCameraTriggerSchema>);
      ((void (*)(uint64_t, uint64_t))v5[1])(v26, v4);
    }
    else
    {
      uint64_t v117 = type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      swift_allocError();
      uint64_t v38 = v37;
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      Swift::String v40 = v21;
      Swift::String v41 = (char *)v38 + *(int *)(v39 + 48);
      uint64_t v42 = (char *)v38 + *(int *)(v39 + 64);
      uint64_t v43 = v22;
      id v44 = v116;
      *uint64_t v38 = v116;
      v40(v41, v119, v43);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      v5[2](v42, (uint64_t *)v26, v4);
      swift_storeEnumTagMultiPayload();
      id v45 = v44;
      swift_willThrow();
      uint64_t v29 = v118;
      swift_release();
      ((void (*)(uint64_t, uint64_t))v5[1])(v26, v4);
    }
    uint64_t v83 = type metadata accessor for __RKEntityProximityTrigger.ExitType();
    (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v113, v83);
    return v29;
  }
  if (v23 == *MEMORY[0x263F163F8])
  {
    ((void (*)(uint64_t *, uint64_t))v12[12])(v14, v11);
    uint64_t v32 = (uint64_t)v113;
    v5[4](v113, v14, v4);
    if (*(void *)(v117 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v32);
      if (v33)
      {
        uint64_t v34 = RIOPxrUsdObjectCopyPath();
        uint64_t v121 = &type metadata for Schema;
        v122 = &protocol witness table for Schema;
        uint64_t v29 = v118;
        v120[0] = v118;
        uint64_t v35 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1) {
          id v36 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v36 = (id)RIOPxrTfTokenCreateWithCString();
        }
        specialized Properties.subscript.setter(v36, v35, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        uint64_t v90 = swift_initStackObject();
        *(_OWORD *)(v90 + 16) = xmmword_23AAB22A0;
        *(void *)(v90 + 32) = v34;
        specialized Properties.subscript.setter(v90);
        outlined destroy of Any?((uint64_t)v120, &demangling cache variable for type metadata for Properties<TapTriggerSchema>);
        ((void (*)(uint64_t, uint64_t))v5[1])(v32, v4);
        return v29;
      }
    }
    uint64_t v117 = type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
    Swift::String v14 = (uint64_t *)v32;
    BOOL v12 = v5;
    swift_allocError();
    Swift::String v56 = v55;
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    unint64_t v58 = v21;
    unint64_t v59 = (char *)v56 + *(int *)(v57 + 48);
    id v60 = (char *)v56 + *(int *)(v57 + 64);
    uint64_t v61 = v22;
    unint64_t v62 = v116;
    *Swift::String v56 = v116;
    v58(v59, v119, v61);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v5[2](v60, v14, v4);
    goto LABEL_21;
  }
  if (v23 != *MEMORY[0x263F163E8])
  {
    if (v23 == *MEMORY[0x263F163E0])
    {
      ((void (*)(uint64_t *, uint64_t))v12[12])(v14, v11);
      uint64_t v65 = *v14;
      uint64_t v64 = v14[1];
      uint64_t v121 = &type metadata for Schema;
      v122 = &protocol witness table for Schema;
      uint64_t v29 = v118;
      v120[0] = v118;
      uint64_t v66 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v67 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v67 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v67, v66, 0, 0);
      uint64_t v91 = swift_getKeyPath();
      specialized Properties.subscript.setter(v65, v64, v91, 0, 0);
      uint64_t v92 = (uint64_t *)&demangling cache variable for type metadata for Properties<NotificationTriggerSchema>;
    }
    else
    {
      if (v23 != *MEMORY[0x263F163D8])
      {
        type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
        lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
        swift_allocError();
        uint64_t v86 = v85;
        uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType));
        uint64_t v88 = v21;
        uint64_t v89 = (char *)v86 + *(int *)(v87 + 48);
        uint64_t v4 = v22;
        unint64_t v62 = v116;
        *uint64_t v86 = v116;
        v88(v89, v119, v4);
        type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
        swift_storeEnumTagMultiPayload();
LABEL_21:
        swift_storeEnumTagMultiPayload();
        id v63 = v62;
        swift_willThrow();
        uint64_t v29 = v118;
        swift_release();
        ((void (*)(uint64_t *, uint64_t))v12[1])(v14, v4);
        return v29;
      }
      uint64_t v121 = &type metadata for Schema;
      v122 = &protocol witness table for Schema;
      uint64_t v29 = v118;
      v120[0] = v118;
      uint64_t v78 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v79 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v79 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v79, v78, 0, 0);
      uint64_t v96 = swift_getKeyPath();
      if (String.count.getter() < 1) {
        id v97 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v97 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v97, v96, 0, 0);
      uint64_t v92 = (uint64_t *)&demangling cache variable for type metadata for Properties<SceneTransitionTriggerSchema>;
    }
    outlined destroy of Any?((uint64_t)v120, v92);
    return v29;
  }
  id v111 = v21;
  ((void (*)(uint64_t *, uint64_t))v12[12])(v14, v11);
  uint64_t v46 = *(uint64_t *)((char *)v14
                   + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]))
                            + 48));
  swift_bridgeObjectRelease();
  uint64_t v115 = (char *)v5;
  uint64_t v47 = v5[4];
  uint64_t v48 = (uint64_t)v112;
  uint64_t v113 = (char *)v4;
  v47(v112, v14, v4);
  uint64_t v49 = v117;
  if (!*(void *)(v117 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v48), (v50 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v117 = type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
    swift_allocError();
    uint64_t v69 = v68;
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    uint64_t v71 = (char *)v69 + *(int *)(v70 + 48);
    char v72 = (char *)v69 + *(int *)(v70 + 64);
    uint64_t v73 = v116;
    void *v69 = v116;
    v111(v71, v119, v22);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v74 = v115;
    id v75 = v72;
    v76 = v113;
    (*((void (**)(char *, uint64_t, char *))v115 + 2))(v75, v48, v113);
    swift_storeEnumTagMultiPayload();
    id v77 = v73;
    swift_willThrow();
    uint64_t v29 = v118;
    swift_release();
    (*((void (**)(uint64_t, char *))v74 + 1))(v48, v76);
    return v29;
  }
  uint64_t v51 = (void *)RIOPxrUsdObjectCopyPath();
  MEMORY[0x270FA5388](v51);
  uint64_t v52 = (uint64_t)v116;
  *(&v110 - 4) = v49;
  *(&v110 - 3) = v52;
  *(&v110 - 2) = (uint64_t)v119;
  uint64_t v53 = v114;
  uint64_t v54 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9RealityIO4PrimCsAE_pTg5((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in Stage.setTrigger(trigger:at:mapping:), (uint64_t)(&v110 - 6), v46);
  if (v53)
  {
    uint64_t v29 = v118;
    swift_release();

    (*((void (**)(uint64_t, char *))v115 + 1))(v48, v113);
    swift_bridgeObjectRelease();
    return v29;
  }
  unint64_t v93 = v54;
  swift_bridgeObjectRelease();
  uint64_t v121 = &type metadata for Schema;
  v122 = &protocol witness table for Schema;
  v120[0] = v118;
  uint64_t v94 = swift_getKeyPath();
  swift_retain();
  if (String.count.getter() < 1) {
    id v95 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v95 = (id)RIOPxrTfTokenCreateWithCString();
  }
  specialized Properties.subscript.setter(v95, v94, 0, 0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t v98 = swift_initStackObject();
  *(_OWORD *)(v98 + 16) = xmmword_23AAB22A0;
  *(void *)(v98 + 32) = v51;
  uint64_t v99 = v51;
  specialized Properties.subscript.setter(v98);
  swift_getKeyPath();
  if (v93 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v100 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v114 = 0;
  if (!v100)
  {
    swift_bridgeObjectRelease();
    uint64_t v101 = MEMORY[0x263F8EE78];
LABEL_63:
    specialized Properties.subscript.setter(v101);

    outlined destroy of Any?((uint64_t)v120, &demangling cache variable for type metadata for Properties<CollideTriggerSchema>);
    (*((void (**)(char *, char *))v115 + 1))(v112, v113);
    return v118;
  }
  uint64_t v123 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100 & ~(v100 >> 63), 0);
  if ((v100 & 0x8000000000000000) == 0)
  {
    v119 = v99;
    uint64_t v101 = v123;
    if ((v93 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v100; ++i)
      {
        MEMORY[0x23ECBA630](i, v93);
        uint64_t v103 = RIOPxrUsdObjectCopyPath();
        swift_unknownObjectRelease();
        uint64_t v123 = v101;
        unint64_t v105 = *(void *)(v101 + 16);
        unint64_t v104 = *(void *)(v101 + 24);
        if (v105 >= v104 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
          uint64_t v101 = v123;
        }
        *(void *)(v101 + 16) = v105 + 1;
        *(void *)(v101 + 8 * v105 + 32) = v103;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v100; ++j)
      {
        uint64_t v107 = RIOPxrUsdObjectCopyPath();
        uint64_t v123 = v101;
        unint64_t v109 = *(void *)(v101 + 16);
        unint64_t v108 = *(void *)(v101 + 24);
        if (v109 >= v108 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1);
          uint64_t v101 = v123;
        }
        *(void *)(v101 + 16) = v109 + 1;
        *(void *)(v101 + 8 * v109 + 32) = v107;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v99 = v119;
    goto LABEL_63;
  }
  __break(1u);
  return result;
}

void Stage.setAction(action:at:mapping:)(void *a1, void **a2, uint64_t a3)
{
  v923 = (void *)a3;
  v924 = a1;
  uint64_t v5 = type metadata accessor for __RKWaitActionArguments();
  uint64_t v804 = *(void *)(v5 - 8);
  uint64_t v805 = v5;
  MEMORY[0x270FA5388](v5);
  v803 = (char *)&v770 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  uint64_t v825 = *(void *)(v7 - 8);
  uint64_t v826 = v7;
  MEMORY[0x270FA5388](v7);
  v814 = (char *)&v770 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  v813 = (char *)&v770 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v823 = (uint64_t)&v770 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v824 = (char *)&v770 - v14;
  uint64_t v862 = type metadata accessor for __RKEntityHideActionArguments();
  uint64_t v861 = *(void *)(v862 - 8);
  MEMORY[0x270FA5388](v862);
  v860 = (char *)&v770 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  uint64_t v801 = *(void *)(v16 - 8);
  uint64_t v802 = v16;
  MEMORY[0x270FA5388](v16);
  v785 = (char *)&v770 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v784 = (char *)&v770 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
  MEMORY[0x270FA5388](v20 - 8);
  v821 = (char *)&v770 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  v800 = (char *)&v770 - v23;
  uint64_t v844 = type metadata accessor for __RKEntityShowActionArguments();
  uint64_t v843 = *(void *)(v844 - 8);
  MEMORY[0x270FA5388](v844);
  v842 = (char *)&v770 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v25 - 8);
  v776 = (char *)&v770 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x270FA5388](v27 - 8);
  v838 = (char *)&v770 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  v820 = (char *)&v770 - v30;
  MEMORY[0x270FA5388](v31);
  v796 = (char *)&v770 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x270FA5388](v33 - 8);
  v837 = (char *)&v770 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  v819 = (char *)&v770 - v36;
  MEMORY[0x270FA5388](v37);
  v795 = (char *)&v770 - v38;
  uint64_t v39 = type metadata accessor for __RKEntityMoveSelection();
  uint64_t v794 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  v781 = (char *)&v770 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  v782 = (char *)&v770 - v42;
  MEMORY[0x270FA5388](v43);
  v793 = (char *)&v770 - v44;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveSelection?);
  MEMORY[0x270FA5388](v45 - 8);
  uint64_t v792 = (uint64_t)&v770 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  uint64_t v809 = (uint64_t)&v770 - v48;
  uint64_t v49 = type metadata accessor for __RKEntityTransformActionArguments();
  uint64_t v830 = *(void *)(v49 - 8);
  uint64_t v831 = v49;
  MEMORY[0x270FA5388](v49);
  v832 = (char *)&v770 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments();
  uint64_t v840 = *(void *)(started - 8);
  MEMORY[0x270FA5388](started);
  v829 = (char *)&v770 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v52);
  v833 = (char *)&v770 - v53;
  uint64_t v54 = type metadata accessor for __RKEntitySpinActionArguments();
  uint64_t v778 = *(void *)(v54 - 8);
  uint64_t v779 = v54;
  MEMORY[0x270FA5388](v54);
  v780 = (char *)&v770 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x270FA5388](v56 - 8);
  uint64_t v771 = (uint64_t)&v770 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  uint64_t v772 = (uint64_t)&v770 - v59;
  uint64_t v60 = type metadata accessor for __RKEntityOrbitEntityActionArguments();
  uint64_t v806 = *(void *)(v60 - 8);
  uint64_t v807 = v60;
  MEMORY[0x270FA5388](v60);
  v810 = (char *)&v770 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v886 = type metadata accessor for __RKEntityCustomActionArguments();
  uint64_t v904 = *(void *)(v886 - 8);
  MEMORY[0x270FA5388](v886);
  v903 = (char *)&v770 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v783 = type metadata accessor for __RKEntityLookAtCameraActionArguments();
  uint64_t v787 = *(void *)(v783 - 8);
  MEMORY[0x270FA5388](v783);
  v797 = (char *)&v770 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v847 = type metadata accessor for __RKEntityForceActionArguments();
  uint64_t v846 = *(void *)(v847 - 8);
  MEMORY[0x270FA5388](v847);
  v848 = (char *)&v770 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v912 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification));
  uint64_t v859 = *(void *)(v912 - 8);
  MEMORY[0x270FA5388](v912);
  v905 = (char *)&v770 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
  MEMORY[0x270FA5388](v66 - 8);
  *(void *)&long long v922 = (char *)&v770 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v68);
  v911 = (uint64_t *)((char *)&v770 - v69);
  uint64_t v854 = type metadata accessor for __RKEntityEmphasisAnimationType();
  uint64_t v853 = *(void *)(v854 - 8);
  MEMORY[0x270FA5388](v854);
  v852 = (char *)&v770 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  MEMORY[0x270FA5388](v71 - 8);
  uint64_t v851 = (uint64_t)&v770 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v73);
  uint64_t v865 = (uint64_t)&v770 - v74;
  uint64_t v856 = type metadata accessor for __RKEntityActionAnimationStyle();
  uint64_t v855 = *(void *)(v856 - 8);
  MEMORY[0x270FA5388](v856);
  v812 = (char *)&v770 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v76);
  v799 = (char *)&v770 - v77;
  MEMORY[0x270FA5388](v78);
  v850 = (char *)&v770 - v79;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x270FA5388](v80 - 8);
  v836 = (char *)&v770 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v82);
  v834 = (char *)&v770 - v83;
  MEMORY[0x270FA5388](v84);
  uint64_t v798 = (uint64_t)&v770 - v85;
  MEMORY[0x270FA5388](v86);
  uint64_t v811 = (uint64_t)&v770 - v87;
  MEMORY[0x270FA5388](v88);
  uint64_t v849 = (uint64_t)&v770 - v89;
  MEMORY[0x270FA5388](v90);
  uint64_t v863 = (uint64_t)&v770 - v91;
  uint64_t v888 = type metadata accessor for __RKEntityEmphasisActionArguments();
  uint64_t v887 = *(void *)(v888 - 8);
  MEMORY[0x270FA5388](v888);
  v899 = (char *)&v770 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v910 = type metadata accessor for __RKChangeSceneActionArguments();
  uint64_t v909 = *(void *)(v910 - 8);
  MEMORY[0x270FA5388](v910);
  v908 = (char *)&v770 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v898 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  uint64_t v902 = *(void *)(v898 - 8);
  MEMORY[0x270FA5388](v898);
  v790 = (char *)&v770 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v95);
  v808 = (char *)&v770 - v96;
  MEMORY[0x270FA5388](v97);
  v818 = (char *)&v770 - v98;
  MEMORY[0x270FA5388](v99);
  v866 = (char *)&v770 - v100;
  MEMORY[0x270FA5388](v101);
  v877 = (char *)&v770 - v102;
  MEMORY[0x270FA5388](v103);
  v876 = (char *)&v770 - v104;
  uint64_t v897 = type metadata accessor for __RKAudioSpatialModeSelection();
  uint64_t v896 = *(void *)(v897 - 8);
  MEMORY[0x270FA5388](v897);
  v864 = (char *)&v770 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v106);
  v874 = (char *)&v770 - v107;
  MEMORY[0x270FA5388](v108);
  v873 = (char *)&v770 - v109;
  uint64_t v895 = type metadata accessor for __RKEntityAudioActionType();
  uint64_t v901 = *(void *)(v895 - 8);
  MEMORY[0x270FA5388](v895);
  v872 = (char *)&v770 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v883 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v882 = *(void *)(v883 - 8);
  MEMORY[0x270FA5388](v883);
  v857 = (char *)&v770 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v112);
  v858 = (char *)&v770 - v113;
  MEMORY[0x270FA5388](v114);
  v878 = (char *)&v770 - v115;
  uint64_t v900 = type metadata accessor for __RKEntityActionGroupArguments();
  uint64_t v889 = *(void *)(v900 - 8);
  MEMORY[0x270FA5388](v900);
  v822 = (char *)&v770 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v117);
  v879 = (char *)&v770 - v118;
  MEMORY[0x270FA5388](v119);
  v881 = (char *)&v770 - v120;
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x270FA5388](v121 - 8);
  uint64_t v875 = (uint64_t)&v770 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v123);
  uint64_t v885 = (uint64_t)&v770 - v124;
  MEMORY[0x270FA5388](v125);
  v869 = (char *)&v770 - v126;
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
  MEMORY[0x270FA5388](v127 - 8);
  v871 = (char *)&v770 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v129);
  uint64_t v884 = (uint64_t)&v770 - v130;
  MEMORY[0x270FA5388](v131);
  v890 = (char *)&v770 - v132;
  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityAudioActionType?);
  MEMORY[0x270FA5388](v133 - 8);
  uint64_t v870 = (uint64_t)&v770 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v135);
  uint64_t v894 = (uint64_t)&v770 - v136;
  MEMORY[0x270FA5388](v137);
  v893 = (char *)&v770 - v138;
  v917 = (void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))type metadata accessor for UUID();
  uint64_t v916 = (uint64_t)*(v917 - 1);
  MEMORY[0x270FA5388](v917);
  v845 = (char *)&v770 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v140);
  v835 = (char *)&v770 - v141;
  MEMORY[0x270FA5388](v142);
  v775 = (char *)&v770 - v143;
  MEMORY[0x270FA5388](v144);
  v816 = (char *)&v770 - v145;
  MEMORY[0x270FA5388](v146);
  v815 = (char *)&v770 - v147;
  MEMORY[0x270FA5388](v148);
  v827 = (char *)&v770 - v149;
  MEMORY[0x270FA5388](v150);
  v773 = (char *)&v770 - v151;
  MEMORY[0x270FA5388](v152);
  v774 = (char *)&v770 - v153;
  MEMORY[0x270FA5388](v154);
  v786 = (char *)&v770 - v155;
  MEMORY[0x270FA5388](v156);
  v158 = (char *)&v770 - v157;
  MEMORY[0x270FA5388](v159);
  v777 = (char *)&v770 - v160;
  MEMORY[0x270FA5388](v161);
  v841 = (char *)&v770 - v162;
  MEMORY[0x270FA5388](v163);
  v867 = (char *)&v770 - v164;
  MEMORY[0x270FA5388](v165);
  v167 = (char *)&v770 - v166;
  MEMORY[0x270FA5388](v168);
  v892 = (char *)&v770 - v169;
  MEMORY[0x270FA5388](v170);
  v172 = (char *)&v770 - v171;
  v915 = (void (**)(void, void))type metadata accessor for __RKEntityAudioActionArguments();
  uint64_t v920 = (uint64_t)*(v915 - 1);
  MEMORY[0x270FA5388](v915);
  v891 = (char *)&v770 - ((v173 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v174);
  v914 = (char *)&v770 - v175;
  *(void *)&v926.f64[0] = type metadata accessor for __RKEntityActionSpecification();
  *(void *)&long long v925 = *(void *)(*(void *)&v926.f64[0] - 8);
  MEMORY[0x270FA5388](*(void *)&v926.f64[0]);
  v817 = (char *)&v770 - ((v176 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v177);
  v828 = (char *)&v770 - v178;
  MEMORY[0x270FA5388](v179);
  v907 = (char *)&v770 - v180;
  MEMORY[0x270FA5388](v181);
  v868 = (char *)&v770 - v182;
  MEMORY[0x270FA5388](v183);
  v880 = (char *)&v770 - v184;
  MEMORY[0x270FA5388](v185);
  unint64_t v187 = (unint64_t)&v770 - v186;
  v188 = (char *)*a2;
  id v189 = (id)RIOPxrTfTokenEmpty();
  uint64_t v913 = v3;
  uint64_t v789 = *(void *)(v3 + 16);
  v921 = v188;
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  uint64_t v788 = type metadata accessor for Prim();
  uint64_t v191 = swift_allocObject();
  *(void *)(v191 + 16) = PrimIfNeeded;

  uint64_t v192 = String.count.getter();
  uint64_t v791 = v39;
  if (v192 < 1) {
    id v193 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v193 = (id)RIOPxrTfTokenCreateWithCString();
  }
  v194 = v193;
  RIOPxrUsdPrimSetTypeName();

  uint64_t v195 = v925;
  v196 = *(void (**)(char *, void *, void))(v925 + 16);
  float64_t v197 = v926.f64[0];
  v919 = (void (*)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v925 + 16);
  v918 = (void (*)(char *, char *, void))v196;
  v196((char *)v187, (char *)v924, *(void *)&v926.f64[0]);
  uint64_t v198 = (*(uint64_t (**)(unint64_t, float64_t))(v195 + 88))(v187, COERCE_FLOAT64_T(*(void *)&v197));
  uint64_t v199 = v198;
  if (v198 == *MEMORY[0x263F16398])
  {
    uint64_t v906 = v191;
    (*(void (**)(unint64_t, float64_t))(v195 + 96))(v187, COERCE_FLOAT64_T(*(void *)&v197));
    v200 = v914;
    v201 = v915;
    uint64_t v202 = (*(uint64_t (**)(char *, unint64_t, void (**)(void, void)))(v920 + 32))(v914, v187, v915);
    MEMORY[0x23ECB91A0](v202);
    if (!v923[2] || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v172), (v203 & 1) == 0))
    {
      (*(void (**)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v172, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v927 = swift_allocError();
      v219 = v218;
      v220 = (char *)v218
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      float64_t v221 = v197;
      uint64_t v222 = (uint64_t)v201;
      v223 = v921;
      void *v219 = v921;
      v918(v220, (char *)v924, *(void *)&v221);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      MEMORY[0x23ECB91A0](v223);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      v224 = *(void (**)(unint64_t, uint64_t))(v920 + 8);
      unint64_t v225 = (unint64_t)v200;
      goto LABEL_29;
    }
    v204 = *(void (**)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
    swift_retain();
    v204(v172, v917);
    v205 = (void *)RIOPxrUsdObjectCopyPath();
    swift_release();
    if ((__RKEntityAudioActionArguments.loops.getter() & 1) == 0)
    {
      v938 = &protocol witness table for Schema;
      v937 = &type metadata for Schema;
      uint64_t v935 = v906;
      uint64_t KeyPath = swift_getKeyPath();
      swift_retain();
      uint64_t v207 = String.count.getter();
      uint64_t v208 = v897;
      uint64_t v209 = v896;
      uint64_t v210 = v895;
      if (v207 < 1) {
        id v211 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v211 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v211, KeyPath, 0, 0);
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t v296 = swift_allocObject();
      *(_OWORD *)(v296 + 16) = xmmword_23AAB22A0;
      *(void *)(v296 + 32) = v205;
      *(void *)&v926.f64[0] = v205;
      specialized Properties.subscript.setter(v296);
      uint64_t v297 = swift_getKeyPath();
      __RKEntityAudioActionArguments.path.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v298 = (void *)RIOPxrSdfAssetPathCreateFromCString();
      swift_release();
      specialized Properties.subscript.setter(v298, v297, 0, 0);
      uint64_t v299 = swift_getKeyPath();
      uint64_t v300 = v894;
      __RKEntityAudioActionArguments.type.getter();
      uint64_t v301 = v870;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v300, v870, &demangling cache variable for type metadata for __RKEntityAudioActionType?);
      uint64_t v302 = v901;
      id v303 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v901 + 48))(v301, 1, v210) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v302 + 32))(v872, v301, v210);
        __RKEntityAudioActionType.rawValue.getter();
        if (String.count.getter() < 1)
        {
          swift_bridgeObjectRelease();
          id v303 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          id v303 = (id)RIOPxrTfTokenCreateWithCString();
          swift_release();
        }
        (*(void (**)(char *, uint64_t))(v901 + 8))(v872, v210);
      }
      outlined destroy of Any?(v894, &demangling cache variable for type metadata for __RKEntityAudioActionType?);
      specialized Properties.subscript.setter(v303, v299, 0, 0);
      double v320 = COERCE_DOUBLE(__RKEntityAudioActionArguments.volume.getter());
      if (v321)
      {
        uint64_t v322 = 0x3FF0000000000000;
        uint64_t v323 = v884;
        uint64_t v324 = (uint64_t)v871;
        uint64_t v325 = v902;
      }
      else
      {
        uint64_t v322 = *(void *)&v320;
        uint64_t v323 = v884;
        uint64_t v324 = (uint64_t)v871;
        uint64_t v325 = v902;
        if (v320 < 0.0) {
          uint64_t v322 = 0;
        }
      }
      uint64_t v326 = swift_getKeyPath();
      specialized Properties.subscript.setter(v322, 0, v326, 0, 0);
      uint64_t v327 = swift_getKeyPath();
      __RKEntityAudioActionArguments.spatialMode.getter();
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v323, v324, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v324, 1, v208) == 1)
      {
        outlined destroy of Any?(v323, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
        id v328 = 0;
        uint64_t v329 = v898;
      }
      else
      {
        *(void *)&long long v925 = v327;
        v330 = v873;
        (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v873, v324, v208);
        v331 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
        v332 = v874;
        v331(v874, v330, v208);
        v333 = v864;
        v331(v864, v332, v208);
        int v334 = (*(uint64_t (**)(char *, uint64_t))(v209 + 88))(v333, v208);
        if (v334 == *MEMORY[0x263F16340])
        {
          uint64_t v329 = v898;
          uint64_t v327 = v925;
        }
        else
        {
          uint64_t v329 = v898;
          uint64_t v327 = v925;
          if (v334 != *MEMORY[0x263F16338] && v334 != *MEMORY[0x263F16348]) {
            goto LABEL_332;
          }
        }
        v394 = *(void (**)(char *, uint64_t))(v209 + 8);
        v394(v874, v208);
        v394(v873, v208);
        outlined destroy of Any?(v884, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
        if (String.count.getter() <= 0)
        {
          swift_bridgeObjectRelease();
          id v328 = (id)RIOPxrTfTokenEmpty();
          uint64_t v325 = v902;
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          id v328 = (id)RIOPxrTfTokenCreateWithCString();
          uint64_t v325 = v902;
          swift_release();
        }
      }
      specialized Properties.subscript.setter(v328, v327, 0, 0);
      uint64_t v395 = swift_getKeyPath();
      uint64_t v396 = v885;
      __RKEntityAudioActionArguments.multiplePerformBehavior.getter();
      uint64_t v397 = v875;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v396, v875, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v325 + 48))(v397, 1, v329) == 1)
      {
        outlined destroy of Any?(v396, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
        id v398 = 0;
LABEL_109:
        v405 = v915;
        specialized Properties.subscript.setter(v398, v395, 0, 0);

        outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<AudioActionSchema>);
        (*(void (**)(char *, void))(v920 + 8))(v200, v405);
        return;
      }
      v399 = v876;
      (*(void (**)(char *, uint64_t, uint64_t))(v325 + 32))(v876, v397, v329);
      v400 = *(void (**)(char *, char *, uint64_t))(v325 + 16);
      v401 = v877;
      v400(v877, v399, v329);
      v402 = v866;
      v400(v866, v401, v329);
      int v403 = (*(uint64_t (**)(char *, uint64_t))(v325 + 88))(v402, v329);
      if (v403 == *MEMORY[0x263F16418] || v403 == *MEMORY[0x263F16420] || v403 == *MEMORY[0x263F16410])
      {
        v404 = *(void (**)(char *, uint64_t))(v325 + 8);
        v404(v877, v329);
        v404(v876, v329);
        outlined destroy of Any?(v885, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
        if (String.count.getter() <= 0)
        {
          swift_bridgeObjectRelease();
          id v398 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          id v398 = (id)RIOPxrTfTokenCreateWithCString();
          swift_release();
        }
        goto LABEL_109;
      }
LABEL_331:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
LABEL_332:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      goto LABEL_333;
    }
    v924 = v205;
    MEMORY[0x23ECB91A0]();
    __RKEntityAudioActionArguments.path.getter();
    v255 = v893;
    __RKEntityAudioActionArguments.type.getter();
    int v256 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v901 + 48))(v255, 1, v895);
    uint64_t v257 = v897;
    uint64_t v258 = v896;
    if (v256 == 1)
    {
      __break(1u);
    }
    else
    {
      v259 = v890;
      __RKEntityAudioActionArguments.spatialMode.getter();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v258 + 48))(v259, 1, v257) != 1)
      {
        __RKEntityAudioActionArguments.volume.getter();
        v260 = v891;
        v261 = v869;
        if ((v262 & 1) == 0)
        {
          __RKEntityAudioActionArguments.multiplePerformBehavior.getter();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v902 + 48))(v261, 1, v898) != 1)
          {
            __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)();
            v263 = v260;
            v264 = v880;
            (*(void (**)(char *, char *, void (**)(void, void)))(v920 + 16))(v880, v263, v915);
            uint64_t v265 = v925 + 104;
            *(void *)&long long v922 = *(void *)(v925 + 104);
            float64_t v266 = v926.f64[0];
            ((void (*)(char *, uint64_t, void))v922)(v264, v199, *(void *)&v926.f64[0]);
            (*(void (**)(char *, void, uint64_t))(v882 + 104))(v878, *MEMORY[0x263F16310], v883);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
            unint64_t v267 = (*(unsigned __int8 *)(v265 - 24) + 32) & ~(unint64_t)*(unsigned __int8 *)(v265 - 24);
            uint64_t v268 = swift_allocObject();
            *(_OWORD *)(v268 + 16) = xmmword_23AAB22A0;
            v918((char *)(v268 + v267), v264, *(void *)&v266);
            v269 = v881;
            __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
            uint64_t v270 = v889;
            v271 = v868;
            uint64_t v272 = v900;
            (*(void (**)(char *, char *, uint64_t))(v889 + 16))(v868, v269, v900);
            ((void (*)(char *, void, void))v922)(v271, *MEMORY[0x263F163A8], *(void *)&v266);
            uint64_t v929 = (uint64_t)v921;
            uint64_t v273 = v927;
            Stage.makeParentPrim(from:baseName:)(&v929, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, &v935);
            uint64_t v927 = v273;
            if (v273)
            {

              swift_release();
              v274 = *(void (**)(char *, void))(v925 + 8);
              v274(v271, *(void *)&v266);
              (*(void (**)(char *, uint64_t))(v270 + 8))(v269, v272);
              v274(v264, *(void *)&v266);
              v275 = *(void (**)(char *, void))(v920 + 8);
              v276 = v915;
              v275(v891, v915);
              v275(v914, v276);
            }
            else
            {
              v305 = (void *)v935;
              Stage.setAction(action:at:mapping:)(v271, &v935, v923);
              uint64_t v927 = 0;
              v306 = v271;

              swift_release();
              v381 = *(void (**)(char *, void))(v925 + 8);
              v382 = v306;
              float64_t v383 = v926.f64[0];
              v381(v382, *(void *)&v926.f64[0]);
              (*(void (**)(char *, uint64_t))(v270 + 8))(v881, v900);
              v381(v880, *(void *)&v383);
              v384 = *(void (**)(char *, void))(v920 + 8);
              v385 = v915;
              v384(v891, v915);
              v384(v914, v385);
            }
            return;
          }
          goto LABEL_328;
        }
LABEL_327:
        __break(1u);
LABEL_328:
        __break(1u);
        goto LABEL_329;
      }
    }
    __break(1u);
    goto LABEL_327;
  }
  if (v198 == *MEMORY[0x263F16350])
  {
    float64_t v212 = v926.f64[0];
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    (*(void (**)(char *, unint64_t, uint64_t))(v909 + 32))(v908, v187, v910);
    __RKChangeSceneActionArguments.targetSceneIdentifier.getter();
    if (v923[2] && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v167), (v213 & 1) != 0))
    {
      v214 = *(void (**)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
      swift_retain();
      v214(v167, v917);
      uint64_t v215 = RIOPxrUsdObjectCopyPath();
      swift_release();
      v938 = &protocol witness table for Schema;
      v937 = &type metadata for Schema;
      uint64_t v935 = v191;
      uint64_t v216 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v217 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v217 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v217, v216, 0, 0);
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t v304 = swift_allocObject();
      *(_OWORD *)(v304 + 16) = xmmword_23AAB22A0;
      *(void *)(v304 + 32) = v215;
      specialized Properties.subscript.setter(v304);
      outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<ChangeSceneActionSchema>);
      (*(void (**)(char *, uint64_t))(v909 + 8))(v908, v910);
    }
    else
    {
      (*(void (**)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v167, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v232 = swift_allocError();
      v234 = v233;
      v235 = (char *)v233
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v236 = v921;
      void *v234 = v921;
      v918(v235, (char *)v924, *(void *)&v212);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      id v237 = v236;
      v238 = v908;
      __RKChangeSceneActionArguments.targetSceneIdentifier.getter();
      swift_storeEnumTagMultiPayload();
      uint64_t v927 = v232;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v909 + 8))(v238, v910);
    }
    return;
  }
  if (v198 == *MEMORY[0x263F163B0])
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    uint64_t v222 = v886;
    uint64_t v226 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v904 + 32))(v903, v187, v886);
    MEMORY[0x23ECB9240](v226);
    if (v923[2])
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v158);
      if (v227)
      {
        v228 = *(void (**)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
        swift_retain();
        v228(v158, v917);
        v229 = (void *)RIOPxrUsdObjectCopyPath();
        swift_release();
        v938 = &protocol witness table for Schema;
        v937 = &type metadata for Schema;
        uint64_t v935 = v191;
        uint64_t v230 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1) {
          id v231 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v231 = (id)RIOPxrTfTokenCreateWithCString();
        }
        specialized Properties.subscript.setter(v231, v230, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        uint64_t v314 = swift_allocObject();
        *(_OWORD *)(v314 + 16) = xmmword_23AAB22A0;
        *(void *)(v314 + 32) = v229;
        id v315 = v229;
        specialized Properties.subscript.setter(v314);
        uint64_t v316 = swift_getKeyPath();
        v317 = v903;
        uint64_t v318 = __RKEntityCustomActionArguments.actionIdentifier.getter();
        specialized Properties.subscript.setter(v318, v319, v316, 0, 0);

        outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<NotificationActionSchema>);
        (*(void (**)(char *, uint64_t))(v904 + 8))(v317, v222);
        return;
      }
    }
    (*(void (**)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v158, v917);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
    uint64_t v247 = swift_allocError();
    v249 = v248;
    v250 = (char *)v248
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v251 = v921;
    void *v249 = v921;
    v918(v250, (char *)v924, *(void *)&v926.f64[0]);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    id v252 = v251;
    v253 = v903;
    MEMORY[0x23ECB9240](v252);
    swift_storeEnumTagMultiPayload();
    uint64_t v927 = v247;
    swift_willThrow();
    swift_release();
    uint64_t v254 = v904;
    goto LABEL_28;
  }
  if (v198 == *MEMORY[0x263F163B8])
  {
    float64_t v239 = v926.f64[0];
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    uint64_t v240 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v887 + 32))(v899, v187, v888);
    uint64_t v241 = (uint64_t)v867;
    MEMORY[0x23ECB92C0](v240);
    if (v923[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v241), (v242 & 1) != 0))
    {
      v243 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
      swift_retain();
      v243(v241, v917);
      v244 = (void *)RIOPxrUsdObjectCopyPath();
      swift_release();
      v938 = &protocol witness table for Schema;
      v937 = &type metadata for Schema;
      uint64_t v935 = v191;
      uint64_t v245 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v246 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v246 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v413 = v856;
      uint64_t v414 = v855;
      specialized Properties.subscript.setter(v246, v245, 0, 0);
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t v415 = swift_allocObject();
      *(_OWORD *)(v415 + 16) = xmmword_23AAB22A0;
      *(void *)(v415 + 32) = v244;
      id v416 = v244;
      specialized Properties.subscript.setter(v415);
      uint64_t v417 = swift_getKeyPath();
      uint64_t v418 = __RKEntityEmphasisActionArguments.duration.getter();
      char v419 = BYTE4(v418) & 1;
      if ((v418 & 0x100000000) != 0) {
        double v420 = 0.0;
      }
      else {
        double v420 = *(float *)&v418;
      }
      specialized Properties.subscript.setter(*(uint64_t *)&v420, v419, v417, 0, 0);
      uint64_t v421 = swift_getKeyPath();
      uint64_t v422 = v863;
      __RKEntityEmphasisActionArguments.animationStyle.getter();
      uint64_t v423 = v422;
      uint64_t v424 = v849;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v423, v849, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
      id v425 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v414 + 48))(v424, 1, v413) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v414 + 32))(v850, v424, v413);
        __RKEntityActionAnimationStyle.rawValue.getter();
        if (String.count.getter() < 1)
        {
          swift_bridgeObjectRelease();
          id v425 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          id v425 = (id)RIOPxrTfTokenCreateWithCString();
          swift_release();
        }
        (*(void (**)(char *, uint64_t))(v414 + 8))(v850, v413);
      }
      outlined destroy of Any?(v863, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
      specialized Properties.subscript.setter(v425, v421, 0, 0);
      uint64_t v445 = swift_getKeyPath();
      uint64_t v446 = v865;
      __RKEntityEmphasisActionArguments.emphasisAnimationType.getter();
      uint64_t v447 = v851;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v446, v851, &demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
      uint64_t v448 = v853;
      uint64_t v449 = v854;
      id v450 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v853 + 48))(v447, 1, v854) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v448 + 32))(v852, v447, v449);
        __RKEntityEmphasisAnimationType.rawValue.getter();
        if (String.count.getter() < 1)
        {
          swift_bridgeObjectRelease();
          id v450 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          id v450 = (id)RIOPxrTfTokenCreateWithCString();
          swift_release();
        }
        (*(void (**)(char *, uint64_t))(v448 + 8))(v852, v449);
      }
      outlined destroy of Any?(v865, &demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
      specialized Properties.subscript.setter(v450, v445, 0, 0);

      outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<EmphasisActionSchema>);
      (*(void (**)(char *, uint64_t))(v887 + 8))(v899, v888);
    }
    else
    {
      (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v241, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v281 = swift_allocError();
      v283 = v282;
      v284 = (char *)v282
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v285 = v921;
      void *v283 = v921;
      v918(v284, (char *)v924, *(void *)&v239);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      id v286 = v285;
      v287 = v899;
      MEMORY[0x23ECB92C0](v286);
      swift_storeEnumTagMultiPayload();
      uint64_t v927 = v281;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v887 + 8))(v287, v888);
    }
    return;
  }
  uint64_t v277 = *MEMORY[0x263F163A8];
  uint64_t v906 = v191;
  float64_t v278 = v926.f64[0];
  if (v198 == v277)
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    (*(void (**)(char *, unint64_t, uint64_t))(v889 + 32))(v879, v187, v900);
    v938 = &protocol witness table for Schema;
    v937 = &type metadata for Schema;
    uint64_t v935 = v191;
    uint64_t v279 = swift_getKeyPath();
    swift_retain();
    if (String.count.getter() < 1) {
      id v280 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v280 = (id)RIOPxrTfTokenCreateWithCString();
    }
    v335 = (ValueMetadata *)v912;
    uint64_t v336 = v883;
    uint64_t v337 = v882;
    v338 = v858;
    specialized Properties.subscript.setter(v280, v279, 0, 0);
    uint64_t v339 = swift_getKeyPath();
    __RKEntityActionGroupArguments.order.getter();
    v340 = v857;
    (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v857, v338, v336);
    int v341 = (*(uint64_t (**)(char *, uint64_t))(v337 + 88))(v340, v336);
    if (v341 != *MEMORY[0x263F16310] && v341 != *MEMORY[0x263F16318]) {
      goto LABEL_330;
    }
    (*(void (**)(char *, uint64_t))(v337 + 8))(v338, v336);
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      id v342 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      id v342 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    specialized Properties.subscript.setter(v342, v339, 0, 0);
    uint64_t v343 = swift_getKeyPath();
    uint64_t v344 = __RKEntityActionGroupArguments.loopCount.getter();
    if (v345)
    {
LABEL_329:
      __break(1u);
LABEL_330:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      goto LABEL_331;
    }
    specialized Properties.subscript.setter(v344 == 0, v343, 0, 0);
    swift_getKeyPath();
    uint64_t v346 = __RKEntityActionGroupArguments.loopCount.getter();
    specialized Properties.subscript.setter(v346, v347 & 1);
    unint64_t v933 = MEMORY[0x263F8EE78];
    v348 = (char *)__RKEntityActionGroupArguments.actions.getter();
    v349 = (void *)specialized Array._getCount()((uint64_t)v348);
    unint64_t v187 = 0;
    uint64_t v920 = v925 + 32;
    v917 = (void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))(v859 + 56);
    uint64_t v916 = v859 + 48;
    v915 = (void (**)(void, void))(v925 + 8);
    uint64_t v199 = v922;
    if (v349) {
      goto LABEL_83;
    }
LABEL_85:
    uint64_t v369 = 1;
    v364 = v349;
    while (1)
    {
      (*v917)(v199, v369, 1, v335);
      v370 = v911;
      outlined init with take of (URL, __REAsset)(v199, (uint64_t)v911, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, ValueMetadata *))v916)(v370, 1, v335) == 1) {
        break;
      }
      v924 = v364;
      v350 = v349;
      uint64_t v351 = *v370;
      uint64_t v352 = (uint64_t)v907;
      (*(void (**)(char *, char *, float64_t))v920)(v907, (char *)v370 + SLODWORD(v335[3].Kind), COERCE_FLOAT64_T(*(void *)&v278));
      v353 = v921;
      v354 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v355 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v357 = v356;

      uint64_t v929 = 0x5F6E6F697463412FLL;
      unint64_t v930 = 0xE800000000000000;
      if (__OFADD__(v351, 1))
      {
        __break(1u);
        goto LABEL_206;
      }
      uint64_t v928 = v351 + 1;
      v358._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v358);
      swift_bridgeObjectRelease();
      uint64_t v359 = v929;
      v360 = (void *)v930;
      uint64_t v929 = v355;
      unint64_t v930 = (unint64_t)v357;
      swift_bridgeObjectRetain();
      v361._countAndFlagsBits = v359;
      v361._object = v360;
      String.append(_:)(v361);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v362 = (void *)RIOPxrSdfPathCreateFromCString();
      swift_release();
      uint64_t v929 = (uint64_t)v362;
      uint64_t v363 = v927;
      Stage.setAction(action:at:mapping:)(v352, &v929, v923);
      uint64_t v927 = v363;
      if (v363)
      {
        swift_release();
        (*v915)(v352, *(void *)&v926.f64[0]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<GroupActionSchema>);
        (*(void (**)(char *, uint64_t))(v889 + 8))(v879, v900);

        return;
      }
      MEMORY[0x23ECBA100]();
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((v933 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      float64_t v278 = v926.f64[0];
      (*v915)(v352, *(void *)&v926.f64[0]);
      v335 = (ValueMetadata *)v912;
      uint64_t v199 = v922;
      v349 = v350;
      unint64_t v187 = (unint64_t)v924;
      if (v924 == v349) {
        goto LABEL_85;
      }
LABEL_83:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v187, 1, (uint64_t)v348);
      v364 = (void *)(v187 + 1);
      if (__OFADD__(v187, 1))
      {
        __break(1u);
LABEL_212:
        if (v199 == *MEMORY[0x263F16388])
        {
          (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
          uint64_t v584 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v778 + 32))(v780, v187, v779);
          uint64_t v585 = (uint64_t)v773;
          MEMORY[0x23ECB9040](v584);
          if (v349[2])
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v585);
            if (v586)
            {
              v587 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
              swift_retain();
              v587(v585, v917);
              v588 = (void *)RIOPxrUsdObjectCopyPath();
              swift_release();
              v938 = &protocol witness table for Schema;
              v937 = &type metadata for Schema;
              uint64_t v935 = v906;
              uint64_t v589 = swift_getKeyPath();
              swift_retain();
              if (String.count.getter() < 1) {
                id v590 = (id)RIOPxrTfTokenEmpty();
              }
              else {
                id v590 = (id)RIOPxrTfTokenCreateWithCString();
              }
              specialized Properties.subscript.setter(v590, v589, 0, 0);
              swift_getKeyPath();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
              uint64_t v755 = swift_allocObject();
              *(_OWORD *)(v755 + 16) = xmmword_23AAB22A0;
              *(void *)(v755 + 32) = v588;
              id v756 = v588;
              specialized Properties.subscript.setter(v755);
              uint64_t v757 = swift_getKeyPath();
              uint64_t v758 = __RKEntitySpinActionArguments.duration.getter();
              char v759 = BYTE4(v758) & 1;
              if ((v758 & 0x100000000) != 0) {
                double v760 = 0.0;
              }
              else {
                double v760 = *(float *)&v758;
              }
              specialized Properties.subscript.setter(*(uint64_t *)&v760, v759, v757, 0, 0);
              uint64_t v761 = swift_getKeyPath();
              uint64_t v762 = __RKEntitySpinActionArguments.iterations.getter();
              char v763 = BYTE4(v762) & 1;
              if ((v762 & 0x100000000) != 0) {
                double v764 = 0.0;
              }
              else {
                double v764 = *(float *)&v762;
              }
              specialized Properties.subscript.setter(*(uint64_t *)&v764, v763, v761, 0, 0);
              uint64_t v765 = v771;
              __RKEntitySpinActionArguments.direction.getter();
              uint64_t v766 = __RKEntitySpinActionArguments.axis.getter();
              uint64_t v768 = v927;
              setRotationAxis #1 (direction:axis:on:) in Stage.setAction(action:at:mapping:)(v765, v766, v769, v767 & 1, v906, v921, (uint64_t)v924);
              uint64_t v927 = v768;

              if (v768) {
                swift_release();
              }
              outlined destroy of Any?(v771, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
              outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<SpinActionSchema>);
              (*(void (**)(char *, uint64_t))(v778 + 8))(v780, v779);
              return;
            }
          }
          (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v585, v917);
          type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
          lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
          uint64_t v710 = swift_allocError();
          v712 = v711;
          v713 = (char *)v711
               + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                        + 48);
          v714 = v921;
          void *v712 = v921;
          v918(v713, (char *)v924, *(void *)&v926.f64[0]);
          type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
          swift_storeEnumTagMultiPayload();
          id v715 = v714;
          v520 = v780;
          MEMORY[0x23ECB9040](v715);
          swift_storeEnumTagMultiPayload();
          uint64_t v927 = v710;
          swift_willThrow();
          swift_release();
          uint64_t v522 = v778;
          uint64_t v521 = v779;
LABEL_283:
          (*(void (**)(char *, uint64_t))(v522 + 8))(v520, v521);
          return;
        }
        type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
        lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
        uint64_t v927 = swift_allocError();
        v644 = v643;
        v645 = (char *)v643
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                      + 48);
        v646 = v921;
        void *v644 = v921;
        uint64_t v222 = *(void *)&v926.f64[0];
        v918(v645, (char *)v924, *(void *)&v926.f64[0]);
        type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        id v647 = v646;
        swift_willThrow();
        swift_release();
        v224 = *(void (**)(unint64_t, uint64_t))(v925 + 8);
        unint64_t v225 = v187;
LABEL_29:
        v224(v225, v222);
        return;
      }
      uint64_t v365 = v925;
      v366 = &v905[SLODWORD(v335[3].Kind)];
      v918(v366, &v348[((*(unsigned __int8 *)(v365 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v365 + 80))+ *(void *)(v365 + 72) * v187], *(void *)&v278);
      uint64_t v367 = v922 + SLODWORD(v335[3].Kind);
      *(void *)long long v922 = v187;
      v368 = *(void (**)(uint64_t, char *, void))(v365 + 32);
      uint64_t v199 = v922;
      v368(v367, v366, *(void *)&v278);
      uint64_t v369 = 0;
    }
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    unint64_t v371 = v933;
    unint64_t v372 = swift_bridgeObjectRetain();
    uint64_t v373 = specialized Array._getCount()(v372);
    if (!v373)
    {
      uint64_t v393 = specialized static Array._allocateUninitialized(_:)(0);
      swift_bridgeObjectRelease();
LABEL_123:
      swift_bridgeObjectRelease();
      specialized Properties.subscript.setter(v393);
      outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<GroupActionSchema>);
      (*(void (**)(char *, uint64_t))(v889 + 8))(v879, v900);
      return;
    }
    int64_t v374 = v373;
    uint64_t v929 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v374);
    if ((v374 & 0x8000000000000000) == 0)
    {
      uint64_t v377 = 0;
      do
      {
        if ((v371 & 0xC000000000000001) != 0) {
          MEMORY[0x23ECBA630](v377, v371);
        }
        else {
          swift_retain();
        }
        ++v377;
        uint64_t v378 = RIOPxrUsdObjectCopyPath();
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v379 = *(void *)(v929 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v379);
        uint64_t v380 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v379, v378);
        destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v380);
      }
      while (v374 != v377);
      swift_bridgeObjectRelease();
      uint64_t v393 = v929;
      goto LABEL_123;
    }
    __break(1u);
    goto LABEL_324;
  }
  uint64_t v288 = v927;
  if (v198 == *MEMORY[0x263F16378])
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    uint64_t v289 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v861 + 32))(v860, v187, v862);
    uint64_t v290 = (uint64_t)v845;
    MEMORY[0x23ECB8F30](v289);
    if (v923[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v290), (v291 & 1) != 0))
    {
      v292 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
      swift_retain();
      v292(v290, v917);
      v293 = (void *)RIOPxrUsdObjectCopyPath();
      swift_release();
      v938 = &protocol witness table for Schema;
      v937 = &type metadata for Schema;
      uint64_t v935 = v191;
      uint64_t v294 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v295 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v295 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v476 = v288;
      v477 = v860;
      specialized Properties.subscript.setter(v295, v294, 0, 0);
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t v478 = swift_allocObject();
      *(_OWORD *)(v478 + 16) = xmmword_23AAB22A0;
      *(void *)(v478 + 32) = v293;
      *(void *)&v926.f64[0] = v293;
      specialized Properties.subscript.setter(v478);
      uint64_t v479 = swift_getKeyPath();
      uint64_t v480 = __RKEntityHideActionArguments.duration.getter();
      char v481 = BYTE4(v480) & 1;
      if ((v480 & 0x100000000) != 0) {
        double v482 = 0.0;
      }
      else {
        double v482 = *(float *)&v480;
      }
      specialized Properties.subscript.setter(*(uint64_t *)&v482, v481, v479, 0, 0);
      uint64_t v483 = swift_getKeyPath();
      uint64_t v484 = String.count.getter();
      uint64_t v485 = v856;
      if (v484 < 1) {
        id v486 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v486 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v487 = (uint64_t)v838;
      uint64_t v488 = (uint64_t)v836;
      specialized Properties.subscript.setter(v486, v483, 0, 0);
      uint64_t v489 = (uint64_t)v837;
      __RKEntityHideActionArguments.ease.getter();
      __RKEntityHideActionArguments.easeType.getter();
      setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(v489, v487, v191, v921, (uint64_t)v924);
      uint64_t v927 = v476;
      if (v476)
      {

        swift_release();
        outlined destroy of Any?(v487, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
        outlined destroy of Any?(v489, &demangling cache variable for type metadata for __RKEntityMoveEase?);
        outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
        (*(void (**)(char *, uint64_t))(v861 + 8))(v477, v862);
      }
      else
      {
        outlined destroy of Any?(v487, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
        outlined destroy of Any?(v489, &demangling cache variable for type metadata for __RKEntityMoveEase?);
        uint64_t v490 = swift_getKeyPath();
        uint64_t v491 = (uint64_t)v834;
        __RKEntityHideActionArguments.animationStyle.getter();
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v491, v488, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
        uint64_t v492 = v855;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v855 + 48))(v488, 1, v485) == 1)
        {
          id v493 = 0;
        }
        else
        {
          v513 = v812;
          (*(void (**)(char *, uint64_t, uint64_t))(v492 + 32))(v812, v488, v485);
          __RKEntityActionAnimationStyle.rawValue.getter();
          if (String.count.getter() < 1)
          {
            swift_bridgeObjectRelease();
            id v493 = (id)RIOPxrTfTokenEmpty();
          }
          else
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            id v493 = (id)RIOPxrTfTokenCreateWithCString();
            uint64_t v485 = v856;
            swift_release();
          }
          (*(void (**)(char *, uint64_t))(v855 + 8))(v513, v485);
          uint64_t v491 = (uint64_t)v834;
        }
        outlined destroy of Any?(v491, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
        specialized Properties.subscript.setter(v493, v490, 0, 0);
        uint64_t v557 = swift_getKeyPath();
        uint64_t v558 = (uint64_t)v824;
        __RKEntityHideActionArguments.buildOutAnimationType.getter();
        uint64_t v559 = v558;
        uint64_t v560 = v823;
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v558, v823, &demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
        uint64_t v562 = v825;
        uint64_t v561 = v826;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v825 + 48))(v560, 1, v826) == 1)
        {
          outlined destroy of Any?(v558, &demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
          id v563 = 0;
        }
        else
        {
          v564 = v813;
          (*(void (**)(char *, uint64_t, uint64_t))(v562 + 32))(v813, v560, v561);
          uint64_t v565 = v559;
          uint64_t v566 = (uint64_t)v814;
          (*(void (**)(char *, char *, uint64_t))(v562 + 16))(v814, v564, v561);
          LOBYTE(v566) = specialized __RKEntityActionVisibilityTypeUSD.init(from:)(v566);
          (*(void (**)(char *, uint64_t))(v562 + 8))(v564, v561);
          outlined destroy of Any?(v565, &demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
          __RKEntityActionVisibilityTypeUSD.rawValue.getter(v566);
          if (String.count.getter() <= 0)
          {
            swift_bridgeObjectRelease();
            id v563 = (id)RIOPxrTfTokenEmpty();
          }
          else
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            id v563 = (id)RIOPxrTfTokenCreateWithCString();
            swift_release();
          }
        }
        float64_t v567 = v926.f64[0];
        specialized Properties.subscript.setter(v563, v557, 0, 0);
        uint64_t v568 = swift_getKeyPath();
        uint64_t v569 = __RKEntityHideActionArguments.distance.getter();
        char v570 = BYTE4(v569) & 1;
        if ((v569 & 0x100000000) != 0) {
          double v571 = 0.0;
        }
        else {
          double v571 = *(float *)&v569;
        }
        specialized Properties.subscript.setter(*(uint64_t *)&v571, v570, v568, 0, 0);

        outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
        (*(void (**)(char *, uint64_t))(v861 + 8))(v477, v862);
      }
    }
    else
    {
      (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v290, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v386 = swift_allocError();
      v388 = v387;
      v389 = (char *)v387
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v390 = v921;
      void *v388 = v921;
      v918(v389, (char *)v924, *(void *)&v278);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      id v391 = v390;
      v392 = v860;
      MEMORY[0x23ECB8F30](v391);
      swift_storeEnumTagMultiPayload();
      uint64_t v927 = v386;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v861 + 8))(v392, v862);
    }
    return;
  }
  if (v198 == *MEMORY[0x263F163A0])
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    uint64_t v307 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v846 + 32))(v848, v187, v847);
    uint64_t v308 = (uint64_t)v841;
    MEMORY[0x23ECB91E0](v307);
    if (v923[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v308), (v309 & 1) != 0))
    {
      v310 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
      swift_retain();
      v310(v308, v917);
      v311 = (void *)RIOPxrUsdObjectCopyPath();
      swift_release();
      v938 = &protocol witness table for Schema;
      v937 = &type metadata for Schema;
      uint64_t v935 = v191;
      uint64_t v312 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v313 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v313 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v313, v312, 0, 0);
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t v505 = swift_allocObject();
      *(_OWORD *)(v505 + 16) = xmmword_23AAB22A0;
      *(void *)(v505 + 32) = v311;
      id v506 = v311;
      specialized Properties.subscript.setter(v505);
      uint64_t v507 = swift_getKeyPath();
      uint64_t v508 = __RKEntityForceActionArguments.velocity.getter();
      if (v510)
      {
        float64x2_t v511 = 0uLL;
        double v512 = 0.0;
      }
      else
      {
        float64x2_t v511 = vcvtq_f64_f32((float32x2_t)v508);
        double v512 = v509;
      }
      float64x2_t v939 = v511;
      double v940 = v512;
      uint64_t v941 = 0;
      char v942 = v510 & 1;
      specialized Properties.subscript.setter((uint64_t)&v939, v507, 0, 0);

      outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<ImpulseActionSchema>);
      (*(void (**)(char *, uint64_t))(v846 + 8))(v848, v847);
    }
    else
    {
      (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v308, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v426 = swift_allocError();
      v428 = v427;
      v429 = (char *)v427
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v430 = v921;
      void *v428 = v921;
      v918(v429, (char *)v924, *(void *)&v278);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      id v431 = v430;
      v432 = v848;
      MEMORY[0x23ECB91E0](v431);
      swift_storeEnumTagMultiPayload();
      uint64_t v927 = v426;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v846 + 8))(v432, v847);
    }
    return;
  }
  if (v198 == *MEMORY[0x263F16380])
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    uint64_t v406 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v843 + 32))(v842, v187, v844);
    uint64_t v407 = (uint64_t)v835;
    MEMORY[0x23ECB8FC0](v406);
    if (!v923[2] || (specialized __RawDictionaryStorage.find<A>(_:)(v407), (v408 & 1) == 0))
    {
      (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v407, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v451 = swift_allocError();
      v453 = v452;
      v454 = (char *)v452
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v455 = v921;
      void *v453 = v921;
      v918(v454, (char *)v924, *(void *)&v278);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      id v456 = v455;
      v457 = v842;
      MEMORY[0x23ECB8FC0](v456);
      swift_storeEnumTagMultiPayload();
      uint64_t v927 = v451;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v843 + 8))(v457, v844);
      return;
    }
    v409 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
    swift_retain();
    v409(v407, v917);
    v410 = (void *)RIOPxrUsdObjectCopyPath();
    swift_release();
    v938 = &protocol witness table for Schema;
    v937 = &type metadata for Schema;
    uint64_t v935 = v191;
    uint64_t v411 = swift_getKeyPath();
    swift_retain();
    if (String.count.getter() < 1) {
      id v412 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v412 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v541 = v288;
    v357 = v842;
    specialized Properties.subscript.setter(v412, v411, 0, 0);
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
    uint64_t v542 = swift_allocObject();
    *(_OWORD *)(v542 + 16) = xmmword_23AAB22A0;
    *(void *)(v542 + 32) = v410;
    *(void *)&v926.f64[0] = v410;
    specialized Properties.subscript.setter(v542);
    uint64_t v543 = swift_getKeyPath();
    uint64_t v544 = __RKEntityShowActionArguments.duration.getter();
    char v545 = BYTE4(v544) & 1;
    if ((v544 & 0x100000000) != 0) {
      double v546 = 0.0;
    }
    else {
      double v546 = *(float *)&v544;
    }
    specialized Properties.subscript.setter(*(uint64_t *)&v546, v545, v543, 0, 0);
    uint64_t v547 = swift_getKeyPath();
    uint64_t v548 = String.count.getter();
    v354 = (void *)v856;
    if (v548 < 1) {
      id v549 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v549 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v550 = (uint64_t)v820;
    uint64_t v352 = (uint64_t)v821;
    specialized Properties.subscript.setter(v549, v547, 0, 0);
    uint64_t v551 = (uint64_t)v819;
    __RKEntityShowActionArguments.ease.getter();
    __RKEntityShowActionArguments.easeType.getter();
    setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(v551, v550, v191, v921, (uint64_t)v924);
    uint64_t v927 = v541;
    if (v541)
    {

      swift_release();
      outlined destroy of Any?(v550, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
      outlined destroy of Any?(v551, &demangling cache variable for type metadata for __RKEntityMoveEase?);
      outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
      (*(void (**)(char *, uint64_t))(v843 + 8))(v357, v844);
      return;
    }
    outlined destroy of Any?(v550, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
    outlined destroy of Any?(v551, &demangling cache variable for type metadata for __RKEntityMoveEase?);
    uint64_t v351 = swift_getKeyPath();
    uint64_t v552 = v811;
    __RKEntityShowActionArguments.animationStyle.getter();
    uint64_t v553 = v552;
    uint64_t v355 = v798;
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v553, v798, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
    v353 = (char *)v855;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v855 + 48))(v355, 1, v354) == 1)
    {
      id v554 = 0;
    }
    else
    {
LABEL_206:
      (*((void (**)(char *, uint64_t, void *))v353 + 4))(v799, v355, v354);
      __RKEntityActionAnimationStyle.rawValue.getter();
      if (String.count.getter() < 1)
      {
        swift_bridgeObjectRelease();
        id v554 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v554 = (id)RIOPxrTfTokenCreateWithCString();
        v354 = (void *)v856;
        swift_release();
      }
      (*(void (**)(char *, void *))(v855 + 8))(v799, v354);
    }
    outlined destroy of Any?(v811, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
    specialized Properties.subscript.setter(v554, v351, 0, 0);
    uint64_t v609 = swift_getKeyPath();
    uint64_t v610 = (uint64_t)v800;
    __RKEntityShowActionArguments.buildInAnimationType.getter();
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v610, v352, &demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
    uint64_t v611 = v801;
    uint64_t v612 = v802;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v801 + 48))(v352, 1, v802) == 1)
    {
      outlined destroy of Any?(v610, &demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
      id v613 = 0;
    }
    else
    {
      uint64_t v614 = v352;
      uint64_t v615 = v610;
      v616 = v784;
      (*(void (**)(char *, uint64_t, uint64_t))(v611 + 32))(v784, v614, v612);
      uint64_t v617 = (uint64_t)v785;
      (*(void (**)(char *, char *, uint64_t))(v611 + 16))(v785, v616, v612);
      char v618 = specialized __RKEntityActionVisibilityTypeUSD.init(from:)(v617);
      uint64_t v619 = v611;
      char v620 = v618;
      (*(void (**)(char *, uint64_t))(v619 + 8))(v616, v612);
      outlined destroy of Any?(v615, &demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
      __RKEntityActionVisibilityTypeUSD.rawValue.getter(v620);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v613 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v613 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
    }
    float64_t v621 = v926.f64[0];
    specialized Properties.subscript.setter(v613, v609, 0, 0);
    uint64_t v622 = swift_getKeyPath();
    uint64_t v623 = __RKEntityShowActionArguments.distance.getter();
    char v624 = BYTE4(v623) & 1;
    if ((v623 & 0x100000000) != 0) {
      double v625 = 0.0;
    }
    else {
      double v625 = *(float *)&v623;
    }
    specialized Properties.subscript.setter(*(uint64_t *)&v625, v624, v622, 0, 0);

    outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
    (*(void (**)(char *, uint64_t))(v843 + 8))(v357, v844);
    return;
  }
  v349 = v923;
  if (v198 == *MEMORY[0x263F16370])
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    v433 = v833;
    (*(void (**)(char *, unint64_t, uint64_t))(v840 + 32))(v833, v187, started);
    if (__RKEntityStartAnimateActionArguments.loopCount.getter() >= 2)
    {
      MEMORY[0x23ECB9540]();
      __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter();
      __RKEntityStartAnimateActionArguments.clipStart.getter();
      __RKEntityStartAnimateActionArguments.clipDuration.getter();
      __RKEntityStartAnimateActionArguments.clipReversed.getter();
      __RKEntityStartAnimateActionArguments.animationSpeed.getter();
      __RKEntityStartAnimateActionArguments.clipReverses.getter();
      v434 = v829;
      __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)();
      v435 = v828;
      (*(void (**)(char *, char *, uint64_t))(v840 + 16))(v828, v434, started);
      v924 = *(void **)(v925 + 104);
      ((void (*)(char *, uint64_t, void))v924)(v435, v199, *(void *)&v278);
      (*(void (**)(char *, void, uint64_t))(v882 + 104))(v878, *MEMORY[0x263F16310], v883);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v436 = swift_allocObject();
      specialized static Array._adoptStorage(_:count:)(v436, 1);
      v918(v437, v435, *(void *)&v278);
      __RKEntityStartAnimateActionArguments.loopCount.getter();
      v438 = v822;
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      uint64_t v439 = v889;
      v440 = v817;
      (*(void (**)(char *, char *, uint64_t))(v889 + 16))(v817, v438, v900);
      ((void (*)(char *, uint64_t, void))v924)(v440, v277, *(void *)&v278);
      uint64_t v929 = (uint64_t)v921;
      uint64_t v441 = v927;
      Stage.makeParentPrim(from:baseName:)(&v929, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, &v935);
      uint64_t v927 = v441;
      if (v441)
      {
        swift_release();
        v442 = *(void (**)(char *, void))(v925 + 8);
        v442(v440, *(void *)&v278);
        (*(void (**)(char *, uint64_t))(v439 + 8))(v438, v900);
        v442(v828, *(void *)&v278);
        v443 = *(void (**)(char *, uint64_t))(v840 + 8);
        uint64_t v444 = started;
        v443(v829, started);
        v443(v433, v444);
      }
      else
      {
        v555 = (void *)v935;
        Stage.setAction(action:at:mapping:)(v440, &v935, v923);
        uint64_t v927 = 0;
        v556 = v440;
        swift_release();
        v581 = *(void (**)(char *, void))(v925 + 8);
        v581(v556, *(void *)&v278);
        (*(void (**)(char *, uint64_t))(v889 + 8))(v822, v900);
        v581(v828, *(void *)&v278);
        v582 = *(void (**)(char *, uint64_t))(v840 + 8);
        uint64_t v583 = started;
        v582(v829, started);
        v582(v833, v583);
      }
      return;
    }
    uint64_t v494 = (uint64_t)v815;
    MEMORY[0x23ECB9540]();
    if (!v349[2] || (specialized __RawDictionaryStorage.find<A>(_:)(v494), (v495 & 1) == 0))
    {
      (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v494, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v523 = swift_allocError();
      v525 = v524;
      v526 = (char *)v524
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v527 = v921;
      void *v525 = v921;
      v918(v526, (char *)v924, *(void *)&v278);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      MEMORY[0x23ECB9540](v527);
      swift_storeEnumTagMultiPayload();
      uint64_t v927 = v523;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v840 + 8))(v433, started);
      return;
    }
    v496 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
    swift_retain();
    v496(v494, v917);
    v497 = (void *)RIOPxrUsdObjectCopyPath();
    swift_release();
    v938 = &protocol witness table for Schema;
    v937 = &type metadata for Schema;
    uint64_t v935 = v906;
    uint64_t v498 = swift_getKeyPath();
    swift_retain();
    if (String.count.getter() < 1) {
      id v499 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v499 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v600 = v840;
    uint64_t v601 = v898;
    uint64_t v602 = v902;
    specialized Properties.subscript.setter(v499, v498, 0, 0);
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
    uint64_t v603 = swift_allocObject();
    *(_OWORD *)(v603 + 16) = xmmword_23AAB22A0;
    *(void *)(v603 + 32) = v497;
    id v604 = v497;
    specialized Properties.subscript.setter(v603);
    uint64_t v605 = swift_getKeyPath();
    v606 = v808;
    __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter();
    v607 = v790;
    (*(void (**)(char *, char *, uint64_t))(v602 + 16))(v790, v606, v601);
    int v608 = (*(uint64_t (**)(char *, uint64_t))(v602 + 88))(v607, v601);
    if (v608 == *MEMORY[0x263F16418] || v608 == *MEMORY[0x263F16420] || v608 == *MEMORY[0x263F16410])
    {
      (*(void (**)(char *, uint64_t))(v602 + 8))(v808, v601);
      if (String.count.getter() < 1)
      {
        swift_bridgeObjectRelease();
        id v632 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v632 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      specialized Properties.subscript.setter(v632, v605, 0, 0);
      uint64_t v633 = swift_getKeyPath();
      __RKEntityStartAnimateActionArguments.clipStart.getter();
      specialized Properties.subscript.setter(v634, 0, v633, 0, 0);
      uint64_t v635 = swift_getKeyPath();
      __RKEntityStartAnimateActionArguments.clipDuration.getter();
      specialized Properties.subscript.setter(v636, 0, v635, 0, 0);
      uint64_t v637 = swift_getKeyPath();
      char v638 = __RKEntityStartAnimateActionArguments.clipReversed.getter();
      specialized Properties.subscript.setter(v638 & 1, v637, 0, 0);
      uint64_t v639 = swift_getKeyPath();
      __RKEntityStartAnimateActionArguments.animationSpeed.getter();
      specialized Properties.subscript.setter(COERCE__INT64(v640), 0, v639, 0, 0);
      uint64_t v641 = swift_getKeyPath();
      char v642 = __RKEntityStartAnimateActionArguments.clipReverses.getter();
      specialized Properties.subscript.setter(v642 & 1, v641, 0, 0);

      outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<StartAnimationSchema>);
      (*(void (**)(char *, uint64_t))(v600 + 8))(v433, started);
      return;
    }
LABEL_333:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  if (v198 == *MEMORY[0x263F163C0])
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    uint64_t v458 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v830 + 32))(v832, v187, v831);
    uint64_t v459 = (uint64_t)v816;
    MEMORY[0x23ECB9380](v458);
    if (!v349[2] || (specialized __RawDictionaryStorage.find<A>(_:)(v459), (v460 & 1) == 0))
    {
      (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v459, v917);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      uint64_t v514 = swift_allocError();
      v516 = v515;
      v517 = (char *)v515
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v518 = v921;
      void *v516 = v921;
      v918(v517, (char *)v924, *(void *)&v926.f64[0]);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      id v519 = v518;
      v520 = v832;
      MEMORY[0x23ECB9380](v519);
      swift_storeEnumTagMultiPayload();
      uint64_t v927 = v514;
      swift_willThrow();
      swift_release();
      uint64_t v522 = v830;
      uint64_t v521 = v831;
      goto LABEL_283;
    }
    uint64_t v461 = v916 + 8;
    v462 = *(void (**)(void, void))(v916 + 8);
    swift_retain();
    uint64_t v920 = v461;
    v919 = (void (*)(char *, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))v462;
    v462(v459, v917);
    *(void *)&v926.f64[0] = RIOPxrUsdObjectCopyPath();
    swift_release();
    v348 = v921;
    v463 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v464 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v466 = v465;

    uint64_t v935 = v464;
    unint64_t v936 = v466;
    uint64_t v929 = 47;
    unint64_t v930 = 0xE100000000000000;
    unint64_t v933 = 95;
    unint64_t v934 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v467 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v469 = v468;
    swift_bridgeObjectRelease();
    uint64_t v935 = 47;
    unint64_t v936 = 0xE100000000000000;
    v470._countAndFlagsBits = v467;
    v470._object = v469;
    String.append(_:)(v470);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v471 = (void *)RIOPxrSdfPathCreateFromCString();
    swift_release();
    id v472 = (id)RIOPxrTfTokenEmpty();
    uint64_t v473 = RIOPxrUsdStageCreatePrimIfNeeded();
    uint64_t v474 = swift_allocObject();
    *(void *)(v474 + 16) = v473;

    if (String.count.getter() < 1) {
      id v475 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v475 = (id)RIOPxrTfTokenCreateWithCString();
    }
    v591 = v475;
    unint64_t v371 = (unint64_t)v832;
    RIOPxrUsdPrimSetTypeName();

    v335 = &type metadata for Schema;
    v938 = &protocol witness table for Schema;
    v937 = &type metadata for Schema;
    uint64_t v935 = v474;
    unint64_t v933 = MEMORY[0x263F8EE78];
    swift_retain();
    uint64_t v592 = __RKEntityTransformActionArguments.location.getter();
    if (v596)
    {
LABEL_246:
      uint64_t v649 = __RKEntityTransformActionArguments.orientation.getter();
      if ((v652 & 1) == 0)
      {
        float32x2_t v653 = v650;
        *(void *)&long long v651 = v649;
        long long v925 = v651;
        LODWORD(v651) = v649;
        long long v922 = v651;
        uint64_t v654 = swift_getKeyPath();
        v953[0] = vcvtq_f64_f32((float32x2_t)__PAIR64__(DWORD1(v925), v922));
        v953[1] = vcvtq_f64_f32(v653);
        char v954 = 0;
        specialized Properties.subscript.setter((uint64_t)v953, v654, 0, 0);
        if (String.count.getter() < 1) {
          id v655 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v655 = (id)RIOPxrTfTokenCreateWithCString();
        }
        uint64_t v656 = (uint64_t)v655;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v658 = *(void *)(v933 + 16);
        unint64_t v657 = *(void *)(v933 + 24);
        if (v658 >= v657 >> 1) {
          unint64_t v933 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v657 > 1), v658 + 1, 1, (void *)v933);
        }
        uint64_t v659 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v658, v656);
        destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v659);
      }
      uint64_t v660 = __RKEntityTransformActionArguments.scale.getter();
      if ((v660 & 0x100000000) == 0)
      {
        double v661 = *(float *)&v660;
        uint64_t v662 = swift_getKeyPath();
        *(double *)v951 = v661;
        *(double *)&v951[1] = v661;
        *(double *)&v951[2] = v661;
        v951[3] = 0;
        char v952 = 0;
        specialized Properties.subscript.setter((uint64_t)v951, v662, 0, 0);
        if (String.count.getter() < 1) {
          id v663 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v663 = (id)RIOPxrTfTokenCreateWithCString();
        }
        uint64_t v664 = (uint64_t)v663;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v666 = *(void *)(v933 + 16);
        unint64_t v665 = *(void *)(v933 + 24);
        if (v666 >= v665 >> 1) {
          unint64_t v933 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v665 > 1), v666 + 1, 1, (void *)v933);
        }
        uint64_t v667 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v666, v664);
        destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v667);
      }
      swift_getKeyPath();
      uint64_t v668 = swift_bridgeObjectRetain();
      specialized Properties.subscript.setter(v668);
      v932 = &protocol witness table for Schema;
      v931 = v335;
      uint64_t v929 = v906;
      uint64_t v669 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1) {
        id v670 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v670 = (id)RIOPxrTfTokenCreateWithCString();
      }
      specialized Properties.subscript.setter(v670, v669, 0, 0);
      swift_getKeyPath();
      *(void *)&long long v925 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      uint64_t v671 = swift_allocObject();
      long long v922 = xmmword_23AAB22A0;
      *(_OWORD *)(v671 + 16) = xmmword_23AAB22A0;
      float64_t v672 = v926.f64[0];
      *(float64_t *)(v671 + 32) = v926.f64[0];
      *(void *)&v926.f64[0] = *(id *)&v672;
      specialized Properties.subscript.setter(v671);
      uint64_t v673 = swift_getKeyPath();
      uint64_t v674 = __RKEntityTransformActionArguments.duration.getter();
      char v675 = BYTE4(v674) & 1;
      if ((v674 & 0x100000000) != 0) {
        double v676 = 0.0;
      }
      else {
        double v676 = *(float *)&v674;
      }
      specialized Properties.subscript.setter(*(uint64_t *)&v676, v675, v673, 0, 0);
      uint64_t v677 = swift_getKeyPath();
      uint64_t v678 = v809;
      __RKEntityTransformActionArguments.moveType.getter();
      uint64_t v679 = v792;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v678, v792, &demangling cache variable for type metadata for __RKEntityMoveSelection?);
      uint64_t v680 = v794;
      uint64_t v681 = v791;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v794 + 48))(v679, 1, v791) == 1)
      {
        id v682 = 0;
        uint64_t v683 = (uint64_t)v796;
      }
      else
      {
        v921 = v348;
        v684 = v793;
        (*(void (**)(char *, uint64_t, uint64_t))(v680 + 32))(v793, v679, v681);
        v685 = *(void (**)(char *, char *, uint64_t))(v680 + 16);
        v686 = v782;
        v685(v782, v684, v681);
        v687 = v781;
        v685(v781, v686, v681);
        int v688 = (*(uint64_t (**)(char *, uint64_t))(v680 + 88))(v687, v681);
        if (v688 != *MEMORY[0x263F162B0] && v688 != *MEMORY[0x263F162B8]) {
          goto LABEL_331;
        }
        v689 = *(void (**)(char *, uint64_t))(v680 + 8);
        v690 = v686;
        uint64_t v691 = v681;
        v689(v690, v681);
        uint64_t v692 = String.count.getter();
        unint64_t v371 = (unint64_t)v832;
        if (v692 < 1)
        {
          swift_bridgeObjectRelease();
          id v682 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          id v682 = (id)RIOPxrTfTokenCreateWithCString();
          swift_release();
        }
        v689(v793, v691);
        uint64_t v683 = (uint64_t)v796;
        v348 = v921;
      }
      outlined destroy of Any?(v809, &demangling cache variable for type metadata for __RKEntityMoveSelection?);
      swift_bridgeObjectRelease();
      specialized Properties.subscript.setter(v682, v677, 0, 0);
      uint64_t v693 = (uint64_t)v795;
      __RKEntityTransformActionArguments.ease.getter();
      __RKEntityTransformActionArguments.easeType.getter();
      uint64_t v694 = v927;
      setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(v693, v683, v906, v348, (uint64_t)v924);
      uint64_t v927 = v694;
      if (v694)
      {

        swift_release();
        swift_release();
        outlined destroy of Any?(v683, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
        outlined destroy of Any?(v693, &demangling cache variable for type metadata for __RKEntityMoveEase?);
        outlined destroy of Any?((uint64_t)&v929, &demangling cache variable for type metadata for Properties<TransformActionSchema>);
        outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<Xformable>);
        (*(void (**)(unint64_t, uint64_t))(v830 + 8))(v371, v831);
      }
      else
      {
        outlined destroy of Any?(v683, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
        outlined destroy of Any?(v693, &demangling cache variable for type metadata for __RKEntityMoveEase?);
        uint64_t v695 = (uint64_t)v776;
        __RKEntityTransformActionArguments.relativeToEntity.getter();
        uint64_t v696 = v916;
        v697 = v917;
        if ((*(unsigned int (**)(uint64_t, uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 48))(v695, 1, v917) == 1)
        {
          outlined destroy of Any?(v695, &demangling cache variable for type metadata for UUID?);
        }
        else
        {
          uint64_t v698 = (uint64_t)v775;
          (*(void (**)(char *, uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v696 + 32))(v775, v695, v697);
          if (specialized Dictionary.subscript.getter(v698, (uint64_t)v923))
          {
            v699 = (void *)RIOPxrUsdObjectCopyPath();
            swift_release();
            uint64_t v700 = swift_getKeyPath();
            id v701 = v699;
            v702 = (void *)RIOPxrSdfPathCopyString();
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            if (String.count.getter() <= 0)
            {
              swift_bridgeObjectRelease();
              id v703 = (id)RIOPxrTfTokenEmpty();
            }
            else
            {
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              id v703 = (id)RIOPxrTfTokenCreateWithCString();
              swift_release();
            }
            specialized Properties.subscript.setter(v703, v700, 0, 0);
          }
          v919(v775, v917);
        }
        swift_getKeyPath();
        uint64_t v733 = swift_allocObject();
        *(_OWORD *)(v733 + 16) = v922;
        swift_retain();
        *(void *)(v733 + 32) = RIOPxrUsdObjectCopyPath();
        swift_release();
        specialized Properties.subscript.setter(v733);

        swift_release();
        outlined destroy of Any?((uint64_t)&v929, &demangling cache variable for type metadata for Properties<TransformActionSchema>);
        outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<Xformable>);
        (*(void (**)(char *, uint64_t))(v830 + 8))(v832, v831);
      }
      return;
    }
    *(void *)&long long v594 = v592;
    long long v925 = v594;
    LODWORD(v595) = v592;
    long long v922 = v595;
    double v597 = COERCE_FLOAT(vdupq_n_s64(v593).i32[2]);
    uint64_t v598 = swift_getKeyPath();
    float64x2_t v955 = vcvtq_f64_f32((float32x2_t)__PAIR64__(DWORD1(v925), v922));
    double v956 = v597;
    uint64_t v957 = 0;
    char v958 = 0;
    specialized Properties.subscript.setter((uint64_t)&v955, v598, 0, 0);
    if (String.count.getter() < 1) {
      id v599 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v599 = (id)RIOPxrTfTokenCreateWithCString();
    }
    int64_t v374 = (int64_t)v599;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v375 = (void *)v933;
    unint64_t v187 = *(void *)(v933 + 16);
    unint64_t v376 = *(void *)(v933 + 24);
    if (v187 < v376 >> 1)
    {
LABEL_245:
      uint64_t v648 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v187, v374);
      destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v648);
      goto LABEL_246;
    }
LABEL_324:
    unint64_t v933 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v376 > 1), v187 + 1, 1, v375);
    goto LABEL_245;
  }
  if (v198 == *MEMORY[0x263F16390])
  {
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    v501 = v803;
    uint64_t v500 = v804;
    uint64_t v502 = v805;
    (*(void (**)(char *, unint64_t, uint64_t))(v804 + 32))(v803, v187, v805);
    v938 = &protocol witness table for Schema;
    v937 = &type metadata for Schema;
    uint64_t v935 = v191;
    uint64_t v503 = swift_getKeyPath();
    swift_retain();
    if (String.count.getter() < 1) {
      id v504 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v504 = (id)RIOPxrTfTokenCreateWithCString();
    }
    specialized Properties.subscript.setter(v504, v503, 0, 0);
    uint64_t v579 = swift_getKeyPath();
    __RKWaitActionArguments.duration.getter();
    specialized Properties.subscript.setter(COERCE__INT64(v580), 0, v579, 0, 0);
    outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<WaitActionSchema>);
    (*(void (**)(char *, uint64_t))(v500 + 8))(v501, v502);
    return;
  }
  if (v198 == *MEMORY[0x263F16358])
  {
    float64_t v528 = v926.f64[0];
    (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
    uint64_t v529 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v806 + 32))(v810, v187, v807);
    uint64_t v530 = (uint64_t)v786;
    MEMORY[0x23ECB9430](v529);
    if (v349[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v530), (v531 & 1) != 0))
    {
      v532 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
      swift_retain();
      v532(v530, v917);
      v533 = v349;
      v534 = (void *)RIOPxrUsdObjectCopyPath();
      uint64_t v535 = swift_release();
      uint64_t v536 = (uint64_t)v774;
      MEMORY[0x23ECB9430](v535);
      if (v533[2])
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v536);
        if (v537)
        {
          swift_retain();
          v532(v536, v917);
          v538 = (void *)RIOPxrUsdObjectCopyPath();
          swift_release();
          v938 = &protocol witness table for Schema;
          v937 = &type metadata for Schema;
          uint64_t v935 = v191;
          uint64_t v539 = swift_getKeyPath();
          swift_retain();
          if (String.count.getter() < 1) {
            id v540 = (id)RIOPxrTfTokenEmpty();
          }
          else {
            id v540 = (id)RIOPxrTfTokenCreateWithCString();
          }
          specialized Properties.subscript.setter(v540, v539, 0, 0);
          swift_getKeyPath();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
          uint64_t v734 = swift_allocObject();
          *(_OWORD *)(v734 + 16) = xmmword_23AAB22A0;
          *(void *)(v734 + 32) = v534;
          id v735 = v534;
          specialized Properties.subscript.setter(v734);
          uint64_t v736 = swift_getKeyPath();
          unsigned __int8 v737 = __RKEntityOrbitEntityActionArguments.orientToPath.getter();
          specialized Properties.subscript.setter(v737, v736, 0, 0);
          uint64_t v738 = swift_getKeyPath();
          id v739 = v538;
          v740 = (void *)RIOPxrSdfPathCopyString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          if (String.count.getter() < 1)
          {
            swift_bridgeObjectRelease();
            id v741 = (id)RIOPxrTfTokenEmpty();
          }
          else
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            id v741 = (id)RIOPxrTfTokenCreateWithCString();
            swift_release();
          }
          specialized Properties.subscript.setter(v741, v738, 0, 0);
          uint64_t v742 = swift_getKeyPath();
          uint64_t v743 = __RKEntityOrbitEntityActionArguments.duration.getter();
          char v744 = BYTE4(v743) & 1;
          if ((v743 & 0x100000000) != 0) {
            double v745 = 0.0;
          }
          else {
            double v745 = *(float *)&v743;
          }
          specialized Properties.subscript.setter(*(uint64_t *)&v745, v744, v742, 0, 0);
          uint64_t v746 = swift_getKeyPath();
          uint64_t v747 = __RKEntityOrbitEntityActionArguments.rotations.getter();
          char v748 = BYTE4(v747) & 1;
          if ((v747 & 0x100000000) != 0) {
            double v749 = 0.0;
          }
          else {
            double v749 = *(float *)&v747;
          }
          specialized Properties.subscript.setter(*(uint64_t *)&v749, v748, v746, 0, 0);
          uint64_t v750 = v772;
          __RKEntityOrbitEntityActionArguments.spinDirection.getter();
          uint64_t v751 = __RKEntityOrbitEntityActionArguments.orbitalAxis.getter();
          uint64_t v753 = v927;
          setRotationAxis #1 (direction:axis:on:) in Stage.setAction(action:at:mapping:)(v750, v751, v754, v752 & 1, v906, v921, (uint64_t)v924);
          uint64_t v927 = v753;

          if (v753) {
            swift_release();
          }
          outlined destroy of Any?(v772, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
          outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<OrbitActionSchema>);
          (*(void (**)(char *, uint64_t))(v806 + 8))(v810, v807);
          return;
        }
      }
      v532(v536, v917);
    }
    else
    {
      (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v530, v917);
    }
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
    uint64_t v704 = swift_allocError();
    v706 = v705;
    v707 = (char *)v705
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v708 = v921;
    void *v706 = v921;
    v918(v707, (char *)v924, *(void *)&v528);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    id v709 = v708;
    v520 = v810;
    MEMORY[0x23ECB9430](v709);
    swift_storeEnumTagMultiPayload();
    uint64_t v927 = v704;
    swift_willThrow();
    swift_release();
    uint64_t v522 = v806;
    uint64_t v521 = v807;
    goto LABEL_283;
  }
  if (v198 != *MEMORY[0x263F16360]) {
    goto LABEL_212;
  }
  (*(void (**)(unint64_t, void))(v925 + 96))(v187, *(void *)&v926.f64[0]);
  uint64_t v222 = v783;
  uint64_t v572 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v787 + 32))(v797, v187, v783);
  uint64_t v573 = (uint64_t)v777;
  MEMORY[0x23ECB9480](v572);
  if (!v349[2] || (specialized __RawDictionaryStorage.find<A>(_:)(v573), (v574 & 1) == 0))
  {
    (*(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8))(v573, v917);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
    uint64_t v626 = swift_allocError();
    v628 = v627;
    v629 = (char *)v627
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v630 = v921;
    void *v628 = v921;
    v918(v629, (char *)v924, *(void *)&v926.f64[0]);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    id v631 = v630;
    v253 = v797;
    MEMORY[0x23ECB9480](v631);
    swift_storeEnumTagMultiPayload();
    uint64_t v927 = v626;
    swift_willThrow();
    swift_release();
    uint64_t v254 = v787;
LABEL_28:
    v224 = *(void (**)(unint64_t, uint64_t))(v254 + 8);
    unint64_t v225 = (unint64_t)v253;
    goto LABEL_29;
  }
  v575 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *)))(v916 + 8);
  swift_retain();
  v575(v573, v917);
  v576 = (void *)RIOPxrUsdObjectCopyPath();
  swift_release();
  v938 = &protocol witness table for Schema;
  v937 = &type metadata for Schema;
  uint64_t v935 = v191;
  uint64_t v577 = swift_getKeyPath();
  swift_retain();
  if (String.count.getter() < 1) {
    id v578 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v578 = (id)RIOPxrTfTokenCreateWithCString();
  }
  specialized Properties.subscript.setter(v578, v577, 0, 0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t v716 = swift_allocObject();
  *(_OWORD *)(v716 + 16) = xmmword_23AAB22A0;
  *(void *)(v716 + 32) = v576;
  id v717 = v576;
  specialized Properties.subscript.setter(v716);
  uint64_t v718 = swift_getKeyPath();
  uint64_t v719 = __RKEntityLookAtCameraActionArguments.duration.getter();
  char v720 = BYTE4(v719) & 1;
  if ((v719 & 0x100000000) != 0) {
    double v721 = 0.0;
  }
  else {
    double v721 = *(float *)&v719;
  }
  specialized Properties.subscript.setter(*(uint64_t *)&v721, v720, v718, 0, 0);
  uint64_t v722 = swift_getKeyPath();
  uint64_t v723 = __RKEntityLookAtCameraActionArguments.direction.getter();
  float64x2_t v926 = 0u;
  double v726 = 0.0;
  double v727 = 0.0;
  float64x2_t v728 = 0uLL;
  if ((v725 & 1) == 0)
  {
    float64x2_t v728 = vcvtq_f64_f32((float32x2_t)v723);
    double v727 = v724;
  }
  float64x2_t v947 = v728;
  double v948 = v727;
  uint64_t v949 = 0;
  char v950 = v725 & 1;
  specialized Properties.subscript.setter((uint64_t)&v947, v722, 0, 0);
  uint64_t v729 = swift_getKeyPath();
  uint64_t v730 = __RKEntityLookAtCameraActionArguments.upVector.getter();
  if ((v732 & 1) == 0)
  {
    float64x2_t v926 = vcvtq_f64_f32((float32x2_t)v730);
    double v726 = v731;
  }
  float64x2_t v943 = v926;
  double v944 = v726;
  uint64_t v945 = 0;
  char v946 = v732 & 1;
  specialized Properties.subscript.setter((uint64_t)&v943, v729, 0, 0);

  outlined destroy of Any?((uint64_t)&v935, &demangling cache variable for type metadata for Properties<LookAtCameraActionSchema>);
  (*(void (**)(char *, uint64_t))(v787 + 8))(v797, v783);
}

void specialized Properties.subscript.setter(uint64_t a1, char a2)
{
  swift_getAtKeyPath();
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  Int32 = (void *)RIOPxrSdfValueTypeNameCreateInt32();
  uint64_t Attribute = RIOPxrUsdPrimCreateAttribute();
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v7 = (void *)Attribute;
  uint64_t v8 = (void *)RIOPxrVtValueCreateWithInt32();
  int v9 = RIOPxrUsdAttributeSetValue();

  if (v9)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }
}

uint64_t specialized Properties.subscript.setter(uint64_t a1)
{
  swift_getAtKeyPath();
  if (a1)
  {
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 0)
    {
      swift_bridgeObjectRelease();
      id v2 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      id v2 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    TokenArray = (void *)RIOPxrSdfValueTypeNameCreateTokenArray();
    uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_n(a1);
    type metadata accessor for RIOPxrTfTokenRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)RIOPxrVtValueCreateWithTokenArray();

    int v7 = RIOPxrUsdAttributeSetValue();
    if (v7)
    {

      swift_bridgeObjectRelease();
      swift_release();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attribute<[ToolsFoundations.Token]>);
      uint64_t v8 = (void *)swift_allocObject();
      void v8[2] = Attribute;
    }
    else
    {
      uint64_t v8 = (void *)RIOPxrUsdAttributeCopyTypeName();

      swift_bridgeObjectRelease();
      swift_release();
    }
    outlined consume of Result<AnyAttribute, Object.Error>(v8, v7 ^ 1);
  }
  else
  {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in Stage.setTrigger(trigger:at:mapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v13 & 1) != 0))
  {
    *a6 = *(void *)(*(void *)(a2 + 56) + 8 * v12);
    return swift_retain();
  }
  else
  {
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
    uint64_t v15 = swift_allocError();
    uint64_t v17 = v16;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    uint64_t v19 = (char *)v17 + *(int *)(v18 + 48);
    uint64_t v20 = (char *)v17 + *(int *)(v18 + 64);
    *uint64_t v17 = a3;
    uint64_t v21 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, a4, v21);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, a1, v22);
    swift_storeEnumTagMultiPayload();
    id v23 = a3;
    uint64_t result = swift_willThrow();
    *a5 = v15;
  }
  return result;
}

void Stage.makeParentPrim(from:baseName:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v15 = (void *)*a1;
  SceneDescriptionFoundations.Path.deletingLastPathComponent()((uint64_t *)&v13);
  int v7 = v13;
  SceneDescriptionFoundations.Path.appendingPathComponent(_:)(a2, a3, (uint64_t *)&v15);
  uint64_t v8 = v15;
  if (RIOPxrUsdStageHasPrimAtPrimPath())
  {
    unint64_t v12 = a4;
    uint64_t v9 = 0;
    while (!__OFADD__(v9, 1))
    {
      char v13 = (void *)a2;
      uint64_t v14 = a3;
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = 95;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      SceneDescriptionFoundations.Path.appendingPathComponent(_:)((uint64_t)v13, v14, (uint64_t *)&v13);

      swift_bridgeObjectRelease();
      uint64_t v8 = v13;
      ++v9;
      if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) == 0)
      {

        a4 = v12;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {

LABEL_7:
    *a4 = v8;
  }
}

void setRotationAxis #1 (direction:axis:on:) in Stage.setAction(action:at:mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v41 = a5;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v15, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  uint64_t v16 = type metadata accessor for __RKEntitySpinDirectionType();
  uint64_t v17 = *(void *)(v16 - 8);
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  *(void *)&long long v19 = 1.0;
  if (v18 != 1)
  {
    int v20 = (*(uint64_t (**)(char *, uint64_t, double))(v17 + 88))(v15, v16, 1.0);
    if (v20 != *MEMORY[0x263F16330])
    {
      *(void *)&long long v19 = -1.0;
      if (v20 == *MEMORY[0x263F16328]) {
        goto LABEL_6;
      }
      (*(void (**)(char *, uint64_t, double))(v17 + 8))(v15, v16, -1.0);
    }
    *(void *)&long long v19 = 1.0;
  }
LABEL_6:
  if (a4)
  {
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
    swift_allocError();
    uint64_t v24 = v23;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
    uint64_t v26 = (char *)v24 + *(int *)(v25 + 48);
    *uint64_t v24 = a6;
    uint64_t v27 = type metadata accessor for __RKEntityActionSpecification();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v26, a7, v27);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = (void *)((char *)v24 + *(int *)(v25 + 64));
    *uint64_t v28 = 1936291937;
    v28[1] = 0xE400000000000000;
    swift_storeEnumTagMultiPayload();
    id v29 = a6;
    swift_willThrow();
  }
  else
  {
    long long v38 = v19;
    *(void *)&v21.f64[0] = a2;
    *(void *)&v21.f64[1] = a3;
    float64x2_t v37 = v21;
    if (String.count.getter() < 1) {
      id v22 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v22 = (id)RIOPxrTfTokenCreateWithCString();
    }
    id v30 = v22;
    *(double *)&unint64_t v31 = *(double *)&v38 * *(float *)&v37.f64[1];
    float64x2_t v37 = vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(HIDWORD(v37.f64[0]), a2)), *(double *)&v38);
    long long v38 = v31;
    Double3 = (void *)RIOPxrSdfValueTypeNameCreateDouble3();
    uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
    float64x2_t v39 = v37;
    long long v40 = v38;
    uint64_t v34 = (void *)RIOPxrVtValueCreateWithDouble3();
    char v35 = RIOPxrUsdAttributeSetValue();

    if (v35)
    {
      uint64_t v36 = Attribute;
      uint64_t Attribute = v30;
    }
    else
    {

      uint64_t v36 = v30;
    }
  }
}

void setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v54 = a5;
  uint64_t v55 = a4;
  uint64_t v56 = a3;
  uint64_t v7 = type metadata accessor for __RKEntityMoveEaseType();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  Swift::String v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v52 = (char *)&v51 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v53 = (char *)&v51 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  int v20 = (char *)&v51 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x270FA5388](v21 - 8);
  id v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v23, &demangling cache variable for type metadata for __RKEntityMoveEase?);
  uint64_t v24 = type metadata accessor for __RKEntityMoveEase();
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24);
  outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for __RKEntityMoveEase?);
  if (a1 == 1
    || (outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a2, (uint64_t)v20, &demangling cache variable for type metadata for __RKEntityMoveEaseType?), int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7), outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for __RKEntityMoveEaseType?), v25 != 1))
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a2, (uint64_t)v17, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7) == 1)
    {
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
      swift_allocError();
      uint64_t v28 = v27;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      id v30 = (char *)v28 + *(int *)(v29 + 48);
      unint64_t v31 = v55;
      *uint64_t v28 = v55;
      uint64_t v32 = type metadata accessor for __RKEntityActionSpecification();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v54, v32);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v33 = (void *)((char *)v28 + *(int *)(v29 + 64));
      *uint64_t v33 = 0x6570795465736165;
      v33[1] = 0xE800000000000000;
      swift_storeEnumTagMultiPayload();
      id v34 = v31;
      swift_willThrow();
      return;
    }
    char v35 = v53;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v17, v7);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    float64x2_t v37 = v52;
    v36(v52, v35, v7);
    v36(v10, v37, v7);
    int v38 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
    if (v38 == *MEMORY[0x263F16280])
    {
      float64x2_t v39 = *(void (**)(char *, uint64_t))(v8 + 8);
      v39(v37, v7);
      v39(v35, v7);
    }
    else if (v38 == *MEMORY[0x263F16288])
    {
      long long v40 = *(void (**)(char *, uint64_t))(v8 + 8);
      v40(v37, v7);
      v40(v35, v7);
    }
    else
    {
      if (v38 != *MEMORY[0x263F16278])
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return;
      }
      uint64_t v42 = *(void (**)(char *, uint64_t))(v8 + 8);
      v42(v37, v7);
      v42(v35, v7);
    }
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      id v41 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      id v41 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
  }
  else
  {
    if (String.count.getter() < 1) {
      id v26 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v26 = (id)RIOPxrTfTokenCreateWithCString();
    }
    id v41 = v26;
  }
  id v43 = v41;
  if (String.count.getter() < 1) {
    id v44 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v44 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v45 = v44;
  Token = (void *)RIOPxrSdfValueTypeNameCreateToken();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  uint64_t v48 = (void *)RIOPxrVtValueCreateWithToken();
  char v49 = RIOPxrUsdAttributeSetValue();

  if (v49)
  {
    uint64_t v50 = Attribute;
    uint64_t Attribute = v43;
  }
  else
  {

    uint64_t v50 = v45;
    uint64_t v45 = v43;
  }
}

uint64_t key path setter for Xformable.xformTranslateOp : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 24);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

uint64_t key path setter for Xformable.xformOrientOp : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

uint64_t key path setter for Xformable.xformScaleOp : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 72);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

uint64_t key path setter for Xformable.xformOpOrder : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 96);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

void *key path getter for BehaviorSchema.triggers : BehaviorSchema@<X0>(void *a1@<X0>, void *(*a2)(void *__return_ptr, uint64_t, uint64_t)@<X3>, void *a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t result = a2(v9, v5, v6);
  uint64_t v8 = v9[1];
  *a3 = v9[0];
  a3[1] = v8;
  return result;
}

uint64_t key path setter for BehaviorSchema.triggers : BehaviorSchema(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *, uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v8);
  v11[0] = v7;
  v11[1] = v6;
  swift_bridgeObjectRetain();
  return a5(v11, v8, v9);
}

uint64_t SceneDescriptionFoundations.Path.lastPathComponent.getter()
{
  id v1 = *v0;
  uint64_t v2 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  v11[0] = 47;
  v11[1] = 0xE100000000000000;
  v10[2] = v11;
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v10, v3, v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 32 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Substring>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

void specialized Properties.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_getAtKeyPath();
  if (!a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  id v6 = a1;
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v7 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2) {
      goto LABEL_4;
    }
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2) {
    goto LABEL_10;
  }
LABEL_4:
  Token = (void *)RIOPxrSdfValueTypeNameCreateToken();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  Swift::String v10 = (void *)RIOPxrVtValueCreateWithToken();
  int v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }
}

{
  id v6;
  id v7;
  void *AssetPath;
  void *Attribute;
  void *v10;
  int v11;

  swift_getAtKeyPath();
  if (!a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  id v6 = a1;
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v7 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2) {
      goto LABEL_4;
    }
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2) {
    goto LABEL_10;
  }
LABEL_4:
  AssetPath = (void *)RIOPxrSdfValueTypeNameCreateAssetPath();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  Swift::String v10 = (void *)RIOPxrVtValueCreateWithAssetPath();
  int v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }
}

void specialized Properties.subscript.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  swift_getAtKeyPath();
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v7 = (id)RIOPxrTfTokenEmpty();
    if (a5 <= 2) {
      goto LABEL_4;
    }
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a5 > 2) {
    goto LABEL_10;
  }
LABEL_4:
  Double = (void *)RIOPxrSdfValueTypeNameCreateDouble();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  Swift::String v10 = (void *)RIOPxrVtValueCreateWithDouble();
  int v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }
}

void specialized Properties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  swift_getAtKeyPath();
  if (!a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v7 = (id)RIOPxrTfTokenEmpty();
    if (a5 <= 2) {
      goto LABEL_4;
    }
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a5 > 2) {
    goto LABEL_10;
  }
LABEL_4:
  String = (void *)RIOPxrSdfValueTypeNameCreateString();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  String.utf8CString.getter();
  Swift::String v10 = (void *)RIOPxrVtValueCreateWithCString();
  swift_release();
  int v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_bridgeObjectRelease_n();
    swift_release();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release();
  }
}

void specialized Properties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v11, &demangling cache variable for type metadata for simd_quatd?);
  swift_getAtKeyPath();
  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v12, &demangling cache variable for type metadata for simd_quatd?);
  if (v13)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v6 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v6 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2) {
    goto LABEL_10;
  }
LABEL_5:
  Quatd = (void *)RIOPxrSdfValueTypeNameCreateQuatd();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  uint64_t v9 = (void *)RIOPxrVtValueCreateWithQuatd();
  int v10 = RIOPxrUsdAttributeSetValue();

  if (v10)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }
}

{
  id v6;
  void *Double3;
  void *Attribute;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v11, &demangling cache variable for type metadata for SIMD3<Double>?);
  swift_getAtKeyPath();
  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v12, &demangling cache variable for type metadata for SIMD3<Double>?);
  if (v13)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v6 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v6 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2) {
    goto LABEL_10;
  }
LABEL_5:
  Double3 = (void *)RIOPxrSdfValueTypeNameCreateDouble3();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  uint64_t v9 = (void *)RIOPxrVtValueCreateWithDouble3();
  int v10 = RIOPxrUsdAttributeSetValue();

  if (v10)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }
}

void specialized Properties.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v5 = a1;
  swift_getAtKeyPath();
  if (v5 == 2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    id v6 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v6 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2) {
    goto LABEL_10;
  }
LABEL_5:
  char Bool = (void *)RIOPxrSdfValueTypeNameCreateBool();
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  uint64_t v9 = (void *)RIOPxrVtValueCreateWithBool();
  int v10 = RIOPxrUsdAttributeSetValue();

  if (v10)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < 0) {
    goto LABEL_46;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v25 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v25 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v25 | (v11 << 16), v34, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_41:
    swift_release();
    return (uint64_t)v14;
  }
  uint64_t v31 = a1;
  uint64_t v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
    uint64_t v13 = 11;
  }
  uint64_t v30 = v13 | (v12 << 16);
  unint64_t v37 = 4 * v12;
  uint64_t v14 = (void *)MEMORY[0x263F8EE78];
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  unint64_t v32 = 15;
  while (1)
  {
    v36[0] = String.subscript.getter();
    v36[1] = v17;
    uint64_t v18 = a3(v36);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v14;
    }
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v15 = String.index(after:)();
LABEL_11:
    if (v37 == v15 >> 14) {
      goto LABEL_32;
    }
  }
  unint64_t v20 = v15 >> 14;
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v15 = String.index(after:)();
    *(void *)(v34 + 16) = v15;
    unint64_t v16 = v15;
    unint64_t v32 = v15;
    goto LABEL_11;
  }
  if (v20 < v16 >> 14) {
    goto LABEL_45;
  }
  if (v37 < v20)
  {
    __break(1u);
LABEL_44:
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
LABEL_37:
    unint64_t v27 = v14[2];
    unint64_t v26 = v14[3];
    if (v27 >= v26 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v14);
    }
    v14[2] = v27 + 1;
    uint64_t v28 = &v14[4 * v27];
    v28[4] = v19;
    v28[5] = v30;
    v28[6] = a5;
    v28[7] = a6;
    *(void *)(v15 + 16) = v14;
LABEL_40:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  }
  unint64_t v22 = v14[2];
  unint64_t v21 = v14[3];
  if (v22 >= v21 >> 1) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v14);
  }
  v14[2] = v22 + 1;
  id v23 = &v14[4 * v22];
  v23[4] = v16;
  v23[5] = v15;
  v23[6] = a5;
  v23[7] = a6;
  *(void *)(v10 + 16) = v14;
  uint64_t v24 = String.index(after:)();
  unint64_t v15 = v24;
  *(void *)(v34 + 16) = v24;
  if (v14[2] != v31)
  {
    unint64_t v16 = v24;
    unint64_t v32 = v24;
    goto LABEL_11;
  }
  unint64_t v32 = v24;
  unint64_t v16 = v24;
LABEL_32:
  if (v37 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  unint64_t v15 = v10;
  unint64_t v19 = v32;
  if (v37 >= v32 >> 14)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_44;
    }
    goto LABEL_37;
  }
LABEL_45:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_46:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v9 = *(void *)(a2 + 16);
  unint64_t v10 = a1 >> 14;
  int v11 = (v9 >> 14 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (v10 >= v9 >> 14)
  {
    uint64_t v14 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v14 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if (v10 > 4 * v14)
    {
      __break(1u);
    }
    else
    {
      uint64_t v7 = a4;
      unint64_t v6 = a1;
      uint64_t v8 = *(void **)(a4 + 16);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v7 + 16) = v8;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_7:
        unint64_t v17 = v8[2];
        unint64_t v16 = v8[3];
        if (v17 >= v16 >> 1)
        {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v8);
          *(void *)(v7 + 16) = v8;
        }
        void v8[2] = v17 + 1;
        uint64_t v18 = &v8[4 * v17];
        v18[4] = v9;
        v18[5] = v6;
        v18[6] = a5;
        v18[7] = a6;
        return v11 ^ 1u;
      }
    }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *(void *)(v7 + 16) = v8;
    goto LABEL_7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 2 * a2;
  type metadata accessor for __RKEntityActionSpecification();
  return a1;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

BOOL specialized Array._hoistableIsNativeTypeChecked()(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

void *sub_23AA4BE50@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))BehaviorSchema.triggers.getter, a2);
}

uint64_t sub_23AA4BE7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))destroy for RelationshipMetadata);
}

void *sub_23AA4BEA8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))BehaviorSchema.actions.getter, a2);
}

uint64_t sub_23AA4BED4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))destroy for AttributeMetadata);
}

void *sub_23AA4BF00@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))BehaviorSchema.exclusive.getter, a2);
}

uint64_t sub_23AA4BF2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))destroy for RelationshipMetadata);
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_23AA4BFB0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_23AA4BFE8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void specialized Properties.subscript.setter(uint64_t a1)
{
  swift_getAtKeyPath();
  if (a1)
  {
    if (String.count.getter() <= 0)
    {
      swift_bridgeObjectRelease();
      id v2 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      id v2 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_n(a1);
    type metadata accessor for RIOPxrSdfPathRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    int v5 = RIOPxrUsdRelationshipSetTargets();

    if (v5)
    {

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
}

{
  id v2;
  void *Relationship;
  Class isa;
  int v5;

  swift_getAtKeyPath();
  if (a1)
  {
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      id v2 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      id v2 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
    type metadata accessor for RIOPxrSdfPathRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    int v5 = RIOPxrUsdRelationshipSetTargets();

    if (v5)
    {

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t type metadata accessor for InteractionSpecificationsUSDStageErrors(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for InteractionSpecificationsUSDStageErrors);
}

uint64_t type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for InteractionSpecificationsUSDStageErrors.InteractionType);
}

void *sub_23AA4C1E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))WaitActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4C214(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))WaitActionSchema.infoID.setter);
}

void *sub_23AA4C240@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))WaitActionSchema.duration.getter, a2);
}

uint64_t sub_23AA4C26C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))WaitActionSchema.duration.setter);
}

void *sub_23AA4C298@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4C2C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))VisibilityActionSchema.infoID.setter);
}

void *sub_23AA4C2F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4C31C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))VisibilityActionSchema.affectedObjects.setter);
}

void *sub_23AA4C348@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.duration.getter, a2);
}

uint64_t sub_23AA4C374(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))VisibilityActionSchema.duration.setter);
}

void *sub_23AA4C3A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.type.getter, a2);
}

uint64_t sub_23AA4C3CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))VisibilityActionSchema.type.setter);
}

void *sub_23AA4C3F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.style.getter, a2);
}

uint64_t sub_23AA4C424(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))VisibilityActionSchema.style.setter);
}

void *sub_23AA4C450@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.motionType.getter, a2);
}

uint64_t sub_23AA4C47C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))VisibilityActionSchema.motionType.setter);
}

void *sub_23AA4C4A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.moveDistance.getter, a2);
}

uint64_t sub_23AA4C4D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))VisibilityActionSchema.moveDistance.setter);
}

void *sub_23AA4C500@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 88))(v7, v3, v4);
  uint64_t v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

void *sub_23AA4C56C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TransformActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4C598(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TransformActionSchema.infoID.setter);
}

void *sub_23AA4C5C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TransformActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4C5F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TransformActionSchema.affectedObjects.setter);
}

void *sub_23AA4C61C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TransformActionSchema.duration.getter, a2);
}

uint64_t sub_23AA4C648(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TransformActionSchema.duration.setter);
}

void *sub_23AA4C674@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TransformActionSchema.type.getter, a2);
}

uint64_t sub_23AA4C6A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TransformActionSchema.type.setter);
}

void *sub_23AA4C6CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TransformActionSchema.xformTarget.getter, a2);
}

uint64_t sub_23AA4C6F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TransformActionSchema.xformTarget.setter);
}

void *sub_23AA4C724@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TransformActionSchema.relativeToObject.getter, a2);
}

uint64_t sub_23AA4C750(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TransformActionSchema.relativeToObject.setter);
}

void *sub_23AA4C77C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v7, v3, v4);
  uint64_t v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

void *sub_23AA4C7E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v7, v3, v4);
  uint64_t v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

void *sub_23AA4C854@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 16))(v7, v3, v4);
  uint64_t v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

void *sub_23AA4C8C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.infoID.getter, a2);
}

uint64_t sub_23AA4C8EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.infoID.setter);
}

void *sub_23AA4C918@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4C944(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.affectedObjects.setter);
}

void *sub_23AA4C970@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.multiplePerformOperation.getter, a2);
}

uint64_t sub_23AA4C99C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.multiplePerformOperation.setter);
}

void *sub_23AA4C9C8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.start.getter, a2);
}

uint64_t sub_23AA4C9F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.start.setter);
}

void *sub_23AA4CA20@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.duration.getter, a2);
}

uint64_t sub_23AA4CA4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.duration.setter);
}

void *sub_23AA4CA78@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.reversed.getter, a2);
}

uint64_t sub_23AA4CAA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.reversed.setter);
}

void *sub_23AA4CAD0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.animationSpeed.getter, a2);
}

uint64_t sub_23AA4CAFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.animationSpeed.setter);
}

void *sub_23AA4CB28@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.reverses.getter, a2);
}

uint64_t sub_23AA4CB54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))StartAnimationSchema.reverses.setter);
}

void *sub_23AA4CB80@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))SpinActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4CBAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))SpinActionSchema.infoID.setter);
}

void *sub_23AA4CBD8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))SpinActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4CC04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))SpinActionSchema.affectedObjects.setter);
}

void *sub_23AA4CC30@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))SpinActionSchema.duration.getter, a2);
}

uint64_t sub_23AA4CC5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))SpinActionSchema.duration.setter);
}

void *sub_23AA4CC88@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))SpinActionSchema.revolutions.getter, a2);
}

uint64_t sub_23AA4CCB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))SpinActionSchema.revolutions.setter);
}

void *sub_23AA4CCE0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4CD0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))OrbitActionSchema.infoID.setter);
}

void *sub_23AA4CD38@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4CD64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))OrbitActionSchema.affectedObjects.setter);
}

void *sub_23AA4CD90@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.alignToPath.getter, a2);
}

uint64_t sub_23AA4CDBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))OrbitActionSchema.alignToPath.setter);
}

void *sub_23AA4CDE8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.center.getter, a2);
}

uint64_t sub_23AA4CE14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))OrbitActionSchema.center.setter);
}

void *sub_23AA4CE40@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.duration.getter, a2);
}

uint64_t sub_23AA4CE6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))OrbitActionSchema.duration.setter);
}

void *sub_23AA4CE98@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.revolutions.getter, a2);
}

uint64_t sub_23AA4CEC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))OrbitActionSchema.revolutions.setter);
}

void *sub_23AA4CEF0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))NotificationActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4CF1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))NotificationActionSchema.infoID.setter);
}

void *sub_23AA4CF48@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))NotificationActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4CF74(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))NotificationActionSchema.affectedObjects.setter);
}

void *sub_23AA4CFA0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))NotificationActionSchema.identifier.getter, a2);
}

uint64_t sub_23AA4CFCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))NotificationActionSchema.identifier.setter);
}

void *sub_23AA4CFF8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4D024(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))LookAtCameraActionSchema.infoID.setter);
}

void *sub_23AA4D050@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4D07C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))LookAtCameraActionSchema.affectedObjects.setter);
}

void *sub_23AA4D0A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.duration.getter, a2);
}

uint64_t sub_23AA4D0D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))LookAtCameraActionSchema.duration.setter);
}

void *sub_23AA4D100@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.front.getter, a2);
}

uint64_t sub_23AA4D12C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))LookAtCameraActionSchema.front.setter);
}

void *sub_23AA4D158@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.upVector.getter, a2);
}

uint64_t sub_23AA4D184(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))LookAtCameraActionSchema.upVector.setter);
}

void *sub_23AA4D1B0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ImpulseActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4D1DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ImpulseActionSchema.infoID.setter);
}

void *sub_23AA4D208@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ImpulseActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4D234(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ImpulseActionSchema.affectedObjects.setter);
}

void *sub_23AA4D260@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ImpulseActionSchema.velocity.getter, a2);
}

uint64_t sub_23AA4D28C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ImpulseActionSchema.velocity.setter);
}

void *sub_23AA4D2B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))GroupActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4D2E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))GroupActionSchema.infoID.setter);
}

void *sub_23AA4D310@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))GroupActionSchema.type.getter, a2);
}

uint64_t sub_23AA4D33C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))GroupActionSchema.type.setter);
}

void *sub_23AA4D368@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))GroupActionSchema.loops.getter, a2);
}

uint64_t sub_23AA4D394(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))GroupActionSchema.loops.setter);
}

void *sub_23AA4D3C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))GroupActionSchema.performCount.getter, a2);
}

uint64_t sub_23AA4D3EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))GroupActionSchema.performCount.setter);
}

void *sub_23AA4D418@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))GroupActionSchema.actions.getter, a2);
}

uint64_t sub_23AA4D444(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))GroupActionSchema.actions.setter);
}

void *sub_23AA4D470@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4D49C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))EmphasisActionSchema.infoID.setter);
}

void *sub_23AA4D4C8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4D4F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))EmphasisActionSchema.affectedObjects.setter);
}

void *sub_23AA4D520@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.duration.getter, a2);
}

uint64_t sub_23AA4D54C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))EmphasisActionSchema.duration.setter);
}

void *sub_23AA4D578@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.motionType.getter, a2);
}

uint64_t sub_23AA4D5A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))EmphasisActionSchema.motionType.setter);
}

void *sub_23AA4D5D0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.style.getter, a2);
}

uint64_t sub_23AA4D5FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))EmphasisActionSchema.style.setter);
}

void *sub_23AA4D628@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ChangeSceneActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4D654(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ChangeSceneActionSchema.infoID.setter);
}

void *sub_23AA4D680@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ChangeSceneActionSchema.scene.getter, a2);
}

uint64_t sub_23AA4D6AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ChangeSceneActionSchema.scene.setter);
}

void *sub_23AA4D6D8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))AudioActionSchema.infoID.getter, a2);
}

uint64_t sub_23AA4D704(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))AudioActionSchema.infoID.setter);
}

void *sub_23AA4D730@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))AudioActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4D75C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))AudioActionSchema.affectedObjects.setter);
}

void *sub_23AA4D788@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))AudioActionSchema.audio.getter, a2);
}

uint64_t sub_23AA4D7B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))AudioActionSchema.audio.setter);
}

void *sub_23AA4D7E0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))AudioActionSchema.type.getter, a2);
}

uint64_t sub_23AA4D80C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))AudioActionSchema.type.setter);
}

void *sub_23AA4D838@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))AudioActionSchema.gain.getter, a2);
}

uint64_t sub_23AA4D864(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))AudioActionSchema.gain.setter);
}

void *sub_23AA4D890@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))AudioActionSchema.auralMode.getter, a2);
}

uint64_t sub_23AA4D8BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))AudioActionSchema.auralMode.setter);
}

void *sub_23AA4D8E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))AudioActionSchema.multiplePerformOperation.getter, a2);
}

uint64_t sub_23AA4D914(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))AudioActionSchema.multiplePerformOperation.setter);
}

void *sub_23AA4D940@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TapTriggerSchema.infoID.getter, a2);
}

uint64_t sub_23AA4D96C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TapTriggerSchema.infoID.setter);
}

void *sub_23AA4D998@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))TapTriggerSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4D9C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))TapTriggerSchema.affectedObjects.setter);
}

void *sub_23AA4D9F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))SceneTransitionTriggerSchema.infoID.getter, a2);
}

uint64_t sub_23AA4DA1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))SceneTransitionTriggerSchema.infoID.setter);
}

void *sub_23AA4DA48@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))SceneTransitionTriggerSchema.type.getter, a2);
}

uint64_t sub_23AA4DA74(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))SceneTransitionTriggerSchema.type.setter);
}

void *sub_23AA4DAA0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ProximityToCameraTriggerSchema.infoID.getter, a2);
}

uint64_t sub_23AA4DACC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ProximityToCameraTriggerSchema.infoID.setter);
}

void *sub_23AA4DAF8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ProximityToCameraTriggerSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4DB24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ProximityToCameraTriggerSchema.affectedObjects.setter);
}

void *sub_23AA4DB50@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))ProximityToCameraTriggerSchema.distance.getter, a2);
}

uint64_t sub_23AA4DB7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))ProximityToCameraTriggerSchema.distance.setter);
}

void *sub_23AA4DBA8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))NotificationTriggerSchema.infoID.getter, a2);
}

uint64_t sub_23AA4DBD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))NotificationTriggerSchema.infoID.setter);
}

void *sub_23AA4DC00@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))NotificationTriggerSchema.identifier.getter, a2);
}

uint64_t sub_23AA4DC2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))NotificationTriggerSchema.identifier.setter);
}

uint64_t partial apply for closure #1 in Stage.setTrigger(trigger:at:mapping:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return closure #1 in Stage.setTrigger(trigger:at:mapping:)(a1, *(void *)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), a2, a3);
}

void *sub_23AA4DC7C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))CollideTriggerSchema.infoID.getter, a2);
}

uint64_t sub_23AA4DCA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))CollideTriggerSchema.infoID.setter);
}

void *sub_23AA4DCD4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))CollideTriggerSchema.affectedObjects.getter, a2);
}

uint64_t sub_23AA4DD00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))CollideTriggerSchema.affectedObjects.setter);
}

void *sub_23AA4DD2C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (void *(*)(void *__return_ptr, uint64_t, uint64_t))CollideTriggerSchema.colliders.getter, a2);
}

uint64_t sub_23AA4DD58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t))CollideTriggerSchema.colliders.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v6 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v6 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v2 = type metadata accessor for __RKEntityActionSpecification();
  }
  else {
    uint64_t v2 = type metadata accessor for __RKEntityTriggerSpecification();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = type metadata accessor for __RKEntityActionSpecification();
  }
  else {
    uint64_t v4 = type metadata accessor for __RKEntityTriggerSpecification();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of InteractionSpecificationsUSDStageErrors.InteractionType(a1, type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v4 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = type metadata accessor for __RKEntityActionSpecification();
  }
  else {
    uint64_t v4 = type metadata accessor for __RKEntityTriggerSpecification();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of InteractionSpecificationsUSDStageErrors.InteractionType(a1, type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v4 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for InteractionSpecificationsUSDStageErrors.InteractionType()
{
  uint64_t result = type metadata accessor for __RKEntityTriggerSpecification();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for __RKEntityActionSpecification();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for InteractionSpecificationsUSDStageErrors(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = &v13[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = *a2;
      *(void *)a1 = *a2;
      unint64_t v15 = v14;
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      uint64_t v17 = *(int *)(v16 + 48);
      uint64_t v18 = &a1[v17];
      unint64_t v19 = (char *)a2 + v17;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v20 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v20 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v20 - 8) + 16))(v18, v19);
      swift_storeEnumTagMultiPayload();
      uint64_t v28 = *(int *)(v16 + 64);
      uint64_t v29 = &a1[v28];
      uint64_t v30 = (char **)((char *)a2 + v28);
      uint64_t v31 = v30[1];
      *(void *)uint64_t v29 = *v30;
      *((void *)v29 + 1) = v31;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      *(void *)a1 = *a2;
      uint64_t v8 = v7;
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      unint64_t v10 = &a1[v9];
      int v11 = (char *)a2 + v9;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v12 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v12 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v12 - 8) + 16))(v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      unint64_t v21 = *a2;
      *(void *)a1 = *a2;
      unint64_t v22 = v21;
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      uint64_t v24 = *(int *)(v23 + 48);
      uint64_t v25 = &a1[v24];
      unint64_t v26 = (char *)a2 + v24;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v27 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v27 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v27 - 8) + 16))(v25, v26);
      swift_storeEnumTagMultiPayload();
      uint64_t v32 = *(int *)(v23 + 64);
      uint64_t v33 = &a1[v32];
      uint64_t v34 = (char *)a2 + v32;
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for InteractionSpecificationsUSDStageErrors(id *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {

    uint64_t v6 = (char *)a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String))
                + 48);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v7 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v7 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (result == 1)
    {

      uint64_t v8 = (char *)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v9 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v9 = type metadata accessor for __RKEntityTriggerSpecification();
      }
    }
    else
    {
      if (result) {
        return result;
      }

      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      uint64_t v4 = (char *)a1 + *(int *)(v3 + 48);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v5 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v5 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      uint64_t v8 = (char *)a1 + *(int *)(v3 + 64);
      uint64_t v9 = type metadata accessor for UUID();
    }
    unint64_t v10 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8);
    return v10(v8, v9);
  }
}

void **initializeWithCopy for InteractionSpecificationsUSDStageErrors(void **a1, void **a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    int v11 = *a2;
    *a1 = *a2;
    id v12 = v11;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
    uint64_t v14 = *(int *)(v13 + 48);
    unint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v17 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v17 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(char *, char *))(*(void *)(v17 - 8) + 16))(v15, v16);
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = *(int *)(v13 + 64);
    unint64_t v26 = (void **)((char *)a1 + v25);
    uint64_t v27 = (void **)((char *)a2 + v25);
    uint64_t v28 = v27[1];
    *unint64_t v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *a2;
    *a1 = *a2;
    id v6 = v5;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v10 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v10 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(char *, char *))(*(void *)(v10 - 8) + 16))(v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    id v19 = v18;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    uint64_t v21 = *(int *)(v20 + 48);
    unint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v24 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v24 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(char *, char *))(*(void *)(v24 - 8) + 16))(v22, v23);
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = *(int *)(v20 + 64);
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for InteractionSpecificationsUSDStageErrors(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)a1, type metadata accessor for InteractionSpecificationsUSDStageErrors);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      int v11 = *a2;
      *a1 = *a2;
      id v12 = v11;
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      uint64_t v14 = *(int *)(v13 + 48);
      unint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v17 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v17 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v17 - 8) + 16))(v15, v16);
      swift_storeEnumTagMultiPayload();
      uint64_t v25 = *(int *)(v13 + 64);
      unint64_t v26 = (void **)((char *)a1 + v25);
      uint64_t v27 = (void **)((char *)a2 + v25);
      *unint64_t v26 = *v27;
      v26[1] = v27[1];
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *a2;
      *a1 = *a2;
      id v6 = v5;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v10 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v10 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v10 - 8) + 16))(v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v18 = *a2;
      *a1 = *a2;
      id v19 = v18;
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      uint64_t v21 = *(int *)(v20 + 48);
      unint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v24 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v24 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v24 - 8) + 16))(v22, v23);
      swift_storeEnumTagMultiPayload();
      uint64_t v28 = *(int *)(v20 + 64);
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for InteractionSpecificationsUSDStageErrors(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
    uint64_t v10 = *(int *)(v9 + 48);
    int v11 = (char *)a1 + v10;
    id v12 = (char *)a2 + v10;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v13 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v13 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(char *, char *))(*(void *)(v13 - 8) + 32))(v11, v12);
    swift_storeEnumTagMultiPayload();
    *(_OWORD *)((char *)a1 + *(int *)(v9 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v9 + 64));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                + 48);
    id v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v8 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v8 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(char *, char *))(*(void *)(v8 - 8) + 32))(v6, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    *a1 = *a2;
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    uint64_t v15 = *(int *)(v14 + 48);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v18 = type metadata accessor for __RKEntityActionSpecification();
    }
    else {
      uint64_t v18 = type metadata accessor for __RKEntityTriggerSpecification();
    }
    (*(void (**)(char *, char *))(*(void *)(v18 - 8) + 32))(v16, v17);
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = *(int *)(v14 + 64);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for InteractionSpecificationsUSDStageErrors(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)a1, type metadata accessor for InteractionSpecificationsUSDStageErrors);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      uint64_t v10 = *(int *)(v9 + 48);
      int v11 = (char *)a1 + v10;
      id v12 = (char *)a2 + v10;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v13 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v13 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v13 - 8) + 32))(v11, v12);
      swift_storeEnumTagMultiPayload();
      *(_OWORD *)((char *)a1 + *(int *)(v9 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v9 + 64));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      id v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v8 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v8 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v8 - 8) + 32))(v6, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a1 = *a2;
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      uint64_t v15 = *(int *)(v14 + 48);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v18 = type metadata accessor for __RKEntityActionSpecification();
      }
      else {
        uint64_t v18 = type metadata accessor for __RKEntityTriggerSpecification();
      }
      (*(void (**)(char *, char *))(*(void *)(v18 - 8) + 32))(v16, v17);
      swift_storeEnumTagMultiPayload();
      uint64_t v19 = *(int *)(v14 + 64);
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for InteractionSpecificationsUSDStageErrors()
{
  uint64_t result = type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      id v6 = &v5;
      swift_getTupleTypeLayout2();
      uint64_t v7 = &v4;
      swift_getTupleTypeLayout3();
      uint64_t v8 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for Error in InteractionSpecificationsUSDStageErrors()
{
  return lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, (void (*)(uint64_t))type metadata accessor for InteractionSpecificationsUSDStageErrors);
}

uint64_t outlined init with copy of InteractionSpecificationsUSDStageErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL static BuilderOrder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BuilderOrder.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BuilderOrder.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type BuilderOrder and conformance BuilderOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type BuilderOrder and conformance BuilderOrder;
  if (!lazy protocol witness table cache variable for type BuilderOrder and conformance BuilderOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BuilderOrder and conformance BuilderOrder);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BuilderOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23AA4F890);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BuilderOrder()
{
  return &type metadata for BuilderOrder;
}

uint64_t closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, a2, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  swift_bridgeObjectRetain();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F163B0], v8);
  unint64_t v14 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, v14);
    *a3 = v14;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v14);
    *a3 = v14;
  }
  *(void *)(v14 + 16) = v17 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v17, v11, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  BOOL v14;

  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    int v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        uint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        unint64_t v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t specialized static ActionBuilder.generateNotificationActionSpecifications(inputs:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v0 - 8);
  unint64_t v2 = (char *)v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v7 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v7 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)v23);

  swift_release();
  uint64_t v9 = (void *)v23[0];
  uint64_t v8 = v23[1];
  if (v24 == 1)
  {
    v22[2] = v23[0];
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<String, Object.Error>(v9, v8, 1);
    return MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v16 = *(void *)(specialized Inputs.pathsForRelationship(named:requestContext:)() + 16);
    uint64_t v17 = swift_bridgeObjectRelease();
    if (v16)
    {
      v23[0] = MEMORY[0x263F8EE78];
      MEMORY[0x270FA5388](v17);
      v22[-4] = v23;
      v22[-3] = v9;
      v22[-2] = v8;
      if (one-time initialization token for OutputName != -1) {
        swift_once();
      }
      specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:), (uint64_t)&v22[-6]);
      outlined consume of Result<String, Object.Error>(v9, v8, 0);
      uint64_t v10 = v23[0];
      if (*(void *)(v23[0] + 16) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        uint64_t v18 = type metadata accessor for __RKEntityActionSpecification();
        uint64_t v19 = *(void *)(v18 - 8);
        unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
        uint64_t v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_23AAB22A0;
        (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F16310], v3);
        swift_bridgeObjectRetain();
        __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
        (*(void (**)(unint64_t, void, uint64_t))(v19 + 104))(v21 + v20, *MEMORY[0x263F163A8], v18);
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v11 = type metadata accessor for __RKEntityActionSpecification();
      uint64_t v12 = *(void *)(v11 - 8);
      unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_23AAB22A0;
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v2, 1, 1, v14);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)();
      (*(void (**)(unint64_t, void, uint64_t))(v12 + 104))(v10 + v13, *MEMORY[0x263F163B0], v11);
    }
  }
  return v10;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v6) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a2;
    uint64_t v11 = 1;
  }
  else
  {
    specialized Set.subscript.getter(result, v5, a1, a2);
    uint64_t v12 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v9 = v12;
    uint64_t v10 = a2;
    uint64_t v11 = 0;
  }
  return v8(v10, v11, 1, v9);
}

uint64_t specialized Collection.first.getter()
{
  type metadata accessor for Entity.ChildCollection();
  lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, MEMORY[0x263F16548]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v0 = 0;
  if (v4[4] != v4[0])
  {
    uint64_t v1 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v0 = *v2;
    swift_retain();
    v1(v4, 0);
  }
  return v0;
}

uint64_t USDImportService.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v1 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return v0;
}

void *specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  getEngine(_:)(a2);
  if (specialized static USDImportService.canLoad(url:)())
  {
    URL._bridgeToObjectiveC()(v7);
    uint64_t v9 = v8;
    if (a5) {
      uint64_t SingleUseImporterWithURL = RIOImportSessionCreateSingleUseImporterWithURL();
    }
    else {
      uint64_t SingleUseImporterWithURL = RIOImportSessionCreateWithURL();
    }
    unint64_t v13 = (void *)SingleUseImporterWithURL;

    type metadata accessor for ImportSession(0);
    swift_allocObject();
    uint64_t v12 = specialized ImportSession.init<A>(core:entityType:)(v13);
    swift_release();
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
    swift_retain();
    v15(a1, v14);
    if (v12) {
      swift_release();
    }
  }
  else
  {
    swift_release();
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
    return 0;
  }
  return v12;
}

uint64_t static USDImportService.urlForUSD(named:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t **)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  countAndFlagsBits = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v59 = (char *)&v46 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v12 - 8);
  object = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (void ***)((char *)&v46 - v16);
  MEMORY[0x270FA5388](v18);
  uint64_t v52 = (void **)((char *)&v46 - v19);
  if (one-time initialization token for supportedFilePathExtensions != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v53 = *(void *)(static USDImportService.supportedFilePathExtensions + 16);
    if (!v53) {
      return ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v7[7])(a4, 1, 1, v6);
    }
    uint64_t v55 = v17;
    uint64_t v46 = a4;
    uint64_t v62 = (uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))(v7 + 7);
    uint64_t v63 = static USDImportService.supportedFilePathExtensions;
    uint64_t v57 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 6);
    uint64_t v58 = static USDImportService.supportedFilePathExtensions + 32;
    uint64_t v50 = (void (**)(char *, char *, uint64_t))(v7 + 2);
    uint64_t v51 = (void (**)(char *, char *, uint64_t))(v7 + 4);
    char v49 = (void (**)(char *, uint64_t))(v7 + 1);
    swift_bridgeObjectRetain();
    uint64_t v20 = v63;
    unint64_t v21 = 0;
    uint64_t v47 = a3;
    a4 = v52;
    uint64_t v64 = countAndFlagsBits;
    uint64_t v56 = object;
    while (1)
    {
      if (v21 >= *(void *)(v20 + 16))
      {
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v22 = (uint64_t *)(v58 + 16 * v21);
      uint64_t v23 = *v22;
      uint64_t v17 = (void *)v22[1];
      swift_bridgeObjectRetain();
      char v24 = (void *)MEMORY[0x23ECB9F30](v60, v61);
      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = (void *)MEMORY[0x23ECB9F30](v23, v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v25 = 0;
      }
      id v26 = objc_msgSend((id)a3, sel_URLForResource_withExtension_, v24, v25);

      if (v26)
      {
        uint64_t v27 = (uint64_t)v55;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v28 = *v62;
        uint64_t v29 = v27;
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v28 = *v62;
        uint64_t v27 = (uint64_t)v55;
        uint64_t v29 = (uint64_t)v55;
        uint64_t v30 = 1;
      }
      uint64_t v54 = v28;
      v28((void **)v29, v30, 1, v6);
      countAndFlagsBits = v64;
      object = v56;
      outlined init with take of URL?(v27, (uint64_t)a4);
      outlined init with copy of URL?((uint64_t)a4, (uint64_t)object);
      if ((*v57)(object, 1, v6) != 1) {
        break;
      }
      uint64_t v7 = &demangling cache variable for type metadata for URL?;
      outlined destroy of Any?((uint64_t)a4, &demangling cache variable for type metadata for URL?);
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)object, &demangling cache variable for type metadata for URL?);
LABEL_5:
      ++v21;
      uint64_t v20 = v63;
      if (v21 == v53)
      {
        swift_bridgeObjectRelease();
        return v54(v46, 1, 1, v6);
      }
    }
    uint64_t v31 = v59;
    uint64_t v48 = *v51;
    v48(v59, object, v6);
    swift_bridgeObjectRelease();
    (*v50)(countAndFlagsBits, v31, v6);
    if (v17) {
      goto LABEL_50;
    }
    if ((URL.isFileURL.getter() & 1) == 0) {
      goto LABEL_47;
    }
    uint64_t v32 = static USDImportService.supportedFilePathExtensions;
    uint64_t v33 = *(void *)(static USDImportService.supportedFilePathExtensions + 16);
    if (v33)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v34 = (uint64_t *)(v32 + 40);
      uint64_t v17 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v36 = *v34;
        if (*v34)
        {
          uint64_t v37 = *(v34 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          }
          unint64_t v39 = v17[2];
          unint64_t v38 = v17[3];
          if (v39 >= v38 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v17);
          }
          v17[2] = v39 + 1;
          uint64_t v35 = &v17[2 * v39];
          v35[4] = v37;
          v35[5] = v36;
        }
        v34 += 2;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease_n();
      a3 = v47;
    }
    else
    {
      uint64_t v17 = (void *)MEMORY[0x263F8EE78];
    }
    URL.pathExtension.getter();
    Swift::String v40 = String.lowercased()();
    countAndFlagsBits = (char *)v40._countAndFlagsBits;
    object = (char *)v40._object;
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t *)v17[2];
    if (!v7) {
      goto LABEL_32;
    }
    if (v17[4] == v40._countAndFlagsBits && (void *)v17[5] == v40._object
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_49:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      countAndFlagsBits = v64;
LABEL_50:
      (*v49)(countAndFlagsBits, v6);
      outlined destroy of Any?((uint64_t)v52, &demangling cache variable for type metadata for URL?);
      swift_bridgeObjectRelease();
      uint64_t v45 = v46;
      v48((char *)v46, v59, v6);
      return v54(v45, 0, 1, v6);
    }
    a3 = v47;
    if (v7 == (uint64_t *)1)
    {
LABEL_32:
      swift_bridgeObjectRelease();
LABEL_46:
      countAndFlagsBits = v64;
      swift_bridgeObjectRelease();
LABEL_47:
      uint64_t v17 = v49;
      id v43 = *v49;
      (*v49)(countAndFlagsBits, v6);
      uint64_t v7 = (uint64_t *)v52;
      outlined destroy of Any?((uint64_t)v52, &demangling cache variable for type metadata for URL?);
      v43(v59, v6);
      a4 = (void **)v7;
      goto LABEL_5;
    }
    if (v17[6] == v40._countAndFlagsBits && (void *)v17[7] == v40._object
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_49;
    }
    if (v7 == (uint64_t *)2)
    {
LABEL_45:
      swift_bridgeObjectRelease();
      a3 = v47;
      goto LABEL_46;
    }
    a4 = (void **)(v17 + 9);
    a3 = 2;
    while (1)
    {
      id v41 = (uint64_t *)(a3 + 1);
      if (__OFADD__(a3, 1)) {
        break;
      }
      BOOL v42 = *(a4 - 1) == (void *)v40._countAndFlagsBits && *a4 == v40._object;
      if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_49;
      }
      a4 += 2;
      ++a3;
      if (v41 == v7) {
        goto LABEL_45;
      }
    }
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
}

uint64_t specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t (*a6)(uint64_t))
{
  getEngine(_:)(a2);
  if (a5) {
    uint64_t SingleUseImporterWithStage = RIOImportSessionCreateSingleUseImporterWithStage();
  }
  else {
    uint64_t SingleUseImporterWithStage = RIOImportSessionCreateWithStage();
  }
  uint64_t v9 = SingleUseImporterWithStage;
  type metadata accessor for ImportSession(0);
  swift_allocObject();
  uint64_t v10 = a6(v9);
  swift_release();
  swift_release();
  return v10;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t USDImportService.init()()
{
  uint64_t v1 = v0;
  static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v2 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return v1;
}

Swift::Bool __swiftcall USDImportService.canLoad(named:in:)(Swift::String named, NSBundle in)
{
  return static USDImportService.canLoad(named:in:)(named._countAndFlagsBits, (uint64_t)named._object, (uint64_t)in.super.isa);
}

BOOL static USDImportService.canLoad(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (void **)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v8);
  uint64_t v9 = type metadata accessor for URL();
  BOOL v10 = (*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) != 1;
  outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  return v10;
}

double one-time initialization function for supportedFilePathExtensions()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23AAB2870;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(_OWORD *)(v0 + 48) = xmmword_23AAB6C40;
  *(_OWORD *)(v0 + 64) = xmmword_23AAB6C50;
  *(void *)&double result = 1667527541;
  *(_OWORD *)(v0 + 80) = xmmword_23AAB6C60;
  *(_OWORD *)(v0 + 96) = xmmword_23AAB6C70;
  static USDImportService.supportedFilePathExtensions = v0;
  return result;
}

unint64_t USDImportService.LoadError.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Error = type metadata accessor for USDImportService.LoadError();
  MEMORY[0x270FA5388](Error);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of USDImportService.LoadError(v0, (uint64_t)v7);
  unint64_t v8 = 0xD000000000000030;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v7, v1);
      unint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xD00000000000001ELL;
      unint64_t v19 = 0x800000023AAB0180;
      lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 34;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      unint64_t v8 = v18;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
    case 2u:
      unint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v15._countAndFlagsBits = 0xD000000000000034;
      v15._object = (void *)0x800000023AAB0080;
      String.append(_:)(v15);
      v16._countAndFlagsBits = Dictionary.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      return v8;
    case 4u:
      unint64_t v8 = 0xD000000000000037;
      break;
    case 5u:
      unint64_t v8 = 0xD000000000000033;
      break;
    default:
      uint64_t v9 = *v7;
      BOOL v10 = (void *)v7[1];
      unint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xD000000000000023;
      unint64_t v19 = 0x800000023AAAE7F0;
      v11._countAndFlagsBits = v9;
      v11._object = v10;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 0x6E7562206E692022;
      v12._object = (void *)0xEB00000000656C64;
      String.append(_:)(v12);
LABEL_5:
      unint64_t v8 = v18;
      break;
  }
  return v8;
}

uint64_t USDImportService.load(with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  v194 = (char *)&v182 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v195 = (char *)&v182 - v5;
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v182 - v7;
  MEMORY[0x270FA5388](v9);
  Swift::String v11 = (char *)&v182 - v10;
  uint64_t v200 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v200 - 8);
  MEMORY[0x270FA5388](v200);
  id v193 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  Swift::String v16 = (char *)&v182 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v186 = (char *)&v182 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v184 = (char *)&v182 - v20;
  MEMORY[0x270FA5388](v21);
  v188 = (char *)&v182 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v182 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v182 - v27;
  MEMORY[0x270FA5388](v29);
  uint64_t v185 = (char *)&v182 - v30;
  MEMORY[0x270FA5388](v31);
  id v189 = (char *)&v182 - v32;
  MEMORY[0x270FA5388](v33);
  v190 = (char *)&v182 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v182 - v36;
  MEMORY[0x270FA5388](v38);
  Swift::String v40 = (char *)&v182 - v39;
  uint64_t v41 = *(void *)(a1 + 16);
  uint64_t v192 = v16;
  if (v41)
  {
    unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
    if (v43)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v42, (uint64_t)&v198);
      if (swift_dynamicCast())
      {
        uint64_t v183 = v25;
        if (v196 == 0x6D6F724664616F4CLL && v197 == 0xEB000000004C5255)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v25 = v183;
          if ((v44 & 1) == 0) {
            goto LABEL_18;
          }
        }
        if (*(void *)(a1 + 16)
          && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746E65746E6F63, 0xEA0000000000664FLL),
              (v46 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v45, (uint64_t)&v198);
          uint64_t v47 = v200;
          int v48 = swift_dynamicCast();
          uint64_t v49 = v12;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, v48 ^ 1u, 1, v47);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v47) != 1)
          {
            uint64_t v50 = v200;
            (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v40, v11, v200);
            if (*(void *)(a1 + 16)
              && (unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(0x656D614E68746977, 0xE800000000000000),
                  (v52 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v51, (uint64_t)&v198);
              if (swift_dynamicCast()) {
                uint64_t v53 = (char *)v197;
              }
              else {
                uint64_t v53 = 0;
              }
            }
            else
            {
              uint64_t v53 = 0;
            }
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
            v194 = v53;
            if (v199)
            {
              LOBYTE(v193) = swift_dynamicCast() & v196;
              LODWORD(v193) = v193;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
              LODWORD(v193) = 0;
            }
            uint64_t v130 = type metadata accessor for Entity();
            uint64_t v131 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
            v131(v37, v40, v50);
            uint64_t v132 = v190;
            v131(v190, v37, v50);
            uint64_t v133 = (uint64_t)v189;
            v131(v189, v132, v50);
            uint64_t v134 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(v133, 0, 0, 0, v130, 1);
            uint64_t v135 = *(void (**)(char *, uint64_t))(v49 + 8);
            uint64_t v195 = (char *)(v49 + 8);
            v135(v132, v50);
            uint64_t v136 = v135;
            if (!v134)
            {
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
              swift_allocError();
              v131(v138, v40, v50);
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
LABEL_230:
              a1 = (uint64_t)v194;
              v136(v37, v50);
              v136(v40, v50);
              goto LABEL_168;
            }
            if (v193)
            {
              if (String.count.getter() < 1) {
                id v137 = (id)RIOPxrTfTokenEmpty();
              }
              else {
                id v137 = (id)RIOPxrTfTokenCreateWithCString();
              }
              v158 = v137;
              uint64_t v159 = (void *)RIOPxrUsdStageCopyRootLayer();
              type metadata accessor for SceneDescriptionFoundations.Layer();
              *(void *)(swift_allocObject() + 16) = v159;
              swift_setDeallocating();
              id v160 = v159;
              SceneDescriptionFoundations.Layer.__deallocating_deinit();
              uint64_t v161 = (void *)RIOPxrVtValueCreateWithBool();
              RIOPxrSdfLayerSetCustomLayerData();
            }
            swift_beginAccess();
            RIOImportSessionUpdateSynchronouslyOnEngineQueue();
            uint64_t result = RIOImportSessionGetSceneCount();
            if ((result & 0x8000000000000000) == 0)
            {
              uint64_t v162 = result;
              if (result)
              {
                uint64_t v163 = v134;
                uint64_t v164 = 0;
                uint64_t v165 = 0;
                while (1)
                {
                  if (RIOImportSessionIsSceneActive())
                  {
                    BOOL v123 = __OFADD__(v164++, 1);
                    if (v123) {
                      break;
                    }
                  }
                  if (v162 == ++v165) {
                    goto LABEL_227;
                  }
                }
                __break(1u);
LABEL_227:
                BOOL v166 = v164 < 2;
                uint64_t v134 = v163;
                if (!v166)
                {
                  type metadata accessor for USDImportService.LoadError();
                  lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
                  swift_allocError();
                  swift_storeEnumTagMultiPayload();
                  swift_willThrow();
                  swift_release();
                  uint64_t v50 = v200;
                  goto LABEL_230;
                }
              }
              a1 = v134[3];
              swift_retain();
              swift_release();
              v167 = v37;
              uint64_t v168 = v200;
              v136(v167, v200);
              v136(v40, v168);
LABEL_168:
              swift_bridgeObjectRelease();
              return a1;
            }
            goto LABEL_254;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, v200);
        }
        outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
        uint64_t v25 = v183;
      }
    }
  }
LABEL_18:
  if (*(void *)(a1 + 16))
  {
    unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
    if (v55)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v54, (uint64_t)&v198);
      if (swift_dynamicCast())
      {
        uint64_t v183 = v25;
        if (v196 == 0xD000000000000010 && v197 == 0x800000023AAAFF30)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v56 & 1) == 0) {
            goto LABEL_34;
          }
        }
        if (*(void *)(a1 + 16)
          && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746E65746E6F63, 0xEA0000000000664FLL),
              (v58 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v57, (uint64_t)&v198);
          uint64_t v59 = v200;
          int v60 = swift_dynamicCast();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, v60 ^ 1u, 1, v59);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v59) != 1)
          {
            (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v185, v8, v200);
            specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, a1, &v198);
            if (v199)
            {
              int v61 = swift_dynamicCast();
              uint64_t v62 = (char *)v197;
              if (!v61) {
                uint64_t v62 = 0;
              }
              uint64_t v195 = v62;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
              uint64_t v195 = 0;
            }
            uint64_t v139 = (uint64_t)v183;
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
            if (v199)
            {
              int v140 = (swift_dynamicCast() & v196);
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
              int v140 = 0;
            }
            uint64_t v141 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
            uint64_t v142 = v185;
            uint64_t v143 = v200;
            v141(v28, v185, v200);
            v141((char *)v139, v142, v143);
            if (specialized static USDImportService.loadModel_createImportSession(contentsOf:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:), v144))
            {
              if (v140)
              {
                if (String.count.getter() < 1) {
                  id v145 = (id)RIOPxrTfTokenEmpty();
                }
                else {
                  id v145 = (id)RIOPxrTfTokenCreateWithCString();
                }
                uint64_t v169 = v145;
                uint64_t v170 = (void *)RIOPxrUsdStageCopyRootLayer();
                type metadata accessor for SceneDescriptionFoundations.Layer();
                *(void *)(swift_allocObject() + 16) = v170;
                swift_setDeallocating();
                id v171 = v170;
                SceneDescriptionFoundations.Layer.__deallocating_deinit();
                v172 = (void *)RIOPxrVtValueCreateWithBool();
                RIOPxrSdfLayerSetCustomLayerData();
              }
              swift_beginAccess();
              RIOImportSessionUpdateSynchronouslyOnEngineQueue();
              uint64_t result = RIOImportSessionGetSceneCount();
              if (result < 0) {
                goto LABEL_255;
              }
              uint64_t v173 = result;
              if (!result) {
                goto LABEL_242;
              }
              uint64_t v174 = 0;
              uint64_t v175 = 0;
              while (1)
              {
                if (RIOImportSessionIsSceneActive())
                {
                  BOOL v123 = __OFADD__(v174++, 1);
                  if (v123) {
                    break;
                  }
                }
                if (v173 == ++v175) {
                  goto LABEL_241;
                }
              }
              __break(1u);
LABEL_241:
              if (v174 >= 2)
              {
                type metadata accessor for USDImportService.LoadError();
                lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
                swift_allocError();
                swift_storeEnumTagMultiPayload();
                swift_willThrow();
              }
              else
              {
LABEL_242:
                uint64_t v176 = v191;
                uint64_t v177 = specialized static USDImportService.loadModel_selectEntity(contentsOf:importSession:)((uint64_t)v183);
                if (!v176)
                {
                  a1 = v177;
                  type metadata accessor for ModelEntity();
                  uint64_t v178 = swift_dynamicCastClass();
                  uint64_t v179 = v185;
                  if (v178)
                  {
                    swift_release();
                    uint64_t v180 = *(void (**)(char *, uint64_t))(v12 + 8);
                    uint64_t v181 = v200;
                    v180(v28, v200);
                    v180(v183, v181);
                    v180(v179, v181);
                    swift_bridgeObjectRelease();
                    return a1;
                  }
                  type metadata accessor for USDImportService.LoadError();
                  lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
                  swift_allocError();
                  uint64_t v142 = v185;
                  swift_storeEnumTagMultiPayload();
                  swift_willThrow();
                  swift_release();
                  swift_release();
                  uint64_t v143 = v200;
LABEL_247:
                  a1 = *(void *)(v12 + 8);
                  ((void (*)(char *, uint64_t))a1)(v28, v143);
                  ((void (*)(char *, uint64_t))a1)(v183, v143);
                  ((void (*)(char *, uint64_t))a1)(v142, v143);
                  swift_bridgeObjectRelease();
                  return a1;
                }
              }
              swift_release();
              uint64_t v143 = v200;
              uint64_t v142 = v185;
              goto LABEL_247;
            }
            type metadata accessor for USDImportService.LoadError();
            lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
            swift_allocError();
            v141(v146, v142, v143);
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            goto LABEL_247;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v200);
        }
        outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
      }
    }
  }
LABEL_34:
  if (!*(void *)(a1 + 16)
    || (unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000), (v64 & 1) == 0))
  {
    uint64_t v66 = v200;
    goto LABEL_41;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v63, (uint64_t)&v198);
  char v65 = swift_dynamicCast();
  uint64_t v66 = v200;
  if (v65)
  {
    if (v196 == 0x6D6F724664616F4CLL && v197 == 0xEE00656C646E7542)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v69 & 1) == 0) {
        goto LABEL_41;
      }
    }
    specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, a1, &v198);
    if (v199)
    {
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t v71 = v196;
      uint64_t v70 = v197;
      specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, a1, &v198);
      if (v199)
      {
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
        if (swift_dynamicCast())
        {
          uint64_t v72 = (void *)v196;
          specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
          if (v199)
          {
            if (swift_dynamicCast()) {
              int v73 = v196;
            }
            else {
              int v73 = 2;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
            int v73 = 2;
          }
          a1 = v187;
          uint64_t v147 = v191;
          uint64_t v148 = USDImportService.load(named:in:generateDecimatedMesh:)(v71, v70, v72, v73);
          if (!v147) {
            a1 = v148;
          }
          swift_bridgeObjectRelease();

          return a1;
        }
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      swift_bridgeObjectRelease();
    }
    outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
  }
LABEL_41:
  if (!*(void *)(a1 + 16)) {
    goto LABEL_69;
  }
  unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v68 & 1) == 0) {
    goto LABEL_69;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v67, (uint64_t)&v198);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_69;
  }
  if (v196 == 0xD000000000000013 && v197 == 0x800000023AAAFF10)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v74 & 1) == 0) {
      goto LABEL_69;
    }
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, a1, &v198);
  if (!v199)
  {
LABEL_68:
    outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
    goto LABEL_69;
  }
  if (swift_dynamicCast())
  {
    uint64_t v76 = v196;
    uint64_t v75 = v197;
    specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, a1, &v198);
    if (v199)
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
      if (swift_dynamicCast())
      {
        uint64_t v77 = (void *)v196;
        specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
        if (v199)
        {
          if (swift_dynamicCast()) {
            int v78 = v196;
          }
          else {
            int v78 = 2;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
          int v78 = 2;
        }
        uint64_t v124 = USDImportService.loadModel(named:in:generateDecimatedMesh:)(v76, v75, v77, v78);
LABEL_200:
        a1 = v124;
        swift_bridgeObjectRelease();

        return a1;
      }
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
LABEL_69:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, a1, &v198);
  if (!v199) {
    goto LABEL_84;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_85;
  }
  if (v196 == 0xD000000000000019 && v197 == 0x800000023AAAFEF0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v79 & 1) == 0) {
      goto LABEL_85;
    }
  }
  specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, a1, &v198);
  if (!v199) {
    goto LABEL_84;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v81 = v196;
  uint64_t v80 = v197;
  specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, a1, &v198);
  if (!v199)
  {
    swift_bridgeObjectRelease();
LABEL_84:
    outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
    goto LABEL_85;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  if (swift_dynamicCast())
  {
    uint64_t v77 = (void *)v196;
    specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
    if (v199)
    {
      if (swift_dynamicCast()) {
        int v82 = v196;
      }
      else {
        int v82 = 2;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
      int v82 = 2;
    }
    uint64_t v124 = USDImportService.loadBodyTracked(named:in:generateDecimatedMesh:)(v81, v80, (uint64_t)v77, v82);
    goto LABEL_200;
  }
  swift_bridgeObjectRelease();
LABEL_85:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, a1, &v198);
  if (!v199)
  {
    uint64_t v84 = &demangling cache variable for type metadata for Any?;
    uint64_t v85 = &v198;
LABEL_100:
    outlined destroy of Any?((uint64_t)v85, v84);
    goto LABEL_101;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_101;
  }
  if (v196 == 0xD000000000000016 && v197 == 0x800000023AAAFED0)
  {
    swift_bridgeObjectRelease();
    uint64_t v83 = (long long *)v195;
  }
  else
  {
    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v83 = (long long *)v195;
    if ((v86 & 1) == 0) {
      goto LABEL_101;
    }
  }
  specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, a1, &v198);
  if (!v199)
  {
    outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
    (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v83, 1, 1, v66);
    goto LABEL_99;
  }
  int v87 = swift_dynamicCast();
  (*(void (**)(long long *, void, uint64_t, uint64_t))(v12 + 56))(v83, v87 ^ 1u, 1, v66);
  if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(v12 + 48))(v83, 1, v66) == 1)
  {
LABEL_99:
    uint64_t v84 = &demangling cache variable for type metadata for URL?;
    uint64_t v85 = v83;
    goto LABEL_100;
  }
  uint64_t v88 = v188;
  (*(void (**)(char *, long long *, uint64_t))(v12 + 32))(v188, v83, v66);
  specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, a1, &v198);
  if (!v199)
  {
    outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
    goto LABEL_132;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_132:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v88, v66);
LABEL_101:
    specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, a1, &v198);
    if (!v199)
    {
      uint64_t v91 = &demangling cache variable for type metadata for Any?;
      uint64_t v92 = &v198;
LABEL_116:
      outlined destroy of Any?((uint64_t)v92, v91);
      goto LABEL_117;
    }
    if (swift_dynamicCast())
    {
      if (v196 == 0xD000000000000011 && v197 == 0x800000023AAAFE90)
      {
        swift_bridgeObjectRelease();
        uint64_t v90 = (long long *)v194;
LABEL_108:
        specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, a1, &v198);
        if (v199)
        {
          int v94 = swift_dynamicCast();
          (*(void (**)(long long *, void, uint64_t, uint64_t))(v12 + 56))(v90, v94 ^ 1u, 1, v66);
          if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(v12 + 48))(v90, 1, v66) != 1)
          {
            uint64_t v95 = v192;
            (*(void (**)(char *, long long *, uint64_t))(v12 + 32))(v192, v90, v66);
            specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, a1, &v198);
            if (v199)
            {
              int v96 = swift_dynamicCast();
              uint64_t v97 = v197;
              if (!v96) {
                uint64_t v97 = 0;
              }
              uint64_t v200 = v97;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
              uint64_t v200 = 0;
            }
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
            if (v199)
            {
              int v102 = (swift_dynamicCast() & v196);
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
              int v102 = 0;
            }
            uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
            uint64_t v104 = v193;
            v103(v193, v95, v66);
            uint64_t v105 = v190;
            v103(v190, v104, v66);
            uint64_t v106 = (uint64_t)v189;
            v103(v189, v105, v66);
            uint64_t v107 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(v106, 0, 0, 0, 1);
            uint64_t v108 = v95;
            uint64_t v109 = v107;
            uint64_t v110 = v105;
            uint64_t v111 = *(void (**)(char *, uint64_t))(v12 + 8);
            v111(v110, v66);
            if (v109)
            {
              if (v102)
              {
                if (String.count.getter() < 1) {
                  id v112 = (id)RIOPxrTfTokenEmpty();
                }
                else {
                  id v112 = (id)RIOPxrTfTokenCreateWithCString();
                }
                uint64_t v116 = v112;
                uint64_t v117 = (void *)RIOPxrUsdStageCopyRootLayer();
                type metadata accessor for SceneDescriptionFoundations.Layer();
                *(void *)(swift_allocObject() + 16) = v117;
                swift_setDeallocating();
                id v118 = v117;
                SceneDescriptionFoundations.Layer.__deallocating_deinit();
                uint64_t v119 = (void *)RIOPxrVtValueCreateWithBool();
                RIOPxrSdfLayerSetCustomLayerData();
              }
              swift_beginAccess();
              RIOImportSessionUpdateSynchronouslyOnEngineQueue();
              uint64_t result = RIOImportSessionGetSceneCount();
              if (result < 0)
              {
                __break(1u);
                goto LABEL_253;
              }
              uint64_t v120 = result;
              if (!result) {
                goto LABEL_258;
              }
              uint64_t v121 = 0;
              uint64_t v122 = 0;
              while (1)
              {
                if (RIOImportSessionIsSceneActive())
                {
                  BOOL v123 = __OFADD__(v121++, 1);
                  if (v123) {
                    break;
                  }
                }
                if (v120 == ++v122) {
                  goto LABEL_163;
                }
              }
              __break(1u);
LABEL_163:
              if (v121 < 2)
              {
LABEL_258:
                type metadata accessor for AnchorEntity();
                if (swift_dynamicCastClass())
                {
                  swift_retain();
                  swift_release();
                  a1 = swift_dynamicCastClassUnconditional();
                  v111(v193, v66);
                  v111(v192, v66);
                  goto LABEL_168;
                }
              }
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
              swift_allocError();
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              swift_release();
              uint64_t v108 = v192;
            }
            else
            {
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
              swift_allocError();
              v103(v113, v108, v66);
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
            }
            a1 = v200;
            v111(v193, v66);
            v111(v108, v66);
            goto LABEL_168;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
          (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v90, 1, 1, v66);
        }
        uint64_t v91 = &demangling cache variable for type metadata for URL?;
        uint64_t v92 = v90;
        goto LABEL_116;
      }
      char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v90 = (long long *)v194;
      if (v93) {
        goto LABEL_108;
      }
    }
LABEL_117:
    specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, a1, &v198);
    if (v199)
    {
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_144;
      }
      if (v196 == 0xD000000000000013 && v197 == 0x800000023AAAFE50)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v98 & 1) == 0) {
          goto LABEL_144;
        }
      }
      specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, a1, &v198);
      if (v199)
      {
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_144;
        }
        uint64_t v100 = v196;
        uint64_t v99 = v197;
        specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, a1, &v198);
        if (v199)
        {
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
          if (swift_dynamicCast())
          {
            uint64_t v77 = (void *)v196;
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
            if (v199)
            {
              if (swift_dynamicCast()) {
                int v101 = v196;
              }
              else {
                int v101 = 2;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
              int v101 = 2;
            }
            uint64_t v124 = USDImportService.loadAnchor(named:in:generateDecimatedMesh:)(v100, v99, v77, v101);
            goto LABEL_200;
          }
          swift_bridgeObjectRelease();
LABEL_144:
          type metadata accessor for USDImportService.LoadError();
          lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
          swift_allocError();
          *uint64_t v114 = a1;
          swift_storeEnumTagMultiPayload();
          swift_bridgeObjectRetain();
          swift_willThrow();
          return a1;
        }
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
    goto LABEL_144;
  }
  specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, a1, &v198);
  if (v199)
  {
    int v89 = (swift_dynamicCast() & v196);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v198, &demangling cache variable for type metadata for Any?);
    int v89 = 0;
  }
  uint64_t v125 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v125(v184, v88, v66);
  v125(v186, v88, v66);
  if (!specialized static USDImportService.loadModel_createImportSession(contentsOf:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:), v126))
  {
    uint64_t v128 = v88;
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    v125(v129, v88, v66);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_250;
  }
  if (v89)
  {
    if (String.count.getter() < 1) {
      id v127 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v127 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v149 = v127;
    uint64_t v150 = (void *)RIOPxrUsdStageCopyRootLayer();
    type metadata accessor for SceneDescriptionFoundations.Layer();
    *(void *)(swift_allocObject() + 16) = v150;
    swift_setDeallocating();
    id v151 = v150;
    SceneDescriptionFoundations.Layer.__deallocating_deinit();
    uint64_t v152 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();
  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  uint64_t result = RIOImportSessionGetSceneCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v153 = result;
    if (!result) {
      goto LABEL_212;
    }
    uint64_t v154 = 0;
    uint64_t v155 = 0;
    while (1)
    {
      if (RIOImportSessionIsSceneActive())
      {
        BOOL v123 = __OFADD__(v154++, 1);
        if (v123) {
          break;
        }
      }
      if (v153 == ++v155) {
        goto LABEL_211;
      }
    }
    __break(1u);
LABEL_211:
    if (v154 >= 2)
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
LABEL_212:
      uint64_t v156 = v191;
      specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:)((uint64_t)v186);
      if (!v156)
      {
        type metadata accessor for BodyTrackedEntity();
        if (swift_dynamicCastClass())
        {
          swift_release();
          a1 = swift_dynamicCastClassUnconditional();
          uint64_t v157 = *(void (**)(char *, uint64_t))(v12 + 8);
          v157(v184, v66);
          v157(v186, v66);
          v157(v188, v66);
          swift_bridgeObjectRelease();
          return a1;
        }
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
      }
    }
    swift_release();
    uint64_t v128 = v188;
LABEL_250:
    a1 = *(void *)(v12 + 8);
    ((void (*)(char *, uint64_t))a1)(v184, v66);
    ((void (*)(char *, uint64_t))a1)(v186, v66);
    ((void (*)(char *, uint64_t))a1)(v128, v66);
    swift_bridgeObjectRelease();
    return a1;
  }
LABEL_253:
  __break(1u);
LABEL_254:
  __break(1u);
LABEL_255:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> USDImportService.loadAsync(with:)(Swift::OpaquePointer with)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  *(void *)&long long v242 = (char *)&v225 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v228 = (void **)((char *)&v225 - v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v231 = (uint64_t)&v225 - v10;
  MEMORY[0x270FA5388](v11);
  *((void *)&v242 + 1) = (char *)&v225 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v232 = (void **)((char *)&v225 - v14);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v225 - v16;
  MEMORY[0x270FA5388](v18);
  v233 = (void **)((char *)&v225 - v19);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v225 - v21;
  uint64_t v247 = type metadata accessor for URL();
  uint64_t v243 = *(void *)(v247 - 8);
  uint64_t v23 = *(void *)(v243 + 64);
  MEMORY[0x270FA5388](v247);
  id v237 = (uint64_t (*)(uint64_t))((char *)&v225 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v24);
  uint64_t v229 = (uint64_t)&v225 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v230 = (uint64_t)&v225 - v27;
  MEMORY[0x270FA5388](v28);
  v238 = (char *)&v225 - v29;
  MEMORY[0x270FA5388](v30);
  v235 = (char *)&v225 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (uint64_t (*)(uint64_t))((char *)&v225 - v33);
  MEMORY[0x270FA5388](v35);
  uint64_t v241 = (uint64_t)&v225 - v36;
  MEMORY[0x270FA5388](v37);
  v234 = (char *)&v225 - v38;
  MEMORY[0x270FA5388](v39);
  float64_t v239 = (char *)&v225 - v40;
  MEMORY[0x270FA5388](v41);
  char v43 = (char *)&v225 - v42;
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  uint64_t v240 = v1;
  v236 = v34;
  if (!v246)
  {
    char v44 = &demangling cache variable for type metadata for Any?;
    unint64_t v45 = (char *)&v245;
LABEL_16:
    outlined destroy of Any?((uint64_t)v45, v44);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v227 = v2;
  if (v244 == __PAIR128__(0x800000023AAB0030, 0xD000000000000010))
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = v227;
  }
  else
  {
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v3 = v227;
    if ((v46 & 1) == 0) {
      goto LABEL_17;
    }
  }
  specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v243 + 56))(v22, 1, 1, v247);
    goto LABEL_15;
  }
  uint64_t v47 = v3;
  uint64_t v48 = v247;
  int v49 = swift_dynamicCast();
  uint64_t v50 = v243;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v243 + 56))(v22, v49 ^ 1u, 1, v48);
  uint64_t v51 = v48;
  uint64_t v3 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v22, 1, v51) == 1)
  {
LABEL_15:
    char v44 = &demangling cache variable for type metadata for URL?;
    unint64_t v45 = v22;
    goto LABEL_16;
  }
  char v52 = *(void (**)(char *, char *, uint64_t))(v243 + 32);
  v52(v43, v22, v247);
  specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
  if (v246)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
    if (swift_dynamicCast())
    {
      long long v53 = v244;
      swift_retain();
      specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
      uint64_t v54 = v243;
      if (v246)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
        if (swift_dynamicCast())
        {
          char v55 = (uint64_t (*)(uint64_t))swift_allocObject();
          *((_OWORD *)v55 + 1) = v244;
          v235 = (char *)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
          v236 = v55;
LABEL_70:
          specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
          if (v246)
          {
            int v74 = swift_dynamicCast();
            uint64_t v75 = (char *)*((void *)&v244 + 1);
            if (!v74) {
              uint64_t v75 = 0;
            }
            v238 = v75;
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
            v238 = 0;
          }
          specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
          uint64_t v226 = (void (*)(unint64_t, char *, uint64_t))v52;
          long long v242 = v53;
          if (v246)
          {
            int v76 = swift_dynamicCast();
            int v77 = v244;
            if (!v76) {
              int v77 = 2;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
            int v77 = 2;
          }
          LODWORD(v237) = v77;
          uint64_t v241 = type metadata accessor for Entity();
          int v78 = v239;
          uint64_t v79 = v247;
          (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v239, v43, v247);
          unint64_t v80 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
          uint64_t v81 = v54;
          unint64_t v82 = (v23 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v83 = swift_allocObject();
          v226(v83 + v80, v78, v79);
          *(void *)(v83 + v82) = v241;
          uint64_t v84 = (void *)(v83 + ((v82 + 15) & 0xFFFFFFFFFFFFFFF8));
          *uint64_t v84 = 0;
          v84[1] = 0;
          uint64_t v85 = *((void *)&v242 + 1);
          swift_retain();
          uint64_t v86 = (uint64_t)v235;
          specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)v43, 0, 0, 0, (int)v237, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v83, (uint64_t)v235, (uint64_t)v236, 0, 0, v240, (void (*)(void **))v242, v85);
          swift_release();
          swift_release();
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v86);
          swift_bridgeObjectRelease();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v81 + 8))(v43, v79);
          return;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
      }
      v235 = 0;
      v236 = 0;
      goto LABEL_70;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
  }
  (*(void (**)(char *, uint64_t))(v243 + 8))(v43, v247);
  uint64_t v3 = v227;
LABEL_17:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    uint64_t v56 = v243;
    goto LABEL_23;
  }
  if (v244 == __PAIR128__(0x800000023AAB0010, 0xD000000000000013))
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = v243;
  }
  else
  {
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v56 = v243;
    if ((v58 & 1) == 0) {
      goto LABEL_23;
    }
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246) {
    goto LABEL_82;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_23;
  }
  long long v59 = v244;
  specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
LABEL_81:
    swift_bridgeObjectRelease();
LABEL_82:
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  if (swift_dynamicCast())
  {
    int v60 = (void *)v244;
    specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
    if (v246)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if (swift_dynamicCast())
      {
        uint64_t v61 = *((void *)&v244 + 1);
        *(void *)&long long v242 = v244;
        swift_retain_n();
        specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
        *((void *)&v242 + 1) = v61;
        if (v246)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
          uint64_t v62 = (uint64_t)v60;
          if (swift_dynamicCast())
          {
            unint64_t v63 = (char *)swift_allocObject();
            *((_OWORD *)v63 + 1) = v244;
            id v237 = thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
            v238 = v63;
LABEL_171:
            uint64_t v132 = v233;
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
            if (v246)
            {
              int v133 = swift_dynamicCast();
              int v134 = v244;
              if (!v133) {
                int v134 = 2;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
              int v134 = 2;
            }
            LODWORD(v236) = v134;
            type metadata accessor for USDImportService();
            uint64_t v135 = (char *)v62;
            static USDImportService.urlForUSD(named:in:)(v59, *((uint64_t *)&v59 + 1), v62, v132);
            uint64_t v136 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v56 + 48);
            uint64_t v241 = *((void *)&v59 + 1);
            uint64_t v137 = v247;
            if (v136(v132, 1, v247) == 1)
            {
              outlined destroy of Any?((uint64_t)v132, &demangling cache variable for type metadata for URL?);
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
              uint64_t v138 = swift_allocError();
              uint64_t v139 = v241;
              int v140 = (void *)v138;
              *uint64_t v141 = v59;
              v141[1] = v139;
              swift_storeEnumTagMultiPayload();
              *(void *)&long long v245 = v140;
              BYTE8(v245) = 1;
              swift_bridgeObjectRetain();
              ((void (*)(long long *))v242)(&v245);

              outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v237);
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v227 = v3;
              v233 = *(void ***)(v56 + 32);
              uint64_t v142 = v234;
              ((void (*)(char *, void **, uint64_t))v233)(v234, v132, v137);
              uint64_t v232 = (void **)type metadata accessor for Entity();
              uint64_t v143 = v239;
              (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v239, v142, v137);
              uint64_t v144 = *(unsigned __int8 *)(v56 + 80);
              v235 = v135;
              uint64_t v145 = (v144 + 16) & ~v144;
              unint64_t v146 = (v23 + v145 + 7) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v147 = swift_allocObject();
              ((void (*)(uint64_t, char *, uint64_t))v233)(v147 + v145, v143, v137);
              *(void *)(v147 + v146) = v232;
              uint64_t v148 = (void *)(v147 + ((v146 + 15) & 0xFFFFFFFFFFFFFFF8));
              *uint64_t v148 = 0;
              v148[1] = 0;
              uint64_t v149 = *((void *)&v242 + 1);
              swift_retain();
              uint64_t v150 = v234;
              id v151 = v237;
              specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)v234, v59, v241, v235, (int)v236, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v147, (uint64_t)v237, (uint64_t)v238, 0, 0, v240, (void (*)(void **))v242, v149);
              swift_release();
              swift_release();
              (*(void (**)(char *, uint64_t))(v56 + 8))(v150, v137);
              outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v151);
              swift_bridgeObjectRelease();
            }
            goto LABEL_224;
          }
        }
        else
        {
          uint64_t v62 = (uint64_t)v60;
          outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
        }
        id v237 = 0;
        v238 = 0;
        goto LABEL_171;
      }

      goto LABEL_164;
    }

    goto LABEL_81;
  }
LABEL_164:
  swift_bridgeObjectRelease();
LABEL_23:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_28;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_28:
    uint64_t v57 = v247;
    goto LABEL_29;
  }
  uint64_t v57 = v247;
  if (v244 == __PAIR128__(0x800000023AAAFFF0, 0xD000000000000015))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v64 & 1) == 0) {
      goto LABEL_29;
    }
  }
  specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v245);
  if (v246)
  {
    int v65 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v17, v65 ^ 1u, 1, v57);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v17, 1, v57) != 1)
    {
      char v68 = *(char **)(v56 + 32);
      unint64_t v67 = (void **)(v56 + 32);
      uint64_t v66 = v68;
      ((void (*)(uint64_t, char *, uint64_t))v68)(v241, v17, v57);
      specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
      if (v246)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
        if (swift_dynamicCast())
        {
          long long v242 = v244;
          swift_retain();
          specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
          if (v246)
          {
            int v69 = swift_dynamicCast();
            uint64_t v70 = (char *)*((void *)&v244 + 1);
            if (!v69) {
              uint64_t v70 = 0;
            }
            v238 = v70;
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
            v238 = 0;
          }
          specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
          if (v246)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
            if (swift_dynamicCast())
            {
              uint64_t v231 = swift_allocObject();
              *(_OWORD *)(v231 + 16) = v244;
              uint64_t v230 = (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
LABEL_89:
              specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
              uint64_t v227 = v3;
              v233 = v67;
              v234 = v66;
              if (v246)
              {
                if (swift_dynamicCast()) {
                  int v87 = v244;
                }
                else {
                  int v87 = 2;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
                int v87 = 2;
              }
              LODWORD(v237) = v87;
              uint64_t v88 = v243;
              uint64_t v232 = *(void ***)(v243 + 16);
              int v89 = v239;
              uint64_t v90 = v241;
              ((void (*)(char *, uint64_t, uint64_t))v232)(v239, v241, v57);
              unint64_t v91 = (*(unsigned __int8 *)(v88 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
              v235 = (char *)swift_allocObject();
              uint64_t v92 = v234;
              ((void (*)(char *, char *, uint64_t))v234)(&v235[v91], v89, v57);
              char v93 = v236;
              ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v232)(v236, v90, v57);
              uint64_t v94 = swift_allocObject();
              ((void (*)(unint64_t, uint64_t (*)(uint64_t), uint64_t))v92)(v94 + v91, v93, v57);
              uint64_t v95 = *((void *)&v242 + 1);
              swift_retain();
              uint64_t v96 = v230;
              specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v90, 0, 0, 0, (int)v237, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), (uint64_t)v235, v230, v231, (uint64_t)partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v94, v240, (void (*)(void **))v242, v95);
              swift_release();
              swift_release();
              swift_release();
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v96);
              swift_bridgeObjectRelease();
              swift_release_n();
              (*(void (**)(uint64_t, uint64_t))(v243 + 8))(v90, v57);
              return;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v230 = 0;
          uint64_t v231 = 0;
          goto LABEL_89;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v56 = v243;
      (*(void (**)(uint64_t, uint64_t))(v243 + 8))(v241, v57);
      goto LABEL_29;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v17, 1, 1, v57);
  }
  outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for URL?);
LABEL_29:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246) {
    goto LABEL_97;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_98;
  }
  if (v244 == __PAIR128__(0x800000023AAAFFD0, 0xD000000000000018))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v71 & 1) == 0) {
      goto LABEL_98;
    }
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246) {
    goto LABEL_97;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_98;
  }
  long long v72 = v244;
  specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
LABEL_96:
    swift_bridgeObjectRelease();
LABEL_97:
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_98;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  if (swift_dynamicCast())
  {
    int v73 = (char *)v244;
    specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
    if (v246)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if (swift_dynamicCast())
      {
        long long v242 = v244;
        swift_retain_n();
        specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
        if (v246)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
          if (swift_dynamicCast())
          {
            uint64_t v241 = swift_allocObject();
            *(_OWORD *)(v241 + 16) = v244;
            v238 = (char *)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
LABEL_180:
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
            if (v246)
            {
              int v152 = swift_dynamicCast();
              int v153 = v244;
              if (!v152) {
                int v153 = 2;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
              int v153 = 2;
            }
            LODWORD(v237) = v153;
            type metadata accessor for USDImportService();
            uint64_t v154 = v232;
            static USDImportService.urlForUSD(named:in:)(v72, *((uint64_t *)&v72 + 1), (uint64_t)v73, v232);
            if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v56 + 48))(v154, 1, v57) == 1)
            {
              outlined destroy of Any?((uint64_t)v154, &demangling cache variable for type metadata for URL?);
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
              uint64_t v155 = (void *)swift_allocError();
              *uint64_t v156 = v72;
              swift_storeEnumTagMultiPayload();
              *(void *)&long long v245 = v155;
              BYTE8(v245) = 1;
              swift_bridgeObjectRetain();
              ((void (*)(long long *))v242)(&v245);

              outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v238);
              swift_bridgeObjectRelease();
            }
            else
            {
              v234 = v73;
              uint64_t v231 = *(void *)(v56 + 32);
              uint64_t v157 = v235;
              ((void (*)(char *, void **, uint64_t))v231)(v235, v154, v57);
              uint64_t v227 = v3;
              uint64_t v158 = v56;
              uint64_t v232 = *(void ***)(v56 + 16);
              uint64_t v159 = v239;
              ((void (*)(char *, char *, uint64_t))v232)(v239, v157, v57);
              uint64_t v160 = *(unsigned __int8 *)(v158 + 80);
              uint64_t v161 = (v160 + 16) & ~v160;
              uint64_t v230 = v160 | 7;
              v233 = (void **)swift_allocObject();
              uint64_t v162 = (void (*)(uint64_t, uint64_t (*)(uint64_t), uint64_t))v231;
              ((void (*)(char *, char *, uint64_t))v231)((char *)v233 + v161, v159, v57);
              uint64_t v163 = v236;
              ((void (*)(uint64_t (*)(uint64_t), char *, uint64_t))v232)(v236, v235, v57);
              uint64_t v164 = swift_allocObject();
              v162(v164 + v161, v163, v57);
              uint64_t v165 = *((void *)&v242 + 1);
              swift_retain();
              BOOL v166 = v234;
              v167 = v235;
              uint64_t v168 = (uint64_t)v238;
              specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)v235, v72, *((uint64_t *)&v72 + 1), v234, (int)v237, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), (uint64_t)v233, (uint64_t)v238, v241, (uint64_t)partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v164, v240, (void (*)(void **))v242, v165);
              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(char *, uint64_t))(v243 + 8))(v167, v247);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v168);
              swift_bridgeObjectRelease();
            }
            goto LABEL_224;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
        }
        v238 = 0;
        uint64_t v241 = 0;
        goto LABEL_180;
      }

      goto LABEL_166;
    }

    goto LABEL_96;
  }
LABEL_166:
  swift_bridgeObjectRelease();
LABEL_98:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    char v98 = &demangling cache variable for type metadata for Any?;
    uint64_t v99 = &v245;
LABEL_114:
    outlined destroy of Any?((uint64_t)v99, v98);
    goto LABEL_115;
  }
  if (swift_dynamicCast())
  {
    if (v244 == __PAIR128__(0x800000023AAAFFB0, 0xD000000000000016))
    {
      swift_bridgeObjectRelease();
      uint64_t v97 = (long long *)*((void *)&v242 + 1);
LABEL_104:
      specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v245);
      if (v246)
      {
        int v101 = swift_dynamicCast();
        (*(void (**)(long long *, void, uint64_t, uint64_t))(v56 + 56))(v97, v101 ^ 1u, 1, v57);
        if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(v56 + 48))(v97, 1, v57) != 1)
        {
          uint64_t v102 = v57;
          uint64_t v103 = *(void (**)(char *, long long *, uint64_t))(v56 + 32);
          uint64_t v104 = v238;
          v103(v238, v97, v102);
          specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
          if (v246)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
            if (swift_dynamicCast())
            {
              long long v105 = v244;
              swift_retain();
              specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
              if (v246)
              {
                int v106 = swift_dynamicCast();
                uint64_t v107 = *((void *)&v244 + 1);
                if (!v106) {
                  uint64_t v107 = 0;
                }
                uint64_t v241 = v107;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
                uint64_t v241 = 0;
              }
              specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
              uint64_t v227 = v3;
              if (v246)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
                if (swift_dynamicCast())
                {
                  uint64_t v119 = (uint64_t (*)(uint64_t))swift_allocObject();
                  *((_OWORD *)v119 + 1) = v244;
                  v236 = thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
                  id v237 = v119;
LABEL_156:
                  specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
                  long long v242 = v105;
                  if (v246)
                  {
                    int v120 = swift_dynamicCast();
                    int v121 = v244;
                    if (!v120) {
                      int v121 = 2;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
                    int v121 = 2;
                  }
                  LODWORD(v235) = v121;
                  uint64_t v122 = v243;
                  BOOL v123 = v239;
                  uint64_t v124 = v247;
                  (*(void (**)(char *, char *, uint64_t))(v243 + 16))(v239, v104, v247);
                  unint64_t v125 = (*(unsigned __int8 *)(v122 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
                  uint64_t v126 = (uint64_t)v104;
                  unint64_t v127 = (v23 + v125 + 7) & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v128 = swift_allocObject();
                  v103((char *)(v128 + v125), (long long *)v123, v124);
                  uint64_t v129 = (void *)(v128 + v127);
                  *uint64_t v129 = 0;
                  v129[1] = 0;
                  uint64_t v130 = *((void *)&v242 + 1);
                  swift_retain();
                  uint64_t v131 = v236;
                  specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v126, 0, 0, 0, (int)v235, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v128, (uint64_t)v236, (uint64_t)v237, 0, 0, v240, (void (*)(void **))v242, v130);
                  swift_release();
                  swift_release();
                  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v131);
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v126, v124);
                  return;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
              }
              v236 = 0;
              id v237 = 0;
              goto LABEL_156;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v57 = v247;
          (*(void (**)(char *, uint64_t))(v56 + 8))(v104, v247);
          goto LABEL_115;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
        (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v97, 1, 1, v57);
      }
      char v98 = &demangling cache variable for type metadata for URL?;
      uint64_t v99 = v97;
      goto LABEL_114;
    }
    char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v97 = (long long *)*((void *)&v242 + 1);
    if (v100) {
      goto LABEL_104;
    }
  }
LABEL_115:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246) {
    goto LABEL_132;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_133;
  }
  if (v244 == __PAIR128__(0x800000023AAAFF90, 0xD000000000000018))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v108 & 1) == 0) {
      goto LABEL_133;
    }
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
LABEL_132:
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_133;
  }
  if (swift_dynamicCast())
  {
    long long v109 = v244;
    specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v245);
    if (v246)
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
      if (swift_dynamicCast())
      {
        uint64_t v110 = (void *)v244;
        specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
        if (v246)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
          if (swift_dynamicCast())
          {
            uint64_t v227 = v3;
            long long v111 = v244;
            swift_retain_n();
            specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
            *((void *)&v242 + 1) = v111;
            if (v246)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
              if (swift_dynamicCast())
              {
                uint64_t v241 = swift_allocObject();
                *(_OWORD *)(v241 + 16) = v244;
                v238 = (char *)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
LABEL_189:
                uint64_t v169 = (void **)v231;
                specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
                if (v246)
                {
                  int v170 = swift_dynamicCast();
                  int v171 = v244;
                  if (!v170) {
                    int v171 = 2;
                  }
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
                  int v171 = 2;
                }
                LODWORD(v237) = v171;
                static USDImportService.urlForUSD(named:in:)(v109, *((uint64_t *)&v109 + 1), (uint64_t)v110, v169);
                uint64_t v184 = v243;
                uint64_t v185 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v243 + 48);
                *(void *)&long long v242 = v110;
                if (v185(v169, 1, v57) == 1)
                {
                  outlined destroy of Any?((uint64_t)v169, &demangling cache variable for type metadata for URL?);
                  type metadata accessor for USDImportService.LoadError();
                  lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
                  uint64_t v186 = (void *)swift_allocError();
                  *uint64_t v187 = v109;
                  swift_storeEnumTagMultiPayload();
                  *(void *)&long long v245 = v186;
                  BYTE8(v245) = 1;
                  swift_bridgeObjectRetain();
                  (*((void (**)(long long *))&v242 + 1))(&v245);

                  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v238);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v236 = (uint64_t (*)(uint64_t))*((void *)&v111 + 1);
                  uint64_t v188 = v57;
                  v235 = *(char **)(v184 + 32);
                  uint64_t v189 = v230;
                  ((void (*)(uint64_t, void, uint64_t))v235)(v230, v111, v188);
                  v190 = v239;
                  (*(void (**)(char *, uint64_t, uint64_t))(v184 + 16))(v239, v189, v188);
                  unint64_t v191 = (*(unsigned __int8 *)(v184 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80);
                  unint64_t v192 = (v23 + v191 + 7) & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v193 = swift_allocObject();
                  unint64_t v194 = v193 + v191;
                  uint64_t v195 = v247;
                  ((void (*)(unint64_t, char *, uint64_t))v235)(v194, v190, v247);
                  uint64_t v196 = (void *)(v193 + v192);
                  *uint64_t v196 = 0;
                  v196[1] = 0;
                  uint64_t v197 = v236;
                  swift_retain();
                  long long v198 = (void *)v242;
                  uint64_t v199 = (uint64_t)v238;
                  specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v189, v109, *((uint64_t *)&v109 + 1), (void *)v242, (int)v237, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v193, (uint64_t)v238, v241, 0, 0, v240, *((void (**)(void **))&v242 + 1), (uint64_t)v197);
                  swift_release();
                  swift_release();
                  (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v189, v195);
                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v199);
                  swift_bridgeObjectRelease();
                }
                goto LABEL_224;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
            }
            v238 = 0;
            uint64_t v241 = 0;
            goto LABEL_189;
          }

          swift_bridgeObjectRelease();
          uint64_t v56 = v243;
        }
        else
        {

          swift_bridgeObjectRelease();
          outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
          uint64_t v56 = v243;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      goto LABEL_133;
    }
    swift_bridgeObjectRelease();
    goto LABEL_132;
  }
LABEL_133:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246) {
    goto LABEL_195;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_196;
  }
  if (v244 == __PAIR128__(0x800000023AAAFF70, 0xD00000000000001ELL))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v112 & 1) == 0) {
      goto LABEL_196;
    }
  }
  specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
LABEL_195:
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_196;
  }
  if (swift_dynamicCast())
  {
    long long v113 = v244;
    specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
    if (v246)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_233:
        swift_bridgeObjectRelease();
        goto LABEL_196;
      }
      uint64_t v114 = *((void *)&v244 + 1);
      *((void *)&v242 + 1) = v244;
      swift_retain_n();
      specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v245);
      if (v246)
      {
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_232:
          swift_release_n();
          goto LABEL_233;
        }
        uint64_t v241 = v114;
        uint64_t v115 = (char *)v244;
        specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
        if (v246)
        {
          v238 = v115;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
          if (swift_dynamicCast())
          {
            uint64_t v116 = swift_allocObject();
            *(_OWORD *)(v116 + 16) = v244;
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
            uint64_t v227 = v3;
            if (v246)
            {
              int v117 = swift_dynamicCast();
              int v118 = v244;
              if (!v117) {
                int v118 = 2;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
              int v118 = 2;
            }
            LODWORD(v237) = v118;
            uint64_t v210 = v238;
            *(void *)&long long v242 = v116;
            swift_retain();
            id v211 = v228;
            static USDImportService.urlForUSD(named:in:)(v113, *((uint64_t *)&v113 + 1), (uint64_t)v210, v228);
            if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v56 + 48))(v211, 1, v57) == 1)
            {
              outlined destroy of Any?((uint64_t)v211, &demangling cache variable for type metadata for URL?);
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
              float64_t v212 = v210;
              char v213 = (void *)swift_allocError();
              _OWORD *v214 = v113;
              swift_storeEnumTagMultiPayload();
              *(void *)&long long v245 = v213;
              BYTE8(v245) = 1;
              swift_bridgeObjectRetain();
              (*((void (**)(long long *))&v242 + 1))(&v245);

              swift_release_n();
              swift_release_n();
              swift_bridgeObjectRelease();
              return;
            }
            v234 = *(char **)(v56 + 32);
            uint64_t v215 = v229;
            ((void (*)(uint64_t, void **, uint64_t))v234)(v229, v211, v57);
            v233 = *(void ***)(v56 + 16);
            uint64_t v216 = v239;
            ((void (*)(char *, uint64_t, uint64_t))v233)(v239, v215, v57);
            unint64_t v217 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
            v235 = (char *)swift_allocObject();
            v218 = v234;
            ((void (*)(char *, char *, uint64_t))v234)(&v235[v217], v216, v57);
            v219 = v236;
            ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v233)(v236, v229, v57);
            uint64_t v220 = swift_allocObject();
            uint64_t v221 = v247;
            ((void (*)(unint64_t, uint64_t (*)(uint64_t), uint64_t))v218)(v220 + v217, v219, v247);
            uint64_t v222 = v241;
            uint64_t v223 = v242;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v224 = v229;
            specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v229, 0, 0, 0, (int)v237, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), (uint64_t)v235, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply, v223, (uint64_t)partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), v220, v240, *((void (**)(void **))&v242 + 1), v222);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v243 + 8))(v224, v221);
            swift_bridgeObjectRelease();
            swift_release_n();

LABEL_224:
            swift_release_n();
            return;
          }

          goto LABEL_232;
        }
      }
      swift_release_n();
    }
    swift_bridgeObjectRelease();
    goto LABEL_195;
  }
LABEL_196:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    v172 = &demangling cache variable for type metadata for Any?;
    uint64_t v173 = &v245;
LABEL_214:
    outlined destroy of Any?((uint64_t)v173, v172);
    goto LABEL_215;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_215;
  }
  if (v244 == __PAIR128__(0x800000023AAAFF50, 0xD00000000000001BLL))
  {
    swift_bridgeObjectRelease();
    goto LABEL_202;
  }
  char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v174 & 1) == 0)
  {
LABEL_215:
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    v183->_rawValue = with._rawValue;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    return;
  }
LABEL_202:
  specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    uint64_t v175 = (long long *)v242;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v56 + 56))(v242, 1, 1, v57);
    goto LABEL_213;
  }
  uint64_t v175 = (long long *)v242;
  int v176 = swift_dynamicCast();
  (*(void (**)(long long *, void, uint64_t, uint64_t))(v56 + 56))(v175, v176 ^ 1u, 1, v57);
  if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(v56 + 48))(v175, 1, v57) == 1)
  {
LABEL_213:
    v172 = &demangling cache variable for type metadata for URL?;
    uint64_t v173 = v175;
    goto LABEL_214;
  }
  uint64_t v177 = *(void (**)(uint64_t (*)(uint64_t), long long *, uint64_t))(v56 + 32);
  uint64_t v178 = v175;
  uint64_t v179 = v237;
  v177(v237, v178, v57);
  specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_217;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_217:
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v56 + 8))(v179, v247);
    goto LABEL_215;
  }
  uint64_t v180 = *((void *)&v244 + 1);
  *((void *)&v242 + 1) = v244;
  swift_retain();
  specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
  if (!v246)
  {
    swift_release_n();
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    goto LABEL_217;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release_n();
    goto LABEL_217;
  }
  uint64_t v241 = swift_allocObject();
  *(_OWORD *)(v241 + 16) = v244;
  specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v245);
  if (v246)
  {
    int v181 = swift_dynamicCast();
    uint64_t v182 = (char *)*((void *)&v244 + 1);
    if (!v181) {
      uint64_t v182 = 0;
    }
    v234 = v182;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    v234 = 0;
  }
  specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000023AAAFE70, (uint64_t)with._rawValue, &v245);
  uint64_t v227 = v3;
  *(void *)&long long v242 = v180;
  if (v246)
  {
    int v200 = swift_dynamicCast();
    int v201 = v244;
    if (!v200) {
      int v201 = 2;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v245, &demangling cache variable for type metadata for Any?);
    int v201 = 2;
  }
  LODWORD(v233) = v201;
  v235 = *(char **)(v56 + 16);
  uint64_t v202 = v239;
  ((void (*)(char *, uint64_t (*)(uint64_t), uint64_t))v235)(v239, v179, v247);
  uint64_t v203 = (uint64_t)v179;
  unint64_t v204 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v238 = (char *)swift_allocObject();
  uint64_t v205 = v247;
  v177((uint64_t (*)(uint64_t))&v238[v204], (long long *)v202, v247);
  v206 = v236;
  ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v235)(v236, v203, v205);
  uint64_t v207 = swift_allocObject();
  v177((uint64_t (*)(uint64_t))(v207 + v204), (long long *)v206, v205);
  uint64_t v208 = v242;
  swift_retain();
  uint64_t v209 = v241;
  swift_retain();
  specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v203, 0, 0, 0, (int)v233, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), (uint64_t)v238, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error), v209, (uint64_t)partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), v207, v240, *((void (**)(void **))&v242 + 1), v208);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release();
  swift_release();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v243 + 8))(v203, v205);
}

uint64_t specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, void (*a9)(unint64_t))
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  if (a5)
  {
    uint64_t v16 = result;
    swift_beginAccess();
    uint64_t result = RIOImportSessionGetSceneCount();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v17 = result;
      if (result)
      {
        uint64_t v35 = a1;
        uint64_t v18 = a2;
        uint64_t v19 = v16;
        uint64_t v20 = v14;
        uint64_t v21 = a3;
        uint64_t v22 = a4;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        while (1)
        {
          if (RIOImportSessionIsSceneActive())
          {
            if (__OFADD__(v23++, 1)) {
              break;
            }
          }
          if (v17 == ++v24) {
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_10:
        BOOL v26 = v23 < 2;
        a4 = v22;
        a3 = v21;
        uint64_t v14 = v20;
        uint64_t v16 = v19;
        a2 = v18;
        a1 = v35;
        if (!v26) {
          goto LABEL_11;
        }
      }
      if (a6)
      {
        swift_retain();
        uint64_t v27 = a6(a1);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a6);
        *(void *)(v14 + 16) = v27;
      }
      else
      {
        *(void *)(v14 + 16) = *(void *)(a5 + 24);
        swift_retain();
      }
      swift_release();
      uint64_t v29 = *(void *)(v14 + 16);
      if (v29)
      {
        swift_retain();
        unint64_t v30 = specialized USDImportService.generatePostLoadData(from:entity:)(a1, v29);
        swift_release();
        if (*(void *)(v30 + 16))
        {
          if (a9) {
            a9(v30);
          }
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        uint64_t v28 = swift_allocError();
        uint64_t v32 = v31;
        uint64_t v33 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v32, a4, v33);
      }
      else
      {
LABEL_11:
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        uint64_t v28 = swift_allocError();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v34 = *(void **)(v16 + 16);
      *(void *)(v16 + 16) = v28;

LABEL_23:
      specialized $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(a1, v16, a2, a3, v14, a4, (uint64_t)&unk_26EE0FA98, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_16);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, void (*a9)(unint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void))
{
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  if (a5)
  {
    uint64_t v21 = result;
    swift_beginAccess();
    uint64_t result = RIOImportSessionGetSceneCount();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v22 = result;
      if (result)
      {
        uint64_t v40 = a1;
        uint64_t v23 = a2;
        uint64_t v24 = v21;
        uint64_t v25 = v19;
        uint64_t v26 = a3;
        uint64_t v27 = a4;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        while (1)
        {
          if (RIOImportSessionIsSceneActive())
          {
            if (__OFADD__(v28++, 1)) {
              break;
            }
          }
          if (v22 == ++v29) {
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_10:
        BOOL v31 = v28 < 2;
        a4 = v27;
        a3 = v26;
        uint64_t v19 = v25;
        uint64_t v21 = v24;
        a2 = v23;
        a1 = v40;
        if (!v31) {
          goto LABEL_21;
        }
      }
      if (a6)
      {
        swift_retain();
        uint64_t v32 = a6(a1);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a6);
        *(void *)(v19 + 16) = v32;
      }
      else
      {
        *(void *)(v19 + 16) = *(void *)(a5 + 24);
        swift_retain();
      }
      swift_release();
      uint64_t v33 = *(void *)(v19 + 16);
      if (v33 && (a14(0), swift_dynamicCastClass()))
      {
        swift_retain();
        unint64_t v34 = specialized USDImportService.generatePostLoadData(from:entity:)(a1, v33);
        swift_release();
        if (*(void *)(v34 + 16))
        {
          if (a9) {
            a9(v34);
          }
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        uint64_t v35 = swift_allocError();
        uint64_t v38 = v37;
        uint64_t v39 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v38, a4, v39);
      }
      else
      {
LABEL_21:
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        uint64_t v35 = swift_allocError();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = *(void **)(v21 + 16);
      *(void *)(v21 + 16) = v35;

LABEL_23:
      specialized $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(a1, v21, a2, a3, v19, a4, a11, a12, a13);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v33 = a5;
  uint64_t v34 = a8;
  v31[0] = a6;
  v31[1] = a7;
  uint64_t v32 = a3;
  uint64_t v35 = a9;
  uint64_t v37 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v36 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v13 - 8);
  uint64_t v39 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  uint64_t v21 = *v20;
  uint64_t *v20 = 0;
  v20[1] = 0;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
  ImportSession.sceneUpdatePassCompletion.didset();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  uint64_t v22 = (void *)__Engine.queue.getter();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v17 + 16))(v19, v31[0], v16);
  unint64_t v23 = (*(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v24 = (char *)swift_allocObject();
  uint64_t v25 = v32;
  uint64_t v26 = v33;
  *((void *)v24 + 2) = a2;
  *((void *)v24 + 3) = v25;
  *((void *)v24 + 4) = a4;
  *((void *)v24 + 5) = v26;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v24[v23], v19, v16);
  aBlock[4] = v34;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = v35;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v41 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v29 = v36;
  uint64_t v28 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x23ECBA360](0, v15, v29, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v39);
  return swift_release();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 24);
  return swift_retain();
}

void *specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v18 - v12, a1, v6, v11);
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  uint64_t v15 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)((uint64_t)v9, 0, 0, 0, a2, 1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  if (a3 && v15)
  {
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)a3);
    uint64_t v16 = swift_retain();
    a3(v16);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a3);
  }
  return v15;
}

void *specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  double v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v16 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  uint64_t v13 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)((uint64_t)v7, 0, 0, 0, 1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  if (a2 && v13)
  {
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    uint64_t v14 = swift_retain();
    a2(v14);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
  }
  return v13;
}

uint64_t USDImportService.load(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v29 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (void **)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v30 = a1;
  static USDImportService.urlForUSD(named:in:)(a1, a2, (uint64_t)a3, v9);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for ModelEntity();
    swift_allocObject();
    return ModelEntity.init()();
  }
  else
  {
    uint64_t v28 = a2;
    uint64_t v27 = *(void (**)(char *, void **, uint64_t))(v11 + 32);
    v27(v16, v9, v10);
    uint64_t v26 = type metadata accessor for Entity();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v19 = (v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = a3;
    unint64_t v17 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = swift_allocObject();
    v27((char *)(v20 + v18), (void **)v13, v10);
    *(void *)(v20 + v19) = v26;
    uint64_t v21 = (void *)(v20 + v17);
    *uint64_t v21 = 0;
    v21[1] = 0;
    uint64_t v22 = v31;
    uint64_t v23 = specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)((uint64_t)v16, partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v20, 0, 0, v30, v28, v25, v29);
    uint64_t v31 = v22;
    if (!v22) {
      unint64_t v17 = v23;
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  return v17;
}

uint64_t USDImportService.loadModel(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v35 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (void **)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v34 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v29 - v14;
  MEMORY[0x270FA5388](v16);
  unint64_t v18 = (char *)v29 - v17;
  uint64_t v33 = a1;
  uint64_t v36 = a3;
  static USDImportService.urlForUSD(named:in:)(a1, a2, (uint64_t)a3, v9);
  uint64_t v37 = v11;
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for ModelEntity();
    swift_allocObject();
    return ModelEntity.init()();
  }
  else
  {
    uint64_t v20 = v37;
    uint64_t v19 = v37 + 32;
    uint64_t v31 = *(void (**)(char *, void **, uint64_t))(v37 + 32);
    v31(v18, v9, v10);
    uint64_t v32 = a2;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v30(v15, v18, v10);
    unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v29[1] = v21 + v12;
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = (void (*)(unint64_t, char *, uint64_t))v31;
    v31((char *)(v22 + v21), (void **)v15, v10);
    uint64_t v24 = v34;
    v30(v34, v18, v10);
    uint64_t v25 = swift_allocObject();
    v23(v25 + v21, v24, v10);
    uint64_t v26 = v38;
    uint64_t v27 = specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)((uint64_t)v18, partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v22, (uint64_t)partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v25, v33, v32, v36, v35);
    uint64_t v38 = v26;
    if (!v26) {
      uint64_t v19 = v27;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v10);
    swift_release();
    swift_release();
  }
  return v19;
}

uint64_t USDImportService.loadAnchor(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v33 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (void **)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v34 = a1;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  static USDImportService.urlForUSD(named:in:)(v17, a2, (uint64_t)a3, v9);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for AnchorEntity();
    swift_allocObject();
    return MEMORY[0x23ECB89C0]();
  }
  else
  {
    uint64_t v30 = a3;
    uint64_t v19 = v11 + 32;
    uint64_t v20 = *(void (**)(char *, void **, uint64_t))(v11 + 32);
    v20(v16, v9, v10);
    URL.deletingPathExtension()();
    URL.lastPathComponent.getter();
    uint64_t v32 = v21;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
    v31(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v29 = v18;
    unint64_t v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = swift_allocObject();
    v20((char *)(v24 + v22), (void **)v13, v10);
    uint64_t v25 = (void *)(v24 + v23);
    *uint64_t v25 = 0;
    v25[1] = 0;
    uint64_t v26 = v35;
    uint64_t v27 = specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)((uint64_t)v16, partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v24, 0, 0, v34, v29, v30, v33);
    uint64_t v35 = v26;
    if (!v26) {
      uint64_t v19 = v27;
    }
    swift_release();
    v31(v16, v10);
    swift_bridgeObjectRelease();
  }
  return v19;
}

uint64_t USDImportService.loadBodyTracked(named:in:generateDecimatedMesh:)(uint64_t Error, uint64_t a2, uint64_t a3, int a4)
{
  int v41 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (void **)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v38 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  static USDImportService.urlForUSD(named:in:)(Error, a2, a3, v9);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    uint64_t *v20 = Error;
    v20[1] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    return Error;
  }
  (*(void (**)(char *, void **, uint64_t))(v11 + 32))(v19, v9, v10);
  uint64_t v21 = a2;
  unint64_t v22 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v22(v16, v19, v10);
  uint64_t v39 = v13;
  v22(v13, v19, v10);
  uint64_t v38 = v21;
  swift_bridgeObjectRetain();
  uint64_t v24 = specialized static USDImportService.loadModel_createImportSession(contentsOf:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:), v23);
  if (!v24)
  {
    uint64_t Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    v22(v26, v19, v10);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_24;
  }
  uint64_t Error = v24;
  if (v41)
  {
    if (String.count.getter() < 1) {
      id v25 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v25 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v27 = v25;
    uint64_t v28 = (void *)RIOPxrUsdStageCopyRootLayer();
    uint64_t v29 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();
  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  uint64_t result = RIOImportSessionGetSceneCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v31 = result;
    if (!result) {
      goto LABEL_19;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    while (1)
    {
      if (RIOImportSessionIsSceneActive())
      {
        if (__OFADD__(v32++, 1)) {
          break;
        }
      }
      if (v31 == ++v33) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_18:
    if (v32 >= 2)
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
LABEL_19:
      uint64_t v35 = v40;
      specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:)((uint64_t)v39);
      if (!v35)
      {
        type metadata accessor for BodyTrackedEntity();
        if (swift_dynamicCastClass())
        {
          swift_release();
          uint64_t Error = swift_dynamicCastClassUnconditional();
          uint64_t v36 = *(void (**)(char *, uint64_t))(v11 + 8);
          v36(v16, v10);
          v36(v39, v10);
          v36(v19, v10);
          swift_bridgeObjectRelease();
          return Error;
        }
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
      }
    }
    swift_release();
LABEL_24:
    uint64_t v37 = *(void (**)(char *, uint64_t))(v11 + 8);
    v37(v16, v10);
    v37(v39, v10);
    v37(v19, v10);
    swift_bridgeObjectRelease();
    return Error;
  }
  __break(1u);
  return result;
}

uint64_t USDImportService.deinit()
{
  return v0;
}

uint64_t USDImportService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for USDImportService.init() in conformance USDImportService(uint64_t *a1@<X8>)
{
  type metadata accessor for USDImportService();
  uint64_t v2 = swift_allocObject();
  static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v3 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  *a1 = v2;
}

BOOL protocol witness for USDImportService.canLoad(named:in:) in conformance USDImportService(uint64_t a1, uint64_t a2, NSBundle a3)
{
  return USDImportService.canLoad(named:in:)(*(Swift::String *)&a1, a3);
}

uint64_t protocol witness for USDImportService.load(with:) in conformance USDImportService(uint64_t a1)
{
  return USDImportService.load(with:)(a1);
}

void protocol witness for USDImportService.loadAsync(with:) in conformance USDImportService(Swift::OpaquePointer a1)
{
}

void specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  double v9 = *(void **)(a1 + 16);
  if (v9)
  {
    id v10 = v9;
LABEL_3:
    a2(v9, 1);

    return;
  }
  swift_beginAccess();
  if (!*(void *)(a4 + 16))
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    double v9 = (void *)swift_allocError();
    uint64_t v13 = v12;
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a5, v14);
    swift_storeEnumTagMultiPayload();
    goto LABEL_3;
  }
  uint64_t v11 = swift_retain();
  a2((void *)v11, 0);
  swift_release();
}

void specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  swift_beginAccess();
  uint64_t v11 = *(void **)(a1 + 16);
  if (v11)
  {
    id v12 = v11;
    a2(v11, 1);
    uint64_t v13 = v11;
  }
  else
  {
    swift_beginAccess();
    if (*(void *)(a4 + 16))
    {
      a6(0);
      uint64_t v14 = swift_dynamicCastClass();
      if (v14)
      {
        uint64_t v15 = v14;
        swift_retain();
        a2((void *)v15, 0);
        swift_release();
        return;
      }
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
      uint64_t v20 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      a2((void *)v20, 1);
      uint64_t v13 = (void *)v20;
    }
    else
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
      uint64_t v16 = swift_allocError();
      uint64_t v18 = v17;
      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v18, a5, v19);
      swift_storeEnumTagMultiPayload();
      a2((void *)v16, 1);
      uint64_t v13 = (void *)v16;
    }
  }
}

uint64_t specialized static USDImportService.canLoad(url:)()
{
  if ((URL.isFileURL.getter() & 1) == 0) {
    return 0;
  }
  if (one-time initialization token for supportedFilePathExtensions != -1) {
    swift_once();
  }
  uint64_t v0 = static USDImportService.supportedFilePathExtensions;
  uint64_t v1 = *(void *)(static USDImportService.supportedFilePathExtensions + 16);
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v2 = (uint64_t *)(v0 + 40);
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v5 = *v2;
      if (*v2)
      {
        uint64_t v6 = *(v2 - 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v3);
        }
        v3[2] = v8 + 1;
        uint64_t v4 = &v3[2 * v8];
        v4[4] = v6;
        void v4[5] = v5;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  }
  URL.pathExtension.getter();
  Swift::String v10 = String.lowercased()();
  swift_bridgeObjectRelease();
  char v11 = specialized Sequence<>.contains(_:)(v10._countAndFlagsBits, (uint64_t)v10._object, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t type metadata accessor for USDImportService.LoadError()
{
  uint64_t result = type metadata singleton initialization cache for USDImportService.LoadError;
  if (!type metadata singleton initialization cache for USDImportService.LoadError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void *specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  getEngine(_:)(a2);
  if (specialized static USDImportService.canLoad(url:)())
  {
    URL._bridgeToObjectiveC()(v9);
    char v11 = v10;
    if (a6) {
      uint64_t SingleUseImporterWithURL = RIOImportSessionCreateSingleUseImporterWithURL();
    }
    else {
      uint64_t SingleUseImporterWithURL = RIOImportSessionCreateWithURL();
    }
    uint64_t v15 = (void *)SingleUseImporterWithURL;

    type metadata accessor for ImportSession(0);
    swift_allocObject();
    uint64_t v14 = specialized ImportSession.init<A>(core:entityType:)(v15, a5);
    swift_release();
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
    swift_retain();
    v17(a1, v16);
    if (v14) {
      swift_release();
    }
  }
  else
  {
    swift_release();
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
    return 0;
  }
  return v14;
}

uint64_t specialized static USDImportService.loadModel_selectEntity(contentsOf:importSession:)(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v1 = type metadata accessor for Entity.ChildCollection();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v17 - v6;
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, MEMORY[0x263F16548]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v8 = dispatch thunk of Collection.distance(from:to:)();
  double v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v7, v1);
  if (v8 < 1)
  {
    uint64_t Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    uint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, v17, v15);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return Error;
  }
  HasHierarchy.children.getter();
  uint64_t v10 = specialized Collection.first.getter();
  v9(v4, v1);
  if (!v10)
  {
LABEL_7:
    uint64_t Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    goto LABEL_8;
  }
  type metadata accessor for ModelEntity();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t Error = v11;
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  HasHierarchy.setParent(_:preservingWorldTransform:)();
  return Error;
}

uint64_t specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9)
{
  void (*v40)(uint64_t *__return_ptr, uint64_t *);
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;

  uint64_t v10 = v9;
  uint64_t v15 = a2();
  if (v15)
  {
    uint64_t v16 = v15;
    char v17 = a9;
    if (a8 && a7)
    {
      id v18 = a8;
      id v19 = objc_msgSend(v18, sel_bundleIdentifier);
      if (v19)
      {
        uint64_t v20 = v19;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        int v41 = v21;
      }
      else
      {
        int v41 = 0xE000000000000000;
      }
      id v26 = objc_msgSend(v18, sel_bundlePath, v41);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = (void **)(v16 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      uint64_t v28 = *v27;
      String.utf8CString.getter();
      String.utf8CString.getter();
      String.utf8CString.getter();
      id v29 = v28;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      uint64_t v10 = v9;
      char v17 = a9;
    }
    if (v17)
    {
      uint64_t v30 = a5;
      if (String.count.getter() < 1) {
        id v31 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v31 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v32 = v31;
      uint64_t v33 = (void *)RIOPxrUsdStageCopyRootLayer();
      uint64_t v34 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();

      a5 = v30;
    }
    swift_beginAccess();
    RIOImportSessionUpdateSynchronouslyOnEngineQueue();
    uint64_t result = RIOImportSessionGetSceneCount();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v35 = result;
      if (!result) {
        goto LABEL_23;
      }
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v36++, 1)) {
            break;
          }
        }
        if (v35 == ++v37) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_22:
      if (v36 >= 2)
      {
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return swift_release();
      }
      else
      {
LABEL_23:
        if (a4)
        {
          uint64_t v39 = swift_allocObject();
          *(void *)(v39 + 16) = a4;
          *(void *)(v39 + 24) = a5;
          uint64_t v40 = (void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error);
        }
        else
        {
          uint64_t v40 = (void (*)(uint64_t *__return_ptr, uint64_t *))specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity);
        }
        char v44 = v16;
        outlined copy of (@escaping @callee_guaranteed () -> ())?(a4);
        v40(&v43, &v44);
        swift_release();
        uint64_t result = swift_release();
        if (!v10) {
          return v43;
        }
      }
    }
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    uint64_t v23 = v22;
    uint64_t v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, a1, v24);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  id v26;
  void **v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void (*v40)(uint64_t *__return_ptr, uint64_t *);
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;

  uint64_t v10 = v9;
  uint64_t v15 = a2();
  if (!v15)
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    uint64_t v23 = v22;
    uint64_t v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, a1, v24);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  uint64_t v16 = v15;
  char v17 = a9;
  if (a8 && a7)
  {
    id v18 = a8;
    id v19 = objc_msgSend(v18, sel_bundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v41 = v21;
    }
    else
    {
      int v41 = 0xE000000000000000;
    }
    id v26 = objc_msgSend(v18, sel_bundlePath, v41);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = (void **)(v16 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    uint64_t v28 = *v27;
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    id v29 = v28;
    RIOImportSessionSetBundleInfo();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_release();
    uint64_t v10 = v9;
    char v17 = a9;
  }
  if (v17)
  {
    uint64_t v30 = a5;
    if (String.count.getter() < 1) {
      id v31 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v31 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v32 = v31;
    uint64_t v33 = (void *)RIOPxrUsdStageCopyRootLayer();
    uint64_t v34 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();

    a5 = v30;
  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  uint64_t result = RIOImportSessionGetSceneCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v35 = result;
    if (result)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v36++, 1)) {
            break;
          }
        }
        if (v35 == ++v37) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_22:
      if (v36 >= 2)
      {
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return swift_release();
      }
    }
    if (a4)
    {
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = a4;
      *(void *)(v39 + 24) = a5;
      uint64_t v40 = (void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error);
    }
    else
    {
      uint64_t v40 = (void (*)(uint64_t *__return_ptr, uint64_t *))specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity);
    }
    char v44 = v16;
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a4);
    v40(&v43, &v44);
    if (v10)
    {
      swift_release();
      return swift_release();
    }
    swift_release();
    type metadata accessor for ModelEntity();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      return swift_release();
    }
    swift_release();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  id v26;
  void **v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void (*v40)(uint64_t *__return_ptr, uint64_t *);
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;

  uint64_t v10 = v9;
  uint64_t v15 = a2();
  if (!v15)
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    uint64_t v23 = v22;
    uint64_t v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, a1, v24);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  uint64_t v16 = v15;
  char v17 = a9;
  if (a8 && a7)
  {
    id v18 = a8;
    id v19 = objc_msgSend(v18, sel_bundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v41 = v21;
    }
    else
    {
      int v41 = 0xE000000000000000;
    }
    id v26 = objc_msgSend(v18, sel_bundlePath, v41);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = (void **)(v16 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    uint64_t v28 = *v27;
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    id v29 = v28;
    RIOImportSessionSetBundleInfo();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_release();
    uint64_t v10 = v9;
    char v17 = a9;
  }
  if (v17)
  {
    uint64_t v30 = a5;
    if (String.count.getter() < 1) {
      id v31 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v31 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v32 = v31;
    uint64_t v33 = (void *)RIOPxrUsdStageCopyRootLayer();
    uint64_t v34 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();

    a5 = v30;
  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  uint64_t result = RIOImportSessionGetSceneCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v35 = result;
    if (result)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v36++, 1)) {
            break;
          }
        }
        if (v35 == ++v37) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_22:
      if (v36 >= 2)
      {
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return swift_release();
      }
    }
    if (a4)
    {
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = a4;
      *(void *)(v39 + 24) = a5;
      uint64_t v40 = (void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error);
    }
    else
    {
      uint64_t v40 = (void (*)(uint64_t *__return_ptr, uint64_t *))specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity);
    }
    char v44 = v16;
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a4);
    v40(&v43, &v44);
    if (v10)
    {
      swift_release();
      return swift_release();
    }
    swift_release();
    type metadata accessor for AnchorEntity();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      return swift_release();
    }
    swift_release();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

uint64_t specialized static USDImportService.loadModel_createImportSession(contentsOf:)@<X0>(uint64_t (*a1)(uint64_t)@<X1>, NSURL *a2@<X8>)
{
  URL._bridgeToObjectiveC()(a2);
  uint64_t v4 = v3;
  uint64_t v5 = (void *)RIOPxrUsdStageCreateWithFileURL();

  if (!v5) {
    return 0;
  }
  TopLevelEntityFromStage = (void *)RIOPxrUsdUtilsCreateTopLevelEntityFromStage();
  type metadata accessor for Stage();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = TopLevelEntityFromStage;
  id v8 = TopLevelEntityFromStage;
  uint64_t v9 = specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(inited, 0, 0, 0, 1, a1);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = (id *)(v9 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    swift_retain();
    RIOImportSessionSetIsLoadModelUseCase();
    id v12 = *v11;
    URL._bridgeToObjectiveC()(v13);
    uint64_t v15 = v14;
    RIOImportSessionSetOriginalUrl();
    swift_release();

    uint64_t v5 = v12;
    id v8 = v15;
  }

  return v10;
}

uint64_t specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:)(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v1 = type metadata accessor for BodyTrackingComponent();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = type metadata accessor for __EntityRef();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Entity.ChildCollection();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, MEMORY[0x263F16548]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v9 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v9 < 1)
  {
    uint64_t Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    uint64_t v13 = v12;
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, v17, v14);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return Error;
  }
  Entity.coreEntity.getter();
  uint64_t Child = REEntityGetChild();
  if (!Child)
  {
    uint64_t Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    swift_allocError();
    goto LABEL_8;
  }
  v18[3] = MEMORY[0x263F8DD08];
  v18[0] = Child;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  type metadata accessor for BodyTrackedEntity();
  swift_allocObject();
  uint64_t Error = MEMORY[0x23ECB8BB0](v4);
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  REBodyTrackingComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    BodyTrackingComponent.init()();
    HasBodyTracking.bodyTracking.setter();
  }
  HasHierarchy.setParent(_:preservingWorldTransform:)();
  return Error;
}

uint64_t sub_23AA5A474()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)()
{
  return partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:));
}

uint64_t partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(uint64_t a1)
{
  return partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(a1, (uint64_t (*)(unint64_t, uint64_t))specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:));
}

uint64_t specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void **), uint64_t a14)
{
  uint64_t v65 = a8;
  uint64_t v66 = a3;
  uint64_t v59 = a2;
  uint64_t v68 = a1;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](v17);
  uint64_t v69 = (uint64_t)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a13;
  *(void *)(v20 + 24) = a14;
  uint64_t v21 = swift_retain();
  uint64_t v22 = a6(v21);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v58 = v18;
    uint64_t v57 = v17;
    int v64 = a5;
    uint64_t v67 = v20;
    uint64_t v62 = a11;
    uint64_t v63 = a9;
    uint64_t v60 = a12;
    uint64_t v61 = a10;
    if (a4 && v66)
    {
      swift_retain();
      id v24 = a4;
      id v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        id v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      id v34 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      uint64_t v36 = *v35;
      uint64_t v56 = String.utf8CString.getter();
      v55[1] = v56 + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      uint64_t v37 = v24;
      uint64_t v30 = v23;
      id v38 = v36;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
    }
    else
    {
      swift_retain();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
      uint64_t v30 = v23;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v69, v29, v27);
    unint64_t v39 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    unint64_t v40 = (v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v43 = (char *)swift_allocObject();
    *((void *)v43 + 2) = v30;
    *((void *)v43 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((void *)v43 + 4) = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(&v43[v39], v69, v27);
    *(void *)&v43[v40] = v30;
    char v44 = (uint64_t *)&v43[v41];
    uint64_t v46 = v61;
    uint64_t v45 = v62;
    *char v44 = v61;
    v44[1] = v45;
    *(void *)&v43[v42] = v60;
    uint64_t v47 = (uint64_t *)&v43[(v42 + 15) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v48 = v65;
    uint64_t v49 = v63;
    *uint64_t v47 = v65;
    v47[1] = v49;
    uint64_t v50 = (uint64_t *)(v30 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    uint64_t v69 = *v50;
    *uint64_t v50 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v50[1] = (uint64_t)v43;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v48);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v69);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if (v64)
    {
      if (String.count.getter() < 1) {
        id v51 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v51 = (id)RIOPxrTfTokenCreateWithCString();
      }
      char v52 = v51;
      long long v53 = (void *)RIOPxrUsdStageCopyRootLayer();
      uint64_t v54 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();
    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    id v31 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v32, v68, v17);
    swift_storeEnumTagMultiPayload();
    uint64_t v70 = v31;
    char v71 = 1;
    a13(&v70);

    return swift_release();
  }
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v34;
  void **v35;
  void *v36;
  void *v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;

  uint64_t v65 = a8;
  uint64_t v66 = a3;
  uint64_t v59 = a2;
  uint64_t v68 = a1;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](v17);
  uint64_t v69 = (uint64_t)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a13;
  *(void *)(v20 + 24) = a14;
  uint64_t v21 = swift_retain();
  uint64_t v22 = a6(v21);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v58 = v18;
    uint64_t v57 = v17;
    int v64 = a5;
    uint64_t v67 = v20;
    uint64_t v62 = a11;
    uint64_t v63 = a9;
    uint64_t v60 = a12;
    uint64_t v61 = a10;
    if (a4 && v66)
    {
      swift_retain();
      id v24 = a4;
      id v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        id v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      id v34 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      uint64_t v36 = *v35;
      uint64_t v56 = String.utf8CString.getter();
      v55[1] = v56 + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      uint64_t v37 = v24;
      uint64_t v30 = v23;
      id v38 = v36;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
    }
    else
    {
      swift_retain();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
      uint64_t v30 = v23;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v69, v29, v27);
    unint64_t v39 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    unint64_t v40 = (v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v43 = (char *)swift_allocObject();
    *((void *)v43 + 2) = v30;
    *((void *)v43 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((void *)v43 + 4) = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(&v43[v39], v69, v27);
    *(void *)&v43[v40] = v30;
    char v44 = (uint64_t *)&v43[v41];
    uint64_t v46 = v61;
    uint64_t v45 = v62;
    *char v44 = v61;
    v44[1] = v45;
    *(void *)&v43[v42] = v60;
    uint64_t v47 = (uint64_t *)&v43[(v42 + 15) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v48 = v65;
    uint64_t v49 = v63;
    *uint64_t v47 = v65;
    v47[1] = v49;
    uint64_t v50 = (uint64_t *)(v30 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    uint64_t v69 = *v50;
    *uint64_t v50 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v50[1] = (uint64_t)v43;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v48);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v69);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if (v64)
    {
      if (String.count.getter() < 1) {
        id v51 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v51 = (id)RIOPxrTfTokenCreateWithCString();
      }
      char v52 = v51;
      long long v53 = (void *)RIOPxrUsdStageCopyRootLayer();
      uint64_t v54 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();
    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    id v31 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v32, v68, v17);
    swift_storeEnumTagMultiPayload();
    uint64_t v70 = v31;
    char v71 = 1;
    a13(&v70);

    return swift_release();
  }
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v34;
  void **v35;
  void *v36;
  void *v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;

  uint64_t v65 = a8;
  uint64_t v66 = a3;
  uint64_t v59 = a2;
  uint64_t v68 = a1;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](v17);
  uint64_t v69 = (uint64_t)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a13;
  *(void *)(v20 + 24) = a14;
  uint64_t v21 = swift_retain();
  uint64_t v22 = a6(v21);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v58 = v18;
    uint64_t v57 = v17;
    int v64 = a5;
    uint64_t v67 = v20;
    uint64_t v62 = a11;
    uint64_t v63 = a9;
    uint64_t v60 = a12;
    uint64_t v61 = a10;
    if (a4 && v66)
    {
      swift_retain();
      id v24 = a4;
      id v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        id v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      id v34 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      uint64_t v36 = *v35;
      uint64_t v56 = String.utf8CString.getter();
      v55[1] = v56 + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      uint64_t v37 = v24;
      uint64_t v30 = v23;
      id v38 = v36;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
    }
    else
    {
      swift_retain();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
      uint64_t v30 = v23;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v69, v29, v27);
    unint64_t v39 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    unint64_t v40 = (v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v43 = (char *)swift_allocObject();
    *((void *)v43 + 2) = v30;
    *((void *)v43 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((void *)v43 + 4) = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(&v43[v39], v69, v27);
    *(void *)&v43[v40] = v30;
    char v44 = (uint64_t *)&v43[v41];
    uint64_t v46 = v61;
    uint64_t v45 = v62;
    *char v44 = v61;
    v44[1] = v45;
    *(void *)&v43[v42] = v60;
    uint64_t v47 = (uint64_t *)&v43[(v42 + 15) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v48 = v65;
    uint64_t v49 = v63;
    *uint64_t v47 = v65;
    v47[1] = v49;
    uint64_t v50 = (uint64_t *)(v30 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    uint64_t v69 = *v50;
    *uint64_t v50 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v50[1] = (uint64_t)v43;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v48);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v69);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if (v64)
    {
      if (String.count.getter() < 1) {
        id v51 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v51 = (id)RIOPxrTfTokenCreateWithCString();
      }
      char v52 = v51;
      long long v53 = (void *)RIOPxrUsdStageCopyRootLayer();
      uint64_t v54 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();
    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    id v31 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v32, v68, v17);
    swift_storeEnumTagMultiPayload();
    uint64_t v70 = v31;
    char v71 = 1;
    a13(&v70);

    return swift_release();
  }
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v34;
  void **v35;
  void *v36;
  void *v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;

  uint64_t v65 = a8;
  uint64_t v66 = a3;
  uint64_t v59 = a2;
  uint64_t v68 = a1;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](v17);
  uint64_t v69 = (uint64_t)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a13;
  *(void *)(v20 + 24) = a14;
  uint64_t v21 = swift_retain();
  uint64_t v22 = a6(v21);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v58 = v18;
    uint64_t v57 = v17;
    int v64 = a5;
    uint64_t v67 = v20;
    uint64_t v62 = a11;
    uint64_t v63 = a9;
    uint64_t v60 = a12;
    uint64_t v61 = a10;
    if (a4 && v66)
    {
      swift_retain();
      id v24 = a4;
      id v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        id v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      id v34 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      uint64_t v36 = *v35;
      uint64_t v56 = String.utf8CString.getter();
      v55[1] = v56 + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      uint64_t v37 = v24;
      uint64_t v30 = v23;
      id v38 = v36;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
    }
    else
    {
      swift_retain();
      uint64_t v27 = v57;
      uint64_t v28 = v58;
      uint64_t v29 = v68;
      uint64_t v30 = v23;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v69, v29, v27);
    unint64_t v39 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    unint64_t v40 = (v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v43 = (char *)swift_allocObject();
    *((void *)v43 + 2) = v30;
    *((void *)v43 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((void *)v43 + 4) = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(&v43[v39], v69, v27);
    *(void *)&v43[v40] = v30;
    char v44 = (uint64_t *)&v43[v41];
    uint64_t v46 = v61;
    uint64_t v45 = v62;
    *char v44 = v61;
    v44[1] = v45;
    *(void *)&v43[v42] = v60;
    uint64_t v47 = (uint64_t *)&v43[(v42 + 15) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v48 = v65;
    uint64_t v49 = v63;
    *uint64_t v47 = v65;
    v47[1] = v49;
    uint64_t v50 = (uint64_t *)(v30 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    uint64_t v69 = *v50;
    *uint64_t v50 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v50[1] = (uint64_t)v43;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v48);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v69);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if (v64)
    {
      if (String.count.getter() < 1) {
        id v51 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v51 = (id)RIOPxrTfTokenCreateWithCString();
      }
      char v52 = v51;
      long long v53 = (void *)RIOPxrUsdStageCopyRootLayer();
      uint64_t v54 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();
    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
    id v31 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v32, v68, v17);
    swift_storeEnumTagMultiPayload();
    uint64_t v70 = v31;
    char v71 = 1;
    a13(&v70);

    return swift_release();
  }
}

void *partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(v0 + v2, *(void (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(v0 + v2, *(void *)(v0 + v3), *(void (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t type metadata accessor for USDImportService()
{
  return self;
}

uint64_t partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:)()
{
  return partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:));
}

uint64_t partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:)(uint64_t a1)
{
  return partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(a1, (uint64_t (*)(unint64_t, uint64_t))specialized static USDImportService.loadModel_selectEntity(contentsOf:importSession:));
}

uint64_t method lookup function for USDImportService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for USDImportService);
}

uint64_t dispatch thunk of USDImportService.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of USDImportService.canLoad(named:in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of USDImportService.canLoad(contentsOf:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of USDImportService.load(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of USDImportService.loadAsync(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t *initializeBufferWithCopyOfBuffer for USDImportService.LoadError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for USDImportService.LoadError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(a1, v3);
}

void *initializeWithCopy for USDImportService.LoadError(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for USDImportService.LoadError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of USDImportService.LoadError((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of USDImportService.LoadError(uint64_t a1)
{
  uint64_t Error = type metadata accessor for USDImportService.LoadError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Error - 8) + 8))(a1, Error);
  return a1;
}

void *initializeWithTake for USDImportService.LoadError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for USDImportService.LoadError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of USDImportService.LoadError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for USDImportService.LoadError()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Error in USDImportService.LoadError()
{
  return lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (void (*)(uint64_t))type metadata accessor for USDImportService.LoadError);
}

uint64_t outlined init with copy of USDImportService.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t Error = type metadata accessor for USDImportService.LoadError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Error - 8) + 16))(a2, a1, Error);
  return a2;
}

uint64_t partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v0[2], v0[3], v0[4], (uint64_t)v0 + v2, *(uint64_t *)((char *)v0 + v3), *(uint64_t (**)(uint64_t))((char *)v0 + v4), *(uint64_t *)((char *)v0 + v4 + 8), *(uint64_t *)((char *)v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(unint64_t))((char *)v0+ ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

{
  return partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)&unk_26EE0FB38, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_117, MEMORY[0x263F16138]);
}

{
  return partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)&unk_26EE0FBD8, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_131, MEMORY[0x263F16158]);
}

{
  return partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)&unk_26EE0FC78, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_145, MEMORY[0x263F161F0]);
}

uint64_t sub_23AA5CB54()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_23AA5CB8C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t specialized USDImportService.generatePostLoadData(from:entity:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x23ECBB260](ServiceLocator))
  {
    unint64_t v37 = v4;
    uint64_t v6 = (id *)(a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    id v7 = *v6;
    uint64_t SceneCount = RIOImportSessionGetSceneCount();
    uint64_t v36 = a2;
    if (SceneCount < 1)
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v9 = SceneCount;
      uint64_t v10 = 0;
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v12 = (void *)RIOImportSessionCopySceneAssetName();
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        uint64_t v16 = HIBYTE(v15) & 0xF;
        if ((v15 & 0x2000000000000000) == 0) {
          uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
        }
        if (v16
          && (String.utf8CString.getter(), uint64_t AssetHandle = REAssetManagerCreateAssetHandle(), swift_release(), AssetHandle))
        {
          uint64_t v18 = (void *)RIOImportSessionCopySceneName();
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          LOBYTE(v18) = RIOImportSessionIsSceneActive();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_23AAB2690;
          *(void *)(inited + 32) = 1701869940;
          *(void *)(inited + 40) = 0xE400000000000000;
          *(void *)(inited + 48) = 0xD000000000000010;
          *(void *)(inited + 56) = 0x800000023AAB01A0;
          uint64_t v23 = MEMORY[0x263F8D310];
          *(void *)(inited + 72) = MEMORY[0x263F8D310];
          *(void *)(inited + 80) = 0x6D614E656E656373;
          *(void *)(inited + 88) = 0xE900000000000065;
          *(void *)(inited + 96) = v19;
          *(void *)(inited + 104) = v21;
          *(void *)(inited + 120) = v23;
          strcpy((char *)(inited + 128), "sceneAssetName");
          *(unsigned char *)(inited + 143) = -18;
          *(void *)(inited + 144) = v13;
          *(void *)(inited + 152) = v15;
          *(void *)(inited + 168) = v23;
          *(void *)(inited + 176) = 0x657669746361;
          *(void *)(inited + 184) = 0xE600000000000000;
          *(void *)(inited + 216) = MEMORY[0x263F8D4F8];
          *(unsigned char *)(inited + 192) = (_BYTE)v18;
          unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          }
          unint64_t v26 = v11[2];
          unint64_t v25 = v11[3];
          if (v26 >= v25 >> 1) {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v11);
          }
          void v11[2] = v26 + 1;
          v11[v26 + 4] = v24;
          RERelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        ++v10;
      }
      while (v9 != v10);
    }
    uint64_t v40 = MEMORY[0x263F8D310];
    strcpy((char *)&v39, "PostLoadData");
    BYTE13(v39) = 0;
    HIWORD(v39) = -5120;
    outlined init with take of Any(&v39, v38);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, 1701869940, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t v40 = type metadata accessor for Entity();
    *(void *)&long long v39 = v36;
    outlined init with take of Any(&v39, v38);
    swift_retain();
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, 0x797469746E65, 0xE600000000000000, v33);
    swift_bridgeObjectRelease();
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
    *(void *)&long long v39 = v11;
    outlined init with take of Any(&v39, v38);
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, 0x646574726F706D69, 0xEE0073656E656353, v34);
    unint64_t v4 = v37;

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for rioAudio != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.rioAudio);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = v28;
    if (os_log_type_enabled(v29, v28))
    {
      id v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v31 = 0;
      _os_log_impl(&dword_23A99F000, v29, v30, "generatePostLoadData could not get an AssetManager.", v31, 2u);
      MEMORY[0x23ECBE8B0](v31, -1, -1);
    }
  }
  return v4;
}

void partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v2 = v0[2];
  unint64_t v3 = (void (*)(void *, uint64_t))v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v2, v3, v4, v5, v6);
}

{
  partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(MEMORY[0x263F16138]);
}

{
  partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(MEMORY[0x263F16158]);
}

{
  partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(MEMORY[0x263F161F0]);
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v9 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v4[2], v4[3], v4[4], (uint64_t)v4 + v10, *(uint64_t *)((char *)v4 + v11), *(uint64_t (**)(uint64_t))((char *)v4 + v12), *(uint64_t *)((char *)v4 + v12 + 8), *(uint64_t *)((char *)v4 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(unint64_t))((char *)v4+ ((((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v4 + ((((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), a1, a2, a3, a4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ())(uint64_t a1, char a2)
{
  unint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t objectdestroy_93Tm()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  swift_release();
  if (*(void *)(v0 + v6)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v6 + 16, v3 | 7);
}

uint64_t objectdestroy_102Tm()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(void (*a1)(void))
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(*(void *)(v1 + 16), *(void (**)(void *, uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t lazy protocol witness table accessor for type USDImportService.LoadError and conformance USDImportService.LoadError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_55Tm()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v5 + 16, v3 | 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for URL() - 8);
  return specialized static USDImportService.loadModel_createImportSession(contentsOf:)(a1, (NSURL *)((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(uint64_t a1, uint64_t (*a2)(unint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  return a2(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1);
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v5 + 16, v3 | 7);
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized UsdGeomXformable.localTransformation(at:)@<X0>(float32x4_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdGeomXformableXformQueryGetLocalTransformation();
  if (result)
  {
    float32x4_t v3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), (float64x2_t)0);
    float32x4_t v4 = v3;
    float32x4_t v5 = v3;
    float32x4_t v6 = v3;
  }
  else
  {
    float32x4_t v4 = 0uLL;
    float32x4_t v5 = 0uLL;
    float32x4_t v6 = 0uLL;
    float32x4_t v3 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4].i8[0] = result ^ 1;
  return result;
}

uint64_t closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:)(__n128 a1, __n128 a2, __n128 a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v55 = a10;
  uint64_t v52 = a8;
  uint64_t v53 = a9;
  __n128 v46 = a3;
  __n128 v47 = a2;
  __n128 v48 = a1;
  uint64_t v57 = a7;
  unint64_t v45 = a5;
  uint64_t v10 = type metadata accessor for __RKEntityMoveEaseType();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for __RKEntityMoveEase();
  uint64_t v43 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  unint64_t v42 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for __RKEntityMoveSelection();
  uint64_t v13 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  unint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v20 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v49 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v22 - 8);
  unint64_t v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v26 = MEMORY[0x270FA5388](v25);
  uint64_t v27 = *(void (**)(double))(v17 + 56);
  uint64_t v58 = (uint64_t)&v40 - v28;
  v27(v26);
  uint64_t v29 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  if (*(void *)(v29 + 16))
  {
    id v30 = *(id *)(v29 + 32);
    swift_bridgeObjectRelease();
    Inputs.identifierForEntity(withInputKey:)(0xD000000000000010, 0x800000023AAACEC0, (uint64_t)v24);

    uint64_t v31 = v58;
    outlined destroy of Any?(v58, &demangling cache variable for type metadata for UUID?);
    outlined init with take of (URL, __REAsset)((uint64_t)v24, v31, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v19, v45, v16);
  unint64_t v45 = v46.n128_u64[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v52, v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v53, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v54, v55, v51);
  outlined init with copy of UUID?(v58, (uint64_t)v24);
  char v59 = 0;
  uint64_t v32 = v49;
  __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)();
  uint64_t v33 = v56;
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v32, *MEMORY[0x263F163C0], v56);
  char v34 = v57;
  unint64_t v35 = *v57;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *char v34 = v35;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
    *char v34 = v35;
  }
  unint64_t v38 = *(void *)(v35 + 16);
  unint64_t v37 = *(void *)(v35 + 24);
  if (v38 >= v37 >> 1)
  {
    unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v35);
    *char v34 = v35;
  }
  *(void *)(v35 + 16) = v38 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v35+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v38, v32, v33);
  return outlined destroy of Any?(v58, &demangling cache variable for type metadata for UUID?);
}

uint64_t specialized static ActionBuilder.generateTransformActionSpecifications(inputs:)(uint64_t a1)
{
  uint64_t v76 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v68 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v69 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x270FA5388](v3 - 8);
  char v71 = (uint64_t *)((char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for __RKEntityMoveEaseType();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v72 = v5;
  uint64_t v73 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v70 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __RKEntityMoveEase();
  uint64_t v74 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveSelection?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for __RKEntityMoveSelection();
  uint64_t v17 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  uint64_t v65 = v16;
  uint64_t v66 = a1;
  uint64_t v61 = v13;
  id v62 = v10;
  uint64_t v67 = v17;
  uint64_t v23 = v76;
  uint64_t v63 = v11;
  int v64 = v19;
  if (!*(void *)(v20 + 16))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  id v24 = *(id *)(v20 + 32);
  swift_bridgeObjectRelease();
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v25 = (id)RIOPxrTfTokenEmpty();
    uint64_t v26 = v67;
  }
  else
  {
    String.utf8CString.getter();
    id v25 = (id)RIOPxrTfTokenCreateWithCString();
    uint64_t v26 = v67;
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v80);

  swift_release();
  uint64_t v27 = (char *)v80;
  if (v81)
  {
    v78.i64[0] = v80;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    outlined consume of Result<Double, Object.Error>(v27, 1);
    return MEMORY[0x263F8EE78];
  }
  swift_retain();
  uint64_t v28 = (uint64_t)v65;
  __RKEntityMoveSelection.init(inputs:)((uint64_t)v65);
  uint64_t v29 = v75;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v75);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v64, v28, v29);
  swift_retain();
  id v30 = v62;
  __RKEntityMoveEase.init(inputs:)((uint64_t)v62);
  uint64_t v31 = v74;
  uint64_t v32 = v63;
  (*(void (**)(id, void, uint64_t, uint64_t))(v74 + 56))(v30, 0, 1, v63);
  (*(void (**)(char *, id, uint64_t))(v31 + 32))(v61, v30, v32);
  swift_retain();
  uint64_t v33 = (uint64_t)v71;
  __RKEntityMoveEaseType.init(inputs:)((uint64_t)v71);
  uint64_t v65 = v27;
  uint64_t v34 = v72;
  uint64_t v35 = v73;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v33, 0, 1, v72);
  uint64_t v36 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v70, v33, v34);
  uint64_t result = RIOBuilderInputsCopyStage();
  if (result)
  {
    unint64_t v37 = (void *)result;
    int HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

    if (!HasPrimAtPrimPath)
    {

      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v61, v63);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v75);
      return MEMORY[0x263F8EE78];
    }
    uint64_t result = RIOBuilderInputsCopyStage();
    if (result)
    {
      uint64_t v39 = result;
      type metadata accessor for Stage();
      *(void *)(swift_initStackObject() + 16) = v39;
      uint64_t v40 = v23;
      if (String.count.getter() < 1) {
        id v41 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v41 = (id)RIOPxrTfTokenCreateWithCString();
      }
      unint64_t v42 = v41;
      id v62 = v24;
      uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

      type metadata accessor for Prim();
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = PrimIfNeeded;
      type metadata accessor for XformPrim(0);
      unint64_t v45 = (void *)swift_initStackObject();
      v45[7] = &type metadata for Schema;
      v45[8] = &protocol witness table for Schema;
      v45[2] = inited;
      v45[3] = inited;
      swift_retain();
      swift_release();
      char v71 = v45;
      specialized UsdGeomXformable.localTransformation(at:)(&v78);
      uint64_t v60 = v79;
      outlined init with take of (URL, __REAsset)((uint64_t)&v78, (uint64_t)&v80, &demangling cache variable for type metadata for simd_float4x4?);
      uint64_t v46 = v73;
      uint64_t v47 = Transform.init(matrix:)();
      uint64_t v77 = MEMORY[0x263F8EE78];
      *(double *)&long long v48 = MEMORY[0x270FA5388](v47);
      *(&v60 - 12) = v66;
      *(&v60 - 11) = (uint64_t)&v77;
      *((_OWORD *)&v60 - 5) = v48;
      *((_OWORD *)&v60 - 4) = v49;
      *((_OWORD *)&v60 - 3) = v50;
      uint64_t v51 = v64;
      *(&v60 - 4) = (uint64_t)v65;
      *(&v60 - 3) = (uint64_t)v51;
      uint64_t v52 = v70;
      *(&v60 - 2) = (uint64_t)v61;
      *(&v60 - 1) = (uint64_t)v52;
      if (one-time initialization token for OutputName != -1) {
        swift_once();
      }
      specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:), (uint64_t)(&v60 - 14));
      uint64_t v21 = v77;
      if (*(void *)(v77 + 16) < 2uLL)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        uint64_t v53 = type metadata accessor for __RKEntityActionSpecification();
        uint64_t v54 = *(void *)(v53 - 8);
        unint64_t v55 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
        uint64_t v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = xmmword_23AAB22A0;
        (*(void (**)(char *, void, uint64_t))(v68 + 104))(v69, *MEMORY[0x263F16310], v40);
        swift_bridgeObjectRetain_n();
        __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
        (*(void (**)(unint64_t, void, uint64_t))(v54 + 104))(v56 + v55, *MEMORY[0x263F163A8], v53);
        swift_bridgeObjectRelease();
        uint64_t v21 = v56;
        uint64_t v34 = v72;
      }
      uint64_t v57 = v67;
      uint64_t v58 = v63;
      uint64_t v59 = v74;

      swift_release();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v34);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v75);
      swift_bridgeObjectRelease();
      return v21;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:)(uint64_t a1, unint64_t a2)
{
  return closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:)(*(__n128 *)(v2 + 32), *(__n128 *)(v2 + 48), *(__n128 *)(v2 + 64), a1, a2, *(void *)(v2 + 16), *(unint64_t **)(v2 + 24), *(void *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 104));
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)RIOPxrSdfPrimSpecCopyLayer();
  uint64_t v1 = (void *)RIOPxrSdfLayerCopyIdentifier();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x800000023AAB01D0;
  String.append(_:)(v6);
  return swift_bridgeObjectRelease();
}

unint64_t SceneDescriptionFoundations.PrimSpec.description.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)RIOPxrSdfPrimSpecCopyLayer();
  uint64_t v1 = (void *)RIOPxrSdfLayerCopyIdentifier();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t SceneDescriptionFoundations.PrimSpec.debugDescription.getter()
{
  v0._countAndFlagsBits = 0x6570536D6972503CLL;
  v0._object = (void *)0xEB00000000203A63;
  String.append(_:)(v0);
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t SceneDescriptionFoundations.PrimSpec.layer()()
{
  uint64_t v0 = RIOPxrSdfPrimSpecCopyLayer();
  type metadata accessor for SceneDescriptionFoundations.Layer();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t SceneDescriptionFoundations.PrimSpec.path()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPrimSpecCopyPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.PrimSpec.attribute(at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPrimSpecCopyAttribute();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.PrimSpec.specifier.getter()
{
  return MEMORY[0x270F22430](*v0);
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.PrimSpec()
{
  return &type metadata for SceneDescriptionFoundations.PrimSpec;
}

uint64_t SdrRegistry.deinit()
{
  return v0;
}

uint64_t SdrRegistry.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static SdrRegistry.nodeNames.getter()
{
  uint64_t v0 = (void *)RIOPxrSdrRegistryCopyNodeNames();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE78];
}

uint64_t static SdrRegistry.shaderNodeByName(name:)()
{
  String.utf8CString.getter();
  id v0 = (id)RIOPxrSdrRegistryGetShaderNodeByName();
  swift_release();
  if (!v0) {
    return 0;
  }
  type metadata accessor for SdrShaderNode();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t type metadata accessor for SdrShaderNode()
{
  return self;
}

uint64_t SdrShaderNode.deinit()
{
  return v0;
}

uint64_t SdrShaderNode.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SdrShaderNode.inputNames.getter()
{
  return SdrShaderNode.inputNames.getter(MEMORY[0x263F37910]);
}

uint64_t SdrShaderNode.outputNames.getter()
{
  return SdrShaderNode.inputNames.getter(MEMORY[0x263F37920]);
}

uint64_t SdrShaderNode.inputNames.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)a1(*(void *)(v1 + 16));
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE78];
}

uint64_t SdrShaderNode.shaderInput<A>(withName:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return SdrShaderNode.shaderInput<A>(withName:)(a1, a2, a3, MEMORY[0x263F37928]);
}

uint64_t type metadata accessor for SdrShaderProperty()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SdrShaderProperty.__allocating_init(base:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t SdrShaderNode.shaderOutput<A>(withName:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return SdrShaderNode.shaderInput<A>(withName:)(a1, a2, a3, MEMORY[0x263F37930]);
}

uint64_t SdrShaderNode.shaderInput<A>(withName:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  uint64_t v6 = *a1;
  type metadata accessor for SdrShaderProperty();
  uint64_t v7 = a4(*(void *)(v4 + 16), v6);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  return result;
}

uint64_t SdrShaderNode.name.getter()
{
  return SdrShaderNode.name.getter(MEMORY[0x263F37918]);
}

uint64_t SdrShaderNode.family.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdrShaderNodeCopyFamily();
  *a1 = result;
  return result;
}

uint64_t SdrShaderNode.infoString.getter()
{
  return SdrShaderNode.name.getter(MEMORY[0x263F37908]);
}

uint64_t SdrShaderProperty.name.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdrShaderPropertyCopyName();
  *a1 = result;
  return result;
}

uint64_t SdrShaderProperty.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdrShaderPropertyCopyType();
  *a1 = result;
  return result;
}

void SdrShaderProperty.defaultValue.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  id v4 = (id)RIOPxrSdrShaderPropertyCopyDefaultValue();
  RIOPxrVtValueRef.mapUSDValue<A>()(*(void *)(v3 + 80), a1);
}

uint64_t SdrShaderProperty.isArray.getter()
{
  return RIOPxrSdrShaderPropertyIsArray();
}

uint64_t SdrShaderProperty.arraySize.getter()
{
  return (int)RIOPxrSdrShaderPropertyGetArraySize();
}

uint64_t SdrShaderProperty.isConnectable.getter()
{
  return RIOPxrSdrShaderPropertyIsConnectable();
}

uint64_t SdrShaderProperty.infoString.getter()
{
  return SdrShaderNode.name.getter(MEMORY[0x263F37938]);
}

uint64_t SdrShaderNode.name.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)a1(*(void *)(v1 + 16));
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for SdrRegistry()
{
  return self;
}

uint64_t method lookup function for SdrRegistry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SdrRegistry);
}

uint64_t method lookup function for SdrShaderNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SdrShaderNode);
}

uint64_t type metadata instantiation function for SdrShaderProperty()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for SdrShaderProperty()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SdrShaderProperty(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SdrShaderProperty);
}

uint64_t __RKEntityGroupActionOrder.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v15 = 0;
LABEL_13:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 1);
    goto LABEL_14;
  }
  uint64_t v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_12:
    uint64_t v15 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_13;
  }
  Swift::String v5 = (void *)v4;
  uint64_t v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_12;
  }
  uint64_t v7 = (void *)v6;

  swift_release();
  uint64_t v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  Swift::Int v13 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityGroupActionOrderUSD.init(rawValue:), v12);
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_release();
    uint64_t v14 = (unsigned int *)MEMORY[0x263F16318];
    goto LABEL_16;
  }
  if (v13 != 1)
  {
LABEL_14:
    lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  uint64_t v14 = (unsigned int *)MEMORY[0x263F16310];
LABEL_16:
  uint64_t v17 = *v14;
  uint64_t v18 = type metadata accessor for __RKEntityGroupActionOrder();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a1, v17, v18);
}

unint64_t lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA5F834);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
}

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v2 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  int64_t v8 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v2 << 6);
      uint64_t v11 = v2;
      goto LABEL_29;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v18 + 8 * v13);
    uint64_t v11 = v2 + 1;
    if (!v14)
    {
      uint64_t v11 = v2 + 2;
      if (v2 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v18 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v2 + 3;
        if (v2 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v18 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v2 + 4;
          if (v2 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v18 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v2 + 5;
            if (v2 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = *(void *)(v18 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v2 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v18 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      id v16 = v12;
      specialized Set._Variant.insert(_:)(&v24, v16);
      uint64_t v17 = v24;

      uint64_t v2 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for RIOPxrSdfPathRef(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v24;
        swift_unknownObjectRelease();
        uint64_t v11 = v2;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t InputDescriptor.convertToCore()()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  unint64_t v4 = (void *)v0[4];
  uint64_t v3 = v0[5];
  switch(*((unsigned __int8 *)v0 + 48) >> 4)
  {
    case 1:
      swift_bridgeObjectRetain();
      uint64_t v5 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v6 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v6 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      uint64_t v13 = RIOBuilderParentPrimInputDescriptorCreate();
      goto LABEL_37;
    case 2:
      swift_bridgeObjectRetain();
      Class isa = v4;
      int64_t v8 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      uint64_t v14 = RIOBuilderChildPrimInputDescriptorCreate();
      goto LABEL_34;
    case 3:
      swift_bridgeObjectRetain();
      Class isa = v4;
      int64_t v8 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      uint64_t v14 = RIOBuilderDescendantPrimInputDescriptorCreate();
      goto LABEL_34;
    case 4:
      swift_bridgeObjectRetain();
      int64_t v8 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm((uint64_t)v4);
      type metadata accessor for RIOPxrTfTokenRef(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v14 = RIOBuilderDescendantPrimsInputDescriptorCreate();
      goto LABEL_34;
    case 5:
      swift_bridgeObjectRetain();
      Class isa = v4;
      int64_t v8 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      uint64_t v14 = RIOBuilderRelatedPrimInputDescriptorCreate();
      goto LABEL_34;
    case 6:
      swift_bridgeObjectRetain();
      Class isa = v4;
      int64_t v8 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v9 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      uint64_t v14 = RIOBuilderStaticPrimInputDescriptorCreate();
LABEL_34:
      uint64_t v15 = v14;

      return v15;
    case 7:
      swift_bridgeObjectRetain();
      uint64_t v5 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v6 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v6 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      uint64_t v13 = RIOBuilderEntityGeneratingPrimDescriptorCreate();
      goto LABEL_37;
    case 8:
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v4;
      *(void *)(v10 + 24) = v3;
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v11 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v12 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v12 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      aBlock[4] = partial apply for closure #1 in InputDescriptor.convertToCore();
      aBlock[5] = v10;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdStageRef, @guaranteed RIOPxrSdfPathRef) -> (@unowned Unmanaged<CFSetRef>);
      void aBlock[3] = &block_descriptor_17;
      id v16 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      uint64_t v15 = RIOBuilderCustomCallbackInputDescriptorCreate();

      swift_release();
      swift_release();
      _Block_release(v16);

      return v15;
    default:
      swift_bridgeObjectRetain();
      uint64_t v5 = (void *)MEMORY[0x23ECB9F30](v2, v1);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        id v6 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        id v6 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      uint64_t v13 = RIOBuilderCurrentPrimInputDescriptorCreate();
LABEL_37:
      uint64_t v15 = v13;

      return v15;
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v11 = 1;
    }
    else
    {
      uint64_t v3 = (void **)(a1 + 32);
      unint64_t v4 = (void **)(a2 + 32);
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v7 = *v3++;
        id v6 = v7;
        int64_t v8 = *v4++;
        id v9 = v6;
        id v10 = v8;
        char v11 = static _CFObject.== infix(_:_:)();

        BOOL v13 = v5-- != 0;
      }
      while ((v11 & 1) != 0 && v13);
    }
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t InputDescriptor.hash(into:)()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  unsigned int v4 = *(unsigned __int8 *)(v0 + 48);
  switch(v4 >> 4)
  {
    case 2u:
    case 3u:
    case 5u:
      uint64_t v15 = *(void *)(v0 + 40);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_23AAB2870;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v7 = v3;
      AnyHashable.init<A>(_:)();
      AnyHashable.init<A>(_:)();
      uint64_t v17 = v1;
      AnyHashable.init<A>(_:)();
      id v16 = v7;
      lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
      id v8 = v7;
      goto LABEL_5;
    case 4u:
      uint64_t v14 = *(void *)(v0 + 40);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_23AAB2870;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      AnyHashable.init<A>(_:)();
      uint64_t v17 = v1;
      AnyHashable.init<A>(_:)();
      id v16 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolsFoundations.Token]);
      lazy protocol witness table accessor for type [ToolsFoundations.Token] and conformance <A> [A]();
      AnyHashable.init<A>(_:)();
      char v6 = v14 & 1;
      goto LABEL_8;
    case 6u:
      uint64_t v15 = *(void *)(v0 + 40);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_23AAB2870;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v9 = v3;
      AnyHashable.init<A>(_:)();
      AnyHashable.init<A>(_:)();
      uint64_t v17 = v1;
      AnyHashable.init<A>(_:)();
      id v16 = v9;
      lazy protocol witness table accessor for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path();
      id v8 = v9;
LABEL_5:
      AnyHashable.init<A>(_:)();
      LOBYTE(v16) = v15 & 1;
      AnyHashable.init<A>(_:)();

      uint64_t v10 = *(void *)(v5 + 16);
      if (!v10) {
        return swift_bridgeObjectRelease();
      }
      goto LABEL_11;
    case 8u:
      char v12 = v4 & 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_23AAB2690;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      AnyHashable.init<A>(_:)();
      id v16 = v2;
      uint64_t v17 = v1;
      AnyHashable.init<A>(_:)();
      LOBYTE(v16) = v12;
      goto LABEL_10;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_23AAB2690;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      AnyHashable.init<A>(_:)();
      id v16 = v2;
      uint64_t v17 = v1;
      AnyHashable.init<A>(_:)();
      char v6 = v3 & 1;
LABEL_8:
      LOBYTE(v16) = v6;
LABEL_10:
      AnyHashable.init<A>(_:)();
      uint64_t v10 = *(void *)(v5 + 16);
      if (!v10) {
        return swift_bridgeObjectRelease();
      }
LABEL_11:
      uint64_t v13 = v5 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of AnyHashable(v13, (uint64_t)&v16);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)&v16);
        v13 += 40;
        --v10;
      }
      while (v10);
      return swift_bridgeObjectRelease_n();
  }
}

Swift::Int InputDescriptor.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InputDescriptor()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InputDescriptor()
{
  return Hasher._finalize()();
}

void ImportSession.hash(into:)()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
  id v3 = v2;
  _CFObject.hash(into:)();
}

Swift::Int ImportSession.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
  id v3 = v2;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImportSession()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = (void **)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  id v3 = *v2;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
  id v4 = v3;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ImportSession()
{
  uint64_t v1 = (void **)(*v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
  id v3 = v2;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImportSession()
{
  return Hasher._finalize()();
}

uint64_t closure #1 in InputDescriptor.convertToCore()(void *a1, void *a2, uint64_t (*a3)(uint64_t, unint64_t *))
{
  type metadata accessor for Stage();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  unint64_t v22 = (unint64_t)a2;
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = a3(v6, &v22);

  swift_release();
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    unint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = specialized Set.startIndex.getter(v9);
    uint64_t v12 = result;
    uint64_t v14 = v13;
    char v16 = v15 & 1;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(unsigned char *)(v9 + 32))
    {
      if (((*(void *)(v9 + 56 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_12;
      }
      if (*(_DWORD *)(v9 + 36) != v14) {
        goto LABEL_13;
      }
      id v17 = *(id *)(*(void *)(v9 + 48) + 8 * v12);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t result = specialized _NativeSet.index(after:)(v12, v14, v16 & 1, v9);
      uint64_t v12 = result;
      uint64_t v14 = v18;
      char v16 = v19 & 1;
      if (!--v10)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v18, v19 & 1);
        unint64_t v20 = v22;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = MEMORY[0x263F8EE78];
LABEL_10:
    specialized Set.init<A>(_:)(v20);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    return (uint64_t)isa;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdStageRef, @guaranteed RIOPxrSdfPathRef) -> (@unowned Unmanaged<CFSetRef>)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(uint64_t (**)(id, id))(a1 + 32);
  swift_retain();
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v5(v6, v7);
  swift_release();

  return v8;
}

uint64_t static InputDescriptor.create(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(RIOBuilderInputDescriptorCopyType())
  {
    case 1:
      id v4 = (void *)RIOBuilderCurrentPrimInputDescriptorCopyInputName();
      Swift::String v5 = String.init(_:)(v4);
      uint64_t countAndFlagsBits = v5._countAndFlagsBits;
      object = v5._object;
      uint64_t v8 = (void *)MEMORY[0x23ECBB500](a1);
      uint64_t v9 = (void *)RIOPxrTfTokenCopyString();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      uint64_t v13 = RIOBuilderCurrentPrimInputDescriptorCopyOptionality();
      uint64_t result = 0;
      char v15 = 0;
      uint64_t v16 = v13 == 0;
      break;
    case 2:
      id v17 = (void *)RIOBuilderParentPrimInputDescriptorCopyInputName();
      Swift::String v18 = String.init(_:)(v17);
      uint64_t countAndFlagsBits = v18._countAndFlagsBits;
      object = v18._object;
      char v19 = (void *)MEMORY[0x23ECBB820](a1);
      unint64_t v20 = (void *)RIOPxrTfTokenCopyString();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v21;

      uint64_t v22 = RIOBuilderParentPrimInputDescriptorCopyOptionality();
      uint64_t result = 0;
      uint64_t v16 = v22 == 0;
      char v15 = 16;
      break;
    case 3:
      unint64_t v23 = (void *)RIOBuilderChildPrimInputDescriptorCopyInputName();
      Swift::String v24 = String.init(_:)(v23);
      uint64_t countAndFlagsBits = v24._countAndFlagsBits;
      object = v24._object;
      id v25 = (void *)MEMORY[0x23ECBB440](a1);
      uint64_t v26 = (void *)RIOPxrTfTokenCopyString();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v27;

      uint64_t v16 = RIOBuilderChildPrimInputDescriptorCopyChildPrimType();
      uint64_t result = RIOBuilderChildPrimInputDescriptorCopyOptionality() == 0;
      char v15 = 32;
      break;
    case 4:
      uint64_t v28 = (void *)RIOBuilderRelatedPrimInputDescriptorCopyInputName();
      Swift::String v29 = String.init(_:)(v28);
      uint64_t countAndFlagsBits = v29._countAndFlagsBits;
      object = v29._object;
      id v30 = (void *)MEMORY[0x23ECBB8A0](a1);
      uint64_t v31 = (void *)RIOPxrTfTokenCopyString();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v32;

      uint64_t v16 = RIOBuilderRelatedPrimInputDescriptorCopyPropertyNameOnCurrentPrimWithRelationship();
      uint64_t result = RIOBuilderRelatedPrimInputDescriptorCopyOptionality() == 0;
      char v15 = 80;
      break;
    case 5:
      uint64_t v33 = (void *)RIOBuilderStaticPrimInputDescriptorCopyInputName();
      Swift::String v34 = String.init(_:)(v33);
      uint64_t countAndFlagsBits = v34._countAndFlagsBits;
      object = v34._object;
      uint64_t v35 = (void *)MEMORY[0x23ECBB920](a1);
      uint64_t v36 = (void *)RIOPxrTfTokenCopyString();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v37;

      uint64_t v16 = RIOBuilderStaticPrimInputDescriptorCopyPrimPath();
      uint64_t result = RIOBuilderStaticPrimInputDescriptorCopyOptionality() == 0;
      char v15 = 96;
      break;
    case 6:
      unint64_t v38 = (void *)RIOBuilderEntityGeneratingPrimInputDescriptorCopyInputName();
      Swift::String v39 = String.init(_:)(v38);
      uint64_t countAndFlagsBits = v39._countAndFlagsBits;
      object = v39._object;
      uint64_t v40 = (void *)MEMORY[0x23ECBB690](a1);
      id v41 = (void *)RIOPxrTfTokenCopyString();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v42;

      uint64_t v43 = RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality();
      uint64_t result = 0;
      uint64_t v16 = v43 == 0;
      char v15 = 112;
      break;
    case 7:
      uint64_t v44 = (void *)RIOBuilderCustomCallbackInputDescriptorCopyInputName();
      Swift::String v45 = String.init(_:)(v44);
      uint64_t countAndFlagsBits = v45._countAndFlagsBits;
      object = v45._object;
      uint64_t v46 = (void *)MEMORY[0x23ECBB690](a1);
      uint64_t v47 = RIOPxrTfTokenCopyString();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v48;

      LOBYTE(v47) = RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality() == 0;
      id v49 = (id)RIOBuilderCustomCallbackInputDescriptorCopyCallbackFunction();
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = v49;
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RIOPxrUsdStageRef, @unowned RIOPxrSdfPathRef) -> (@unowned Unmanaged<CFSetRef>);
      *(void *)(result + 24) = v50;
      char v15 = v47 | 0x80;
      uint64_t v16 = (uint64_t)partial apply for closure #1 in static InputDescriptor.create(from:);
      break;
    default:
      uint64_t countAndFlagsBits = 0;
      uint64_t v10 = 0;
      uint64_t result = 0;
      char v15 = 0;
      object = (void *)0xE000000000000000;
      uint64_t v16 = 1;
      unint64_t v12 = 0xE000000000000000;
      break;
  }
  *(void *)a2 = countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = result;
  *(unsigned char *)(a2 + 48) = v15;
  return result;
}

uint64_t closure #1 in static InputDescriptor.create(from:)(uint64_t a1, void *a2, uint64_t (*a3)(void, void))
{
  id v3 = (void *)a3(*(void *)(a1 + 16), *a2);
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
  static Set._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE88];
}

uint64_t specialized static InputDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  unsigned __int8 v162 = *(unsigned char *)(a1 + 48);
  unsigned int v14 = *(unsigned __int8 *)(a2 + 48);
  uint64_t v164 = *(void *)a2;
  uint64_t v163 = v11;
  uint64_t v161 = v8;
  switch(v162 >> 4)
  {
    case 1:
      if ((v14 & 0xF0) == 0x10) {
        goto LABEL_36;
      }
      goto LABEL_49;
    case 2:
      if ((v14 & 0xF0) != 0x20) {
        goto LABEL_49;
      }
      goto LABEL_19;
    case 3:
      if ((v14 & 0xF0) != 0x30) {
        goto LABEL_49;
      }
      goto LABEL_19;
    case 4:
      if ((v14 & 0xF0) != 0x40) {
        goto LABEL_49;
      }
      uint64_t v139 = *(void *)(a1 + 24);
      uint64_t v148 = *(void *)(a1 + 8);
      if (v2 != v9 || v3 != v8)
      {
        uint64_t v15 = *(void *)(a1 + 16);
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void *)a1;
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v2 = v17;
        uint64_t v5 = v15;
        uint64_t v3 = v148;
        uint64_t v11 = v163;
        uint64_t v8 = v16;
        if ((v18 & 1) == 0)
        {
          uint64_t v131 = v9;
          uint64_t v132 = v16;
          uint64_t v115 = v5;
          uint64_t v116 = v10;
          uint64_t v160 = (void *)v12;
          int v133 = (void *)v12;
          uint64_t v119 = v13;
          unsigned __int8 v157 = v14;
          uint64_t v120 = v2;
          outlined copy of InputDescriptor(v131, v132, v163, v10, v133, v13, v14);
          uint64_t v121 = v120;
          uint64_t v122 = v148;
          uint64_t v123 = v115;
          uint64_t v117 = v139;
          goto LABEL_57;
        }
      }
      uint64_t v143 = v5;
      uint64_t v151 = v2;
      uint64_t v19 = v139;
      if (v5 == v11 && v139 == v10
        || (uint64_t v20 = v8,
            char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            uint64_t v19 = v139,
            uint64_t v11 = v163,
            uint64_t v8 = v20,
            uint64_t v9 = v164,
            (v21 & 1) != 0))
      {
        uint64_t v22 = v11;
        uint64_t v23 = v19;
        outlined copy of InputDescriptor(v9, v8, v22, v10, (void *)v12, v13, v14);
        outlined copy of InputDescriptor(v151, v148, v143, v23, v6, v7, v162);
        char v134 = specialized static Array<A>.== infix(_:_:)((uint64_t)v6, v12);
        outlined consume of InputDescriptor(v151, v148, v143, v23, v6, v7, v162);
        outlined consume of InputDescriptor(v164, v161, v163, v10, (void *)v12, v13, v14);
        char v24 = v134 & (((v7 & 1) == 0) ^ v13);
        return v24 & 1;
      }
      outlined copy of InputDescriptor(v164, v20, v163, v10, (void *)v12, v13, v14);
      outlined copy of InputDescriptor(v151, v148, v143, v139, v6, v7, v162);
      outlined consume of InputDescriptor(v151, v148, v143, v139, v6, v7, v162);
      uint64_t v98 = v164;
      char v100 = (void *)v12;
      uint64_t v99 = v161;
      uint64_t v101 = v163;
      uint64_t v102 = v10;
      uint64_t v103 = v13;
      goto LABEL_50;
    case 5:
      if ((v14 & 0xF0) != 0x50) {
        goto LABEL_49;
      }
LABEL_19:
      unsigned __int8 v156 = *(unsigned char *)(a2 + 48);
      uint64_t v158 = *(void **)(a2 + 32);
      uint64_t v152 = *(void *)a1;
      uint64_t v153 = *(void *)(a2 + 40);
      if (v2 != v9 || v3 != v8)
      {
        uint64_t v25 = *(void *)(a1 + 16);
        uint64_t v26 = *(void *)(a2 + 8);
        uint64_t v27 = *(void *)(a1 + 24);
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v5 = v25;
        uint64_t v4 = v27;
        uint64_t v8 = v26;
        if ((v28 & 1) == 0) {
          goto LABEL_53;
        }
      }
      if (v5 != v11 || v4 != v10)
      {
        uint64_t v29 = v11;
        uint64_t v30 = v5;
        uint64_t v31 = v9;
        uint64_t v32 = v8;
        uint64_t v33 = v3;
        uint64_t v34 = v10;
        uint64_t v35 = v4;
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v5 = v30;
        uint64_t v4 = v35;
        uint64_t v11 = v29;
        uint64_t v10 = v34;
        uint64_t v3 = v33;
        uint64_t v8 = v32;
        uint64_t v9 = v31;
        if ((v36 & 1) == 0) {
          goto LABEL_53;
        }
      }
      uint64_t v37 = v3;
      uint64_t v38 = v7;
      BOOL v140 = (v7 & 1) == 0;
      uint64_t v39 = v8;
      uint64_t v40 = v10;
      uint64_t v138 = v10;
      uint64_t v41 = v11;
      uint64_t v42 = v4;
      uint64_t v43 = v5;
      type metadata accessor for RIOPxrTfTokenRef(0);
      uint64_t v44 = v41;
      Swift::String v45 = v158;
      outlined copy of InputDescriptor(v9, v39, v44, v40, v158, v13, v156);
      uint64_t v46 = v152;
      uint64_t v47 = v6;
      unint64_t v48 = v6;
      unsigned __int8 v49 = v162;
      outlined copy of InputDescriptor(v152, v37, v43, v42, v48, v38, v162);
      uint64_t v50 = &lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef;
      uint64_t v51 = type metadata accessor for RIOPxrTfTokenRef;
      goto LABEL_34;
    case 6:
      if ((v14 & 0xF0) != 0x60) {
        goto LABEL_49;
      }
      unsigned __int8 v156 = *(unsigned char *)(a2 + 48);
      uint64_t v158 = *(void **)(a2 + 32);
      uint64_t v152 = *(void *)a1;
      uint64_t v153 = *(void *)(a2 + 40);
      if (v2 != v9 || v3 != v8)
      {
        uint64_t v52 = *(void *)(a1 + 16);
        uint64_t v53 = *(void *)(a2 + 8);
        uint64_t v54 = *(void *)(a1 + 24);
        char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v5 = v52;
        uint64_t v4 = v54;
        uint64_t v8 = v53;
        if ((v55 & 1) == 0) {
          goto LABEL_53;
        }
      }
      if (v5 != v11 || v4 != v10)
      {
        uint64_t v56 = v11;
        uint64_t v57 = v5;
        uint64_t v58 = v9;
        uint64_t v59 = v8;
        uint64_t v60 = v3;
        uint64_t v61 = v10;
        uint64_t v62 = v4;
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v5 = v57;
        uint64_t v4 = v62;
        uint64_t v11 = v56;
        uint64_t v10 = v61;
        uint64_t v3 = v60;
        uint64_t v8 = v59;
        uint64_t v9 = v58;
        if ((v63 & 1) == 0)
        {
LABEL_53:
          uint64_t v106 = v5;
          uint64_t v107 = v11;
          uint64_t v108 = v4;
          outlined copy of InputDescriptor(v9, v8, v107, v10, v158, v13, v156);
          outlined copy of InputDescriptor(v152, v3, v106, v108, v6, v7, v162);
          outlined consume of InputDescriptor(v152, v3, v106, v108, v6, v7, v162);
          uint64_t v98 = v164;
          char v100 = v158;
          uint64_t v99 = v161;
          uint64_t v101 = v163;
          uint64_t v102 = v10;
          uint64_t v103 = v153;
          unsigned __int8 v104 = v156;
          goto LABEL_51;
        }
      }
      uint64_t v37 = v3;
      uint64_t v38 = v7;
      BOOL v140 = (v7 & 1) == 0;
      uint64_t v64 = v8;
      uint64_t v65 = v10;
      uint64_t v138 = v10;
      uint64_t v66 = v11;
      uint64_t v42 = v4;
      uint64_t v43 = v5;
      type metadata accessor for RIOPxrSdfPathRef(0);
      uint64_t v67 = v66;
      Swift::String v45 = v158;
      outlined copy of InputDescriptor(v9, v64, v67, v65, v158, v13, v156);
      uint64_t v46 = v152;
      uint64_t v47 = v6;
      uint64_t v68 = v6;
      unsigned __int8 v49 = v162;
      outlined copy of InputDescriptor(v152, v37, v43, v42, v68, v38, v162);
      uint64_t v50 = &lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef;
      uint64_t v51 = type metadata accessor for RIOPxrSdfPathRef;
LABEL_34:
      lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef((unint64_t *)v50, v51);
      id v69 = v47;
      id v135 = v45;
      char v70 = static _CFObject.== infix(_:_:)();
      outlined consume of InputDescriptor(v46, v37, v43, v42, v47, v38, v49);
      outlined consume of InputDescriptor(v164, v161, v163, v138, v45, v153, v156);

      char v24 = v70 & (v140 ^ v153);
      return v24 & 1;
    case 7:
      if ((v14 & 0xF0) == 0x70) {
        goto LABEL_36;
      }
      goto LABEL_49;
    case 8:
      if ((v14 & 0xF0) != 0x80) {
        goto LABEL_49;
      }
      if (v2 != v9 || v3 != v8)
      {
        uint64_t v145 = *(void *)(a1 + 16);
        uint64_t v82 = *(void *)(a2 + 8);
        uint64_t v83 = *(void *)(a1 + 8);
        uint64_t v84 = *(void *)(a1 + 24);
        uint64_t v85 = *(void *)a1;
        char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v2 = v85;
        uint64_t v5 = v145;
        uint64_t v4 = v84;
        uint64_t v3 = v83;
        uint64_t v11 = v163;
        uint64_t v8 = v82;
        uint64_t v9 = v164;
        if ((v86 & 1) == 0) {
          goto LABEL_56;
        }
      }
      uint64_t v155 = v13;
      if (v5 == v11 && v4 == v10)
      {
        uint64_t v87 = v5;
        uint64_t v88 = v4;
        unsigned __int8 v89 = v14;
        unsigned __int8 v90 = v14;
        uint64_t v91 = v2;
        outlined copy of InputDescriptor(v9, v8, v5, v4, (void *)v12, v13, v90);
        uint64_t v92 = v6;
        char v93 = v6;
        unsigned __int8 v94 = v162;
        outlined copy of InputDescriptor(v91, v3, v87, v88, v93, v7, v162);
        outlined consume of InputDescriptor(v91, v3, v87, v88, v92, v7, v162);
        outlined consume of InputDescriptor(v164, v161, v87, v88, (void *)v12, v155, v89);
      }
      else
      {
        uint64_t v147 = v5;
        uint64_t v150 = v3;
        uint64_t v124 = v9;
        uint64_t v125 = v8;
        uint64_t v126 = v10;
        uint64_t v142 = v4;
        uint64_t v127 = v2;
        char v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v128 = v124;
        unsigned __int8 v89 = v14;
        outlined copy of InputDescriptor(v128, v125, v11, v126, (void *)v12, v13, v14);
        uint64_t v129 = v6;
        uint64_t v130 = v6;
        unsigned __int8 v94 = v162;
        outlined copy of InputDescriptor(v127, v150, v147, v142, v130, v7, v162);
        outlined consume of InputDescriptor(v127, v150, v147, v142, v129, v7, v162);
        outlined consume of InputDescriptor(v164, v161, v163, v126, (void *)v12, v155, v14);
        char v24 = 0;
        if ((v137 & 1) == 0) {
          return v24 & 1;
        }
      }
      char v24 = ((v94 & 1) == 0) ^ v89;
      return v24 & 1;
    default:
      if (v14 >= 0x10)
      {
LABEL_49:
        uint64_t v95 = *(void *)(a1 + 16);
        uint64_t v96 = *(void *)(a1 + 24);
        uint64_t v159 = *(void **)(a2 + 32);
        uint64_t v97 = *(void *)a1;
        outlined copy of InputDescriptor(v9, v8, *(void *)(a2 + 16), v10, v159, v13, v14);
        outlined copy of InputDescriptor(v97, v3, v95, v96, v6, v7, v162);
        outlined consume of InputDescriptor(v97, v3, v95, v96, v6, v7, v162);
        uint64_t v98 = v164;
        char v100 = v159;
        uint64_t v99 = v161;
        uint64_t v101 = v163;
        uint64_t v102 = v10;
        uint64_t v103 = v13;
LABEL_50:
        unsigned __int8 v104 = v14;
        goto LABEL_51;
      }
LABEL_36:
      if (v2 != v9 || v3 != v8)
      {
        uint64_t v144 = *(void *)(a1 + 16);
        uint64_t v71 = *(void *)(a2 + 8);
        uint64_t v72 = *(void *)(a1 + 8);
        uint64_t v73 = *(void *)(a1 + 24);
        uint64_t v74 = *(void *)a1;
        char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v2 = v74;
        uint64_t v5 = v144;
        uint64_t v4 = v73;
        uint64_t v3 = v72;
        uint64_t v11 = v163;
        uint64_t v8 = v71;
        uint64_t v9 = v164;
        if ((v75 & 1) == 0)
        {
LABEL_56:
          uint64_t v113 = v9;
          uint64_t v114 = v11;
          uint64_t v115 = v5;
          uint64_t v116 = v10;
          uint64_t v117 = v4;
          uint64_t v160 = (void *)v12;
          int v118 = (void *)v12;
          uint64_t v119 = v13;
          unsigned __int8 v157 = v14;
          uint64_t v120 = v2;
          outlined copy of InputDescriptor(v113, v8, v114, v116, v118, v13, v14);
          uint64_t v121 = v120;
          uint64_t v122 = v3;
          uint64_t v123 = v115;
LABEL_57:
          outlined copy of InputDescriptor(v121, v122, v123, v117, v6, v7, v162);
          outlined consume of InputDescriptor(v120, v3, v115, v117, v6, v7, v162);
          uint64_t v98 = v164;
          char v100 = v160;
          uint64_t v99 = v161;
          uint64_t v101 = v163;
          uint64_t v102 = v116;
          uint64_t v103 = v119;
          unsigned __int8 v104 = v157;
LABEL_51:
          outlined consume of InputDescriptor(v98, v99, v101, v102, v100, v103, v104);
          char v24 = 0;
          return v24 & 1;
        }
      }
      uint64_t v154 = v13;
      if (v5 == v11 && v4 == v10)
      {
        uint64_t v76 = v5;
        uint64_t v77 = v4;
        unsigned __int8 v78 = v14;
        unsigned __int8 v79 = v14;
        uint64_t v80 = v2;
        outlined copy of InputDescriptor(v9, v8, v5, v4, (void *)v12, v13, v79);
        char v81 = (char)v6;
        outlined copy of InputDescriptor(v80, v3, v76, v77, v6, v7, v162);
        outlined consume of InputDescriptor(v80, v3, v76, v77, v6, v7, v162);
        outlined consume of InputDescriptor(v164, v161, v76, v77, (void *)v12, v154, v78);
      }
      else
      {
        uint64_t v146 = v5;
        uint64_t v149 = v3;
        uint64_t v109 = v8;
        uint64_t v110 = v10;
        uint64_t v141 = v4;
        long long v111 = (void *)v12;
        uint64_t v12 = v2;
        char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of InputDescriptor(v9, v109, v11, v110, v111, v13, v14);
        char v81 = (char)v6;
        outlined copy of InputDescriptor(v12, v149, v146, v141, v6, v7, v162);
        uint64_t v112 = v12;
        LOBYTE(v12) = (_BYTE)v111;
        outlined consume of InputDescriptor(v112, v149, v146, v141, v6, v7, v162);
        outlined consume of InputDescriptor(v164, v161, v163, v110, v111, v154, v14);
        char v24 = 0;
        if ((v136 & 1) == 0) {
          return v24 & 1;
        }
      }
      char v24 = ((v81 & 1) == 0) ^ v12;
      return v24 & 1;
  }
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type [ToolsFoundations.Token] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ToolsFoundations.Token] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ToolsFoundations.Token] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ToolsFoundations.Token]);
    lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolsFoundations.Token] and conformance <A> [A]);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ImportSession()
{
  return lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(&lazy protocol witness table cache variable for type ImportSession and conformance ImportSession, (void (*)(uint64_t))type metadata accessor for ImportSession);
}

void destroy for InputDescriptor(uint64_t a1)
{
}

uint64_t initializeWithCopy for InputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of InputDescriptor(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for InputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of InputDescriptor(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  unsigned int v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  unsigned __int8 v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of InputDescriptor(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InputDescriptor(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of InputDescriptor(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for InputDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x78 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 120);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 48) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 48) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x77) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InputDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x77)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 120;
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(unsigned char *)(result + 48) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for InputDescriptor(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 4;
}

uint64_t destructiveProjectEnumData for InputDescriptor(uint64_t result)
{
  *(unsigned char *)(result + 48) &= 0xFu;
  return result;
}

uint64_t destructiveInjectEnumTag for InputDescriptor(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for InputDescriptor()
{
  return &type metadata for InputDescriptor;
}

uint64_t sub_23AA6271C()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RIOPxrUsdStageRef, @unowned RIOPxrSdfPathRef) -> (@unowned Unmanaged<CFSetRef>)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_23AA6276C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static InputDescriptor.create(from:)(uint64_t a1, void *a2)
{
  return closure #1 in static InputDescriptor.create(from:)(a1, a2, *(uint64_t (**)(void, void))(v2 + 16));
}

uint64_t lazy protocol witness table accessor for type RIOImportSessionRef and conformance RIOImportSessionRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in InputDescriptor.convertToCore()(void *a1, void *a2)
{
  return closure #1 in InputDescriptor.convertToCore()(a1, a2, *(uint64_t (**)(uint64_t, unint64_t *))(v2 + 16));
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

id one-time initialization function for PreliminaryGravitationalForcePrimTypeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static PhysicsComponentBuilder.PreliminaryGravitationalForcePrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravitationalForcePrimTypeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static PhysicsComponentBuilder.GravitationalForcePrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityAccelerationPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static PhysicsComponentBuilder.GravityAccelerationPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityPrimTypeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static PhysicsComponentBuilder.GravityPrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityDirectionPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static PhysicsComponentBuilder.GravityDirectionPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityMagnitudePropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static PhysicsComponentBuilder.GravityMagnitudePropertyName = (uint64_t)result;
  return result;
}

uint64_t closure #1 in closure #1 in PhysicsComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for GravityDirectionPropertyName != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static PhysicsComponentBuilder.GravityDirectionPropertyName;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = v0;
  uint64_t v3 = MEMORY[0x263F8EE88];
  id v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x263F8EE88]);

  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = one-time initialization token for GravityMagnitudePropertyName;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static PhysicsComponentBuilder.GravityMagnitudePropertyName;
  uint64_t v7 = (void *)swift_allocObject();
  v7[4] = v6;
  id v8 = v6;
  id v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  void v7[2] = v3;
  v7[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2570;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v7;
  unint64_t v13 = inited;
  specialized Array._endMutation()();
  uint64_t v11 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t closure #2 in PhysicsComponentBuilder.stageSubscription.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24E0;
  if (one-time initialization token for PreliminaryGravitationalForcePrimTypeName != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)static PhysicsComponentBuilder.PreliminaryGravitationalForcePrimTypeName;
  *(void *)(inited + 32) = static PhysicsComponentBuilder.PreliminaryGravitationalForcePrimTypeName;
  uint64_t v2 = one-time initialization token for GravitationalForcePrimTypeName;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  id v4 = (void *)static PhysicsComponentBuilder.GravitationalForcePrimTypeName;
  *(void *)(inited + 40) = static PhysicsComponentBuilder.GravitationalForcePrimTypeName;
  id v5 = v4;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v7 = v6;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (one-time initialization token for GravityAccelerationPropertyName != -1) {
    swift_once();
  }
  id v8 = (void *)static PhysicsComponentBuilder.GravityAccelerationPropertyName;
  type metadata accessor for NamedPropertyDirtyState();
  id v9 = (void *)swift_allocObject();
  v9[4] = v8;
  id v10 = v8;
  uint64_t v11 = MEMORY[0x263F8EE88];
  id v12 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v10, MEMORY[0x263F8EE88]);

  void v9[2] = v11;
  v9[3] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_23AAB22C0;
  *(void *)(v13 + 32) = v9;
  unint64_t v20 = v13;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v14 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v20);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v15 = (void *)swift_allocObject();
  v15[5] = v7;
  swift_bridgeObjectRetain();
  id v16 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v7, v14, v11);
  swift_bridgeObjectRelease();
  v15[2] = v11;
  v15[3] = v14;
  v15[4] = v16;
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_23AAB22C0;
  *(void *)(v17 + 32) = v15;
  unint64_t v21 = v17;
  specialized Array._endMutation()();
  uint64_t v18 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v21);
  swift_bridgeObjectRelease();
  return v18;
}

void PhysicsComponentBuilder.run(inputs:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v3 = static EntityBuilder.OutputName;
  uint64_t v2 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v3, v2, &v17);
  if (!v18)
  {
    outlined destroy of Any?((uint64_t)&v17);
    goto LABEL_19;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (!EntityProxy.parent.getter()) {
    goto LABEL_23;
  }
  Inputs.prim.getter();
  if (one-time initialization token for GravityAccelerationPropertyName != -1) {
    swift_once();
  }
  id v4 = (id)static PhysicsComponentBuilder.GravityAccelerationPropertyName;
  specialized Prim.attributeValue<A>(of:type:)((uint64_t)v11);

  swift_release();
  outlined init with take of SIMD3<Double>?((uint64_t)v11, (uint64_t)&v17);
  if ((v19 & 1) == 0)
  {
    EntityProxy.setGravity(_:)();
LABEL_22:
    swift_release();
LABEL_23:
    swift_release();
    return;
  }
  Inputs.prim.getter();
  if (one-time initialization token for GravityDirectionPropertyName != -1) {
    swift_once();
  }
  id v5 = (id)static PhysicsComponentBuilder.GravityDirectionPropertyName;
  specialized Prim.attributeValue<A>(of:type:)((uint64_t)v12);

  swift_release();
  outlined init with take of SIMD3<Double>?((uint64_t)v12, (uint64_t)v15);
  if (v16 == 1) {
    goto LABEL_22;
  }
  Inputs.prim.getter();
  if (one-time initialization token for GravityMagnitudePropertyName != -1) {
    swift_once();
  }
  id v6 = (id)static PhysicsComponentBuilder.GravityMagnitudePropertyName;
  specialized Prim.attributeValue<A>(of:type:)((uint64_t)v13);

  swift_release();
  outlined init with take of SIMD3<Double>?((uint64_t)v13, (uint64_t)v14);
  if (v14[32] == 1 || !EntityProxy.setGravity(_:)()) {
    goto LABEL_22;
  }
  swift_beginAccess();
  id v7 = objc_getAssociatedObject(v1, &static BuilderAssociatedKeys.CoreReference);
  swift_endAccess();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v9, &v10);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    RIOBuilderAddComponent();
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t EntityProxy.setGravity(_:)()
{
  if (!static __RKScenePhysics.registration.getter()) {
    return 0;
  }
  __RKScenePhysics.Registration.componentType.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  uint64_t v0 = REEntityGetOrAddComponentByClass();
  if (RECustomComponentGetObject()) {
    __RKScenePhysics.gravity.setter();
  }
  return v0;
}

uint64_t closure #1 in PhysicsComponentBuilder.clear(inputs:)()
{
  uint64_t result = static __RKScenePhysics.registration.getter();
  if (result)
  {
    __RKScenePhysics.Registration.componentType.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    return REEntityRemoveComponentByClass();
  }
  return result;
}

uint64_t type metadata accessor for PhysicsComponentBuilder()
{
  return self;
}

uint64_t specialized PhysicsComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for GravityPrimTypeName != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static PhysicsComponentBuilder.GravityPrimTypeName;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v0;
  id v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = closure #1 in closure #1 in PhysicsComponentBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  id v6 = (void *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8EE88];
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x263F8EE88]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AAB22C0;
  *(void *)(v9 + 32) = v6;
  unint64_t v17 = v9;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v17);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v11 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v10, 0);
  swift_retain();
  uint64_t v12 = closure #2 in PhysicsComponentBuilder.stageSubscription.getter();
  swift_allocObject();
  uint64_t v13 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v12, 0);
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_23AAB2570;
  *(void *)(v14 + 32) = v11;
  *(void *)(v14 + 40) = v13;
  unint64_t v18 = v14;
  specialized Array._endMutation()();
  uint64_t v15 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v18);
  swift_bridgeObjectRelease();
  swift_release();
  return v15;
}

Swift::Int specialized PhysicsComponentBuilder.inputDescriptors()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2680;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  uint64_t v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = static EntityBuilder.OutputIdentifier;
  uint64_t v4 = qword_268A584E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v4;
  *(_OWORD *)(inited + 64) = xmmword_23AAB24F0;
  *(unsigned char *)(inited + 80) = 0;
  *(void *)(inited + 88) = 0xD00000000000001ALL;
  *(void *)(inited + 96) = 0x800000023AAADA10;
  *(void *)(inited + 104) = 0xD00000000000001ALL;
  *(void *)(inited + 112) = 0x800000023AAADA10;
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0;
  *(unsigned char *)(inited + 136) = 0;
  *(void *)(inited + 144) = 0xD00000000000001ALL;
  *(void *)(inited + 152) = 0x800000023AAADA10;
  *(void *)(inited + 160) = 0xD00000000000001ALL;
  *(void *)(inited + 168) = 0x800000023AAADA10;
  *(void *)(inited + 176) = 0;
  *(void *)(inited + 184) = 0;
  *(unsigned char *)(inited + 192) = 16;
  swift_bridgeObjectRetain();
  Swift::Int v6 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v6;
}

uint64_t specialized PhysicsComponentBuilder.clear(inputs:)()
{
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = static EntityBuilder.OutputName;
  uint64_t v0 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v1, v0, &aBlock);
  if (!v10) {
    goto LABEL_8;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = EntityProxy.parent.getter();
  if (!v2) {
    return swift_release();
  }
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in PhysicsComponentBuilder.clear(inputs:);
  *(void *)(v4 + 24) = v3;
  uint64_t v11 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v12 = v4;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v9 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v10 = &block_descriptor_18;
  uint64_t v5 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v5);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_8:
    outlined destroy of Any?((uint64_t)&aBlock);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in PhysicsComponentBuilder.clear(inputs:)()
{
  return closure #1 in PhysicsComponentBuilder.clear(inputs:)();
}

uint64_t sub_23AA638CC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t outlined init with take of SIMD3<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)(double a1, __n128 a2, __n128 a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  v21[0] = a2;
  v21[1] = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a5, v8);
  __RKEntityLookAtCameraActionArguments.init(target:duration:animationDuration:direction:rotation:upVector:loops:)();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F16360], v12);
  unint64_t v16 = *a6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
    *a6 = v16;
  }
  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v18 = *(void *)(v16 + 24);
  if (v19 >= v18 >> 1)
  {
    unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v16);
    *a6 = v16;
  }
  *(void *)(v16 + 16) = v19 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v16+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v19, v15, v12);
}

uint64_t specialized static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)()
{
  uint64_t v0 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v30);

  swift_release();
  uint64_t v5 = v30;
  if (v31 == 1)
  {
    uint64_t v35 = v30;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v5, 1);
    return MEMORY[0x263F8EE78];
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v6 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v6 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v30);

  swift_release();
  uint64_t v7 = v30;
  uint64_t v8 = v31;
  uint64_t v9 = v32;
  if (v34 == 1)
  {
    uint64_t v10 = v33;
    uint64_t v35 = v30;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    uint64_t v13 = v9;
LABEL_16:
    outlined consume of Result<Vector3<Double>, Object.Error>(v11, v12, v13, v10, 1);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v29 = v1;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v14 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v14 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v30);

  uint64_t v15 = swift_release();
  unint64_t v16 = v30;
  uint64_t v17 = v31;
  uint64_t v18 = v32;
  if (v34)
  {
    uint64_t v10 = v33;
    uint64_t v35 = v30;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    goto LABEL_16;
  }
  uint64_t v28 = (uint64_t)&v28;
  uint64_t v30 = (void *)MEMORY[0x263F8EE78];
  *(double *)&long long v21 = MEMORY[0x270FA5388](v15);
  *(&v28 - 6) = (uint64_t)&v30;
  *(&v28 - 5) = (uint64_t)v5;
  *((_OWORD *)&v28 - 2) = v22;
  *((_OWORD *)&v28 - 1) = v21;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:), (uint64_t)(&v28 - 8));
  uint64_t v23 = v29;
  unint64_t v19 = v30;
  if (v30[2] >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v24 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v25 = *(void *)(v24 - 8);
    unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_23AAB22A0;
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v3, *MEMORY[0x263F16310], v0);
    swift_bridgeObjectRetain();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, void, uint64_t))(v25 + 104))(v27 + v26, *MEMORY[0x263F163A8], v24);
    swift_bridgeObjectRelease();
    return v27;
  }
  return (uint64_t)v19;
}

void outlined consume of Result<Vector3<Double>, Object.Error>(id a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    outlined consume of Object.Error(a1);
  }
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)(*(double *)(v2 + 24), *(__n128 *)(v2 + 32), *(__n128 *)(v2 + 48), a1, a2, *(unint64_t **)(v2 + 16));
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay9RealityIO27SceneDescriptionFoundationsO9AssetPathVGAMG_Sbs5NeverOTg503_s9f4IO27hij2O9kl21VAESbIgnnd_AE_AEtSbs5M130OIegnrzr_TR03_s9a82IO39VirtualEnvironmentProbeComponentBuilderC3run6inputsyAA6InputsC_tFyyXEfU_SbAA27cde2O9fg5V_AKtT3U0_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v30 = *(void *)(a1 + 16);
  if (*(void *)(a2 + 16) >= v30) {
    int64_t v4 = *(void *)(a1 + 16);
  }
  else {
    int64_t v4 = *(void *)(a2 + 16);
  }
  uint64_t v33 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v31 = a2;
  uint64_t v32 = a1;
  int64_t v28 = v4;
  if (v4)
  {
    uint64_t v5 = (id *)(a1 + 32);
    id v6 = (void **)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v7 = v4;
    while (1)
    {
      id v8 = *v5;
      uint64_t v9 = *v6;
      id v10 = *v5;
      id v11 = v9;
      if (!v8) {
        break;
      }
      uint64_t v12 = v11;
      type metadata accessor for RIOPxrSdfAssetPathRef(0);
      lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
      char v13 = static _CFObject.== infix(_:_:)();

      unint64_t v15 = *(void *)(v33 + 16);
      unint64_t v14 = *(void *)(v33 + 24);
      if (v15 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      }
      *(void *)(v33 + 16) = v15 + 1;
      *(unsigned char *)(v33 + v15 + 32) = (v13 & 1) == 0;
      ++v5;
      ++v6;
      if (!--v7) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_12:
    if (v30 <= v29)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    unint64_t v16 = v29 - v28;
    unint64_t v17 = v30 - v28;
    uint64_t v18 = 8 * v28 + 32;
    unint64_t v19 = (void **)(v32 + v18);
    unint64_t v20 = (void **)(v31 + v18);
    while (v17)
    {
      if (v16)
      {
        long long v21 = *v19;
        long long v22 = *v20;
        type metadata accessor for RIOPxrSdfAssetPathRef(0);
        lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
        id v23 = v21;
        id v24 = v22;
        char v25 = static _CFObject.== infix(_:_:)();

        unint64_t v27 = *(void *)(v33 + 16);
        unint64_t v26 = *(void *)(v33 + 24);
        if (v27 >= v26 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        }
        *(void *)(v33 + 16) = v27 + 1;
        *(unsigned char *)(v33 + v27 + 32) = (v25 & 1) == 0;
        --v16;
        ++v19;
        ++v20;
        if (--v17) {
          continue;
        }
      }
      goto LABEL_19;
    }
    __break(1u);
    __break(1u);
  }
  __break(1u);
}

uint64_t one-time initialization function for virtualEnvProbeComponent()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.virtualEnvProbeComponent = result;
  return result;
}

id one-time initialization function for modeAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static VirtualEnvironmentProbeComponentBuilder.modeAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for relativeWeightPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static VirtualEnvironmentProbeComponentBuilder.relativeWeightPropertyName = (uint64_t)result;
  return result;
}

Swift::Int VirtualEnvironmentProbeComponentBuilder.inputDescriptors()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24E0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v3 = static EntityBuilder.OutputName;
  uint64_t v2 = *(void *)algn_268A4BAA8;
  uint64_t v4 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  *(void *)(inited + 32) = v3;
  uint64_t v6 = static EntityBuilder.OutputIdentifier;
  uint64_t v5 = qword_268A584E0;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 56) = v5;
  *(unsigned char *)(inited + 80) = 112;
  int64_t v7 = *(void **)(v0 + 16);
  *(_OWORD *)(inited + 88) = xmmword_23AAB70D0;
  *(void *)(inited + 104) = 0xD000000000000020;
  *(void *)(inited + 112) = 0x800000023AAACFC0;
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 128) = 1;
  *(unsigned char *)(inited + 136) = 32;
  swift_bridgeObjectRetain();
  id v8 = v7;
  Swift::Int v9 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v9;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  void v7[2] = a1;
  id v8 = v1;
  uint64_t v9 = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:);
  *(void *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_19;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  Inputs.prim.getter();
  uint64_t v3 = (void *)RIOPxrUsdObjectCopyName();
  uint64_t v4 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v8 = (id)static VirtualEnvironmentProbeComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_30:
    VirtualEnvironmentProbeComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  uint64_t v9 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v10 = RIOPxrUsdAttributeCopyValue();
  if (!v10)
  {
    swift_bridgeObjectRelease();

    goto LABEL_30;
  }
  id v11 = (void *)v10;
  uint64_t v12 = RIOPxrVtValueCopyToken();
  if (!v12)
  {
    swift_bridgeObjectRelease();

    goto LABEL_30;
  }
  char v13 = (void *)v12;

  unint64_t v14 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == 0xD000000000000022 && v17 == 0x800000023AAB0470)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_13:
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for virtualEnvProbeComponent != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_23AAB24E0;
      char v36 = (void *)RIOPxrUsdObjectCopyPath();
      uint64_t v37 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;

      uint64_t v41 = MEMORY[0x263F8D310];
      *(void *)(v35 + 56) = MEMORY[0x263F8D310];
      unint64_t v42 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v35 + 32) = v38;
      *(void *)(v35 + 40) = v40;
      *(void *)(v35 + 96) = v41;
      *(void *)(v35 + 104) = v42;
      *(void *)(v35 + 64) = v42;
      *(void *)(v35 + 72) = v5;
      *(void *)(v35 + 80) = v7;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v19 = static EntityBuilder.OutputName;
  uint64_t v20 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v19, v20, &v77);
  if (!v78)
  {
    outlined destroy of Any?((uint64_t)&v77);
    goto LABEL_54;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_54:
    swift_bridgeObjectRelease();
    if (one-time initialization token for virtualEnvProbeComponent != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_23AAB22A0;
    *(void *)(v48 + 56) = MEMORY[0x263F8D310];
    *(void *)(v48 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v48 + 32) = v5;
    *(void *)(v48 + 40) = v7;
    os_log(_:dso:log:type:_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((RIOPxrUsdPrimIsActive() & 1) == 0)
  {
    VirtualEnvironmentProbeComponentBuilder.clear(inputs:)();
    swift_release();
    return swift_release();
  }
  __AssetRef.__as<A>(_:)();
  REVirtualEnvironmentProbeComponentGetComponentType();
  uint64_t v21 = REEntityGetOrAddComponentByClass();
  swift_beginAccess();
  uint64_t v22 = (uint64_t)objc_getAssociatedObject((id)a2, &static BuilderAssociatedKeys.CoreReference);
  swift_endAccess();
  if (!v22)
  {
    __break(1u);
LABEL_108:
    uint64_t v57 = v22;
    uint64_t v21 = v73;
    if (!v22) {
      goto LABEL_109;
    }
LABEL_81:
    uint64_t v58 = 0;
    float v59 = 0.0;
    while (1)
    {
      if ((v74 & 0xC000000000000001) != 0) {
        MEMORY[0x23ECBA630](v58, v74);
      }
      else {
        swift_retain();
      }
      if (one-time initialization token for relativeWeightPropertyName != -1) {
        swift_once();
      }
      id v60 = (id)static VirtualEnvironmentProbeComponentBuilder.relativeWeightPropertyName;
      if (!RIOPxrUsdPrimHasAttribute()) {
        break;
      }
      uint64_t v61 = RIOPxrUsdPrimCopyAttribute();
      type metadata accessor for AnyAttribute();
      uint64_t v62 = (void *)swift_allocObject();
      v62[2] = v61;
      EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
      if (!EmptyValue) {
        EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
      }
      outlined consume of Result<AnyAttribute, Object.Error>(v62, 0);

      LODWORD(v77) = 0;
      char Float = RIOPxrVtValueGetFloat();

      uint64_t v21 = v73;
      if ((Float & 1) == 0) {
        goto LABEL_95;
      }
      float v65 = *(float *)&v77;
LABEL_96:
      float v59 = v59 + v65;
      REVirtualEnvironmentProbeComponentSetRelativeWeight();
      if (one-time initialization token for intensityPropertyName != -1) {
        swift_once();
      }
      id v66 = (id)static VirtualEnvironmentProbeComponentBuilder.intensityPropertyName;
      if (RIOPxrUsdPrimHasAttribute())
      {
        uint64_t v67 = RIOPxrUsdPrimCopyAttribute();
        type metadata accessor for AnyAttribute();
        uint64_t v68 = (void *)swift_allocObject();
        v68[2] = v67;
        id v69 = (void *)RIOPxrUsdAttributeCopyValue();
        if (!v69) {
          id v69 = (void *)RIOPxrVtValueCreateEmptyValue();
        }
        outlined consume of Result<AnyAttribute, Object.Error>(v68, 0);

        LODWORD(v77) = 0;
        RIOPxrVtValueGetFloat();

        uint64_t v21 = v73;
      }
      else
      {
        *(void *)&long long v77 = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
      }
      REVirtualEnvironmentProbeComponentSetIntensityExponent();
      swift_release();
      if (v57 == ++v58) {
        goto LABEL_109;
      }
    }
    *(void *)&long long v77 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

LABEL_95:
    float v65 = 1.0;
    goto LABEL_96;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v76, &v77);
  type metadata accessor for RIOBuilderRef(0);
  swift_dynamicCast();
  RIOBuilderAddComponent();

  unint64_t v23 = VirtualEnvironmentProbeComponentBuilder.getIBLResourcePrims(fromPrim:)();
  swift_retain();
  id v24 = specialized Sequence.compactMap<A>(_:)(v23);
  swift_release();
  uint64_t ResourceCount = REVirtualEnvironmentProbeComponentGetResourceCount();
  uint64_t v26 = *(void *)(a2 + 32);
  uint64_t v73 = v21;
  unint64_t v74 = v23;
  unint64_t v27 = v23 >> 62;
  unint64_t v71 = v27;
  uint64_t v72 = ResourceCount;
  if (ResourceCount != *(void *)(v26 + 16)) {
    goto LABEL_59;
  }
  if (v27) {
    goto LABEL_104;
  }
  uint64_t v28 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v72 == v28)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = swift_bridgeObjectRetain();
      _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay9RealityIO27SceneDescriptionFoundationsO9AssetPathVGAMG_Sbs5NeverOTg503_s9f4IO27hij2O9kl21VAESbIgnnd_AE_AEtSbs5M130OIegnrzr_TR03_s9a82IO39VirtualEnvironmentProbeComponentBuilderC3run6inputsyAA6InputsC_tFyyXEfU_SbAA27cde2O9fg5V_AKtT3U0_Tf3nnnpf_nTf1cn_n(v29, v26);
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v27 = v71;
      if (v72)
      {
        uint64_t v32 = v72;
        char v70 = v24;
        if ((unint64_t)(v72 - 1) < *(void *)(v31 + 16))
        {
          uint64_t v33 = 0;
          while (1)
          {
            if ((v74 & 0xC000000000000001) != 0) {
              MEMORY[0x23ECBA630](v33, v74);
            }
            else {
              swift_retain();
            }
            if (*(unsigned char *)(v31 + v33 + 32) == 1) {
              break;
            }
            swift_release();
LABEL_39:
            if (v32 == ++v33) {
              goto LABEL_75;
            }
          }
          uint64_t v43 = v31;
          if (one-time initialization token for iblPropertyName != -1) {
            swift_once();
          }
          id v44 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
          if (RIOPxrUsdPrimHasAttribute())
          {
            uint64_t v45 = RIOPxrUsdPrimCopyAttribute();

            type metadata accessor for AnyAttribute();
            uint64_t v46 = (void *)swift_allocObject();
            v46[2] = v45;
            Inputs.createIBLAsset(on:)();
            if (v47)
            {
              uint64_t v21 = v73;
              REVirtualEnvironmentProbeComponentSetResource();
              RERelease();
              swift_release();
              outlined consume of Result<AnyAttribute, Object.Error>(v46, 0);
LABEL_52:
              uint64_t v31 = v43;
              uint64_t v32 = v72;
              goto LABEL_39;
            }
            outlined consume of Result<AnyAttribute, Object.Error>(v46, 0);
            uint64_t v21 = v73;
          }
          else
          {

            *(void *)&long long v77 = 0;
            lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
            swift_willThrowTypedImpl();
            outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
          }
          REVirtualEnvironmentProbeComponentSetResource();
          swift_release();
          goto LABEL_52;
        }
LABEL_106:
        __break(1u);
      }
    }
    else
    {
      unint64_t v27 = v71;
LABEL_59:
      *(void *)(a2 + 32) = MEMORY[0x263F8EE78];
      swift_bridgeObjectRelease();
      REVirtualEnvironmentProbeComponentClearResources();
      if (v27)
      {
        swift_bridgeObjectRetain();
        uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
        if (!v49) {
          goto LABEL_78;
        }
LABEL_61:
        char v70 = v24;
        if (v49 < 1)
        {
          __break(1u);
          goto LABEL_106;
        }
        uint64_t v50 = 0;
        while (2)
        {
          if ((v74 & 0xC000000000000001) != 0) {
            MEMORY[0x23ECBA630](v50, v74);
          }
          else {
            swift_retain();
          }
          if (one-time initialization token for iblPropertyName != -1) {
            swift_once();
          }
          id v53 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
          if (RIOPxrUsdPrimHasAttribute())
          {
            uint64_t v54 = RIOPxrUsdPrimCopyAttribute();

            type metadata accessor for AnyAttribute();
            char v55 = (void *)swift_allocObject();
            void v55[2] = v54;
            Inputs.createIBLAsset(on:)();
            if (v56)
            {
              uint64_t v21 = v73;
              REVirtualEnvironmentProbeComponentAddResource();
              RERelease();
              swift_release();
              uint64_t v51 = v55;
              char v52 = 0;
LABEL_64:
              outlined consume of Result<AnyAttribute, Object.Error>(v51, v52);
            }
            else
            {
              swift_release();
              outlined consume of Result<AnyAttribute, Object.Error>(v55, 0);
              uint64_t v21 = v73;
            }
            if (v49 == ++v50)
            {
LABEL_75:
              swift_bridgeObjectRelease();
              id v24 = v70;
              unint64_t v27 = v71;
              goto LABEL_79;
            }
            continue;
          }
          break;
        }

        *(void *)&long long v77 = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        swift_release();
        uint64_t v51 = 0;
        char v52 = 1;
        goto LABEL_64;
      }
      uint64_t v49 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v49) {
        goto LABEL_61;
      }
    }
LABEL_78:
    swift_bridgeObjectRelease();
LABEL_79:
    *(void *)(a2 + 32) = v24;
    swift_bridgeObjectRelease();
    if (!v27) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v22 & 0x8000000000000000) == 0) {
      goto LABEL_108;
    }
    __break(1u);
LABEL_104:
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(a2 + 32);
  }
  uint64_t v57 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v57) {
    goto LABEL_81;
  }
LABEL_109:
  swift_bridgeObjectRelease();
  MEMORY[0x23ECBAEA0](v21);
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)(a2 + 41) = 1;
  return result;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.clear(inputs:)()
{
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v1, &v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 41) & 1) == 0) {
    return swift_release();
  }
  *(void *)(v0 + 32) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  __AssetRef.__as<A>(_:)();
  REVirtualEnvironmentProbeComponentGetComponentType();
  REEntityRemoveComponentByClass();
  uint64_t result = swift_release();
  *(unsigned char *)(v0 + 41) = 0;
  return result;
}

unint64_t VirtualEnvironmentProbeComponentBuilder.getIBLResourcePrims(fromPrim:)()
{
  unsigned __int8 v0 = specialized VirtualEnvironmentProbeComponentBuilder.getMode(fromPrim:)();
  if (v0 == 3) {
    unsigned __int8 v1 = 2;
  }
  else {
    unsigned __int8 v1 = v0;
  }
  unint64_t result = Prim.children.getter();
  unint64_t v3 = result;
  uint64_t v20 = MEMORY[0x263F8EE78];
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    goto LABEL_28;
  }
LABEL_6:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = v3 & 0xC000000000000001;
    unint64_t v18 = v3;
    while (1)
    {
      if (v7)
      {
        MEMORY[0x23ECBA630](v5, v3);
        if (v6 < v1) {
          goto LABEL_14;
        }
      }
      else
      {
        swift_retain();
        if (v6 < v1)
        {
LABEL_14:
          uint64_t v8 = v4;
          uint64_t v9 = (void *)RIOPxrUsdPrimCopyTypeName();
          uint64_t v10 = *(void **)(v19 + 16);
          type metadata accessor for RIOPxrTfTokenRef(0);
          lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
          id v11 = v10;
          char v12 = static _CFObject.== infix(_:_:)();

          if (v12)
          {
            if (one-time initialization token for iblPropertyName != -1) {
              swift_once();
            }
            id v13 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
            if (RIOPxrUsdPrimHasAttribute())
            {
              uint64_t v14 = RIOPxrUsdPrimCopyAttribute();
              type metadata accessor for AnyAttribute();
              uint64_t v15 = (void *)swift_allocObject();
              v15[2] = v14;
              EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
              if (!EmptyValue) {
                EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
              }
              outlined consume of Result<AnyAttribute, Object.Error>(v15, 0);

              uint64_t v17 = (void *)RIOPxrVtValueCopyAssetPath();
              if (v17)
              {

                ++v6;
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
              }
              else
              {
                swift_release();
              }
            }
            else
            {
              lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
              swift_willThrowTypedImpl();
              outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
              swift_release();
            }
          }
          else
          {
            swift_release();
          }
          uint64_t v4 = v8;
          unint64_t v3 = v18;
          goto LABEL_9;
        }
      }
      swift_release();
LABEL_9:
      if (v4 == ++v5)
      {
        swift_bridgeObjectRelease();
        return v20;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VirtualEnvironmentProbeComponentBuilder()
{
  return self;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.init()()
{
  if (String.count.getter() < 1) {
    id v1 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v1 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = 1065353216;
  *(void *)(v0 + 32) = MEMORY[0x263F8EE78];
  *(_WORD *)(v0 + 40) = 2;
  return v0;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance VirtualEnvironmentProbeComponentBuilder()
{
  uint64_t v0 = specialized closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v5 = inited;
  specialized Array._endMutation()();
  uint64_t v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      unint64_t v3 = v1 & 0xC000000000000001;
      uint64_t v19 = (void *)MEMORY[0x263F8EE78];
      uint64_t v4 = 4;
      unint64_t v5 = 0x268A49000uLL;
      while (1)
      {
        uint64_t v6 = v4 - 4;
        if (v3)
        {
          MEMORY[0x23ECBA630](v4 - 4, v1);
          uint64_t v7 = v4 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_24;
          }
        }
        else
        {
          swift_retain();
          uint64_t v7 = v4 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        if (*(void *)(v5 + 2592) != -1) {
          swift_once();
        }
        id v8 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
        if (RIOPxrUsdPrimHasAttribute())
        {
          unint64_t v9 = v1;
          uint64_t v10 = v2;
          unint64_t v11 = v3;
          uint64_t v12 = RIOPxrUsdPrimCopyAttribute();
          type metadata accessor for AnyAttribute();
          id v13 = (void *)swift_allocObject();
          _OWORD v13[2] = v12;
          EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
          if (!EmptyValue) {
            EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
          }
          outlined consume of Result<AnyAttribute, Object.Error>(v13, 0);

          uint64_t v15 = RIOPxrVtValueCopyAssetPath();
          swift_release();

          if (v15)
          {
            unint64_t v3 = v11;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
            }
            uint64_t v2 = v10;
            unint64_t v17 = v19[2];
            unint64_t v16 = v19[3];
            unint64_t v1 = v9;
            if (v17 >= v16 >> 1) {
              uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v19);
            }
            unint64_t v5 = 0x268A49000;
            v19[2] = v17 + 1;
            v19[v17 + 4] = v15;
          }
          else
          {
            unint64_t v3 = v11;
            uint64_t v2 = v10;
            unint64_t v1 = v9;
            unint64_t v5 = 0x268A49000;
          }
        }
        else
        {
          lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
          swift_willThrowTypedImpl();
          outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
          swift_release();
        }
        ++v4;
        if (v7 == v2)
        {
          swift_bridgeObjectRelease();
          return v19;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return (void *)MEMORY[0x263F8EE78];
}

uint64_t specialized closure #1 in closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static VirtualEnvironmentProbeComponentBuilder.infoID;
  type metadata accessor for NamedPropertyDirtyState();
  unint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = v0;
  uint64_t v3 = MEMORY[0x263F8EE88];
  id v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x263F8EE88]);

  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = one-time initialization token for modeAttributeName;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static VirtualEnvironmentProbeComponentBuilder.modeAttributeName;
  uint64_t v7 = (void *)swift_allocObject();
  v7[4] = v6;
  id v8 = v6;
  id v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  void v7[2] = v3;
  void v7[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2570;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v7;
  unint64_t v13 = inited;
  specialized Array._endMutation()();
  uint64_t v11 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t specialized closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for realityKitComponentTypeName != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static VirtualEnvironmentProbeComponentBuilder.realityKitComponentTypeName;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v0;
  id v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = specialized closure #1 in closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v6 = (void *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8EE88];
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x263F8EE88]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AAB22C0;
  *(void *)(v9 + 32) = v6;
  unint64_t v12 = v9;
  specialized Array._endMutation()();
  uint64_t v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v12);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized VirtualEnvironmentProbeComponentBuilder.getMode(fromPrim:)()
{
  if (one-time initialization token for modeAttributeName != -1) {
    swift_once();
  }
  id v0 = (id)static VirtualEnvironmentProbeComponentBuilder.modeAttributeName;
  unint64_t v1 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  if (!v1) {
    return 3;
  }
  id v2 = (void *)RIOPxrVtValueCopyToken();

  if (!v2) {
    return 3;
  }
  uint64_t v3 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  unint64_t v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VirtualEnvironmentProbeComponentBuilder.Mode.init(rawValue:), v7);
  swift_bridgeObjectRelease();
  if (v8 >= 3) {
    return 3;
  }
  else {
    return v8;
  }
}

uint64_t partial apply for closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:)()
{
  return closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_23AA663B8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Prim.children.getter()
{
  return Prim.children.getter(MEMORY[0x263F379C8]);
}

uint64_t type metadata accessor for Prim()
{
  return self;
}

uint64_t Prim.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimCopyTypeName();
  *a1 = result;
  return result;
}

uint64_t Object.path.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdObjectCopyPath();
  *a1 = result;
  return result;
}

uint64_t Object.name.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdObjectCopyName();
  *a1 = result;
  return result;
}

uint64_t Prim.attribute(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Prim.attribute(of:)(a1, MEMORY[0x263F37A48], MEMORY[0x263F379A8], (void (*)(void))type metadata accessor for AnyAttribute, a2);
}

uint64_t type metadata accessor for AnyAttribute()
{
  return self;
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t AnyAttribute.value.getter()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (!result)
  {
    return RIOPxrVtValueCreateEmptyValue();
  }
  return result;
}

uint64_t Prim.relationship(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Prim.attribute(of:)(a1, MEMORY[0x263F37A50], MEMORY[0x263F37A00], (void (*)(void))type metadata accessor for Relationship, a2);
}

uint64_t Prim.attribute(of:)@<X0>(void *a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(v5 + 16);
  int v11 = a2(v10, *a1);
  if (v11)
  {
    uint64_t v12 = a3(v10, v9);
    a4();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v11 ^ 1;
  return result;
}

uint64_t type metadata accessor for Relationship()
{
  return self;
}

uint64_t Relationship.targets.getter()
{
  return Relationship.targets.getter(MEMORY[0x263F37A78], type metadata accessor for RIOPxrSdfPathRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void Prim.attributeValue<A>(of:type:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (RIOPxrUsdPrimHasAttribute())
  {
    id v7 = (id)RIOPxrUsdPrimCopyAttribute();
    (*(void (**)(id, uint64_t, uint64_t, double))(a2 + 16))(v7, a1, a2, NAN);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    v6(a3, 1, 1, a1);
  }
}

uint64_t Relationship.target.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = Relationship.targets.getter();
  if (*(void *)(v2 + 16))
  {
    id v3 = *(id *)(v2 + 32);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = RIOPxrSdfPathCreateEmptyPath();
    id v3 = (id)result;
  }
  *a1 = v3;
  return result;
}

uint64_t Prim.active.getter()
{
  return RIOPxrUsdPrimIsActive();
}

uint64_t Prim.descendants.getter()
{
  return Prim.children.getter(MEMORY[0x263F379D8]);
}

uint64_t Prim.children.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)a1(*(void *)(v1 + 16));
  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v5 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = v7 + 1;
        uint64_t v9 = MEMORY[0x23ECBA630]();
        type metadata accessor for Prim();
        *(void *)(swift_allocObject() + 16) = v9;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v7 = v8;
      }
      while (v5 != v8);
    }
    else
    {
      uint64_t v10 = (void **)(v4 + 32);
      type metadata accessor for Prim();
      do
      {
        int v11 = *v10++;
        *(void *)(swift_allocObject() + 16) = v11;
        id v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v5;
      }
      while (v5);
    }
    uint64_t v13 = v3;
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t Prim.parent.getter()
{
  uint64_t v0 = (void *)RIOPxrUsdObjectCopyName();
  if (String.count.getter() < 1) {
    id v1 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v1 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v2 = v1;
  type metadata accessor for RIOPxrTfTokenRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
  char v3 = static _CFObject.== infix(_:_:)();

  uint64_t result = 0;
  if ((v3 & 1) == 0)
  {
    uint64_t result = RIOPxrUsdPrimCopyParent();
    if (result)
    {
      uint64_t v5 = result;
      type metadata accessor for Prim();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v5;
    }
  }
  return result;
}

Swift::Bool __swiftcall Prim.evaluateIsEntityOnExport()()
{
  return RIOPxrUsdPrimEvaluateEntityOnExport();
}

uint64_t Object.isValid.getter()
{
  return RIOPxrUsdObjectIsValid();
}

uint64_t Object.authoredMetadata()()
{
  return Object.authoredMetadata()(MEMORY[0x263F37960]);
}

uint64_t VariantSets.getNames()()
{
  return VariantSets.getNames()(MEMORY[0x263F37B30]);
}

uint64_t VariantSets.getVariantSet(variantSetName:)(uint64_t a1, uint64_t a2)
{
  return VariantSets.getVariantSet(variantSetName:)(a1, a2, MEMORY[0x263F37B38]);
}

uint64_t VariantSet.variantNames()()
{
  return VariantSets.getNames()(MEMORY[0x263F37B20]);
}

uint64_t VariantSets.getNames()(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v1 + 16));
  if (result) {
    uint64_t result = static Array._forceBridgeFromObjectiveC(_:result:)();
  }
  else {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Prim.getVariantSets()()
{
  uint64_t v0 = RIOPxrUsdPrimCopyVariantSets();
  type metadata accessor for VariantSets();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

Swift::Void __swiftcall VariantSet.setVariantSelection(variantName:)(Swift::String variantName)
{
  String.utf8CString.getter();
  RIOPxrUsdVariantSetSetVariantSelection();
  swift_release();
}

uint64_t Prim.attributes()()
{
  return Prim.attributes()(MEMORY[0x263F379B0]);
}

uint64_t AnyAttribute.type.getter()
{
  uint64_t v0 = (void *)RIOPxrUsdAttributeCopyTypeName();
  RIOPxrSdfValueTypeNameRef.type.getter();
  uint64_t v2 = v1;

  return v2;
}

uint64_t static Object.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t Prim.addReference(assetURL:path:)(uint64_t a1, uint64_t *a2)
{
  return Prim.addReference(assetURL:path:)(a1, a2, MEMORY[0x263F06E98], MEMORY[0x263F37998]);
}

uint64_t Prim.addReference(assetPath:path:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return Prim.addReference(assetPath:path:)(a1, a2, a3, MEMORY[0x263F37998]);
}

uint64_t Prim.attributeValueResult<A>(of:type:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v19 = v6;
    uint64_t v13 = (void *)RIOPxrUsdPrimCopyAttribute();
    (*(void (**)(void *, uint64_t, uint64_t, double))(a2 + 16))(v13, a1, a2, NAN);
    int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a1);
    uint64_t v15 = v20;
    if (v14 == 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v5);
      uint64_t v16 = RIOPxrUsdAttributeCopyTypeName();

      *uint64_t v15 = v16;
    }
    else
    {

      unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v18(v12, v8, a1);
      v18((char *)v15, v12, a1);
    }
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t *v20 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
}

void Object.subscript.setter(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    unint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    if (String.count.getter() < 1) {
      id v19 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v19 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v21 = v19;
    RIOPxrUsdObjectClearMetadata();
    v18(a1, v8);
  }
  else
  {
    char v25 = a1;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    if (String.count.getter() < 1) {
      id v20 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v20 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v22 = v20;
    unint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectMetadataSetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;

  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    unint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    RIOPxrUsdObjectClearMetadata();
    v18(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    id v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectMetadataSetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;

  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    unint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    if (String.count.getter() < 1) {
      id v19 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v19 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v21 = v19;
    RIOPxrUsdObjectCustomDataDictionaryClearValue();
    v18(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    id v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectUiInfoDictionarySetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;

  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    unint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    if (String.count.getter() < 1) {
      id v19 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v19 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v21 = v19;
    RIOPxrUsdObjectCustomDataDictionaryClearValue();
    v18(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    id v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectAccessibilityInfoDictionarySetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

char *StaticTypePrim.init(prim:type:)(uint64_t a1)
{
  uint64_t v1 = specialized StaticTypePrim.init(prim:type:)(a1);
  swift_release();
  return v1;
}

uint64_t StaticTypePrim.deinit()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v2 = type metadata accessor for Properties();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t StaticTypePrim.properties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Properties();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StaticTypePrim.subscript.getter()
{
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for Properties();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - v2;
  StaticTypePrim.properties.getter((uint64_t)&v6 - v2);
  uint64_t v4 = specialized Properties.subscript.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t StaticTypePrim.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *(void *)(v2 + 16);
  swift_retain();
  uint64_t v5 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x263F8E100] + v4 + 8) - 8) + 16))(a2);
  v5(v7, 0);
  return swift_release();
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized StaticTypePrim.subscript.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x263F8E100] + v3 + 8) - 8) + 8);
  return v4(a1);
}

void (*StaticTypePrim.subscript.modify(void *a1, uint64_t *a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x263F8E100] + *a2 + 8);
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  StaticTypePrim.subscript.getter(a2, (uint64_t)v9);
  return StaticTypePrim.subscript.modify;
}

void StaticTypePrim.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v4);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t StaticTypePrim.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - v8;
  StaticTypePrim.properties.getter((uint64_t)&v11 - v8);
  Properties.subscript.getter(a1, v6, a2, a3, NAN);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  specialized StaticTypePrim.subscript.setter(a1, a2, a3);
  swift_release();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*StaticTypePrim.subscript.modify(void *a1, uint64_t *a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  uint64_t v8 = type metadata accessor for Optional();
  void v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[6] = v11;
  StaticTypePrim.subscript.getter(a2, a3, (uint64_t)v11);
  return StaticTypePrim.subscript.modify;
}

void StaticTypePrim.subscript.modify(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[5];
  uint64_t v4 = (*a1)[6];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = (uint64_t)(*a1)[1];
  uint64_t v8 = **a1;
  if (a2)
  {
    ((void (*)(void *, void *, void *))v6[2])((*a1)[5], v4, v5);
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v3, v8, v7);
    swift_release();
    uint64_t v9 = (void (*)(void *, void *))v6[1];
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v4, v8, v7);
    swift_release();
    ((void (*)(void *, void *))v6[1])(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  double v10;
  void *v11;
  void (*v12)(void *, void *);
  uint64_t vars8;

  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[7];
  uint64_t v4 = (*a1)[8];
  uint64_t v5 = (*a1)[5];
  uint64_t v6 = (*a1)[6];
  uint64_t v7 = (uint64_t)(*a1)[3];
  uint64_t v8 = (unint64_t)(*a1)[2];
  uint64_t v9 = *((unsigned __int8 *)*a1 + 72);
  size_t v10 = *((double *)*a1 + 1);
  uint64_t v11 = **a1;
  if (a2)
  {
    ((void (*)(void *, void *, void *))v6[2])((*a1)[7], v4, v5);
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v3, v11, v9, v8, v7, v10);
    swift_release();
    uint64_t v12 = (void (*)(void *, void *))v6[1];
    v12(v3, v5);
    v12(v4, v5);
  }
  else
  {
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v4, v11, v9, v8, v7, v10);
    swift_release();
    ((void (*)(void *, void *))v6[1])(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t StaticTypePrim.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = type metadata accessor for Properties();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v13 - v10;
  StaticTypePrim.properties.getter((uint64_t)&v13 - v10);
  Properties.subscript.getter(a1, v8, a2, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1, void *a2, int a3, unint64_t a4, uint64_t a5, double a6)
{
  specialized StaticTypePrim.subscript.setter(a1, a2, a3, a4, a5, a6);
  swift_release();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(a1, v7);
}

void (*StaticTypePrim.subscript.modify(void *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, double a6))(void ***a1, char a2)
{
  uint64_t v13 = malloc(0x50uLL);
  *a1 = v13;
  v13[3] = a5;
  v13[4] = v6;
  _OWORD v13[2] = a4;
  *((unsigned char *)v13 + 72) = a3;
  *((double *)v13 + 1) = a6;
  *uint64_t v13 = a2;
  uint64_t v14 = type metadata accessor for Optional();
  v13[5] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v13[6] = v15;
  size_t v16 = *(void *)(v15 + 64);
  v13[7] = malloc(v16);
  unint64_t v17 = malloc(v16);
  v13[8] = v17;
  StaticTypePrim.subscript.getter(a2, a5, (uint64_t)v17, a6);
  return StaticTypePrim.subscript.modify;
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1)
{
  specialized StaticTypePrim.subscript.setter(a1);
  return swift_release();
}

uint64_t (*StaticTypePrim.subscript.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = StaticTypePrim.subscript.getter();
  return StaticTypePrim.subscript.modify;
}

uint64_t StaticTypePrim.subscript.modify(uint64_t *a1, char a2)
{
  return StaticTypePrim.subscript.modify(a1, a2, (void (*)(uint64_t, uint64_t))specialized StaticTypePrim.subscript.setter);
}

uint64_t StaticTypePrim.subscript.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    a3(v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    a3(v5, v4);
  }
  return swift_release();
}

uint64_t StaticTypePrim.prim.getter()
{
  return swift_retain();
}

uint64_t MaterialCollectionBinding.__allocating_init(materialBindingAPI:base:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

void Prim.type.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdPrimSetTypeName();
}

uint64_t Prim.properties<A>(of:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - v14;
  int v16 = swift_dynamicCast();
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v16)
  {
    v17(v8, 0, 1, a1);
    unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v18(v15, v8, a1);
    v18(v12, v15, a1);
    *(void *)a2 = v2;
    uint64_t v19 = type metadata accessor for Properties();
    v18(&a2[*(int *)(v19 + 28)], v12, a1);
    return swift_retain();
  }
  else
  {
    v17(v8, 1, 1, a1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Properties.subscript.setter(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  specialized Properties.subscript.setter(a1, a2, a3, a4);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(a1, v5);
}

void Prim.setAttribute<A>(of:value:at:custom:variability:)(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>, double a5@<D0>)
{
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v14, a2, a3);
  uint64_t v10 = v14;
  uint64_t Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  char v12 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, double))(a3 + 8))(a1, Attribute, a2, a3, a5);
  if (v12)
  {

    type metadata accessor for Attribute();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = Attribute;
  }
  else
  {
    uint64_t v13 = RIOPxrUsdAttributeCopyTypeName();
  }
  *(void *)a4 = v13;
  *(unsigned char *)(a4 + 8) = (v12 & 1) == 0;
}

uint64_t AnyAttribute.deinit()
{
  return v0;
}

uint64_t AnyAttribute.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t VariantSet.deinit()
{
  return v0;
}

uint64_t VariantSet.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall VariantSet.hasAuthoredVariant(variantName:)(Swift::String variantName)
{
  return VariantSet.hasAuthoredVariant(variantName:)(variantName._countAndFlagsBits, (uint64_t)variantName._object, MEMORY[0x263F37B10]);
}

Swift::Void __swiftcall VariantSet.addVariant(variantName:)(Swift::String variantName)
{
  String.utf8CString.getter();
  RIOPxrUsdVariantSetAddVariant();
  swift_release();
}

Swift::Bool __swiftcall VariantSet.hasAuthoredVariantSelection()()
{
  return RIOPxrUsdVariantSetHasAuthoredVariantSelection();
}

uint64_t VariantSet.hasAuthoredVariantSelectionOnLayer(layer:)()
{
  return RIOPxrUsdVariantSetHasAuthoredVariantSelectionOnLayer();
}

Swift::String __swiftcall VariantSet.getVariantSelection()()
{
  uint64_t v0 = VariantSet.getVariantSelection()(MEMORY[0x263F37B28]);
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall VariantSet.clearVariantSelection()()
{
  return RIOPxrUsdVariantSetClearVariantSelection();
}

uint64_t VariantSet.getPrim()()
{
  uint64_t v0 = RIOPxrUsdVariantSetCopyPrim();
  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

Swift::String __swiftcall VariantSet.getName()()
{
  uint64_t v0 = VariantSet.getVariantSelection()(MEMORY[0x263F37B18]);
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t VariantSet.getVariantSelection()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)a1(*(void *)(v1 + 16));
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t VariantSet.isValid.getter()
{
  return RIOPxrUsdVariantSetIsValid();
}

uint64_t VariantSet.getEditTarget()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdVariantSetCopyEditTarget();
  *a1 = result;
  return result;
}

uint64_t VariantSets.addVariantSet(variantSetName:)(uint64_t a1, uint64_t a2)
{
  return VariantSets.getVariantSet(variantSetName:)(a1, a2, MEMORY[0x263F37B40]);
}

Swift::Bool __swiftcall VariantSets.hasVariantSet(variantSetName:)(Swift::String variantSetName)
{
  return VariantSet.hasAuthoredVariant(variantName:)(variantSetName._countAndFlagsBits, (uint64_t)variantSetName._object, MEMORY[0x263F37B48]);
}

uint64_t VariantSet.hasAuthoredVariant(variantName:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = String.utf8CString.getter();
  uint64_t v7 = a3(v5, v6 + 32);
  swift_release();
  return v7;
}

Swift::String __swiftcall VariantSets.getVariantSelection(variantSetName:)(Swift::String variantSetName)
{
  String.utf8CString.getter();
  uint64_t v1 = (void *)RIOPxrUsdVariantSetsCopyVariantSelection();
  swift_release();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::Bool __swiftcall VariantSets.setSelection(variantSetName:variantName:)(Swift::String variantSetName, Swift::String variantName)
{
  String.utf8CString.getter();
  String.utf8CString.getter();
  char v2 = RIOPxrUsdVariantSetsSetSelection();
  swift_release();
  swift_release();
  return v2;
}

uint64_t VariantSets.getAllVariantSelections()()
{
  RIOPxrUsdVariantSetsCopyAllVariantSelections();
  uint64_t result = static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

uint64_t MaterialCollectionBinding.init(materialBindingAPI:base:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t MaterialCollectionBinding.deinit()
{
  swift_release();

  return v0;
}

uint64_t MaterialCollectionBinding.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t MaterialCollectionBinding.materialPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingMaterialPath();
  *a1 = result;
  return result;
}

uint64_t MaterialCollectionBinding.collectionPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingCollectionPath();
  *a1 = result;
  return result;
}

uint64_t MaterialCollectionBinding.primCollectionName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingPrimCollectionName();
  *a1 = result;
  return result;
}

void MaterialCollectionBinding.bindingStrength.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v3 = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength();

  *a1 = v3;
}

void key path getter for MaterialCollectionBinding.bindingStrength : MaterialCollectionBinding(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  uint64_t v3 = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength();

  *a1 = v3;
}

void key path setter for MaterialCollectionBinding.bindingStrength : MaterialCollectionBinding(id *a1)
{
  id v2 = *a1;
  uint64_t v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();
}

void MaterialCollectionBinding.bindingStrength.setter(id *a1)
{
  id v2 = *a1;
  uint64_t v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();
}

void (*MaterialCollectionBinding.bindingStrength.modify(uint64_t *a1))(void **a1, char a2)
{
  a1[1] = *(void *)(v1 + 16);
  uint64_t v3 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  a1[2] = *(void *)(v1 + 24);
  uint64_t v4 = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength();

  *a1 = v4;
  return MaterialCollectionBinding.bindingStrength.modify;
}

void MaterialCollectionBinding.bindingStrength.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    id v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();
  }
  else
  {
    id v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();
  }
}

uint64_t Object.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t Object.description.getter()
{
  id v0 = (id)RIOPxrUsdObjectCopyPath();
  uint64_t v1 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t Object.debugDescription.getter()
{
  HIDWORD(v19._object) = -335544320;
  v0._uint64_t countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  strcpy((char *)&v19, "\n  - name : ");
  id v4 = (id)RIOPxrUsdObjectCopyName();
  uint64_t v5 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v19, "\n  - path : ");
  id v10 = (id)RIOPxrUsdObjectCopyPath();
  uint64_t v11 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x736162202D20200ALL;
  v16._object = (void *)0xEC000000203A2065;
  String.append(_:)(v16);
  type metadata accessor for RIOPxrUsdObjectRef(0);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Int Object.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Object()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Object()
{
  return _CFObject.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Object()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Object()
{
  id v0 = (id)RIOPxrUsdObjectCopyPath();
  Swift::String v1 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Object()
{
  return Object.debugDescription.getter();
}

uint64_t Object.allowedTokens.getter()
{
  return Object.allowedTokens.getter(MEMORY[0x263F37958], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void Object.allowedTokens.setter(uint64_t a1)
{
}

void (*Object.allowedTokens.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = Object.allowedTokens.getter();
  return Object.allowedTokens.modify;
}

void Object.allowedTokens.modify(uint64_t *a1, char a2)
{
}

uint64_t Object.inheritsPath.getter()
{
  return Object.allowedTokens.getter(MEMORY[0x263F37968], type metadata accessor for RIOPxrSdfPathRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void key path setter for Object.allowedTokens : Object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(uint64_t, Class))
{
  uint64_t v8 = *(void *)(*(void *)a2 + 16);
  uint64_t v9 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v9);
  swift_bridgeObjectRelease();
  a5(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a6(v8, isa);
}

void Object.inheritsPath.setter(uint64_t a1)
{
}

void Object.allowedTokens.setter(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, Class))
{
  uint64_t v6 = *(void *)(v3 + 16);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  swift_bridgeObjectRelease();
  a2(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a3(v6, isa);
}

void (*Object.inheritsPath.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = Object.inheritsPath.getter();
  return Object.inheritsPath.modify;
}

void Object.inheritsPath.modify(uint64_t *a1, char a2)
{
}

void Object.allowedTokens.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t, Class))
{
  uint64_t v6 = *(void *)(a1[3] + 16);
  if (a2)
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v7);
    swift_bridgeObjectRelease();
    a3(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a4(v6, isa);

    swift_bridgeObjectRelease();
  }
  else
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(*a1);
    swift_bridgeObjectRelease();
    a3(0);
    Class v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a4(v6, v9);
  }
}

uint64_t Object.registeredMetadataKeys.getter()
{
  return Relationship.targets.getter(MEMORY[0x263F37978], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Object.hasMetadata(_:path:)()
{
  return RIOPxrUsdObjectHasMetadataValue();
}

uint64_t Object.clearMetadata(_:path:)()
{
  return RIOPxrUsdObjectClearMetadata();
}

uint64_t Object.clearCustomDataDictionaryValue(_:path:)()
{
  return RIOPxrUsdObjectCustomDataDictionaryClearValue();
}

uint64_t Object.metadata()()
{
  return Object.authoredMetadata()(MEMORY[0x263F37970]);
}

uint64_t Object.authoredMetadata()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)a1(*(void *)(v1 + 16));
  type metadata accessor for RIOPxrTfTokenRef(0);
  type metadata accessor for RIOPxrVtValueRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE80];
}

void Object.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v4 = (void *)RIOPxrUsdObjectCopyMetadata();
  type metadata accessor for RIOPxrTfTokenRef(0);
  type metadata accessor for RIOPxrVtValueRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  v5(a2, 1, 1, a1);
}

{
  id v4;
  void *v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v7;
  uint64_t vars8;

  if (String.count.getter() < 1) {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v5 = v4;
  uint64_t v7 = (id)RIOPxrUsdObjectMetadataCopyValue();

  if (v7)
  {
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    v6(a2, 1, 1, a1);
  }
}

void (*Object.subscript.modify(void *a1, void **a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  Class v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  void v9[2] = v4;
  void *v9 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  uint64_t v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  id v15 = v14;
  Object.subscript.getter(a3, (uint64_t)v13);
  return Object.subscript.modify;
}

{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v17;

  Class v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  void v9[2] = v4;
  void *v9 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  uint64_t v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  Swift::String v17 = v14;
  id v15 = v14;
  Object.subscript.getter(&v17, a3, (uint64_t)v13);
  return Object.subscript.modify;
}

{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v17;

  Class v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  void v9[2] = v4;
  void *v9 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  uint64_t v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  Swift::String v17 = v14;
  id v15 = v14;
  Object.subscript.getter(&v17, a3, (uint64_t)v13);
  return Object.subscript.modify;
}

{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;

  Class v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  void v9[2] = v4;
  void *v9 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  uint64_t v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  id v15 = v14;
  Object.subscript.getter(a3, (uint64_t)v13);
  return Object.subscript.modify;
}

void Object.subscript.modify(uint64_t **a1, char a2)
{
}

{
  Object.subscript.modify(a1, a2, (void (*)(void *, uint64_t *, uint64_t, uint64_t))Object.subscript.setter);
}

{
  Object.subscript.modify(a1, a2, (void (*)(void *, uint64_t *, uint64_t, uint64_t))Object.subscript.setter);
}

{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t vars8;

  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[7];
  uint64_t v3 = (void *)(*a1)[8];
  uint64_t v5 = (char *)(*a1)[5];
  uint64_t v6 = (char *)(*a1)[6];
  if (a2)
  {
    uint64_t v7 = v2[3];
    uint64_t v8 = v2[4];
    Class v9 = v2[1];
    uint64_t v10 = *v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    uint64_t v13 = v4;
    uint64_t v14 = v3;
    Object.subscript.setter(v5, (void **)&v13, &v14, v10, v9);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    uint64_t v11 = v2[1];
    size_t v12 = *v2;
    uint64_t v13 = (*a1)[7];
    uint64_t v14 = v3;
    Object.subscript.setter(v6, (void **)&v13, &v14, v12, v11);
  }
  free(v6);
  free(v5);
  free(v2);
}

{
  Object.subscript.modify(a1, a2, (void (*)(void *, uint64_t *, uint64_t, uint64_t))Object.subscript.setter);
}

{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t vars8;

  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[7];
  uint64_t v3 = (void *)(*a1)[8];
  uint64_t v5 = (char *)(*a1)[5];
  uint64_t v6 = (char *)(*a1)[6];
  if (a2)
  {
    uint64_t v7 = v2[3];
    uint64_t v8 = v2[4];
    Class v9 = v2[1];
    uint64_t v10 = *v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    uint64_t v13 = v4;
    uint64_t v14 = v3;
    Object.subscript.setter(v5, (void **)&v13, &v14, v10, v9);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    uint64_t v11 = v2[1];
    size_t v12 = *v2;
    uint64_t v13 = (*a1)[7];
    uint64_t v14 = v3;
    Object.subscript.setter(v6, (void **)&v13, &v14, v12, v11);
  }
  free(v6);
  free(v5);
  free(v2);
}

void Object.subscript.getter(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

{
  Object.subscript.getter(a1, a2, MEMORY[0x263F37950], a3);
}

void key path getter for Object.subscript<A>(metadata:) : <A>ObjectA(uint64_t a1, id *a2, uint64_t a3, void (*a4)(id *, uint64_t, uint64_t))
{
  uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  id v8 = *a2;
  id v7 = v8;
  a4(&v8, v5, v6);
}

void Object.subscript.getter(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a3(*(void *)(v4 + 16), *a1);
  if (v7)
  {
    id v9 = (id)v7;
    RIOPxrVtValueRef.mapUSDValue<A>()(a2, a4);
  }
  else
  {
    id v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
    v8(a4, 1, 1, a2);
  }
}

void Object.subscript.getter(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = RIOPxrUsdObjectCustomDataDictionaryCopyValue();
  if (v4)
  {
    id v6 = (id)v4;
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    v5(a2, 1, 1, a1);
  }
}

{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v6;
  uint64_t vars8;

  uint64_t v4 = RIOPxrUsdObjectMetadataCopyValue();
  if (v4)
  {
    id v6 = (id)v4;
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    v5(a2, 1, 1, a1);
  }
}

void key path getter for Object.subscript<A>(customData:key:) : <A>ObjectA(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + a1 - 16);
  uint64_t v5 = *(void **)(a1 + 8);
  id v6 = *(id *)a1;
  id v7 = v5;
  Object.subscript.getter(v4, a3);
}

void key path setter for Object.subscript<A>(customData:key:) : <A>ObjectA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v13 = *(void **)a3;
  size_t v12 = *(void **)(a3 + 8);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v17 - v10, a1, v9);
  Swift::String v17 = v12;
  unint64_t v18 = v13;
  id v15 = v13;
  id v16 = v12;
  Object.subscript.setter(v11, &v18, &v17, v6, v7);
}

void Object.subscript.setter(char *a1, void **a2, void **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  size_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  Swift::String v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *a2;
  Swift::String v19 = *a3;
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v12, a1, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    id v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v12, v9);
    RIOPxrUsdObjectCustomDataDictionaryClearValue();
    v20(a1, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a4);
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(v23 + 8))(a4);
    RIOPxrUsdObjectCustomDataDictionarySetValue();

    (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v23 = a5;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  size_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  Swift::String v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *a2;
  Swift::String v19 = *a3;
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v12, a1, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    id v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v12, v9);
    RIOPxrUsdObjectClearMetadata();
    v20(a1, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a4);
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(v23 + 8))(a4);
    RIOPxrUsdObjectMetadataSetValue();

    (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
  }
}

void (*Object.subscript.modify(void *a1, void **a2, void **a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[1] = a5;
  void v11[2] = v5;
  *uint64_t v11 = a4;
  uint64_t v12 = type metadata accessor for Optional();
  v11[3] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[4] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[5] = malloc(v14);
  double v15 = malloc(v14);
  uint64_t v16 = *a2;
  v11[6] = v15;
  v11[7] = v16;
  Swift::String v17 = *a3;
  v11[8] = v17;
  id v18 = v16;
  id v19 = v17;
  Object.subscript.getter(a4, (uint64_t)v15);
  return Object.subscript.modify;
}

{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[1] = a5;
  void v11[2] = v5;
  *uint64_t v11 = a4;
  uint64_t v12 = type metadata accessor for Optional();
  v11[3] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[4] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[5] = malloc(v14);
  double v15 = malloc(v14);
  uint64_t v16 = *a2;
  v11[6] = v15;
  v11[7] = v16;
  Swift::String v17 = *a3;
  v11[8] = *a3;
  id v18 = v17;
  id v19 = v16;
  Object.subscript.getter(a4, (uint64_t)v15);
  return Object.subscript.modify;
}

uint64_t key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t (*a5)(char *, void **, uint64_t, uint64_t))
{
  uint64_t v8 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v9 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v10 = type metadata accessor for Optional();
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - v12;
  size_t v14 = *a3;
  (*(void (**)(char *, uint64_t, double))(v15 + 16))((char *)&v18 - v12, a1, v11);
  id v19 = v14;
  id v16 = v14;
  return a5(v13, &v19, v8, v9);
}

void Object.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t *, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[6];
  uint64_t v6 = (*a1)[7];
  uint64_t v7 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v8 = v4[3];
    uint64_t v9 = v4[4];
    uint64_t v10 = v4[1];
    uint64_t v11 = *v4;
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 16))((*a1)[5], v5, v8);
    uint64_t v14 = v6;
    a3(v7, &v14, v11, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  else
  {
    uint64_t v12 = v4[1];
    uint64_t v13 = *v4;
    uint64_t v14 = (*a1)[7];
    a3(v5, &v14, v13, v12);
  }
  free(v5);
  free(v7);
  free(v4);
}

void key path getter for Object.subscript<A>(metadata:_:) : <A>ObjectA(void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 16);
  uint64_t v5 = *a1;
  id v7 = a1[1];
  id v6 = v5;
  Object.subscript.getter(v4, a3);
}

void key path setter for Object.subscript<A>(metadata:_:) : <A>ObjectA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v13 = *(void **)a3;
  uint64_t v12 = *(void **)(a3 + 8);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v17 - v10, a1, v9);
  Swift::String v17 = v12;
  uint64_t v18 = v13;
  id v15 = v12;
  id v16 = v13;
  Object.subscript.setter(v11, &v18, &v17, v6, v7);
}

uint64_t Prim.primStack.getter()
{
  return Relationship.targets.getter(MEMORY[0x263F379F0], type metadata accessor for RIOPxrSdfPrimSpecRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.filteredChildren(predicate:)(void *a1)
{
  return Prim.filteredChildren(predicate:)(a1, MEMORY[0x263F379E0]);
}

{
  return Prim.filteredChildren(predicate:)(a1, MEMORY[0x263F37A20], MEMORY[0x263F379E0]);
}

{
  return Prim.filteredChildren(predicate:)(a1, MEMORY[0x263F37A40], MEMORY[0x263F379E0]);
}

uint64_t Prim.filteredChildren(predicate:)(uint64_t a1, uint64_t a2)
{
  return Prim.filteredChildren(predicate:)(a1, a2, (uint64_t (*)(void **))Prim.filteredChildren(predicate:));
}

uint64_t PrimFlagsPredicate.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsPredicateCreateWithTerm();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall Prim.isPseudoRoot()()
{
  return RIOPxrUsdPrimIsPseudoRoot();
}

void (*Prim.type.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrUsdPrimCopyTypeName();
  return Prim.type.modify;
}

void Prim.type.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdPrimSetTypeName();
}

Swift::Bool __swiftcall Prim.hasAuthoredType()()
{
  return RIOPxrUsdPrimHasAuthoredType();
}

uint64_t Prim.hasAuthoredTypeOnLayer(layer:)()
{
  return RIOPxrUsdPrimHasAuthoredTypeOnLayer();
}

uint64_t Prim.specifier.getter()
{
  return RIOPxrUsdPrimGetSpecifier();
}

uint64_t Prim.specifier.setter(uint64_t a1)
{
  return MEMORY[0x270F22BB8](*(void *)(v1 + 16), a1);
}

uint64_t (*Prim.specifier.modify(uint64_t *a1))(void *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrUsdPrimGetSpecifier();
  return Prim.specifier.modify;
}

uint64_t Prim.specifier.modify(void *a1)
{
  return MEMORY[0x270F22BB8](a1[1], *a1);
}

uint64_t Prim.rootLayerSpecifier.getter()
{
  return MEMORY[0x270F22AF0](*(void *)(v0 + 16));
}

uint64_t Prim.propertyOrder.getter()
{
  id v0 = (id)RIOPxrUsdPrimGetPropertyOrder();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v1;
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v7 = MEMORY[0x23ECBA630](i, v2);
        unint64_t v9 = *(void *)(v5 + 16);
        unint64_t v8 = *(void *)(v5 + 24);
        if (v9 >= v8 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        }
        *(void *)(v5 + 16) = v9 + 1;
        *(void *)(v5 + 8 * v9 + 32) = v7;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v3; ++j)
      {
        unint64_t v11 = *(void *)(v1 + 16);
        unint64_t v12 = *(void *)(v1 + 24);
        id v13 = *(id *)(v2 + 8 * j + 32);
        if (v11 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        }
        *(void *)(v1 + 16) = v11 + 1;
        *(void *)(v1 + 8 * v11 + 32) = v13;
      }
    }
    swift_bridgeObjectRelease();
    return v5;
  }
  __break(1u);
  return result;
}

void Prim.propertyOrder.setter(uint64_t a1)
{
}

void (*Prim.propertyOrder.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = Prim.propertyOrder.getter();
  return Prim.propertyOrder.modify;
}

void Prim.propertyOrder.modify(uint64_t *a1, char a2)
{
}

Swift::Bool __swiftcall Prim.setSpecializes(_:)(Swift::OpaquePointer a1)
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm((uint64_t)a1._rawValue);
  type metadata accessor for RIOPxrSdfPathRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  char v2 = RIOPxrUsdPrimSetSpecializes();

  return v2;
}

Swift::Bool __swiftcall Prim.clearSpecializes()()
{
  return RIOPxrUsdPrimClearSpecializes();
}

uint64_t Prim.removeReference(assetPath:path:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return Prim.addReference(assetPath:path:)(a1, a2, a3, MEMORY[0x263F37A58]);
}

uint64_t Prim.addReference(assetPath:path:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = String.utf8CString.getter();
  uint64_t v9 = a4(v7, v8 + 32, v6);
  swift_release();
  return v9;
}

uint64_t Prim.removeReference(assetURL:path:)(uint64_t a1, uint64_t *a2)
{
  return Prim.addReference(assetURL:path:)(a1, a2, MEMORY[0x263F06E80], MEMORY[0x263F37A58]);
}

uint64_t Prim.addReference(assetURL:path:)(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)(v4 + 16);
  a3();
  uint64_t v8 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v9 = a4(v7, v8 + 32, v6);
  swift_release();
  return v9;
}

Swift::Bool __swiftcall Prim.setReferences(references:)(Swift::OpaquePointer references)
{
  uint64_t v1 = *((void *)references._rawValue + 2);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (void **)((char *)references._rawValue + 32);
    do
    {
      uint64_t v4 = *v3++;
      id v5 = v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  char v7 = RIOPxrUsdPrimSetReferences();

  return v7;
}

uint64_t Prim.getRootLayerReferences()()
{
  return Relationship.targets.getter(MEMORY[0x263F37A08], type metadata accessor for RIOPxrSdfReferenceRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Relationship.targets.getter(uint64_t (*a1)(void), void (*a2)(void), uint64_t (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v6 = (void *)a1(*(void *)(v3 + 16));
  a2(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v9 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = a3(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = v7;
    if ((v8 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v13 = MEMORY[0x23ECBA630](i, v8);
        unint64_t v15 = *(void *)(v11 + 16);
        unint64_t v14 = *(void *)(v11 + 24);
        if (v15 >= v14 >> 1) {
          a3(v14 > 1, v15 + 1, 1);
        }
        *(void *)(v11 + 16) = v15 + 1;
        *(void *)(v11 + 8 * v15 + 32) = v13;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v9; ++j)
      {
        unint64_t v17 = *(void *)(v7 + 16);
        unint64_t v18 = *(void *)(v7 + 24);
        id v19 = *(id *)(v8 + 8 * j + 32);
        if (v17 >= v18 >> 1) {
          a3(v18 > 1, v17 + 1, 1);
        }
        *(void *)(v7 + 16) = v17 + 1;
        *(void *)(v7 + 8 * v17 + 32) = v19;
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void Prim.attribute<A>(of:type:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (!RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v7 = 0;
LABEL_6:
    char v10 = 1;
    goto LABEL_7;
  }
  uint64_t v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v7 = (void *)RIOPxrUsdAttributeCopyTypeName();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v11, a1, a2);
  uint64_t v8 = v11;
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef, 255, type metadata accessor for RIOPxrSdfValueTypeNameRef);
  char v9 = static _CFObject.== infix(_:_:)();

  if ((v9 & 1) == 0)
  {

    goto LABEL_6;
  }

  type metadata accessor for Attribute();
  uint64_t v7 = (void *)swift_allocObject();
  char v10 = 0;
  void v7[2] = v6;
LABEL_7:
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = v10;
}

uint64_t Prim.propertyNames()()
{
  return Prim.propertyNames()(MEMORY[0x263F379F8], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.authoredPropertyNames()()
{
  return Prim.propertyNames()(MEMORY[0x263F379C0], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.schemaPropertyNames()()
{
  char v2 = (void *)RIOPxrUsdPrimCopyTypeName();
  uint64_t v0 = ToolsFoundations.Token.schemaPropertyNames()();

  return v0;
}

uint64_t Prim.authoredAttributes()()
{
  return Prim.attributes()(MEMORY[0x263F379B8]);
}

uint64_t Prim.attributes()(uint64_t (*a1)(void))
{
  char v2 = (void *)a1(*(void *)(v1 + 16));
  if (v2)
  {
    type metadata accessor for RIOPxrUsdObjectRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v4 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_5;
    }
LABEL_14:
    swift_bridgeObjectRelease();

    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = v6 + 1;
        uint64_t v8 = MEMORY[0x23ECBA630]();
        type metadata accessor for AnyAttribute();
        *(void *)(swift_allocObject() + 16) = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v6 = v7;
      }
      while (v4 != v7);
    }
    else
    {
      char v9 = (void **)(v3 + 32);
      type metadata accessor for AnyAttribute();
      do
      {
        char v10 = *v9++;
        *(void *)(swift_allocObject() + 16) = v10;
        id v11 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v4;
      }
      while (v4);
    }
    uint64_t v12 = v13;
    swift_bridgeObjectRelease();

    return v12;
  }
  __break(1u);
  return result;
}

uint64_t Prim.schemaAttributes()()
{
  uint64_t v1 = v0;
  id v5 = (void *)RIOPxrUsdPrimCopyTypeName();
  uint64_t v2 = ToolsFoundations.Token.schemaPropertyNames()();

  swift_retain();
  uint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, v1, MEMORY[0x263F37A48], MEMORY[0x263F379A8], (void (*)(void))type metadata accessor for AnyAttribute);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t Prim.properties()()
{
  return Prim.properties()(Prim.propertyNames());
}

uint64_t Prim.relationships()()
{
  uint64_t v1 = Prim.propertyNames()();
  swift_retain();
  uint64_t v2 = specialized Sequence.compactMap<A>(_:)(v1, v0, MEMORY[0x263F37A50], MEMORY[0x263F37A00], (void (*)(void))type metadata accessor for Relationship);
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

Swift::Bool __swiftcall Prim.hasVariantSets()()
{
  return RIOPxrUsdPrimHasVariantSets();
}

uint64_t Prim.getVariantSet(vsetName:)(uint64_t a1, uint64_t a2)
{
  return VariantSets.getVariantSet(variantSetName:)(a1, a2, MEMORY[0x263F37A10]);
}

uint64_t VariantSets.getVariantSet(variantSetName:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = String.utf8CString.getter();
  uint64_t v7 = a3(v5, v6 + 32);
  swift_release();
  type metadata accessor for VariantSet();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  return result;
}

uint64_t Prim.authoredProperties()()
{
  return Prim.properties()(Prim.authoredPropertyNames());
}

uint64_t Prim.properties()(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  swift_retain();
  uint64_t v2 = specialized Sequence.compactMap<A>(_:)(v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

uint64_t Prim.schemaProperties()()
{
  uint64_t v3 = (void *)RIOPxrUsdPrimCopyTypeName();
  uint64_t v0 = ToolsFoundations.Token.schemaPropertyNames()();

  swift_retain();
  uint64_t v1 = specialized Sequence.compactMap<A>(_:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t Prim.setAttribute<A>(of:color:as:at:custom:variability:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, int a3@<W3>, unsigned char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, double a8@<D0>)
{
  v20[1] = a3;
  uint64_t v15 = type metadata accessor for ManagedColor();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)v20 - v17;
  LOBYTE(a4) = *a4;
  uint64_t v22 = *a1;
  ManagedColor.init(_:)((CGColor *)a2, a5, a6, (uint64_t)v20 - v17);
  char v21 = (char)a4;
  Prim.setAttribute<A>(of:value:at:custom:variability:)((uint64_t)v18, v15, (uint64_t)&protocol witness table for ManagedColor<A>, a7, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void Prim.createAttribute<A>(of:type:custom:variability:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a6 + 32))(&v8, a5, a6);
  uint64_t v6 = v8;
  id Attribute = (id)RIOPxrUsdPrimCreateAttribute();
}

uint64_t Prim.setRelationship(of:targets:custom:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for RIOPxrSdfPathRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  int v6 = RIOPxrUsdRelationshipSetTargets();

  if (v6)
  {
    type metadata accessor for Relationship();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = Relationship;
  }
  else
  {

    uint64_t result = 1;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 ^ 1;
  return result;
}

uint64_t Prim.removeProperty(name:)()
{
  return RIOPxrUsdPrimRemoveProperty();
}

uint64_t Prim.active.setter(char a1)
{
  return MEMORY[0x270F22B98](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*Prim.active.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = RIOPxrUsdPrimIsActive();
  return Prim.active.modify;
}

uint64_t Prim.active.modify(uint64_t a1)
{
  return MEMORY[0x270F22B98](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

Swift::Bool __swiftcall Prim.clearActive()()
{
  return RIOPxrUsdPrimClearActive();
}

Swift::Bool __swiftcall Prim.hasAuthoredActive()()
{
  return RIOPxrUsdPrimHasAuthoredActive();
}

uint64_t Prim.stage()()
{
  uint64_t v0 = RIOPxrUsdPrimCopyStage();
  type metadata accessor for Stage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t Prim.isA(type:)()
{
  return RIOPxrUsdPrimIsAType();
}

uint64_t Prim.hasProperty(of:)()
{
  return RIOPxrUsdPrimHasProperty();
}

Swift::Void __swiftcall Prim.clearPropertyOrder()()
{
  MEMORY[0x270F229E0](*(void *)(v0 + 16));
}

uint64_t Prim.appliedSchemas.getter()
{
  return Object.allowedTokens.getter(MEMORY[0x263F379A0], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Object.allowedTokens.getter(uint64_t (*a1)(void), void (*a2)(void), uint64_t (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v6 = a1(*(void *)(v3 + 16));
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    a2(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v9 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_5;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t result = a3(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = v20;
    if ((v8 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v13 = MEMORY[0x23ECBA630](i, v8);
        unint64_t v15 = *(void *)(v20 + 16);
        unint64_t v14 = *(void *)(v20 + 24);
        if (v15 >= v14 >> 1) {
          a3(v14 > 1, v15 + 1, 1);
        }
        *(void *)(v20 + 16) = v15 + 1;
        *(void *)(v20 + 8 * v15 + 32) = v13;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v9; ++j)
      {
        unint64_t v17 = *(void *)(v20 + 16);
        unint64_t v18 = *(void *)(v20 + 24);
        id v19 = *(id *)(v8 + 8 * j + 32);
        if (v17 >= v18 >> 1) {
          a3(v18 > 1, v17 + 1, 1);
        }
        *(void *)(v20 + 16) = v17 + 1;
        *(void *)(v20 + 8 * v17 + 32) = v19;
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void key path setter for Prim.propertyOrder : Prim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, Class))
{
  uint64_t v6 = *(void *)(*(void *)a2 + 16);
  uint64_t v7 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v7);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a5(v6, isa);
}

void Prim.appliedSchemas.setter(uint64_t a1)
{
}

void Prim.propertyOrder.setter(uint64_t a1, void (*a2)(uint64_t, Class))
{
  uint64_t v4 = *(void *)(v2 + 16);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a2(v4, isa);
}

void (*Prim.appliedSchemas.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = Prim.appliedSchemas.getter();
  return Prim.appliedSchemas.modify;
}

void Prim.appliedSchemas.modify(uint64_t *a1, char a2)
{
}

void Prim.propertyOrder.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, Class))
{
  uint64_t v4 = *(void *)(a1[3] + 16);
  if (a2)
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrTfTokenRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a3(v4, isa);

    swift_bridgeObjectRelease();
  }
  else
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(*a1);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrTfTokenRef(0);
    Class v7 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a3(v4, v7);
  }
}

uint64_t Prim.addAppliedSchema(of:)()
{
  return RIOPxrUsdPrimAddAppliedSchema();
}

uint64_t Prim.removeAppliedSchema(of:)()
{
  return RIOPxrUsdPrimRemoveAppliedSchema();
}

Swift::Bool __swiftcall Prim.isInstance()()
{
  return RIOPxrUsdPrimIsInstance();
}

Swift::Bool __swiftcall Prim.isInstanceProxy()()
{
  return RIOPxrUsdPrimIsInstanceProxy();
}

Swift::Bool __swiftcall Prim.isInstanceable()()
{
  return RIOPxrUsdPrimIsInstanceable();
}

Swift::Bool __swiftcall Prim.setInstanceable(instanceable:)(Swift::Bool instanceable)
{
  return RIOPxrUsdPrimSetInstanceable();
}

Swift::Bool __swiftcall Prim.hasAuthoredInstanceable()()
{
  return RIOPxrUsdPrimHasAuthoredInstanceable();
}

Swift::Bool __swiftcall Prim.clearInstanceable()()
{
  return RIOPxrUsdPrimClearInstanceable();
}

Swift::Bool __swiftcall Prim.isPrototype()()
{
  return RIOPxrUsdPrimIsPrototype();
}

uint64_t Prim.prototype.getter()
{
  uint64_t result = RIOPxrUsdPrimCopyPrototype();
  if (result)
  {
    uint64_t v1 = result;
    type metadata accessor for Prim();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v1;
  }
  return result;
}

uint64_t Prim.taggedAsEntity.getter()
{
  return RIOPxrUsdPrimGetTaggedAsEntity();
}

uint64_t Prim.taggedAsEntity.setter(char a1)
{
  return MEMORY[0x270F22BC0](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*Prim.taggedAsEntity.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = RIOPxrUsdPrimGetTaggedAsEntity();
  return Prim.taggedAsEntity.modify;
}

uint64_t Prim.taggedAsEntity.modify(uint64_t a1)
{
  return MEMORY[0x270F22BC0](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t Prim.entityConvertible.getter()
{
  return RIOPxrUsdPrimIsEntityConvertible();
}

uint64_t Prim.childrenOrder.getter()
{
  return Prim.propertyNames()(MEMORY[0x263F379D0], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void Prim.childrenOrder.setter(uint64_t a1)
{
}

void (*Prim.childrenOrder.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = Prim.childrenOrder.getter();
  return Prim.childrenOrder.modify;
}

void Prim.childrenOrder.modify(uint64_t *a1, char a2)
{
}

Swift::Void __swiftcall Prim.clearChildrenOrder()()
{
  MEMORY[0x270F229D0](*(void *)(v0 + 16));
}

uint64_t Prim.filteredDescendants(predicate:)(void *a1)
{
  return Prim.filteredChildren(predicate:)(a1, MEMORY[0x263F379E8]);
}

{
  return Prim.filteredChildren(predicate:)(a1, MEMORY[0x263F37A20], MEMORY[0x263F379E8]);
}

{
  return Prim.filteredChildren(predicate:)(a1, MEMORY[0x263F37A40], MEMORY[0x263F379E8]);
}

uint64_t Prim.filteredChildren(predicate:)(void *a1, uint64_t (*a2)(void, void))
{
  uint64_t v3 = (void *)a2(*(void *)(v2 + 16), *a1);
  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v6 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8 + 1;
        uint64_t v10 = MEMORY[0x23ECBA630]();
        type metadata accessor for Prim();
        *(void *)(swift_allocObject() + 16) = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      uint64_t v11 = (void **)(v5 + 32);
      type metadata accessor for Prim();
      do
      {
        uint64_t v12 = *v11++;
        *(void *)(swift_allocObject() + 16) = v12;
        id v13 = v12;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    uint64_t v14 = v4;
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t Prim.filteredDescendants(predicate:)(uint64_t a1, uint64_t a2)
{
  return Prim.filteredChildren(predicate:)(a1, a2, (uint64_t (*)(void **))Prim.filteredDescendants(predicate:));
}

uint64_t Prim.filteredChildren(predicate:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void **))
{
  uint64_t v4 = (void *)RIOPxrUsdPrimFlagsPredicateCreateWithTerm();
  Class v7 = v4;
  uint64_t v5 = a3(&v7);

  return v5;
}

uint64_t Prim.filteredChildren(predicate:)(void *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, id))
{
  uint64_t v5 = *(void *)(v3 + 16);
  id v6 = (id)a2(*a1);
  Class v7 = (void *)a3(v5, v6);

  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v10 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v10 & 0x8000000000000000) == 0)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = v12 + 1;
        uint64_t v14 = MEMORY[0x23ECBA630]();
        type metadata accessor for Prim();
        *(void *)(swift_allocObject() + 16) = v14;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v12 = v13;
      }
      while (v10 != v13);
    }
    else
    {
      unint64_t v15 = (void **)(v9 + 32);
      type metadata accessor for Prim();
      do
      {
        uint64_t v16 = *v15++;
        *(void *)(swift_allocObject() + 16) = v16;
        id v17 = v16;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v10;
      }
      while (v10);
    }
    uint64_t v18 = v8;
    swift_bridgeObjectRelease();
    return v18;
  }
  __break(1u);
  return result;
}

void Prim.traverse(with:)()
{
  AllPrimsPredicate = (void *)RIOPxrUsdPrimFlagsCreateAllPrimsPredicate();
  id v2 = (id)RIOPxrUsdPrimFlagsConjunctionPredicateToRIOPxrUsdPrimFlagsPredicate();

  uint64_t v1 = (void *)RIOPxrUsdPrimCopyFilteredDescendants();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static PrimFlagsConjunctionPredicate.AllPrims.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsCreateAllPrimsPredicate();
  *a1 = result;
  return result;
}

void __swiftcall Prim.localTransformation(at:)(simd_double4x4_optional *__return_ptr retstr, Swift::Double at)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (String.count.getter() < 1) {
    id v3 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v3 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v4 = v3;
  int IsAType = RIOPxrUsdPrimIsAType();

  if (IsAType && RIOPxrUsdGeomXformableXformQueryGetLocalTransformation())
  {
    memset(v6, 0, 128);
    _s9RealityIO7Frame4DVSgWOi_((uint64_t)v6);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for simd_double4x4?);
  outlined init with take of (URL, __REAsset)((uint64_t)v7, (uint64_t)retstr, &demangling cache variable for type metadata for simd_double4x4?);
}

uint64_t Prim.timeSamples.getter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  int IsAType = RIOPxrUsdPrimIsAType();

  uint64_t v3 = MEMORY[0x263F8EE78];
  if (IsAType)
  {
    CopyTimeSamples = (void *)RIOPxrUsdGeomXformableXformQueryCopyTimeSamples();
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  return v3;
}

uint64_t Property.propertyStack(time:)()
{
  id v0 = (void *)RIOPxrUsdPropertyCopyPropertyStack();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();

    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v1;
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v7 = MEMORY[0x23ECBA630](i, v2);
        unint64_t v9 = *(void *)(v5 + 16);
        unint64_t v8 = *(void *)(v5 + 24);
        if (v9 >= v8 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        }
        *(void *)(v5 + 16) = v9 + 1;
        *(void *)(v5 + 8 * v9 + 32) = v7;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v3; ++j)
      {
        unint64_t v11 = *(void *)(v1 + 16);
        unint64_t v12 = *(void *)(v1 + 24);
        id v13 = *(id *)(v2 + 8 * j + 32);
        if (v11 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        }
        *(void *)(v1 + 16) = v11 + 1;
        *(void *)(v1 + 8 * v11 + 32) = v13;
      }
    }
    swift_bridgeObjectRelease();

    return v5;
  }
  __break(1u);
  return result;
}

uint64_t Property.isAuthored.getter()
{
  return RIOPxrUsdPropertyIsAuthored();
}

uint64_t Property.isAuthoredAt(target:)()
{
  return RIOPxrUsdPropertyIsAuthoredAt();
}

uint64_t Property.baseName()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPropertyCopyBaseName();
  *a1 = result;
  return result;
}

uint64_t Property.namespace()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPropertyCopyNamespace();
  *a1 = result;
  return result;
}

uint64_t Property.splitName()()
{
  id v0 = (void *)RIOPxrUsdPropertyCopySplitName();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE78];
}

uint64_t Attribute.value.getter()
{
  return static UsdAttributeValue.getValue(from:time:)(v0);
}

uint64_t Attribute.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized Attribute.value.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 96) - 8) + 8);
  return v4(a1);
}

void (*Attribute.value.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = *(void *)(*v1 + 96);
  v4[1] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[2] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v4[3] = malloc(v7);
  v4[4] = malloc(v7);
  static UsdAttributeValue.getValue(from:time:)(v2);
  return Attribute.value.modify;
}

void Attribute.value.modify(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[3];
  uint64_t v4 = (*a1)[4];
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = (*a1)[2];
  size_t v7 = **a1;
  if (a2)
  {
    ((void (*)(void *, void *, void *))v6[2])((*a1)[3], v4, v5);
    static UsdAttributeValue.setValue(_:to:time:)((uint64_t)v3, v7);
    unint64_t v8 = (void (*)(void *, void *))v6[1];
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    static UsdAttributeValue.setValue(_:to:time:)((uint64_t)(*a1)[4], v7);
    ((void (*)(void *, void *))v6[1])(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Attribute.subscript.getter()
{
  return static UsdAttributeValue.getValue(from:time:)(v0);
}

uint64_t Attribute.subscript.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized Attribute.subscript.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 96) - 8) + 8);
  return v4(a1);
}

void (*Attribute.subscript.modify(double **a1, double a2))(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (double *)malloc(0x30uLL);
  *a1 = v6;
  *((void *)v6 + 1) = v2;
  *uint64_t v6 = a2;
  uint64_t v7 = *(void *)(*v2 + 96);
  *((void *)v6 + 2) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *((void *)v6 + 3) = v8;
  size_t v9 = *(void *)(v8 + 64);
  *((void *)v6 + 4) = malloc(v9);
  *((void *)v6 + 5) = malloc(v9);
  static UsdAttributeValue.getValue(from:time:)(v3);
  return Attribute.subscript.modify;
}

void Attribute.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void **)(*(void *)a1 + 8);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    static UsdAttributeValue.setValue(_:to:time:)((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    static UsdAttributeValue.setValue(_:to:time:)(*(void *)(*(void *)a1 + 40), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

void Relationship.targets.setter(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();
  }
  else
  {
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipClearTargets();
  }
}

void (*Relationship.targets.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = Relationship.targets.getter();
  return Relationship.targets.modify;
}

void Relationship.targets.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *(void *)(*a1 + 16);
  if (a2)
  {
    if (v2)
    {
      uint64_t v3 = swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v3);
      swift_bridgeObjectRelease();
      type metadata accessor for RIOPxrSdfPathRef(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      RIOPxrUsdRelationshipSetTargets();
    }
    else
    {
      RIOPxrUsdRelationshipClearTargets();
    }
    swift_bridgeObjectRelease();
  }
  else if (v2)
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(*a1);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    Class v5 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();
  }
  else
  {
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipClearTargets();
  }
}

uint64_t key path getter for Relationship.target : Relationship@<X0>(void *a1@<X8>)
{
  uint64_t v2 = Relationship.targets.getter();
  if (*(void *)(v2 + 16))
  {
    id v3 = *(id *)(v2 + 32);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = RIOPxrSdfPathCreateEmptyPath();
    id v3 = (id)result;
  }
  *a1 = v3;
  return result;
}

void key path setter for Relationship.target : Relationship(void **a1)
{
  uint64_t v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v1;
  id v3 = v1;
  Relationship.targets.setter(inited);
}

void Relationship.target.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v1;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(inited);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrSdfPathRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  RIOPxrUsdRelationshipSetTargets();
}

void (*Relationship.target.modify(void *a1))(id **a1, char a2)
{
  id v3 = malloc(0x70uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 10;
  v3[13] = v1;
  uint64_t v5 = Relationship.targets.getter();
  if (*(void *)(v5 + 16))
  {
    id EmptyPath = *(id *)(v5 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
  }
  *uint64_t v4 = EmptyPath;
  return Relationship.target.modify;
}

void Relationship.target.modify(id **a1, char a2)
{
  id v3 = *a1;
  id v4 = (*a1)[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  if (a2)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
    *(void *)(inited + 32) = v4;
    id v6 = v4;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(inited);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();
  }
  else
  {
    uint64_t v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_23AAB22A0;
    *(void *)(v8 + 32) = v4;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    Class v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();
  }
  free(v3);
}

void AnyAttribute.value.setter(void *a1)
{
  RIOPxrUsdAttributeSetValue();
}

void (*AnyAttribute.value.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  uint64_t EmptyValue = RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue) {
    uint64_t EmptyValue = RIOPxrVtValueCreateEmptyValue();
  }
  *a1 = EmptyValue;
  return AnyAttribute.value.modify;
}

void AnyAttribute.value.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdAttributeSetValue();
}

uint64_t AnyAttribute.subscript.getter()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (!result)
  {
    return RIOPxrVtValueCreateEmptyValue();
  }
  return result;
}

uint64_t key path getter for AnyAttribute.subscript(at:) : AnyAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (!result) {
    uint64_t result = RIOPxrVtValueCreateEmptyValue();
  }
  *a1 = result;
  return result;
}

void AnyAttribute.subscript.setter(void *a1)
{
  RIOPxrUsdAttributeSetValue();
}

void (*AnyAttribute.subscript.modify(uint64_t a1, double a2))(id *a1)
{
  *(double *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  uint64_t EmptyValue = RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue) {
    uint64_t EmptyValue = RIOPxrVtValueCreateEmptyValue();
  }
  *(void *)a1 = EmptyValue;
  return AnyAttribute.subscript.modify;
}

void AnyAttribute.subscript.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdAttributeSetValue();
}

uint64_t AnyAttribute.variability.getter()
{
  return RIOPxrUsdAttributeGetVariability();
}

unint64_t AnyAttribute.sdfVariability.getter@<X0>(BOOL *a1@<X8>)
{
  unint64_t result = RIOPxrUsdAttributeGetVariability();
  if (result > 2) {
    __break(1u);
  }
  else {
    *a1 = (result & 1) == 0;
  }
  return result;
}

uint64_t AnyAttribute.timeSamples.getter()
{
  id v0 = (void *)RIOPxrUsdAttributeCopyTimeSamples();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE78];
}

uint64_t AnyAttribute.hasValue.getter()
{
  return RIOPxrUsdAttributeHasValue();
}

uint64_t AnyAttribute.hasAuthoredValue.getter()
{
  return RIOPxrUsdAttributeHasAuthoredValue();
}

Swift::Void __swiftcall AnyAttribute.block()()
{
  MEMORY[0x270F22840](*(void *)(v0 + 16));
}

Swift::Bool __swiftcall AnyAttribute.clear()()
{
  return RIOPxrUsdAttributeClear();
}

Swift::Void __swiftcall AnyAttribute.clearAll()()
{
  MEMORY[0x270F22850](*(void *)(v0 + 16));
}

uint64_t AnyAttribute.addConnection(source:)()
{
  return RIOPxrUsdAttributeAddConnection();
}

uint64_t AnyAttribute.removeConnection(source:)()
{
  return RIOPxrUsdAttributeRemoveConnection();
}

Swift::Void __swiftcall AnyAttribute.setConnections(connections:)(Swift::OpaquePointer connections)
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm((uint64_t)connections._rawValue);
  type metadata accessor for RIOPxrSdfPathRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  RIOPxrUsdAttributeSetConnections();
}

Swift::Bool __swiftcall AnyAttribute.clearConnections()()
{
  return RIOPxrUsdAttributeClearConnections();
}

uint64_t AnyAttribute.connections()()
{
  return Prim.propertyNames()(MEMORY[0x263F37948], type metadata accessor for RIOPxrSdfPathRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.propertyNames()(uint64_t (*a1)(void), void (*a2)(void), uint64_t (*a3)(BOOL, uint64_t, uint64_t))
{
  id v6 = (void *)a1(*(void *)(v3 + 16));
  if (v6)
  {
    a2(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v8 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    swift_bridgeObjectRelease();

    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t result = a3(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = v19;
    if ((v7 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        uint64_t v12 = MEMORY[0x23ECBA630](i, v7);
        unint64_t v14 = *(void *)(v19 + 16);
        unint64_t v13 = *(void *)(v19 + 24);
        if (v14 >= v13 >> 1) {
          a3(v13 > 1, v14 + 1, 1);
        }
        *(void *)(v19 + 16) = v14 + 1;
        *(void *)(v19 + 8 * v14 + 32) = v12;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v8; ++j)
      {
        unint64_t v16 = *(void *)(v19 + 16);
        unint64_t v17 = *(void *)(v19 + 24);
        id v18 = *(id *)(v7 + 8 * j + 32);
        if (v16 >= v17 >> 1) {
          a3(v17 > 1, v16 + 1, 1);
        }
        *(void *)(v19 + 16) = v16 + 1;
        *(void *)(v19 + 8 * v16 + 32) = v18;
      }
    }
    swift_bridgeObjectRelease();

    return v10;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall AnyAttribute.hasAuthoredConnections()()
{
  return RIOPxrUsdAttributeHasAuthoredConnections();
}

uint64_t AnyAttribute.colorSpace.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdAttributeCopyColorSpace();
  *a1 = result;
  return result;
}

void AnyAttribute.colorSpace.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdAttributeSetColorSpace();
}

void (*AnyAttribute.colorSpace.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrUsdAttributeCopyColorSpace();
  return AnyAttribute.colorSpace.modify;
}

void AnyAttribute.colorSpace.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdAttributeSetColorSpace();
}

Swift::Bool __swiftcall AnyAttribute.hasColorSpace()()
{
  return RIOPxrUsdAttributeHasColorSpace();
}

Swift::Bool __swiftcall AnyAttribute.clearColorSpace()()
{
  return RIOPxrUsdAttributeClearColorSpace();
}

uint64_t Properties.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Properties.subscript.getter(a1, a2, a3, a4, NAN);
}

id key path setter for Properties.subscript<A>(dynamicMember:) : <A><A1>Properties<A>AA1(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  id v6 = *a3;
  uint64_t v7 = type metadata accessor for Properties();
  swift_retain();
  return specialized Properties.subscript.setter(a1, v6, v7, v5);
}

uint64_t Properties.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9 = *a1;
  swift_getAtKeyPath();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id v10 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    id v10 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  id v18 = v10;
  uint64_t v11 = *(void *)(*(void *)(*MEMORY[0x263F8EA20] + v9 + 8) + 16);
  Prim.attribute<A>(of:type:)(v11, a3, (uint64_t)&v21);

  id v18 = v21;
  char v19 = v22;
  type metadata accessor for Attribute();
  lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = _ss6ResultOsRi_zrlE3getxyq_YKF(v12, (uint64_t)&v17, (uint64_t)&v20);
  char v21 = v20;
  MEMORY[0x270FA5388](v13);
  v16[2] = *(void *)(a2 + 16);
  v16[3] = v11;
  v16[4] = a3;
  *(double *)&v16[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Properties.subscript.getter, (uint64_t)v16, MEMORY[0x263F8E628], v11, v14, a4);
  return swift_release();
}

id Properties.subscript.setter(uint64_t a1, void *a2, int a3, unint64_t a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a7;
  unint64_t v32 = a4;
  int v29 = a3;
  uint64_t v11 = *(void *)(*(void *)(*MEMORY[0x263F8EA20] + *a2 + 8) + 16);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)v26 - v14;
  uint64_t v16 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v17);
  char v19 = (char *)v26 - v18;
  uint64_t v31 = v7;
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v11) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(a1, v12);
    return (id)((uint64_t (*)(char *, uint64_t))v20)(v15, v12);
  }
  else
  {
    v26[1] = a2;
    uint64_t v27 = v16;
    uint64_t v28 = a1;
    uint64_t v22 = (uint64_t)v19;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, v11);
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      id result = (id)RIOPxrTfTokenEmpty();
      uint64_t v23 = result;
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)RIOPxrTfTokenCreateWithCString();
      id result = (id)swift_release();
    }
    id v34 = v23;
    uint64_t v24 = v27;
    uint64_t v25 = v28;
    if (v32 > 2)
    {
      __break(1u);
    }
    else
    {
      BOOL v33 = (v32 & 1) == 0;
      Prim.setAttribute<A>(of:value:at:custom:variability:)(v22, v11, v30, (uint64_t)&v35, a5);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v25, v12);

      outlined consume of Result<AnyAttribute, Object.Error>(v35, v36);
      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v22, v11);
    }
  }
  return result;
}

void (*Properties.subscript.modify(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4))(void ***a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  v9[3] = v4;
  void *v9 = a2;
  v9[1] = a3;
  uint64_t v10 = type metadata accessor for Optional();
  v9[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[7] = v13;
  Properties.subscript.getter(a2, a3, a4, (uint64_t)v13, NAN);
  return Properties.subscript.modify;
}

void Properties.subscript.modify(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[6];
  uint64_t v4 = (*a1)[7];
  uint64_t v5 = (*a1)[4];
  id v6 = (*a1)[5];
  uint64_t v7 = (uint64_t)(*a1)[2];
  uint64_t v9 = **a1;
  uint64_t v8 = (uint64_t)(*a1)[1];
  if (a2)
  {
    ((void (*)(void *, void *, void *))v6[2])((*a1)[6], v4, v5);
    swift_retain();
    specialized Properties.subscript.setter((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = (void (*)(void *, void *))v6[1];
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    swift_retain();
    specialized Properties.subscript.setter((uint64_t)v4, v9, v8, v7);
    ((void (*)(void *, void *))v6[1])(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t key path getter for Properties.subscript<A>(of:at:custom:variability:) : <A><A1>Properties<A>AA1@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t v5 = *(uint64_t **)a1;
  double v6 = *(double *)(a1 + 8);
  uint64_t v7 = type metadata accessor for Properties();
  return Properties.subscript.getter(v5, v7, v4, a3, v6);
}

id key path setter for Properties.subscript<A>(of:at:custom:variability:) : <A><A1>Properties<A>AA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = type metadata accessor for Optional();
  double v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void **)a3;
  double v12 = *(double *)(a3 + 8);
  int v13 = *(unsigned __int8 *)(a3 + 16);
  unint64_t v14 = *(void *)(a3 + 24);
  (*(void (**)(char *, uint64_t, double))(v15 + 16))((char *)&v18 - v9, a1, v8);
  uint64_t v16 = type metadata accessor for Properties();
  swift_retain();
  return Properties.subscript.setter((uint64_t)v10, v11, v13, v14, v12, v16, v6);
}

void (*Properties.subscript.modify(void *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7))(unsigned __int8 **a1, char a2)
{
  uint64_t v15 = malloc(0x58uLL);
  *a1 = v15;
  void v15[4] = a6;
  v15[5] = v7;
  v15[2] = a4;
  v15[3] = a5;
  *((unsigned char *)v15 + 80) = a3;
  *((double *)v15 + 1) = a7;
  *uint64_t v15 = a2;
  uint64_t v16 = type metadata accessor for Optional();
  v15[6] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v15[7] = v17;
  size_t v18 = *(void *)(v17 + 64);
  v15[8] = malloc(v18);
  char v19 = malloc(v18);
  v15[9] = v19;
  Properties.subscript.getter(a2, a5, a6, (uint64_t)v19, a7);
  return Properties.subscript.modify;
}

void Properties.subscript.modify(unsigned __int8 **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)*((void *)*a1 + 8);
  uint64_t v4 = (void *)*((void *)*a1 + 9);
  if (a2)
  {
    uint64_t v5 = *((void *)v2 + 6);
    uint64_t v6 = *((void *)v2 + 7);
    uint64_t v7 = *((void *)v2 + 4);
    unint64_t v9 = *((void *)v2 + 2);
    uint64_t v8 = *((void *)v2 + 3);
    int v10 = v2[80];
    double v11 = *((double *)v2 + 1);
    double v12 = *(void **)v2;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v3, v4, v5);
    swift_retain();
    Properties.subscript.setter((uint64_t)v3, v12, v10, v9, v11, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v13 = *((void *)v2 + 4);
    unint64_t v15 = *((void *)v2 + 2);
    uint64_t v14 = *((void *)v2 + 3);
    int v16 = v2[80];
    double v17 = *((double *)v2 + 1);
    size_t v18 = *(void **)v2;
    swift_retain();
    Properties.subscript.setter((uint64_t)v4, v18, v16, v15, v17, v14, v13);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Properties.subscript.getter()
{
  return specialized Properties.subscript.getter();
}

void Properties.subscript.setter(uint64_t a1)
{
}

void (*Properties.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = specialized Properties.subscript.getter();
  return Properties.subscript.modify;
}

void Properties.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_retain();
    uint64_t v3 = swift_bridgeObjectRetain();
    specialized Properties.subscript.setter(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    specialized Properties.subscript.setter(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Properties.subscript.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    specialized Properties.subscript.setter(v2);
  }
}

uint64_t key path setter for Properties.subscript(dynamicMember:) : <A>Properties<A>A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = type metadata accessor for Properties();
  swift_retain();
  uint64_t v8 = swift_bridgeObjectRetain();
  return a5(v8, v6, v7);
}

void (*Properties.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  a1[2] = a4;
  a1[3] = v4;
  a1[1] = a2;
  *a1 = specialized Properties.subscript.getter();
  return Properties.subscript.modify;
}

char *StaticTypePrim.__allocating_init(prim:type:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized StaticTypePrim.init(prim:type:)(a1);
  swift_release();
  return v2;
}

uint64_t key path setter for StaticTypePrim.subscript<A>(dynamicMember:) : <A><A1>StaticTypePrim<A>AA1(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v6 = *a3;
  swift_retain();
  specialized StaticTypePrim.subscript.setter(a1, v6, v5);
  return swift_release();
}

uint64_t key path setter for StaticTypePrim.subscript<A>(of:at:custom:variability:) : <A><A1>StaticTypePrim<A>AA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = *(void **)a3;
  double v7 = *(double *)(a3 + 8);
  int v8 = *(unsigned __int8 *)(a3 + 16);
  unint64_t v9 = *(void *)(a3 + 24);
  swift_retain();
  specialized StaticTypePrim.subscript.setter(a1, v6, v8, v9, v5, v7);
  return swift_release();
}

uint64_t key path setter for StaticTypePrim.subscript(dynamicMember:) : <A>StaticTypePrim<A>A(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  a5(v7, v6);
  return swift_release();
}

uint64_t StaticTypePrim.__deallocating_deinit()
{
  StaticTypePrim.deinit();
  return swift_deallocClassInstance();
}

uint64_t StaticTypePrim.description.getter()
{
  swift_retain();
  id v0 = (id)RIOPxrUsdObjectCopyPath();
  id v1 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_release();

  return v2;
}

uint64_t StaticTypePrim.debugDescription.getter()
{
  v0._uint64_t countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = Object.debugDescription.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 10;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticTypePrim<A>()
{
  return StaticTypePrim.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticTypePrim<A>()
{
  return StaticTypePrim.debugDescription.getter();
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsActive.getter()
{
  return 0;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsLoaded.getter()
{
  return 1;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsModel.getter()
{
  return 2;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsGroup.getter()
{
  return 3;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsComponent.getter()
{
  return 4;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsAbstract.getter()
{
  return 5;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsDefined.getter()
{
  return 6;
}

uint64_t static RIOPxrUsdTerm.UsdPrimHasDefiningSpecifier.getter()
{
  return 7;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsInstance.getter()
{
  return 8;
}

void static RIOPxrUsdTerm.&& infix(_:_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
}

uint64_t PrimFlagsConjunctionPredicate.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsConjunctionPredicateCreate();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsConjunctionPredicate.&& infix(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

void static RIOPxrUsdTerm.|| infix(_:_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
}

void static RIOPxrUsdTerm.&& infix(_:_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t (*a6)(void *, uint64_t, void)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13 = (void *)a5();
  uint64_t v14 = (void *)a6(v13, a1, a2 & 1);

  uint64_t v15 = a6(v14, a3, a4 & 1);
  *a7 = v15;
}

uint64_t PrimFlagsDisjunctionPredicate.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsDisjunctionPredicateCreate();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsDisjunctionPredicate.|| infix(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

uint64_t PrimFlagsPredicate.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsPredicateCreate();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsPredicate.Tautology.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsPredicateCreateTautology();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsPredicate.Contradiction.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsPredicateCreateContradiction();
  *a1 = result;
  return result;
}

uint64_t PrimFlagsPredicate.traverseInstanceProxies(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies();
  *a1 = result;
  return result;
}

uint64_t PrimFlagsPredicate.isInstanceProxiesInTraversalIncluded.getter()
{
  return RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal();
}

uint64_t PrimFlagsPredicate.callAsFunction(prim:)()
{
  return RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim();
}

void PrimFlagsConjunctionPredicate.init(_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
}

uint64_t static PrimFlagsConjunctionPredicate.! prefix(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsCreateConjunctionPredicateNegation();
  *a1 = result;
  return result;
}

void PrimFlagsConjunctionPredicate.traverseInstanceProxies(_:)(uint64_t a1)
{
}

uint64_t PrimFlagsConjunctionPredicate.isInstanceProxiesInTraversalIncluded.getter()
{
  id v0 = (id)RIOPxrUsdPrimFlagsConjunctionPredicateToRIOPxrUsdPrimFlagsPredicate();
  uint64_t v1 = RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal();

  return v1;
}

uint64_t PrimFlagsConjunctionPredicate.callAsFunction(prim:)(uint64_t a1)
{
  return PrimFlagsConjunctionPredicate.callAsFunction(prim:)(a1, MEMORY[0x263F37A20]);
}

uint64_t static PrimFlagsConjunctionPredicate.Default.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsCreateDefaultPredicate();
  *a1 = result;
  return result;
}

void PrimFlagsDisjunctionPredicate.init(_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
}

void PrimFlagsConjunctionPredicate.init(_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void *, uint64_t, void)@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v9 = (void *)a3();
  uint64_t v10 = a4(v9, a1, a2 & 1);

  *a5 = v10;
}

uint64_t static PrimFlagsDisjunctionPredicate.! prefix(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimFlagsCreateDisjunctionPredicateNegation();
  *a1 = result;
  return result;
}

void PrimFlagsDisjunctionPredicate.traverseInstanceProxies(_:)(uint64_t a1)
{
}

void PrimFlagsConjunctionPredicate.traverseInstanceProxies(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  id v3 = (id)a2(*v2);
  RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies();

  __break(1u);
}

uint64_t PrimFlagsDisjunctionPredicate.isInstanceProxiesInTraversalIncluded.getter()
{
  id v0 = (id)RIOPxrUsdPrimFlagsDisjunctionPredicateToRIOPxrUsdPrimFlagsPredicate();
  uint64_t v1 = RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal();

  return v1;
}

uint64_t PrimFlagsDisjunctionPredicate.callAsFunction(prim:)(uint64_t a1)
{
  return PrimFlagsConjunctionPredicate.callAsFunction(prim:)(a1, MEMORY[0x263F37A40]);
}

uint64_t PrimFlagsConjunctionPredicate.callAsFunction(prim:)(uint64_t a1, uint64_t (*a2)(void))
{
  id v3 = (id)a2(*v2);
  uint64_t v4 = RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim();

  return v4;
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x263F8EE78];
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(int64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result || a1 > *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v3 + 16) <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(void *)(v3 + 16);
    }
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0);
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for [[Double]]);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for [Double]);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

{
  uint64_t result;

  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *id v0 = v1;
  if ((result & 1) == 0)
  {
    int64_t v3 = *(void *)(v1 + 16) + 1;
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 1);
  }
  return result;
}

{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1)) {
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(void *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Int>>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Int>>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityActionSpecification]>, &demangling cache variable for type metadata for [__RKEntityActionSpecification]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[AnimationResource]>, &demangling cache variable for type metadata for [AnimationResource]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityTriggerSpecification]>, &demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int32]>, &demangling cache variable for type metadata for [Int32]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.AssetPath>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.PrimSpec>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Reference>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Frame4D>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8]) {
      memmove(v13, v14, v8 << 7);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[128 * v8] || v13 >= &v14[128 * v8])
  {
    memcpy(v13, v14, v8 << 7);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float2x2>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float3x3>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    memcpy(v12, v13, 48 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    memcpy(v13, v14, v8 << 6);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 56 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Inputs.PropertyDelta>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<()>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    memcpy(v14, v15, 32 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[2 * v9]) {
      memmove(v14, v15, 2 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v9] || v14 >= &v15[2 * v9])
  {
    memcpy(v14, v15, 2 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnimationDefinition>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(animResource: AnimationResource, trackNumber: Int)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<([AnimationResource], Int)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnimationResource], Int));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(RIOPxrTfTokenRef, RIOPxrVtValueRef)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RIOPxrTfTokenRef, RIOPxrVtValueRef));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    _OWORD v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, type metadata accessor for RIOPxrTfTokenRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, type metadata accessor for RIOPxrTfTokenRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfLayerRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, 255, type metadata accessor for RIOPxrSdfLayerRef);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, type metadata accessor for RIOPxrSdfLayerRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, type metadata accessor for RIOPxrSdfLayerRef);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for UUID();
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  Swift::Int v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, type metadata accessor for RIOPxrSdfPathRef);
  id v2 = a1;
  _CFObject.hash(into:)();

  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)v2, v3, type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t i = a2 & ~v7;
  if ((*(void *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    a3(0);
    uint64_t v11 = *(void **)(*(void *)(v5 + 48) + 8 * i);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0(a4, 255, a5);
    id v12 = v11;
    LOBYTE(a4) = static _CFObject.== infix(_:_:)();

    if ((a4 & 1) == 0)
    {
      uint64_t v13 = ~v7;
      for (unint64_t i = (i + 1) & v13; ((*(void *)(v6 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
      {
        id v14 = *(id *)(*(void *)(v5 + 48) + 8 * i);
        char v15 = static _CFObject.== infix(_:_:)();

        if (v15) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  char v15;

  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t i = a2 & ~v7;
  if ((*(void *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    a3(0);
    uint64_t v11 = *(void **)(*(void *)(v5 + 48) + 8 * i);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0(a4, 255, a5);
    id v12 = v11;
    LOBYTE(a4) = static _CFObject.== infix(_:_:)();

    if ((a4 & 1) == 0)
    {
      uint64_t v13 = ~v7;
      for (unint64_t i = (i + 1) & v13; ((*(void *)(v6 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
      {
        id v14 = *(id *)(*(void *)(v5 + 48) + 8 * i);
        char v15 = static _CFObject.== infix(_:_:)();

        if (v15) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t, __n128);
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  v6.n128_f64[0] = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v21 = v2;
  unint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  int64_t v10 = a2 & ~v9;
  char v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    id v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v13 = v5 + 16;
    id v12 = v14;
    char v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4, v6);
      _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
      unint64_t v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      int64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ToolsFoundations.Token, RIOPxrVtValueRef>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    size_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for __RKEntityInteractionSpecification();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, __RKEntityInteractionSpecification>);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *uint64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  uint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    id v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    int64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      int64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v5 + 48) + 8 * v15);
    size_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
    id result = v17;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  int64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    int64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, OpaquePointer>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    id v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    size_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrTfTokenRef, RIOPxrVtValueRef>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    size_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  id v35 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    id result = (void *)swift_release();
    uint64_t v28 = v36;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }
  unint64_t v7 = v5;
  id result = (void *)(v5 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    unint64_t v7 = v36;
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  unint64_t v32 = (unint64_t)(v11 + 63) >> 6;
  BOOL v33 = v1 + 32;
  id v34 = v1 + 16;
  unint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      uint64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      int64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    int64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    uint64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *uint64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    id result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    int64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  int64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  int v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (URL, __REAsset)>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  id result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    uint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      uint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    int64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v29 + 72) * v16;
    outlined init with copy of (URL, __REAsset)(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    uint64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    outlined init with take of (URL, __REAsset)((uint64_t)v4, *(void *)(v7 + 56) + v21, &demangling cache variable for type metadata for (URL, __REAsset));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  uint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    uint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    id result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [Builder]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, RETypeID>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long *v21;
  void *v22;
  long long v23;
  long long v24;
  _OWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ImportSession.MeshAssetEstimate>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    uint64_t v21 = (long long *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    *uint64_t v22 = v19;
    v22[1] = v18;
    int64_t v25 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    *int64_t v25 = v23;
    v25[1] = v24;
    id result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  int64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [ImportSession.EvaluationFault]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [ToolsFoundations.Token]>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    uint64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    uint64_t v20 = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ToolsFoundations.Token, RIOPxrVtValueRef>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = 8 * v20;
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
    uint64_t v31 = *(void **)(*(void *)(v5 + 56) + v29);
    if ((a2 & 1) == 0)
    {
      id v32 = v30;
      id v33 = v31;
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 8 * v17;
    *(void *)(*(void *)(v7 + 48) + v18) = v30;
    *(void *)(*(void *)(v7 + 56) + v18) = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  unint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    char v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      char v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            char v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    id v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    id v33 = v32[1];
    id v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    int64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    uint64_t *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, OpaquePointer>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    int64_t v24 = *(void *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v24 = *(void *)(v36 + 8 * v13);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            int64_t v24 = *(void *)(v36 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    id v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((v37 & 1) == 0) {
      id v33 = v31;
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, type metadata accessor for RIOPxrSdfPathRef);
    uint64_t v14 = v31;
    _CFObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v14;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrTfTokenRef, RIOPxrVtValueRef>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = 8 * v20;
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
    uint64_t v31 = *(void **)(*(void *)(v5 + 56) + v29);
    if ((a2 & 1) == 0)
    {
      id v32 = v30;
      id v33 = v31;
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 8 * v17;
    *(void *)(*(void *)(v7 + 48) + v18) = v30;
    *(void *)(*(void *)(v7 + 56) + v18) = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = 8 * v20;
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
    uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v29);
    if ((a2 & 1) == 0)
    {
      id v32 = v30;
      swift_retain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfLayerRef(0);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, 255, type metadata accessor for RIOPxrSdfLayerRef);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 8 * v17;
    *(void *)(*(void *)(v7 + 48) + v18) = v30;
    *(void *)(*(void *)(v7 + 56) + v18) = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [Builder]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  long long v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, RETypeID>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        uint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          uint64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v9 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v20;
          }
        }
LABEL_21:
        uint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      int64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            int64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v15) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  id v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    id v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  long long *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  long long v39;
  long long v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ImportSession.MeshAssetEstimate>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    char v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      uint64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      char v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            char v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    id v33 = *v31;
    id v32 = v31[1];
    uint64_t v34 = (long long *)(*(void *)(v5 + 56) + 32 * v22);
    uint64_t v39 = *v34;
    uint64_t v40 = v34[1];
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v33;
    v19[1] = v32;
    unint64_t v20 = (_OWORD *)(*(void *)(v7 + 56) + 32 * v18);
    uint64_t *v20 = v39;
    v20[1] = v40;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  int64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [ImportSession.EvaluationFault]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    id v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        uint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                id v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      unint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [ToolsFoundations.Token]>);
}

uint64_t type metadata accessor for VariantSet()
{
  return self;
}

uint64_t type metadata accessor for VariantSets()
{
  return self;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  id v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  unint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    unint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    uint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (**v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  uint64_t v3 = v2;
  int v47 = type metadata accessor for __RKEntityInteractionSpecification();
  uint64_t v5 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, __RKEntityInteractionSpecification>);
  uint64_t v46 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v42 = (void *)(v8 + 64);
  if (v11 < 64) {
    unint64_t v13 = ~(-1 << v11);
  }
  else {
    unint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  uint64_t v40 = v2;
  uint64_t v41 = (unint64_t)(v11 + 63) >> 6;
  int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v45 = v5;
  uint64_t v15 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  unint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  unint64_t v18 = 0;
  id v44 = v8;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v41) {
      break;
    }
    unint64_t v23 = v42;
    unint64_t v24 = v42[v22];
    ++v18;
    if (!v24)
    {
      unint64_t v18 = v22 + 1;
      if (v22 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v24 = v42[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v41) {
              goto LABEL_34;
            }
            unint64_t v24 = v42[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v18 = v25;
      }
    }
LABEL_21:
    uint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    uint64_t v26 = *(void **)(*(void *)(v8 + 48) + 8 * v21);
    uint64_t v27 = *(void *)(v45 + 72);
    uint64_t v28 = *(void *)(v8 + 56) + v27 * v21;
    if (v46)
    {
      (*v15)(v7, v28, v47);
    }
    else
    {
      (*v43)(v7, v28, v47);
      uint64_t v29 = v26;
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, type metadata accessor for RIOPxrSdfPathRef);
    uint64_t v30 = v26;
    _CFObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v8 = v44;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      uint64_t v8 = v44;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v16 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(void *)(*(void *)(v10 + 48) + 8 * v19) = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v10 + 56) + v27 * v19, v7, v47);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v23 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  unint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (URL, __REAsset)>);
  int64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    unint64_t v13 = ~(-1 << v11);
  }
  else {
    unint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    uint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of (URL, __REAsset)(v30, (uint64_t)v7, &demangling cache variable for type metadata for (URL, __REAsset));
    }
    else
    {
      outlined init with copy of (URL, __REAsset)(v30, (uint64_t)v7);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v27;
    v19[1] = v28;
    uint64_t result = outlined init with take of (URL, __REAsset)((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, &demangling cache variable for type metadata for (URL, __REAsset));
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  BOOL v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v36) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    int64_t v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v36) {
        goto LABEL_33;
      }
      int64_t v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        char v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_33:
          swift_release();
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v36) {
              goto LABEL_33;
            }
            int64_t v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + v31);
    if ((v38 & 1) == 0)
    {
      uint64_t v34 = v32;
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, type metadata accessor for RIOPxrSdfPathRef);
    uint64_t v15 = v32;
    _CFObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    unint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      BOOL v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v15;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v24 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, id), uint64_t (*a4)(uint64_t, id), void (*a5)(void))
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v7; ++i)
    {
      id v12 = *(id *)(a1 + 8 * i + 32);
      if (a3(v10, v12))
      {
        uint64_t v13 = a4(v10, v12);
        a5();
        *(void *)(swift_allocObject() + 16) = v13;

        MEMORY[0x23ECBA100]();
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
      }
    }
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO4PrimCG_yts5NeverOTg503_s9d3IO4F32C8traverse4withyyACXE_tFyACXEfU_AHIgg_Tf1cn_nTf4ng_n(unint64_t a1, void (*a2)(uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (!v4) {
      return v5;
    }
    uint64_t v12 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v7 = 0;
    uint64_t v5 = v12;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = MEMORY[0x23ECBA630](v7, a1);
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7 + 32);
        swift_retain();
      }
      a2(v8);
      swift_release();
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      unint64_t v11 = v10 + 1;
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      ++v7;
      *(void *)(v12 + 16) = v11;
      if (v4 == v7) {
        return v5;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *specialized StaticTypePrim.init(prim:type:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v2 + 80);
  uint64_t v5 = type metadata accessor for Properties();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - v7;
  *((void *)v2 + 2) = a1;
  swift_retain();
  Prim.properties<A>(of:)(v4, v8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v2[*(void *)(*(void *)v2 + 96)], v8, v5);
  return v2;
}

uint64_t type metadata accessor for Properties()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized StaticTypePrim.subscript.setter(uint64_t a1)
{
  double v2 = MEMORY[0x270FA5388](a1);
  uint64_t v4 = *(void *)(v1 + 16);
  (*(void (**)(char *, double))(v5 + 16))((char *)v7 - v3, v2);
  v7[1] = v4;
  swift_retain();
  swift_setAtReferenceWritableKeyPath();
  swift_release();
  return swift_release();
}

{
  swift_beginAccess();
  type metadata accessor for Properties();
  swift_retain();
  specialized Properties.subscript.setter(a1);
  return swift_endAccess();
}

id specialized Properties.subscript.setter(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return Properties.subscript.setter((uint64_t)v11, a2, 0, 0, NAN, a3, a4);
}

uint64_t specialized StaticTypePrim.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for Properties();
  swift_retain();
  specialized Properties.subscript.setter(a1, a2, v6, a3);
  return swift_endAccess();
}

uint64_t specialized StaticTypePrim.subscript.setter(uint64_t a1, void *a2, int a3, unint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12 = type metadata accessor for Optional();
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)&v19 - v14, a1, v13);
  swift_beginAccess();
  uint64_t v17 = type metadata accessor for Properties();
  swift_retain();
  Properties.subscript.setter((uint64_t)v15, a2, a3, a4, a6, v17, a5);
  return swift_endAccess();
}

uint64_t specialized Properties.subscript.getter()
{
  swift_getAtKeyPath();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v1 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    double v2 = (void *)swift_allocObject();
    v2[2] = v1;
    swift_retain();
    uint64_t v3 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
  }
  else
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  return v3;
}

uint64_t type metadata accessor for Attribute()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Attribute.value.setter(uint64_t a1)
{
  return static UsdAttributeValue.setValue(_:to:time:)(a1, v1);
}

uint64_t specialized Attribute.subscript.setter(uint64_t a1)
{
  return static UsdAttributeValue.setValue(_:to:time:)(a1, v1);
}

uint64_t partial apply for closure #1 in Properties.subscript.getter(void **a1)
{
  return static UsdAttributeValue.getValue(from:time:)(*a1);
}

uint64_t base witness table accessor for Equatable in Object(uint64_t a1, uint64_t a2)
{
  return _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type Object and conformance Object, a2, (void (*)(uint64_t))type metadata accessor for Object);
}

uint64_t type metadata accessor for Object()
{
  return self;
}

uint64_t sub_23AA79F9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Object.allowedTokens.getter();
  *a1 = result;
  return result;
}

void sub_23AA79FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_23AA7A008@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Object.inheritsPath.getter();
  *a1 = result;
  return result;
}

void sub_23AA7A034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_23AA7A074(uint64_t a1, id *a2, uint64_t a3)
{
}

uint64_t sub_23AA7A0A0(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_23AA7A0CC()
{
  return 16;
}

__n128 sub_23AA7A0D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_23AA7A0E4(uint64_t a1, id *a2, uint64_t a3)
{
}

uint64_t sub_23AA7A110(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_23AA7A13C()
{
  return 16;
}

__n128 sub_23AA7A148(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_23AA7A154(uint64_t a1, id *a2, uint64_t a3)
{
}

uint64_t sub_23AA7A180(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_23AA7A1AC()
{
  return 16;
}

__n128 sub_23AA7A1B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA7A1CC()
{
  return 16;
}

__n128 sub_23AA7A1D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_23AA7A1E4(uint64_t a1, id *a2, uint64_t a3)
{
}

uint64_t sub_23AA7A210(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_23AA7A23C()
{
  return 16;
}

__n128 sub_23AA7A248(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA7A25C()
{
  return 16;
}

__n128 sub_23AA7A268(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA7A274@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimCopyTypeName();
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A2A4()
{
  return RIOPxrUsdPrimSetTypeName();
}

uint64_t sub_23AA7A2B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimGetSpecifier();
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A2E8(void *a1, uint64_t a2)
{
  return MEMORY[0x270F22BB8](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_23AA7A2FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Prim.propertyOrder.getter();
  *a1 = result;
  return result;
}

void sub_23AA7A328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_23AA7A354@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimIsActive();
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A384(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F22B98](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_23AA7A398@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Prim.appliedSchemas.getter();
  *a1 = result;
  return result;
}

void sub_23AA7A3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_23AA7A3F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RIOPxrUsdPrimGetTaggedAsEntity();
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A420(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F22BC0](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_23AA7A434@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Prim.childrenOrder.getter();
  *a1 = result;
  return result;
}

void sub_23AA7A460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_23AA7A48C()
{
  return Attribute.value.getter();
}

uint64_t sub_23AA7A4B0(uint64_t a1)
{
  return specialized Attribute.value.setter(a1);
}

uint64_t sub_23AA7A4D4()
{
  return 16;
}

__n128 sub_23AA7A4E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA7A4EC()
{
  return Attribute.subscript.getter();
}

uint64_t sub_23AA7A514(uint64_t a1)
{
  return specialized Attribute.subscript.setter(a1);
}

uint64_t sub_23AA7A53C()
{
  return 16;
}

__n128 sub_23AA7A548(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA7A554@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Relationship.targets.getter();
  *a1 = result;
  return result;
}

void sub_23AA7A580()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  Relationship.targets.setter(v0);
}

uint64_t sub_23AA7A5B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (!result) {
    uint64_t result = RIOPxrVtValueCreateEmptyValue();
  }
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A5F4()
{
  return RIOPxrUsdAttributeSetValue();
}

uint64_t sub_23AA7A614()
{
  return RIOPxrUsdAttributeSetValue();
}

uint64_t sub_23AA7A62C()
{
  return 0;
}

uint64_t sub_23AA7A63C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdAttributeCopyColorSpace();
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A66C()
{
  return RIOPxrUsdAttributeSetColorSpace();
}

uint64_t sub_23AA7A680@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for Properties();
  return Properties.subscript.getter(v5, v6, v4, a3);
}

uint64_t sub_23AA7A6E0()
{
  return 24;
}

__n128 sub_23AA7A6EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA7A708()
{
  return 24;
}

__n128 sub_23AA7A714(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA7A728@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return keypath_get_75Tm(a1, (uint64_t (*)(uint64_t, uint64_t))Properties.subscript.getter, a2);
}

uint64_t sub_23AA7A740(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Properties.subscript(dynamicMember:) : <A>Properties<A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Properties.subscript.setter);
}

uint64_t sub_23AA7A76C()
{
  return 8;
}

uint64_t sub_23AA7A778@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return keypath_get_75Tm(a1, (uint64_t (*)(uint64_t, uint64_t))specialized Properties.subscript.getter, a2);
}

uint64_t keypath_get_75Tm@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for Properties();
  uint64_t result = a2(v5, v6);
  *a3 = result;
  return result;
}

uint64_t sub_23AA7A7EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Properties.subscript(dynamicMember:) : <A>Properties<A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized Properties.subscript.setter);
}

uint64_t sub_23AA7A818()
{
  return 8;
}

uint64_t sub_23AA7A824@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  return StaticTypePrim.subscript.getter(*a1, a2);
}

uint64_t sub_23AA7A84C(uint64_t a1)
{
  return specialized StaticTypePrim.subscript.setter(a1);
}

uint64_t sub_23AA7A890()
{
  return 16;
}

__n128 sub_23AA7A89C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA7A8A8@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StaticTypePrim.subscript.getter(*a1, *(uint64_t *)((char *)a1 + a2 - 8), a3);
}

uint64_t sub_23AA7A8E0()
{
  return 24;
}

__n128 sub_23AA7A8EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA7A900@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StaticTypePrim.subscript.getter(*(uint64_t **)a1, *(void *)(a2 + a1 - 8), a3, *(double *)(a1 + 8));
}

uint64_t sub_23AA7A93C()
{
  return 24;
}

__n128 sub_23AA7A948(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA7A95C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = StaticTypePrim.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A98C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for StaticTypePrim.subscript(dynamicMember:) : <A>StaticTypePrim<A>A(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized StaticTypePrim.subscript.setter);
}

uint64_t sub_23AA7A9B8()
{
  return 8;
}

uint64_t sub_23AA7A9C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = StaticTypePrim.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23AA7A9F4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for StaticTypePrim.subscript(dynamicMember:) : <A>StaticTypePrim<A>A(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized StaticTypePrim.subscript.setter);
}

uint64_t sub_23AA7AA20()
{
  return 8;
}

void *sub_23AA7AA2C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t method lookup function for Object(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Object);
}

void *initializeBufferWithCopyOfBuffer for Object.Error(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for Object.Error(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for Object.Error(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for Object.Error(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for Object.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Object.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Object.Error()
{
  return &type metadata for Object.Error;
}

uint64_t type metadata accessor for Property()
{
  return self;
}

uint64_t type metadata completion function for Attribute()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for VariantSet(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VariantSet);
}

uint64_t method lookup function for VariantSets(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VariantSets);
}

uint64_t type metadata accessor for MaterialCollectionBinding()
{
  return self;
}

uint64_t method lookup function for MaterialCollectionBinding(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MaterialCollectionBinding);
}

uint64_t dispatch thunk of MaterialCollectionBinding.__allocating_init(materialBindingAPI:base:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata completion function for Properties()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Properties(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for Properties(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return v5(v6);
}

void *initializeWithCopy for Properties(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

void *assignWithCopy for Properties(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *initializeWithTake for Properties(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for Properties(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Properties(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for Properties(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x23AA7B548);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for StaticTypePrim()
{
  uint64_t result = type metadata accessor for Properties();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for StaticTypePrim()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for StaticTypePrim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StaticTypePrim);
}

uint64_t dispatch thunk of StaticTypePrim.__allocating_init(prim:type:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of StaticTypePrim.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of StaticTypePrim.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of StaticTypePrim.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

ValueMetadata *type metadata accessor for PrimFlagsPredicate()
{
  return &type metadata for PrimFlagsPredicate;
}

ValueMetadata *type metadata accessor for PrimFlagsConjunctionPredicate()
{
  return &type metadata for PrimFlagsConjunctionPredicate;
}

ValueMetadata *type metadata accessor for PrimFlagsDisjunctionPredicate()
{
  return &type metadata for PrimFlagsDisjunctionPredicate;
}

uint64_t outlined init with copy of (URL, __REAsset)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v75 = a7;
  char v81 = a6;
  uint64_t v73 = a2;
  uint64_t v77 = a8;
  uint64_t v78 = a9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v61 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  float v59 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v60 = (char *)&v58 - v15;
  uint64_t v16 = type metadata accessor for __RKEntityActionAnimationStyle();
  uint64_t v71 = *(void *)(v16 - 8);
  uint64_t v72 = v16;
  MEMORY[0x270FA5388](v16);
  long long v76 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for __RKEntityMoveEaseType();
  uint64_t v67 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  unint64_t v74 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for __RKEntityMoveEase();
  uint64_t v65 = *(void *)(v19 - 8);
  uint64_t v66 = v19;
  MEMORY[0x270FA5388](v19);
  char v70 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v64 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v68 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v79 = *(void *)(v23 - 8);
  uint64_t v80 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v58 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  unint64_t v27 = (char *)&v58 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  char v37 = (char *)&v58 - v36;
  if (a3 == 2003789939 && a4 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_retain();
    __RKEntityShowActionBuildInAnimationType.init(inputs:)((uint64_t)v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v37, v30, v31);
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v68, v73, v21);
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v70, v75, v66);
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v74, v77, v69);
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v76, v78, v72);
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v34, v37, v31);
    __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)();
    uint64_t v39 = v79;
    uint64_t v38 = v80;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v27, *MEMORY[0x263F16380], v80);
    uint64_t v40 = v81;
    unint64_t v41 = *v81;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v40 = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1, v41);
      unint64_t *v40 = v41;
    }
    unint64_t v44 = *(void *)(v41 + 16);
    unint64_t v43 = *(void *)(v41 + 24);
    if (v44 >= v43 >> 1)
    {
      unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v41);
      unint64_t *v40 = v41;
    }
    *(void *)(v41 + 16) = v44 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v41+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v44, v27, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v37, v31);
  }
  else if (a3 == 1701079400 && a4 == 0xE400000000000000 {
         || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  }
  {
    swift_retain();
    uint64_t v46 = v61;
    __RKEntityHideActionBuildOutAnimationType.init(inputs:)(v61);
    uint64_t v47 = v62;
    uint64_t v48 = v63;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v46, 0, 1, v63);
    uint64_t v49 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v60, v46, v48);
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v68, v73, v21);
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v70, v75, v66);
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v74, v77, v69);
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v76, v78, v72);
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v59, v49, v48);
    uint64_t v50 = v58;
    __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)();
    uint64_t v52 = v79;
    uint64_t v51 = v80;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v50, *MEMORY[0x263F16378], v80);
    id v53 = v81;
    unint64_t v54 = *v81;
    char v55 = swift_isUniquelyReferenced_nonNull_native();
    *id v53 = v54;
    if ((v55 & 1) == 0)
    {
      unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v54 + 16) + 1, 1, v54);
      *id v53 = v54;
    }
    unint64_t v57 = *(void *)(v54 + 16);
    unint64_t v56 = *(void *)(v54 + 24);
    if (v57 >= v56 >> 1)
    {
      unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1, v54);
      *id v53 = v54;
    }
    *(void *)(v54 + 16) = v57 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v54+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v57, v50, v51);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v49, v48);
  }
  return result;
}

uint64_t specialized static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(void *a1)
{
  uint64_t v67 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v65 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v66 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v69 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __RKEntityMoveEaseType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v68 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v71 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityMoveEase();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v70 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for __RKEntityActionAnimationStyle();
  uint64_t v73 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v72 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v19 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v19 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v32 = 0;
LABEL_12:
    uint64_t v75 = v32;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v32, 1);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v63 = v11;
  uint64_t v64 = v16;
  uint64_t v20 = v10;
  uint64_t v21 = v6;
  uint64_t v22 = v5;
  uint64_t v23 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v24 = RIOPxrUsdAttributeCopyValue();
  if (!v24)
  {
LABEL_11:
    uint64_t v32 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  uint64_t v25 = (void *)v24;
  uint64_t v26 = RIOPxrVtValueCopyToken();
  if (!v26)
  {

    goto LABEL_11;
  }
  unint64_t v27 = (void *)v26;

  swift_release();
  uint64_t v28 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v27, 0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v31 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v31 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  uint64_t v35 = v22;
  uint64_t v36 = v21;
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v75);

  swift_release();
  char v37 = v75;
  if (v76 == 1)
  {
    unint64_t v74 = v75;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    uint64_t v38 = v37;
LABEL_23:
    outlined consume of Result<Double, Object.Error>(v38, 1);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v39 = v20;
  uint64_t v61 = v35;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v40 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v40 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v75);

  swift_release();
  unint64_t v41 = v75;
  if (v76)
  {
    unint64_t v74 = v75;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    uint64_t v38 = v41;
    goto LABEL_23;
  }
  swift_retain();
  __RKEntityActionAnimationStyle.init(inputs:)((uint64_t)v15);
  id v60 = v37;
  uint64_t v42 = v73;
  uint64_t v43 = v64;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v15, 0, 1, v64);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v72, v15, v43);
  swift_retain();
  uint64_t v44 = v71;
  __RKEntityMoveEase.init(inputs:)(v71);
  uint64_t v45 = v63;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v44, 0, 1, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v70, v44, v39);
  swift_retain();
  uint64_t v46 = v69;
  __RKEntityMoveEaseType.init(inputs:)(v69);
  uint64_t v47 = v61;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v46, 0, 1, v61);
  uint64_t v48 = v68;
  uint64_t v49 = v46;
  uint64_t v50 = v47;
  uint64_t v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 32))(v68, v49, v47);
  uint64_t v75 = (void *)MEMORY[0x263F8EE78];
  MEMORY[0x270FA5388](v51);
  *(&v60 - 10) = (void *)v62;
  *(&v60 - 9) = v30;
  *(&v60 - 8) = v18;
  *(&v60 - 7) = &v75;
  *(&v60 - 6) = v60;
  *(&v60 - 5) = v41;
  *(&v60 - 4) = v52;
  *(&v60 - 3) = v48;
  id v53 = v72;
  *(&v60 - 2) = v72;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:), (uint64_t)(&v60 - 12));
  swift_bridgeObjectRelease();
  uint64_t v33 = (uint64_t)v75;
  if (*((void *)v75 + 2) < 2uLL)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v54 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v55 = *(void *)(v54 - 8);
    unint64_t v56 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_23AAB22A0;
    (*(void (**)(char *, void, uint64_t))(v65 + 104))(v66, *MEMORY[0x263F16310], v67);
    swift_bridgeObjectRetain_n();
    id v53 = v72;
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, void, uint64_t))(v55 + 104))(v57 + v56, *MEMORY[0x263F163A8], v54);
    uint64_t v50 = v61;
    swift_bridgeObjectRelease();
    uint64_t v33 = v57;
  }
  uint64_t v58 = v73;
  float v59 = v70;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v68, v50);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v59, v39);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v53, v64);
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unint64_t **)(v2 + 40), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t ObjectsChangeInfo.changedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ObjectsChangeInfo.changedInfoOnlyPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ObjectsChangeInfo.resyncedPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ObjectsChangeInfo.changedFields(_:)(id *a1)
{
  uint64_t v2 = *v1;
  if (!*(void *)(v2 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  id v3 = *a1;
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
  }

  return v6;
}

uint64_t ObjectsChangeInfo.hasChangedFields(_:)(id *a1)
{
  if (*(void *)(*(void *)v1 + 16))
  {
    id v2 = *a1;
    specialized __RawDictionaryStorage.find<A>(_:)(v2);
    char v4 = v3;
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t ObjectsChangeInfo.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  if (*(void *)(v2 + 16))
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = MEMORY[0x23ECBA140](v2, &type metadata for SceneDescriptionFoundations.Path);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 32;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    uint64_t v5 = 0x6465636E79736572;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)0xE000000000000000;
  if (*(void *)(v1 + 16))
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = MEMORY[0x23ECBA140](v1, &type metadata for SceneDescriptionFoundations.Path);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    uint64_t v8 = 0xD000000000000016;
    uint64_t v6 = (void *)0x800000023AAB06C0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v8;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t ObjectsChangeInfo.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRetain();
  uint64_t v4 = RIOPxrUsdNoticeObjectsChangedCopyStageRef();
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for Stage();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v41 = v3;
  Swift::String v7 = (void *)RIOPxrUsdNoticeObjectsChangedCopyResyncedPaths();
  uint64_t v44 = 0;
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v8 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      Swift::String v7 = (void *)v2;
    }
    else {
      Swift::String v7 = (void *)(v2 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v42 = v6;
    if (v9) {
      goto LABEL_6;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v42 = v6;
  if (!v9) {
    goto LABEL_22;
  }
LABEL_6:
  uint64_t v44 = v2;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v10 = v44;
  if ((v2 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v12 = MEMORY[0x23ECBA630](i, v2);
      uint64_t v44 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v44;
      }
      *(void *)(v10 + 16) = v14 + 1;
      *(void *)(v10 + 8 * v14 + 32) = v12;
    }
  }
  else
  {
    for (uint64_t j = 0; j != v9; ++j)
    {
      uint64_t v16 = *(void **)(v8 + 8 * j + 32);
      uint64_t v44 = v10;
      unint64_t v18 = *(void *)(v10 + 16);
      unint64_t v17 = *(void *)(v10 + 24);
      id v19 = v16;
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v10 = v44;
      }
      *(void *)(v10 + 16) = v18 + 1;
      *(void *)(v10 + 8 * v18 + 32) = v19;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_23:
  swift_bridgeObjectRetain();
  Swift::String v7 = (void *)RIOPxrUsdNoticeObjectsChangedCopyChangedInfoOnlyPaths();
  uint64_t v44 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v20 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      Swift::String v7 = (void *)v2;
    }
    else {
      Swift::String v7 = (void *)(v2 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21)
    {
LABEL_25:
      uint64_t v44 = v2;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
      if ((v21 & 0x8000000000000000) == 0)
      {
        uint64_t v22 = v44;
        if ((v2 & 0xC000000000000001) != 0)
        {
          for (uint64_t k = 0; k != v21; ++k)
          {
            uint64_t v24 = MEMORY[0x23ECBA630](k, v20);
            uint64_t v44 = v22;
            unint64_t v26 = *(void *)(v22 + 16);
            unint64_t v25 = *(void *)(v22 + 24);
            if (v26 >= v25 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
              uint64_t v22 = v44;
            }
            *(void *)(v22 + 16) = v26 + 1;
            *(void *)(v22 + 8 * v26 + 32) = v24;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          id v40 = a1;
          for (uint64_t m = 0; m != v21; ++m)
          {
            uint64_t v28 = *(void **)(v20 + 8 * m + 32);
            uint64_t v44 = v22;
            unint64_t v30 = *(void *)(v22 + 16);
            unint64_t v29 = *(void *)(v22 + 24);
            id v31 = v28;
            if (v30 >= v29 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
              uint64_t v22 = v44;
            }
            *(void *)(v22 + 16) = v30 + 1;
            *(void *)(v22 + 8 * v30 + 32) = v31;
          }
          swift_bridgeObjectRelease();
          a1 = v40;
        }
        goto LABEL_42;
      }
LABEL_54:
      __break(1u);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      __break(1u);
      swift_bridgeObjectRelease();

      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = MEMORY[0x263F8EE78];
LABEL_42:
  uint64_t v44 = v41;
  uint64_t v32 = *(void *)(v10 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (uint64_t n = 0; n != v32; ++n)
    {
      uint64_t v43 = *(void **)(v10 + 8 * n + 32);
      uint64_t v34 = v43;
      closure #1 in ObjectsChangeInfo.init(_:)(&v44, &v43);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v35 = v44;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v35 = v41;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v35;
  uint64_t v36 = *(void *)(v22 + 16);
  if (v36)
  {
    swift_bridgeObjectRetain();
    for (iuint64_t i = 0; ii != v36; ++ii)
    {
      uint64_t v43 = *(void **)(v22 + 8 * ii + 32);
      uint64_t v38 = v43;
      closure #1 in ObjectsChangeInfo.init(_:)(&v44, &v43);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v35 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a1 = v35;
  a1[1] = v22;
  a1[2] = v10;
  a1[3] = v42;
  return result;
}

uint64_t closure #1 in ObjectsChangeInfo.init(_:)(uint64_t *a1, void **a2)
{
  unint64_t v3 = *a2;
  if ((RIOPxrSdfPathIsPropertyPath() & 1) == 0 && !RIOPxrSdfPathIsNamespacedPropertyPath())
  {
    unint64_t v19 = v3;
    unint64_t v26 = (void *)RIOPxrUsdNoticeObjectsChangedCopyChangedFields();
    type metadata accessor for RIOPxrTfTokenRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    unint64_t v18 = (void *)MEMORY[0x263F8EE78];
    uint64_t v16 = MEMORY[0x263F8EE78];
    if (!(MEMORY[0x263F8EE78] >> 62))
    {
      uint64_t v27 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v27)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        uint64_t v29 = MEMORY[0x263F8EE78];
        goto LABEL_41;
      }
LABEL_14:
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 & ~(v27 >> 63), 0);
      if (v27 < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v49 = v19;
      uint64_t v29 = (uint64_t)v18;
      if ((v16 & 0xC000000000000001) != 0)
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          uint64_t v31 = MEMORY[0x23ECBA630](i, v16);
          unint64_t v33 = *(void *)(v29 + 16);
          unint64_t v32 = *(void *)(v29 + 24);
          if (v33 >= v32 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          }
          *(void *)(v29 + 16) = v33 + 1;
          *(void *)(v29 + 8 * v33 + 32) = v31;
        }
      }
      else
      {
        for (uint64_t j = 0; j != v27; ++j)
        {
          unint64_t v40 = v18[2];
          unint64_t v39 = v18[3];
          id v41 = *(id *)(v16 + 8 * j + 32);
          if (v40 >= v39 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          }
          v18[2] = v40 + 1;
          v18[v40 + 4] = v41;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v19 = v49;
LABEL_41:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v51 = *a1;
      *a1 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, (void *)v19, isUniquelyReferenced_nonNull_native);
      *a1 = v51;

      return swift_bridgeObjectRelease();
    }
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v27) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }
  uint64_t v4 = RIOPxrSdfPathCopyPrimPath();
  uint64_t v5 = (void *)RIOPxrSdfPathCopyElementString();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  unint64_t v9 = specialized Collection.dropFirst(_:)(1uLL, v6, v8);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = MEMORY[0x23ECB9FE0](v9, v11, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v48 = (void *)v4;
  unint64_t v17 = (void *)RIOPxrUsdNoticeObjectsChangedCopyChangedFields();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v18 = (void *)MEMORY[0x263F8EE78];
  unint64_t v19 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_5:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
      if ((v20 & 0x8000000000000000) == 0)
      {
        uint64_t v21 = v18;
        if ((v19 & 0xC000000000000001) != 0)
        {
          for (uint64_t k = 0; k != v20; ++k)
          {
            uint64_t v23 = MEMORY[0x23ECBA630](k, v19);
            unint64_t v25 = v21[2];
            unint64_t v24 = v21[3];
            if (v25 >= v24 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
            }
            _OWORD v21[2] = v25 + 1;
            v21[v25 + 4] = v23;
          }
        }
        else
        {
          for (uint64_t m = 0; m != v20; ++m)
          {
            unint64_t v36 = v18[2];
            unint64_t v35 = v18[3];
            id v37 = *(id *)(v19 + 8 * m + 32);
            if (v36 >= v35 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            }
            v18[2] = v36 + 1;
            v18[v36 + 4] = v37;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      __break(1u);
      goto LABEL_39;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)MEMORY[0x263F8EE78];
LABEL_33:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v42 = RIOPxrTfTokenCreateWithCString();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  }
  unint64_t v44 = v21[2];
  unint64_t v43 = v21[3];
  if (v44 >= v43 >> 1) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v44 + 1, 1, v21);
  }
  _OWORD v21[2] = v44 + 1;
  v21[v44 + 4] = v42;
  id v45 = v48;
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v21, v45, v46);
  *a1 = v50;

  return swift_bridgeObjectRelease();
}

uint64_t ObjectsChangeInfo.stage.getter()
{
  return swift_retain();
}

uint64_t destroy for ObjectsChangeInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void *initializeWithCopy for ObjectsChangeInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ObjectsChangeInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ObjectsChangeInfo(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectsChangeInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectsChangeInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectsChangeInfo()
{
  return &type metadata for ObjectsChangeInfo;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }
  return String.subscript.getter();
}

void *NamedPropertyDirtyState.__allocating_init(propertyName:)(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = v1;
  id v3 = v1;
  uint64_t v4 = MEMORY[0x263F8EE88];
  id v5 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v3, MEMORY[0x263F8EE88]);

  v2[2] = v4;
  v2[3] = v5;
  return v2;
}

uint64_t PropertyDirtyState.propertyMetadataContainsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 144))(a1, 0);
}

uint64_t PropertyDirtyState.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static PropertyDirtyState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a2) & 1;
}

uint64_t PropertyDirtyState.isEqual(to:)(uint64_t a1)
{
  return specialized static Set.== infix(_:_:)(*(void *)(v1 + 16), *(void *)(a1 + 16));
}

uint64_t PropertyDirtyState.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PropertyDirtyState.Type);
  uint64_t v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v1._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 0xD000000000000020;
  v3._object = (void *)0x800000023AAB06E0;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:core:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  if (!a2)
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d105IO22TypeNamePrimDirtyStateC04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16fg2O5h88VG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13DescriptorRefaSgtcfc12generateCoreL_AQyFSo08I60TftX0aAKcfu_33_1208ebe0c1611b0e36169838b3b02464AkUTf3nnnpk_nTf1cn_n(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrTfTokenRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a2 = RIOBuilderDirtyPropertyDescriptorCreateWithMetadataDescriptors();
  }
  *(void *)(v4 + 24) = a2;
  return v4;
}

uint64_t PropertyDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x23ECBB5D0]();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v9 = v5;
  if ((v6 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v11 = MEMORY[0x23ECBA630](i, v6);
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v12 = *(void *)(v9 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v9 + 16) = v13 + 1;
      *(void *)(v9 + 8 * v13 + 32) = v11;
    }
  }
  else
  {
    for (uint64_t j = 0; j != v7; ++j)
    {
      unint64_t v15 = *(void *)(v5 + 16);
      unint64_t v16 = *(void *)(v5 + 24);
      id v17 = *(id *)(v6 + 8 * j + 32);
      if (v15 >= v16 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
      }
      *(void *)(v5 + 16) = v15 + 1;
      *(void *)(v5 + 8 * v15 + 32) = v17;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v18 = specialized Set.init<A>(_:)(v9);
  swift_bridgeObjectRelease();
  unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 144);
  return v19(v18, a1);
}

uint64_t PropertyDirtyState.deinit()
{
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t PropertyDirtyState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int PropertyDirtyState.hashValue.getter()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 120))(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PropertyDirtyState()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 120))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PropertyDirtyState()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PropertyDirtyState()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 120))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertyDirtyState()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PropertyDirtyState(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))(*a2) & 1;
}

id NamedPropertyDirtyState.propertyName.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 32);
  *a1 = v2;
  return v2;
}

void *NamedPropertyDirtyState.__allocating_init(propertyName:propertyMetadataContainsAnyOf:)(void **a1, uint64_t a2)
{
  Swift::String v3 = *a1;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v4 = (void *)swift_allocObject();
  v4[4] = v3;
  id v5 = v3;
  id v6 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v5, a2);

  v4[2] = a2;
  v4[3] = v6;
  return v4;
}

uint64_t type metadata accessor for NamedPropertyDirtyState()
{
  return self;
}

uint64_t NamedPropertyDirtyState.hash(into:)(uint64_t a1)
{
  Swift::String v3 = *(void **)(v1 + 32);
  type metadata accessor for RIOPxrTfTokenRef(0);
  _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
  id v4 = v3;
  _CFObject.hash(into:)();

  uint64_t v5 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t NamedPropertyDirtyState.isEqual(to:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = *(void **)(v0 + 32);
    uint64_t v5 = *(void **)(v2 + 32);
    type metadata accessor for RIOPxrTfTokenRef(0);
    _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
    swift_retain();
    id v6 = v4;
    id v7 = v5;
    char v8 = static _CFObject.== infix(_:_:)();

    if (v8)
    {
      uint64_t v9 = *(void *)(v1 + 16);
      uint64_t v10 = *(void *)(v3 + 16);
      swift_bridgeObjectRetain();
      char v11 = specialized static Set.== infix(_:_:)(v9, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = 0;
    }
    swift_release();
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t NamedPropertyDirtyState.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NamedPropertyDirtyState.Type);
  uint64_t v1 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  id v2 = *(id *)(v0 + 32);
  uint64_t v3 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0x747265706F727028;
  v9._object = (void *)0xEF203A656D614E79;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v10._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v12._object = (void *)0x800000023AAB0710;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

id generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(void *a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    return a1;
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      id v7 = a2;
      specialized ContiguousArray.reserveCapacity(_:)();
      id result = (id)specialized Set.startIndex.getter(a3);
      uint64_t v8 = (uint64_t)result;
      uint64_t v10 = v9;
      char v12 = v11 & 1;
      while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(unsigned char *)(a3 + 32))
      {
        if (((*(void *)(a3 + 56 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          goto LABEL_16;
        }
        if (*(_DWORD *)(a3 + 36) != v10) {
          goto LABEL_17;
        }
        RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        id result = (id)specialized _NativeSet.index(after:)(v8, v10, v12 & 1, a3);
        uint64_t v8 = (uint64_t)result;
        uint64_t v10 = v13;
        char v12 = v14 & 1;
        if (!--v6)
        {
          outlined consume of Set<ToolsFoundations.Token>.Index._Variant((uint64_t)result, v13, v14 & 1);
          uint64_t v5 = a2;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
    }
    else
    {
      id v15 = a2;
LABEL_14:
      type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v17 = RIOBuilderAnyValueDirtyPropertyDescriptorCreateWithNameAndMetadataDescriptors();

      return (id)v17;
    }
  }
  return result;
}

void NamedPropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:core:)()
{
}

void NamedPropertyDirtyState.__ivar_destroyer()
{
}

uint64_t NamedPropertyDirtyState.deinit()
{
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t NamedPropertyDirtyState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t NamespacedPropertyDirtyState.propertyNamespace.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *NamespacedPropertyDirtyState.__allocating_init(propertyNamespace:propertyMetadataContainsAnyOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NamespacedPropertyDirtyState();
  uint64_t v6 = (void *)swift_allocObject();
  v6[4] = a1;
  v6[5] = a2;
  swift_bridgeObjectRetain();
  id v7 = generateCore #1 () in NamespacedPropertyDirtyState.init(propertyNamespace:propertyMetadataContainsAnyOf:core:)(0, a1, a2, a3);
  swift_bridgeObjectRelease();
  v6[2] = a3;
  v6[3] = v7;
  return v6;
}

uint64_t NamespacedPropertyDirtyState.hash(into:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t NamespacedPropertyDirtyState.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  BOOL v3 = v0[4] == *(void *)(v1 + 32) && v0[5] == *(void *)(v1 + 40);
  if (!v3 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = v0[2];
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v4) = specialized static Set.== infix(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return v4 & 1;
}

uint64_t NamespacedPropertyDirtyState.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NamespacedPropertyDirtyState.Type);
  uint64_t v1 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 32);
  BOOL v3 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x800000023AAB0730;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v7._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0xD000000000000020;
  v9._object = (void *)0x800000023AAB0750;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

id generateCore #1 () in NamespacedPropertyDirtyState.init(propertyNamespace:propertyMetadataContainsAnyOf:core:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    return a1;
  }
  else
  {
    uint64_t v6 = MEMORY[0x23ECB9F30](a2, a3);
    Swift::String v7 = (void *)v6;
    uint64_t v8 = *(void *)(a4 + 16);
    if (v8)
    {
      uint64_t v18 = (void *)v6;
      specialized ContiguousArray.reserveCapacity(_:)();
      id result = (id)specialized Set.startIndex.getter(a4);
      uint64_t v9 = (uint64_t)result;
      uint64_t v11 = v10;
      char v13 = v12 & 1;
      while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(unsigned char *)(a4 + 32))
      {
        if (((*(void *)(a4 + 56 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        if (*(_DWORD *)(a4 + 36) != v11) {
          goto LABEL_16;
        }
        RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        id result = (id)specialized _NativeSet.index(after:)(v9, v11, v13 & 1, a4);
        uint64_t v9 = (uint64_t)result;
        uint64_t v11 = v14;
        char v13 = v15 & 1;
        if (!--v8)
        {
          outlined consume of Set<ToolsFoundations.Token>.Index._Variant((uint64_t)result, v14, v15 & 1);
          Swift::String v7 = v18;
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    else
    {
LABEL_13:
      type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v17 = RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCreateWithNamespacePrefixAndMetadataDescriptors();

      return (id)v17;
    }
  }
  return result;
}

void NamespacedPropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:core:)()
{
}

uint64_t NamespacedPropertyDirtyState.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NamespacedPropertyDirtyState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NamespacedPropertyDirtyState()
{
  return self;
}

uint64_t base witness table accessor for Equatable in PropertyDirtyState(uint64_t a1, uint64_t a2)
{
  return _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, a2, (void (*)(uint64_t))type metadata accessor for PropertyDirtyState);
}

uint64_t _sSo16RIOPxrTfTokenRefaAB14CoreFoundation9_CFObjectSCWlTm_1(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PropertyDirtyState()
{
  return self;
}

uint64_t method lookup function for PropertyDirtyState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PropertyDirtyState);
}

uint64_t dispatch thunk of PropertyDirtyState.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PropertyDirtyState.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PropertyDirtyState.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t method lookup function for NamedPropertyDirtyState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NamedPropertyDirtyState);
}

uint64_t method lookup function for NamespacedPropertyDirtyState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NamespacedPropertyDirtyState);
}

void *specialized NamedPropertyDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v2 = RIOBuilderAnyValueDirtyPropertyDescriptorCopyName();
  BOOL v3 = (void *)MEMORY[0x23ECBB3B0](a1);
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v6 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_17:
    uint64_t v17 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for NamedPropertyDirtyState();
    uint64_t result = (void *)swift_allocObject();
    result[3] = a1;
    result[4] = v2;
    result[2] = v17;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = v4;
    if ((v5 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        MEMORY[0x23ECBA630](i, v5);
        uint64_t v10 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        unint64_t v12 = *(void *)(v8 + 16);
        unint64_t v11 = *(void *)(v8 + 24);
        if (v12 >= v11 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        }
        *(void *)(v8 + 16) = v12 + 1;
        *(void *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v6; ++j)
      {
        uint64_t v14 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        unint64_t v16 = *(void *)(v8 + 16);
        unint64_t v15 = *(void *)(v8 + 24);
        if (v16 >= v15 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        }
        *(void *)(v8 + 16) = v16 + 1;
        *(void *)(v8 + 8 * v16 + 32) = v14;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

Swift::String *specialized NamespacedPropertyDirtyState.__allocating_init(core:)(void *a1)
{
  uint64_t v2 = (void *)RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyNamespacePrefix();
  Swift::String v3 = String.init(_:)(v2);
  uint64_t v4 = (void *)MEMORY[0x23ECBB3E0](a1);
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
LABEL_17:
    uint64_t v18 = specialized Set.init<A>(_:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for NamespacedPropertyDirtyState();
    uint64_t result = (Swift::String *)swift_allocObject();
    result[2] = v3;
    result[1]._uint64_t countAndFlagsBits = v18;
    result[1]._object = a1;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = (Swift::String *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        MEMORY[0x23ECBA630](i, v6);
        uint64_t v11 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        unint64_t v13 = *(void *)(v9 + 16);
        unint64_t v12 = *(void *)(v9 + 24);
        if (v13 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        }
        *(void *)(v9 + 16) = v13 + 1;
        *(void *)(v9 + 8 * v13 + 32) = v11;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v7; ++j)
      {
        uint64_t v15 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        unint64_t v17 = *(void *)(v9 + 16);
        unint64_t v16 = *(void *)(v9 + 24);
        if (v17 >= v16 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        }
        *(void *)(v9 + 16) = v17 + 1;
        *(void *)(v9 + 8 * v17 + 32) = v15;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized Prim.attributeValue<A>(of:type:)()
{
  if (RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
    uint64_t v1 = RIOPxrUsdAttributeCopyValue();
    if (v1)
    {
      uint64_t v2 = (void *)v1;
      RIOPxrVtValueGetFloat3();

      return 0;
    }
  }
  return 0;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Bool;

  if (!RIOPxrUsdPrimHasAttribute()) {
    return 2;
  }
  uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 2;
  }
  uint64_t v2 = (void *)v1;
  char Bool = RIOPxrVtValueGetBool();

  if (Bool) {
    return 0;
  }
  else {
    return 2;
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Float2;

  if (!RIOPxrUsdPrimHasAttribute()) {
    return 0;
  }
  uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  uint64_t v2 = (void *)v1;
  Float2 = RIOPxrVtValueGetFloat2();

  if (Float2) {
    return 0;
  }
  else {
    return 0;
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (!RIOPxrUsdPrimHasAttribute()) {
    return 0;
  }
  uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  uint64_t v2 = (void *)v1;
  Swift::String v3 = RIOPxrVtValueCopyString();
  if (!v3)
  {

    return 0;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Double;

  if (!RIOPxrUsdPrimHasAttribute()) {
    return 0;
  }
  uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  uint64_t v2 = (void *)v1;
  Double = RIOPxrVtValueGetDouble();

  if (Double) {
    return 0;
  }
  else {
    return 0;
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Int32;

  if (!RIOPxrUsdPrimHasAttribute()) {
    return 0;
  }
  uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  uint64_t v2 = (void *)v1;
  Int32 = RIOPxrVtValueGetInt32();

  if (Int32) {
    return 0;
  }
  else {
    return 0;
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;

  if (RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
    uint64_t v1 = RIOPxrUsdAttributeCopyValue();
    if (v1)
    {
      uint64_t v2 = (void *)v1;
      RIOPxrVtValueGetQuatf();

      return 0;
    }
  }
  return 0;
}

unint64_t specialized Prim.attributeValue<A>(of:type:)()
{
  if (!RIOPxrUsdPrimHasAttribute()) {
    goto LABEL_5;
  }
  uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

LABEL_5:
    unsigned __int8 v4 = 1;
    return (unint64_t)v4 << 32;
  }
  uint64_t v2 = (void *)v1;
  char Float = RIOPxrVtValueGetFloat();

  unsigned __int8 v4 = Float ^ 1;
  return (unint64_t)v4 << 32;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char Int32;
  unsigned __int8 v4;

  if (!RIOPxrUsdPrimHasAttribute()) {
    goto LABEL_5;
  }
  uint64_t v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

LABEL_5:
    unsigned __int8 v4 = 1;
    return (unint64_t)v4 << 32;
  }
  uint64_t v2 = (void *)v1;
  Int32 = RIOPxrVtValueGetInt32();

  unsigned __int8 v4 = Int32 ^ 1;
  return (unint64_t)v4 << 32;
}

void specialized Prim.attributeValue<A>(of:type:)(uint64_t a1@<X8>)
{
  if (!RIOPxrUsdPrimHasAttribute()) {
    goto LABEL_5;
  }
  uint64_t v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3)
  {

LABEL_5:
    char v6 = 1;
    goto LABEL_6;
  }
  unsigned __int8 v4 = (void *)v3;
  char Double3 = RIOPxrVtValueGetDouble3();

  char v6 = Double3 ^ 1;
LABEL_6:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = v6;
}

void specialized Builder.addComponent<A>(component:)(uint64_t a1)
{
}

{
  specialized Builder.addComponent<A>(component:)(a1, MEMORY[0x263F162D8]);
}

{
  specialized Builder.addComponent<A>(component:)(a1, MEMORY[0x263F16870]);
}

{
  specialized Builder.addComponent<A>(component:)(a1, MEMORY[0x263F16240]);
}

{
  specialized Builder.addComponent<A>(component:)(a1, MEMORY[0x263F16230]);
}

void specialized Builder.addComponent<A>(component:)(uint64_t a1, void (*a2)(void, double))
{
  uint64_t v4 = type metadata accessor for __ComponentTypeRef();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(0, v6);
  dispatch thunk of static Component.__coreComponentType.getter();
  type metadata accessor for REComponentType(0);
  __ComponentTypeRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (REComponentClassFromType())
  {
    swift_beginAccess();
    id v9 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.CoreReference);
    swift_endAccess();
    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(&v12, &v13);
      type metadata accessor for RIOBuilderRef(0);
      swift_dynamicCast();
      uint64_t v10 = (void *)v11[1];
      RIOBuilderAddComponentByClass();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t one-time initialization function for modelSortComponent()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.modelSortComponent = result;
  return result;
}

id one-time initialization function for priorityAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ModelSortGroupComponentBuilder.priorityAttributeName = (uint64_t)result;
  return result;
}

uint64_t ModelSortGroupComponentBuilder.inputDescriptors()()
{
  uint64_t v1 = *v0;
  uint64_t v9 = MEMORY[0x263F8EE88];
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = specialized closure #2 in ModelSortGroupComponentBuilder.inputDescriptors();
  v2[3] = 0;
  v2[4] = closure #1 in ImageBasedLightReceiverBuilder.inputDescriptors();
  v2[5] = 0;
  v2[6] = v1;
  v17[0] = 0xD000000000000018;
  v17[1] = 0x800000023AAB09A0;
  v17[2] = 0xD000000000000014;
  v17[3] = 0x800000023AAACC80;
  v17[4] = partial apply for closure #3 in ModelSortGroupComponentBuilder.inputDescriptors();
  v17[5] = v2;
  char v18 = -127;
  swift_retain();
  specialized Set._Variant.insert(_:)((uint64_t)&v10, (uint64_t)v17);
  outlined consume of InputDescriptor(v10, v11, v12, v13, v14, v15, v16);
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v4 = static EntityBuilder.OutputName;
  uint64_t v3 = *(void *)algn_268A4BAA8;
  uint64_t v5 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v10 = v4;
  uint64_t v11 = v3;
  uint64_t v12 = static EntityBuilder.OutputIdentifier;
  uint64_t v13 = qword_268A584E0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned __int8 v16 = 112;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v7, (uint64_t)&v10);
  swift_release();
  outlined consume of InputDescriptor(v7[0], v7[1], v7[2], v7[3], (void *)v7[4], v7[5], v8);
  return v9;
}

uint64_t closure #3 in ModelSortGroupComponentBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t))
{
  uint64_t v11 = *a2;
  uint64_t v6 = a3(a1, &v11);
  if (!v6) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (one-time initialization token for entityRelationshipName != -1) {
    swift_once();
  }
  uint64_t v11 = static ModelSortGroupComponentBuilder.entityRelationshipName;
  id v8 = (id)static ModelSortGroupComponentBuilder.entityRelationshipName;
  uint64_t v9 = a5(&v11, v7);

  swift_release();
  return v9;
}

uint64_t ModelSortGroupComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  void v7[2] = a1;
  id v8 = v1;
  uint64_t v9 = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in ModelSortGroupComponentBuilder.run(inputs:);
  *(void *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_20;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ModelSortGroupComponentBuilder.run(inputs:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v73 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroupComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ModelSortGroupComponent();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  uint64_t v69 = v6;
  MEMORY[0x270FA5388](v5);
  char v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ModelSortGroup();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v72 = (char *)&v65 - v16;
  Inputs.prim.getter();
  unint64_t v17 = (void *)RIOPxrUsdObjectCopyName();
  char v18 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v21 = (id)static ModelSortGroupComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_31:
    ModelSortGroupComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  uint64_t v67 = v11;
  uint64_t v22 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v23 = RIOPxrUsdAttributeCopyValue();
  if (!v23)
  {
    swift_bridgeObjectRelease();

    goto LABEL_31;
  }
  unint64_t v24 = (void *)v23;
  uint64_t v66 = v12;
  uint64_t v25 = RIOPxrVtValueCopyToken();
  if (!v25)
  {
    swift_bridgeObjectRelease();

    goto LABEL_31;
  }
  unint64_t v26 = (void *)v25;

  uint64_t v27 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  if (v28 == 0xD000000000000016 && v30 == 0x800000023AAB0980)
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = v67;
    goto LABEL_13;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = v67;
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_13:
  Inputs.subscript.getter(0xD000000000000018, 0x800000023AAB09A0, &v75);
  if (!v76)
  {
    outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v10, 1, 1, v31);
    goto LABEL_29;
  }
  int v33 = swift_dynamicCast();
  uint64_t v34 = v66;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v10, v33 ^ 1u, 1, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v10, 1, v31) == 1)
  {
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for ModelSortGroup?);
  }
  unint64_t v35 = v72;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v72, v10, v31);
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for modelSortComponent != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_23AAB24E0;
      uint64_t v55 = (void *)RIOPxrUsdObjectCopyPath();
      unint64_t v56 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v58;

      uint64_t v60 = MEMORY[0x263F8D310];
      *(void *)(v54 + 56) = MEMORY[0x263F8D310];
      unint64_t v61 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 32) = v57;
      *(void *)(v54 + 40) = v59;
      *(void *)(v54 + 96) = v60;
      *(void *)(v54 + 104) = v61;
      uint64_t v62 = v71;
      *(void *)(v54 + 64) = v61;
      *(void *)(v54 + 72) = v62;
      *(void *)(v54 + 80) = v20;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v72, v67);
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v37 = static EntityBuilder.OutputName;
  uint64_t v36 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v37, v36, &v75);
  if (v76)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast())
    {
      uint64_t v38 = v74;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (RIOPxrUsdPrimIsActive())
      {
        uint64_t v71 = v38;
        v73[17] = 1;
        Inputs.prim.getter();
        if (one-time initialization token for priorityAttributeName != -1) {
          swift_once();
        }
        id v39 = (id)static ModelSortGroupComponentBuilder.priorityAttributeName;
        specialized Prim.attributeValue<A>(of:type:)();

        swift_release();
        uint64_t v40 = specialized ModelSortGroupComponentBuilder.targetEntity(for:prim:)();
        uint64_t v41 = v69;
        uint64_t v42 = v70;
        if (v40)
        {
          (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v14, v72, v31);
          ModelSortGroupComponent.init(group:order:)();
          unint64_t v43 = v42;
          uint64_t v44 = v41;
          uint64_t v45 = v68;
          char v46 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
          v46(v4, v43, v68);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v4, 0, 1, v45);
          uint64_t v47 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
          uint64_t v48 = v45;
          uint64_t v49 = (uint64_t)v70;
          Entity.ComponentSet.subscript.setter();
          v47(&v75, 0);
          uint64_t v50 = v73;
          specialized Builder.addComponent<A>(component:)(v49, MEMORY[0x263F16848]);
          swift_beginAccess();
          id v51 = objc_getAssociatedObject(v50, &static BuilderAssociatedKeys.OutputsReference);
          uint64_t result = swift_endAccess();
          if (v51)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            outlined init with take of Any(&v74, &v75);
            type metadata accessor for Outputs();
            swift_dynamicCast();
            uint64_t v76 = v48;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v75);
            v46((char *)boxed_opaque_existential_1, (char *)v49, v48);
            Outputs.subscript.setter((uint64_t)&v75, 0xD000000000000024, 0x800000023AAACD10);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v49, v48);
            return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v72, v67);
          }
          else
          {
            __break(1u);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v66 + 8))(v72, v31);
          swift_release();
          return swift_release();
        }
      }
      else
      {
        ModelSortGroupComponentBuilder.clear(inputs:)();
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v35, v31);
      }
      return result;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRelease();
  uint64_t v63 = v66;
  if (one-time initialization token for modelSortComponent != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_23AAB22A0;
  *(void *)(v64 + 56) = MEMORY[0x263F8D310];
  *(void *)(v64 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v64 + 32) = v71;
  *(void *)(v64 + 40) = v20;
  os_log(_:dso:log:type:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v72, v31);
}

uint64_t ModelSortGroupComponentBuilder.clear(inputs:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroupComponent?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v4 = static EntityBuilder.OutputName;
  uint64_t v5 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v4, v5, &v11);
  if (!v12)
  {
    outlined destroy of Any?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 17) & 1) == 0) {
    return swift_release();
  }
  Inputs.prim.getter();
  uint64_t v6 = specialized ModelSortGroupComponentBuilder.targetEntity(for:prim:)();
  swift_release();
  if (!v6) {
    return swift_release();
  }
  uint64_t v7 = type metadata accessor for ModelSortGroupComponent();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  uint64_t v8 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v8(&v11, 0);
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)(v0 + 17) = 0;
  return result;
}

uint64_t type metadata accessor for ModelSortGroupComponentBuilder()
{
  return self;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance ModelSortGroupComponentBuilder()
{
  uint64_t v0 = specialized closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v5 = inited;
  specialized Array._endMutation()();
  uint64_t v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupComponentBuilder()
{
  uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupComponentBuilder);
  swift_arrayDestroy();
  return v0;
}

uint64_t specialized closure #2 in ModelSortGroupComponentBuilder.inputDescriptors()()
{
  if (!RIOPxrUsdStageHasPrimAtPrimPath()) {
    return 0;
  }
  id v0 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = PrimIfNeeded;
  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v3 = (id)static ModelSortGroupComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  uint64_t v4 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v5 = RIOPxrUsdAttributeCopyValue();
  if (!v5)
  {
    swift_release();

    return 0;
  }
  uint64_t v6 = (void *)v5;
  uint64_t v7 = RIOPxrVtValueCopyToken();
  if (!v7)
  {
    swift_release();

    return 0;
  }
  uint64_t v8 = (void *)v7;

  id v9 = v8;
  uint64_t v10 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized closure #1 in closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for entityRelationshipName != -1) {
    swift_once();
  }
  id v0 = (void *)static ModelSortGroupComponentBuilder.entityRelationshipName;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = v0;
  uint64_t v3 = MEMORY[0x263F8EE88];
  id v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x263F8EE88]);

  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = one-time initialization token for priorityAttributeName;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static ModelSortGroupComponentBuilder.priorityAttributeName;
  uint64_t v7 = (void *)swift_allocObject();
  v7[4] = v6;
  id v8 = v6;
  id v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  void v7[2] = v3;
  void v7[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2570;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v7;
  unint64_t v13 = inited;
  specialized Array._endMutation()();
  uint64_t v11 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t specialized closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for realityKitComponentTypeName != -1) {
    swift_once();
  }
  id v0 = (void *)static ModelSortGroupComponentBuilder.realityKitComponentTypeName;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v0;
  id v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = specialized closure #1 in closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v6 = (void *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8EE88];
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x263F8EE88]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AAB22C0;
  *(void *)(v9 + 32) = v6;
  unint64_t v12 = v9;
  specialized Array._endMutation()();
  uint64_t v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v12);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized ModelSortGroupComponentBuilder.targetEntity(for:prim:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
  uint64_t v44 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v2 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Entity.ChildCollection();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v41 - v7;
  uint64_t v8 = type metadata accessor for __EntityRef();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Entity();
  uint64_t v13 = MEMORY[0x263F8DD08];
  __AssetRef.__as<A>(_:)();
  v48[3] = v13;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
  uint64_t v14 = static Entity.__fromCore(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2680;
  if (String.count.getter() < 1) {
    id v16 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v16 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(inited + 32) = v16;
  if (String.count.getter() < 1) {
    id v17 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v17 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(inited + 40) = v17;
  if (String.count.getter() < 1) {
    id v18 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v18 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(inited + 48) = v18;
  if (Prim.parent.getter())
  {
    uint64_t v19 = (void *)RIOPxrUsdPrimCopyTypeName();
    swift_release();
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void **)(inited + 32);
  swift_bridgeObjectRetain();
  uint64_t v43 = inited + 32;
  if (v20)
  {
    if (v19)
    {
      uint64_t v42 = v12;
      uint64_t v21 = v14;
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
      id v22 = v20;
      id v23 = v19;
      char v24 = static _CFObject.== infix(_:_:)();

      if (v24) {
        goto LABEL_34;
      }
      uint64_t v25 = *(void **)(inited + 40);
      if (!v25)
      {
        id v26 = 0;
        uint64_t v14 = v21;
        uint64_t v12 = v42;
        goto LABEL_30;
      }
LABEL_24:
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
      id v28 = v25;
      id v29 = v19;
      char v30 = static _CFObject.== infix(_:_:)();

      if ((v30 & 1) == 0)
      {
        uint64_t v31 = *(void **)(inited + 48);
        if (v31) {
          goto LABEL_33;
        }
        goto LABEL_45;
      }
LABEL_34:

      uint64_t v14 = v21;
      goto LABEL_35;
    }
    id v27 = v20;
  }
  else
  {
    if (!v19) {
      goto LABEL_35;
    }
    id v27 = 0;
  }

  uint64_t v25 = *(void **)(inited + 40);
  if (v25)
  {
    if (v19)
    {
      uint64_t v42 = v12;
      uint64_t v21 = v14;
      goto LABEL_24;
    }
    id v26 = v25;
  }
  else
  {
    if (!v19) {
      goto LABEL_35;
    }
    id v26 = 0;
  }
LABEL_30:

  uint64_t v31 = *(void **)(inited + 48);
  if (v31)
  {
    if (v19)
    {
      uint64_t v42 = v12;
      uint64_t v21 = v14;
LABEL_33:
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
      id v32 = v31;
      id v33 = v19;
      char v34 = static _CFObject.== infix(_:_:)();

      if (v34) {
        goto LABEL_34;
      }
LABEL_48:

      swift_bridgeObjectRelease();
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolsFoundations.Token?);
      swift_arrayDestroy();
      return v21;
    }
    uint64_t v21 = v14;
    id v40 = v31;
LABEL_47:

    goto LABEL_48;
  }
  if (v19)
  {
    uint64_t v21 = v14;
LABEL_45:
    id v40 = 0;
    goto LABEL_47;
  }
LABEL_35:
  swift_bridgeObjectRelease_n();
  unint64_t v35 = v45;
  uint64_t v21 = v14;
  HasHierarchy.children.getter();
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v5, v35, v47);
  lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, MEMORY[0x263F16548]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v36 = v48[0];
  if (!v48[0])
  {
LABEL_40:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v2, v0);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
    return v21;
  }
  while (dispatch thunk of Entity.name.getter() != 0xD000000000000010 || v37 != 0x800000023AAB0960)
  {
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_42;
    }
    swift_release();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v36 = v48[0];
    if (!v48[0]) {
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRelease();
LABEL_42:
  (*(void (**)(char *, uint64_t))(v44 + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  swift_release();
  return v36;
}

unint64_t lazy protocol witness table accessor for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in ModelSortGroupComponentBuilder.run(inputs:)()
{
  return closure #1 in ModelSortGroupComponentBuilder.run(inputs:)(*(void *)(v0 + 16), *(unsigned char **)(v0 + 24));
}

uint64_t sub_23AA824D0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t sub_23AA824F8()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #3 in ModelSortGroupComponentBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2)
{
  return closure #3 in ModelSortGroupComponentBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 32));
}

uint64_t EditTarget.init(on:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    id v3 = *(id *)(a1 + 16);
    uint64_t v4 = RIOPxrUsdEditTargetCreateWithLayer();

    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = RIOPxrUsdEditTargetCreateEmpty();
    uint64_t v4 = result;
  }
  *a2 = v4;
  return result;
}

uint64_t EditTarget.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdEditTargetCreateEmpty();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall EditTarget.isNull()()
{
  return RIOPxrUsdEditTargetIsNull();
}

Swift::Bool __swiftcall EditTarget.isValid()()
{
  return RIOPxrUsdEditTargetIsValid();
}

uint64_t EditTarget.layer()()
{
  uint64_t v0 = RIOPxrUsdEditTargetCopyLayer();
  type metadata accessor for SceneDescriptionFoundations.Layer();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t EditTarget.primSpec(for:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdEditTargetCopyPrimSpec();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for EditTarget()
{
  return &type metadata for EditTarget;
}

uint64_t specialized SIMD.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    long long v5 = 0uLL;
    long long v6 = 0uLL;
    if ((unint64_t)(v3 - 1) >= 0x10) {
      unint64_t v7 = 16;
    }
    else {
      unint64_t v7 = v3 - 1;
    }
    long long v8 = 0uLL;
    long long v9 = 0uLL;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
    long long v13 = 0uLL;
    do
    {
      if ((unint64_t)(v3 - 1) > 0xF)
      {
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v14 = *(void *)(a1 + 8 * v4 + 32);
      long long v24 = v5;
      long long v25 = v6;
      long long v26 = v8;
      long long v27 = v9;
      long long v28 = v10;
      long long v29 = v11;
      long long v30 = v12;
      long long v31 = v13;
      *((void *)&v24 + (v4 & 0xF)) = v14;
      long long v12 = v30;
      long long v13 = v31;
      long long v10 = v28;
      long long v11 = v29;
      long long v8 = v26;
      long long v9 = v27;
      ++v4;
      long long v5 = v24;
      long long v6 = v25;
    }
    while (v3 != v4);
    long long v16 = v25;
    long long v17 = v26;
    long long v18 = v27;
    long long v19 = v28;
    long long v20 = v24;
    long long v21 = v29;
    long long v22 = v30;
    long long v23 = v31;
    uint64_t result = swift_bridgeObjectRelease();
    if (v7 < 0xF) {
      goto LABEL_12;
    }
    *a2 = v20;
    a2[1] = v16;
    a2[2] = v17;
    a2[3] = v18;
    a2[4] = v19;
    a2[5] = v21;
    a2[6] = v22;
    a2[7] = v23;
  }
  else
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
    __break(1u);
  }
  return result;
}

RealityIO::Half __swiftcall Half.init()()
{
  *uint64_t v0 = 0;
  return result;
}

void __swiftcall Frame4D.asDouble4x4()(simd_double4x4 *__return_ptr retstr)
{
  long long v2 = v1[6];
  long long v3 = v1[7];
  long long v4 = v1[4];
  long long v5 = v1[5];
  long long v6 = v1[2];
  long long v7 = v1[3];
  long long v8 = v1[1];
  *(_OWORD *)retstr->columns[0].f64 = *v1;
  *(_OWORD *)&retstr->columns[0].f64[2] = v8;
  *(_OWORD *)retstr->columns[1].f64 = v6;
  *(_OWORD *)&retstr->columns[1].f64[2] = v7;
  *(_OWORD *)retstr->columns[2].f64 = v4;
  *(_OWORD *)&retstr->columns[2].f64[2] = v5;
  *(_OWORD *)retstr->columns[3].f64 = v2;
  *(_OWORD *)&retstr->columns[3].f64[2] = v3;
}

uint64_t Frame4D.init(_:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v2 = 0;
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  long long v5 = 0uLL;
  long long v6 = 0uLL;
  long long v7 = 0uLL;
  long long v8 = 0uLL;
  long long v9 = 0uLL;
  long long v10 = 0uLL;
  while (1)
  {
    unint64_t v12 = v2 >> 2;
    uint64_t v13 = result;
    if (v2 >> 2)
    {
      uint64_t v13 = result + 32;
      if (v12 != 1)
      {
        uint64_t v13 = result + 64;
        if (v12 != 2)
        {
          uint64_t v13 = result + 96;
          if ((v2 & 0x7FFFFFFFFFFFFFFCLL) != 0xC) {
            break;
          }
        }
      }
    }
    uint64_t v11 = *(void *)(v13 + 8 * (v2 & 3));
    long long v14 = v3;
    long long v15 = v4;
    long long v16 = v5;
    long long v17 = v6;
    long long v18 = v7;
    long long v19 = v8;
    long long v20 = v9;
    long long v21 = v10;
    *((void *)&v14 + (v2 & 0xF)) = v11;
    long long v9 = v20;
    long long v10 = v21;
    long long v7 = v18;
    long long v8 = v19;
    long long v5 = v16;
    long long v6 = v17;
    ++v2;
    long long v3 = v14;
    long long v4 = v15;
    if (v2 == 16) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_8:
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v10;
  return result;
}

double Frame4D.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t TexCoord2.init(_:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  Point3.init()(v2, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  uint64_t v4 = type metadata accessor for SIMD2();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
}

uint64_t SIMD2.init(_:)(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(*(void *)(a2 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  long long v7 = (char *)&v10 - v6;
  uint64_t v8 = type metadata accessor for TexCoord2();
  uint64_t v11 = a1;
  Point3.subscript.getter(0, v8);
  Point3.subscript.getter(1, v8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v7, v3);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v11, v8);
}

uint64_t TexCoord3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, double);
  uint64_t v6;

  uint64_t v2 = MEMORY[0x270FA5388](a1);
  v5(v3, v4, v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  uint64_t v6 = type metadata accessor for SIMD3();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
}

uint64_t SIMD3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))TexCoord3.subscript.getter, a3);
}

{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))Point3.subscript.getter, a3);
}

{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))Vector3.subscript.getter, a3);
}

{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))Normal3.subscript.getter, a3);
}

uint64_t Color3.init(_:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  Color3.init()(v2, v2, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  uint64_t v4 = type metadata accessor for SIMD3();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
}

uint64_t SIMD3<>.init(_:)(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(*(void *)(a2 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  long long v15 = (char *)&v15 - v6;
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)&v15 - v8;
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v15 - v11;
  uint64_t v13 = type metadata accessor for Color3();
  uint64_t v16 = a1;
  Color3.red.getter();
  Color3.green.getter();
  Color3.blue.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v4, v12, v3);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v4, v9, v3);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v16, v13);
}

uint64_t Point3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

uint64_t SIMD3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  size_t v6 = *(void *)(*(void *)(a2 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  v20[1] = (char *)v20 - v9;
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)v20 - v11;
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v20 - v15;
  uint64_t v18 = v17(0, v14);
  uint64_t v21 = a1;
  a3(0, v18);
  a3(1, v18);
  a3(2, v18);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v7, v16, v6);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v7, v12, v6);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v21, v18);
}

uint64_t Vector3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

uint64_t Normal3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

uint64_t Color4.init(_:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  Color3.init()(v2, v2, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  uint64_t v4 = type metadata accessor for SIMD4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
}

uint64_t SIMD4<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a3;
  size_t v4 = *(void *)(*(void *)(a2 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v18[1] = (char *)v18 - v7;
  MEMORY[0x270FA5388](v8);
  v18[0] = (char *)v18 - v9;
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)v18 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v18 - v14;
  uint64_t v16 = type metadata accessor for Color4();
  uint64_t v19 = a1;
  Color3.red.getter();
  Color3.green.getter();
  Color3.blue.getter();
  Color4.alpha.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v5, v15, v4);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v5, v12, v4);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v5, v18[0], v4);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v19, v16);
}

uint64_t ManagedColor.init(color:space:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *(int *)(type metadata accessor for ManagedColor() + 44);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1, a3);
  *(void *)(a4 + v8) = v7;
  return result;
}

uint64_t Normal3.x.getter()
{
  return Normal3.x.getter();
}

{
  uint64_t vars8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t Normal3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t Normal3.z.getter()
{
  return Normal3.x.getter();
}

float specialized BinaryFloatingPoint.init<A>(_:)@<S0>(_DWORD *a1@<X8>)
{
  specialized BinaryFloatingPoint.init<A>(_:)(&v3);
  float result = *(float *)&v3;
  *a1 = v3;
  return result;
}

float specialized BinaryFloatingPoint.init<A>(_:)@<S0>(float *a1@<X8>)
{
  specialized BinaryFloatingPoint.init<A>(_:)(&v3);
  float result = v3;
  *a1 = v3;
  return result;
}

double specialized BinaryFloatingPoint.init<A>(_:)(float a1)
{
  return a1;
}

uint64_t Color3.red.getter()
{
  return Color3.red.getter();
}

{
  uint64_t vars8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t Color3.green.getter()
{
  return Color3.red.getter();
}

uint64_t Color3.blue.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.red.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.green.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.blue.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.alpha.getter()
{
  return Color3.red.getter();
}

uint64_t Vector3.x.getter()
{
  return Normal3.x.getter();
}

uint64_t Vector3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t Vector3.z.getter()
{
  return Normal3.x.getter();
}

uint64_t Point3.x.getter()
{
  return Normal3.x.getter();
}

uint64_t Point3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t Point3.z.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord2.x.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord2.y.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord3.x.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord3.z.getter()
{
  return Normal3.x.getter();
}

uint64_t ManagedColor.init(_:)@<X0>(CGColor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!CGColorRef.components.getter())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_23AAB2690;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 40) = 0;
    *(void *)(v11 + 48) = 0;
    *(void *)(v11 + 56) = 0x3FF0000000000000;
  }
  (*(void (**)(void))(a3 + 8))();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v10, a2);
  specialized static ColorSpaces.ocioName(fromCGColor:)(a1);
  if (v12)
  {
    if (String.count.getter() < 1)
    {
      id v13 = (id)RIOPxrTfTokenEmpty();
      swift_bridgeObjectRelease();
    }
    else
    {
      String.utf8CString.getter();
      id v13 = (id)RIOPxrTfTokenCreateWithCString();
      swift_bridgeObjectRelease();

      swift_release();
    }
  }
  else
  {

    id v13 = 0;
  }
  uint64_t result = type metadata accessor for ManagedColor();
  *(void *)(a4 + *(int *)(result + 44)) = v13;
  return result;
}

float static Float.from(cgFloat:)(double a1)
{
  return a1;
}

double Float.toCGFloat.getter(float a1)
{
  return a1;
}

float protocol witness for static CGFloatConvertable.from(cgFloat:) in conformance Float@<S0>(float *a1@<X8>, double a2@<D0>)
{
  float result = a2;
  *a1 = result;
  return result;
}

double protocol witness for CGFloatConvertable.toCGFloat.getter in conformance Float()
{
  return *(float *)v0;
}

void protocol witness for static CGFloatConvertable.from(cgFloat:) in conformance Double(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double protocol witness for CGFloatConvertable.toCGFloat.getter in conformance Double()
{
  return *(double *)v0;
}

float static Half.from(cgFloat:)@<S0>(float *a1@<X8>)
{
  specialized BinaryFloatingPoint.init<A>(_:)(&v3);
  float result = v3;
  *a1 = v3;
  return result;
}

double Half.toCGFloat.getter()
{
  return *(float *)v0;
}

double protocol witness for CGFloatConvertable.toCGFloat.getter in conformance Half()
{
  return specialized BinaryFloatingPoint.init<A>(_:)(*v0);
}

uint64_t Color3.red.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color3.red.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Color3.red.getter();
  return Color3.red.modify;
}

void Color3.red.modify(uint64_t **a1, char a2)
{
}

uint64_t Color3.green.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color3.green.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Color3.green.getter();
  return Color3.green.modify;
}

void Color3.green.modify(uint64_t **a1, char a2)
{
}

void Color3.red.modify(uint64_t **a1, char a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  size_t v6 = *a1;
  uint64_t v7 = (void *)(*a1)[3];
  uint64_t v8 = (void *)(*a1)[4];
  if (a2)
  {
    uint64_t v9 = *v6;
    memcpy((void *)(*a1)[3], v8, v6[2]);
    uint64_t v10 = v7;
    uint64_t v11 = v9;
  }
  else
  {
    uint64_t v11 = *v6;
    uint64_t v10 = (void *)(*a1)[4];
  }
  a4(v10, v11, a3);
  free(v8);
  free(v7);
  free(v6);
}

uint64_t Color3.blue.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color3.blue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Color3.blue.getter();
  return Color3.blue.modify;
}

void Color3.blue.modify(uint64_t **a1, char a2)
{
}

uint64_t Color3.scalarCount.getter()
{
  return 3;
}

uint64_t Color3.subscript.setter(uint64_t a1)
{
  return specialized Color4.subscript.setter(a1);
}

void (*Color3.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  void v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Color3.subscript.getter(a2, a3);
  return Color3.subscript.modify;
}

void Color3.subscript.modify(uint64_t **a1, char a2)
{
}

Swift::Int Color3.hashValue.getter()
{
  return Color3.hashValue.getter();
}

{
  Hasher.init(_seed:)();
  swift_getWitnessTable();
  SIMD.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance Color3<A>()
{
  return 3;
}

uint64_t protocol witness for SIMDStorage.init() in conformance Color3<A>(uint64_t a1, uint64_t a2)
{
  return Color3.init()(*(void *)(a1 + 16), a2, *(void *)(a1 + 32));
}

uint64_t protocol witness for SIMDStorage.subscript.setter in conformance Color3<A>(uint64_t a1)
{
  return specialized Color4.subscript.setter(a1);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Color3<A>(void *a1, uint64_t a2, uint64_t a3))()
{
  size_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Color3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Color3<A>()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Color3<A>()
{
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color3<A>()
{
  swift_getWitnessTable();
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>();
}

{
  Hasher.init(_seed:)();
  swift_getWitnessTable();
  SIMD.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color3<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD0](a1, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Color3<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD8](a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v35 = *(void *)(a3 + 16);
  MEMORY[0x270FA5388](a1);
  id v33 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v36 = (char *)&v29 - v8;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15.n128_f64[0] = MEMORY[0x270FA5388](v14);
  long long v17 = (char *)&v29 - v16;
  uint64_t v18 = 0;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v10 += 16;
  uint64_t v19 = v20;
  uint64_t v21 = (void (**)(char *, uint64_t))(v10 - 8);
  char v22 = 1;
  uint64_t v34 = v23;
  uint64_t v31 = v10;
  uint64_t v32 = v24;
  long long v30 = v20;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v20)((char *)&v29 - v16, v5, a3, v15);
  while (1)
  {
    v19(v13, a2, a3);
    if (v22)
    {
      Color3.subscript.getter(v18, a3);
      long long v27 = *v21;
      (*v21)(v17, a3);
      Color3.subscript.getter(v18, a3);
      v27(v13, a3);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      a2 = v32;
      uint64_t v5 = v34;
      swift_getAssociatedConformanceWitness();
      uint64_t v19 = v30;
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else
    {
      long long v25 = *v21;
      (*v21)(v13, a3);
      v25(v17, a3);
      char v22 = 0;
    }
    if (++v18 == 3) {
      break;
    }
    ((void (*)(char *, uint64_t, uint64_t, __n128))v19)(v17, v5, a3, v26);
  }
  return v22 & 1;
}

uint64_t Color3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  size_t v7 = *(void *)(*(void *)(a4 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  Color3.init()(v9, v8, v10);
  memcpy((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v7);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t Color4.red.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.red.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Color3.red.getter();
  return Color3.red.modify;
}

uint64_t Color4.green.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.green.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Color3.green.getter();
  return Color3.green.modify;
}

uint64_t Color4.blue.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.blue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Color3.blue.getter();
  return Color3.blue.modify;
}

uint64_t Color4.alpha.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.alpha.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Color4.alpha.getter();
  return Color4.alpha.modify;
}

void Color4.alpha.modify(uint64_t **a1, char a2)
{
}

uint64_t Color4.scalarCount.getter()
{
  return 4;
}

uint64_t Color3.init(val:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t Color3.init()()
{
  return dispatch thunk of SIMDStorage.init()();
}

uint64_t Color3.subscript.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t key path getter for Color3.subscript(_:) : <A>Color3<A>A(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void, void, void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a4(0, *(uint64_t *)((char *)a2 + a3 - 24), *(uint64_t *)((char *)a2 + a3 - 16), *(uint64_t *)((char *)a2 + a3 - 8));
  return a5(v6, v7);
}

uint64_t key path setter for Color3.subscript(_:) : <A>Color3<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void, void))
{
  return specialized Color4.subscript.setter(a1);
}

uint64_t Color4.subscript.setter(uint64_t a1)
{
  return specialized Color4.subscript.setter(a1);
}

void (*Color4.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  void v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Color3.subscript.getter(a2, a3);
  return Color3.subscript.modify;
}

void Color3.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t))
{
  size_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[4];
  uint64_t v6 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v8 = *v4;
    uint64_t v7 = v4[1];
    memcpy((void *)(*a1)[4], v6, v4[3]);
    uint64_t v9 = v5;
    uint64_t v10 = v8;
    uint64_t v11 = v7;
  }
  else
  {
    uint64_t v11 = v4[1];
    uint64_t v10 = *v4;
    uint64_t v9 = (void *)(*a1)[5];
  }
  a3(v9, v10, v11);
  free(v6);
  free(v5);
  free(v4);
}

Swift::Int Color4.hashValue.getter()
{
  return Color3.hashValue.getter();
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance Color4<A>()
{
  return 4;
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Color4<A>(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Color4.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Color4<A>()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Color4<A>()
{
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color4<A>()
{
  swift_getWitnessTable();
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color4<A>()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color4<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD0](a1, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Color4<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD8](a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v34 = *(void *)(v12 + 24);
  MEMORY[0x270FA5388](v13);
  uint64_t v32 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v15);
  uint64_t v17 = 0;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v6 += 16;
  uint64_t v18 = v19;
  uint64_t v20 = (void (**)(char *, uint64_t))(v6 - 8);
  char v21 = 1;
  uint64_t v35 = v6;
  uint64_t v36 = (char *)&v29 - v22;
  uint64_t v33 = v23;
  uint64_t v30 = v24;
  uint64_t v31 = v19;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v19)(v11, v5, a3, v16);
  while (1)
  {
    v18(v8, a2, a3);
    if (v21)
    {
      Color3.subscript.getter(v17, a3);
      long long v27 = *v20;
      (*v20)(v11, a3);
      Color3.subscript.getter(v17, a3);
      v27(v8, a3);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      a2 = v30;
      uint64_t v5 = v33;
      swift_getAssociatedConformanceWitness();
      uint64_t v18 = v31;
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else
    {
      long long v25 = *v20;
      (*v20)(v8, a3);
      v25(v11, a3);
      char v21 = 0;
    }
    if (++v17 == 4) {
      break;
    }
    ((void (*)(char *, uint64_t, uint64_t, __n128))v18)(v11, v5, a3, v26);
  }
  return v21 & 1;
}

uint64_t Color4.init(_:_:_:_:)(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5)
{
  size_t v9 = *(void *)(*(void *)(a5 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  Color3.init()(v11, v10, v12);
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v9);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v9);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t Color3.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = Color3.init()(v8, v8, v9);
  if (*(void *)(a1 + 16) < 3uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, double))(a3 + 8);
    v11(a2, a3, *(double *)(a1 + 32));
    type metadata accessor for Color3();
    specialized Color4.subscript.setter((uint64_t)v7);
    v11(a2, a3, *(double *)(a1 + 40));
    specialized Color4.subscript.setter((uint64_t)v7);
    v11(a2, a3, *(double *)(a1 + 48));
    specialized Color4.subscript.setter((uint64_t)v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Color3.components.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  MEMORY[0x270FA5388](a1);
  v10[1] = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB2690;
  Color3.subscript.getter(0, a1);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(double (**)(uint64_t, uint64_t))(v7 + 16);
  *(double *)(v6 + 32) = v8(v2, v7);
  Color3.subscript.getter(1, a1);
  *(double *)(v6 + 40) = v8(v2, v7);
  Color3.subscript.getter(2, a1);
  *(double *)(v6 + 48) = v8(v2, v7);
  *(void *)(v6 + 56) = 0x3FF0000000000000;
  return v6;
}

uint64_t protocol witness for ColorProtocol.init(_:) in conformance Color3<A>(uint64_t a1, uint64_t a2)
{
  return Color3.init(_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t Color4.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = Color3.init()(v8, v8, v9);
  if (*(void *)(a1 + 16) < 4uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, double))(a3 + 8);
    v11(a2, a3, *(double *)(a1 + 32));
    type metadata accessor for Color4();
    specialized Color4.subscript.setter((uint64_t)v7);
    v11(a2, a3, *(double *)(a1 + 40));
    specialized Color4.subscript.setter((uint64_t)v7);
    v11(a2, a3, *(double *)(a1 + 48));
    specialized Color4.subscript.setter((uint64_t)v7);
    v11(a2, a3, *(double *)(a1 + 56));
    specialized Color4.subscript.setter((uint64_t)v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Color4.components.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  MEMORY[0x270FA5388](a1);
  v12[1] = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v12[0] = (char *)v12 - v5;
  MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23AAB2690;
  Color3.subscript.getter(0, a1);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(double (**)(uint64_t, uint64_t))(v9 + 16);
  *(double *)(v8 + 32) = v10(v2, v9);
  Color3.subscript.getter(1, a1);
  *(double *)(v8 + 40) = v10(v2, v9);
  Color3.subscript.getter(2, a1);
  *(double *)(v8 + 48) = v10(v2, v9);
  Color3.subscript.getter(3, a1);
  *(double *)(v8 + 56) = v10(v2, v9);
  return v8;
}

uint64_t protocol witness for ColorProtocol.init(_:) in conformance Color4<A>(uint64_t a1, uint64_t a2)
{
  return Color4.init(_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void ManagedColor.cgColor.getter(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(v1 + *(int *)(a1 + 44));
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = (void *)RIOPxrTfTokenCopyString();
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v10;
  }
  uint64_t v11 = (void *)MEMORY[0x23ECB9F30](v7, v9);
  uint64_t v12 = (__CFString *)(id)MEMORY[0x23ECBB290]();

  if (v12)
  {
    uint64_t v13 = CGColorSpaceCreateWithName(v12);

    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_bridgeObjectRetain();
      CGColorRef v14 = CGColorCreate(v13, (const CGFloat *)(v3 + 32));
      swift_bridgeObjectRelease();

      if (v14)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  unint64_t v15 = *(void *)(v3 + 16);
  if (!v15)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v15 == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v15 < 3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v15 == 3)
  {
LABEL_19:
    __break(1u);
    return;
  }
  CGFloat v16 = *(double *)(v3 + 32);
  CGFloat v17 = *(double *)(v3 + 40);
  CGFloat v18 = *(double *)(v3 + 48);
  CGFloat v19 = *(double *)(v3 + 56);
  swift_bridgeObjectRelease();
  CGColorCreateGenericRGB(v16, v17, v18, v19);
}

uint64_t Frame4D.scalarCount.getter()
{
  return 16;
}

double Frame4D.subscript.getter(char a1)
{
  return *(double *)(v1 + 8 * (a1 & 0xF));
}

uint64_t Frame4D.subscript.setter(uint64_t result, double a2)
{
  *(double *)(v2 + 8 * result) = a2;
  return result;
}

uint64_t (*Frame4D.subscript.modify(void *a1, uint64_t a2))()
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = *(void *)(v2 + 8 * (a2 & 0xF));
  return Frame4D.subscript.modify;
}

__n128 Frame4D.init(val:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void Frame4D.init(columns:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>, __n128 a6@<Q4>, __n128 a7@<Q5>, __n128 a8@<Q6>, __n128 a9@<Q7>)
{
  a1[6] = a8;
  a1[7] = a9;
  a1[4] = a6;
  a1[5] = a7;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = a2;
  a1[1] = a3;
}

Swift::Int Frame4D.hashValue.getter()
{
  long long v11 = v0[6];
  long long v12 = v0[7];
  long long v9 = v0[4];
  long long v10 = v0[5];
  long long v7 = v0[2];
  long long v8 = v0[3];
  long long v5 = *v0;
  long long v6 = v0[1];
  Hasher.init(_seed:)();
  for (uint64_t i = 0; i != 16; ++i)
  {
    v13[0] = v5;
    v13[1] = v6;
    _OWORD v13[2] = v7;
    v13[3] = v8;
    v13[4] = v9;
    v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    Swift::UInt64 v2 = *((void *)v13 + (i & 0xF));
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v2;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance Frame4D()
{
  return 16;
}

double protocol witness for SIMDStorage.init() in conformance Frame4D@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double protocol witness for SIMDStorage.subscript.getter in conformance Frame4D@<D0>(char a1@<W0>, double *a2@<X8>)
{
  double result = *(double *)(v2 + 8 * (a1 & 0xF));
  *a2 = result;
  return result;
}

double protocol witness for SIMDStorage.subscript.setter in conformance Frame4D(double *a1, unsigned int a2)
{
  double result = *a1;
  *(double *)(v2 + 8 * a2) = *a1;
  return result;
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Frame4D(void *a1, uint64_t a2))()
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = *(void *)(v2 + 8 * (a2 & 0xF));
  return Frame4D.subscript.modify;
}

double Frame4D.subscript.modify(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 8)) = *(void *)a1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Frame4D()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Frame4D()
{
  return SIMD.init(from:)();
}

void protocol witness for Hashable.hash(into:) in conformance Frame4D()
{
  uint64_t v1 = 0;
  long long v10 = v0[6];
  long long v11 = v0[7];
  long long v8 = v0[4];
  long long v9 = v0[5];
  long long v6 = v0[2];
  long long v7 = v0[3];
  long long v4 = *v0;
  long long v5 = v0[1];
  do
  {
    v12[0] = v4;
    v12[1] = v5;
    void v12[2] = v6;
    v12[3] = v7;
    v12[4] = v8;
    v12[5] = v9;
    v12[6] = v10;
    v12[7] = v11;
    Swift::UInt64 v2 = *((void *)v12 + (v1++ & 0xF));
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v2;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  while (v1 != 16);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Frame4D()
{
  long long v11 = v0[6];
  long long v12 = v0[7];
  long long v9 = v0[4];
  long long v10 = v0[5];
  long long v7 = v0[2];
  long long v8 = v0[3];
  long long v5 = *v0;
  long long v6 = v0[1];
  Hasher.init(_seed:)();
  for (uint64_t i = 0; i != 16; ++i)
  {
    v13[0] = v5;
    v13[1] = v6;
    _OWORD v13[2] = v7;
    v13[3] = v8;
    v13[4] = v9;
    v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    Swift::UInt64 v2 = *((void *)v13 + (i & 0xF));
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v2;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Frame4D(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Frame4D and conformance Frame4D();
  return MEMORY[0x270F9FAD0](a1, v2);
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Frame4D(unint64_t result, long long *a2)
{
  uint64_t v2 = 0;
  long long v4 = *(_OWORD *)(result + 96);
  long long v3 = *(_OWORD *)(result + 112);
  long long v6 = *(_OWORD *)(result + 64);
  long long v5 = *(_OWORD *)(result + 80);
  long long v8 = *(_OWORD *)(result + 32);
  long long v7 = *(_OWORD *)(result + 48);
  long long v10 = *(_OWORD *)result;
  long long v9 = *(_OWORD *)(result + 16);
  long long v12 = a2[6];
  long long v11 = a2[7];
  long long v14 = a2[4];
  long long v13 = a2[5];
  long long v16 = a2[2];
  long long v15 = a2[3];
  LOBYTE(result) = 1;
  long long v18 = *a2;
  long long v17 = a2[1];
  do
  {
    if (result)
    {
      v22[0] = v10;
      v22[1] = v9;
      v22[2] = v8;
      void v22[3] = v7;
      v22[4] = v6;
      v22[5] = v5;
      v22[6] = v4;
      v22[7] = v3;
      uint64_t v19 = 8 * (v2 & 0xF);
      double v20 = *(double *)((char *)v22 + v19);
      v21[0] = v18;
      v21[1] = v17;
      _OWORD v21[2] = v16;
      v21[3] = v15;
      v21[4] = v14;
      v21[5] = v13;
      v21[6] = v12;
      v21[7] = v11;
      double result = v20 == *(double *)((char *)v21 + v19);
    }
    else
    {
      double result = 0;
    }
    ++v2;
  }
  while (v2 != 16);
  return result;
}

uint64_t TexCoord2.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord2.x.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  long long v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

void TexCoord2.x.modify(uint64_t **a1, char a2)
{
}

uint64_t TexCoord2.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord2.y.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  long long v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

void TexCoord2.y.modify(uint64_t **a1, char a2)
{
}

uint64_t TexCoord2.z.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord2.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord2.z.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  long long v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

void TexCoord2.z.modify(uint64_t **a1, char a2)
{
}

uint64_t TexCoord2.scalarCount.getter()
{
  return 2;
}

uint64_t type metadata accessor for TexCoord2()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TexCoord2.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*TexCoord2.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  long long v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  void v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

void TexCoord2.subscript.modify(uint64_t **a1, char a2)
{
}

Swift::Int TexCoord2.hashValue.getter()
{
  return Color3.hashValue.getter();
}

uint64_t protocol witness for SIMDStorage.subscript.setter in conformance TexCoord2<A>(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance TexCoord2<A>(void *a1, uint64_t a2, uint64_t a3))()
{
  size_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = TexCoord2.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TexCoord2<A>()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TexCoord2<A>()
{
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TexCoord2<A>()
{
  swift_getWitnessTable();
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TexCoord2<A>()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TexCoord2<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD0](a1, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance TexCoord2<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD8](a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  long long v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)v23 - v9;
  MEMORY[0x270FA5388](v11);
  double v13 = MEMORY[0x270FA5388](v12);
  v23[1] = (char *)v23 - v14;
  long long v15 = *(void (**)(char *, double))(v5 + 16);
  v15(v10, v13);
  ((void (*)(char *, uint64_t, uint64_t))v15)(v7, a2, a3);
  Point3.subscript.getter(0, a3);
  long long v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v10, a3);
  Point3.subscript.getter(0, a3);
  __n128 v26 = v16;
  void v23[2] = v5 + 8;
  v16(v7, a3);
  uint64_t v17 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  v23[0] = v17;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  LOBYTE(v17) = dispatch thunk of static Equatable.== infix(_:_:)();
  ((void (*)(char *, uint64_t, uint64_t))v15)(v10, v24, a3);
  ((void (*)(char *, uint64_t, uint64_t))v15)(v7, v25, a3);
  if (v17)
  {
    Point3.subscript.getter(1, a3);
    long long v18 = v10;
    uint64_t v19 = v26;
    v26(v18, a3);
    Point3.subscript.getter(1, a3);
    v19(v7, a3);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v21 = v26;
    v26(v7, a3);
    v21(v10, a3);
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t TexCoord2.init(_:_:)(const void *a1, const void *a2, uint64_t a3)
{
  size_t v5 = *(void *)(*(void *)(a3 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  Point3.init()(v6, v7);
  memcpy((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t TexCoord3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord3.x.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t TexCoord3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord3.y.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t TexCoord3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord3.z.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t TexCoord3.scalarCount.getter()
{
  return 3;
}

uint64_t type metadata accessor for TexCoord3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Color3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TexCoord3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*TexCoord3.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  void v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int TexCoord3.hashValue.getter()
{
  return Color3.hashValue.getter();
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance TexCoord3<A>(void *a1, uint64_t a2, uint64_t a3))()
{
  size_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = TexCoord3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TexCoord3<A>()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TexCoord3<A>()
{
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TexCoord3<A>()
{
  swift_getWitnessTable();
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TexCoord3<A>()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TexCoord3<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD0](a1, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance TexCoord3<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD8](a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))TexCoord3.subscript.getter);
}

uint64_t TexCoord3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

{
  size_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, double);
  uint64_t v13;

  uint64_t v7 = *(void *)(*(void *)(a4 - 8) + 64);
  size_t v8 = MEMORY[0x270FA5388](a1);
  v11(v9, v10, v8);
  memcpy((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v7);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t Point3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Point3.x.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t Point3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Point3.y.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t Point3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Point3.z.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t Point3.scalarCount.getter()
{
  return 3;
}

uint64_t type metadata accessor for Point3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Point3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*Point3.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  void v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int Point3.hashValue.getter()
{
  return Color3.hashValue.getter();
}

uint64_t protocol witness for SIMDStorage.init() in conformance Point3<A>(uint64_t a1)
{
  return Point3.init()(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Point3<A>(void *a1, uint64_t a2, uint64_t a3))()
{
  size_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Point3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Point3<A>()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Point3<A>()
{
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Point3<A>()
{
  swift_getWitnessTable();
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Point3<A>()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Point3<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD0](a1, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Point3<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD8](a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Point3.subscript.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v37 = a5;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  long long v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  double v13 = (char *)&v33 - v12;
  uint64_t v35 = *(void *)(v14 + 24);
  MEMORY[0x270FA5388](v15);
  id v40 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18.n128_f64[0] = MEMORY[0x270FA5388](v17);
  id v39 = (char *)&v33 - v19;
  uint64_t v20 = 0;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v21 = v8 + 16;
  uint64_t v22 = v23;
  char v38 = (void (**)(char *, uint64_t))(v21 - 8);
  char v24 = 1;
  uint64_t v36 = v25;
  uint64_t v34 = v23;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v23)(v13, v7, a3, v18);
  while (1)
  {
    v22(v10, a2, a3);
    if (v24)
    {
      uint64_t v28 = v21;
      uint64_t v29 = v7;
      uint64_t v30 = v37;
      v37(v20, a3);
      uint64_t v31 = *v38;
      (*v38)(v13, a3);
      v30(v20, a3);
      uint64_t v7 = v29;
      uint64_t v21 = v28;
      v31(v10, a3);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      a2 = v36;
      swift_getAssociatedConformanceWitness();
      uint64_t v22 = v34;
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else
    {
      __n128 v26 = *v38;
      (*v38)(v10, a3);
      v26(v13, a3);
      char v24 = 0;
    }
    if (++v20 == 3) {
      break;
    }
    ((void (*)(char *, uint64_t, uint64_t, __n128))v22)(v13, v7, a3, v27);
  }
  return v24 & 1;
}

uint64_t Point3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

uint64_t Vector3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Vector3.x.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t Vector3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Vector3.y.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t Vector3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Vector3.z.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t Vector3.scalarCount.getter()
{
  return 3;
}

uint64_t type metadata accessor for Vector3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Vector3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*Vector3.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  void v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int Vector3.hashValue.getter()
{
  return Color3.hashValue.getter();
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Vector3<A>(void *a1, uint64_t a2, uint64_t a3))()
{
  size_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Vector3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Vector3<A>()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Vector3<A>()
{
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Vector3<A>()
{
  swift_getWitnessTable();
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Vector3<A>()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Vector3<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD0](a1, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Vector3<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD8](a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Vector3.subscript.getter);
}

uint64_t Vector3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

uint64_t Normal3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Normal3.x.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t Normal3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Normal3.y.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t Normal3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Normal3.z.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  size_t v5 = malloc(0x28uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  size_t v6 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  void v5[2] = v6;
  v5[3] = malloc(v6);
  void v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t Normal3.scalarCount.getter()
{
  return 3;
}

uint64_t TexCoord2.init(val:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  size_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t TexCoord2.init()()
{
  return dispatch thunk of SIMDStorage.init()();
}

uint64_t TexCoord2.subscript.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t type metadata accessor for Normal3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Color4()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ManagedColor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Normal3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*Normal3.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  void v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int Normal3.hashValue.getter()
{
  return Color3.hashValue.getter();
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Normal3<A>(void *a1, uint64_t a2, uint64_t a3))()
{
  size_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Normal3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Normal3<A>()
{
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Normal3<A>()
{
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Normal3<A>()
{
  swift_getWitnessTable();
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Normal3<A>()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Normal3<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD0](a1, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Normal3<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9FAD8](a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Normal3.subscript.getter);
}

uint64_t Normal3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

float Half.underlyingValue.getter()
{
  return *(float *)v0;
}

void Half.underlyingValue.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*Half.underlyingValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
}

uint64_t static Half.exponentBitCount.getter()
{
  return 8;
}

uint64_t static Half.significandBitCount.getter()
{
  return 23;
}

uint64_t Half.exponentBitPattern.getter()
{
  return ((unint64_t)*v0 >> 23);
}

uint64_t Half.significandBitPattern.getter()
{
  return *v0 & 0x7FFFFF;
}

float Half.binade.getter@<S0>(float *a1@<X8>)
{
  float v2 = *v1;
  int v3 = (*(_DWORD *)v1 >> 23);
  if (v3 == 255)
  {
    float v5 = NAN;
    goto LABEL_7;
  }
  if ((LODWORD(v2) & 0x7FFFFF) == 0 || v3 != 0)
  {
    LODWORD(v5) = LODWORD(v2) & 0xFF800000;
LABEL_7:
    float result = v5;
    *a1 = v5;
    return result;
  }
  float result = COERCE_FLOAT(COERCE_UNSIGNED_INT(*v1 * 8388600.0) & 0xFF800000) * 0.00000011921;
  *a1 = result;
  return result;
}

uint64_t Half.significandWidth.getter()
{
  unsigned int v1 = *v0 & 0x7FFFFF;
  unsigned int v2 = __clz(__rbit32(v1));
  if ((*v0 >> 23) && (*v0 >> 23) != 255)
  {
    uint64_t v4 = 23 - v2;
    if (v1) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else if ((*v0 & 0x7F800000) != 0 || v1 == 0)
  {
    return -1;
  }
  else
  {
    return 32 - (__clz(v1) + v2 + 1);
  }
}

void static Half.nan.getter(_DWORD *a1@<X8>)
{
  *a1 = 2143289344;
}

void static Half.signalingNaN.getter(_DWORD *a1@<X8>)
{
  *a1 = 2141192192;
}

void static Half.infinity.getter(_DWORD *a1@<X8>)
{
  *a1 = 2139095040;
}

void static Half.greatestFiniteMagnitude.getter(_DWORD *a1@<X8>)
{
  *a1 = 2139095039;
}

void static Half.pi.getter(_DWORD *a1@<X8>)
{
  *a1 = 1078530010;
}

float Half.ulp.getter@<S0>(float *a1@<X8>)
{
  if ((*v1 >> 23))
  {
    if ((*v1 >> 23) != 255)
    {
      float result = COERCE_FLOAT(*v1 & 0x7F800000) * 0.00000011921;
      *a1 = result;
      return result;
    }
    float v3 = NAN;
  }
  else
  {
    LODWORD(v3) = 1;
  }
  float result = v3;
  *a1 = v3;
  return result;
}

void static Half.leastNormalMagnitude.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x800000;
}

void static Half.leastNonzeroMagnitude.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Half.sign.getter()
{
  return *v0 >> 31;
}

uint64_t Half.exponent.getter()
{
  unint64_t v1 = *v0;
  uint64_t v2 = (v1 >> 23);
  if (v2 == 255) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v4 = v1 & 0x7FFFFF;
  if (!(v2 | v4)) {
    return 0x8000000000000000;
  }
  if (v2) {
    return v2 - 127;
  }
  if (v4) {
    return v2 - __clz(v4) - 118;
  }
  __break(1u);
  return result;
}

uint64_t Half.significand.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = Float.significand.getter();
  *a1 = v3;
  return result;
}

void Half.nextUp.getter(float *a1@<X8>)
{
  float v2 = *v1 + 0.0;
  if (v2 < INFINITY) {
    LODWORD(v2) += (SLODWORD(v2) >> 31) | 1;
  }
  *a1 = v2;
}

BOOL Half.isNormal.getter()
{
  return (*v0 >> 23) != 255 && (*v0 >> 23) != 0;
}

BOOL Half.isFinite.getter()
{
  return (~*v0 & 0x7F800000) != 0;
}

BOOL Half.isZero.getter()
{
  return (*v0 & 0x7FFFFFFF) == 0;
}

BOOL Half.isSubnormal.getter()
{
  return (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x7F800000) == 0;
}

BOOL Half.isInfinite.getter()
{
  return (*v0 & 0x7FFFFFFF) == 2139095040;
}

BOOL Half.isNaN.getter()
{
  return (*v0 & 0x7FFFFF) != 0 && (~*v0 & 0x7F800000) == 0;
}

BOOL Half.isSignalingNaN.getter()
{
  return (~*v0 & 0x7F800000) == 0 && (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x400000) == 0;
}

uint64_t Half.isCanonical.getter()
{
  return 1;
}

RealityIO::Half __swiftcall Half.init(floatLiteral:)(RealityIO::Half floatLiteral)
{
  v1->underlyingValue = floatLiteral.underlyingValue;
  return floatLiteral;
}

uint64_t Half.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    char v12 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v13 = dispatch thunk of BinaryInteger._lowWord.getter();
    long long v10 = *(void (**)(char *, uint64_t))(v6 + 8);
    v10(v9, a2);
    if (v12) {
      float v11 = (float)v13;
    }
    else {
      float v11 = (float)(unint64_t)v13;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Float and conformance Float();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    long long v10 = *(void (**)(char *, uint64_t))(v6 + 8);
    v10(v9, a2);
    float v11 = *(float *)&v15[3];
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v10)(a1, a2);
  *(float *)a3 = v11;
  *(unsigned char *)(a3 + 4) = 0;
  return result;
}

void Half.init(sign:exponent:significand:)(char a1@<W0>, uint64_t a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  *a4 = specialized Float.init(sign:exponent:significand:)(a1 & 1, a2, *a3);
}

RealityIO::Half __swiftcall Half.init(integerLiteral:)(Swift::Int64 integerLiteral)
{
  result.underlyingValue = (float)integerLiteral;
  float *v1 = (float)integerLiteral;
  return result;
}

uint64_t Half.init(sign:exponentBitPattern:significandBitPattern:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, int a3@<W2>, int *a4@<X8>)
{
  *a4 = (result << 31) | (a2 << 23) | a3 & 0x7FFFFF;
  return result;
}

float Half.magnitude.getter@<S0>(float *a1@<X8>)
{
  float result = fabsf(*v1);
  *a1 = result;
  return result;
}

float static Half.* infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 * *a2;
  *a3 = result;
  return result;
}

float static Half.*= infix(_:_:)(float *a1, float *a2)
{
  float result = *a2 * *a1;
  *a1 = result;
  return result;
}

float static Half.+ infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 + *a2;
  *a3 = result;
  return result;
}

float static Half.- infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 - *a2;
  *a3 = result;
  return result;
}

float static Half./ infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 / *a2;
  *a3 = result;
  return result;
}

float static Half./= infix(_:_:)(float *a1, float *a2)
{
  float result = *a1 / *a2;
  *a1 = result;
  return result;
}

Swift::Float __swiftcall Half.distance(to:)(RealityIO::Half to)
{
  return *v1 - *v2;
}

RealityIO::Half __swiftcall Half.advanced(by:)(Swift::Float by)
{
  result.underlyingValue = *v2 + by;
  float *v1 = result.underlyingValue;
  return result;
}

Swift::Bool __swiftcall Half.isEqual(to:)(RealityIO::Half to)
{
  return *v2 == *v1;
}

Swift::Bool __swiftcall Half.isLess(than:)(RealityIO::Half than)
{
  return *v2 < *v1;
}

Swift::Bool __swiftcall Half.isLessThanOrEqualTo(_:)(RealityIO::Half a1)
{
  return *v2 <= *v1;
}

Swift::Void __swiftcall Half.formRemainder(dividingBy:)(RealityIO::Half dividingBy)
{
  float *v2 = remainderf(*v2, *v1);
}

Swift::Void __swiftcall Half.formTruncatingRemainder(dividingBy:)(RealityIO::Half dividingBy)
{
  float *v2 = fmodf(*v2, *v1);
}

Swift::Void __swiftcall Half.formSquareRoot()()
{
  *uint64_t v0 = sqrtf(*v0);
}

Swift::Void __swiftcall Half.addProduct(_:_:)(RealityIO::Half a1, RealityIO::Half a2)
{
  *unsigned int v4 = *v4 + (float)(*v2 * *v3);
}

uint64_t Half.round(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  double v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, v3, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (result == *MEMORY[0x263F8E210])
  {
    float *v1 = roundf(*v1);
    return result;
  }
  if (result == *MEMORY[0x263F8E208])
  {
    float *v1 = rintf(*v1);
    return result;
  }
  if (result == *MEMORY[0x263F8E218])
  {
    float v9 = *v1;
LABEL_7:
    float *v1 = ceilf(v9);
    return result;
  }
  if (result == *MEMORY[0x263F8E220])
  {
    float v9 = *v1;
LABEL_10:
    float *v1 = floorf(v9);
    return result;
  }
  if (result == *MEMORY[0x263F8E1F8])
  {
    float *v1 = truncf(*v1);
  }
  else
  {
    if (result == *MEMORY[0x263F8E200])
    {
      float v9 = *v1;
      if ((*(_DWORD *)v1 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    Float._roundSlowPath(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

void Half.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = *v0;
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Half.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Half.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Half.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance Half.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Half.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Half.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Half.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Half.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  double v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Half.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = v1;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Half.init(from:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Half.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    int v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t protocol witness for BinaryFloatingPoint.init(sign:exponentBitPattern:significandBitPattern:) in conformance Half@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, int *a4@<X8>)
{
  *a4 = (result << 31) | (*a2 << 23) | *a3 & 0x7FFFFF;
  return result;
}

void protocol witness for BinaryFloatingPoint.init(_:) in conformance Half(float *a1@<X8>, float a2@<S0>)
{
  *a1 = a2;
}

uint64_t protocol witness for BinaryFloatingPoint.init<A>(_:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9D010](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for BinaryFloatingPoint.init<A>(exactly:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9D000](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for static BinaryFloatingPoint.exponentBitCount.getter in conformance Half()
{
  return 8;
}

uint64_t protocol witness for static BinaryFloatingPoint.significandBitCount.getter in conformance Half()
{
  return 23;
}

void protocol witness for BinaryFloatingPoint.exponentBitPattern.getter in conformance Half(void *a1@<X8>)
{
  *a1 = ((unint64_t)*v1 >> 23);
}

void protocol witness for BinaryFloatingPoint.significandBitPattern.getter in conformance Half(int *a1@<X8>)
{
  *a1 = *v1 & 0x7FFFFF;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Half@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return Half.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Half(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Half.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void protocol witness for FloatingPoint.init(sign:exponent:significand:) in conformance Half(char a1@<W0>, uint64_t *a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  *a4 = specialized Float.init(sign:exponent:significand:)(a1 & 1, *a2, *a3);
}

void protocol witness for FloatingPoint.init(signOf:magnitudeOf:) in conformance Half(float *a1@<X0>, float *a2@<X1>, unsigned int *a3@<X8>)
{
}

void specialized BinaryFloatingPoint.init(signOf:magnitudeOf:)(unsigned int *a1@<X8>, float a2@<S0>, float a3@<S1>)
{
  *a1 = LODWORD(a2) & 0x80000000 | LODWORD(a3) & 0x7FFFFFFF;
}

uint64_t protocol witness for FloatingPoint.init(_:) in conformance Half()
{
  return static BinaryFloatingPoint<>._convert<A>(from:)();
}

uint64_t protocol witness for FloatingPoint.init<A>(_:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Half and conformance Half();
  unint64_t v9 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return MEMORY[0x270F9D038](a1, a4, a2, v8, a3, v9);
}

void protocol witness for static FloatingPoint.nan.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2143289344;
}

void protocol witness for static FloatingPoint.signalingNaN.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2141192192;
}

void protocol witness for static FloatingPoint.infinity.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2139095040;
}

void protocol witness for static FloatingPoint.greatestFiniteMagnitude.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2139095039;
}

void protocol witness for static FloatingPoint.pi.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 1078530010;
}

void specialized static FloatingPoint.ulpOfOne.getter(_DWORD *a1@<X8>)
{
  *a1 = 872415232;
}

void protocol witness for static FloatingPoint.leastNormalMagnitude.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 0x800000;
}

void protocol witness for static FloatingPoint.leastNonzeroMagnitude.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for FloatingPoint.sign.getter in conformance Half()
{
  return *v0 >> 31;
}

uint64_t protocol witness for FloatingPoint.exponent.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Half.exponent.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for FloatingPoint.significand.getter in conformance Half@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = Float.significand.getter();
  *a1 = v3;
  return result;
}

float protocol witness for static FloatingPoint./ infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 / *a2;
  *a3 = result;
  return result;
}

float protocol witness for static FloatingPoint./= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result = *a1 / *a2;
  *a1 = result;
  return result;
}

void protocol witness for FloatingPoint.remainder(dividingBy:) in conformance Half(float *a1@<X0>, float *a2@<X8>)
{
  *a2 = _stdlib_remainderf(*v2, *a1);
}

void protocol witness for FloatingPoint.formRemainder(dividingBy:) in conformance Half(float *a1)
{
  float *v1 = _stdlib_remainderf(*v1, *a1);
}

void protocol witness for FloatingPoint.truncatingRemainder(dividingBy:) in conformance Half(float *a1@<X0>, float *a2@<X8>)
{
  *a2 = fmodf(*v2, *a1);
}

void protocol witness for FloatingPoint.formTruncatingRemainder(dividingBy:) in conformance Half(float *a1)
{
  float *v1 = fmodf(*v1, *a1);
}

void protocol witness for FloatingPoint.squareRoot() in conformance Half(float *a1@<X8>)
{
  *a1 = _stdlib_squareRootf(*v1);
}

void protocol witness for FloatingPoint.formSquareRoot() in conformance Half()
{
  *uint64_t v0 = _stdlib_squareRootf(*v0);
}

float protocol witness for FloatingPoint.addingProduct(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *v3 + (float)(*a1 * *a2);
  *a3 = result;
  return result;
}

float protocol witness for FloatingPoint.addProduct(_:_:) in conformance Half(float *a1, float *a2)
{
  float result = *v2 + (float)(*a1 * *a2);
  float *v2 = result;
  return result;
}

float *protocol witness for static FloatingPoint.minimum(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = *result;
  float v4 = *a2;
  if (*result > *a2 && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0)) {
    float v3 = *a2;
  }
  *a3 = v3;
  return result;
}

float *protocol witness for static FloatingPoint.maximum(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = *result;
  float v4 = *a2;
  if (*a2 >= *result && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0)) {
    float v3 = *a2;
  }
  *a3 = v3;
  return result;
}

float *protocol witness for static FloatingPoint.minimumMagnitude(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = *result;
  float v4 = *a2;
  if (fabsf(*result) > fabsf(*a2) && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0)) {
    float v3 = *a2;
  }
  *a3 = v3;
  return result;
}

float *protocol witness for static FloatingPoint.maximumMagnitude(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = *result;
  float v4 = *a2;
  if (fabsf(*a2) >= fabsf(*result) && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0)) {
    float v3 = *a2;
  }
  *a3 = v3;
  return result;
}

uint64_t protocol witness for FloatingPoint.rounded(_:) in conformance Half@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *v2;
  return Half.round(_:)(a1);
}

void protocol witness for FloatingPoint.nextUp.getter in conformance Half(float *a1@<X8>)
{
  float v2 = *v1 + 0.0;
  if (v2 < INFINITY) {
    LODWORD(v2) += (SLODWORD(v2) >> 31) | 1;
  }
  *a1 = v2;
}

float protocol witness for FloatingPoint.nextDown.getter in conformance Half@<S0>(float *a1@<X8>)
{
  float v2 = 0.0 - *v1;
  if (v2 < INFINITY) {
    LODWORD(v2) += (SLODWORD(v2) >> 31) | 1;
  }
  float result = 0.0 - v2;
  *a1 = 0.0 - v2;
  return result;
}

BOOL protocol witness for FloatingPoint.isEqual(to:) in conformance Half(float *a1)
{
  return *v1 == *a1;
}

BOOL protocol witness for FloatingPoint.isLess(than:) in conformance Half(float *a1)
{
  return *v1 < *a1;
}

BOOL protocol witness for FloatingPoint.isLessThanOrEqualTo(_:) in conformance Half(float *a1)
{
  return *v1 <= *a1;
}

uint64_t protocol witness for FloatingPoint.isTotallyOrdered(belowOrEqualTo:) in conformance Half(float *a1)
{
  return specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(*a1, *v1);
}

uint64_t specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(float a1, float a2)
{
  if (a2 < a1) {
    return 1;
  }
  if ((LODWORD(a1) & 0x80000000) != 0)
  {
    if ((LODWORD(a2) & 0x80000000) != 0) {
      goto LABEL_5;
    }
    return LODWORD(a2) >> 31;
  }
  if ((LODWORD(a2) & 0x80000000) != 0) {
    return LODWORD(a2) >> 31;
  }
LABEL_5:
  unsigned int v3 = (LODWORD(a2) >> 23);
  unsigned int v4 = (LODWORD(a1) >> 23);
  unsigned int v5 = LODWORD(a2) & 0x7FFFFF;
  unsigned int v6 = LODWORD(a1) & 0x7FFFFF;
  BOOL v8 = a2 >= 0.0 || v5 >= v6;
  if (v6 < v5) {
    BOOL v9 = LODWORD(a2) >> 31;
  }
  else {
    BOOL v9 = v8;
  }
  if (v3 < v4) {
    BOOL v9 = a2 >= 0.0;
  }
  if (v4 < v3) {
    return LODWORD(a2) >> 31;
  }
  else {
    return v9;
  }
}

BOOL protocol witness for FloatingPoint.isNormal.getter in conformance Half()
{
  return (*v0 >> 23) != 255 && (*v0 >> 23) != 0;
}

BOOL protocol witness for FloatingPoint.isFinite.getter in conformance Half()
{
  return (~*v0 & 0x7F800000) != 0;
}

BOOL protocol witness for FloatingPoint.isZero.getter in conformance Half()
{
  return (*v0 & 0x7FFFFFFF) == 0;
}

BOOL protocol witness for FloatingPoint.isSubnormal.getter in conformance Half()
{
  return (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x7F800000) == 0;
}

BOOL protocol witness for FloatingPoint.isInfinite.getter in conformance Half()
{
  return (*v0 & 0x7FFFFFFF) == 2139095040;
}

BOOL protocol witness for FloatingPoint.isNaN.getter in conformance Half()
{
  return (*v0 & 0x7FFFFF) != 0 && (~*v0 & 0x7F800000) == 0;
}

BOOL protocol witness for FloatingPoint.isSignalingNaN.getter in conformance Half()
{
  return (~*v0 & 0x7F800000) == 0 && (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x400000) == 0;
}

uint64_t protocol witness for FloatingPoint.floatingPointClass.getter in conformance Half()
{
  return specialized FloatingPoint.floatingPointClass.getter(*v0);
}

uint64_t specialized FloatingPoint.floatingPointClass.getter(float a1)
{
  if (a1 < 0.0) {
    unsigned int v1 = 5;
  }
  else {
    unsigned int v1 = 6;
  }
  if (a1 < 0.0) {
    int v2 = 4;
  }
  else {
    int v2 = 7;
  }
  if ((LODWORD(a1) & 0x7FFFFF) != 0) {
    unsigned int v1 = v2;
  }
  if (a1 < 0.0) {
    int v3 = 3;
  }
  else {
    int v3 = 8;
  }
  if (a1 < 0.0) {
    int v4 = 2;
  }
  else {
    int v4 = 9;
  }
  if ((LODWORD(a1) & 0x7FFFFF) != 0) {
    unsigned int v5 = (LODWORD(a1) >> 22) & 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if ((LODWORD(a1) >> 23) != 255) {
    unsigned int v5 = v3;
  }
  if ((LODWORD(a1) >> 23)) {
    return v5;
  }
  else {
    return v1;
  }
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance Half@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float protocol witness for static SignedNumeric.- prefix(_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = 0.0 - *a1;
  *a2 = result;
  return result;
}

float protocol witness for SignedNumeric.negate() in conformance Half()
{
  float result = 0.0 - *v0;
  *uint64_t v0 = result;
  return result;
}

float protocol witness for Strideable.distance(to:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = *a1 - *v2;
  *a2 = result;
  return result;
}

float protocol witness for Strideable.advanced(by:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = *a1 + *v2;
  *a2 = result;
  return result;
}

float *protocol witness for static Strideable._step(after:from:by:) in conformance Half(float *result, uint64_t a2, char a3, float *a4, float *a5, float *a6)
{
  float v6 = *a6;
  if (a3)
  {
    float v8 = v6 + *a4;
    goto LABEL_5;
  }
  if (!__OFADD__(a2++, 1))
  {
    float v8 = *a5 + (float)(v6 * (float)a2);
LABEL_5:
    *float result = v8;
    return (float *)a2;
  }
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Half()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = v1;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Half()
{
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = *v0;
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Half()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = v1;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

float protocol witness for Numeric.magnitude.getter in conformance Half@<S0>(float *a1@<X8>)
{
  float result = fabsf(*v1);
  *a1 = result;
  return result;
}

float protocol witness for static Numeric.* infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 * *a2;
  *a3 = result;
  return result;
}

float protocol witness for static Numeric.*= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result = *a2 * *a1;
  *a1 = result;
  return result;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a1 <= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a2 <= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a1 == *a2;
}

float protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 + *a2;
  *a3 = result;
  return result;
}

float protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result = *a2 + *a1;
  *a1 = result;
  return result;
}

float protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 - *a2;
  *a3 = result;
  return result;
}

float protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result = *a1 - *a2;
  *a1 = result;
  return result;
}

float protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance Half@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  float result = (float)*a1;
  *a2 = result;
  return result;
}

uint64_t static HalfSIMDStorageSize2.get.getter()
{
  return 2;
}

uint64_t static HalfSIMDStorageSize4.get.getter()
{
  return 4;
}

uint64_t static HalfSIMDStorageSize8.get.getter()
{
  return 8;
}

uint64_t static HalfSIMDStorageSize16.get.getter()
{
  return 16;
}

uint64_t static HalfSIMDStorageSize32.get.getter()
{
  return 32;
}

uint64_t protocol witness for static HalfSIMDStorageSize.get.getter in conformance HalfSIMDStorageSize32()
{
  return 32;
}

uint64_t static HalfSIMDStorageSize64.get.getter()
{
  return 64;
}

uint64_t protocol witness for static HalfSIMDStorageSize.get.getter in conformance HalfSIMDStorageSize64()
{
  return 64;
}

uint64_t HalfSIMDStorage.scalarCount.getter(uint64_t a1)
{
  return specialized HalfSIMDStorage.scalarCount.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t HalfSIMDStorage.init()@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v3 = (*(uint64_t (**)(void))(a1 + 8))();
  uint64_t result = specialized Array.init(repeating:count:)(v3, 0);
  *a2 = result;
  return result;
}

unint64_t HalfSIMDStorage.subscript.getter@<X0>(unint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > result)
  {
    *a2 = *(_DWORD *)(*(void *)v2 + 4 * result + 32);
    return result;
  }
  __break(1u);
  return result;
}

float key path getter for HalfSIMDStorage.subscript(_:) : <A>HalfSIMDStorage<A>A@<S0>(unint64_t *a1@<X1>, float *a2@<X8>)
{
  HalfSIMDStorage.subscript.getter(*a1, &v4);
  float result = v4;
  *a2 = v4;
  return result;
}

uint64_t key path setter for HalfSIMDStorage.subscript(_:) : <A>HalfSIMDStorage<A>A(int *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  int v5 = *a1;
  return HalfSIMDStorage.subscript.setter(&v5, v3);
}

uint64_t HalfSIMDStorage.subscript.setter(int *a1, unint64_t a2)
{
  int v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v5 = result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(void *)(v5 + 16) > a2)
  {
    *(_DWORD *)(v5 + 4 * a2 + 32) = v4;
    uint64_t *v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*HalfSIMDStorage.subscript.modify(uint64_t (*result)(uint64_t a1, char a2), unint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  *((void *)result + 1) = a3;
  *((void *)result + 2) = v3;
  *(void *)uint64_t result = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v3 + 16) > a2)
  {
    *((_DWORD *)result + 6) = *(_DWORD *)(*(void *)v3 + 4 * a2 + 32);
    return HalfSIMDStorage.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t HalfSIMDStorage.subscript.modify(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)a1;
  if (a2)
  {
    int v6 = *(_DWORD *)(a1 + 24);
    int v4 = &v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 24);
    int v4 = &v7;
  }
  return HalfSIMDStorage.subscript.setter(v4, v3);
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance HalfSIMDStorage<A>(uint64_t a1)
{
  return specialized HalfSIMDStorage.scalarCount.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for SIMDStorage.init() in conformance HalfSIMDStorage<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return HalfSIMDStorage.init()(*(void *)(a1 + 24), a2);
}

uint64_t protocol witness for SIMDStorage.subscript.setter in conformance HalfSIMDStorage<A>(int *a1, unint64_t a2)
{
  int v3 = *a1;
  return HalfSIMDStorage.subscript.setter(&v3, a2);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance HalfSIMDStorage<A>(uint64_t (**a1)(uint64_t a1, char a2), unint64_t a2, uint64_t a3))()
{
  int v6 = (uint64_t (*)(uint64_t, char))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = HalfSIMDStorage.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t specialized HalfSIMDStorage.scalarCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t specialized TexCoord3.subscript.setter(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t specialized Color4.subscript.setter(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t specialized Color3.red.setter(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t specialized TexCoord2.x.setter(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

float specialized Float.init(sign:exponent:significand:)(char a1, uint64_t a2, float a3)
{
  float result = -a3;
  if ((a1 & 1) == 0) {
    float result = a3;
  }
  int v5 = (LODWORD(a3) >> 23);
  if (v5 != 255 && v5 | LODWORD(a3) & 0x7FFFFF)
  {
    if (a2 >= -126)
    {
      if (a2 >= 128)
      {
        if (a2 >= 381) {
          a2 = 381;
        }
        do
        {
          a2 -= 127;
          float result = result * 1.7014e38;
        }
        while ((unint64_t)a2 > 0x7F);
      }
    }
    else
    {
      if (a2 <= -378) {
        uint64_t v6 = -378;
      }
      else {
        uint64_t v6 = a2;
      }
      do
      {
        LODWORD(a2) = v6 + 126;
        float result = result * 1.1755e-38;
        BOOL v7 = __CFADD__(v6, 252);
        v6 += 126;
      }
      while (!v7);
    }
    return result * COERCE_FLOAT(((a2 << 23) + 1065353216) & 0x7F800000);
  }
  return result;
}

float _stdlib_squareRootf(float a1)
{
  return sqrtf(a1);
}

unint64_t lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

uint64_t base witness table accessor for CustomStringConvertible in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SIMDStorage in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage : SIMD in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : FixedWidthInteger in Color3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : SignedInteger in Color3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>();
}

{
  uint64_t vars8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Encodable in Color3<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Hashable in Color3<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>();
}

uint64_t base witness table accessor for Equatable in Color3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Color4<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in Color4<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in Color4<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in Color4<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in Color4<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SIMDStorage in Color4<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage : SIMD in Color4<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Color4<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type Frame4D and conformance Frame4D()
{
  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

uint64_t associated type witness table accessor for SIMD.MaskStorage : SIMD in Frame4D()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type SIMD16<Int64> and conformance SIMD16<A>, &demangling cache variable for type metadata for SIMD16<Int64>);
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Decodable in Frame4D()
{
  return MEMORY[0x263F8D570];
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Encodable in Frame4D()
{
  return MEMORY[0x263F8D548];
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Hashable in Frame4D()
{
  return MEMORY[0x263F8D558];
}

uint64_t base witness table accessor for CustomStringConvertible in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SIMDStorage in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage : SIMD in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>();
}

{
  uint64_t vars8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Encodable in TexCoord2<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Hashable in TexCoord2<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>();
}

uint64_t base witness table accessor for Equatable in TexCoord2<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in TexCoord3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in TexCoord3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in TexCoord3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in TexCoord3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in TexCoord3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SIMDStorage in TexCoord3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in TexCoord3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Point3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in Point3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in Point3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in Point3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in Point3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SIMDStorage in Point3<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : FixedWidthInteger in Point3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : SignedInteger in Point3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for Equatable in Point3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Vector3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in Vector3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in Vector3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in Vector3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in Vector3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SIMDStorage in Vector3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Vector3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Normal3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in Normal3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in Normal3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in Normal3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in Normal3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SIMDStorage in Normal3<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Normal3<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD16Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize16> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize16>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD2Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize2> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize2>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD32Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize32> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize32>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD4Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize4> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize4>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD64Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize64> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize64>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD8Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize8> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize8>);
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in Half()
{
  return MEMORY[0x263F8D640];
}

uint64_t associated type witness table accessor for Strideable.Stride : Comparable in Half()
{
  return MEMORY[0x263F8D5F0];
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in Half()
{
  return MEMORY[0x263F8D620];
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in Half()
{
  return MEMORY[0x263F8E618];
}

uint64_t sub_23AA8C180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color3, (uint64_t (*)(uint64_t))Color3.red.getter);
}

uint64_t sub_23AA8C1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color3);
}

uint64_t sub_23AA8C1C8()
{
  return 24;
}

__n128 sub_23AA8C1D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color3, (uint64_t (*)(uint64_t))Color3.green.getter);
}

uint64_t keypath_getTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = a4(0, *(void *)(a3 + a2 - 24), *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t sub_23AA8C26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color3);
}

uint64_t keypath_setTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void, void))
{
  return specialized Color3.red.setter(a1);
}

uint64_t sub_23AA8C2E0()
{
  return 24;
}

__n128 sub_23AA8C2EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color3, (uint64_t (*)(uint64_t))Color3.blue.getter);
}

uint64_t sub_23AA8C32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color3);
}

uint64_t sub_23AA8C348()
{
  return 24;
}

__n128 sub_23AA8C354(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C368(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return key path getter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color3, Color3.subscript.getter);
}

uint64_t sub_23AA8C3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color3);
}

uint64_t sub_23AA8C3D4()
{
  return 24;
}

__n128 sub_23AA8C3E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.red.getter);
}

uint64_t sub_23AA8C420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color4);
}

uint64_t sub_23AA8C43C()
{
  return 24;
}

__n128 sub_23AA8C448(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.green.getter);
}

uint64_t sub_23AA8C488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color4);
}

uint64_t sub_23AA8C4A4()
{
  return 24;
}

__n128 sub_23AA8C4B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.blue.getter);
}

uint64_t sub_23AA8C4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color4);
}

uint64_t sub_23AA8C50C()
{
  return 24;
}

__n128 sub_23AA8C518(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.alpha.getter);
}

uint64_t sub_23AA8C558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color4);
}

uint64_t sub_23AA8C574()
{
  return 24;
}

__n128 sub_23AA8C580(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23AA8C594(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return key path getter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, (uint64_t (*)(void, void, void, void))type metadata accessor for Color4, (uint64_t (*)(uint64_t, uint64_t))Color4.subscript.getter);
}

uint64_t sub_23AA8C5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, a4, (void (*)(void, void, void, void))type metadata accessor for Color4);
}

uint64_t sub_23AA8C600()
{
  return 24;
}

__n128 sub_23AA8C60C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

double sub_23AA8C620@<D0>(uint64_t a1@<X0>, void *a2@<X1>, double *a3@<X8>)
{
  double result = *(double *)(a1 + 8 * (*a2 & 0xFLL));
  *a3 = result;
  return result;
}

double sub_23AA8C634(double *a1, uint64_t a2, unsigned int *a3)
{
  double result = *a1;
  *(double *)(a2 + 8 * *a3) = *a1;
  return result;
}

uint64_t sub_23AA8C644()
{
  return 0;
}

uint64_t sub_23AA8C654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t))TexCoord2.x.getter);
}

uint64_t sub_23AA8C680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord2);
}

uint64_t sub_23AA8C69C()
{
  return 16;
}

__n128 sub_23AA8C6A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8C6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t))TexCoord2.y.getter);
}

uint64_t keypath_get_52Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = a4(0, *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t sub_23AA8C730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord2);
}

uint64_t keypath_set_53Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void))
{
  return specialized TexCoord2.x.setter(a1);
}

uint64_t sub_23AA8C7A0()
{
  return 16;
}

__n128 sub_23AA8C7AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8C7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t))TexCoord2.z.getter);
}

uint64_t sub_23AA8C7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord2);
}

uint64_t sub_23AA8C800()
{
  return 16;
}

__n128 sub_23AA8C80C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8C818(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_64Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t, uint64_t))TexCoord2.subscript.getter);
}

uint64_t sub_23AA8C844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord2);
}

uint64_t sub_23AA8C85C()
{
  return 16;
}

__n128 sub_23AA8C868(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8C874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t))TexCoord3.x.getter);
}

uint64_t sub_23AA8C8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord3);
}

uint64_t sub_23AA8C8BC()
{
  return 16;
}

__n128 sub_23AA8C8C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8C8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t))TexCoord3.y.getter);
}

uint64_t sub_23AA8C900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord3);
}

uint64_t sub_23AA8C91C()
{
  return 16;
}

__n128 sub_23AA8C928(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8C934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t))TexCoord3.z.getter);
}

uint64_t sub_23AA8C960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord3);
}

uint64_t sub_23AA8C97C()
{
  return 16;
}

__n128 sub_23AA8C988(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8C994(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_64Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t, uint64_t))TexCoord3.subscript.getter);
}

uint64_t keypath_get_64Tm(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a4(0, *(uint64_t *)((char *)a2 + a3 - 16), *(uint64_t *)((char *)a2 + a3 - 8));
  return a5(v6, v7);
}

uint64_t sub_23AA8CA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for TexCoord3);
}

uint64_t keypath_set_65Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void))
{
  return specialized TexCoord3.subscript.setter(a1);
}

uint64_t sub_23AA8CA90()
{
  return 16;
}

__n128 sub_23AA8CA9C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Point3, (uint64_t (*)(uint64_t))Point3.x.getter);
}

uint64_t sub_23AA8CAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Point3);
}

uint64_t sub_23AA8CAF0()
{
  return 16;
}

__n128 sub_23AA8CAFC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Point3, (uint64_t (*)(uint64_t))Point3.y.getter);
}

uint64_t sub_23AA8CB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Point3);
}

uint64_t sub_23AA8CB50()
{
  return 16;
}

__n128 sub_23AA8CB5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Point3, (uint64_t (*)(uint64_t))Point3.z.getter);
}

uint64_t sub_23AA8CB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Point3);
}

uint64_t sub_23AA8CBB0()
{
  return 16;
}

__n128 sub_23AA8CBBC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CBC8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_64Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Point3, Point3.subscript.getter);
}

uint64_t sub_23AA8CBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Point3);
}

uint64_t sub_23AA8CC0C()
{
  return 16;
}

__n128 sub_23AA8CC18(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Vector3, (uint64_t (*)(uint64_t))Vector3.x.getter);
}

uint64_t sub_23AA8CC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Vector3);
}

uint64_t sub_23AA8CC6C()
{
  return 16;
}

__n128 sub_23AA8CC78(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Vector3, (uint64_t (*)(uint64_t))Vector3.y.getter);
}

uint64_t sub_23AA8CCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Vector3);
}

uint64_t sub_23AA8CCCC()
{
  return 16;
}

__n128 sub_23AA8CCD8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Vector3, (uint64_t (*)(uint64_t))Vector3.z.getter);
}

uint64_t sub_23AA8CD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Vector3);
}

uint64_t sub_23AA8CD2C()
{
  return 16;
}

__n128 sub_23AA8CD38(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CD44(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_64Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Vector3, (uint64_t (*)(uint64_t, uint64_t))Vector3.subscript.getter);
}

uint64_t sub_23AA8CD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Vector3);
}

uint64_t sub_23AA8CD88()
{
  return 16;
}

__n128 sub_23AA8CD94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Normal3, (uint64_t (*)(uint64_t))Normal3.x.getter);
}

uint64_t sub_23AA8CDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Normal3);
}

uint64_t sub_23AA8CDE8()
{
  return 16;
}

__n128 sub_23AA8CDF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Normal3, (uint64_t (*)(uint64_t))Normal3.y.getter);
}

uint64_t sub_23AA8CE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Normal3);
}

uint64_t sub_23AA8CE48()
{
  return 16;
}

__n128 sub_23AA8CE54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_52Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Normal3, (uint64_t (*)(uint64_t))Normal3.z.getter);
}

uint64_t sub_23AA8CE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_53Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Normal3);
}

uint64_t sub_23AA8CEA8()
{
  return 16;
}

__n128 sub_23AA8CEB4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CEC0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_64Tm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Normal3, (uint64_t (*)(uint64_t, uint64_t))Normal3.subscript.getter);
}

uint64_t sub_23AA8CEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, (void (*)(void, void, void))type metadata accessor for Normal3);
}

uint64_t sub_23AA8CF04()
{
  return 16;
}

__n128 sub_23AA8CF10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA8CF24()
{
  return 16;
}

__n128 sub_23AA8CF30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static CGFloatConvertable.from(cgFloat:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CGFloatConvertable.toCGFloat.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata instantiation function for Color3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for Color3()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Color3(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for Color3(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Color3(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        float v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for Color3(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x23AA8D778);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t dispatch thunk of ColorProtocol.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ColorProtocol.components.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata completion function for ManagedColor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ManagedColor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = *(void **)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = v10;
    id v11 = v10;
  }
  return v4;
}

void destroy for ManagedColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void **)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t initializeWithCopy for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  id v9 = *v7;
  void *v7 = v8;
  id v10 = v8;

  return a1;
}

uint64_t initializeWithTake for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = *v7;
  void *v7 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedColor(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x23AA8DD28);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ManagedColor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x23AA8DF28);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          __n128 v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *__n128 v18 = 0;
            *(_DWORD *)__n128 v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *__n128 v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for Frame4D()
{
  return &type metadata for Frame4D;
}

uint64_t type metadata instantiation function for TexCoord2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for TexCoord2()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TexCoord2(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for TexCoord2(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TexCoord2(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        unsigned int v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for TexCoord2(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x23AA8E75CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

ValueMetadata *type metadata accessor for Half()
{
  return &type metadata for Half;
}

uint64_t dispatch thunk of static HalfSIMDStorageSize.get.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize2()
{
  return &type metadata for HalfSIMDStorageSize2;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize4()
{
  return &type metadata for HalfSIMDStorageSize4;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize8()
{
  return &type metadata for HalfSIMDStorageSize8;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize16()
{
  return &type metadata for HalfSIMDStorageSize16;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize32()
{
  return &type metadata for HalfSIMDStorageSize32;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize64()
{
  return &type metadata for HalfSIMDStorageSize64;
}

uint64_t type metadata accessor for HalfSIMDStorage()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for Half.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA8E8BCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Half.CodingKeys()
{
  return &unk_26EE10B30;
}

uint64_t specialized Half.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x69796C7265646E75 && a2 == 0xEF65756C6156676ELL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t specialized Half.CodingKeys.stringValue.getter()
{
  return 0x69796C7265646E75;
}

uint64_t __RKEntityMoveEase.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v14 = 0;
LABEL_13:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v14, 1);
    goto LABEL_14;
  }
  char v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_12:
    uint64_t v14 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_13;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_12;
  }
  unsigned int v7 = (void *)v6;

  swift_release();
  size_t v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v18._uint64_t countAndFlagsBits = v9;
  v18._object = v11;
  if (specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v18) == 4)
  {
LABEL_14:
    lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  switch(v12)
  {
    case 1:
    case 2:
    case 3:
      int v13 = (unsigned int *)MEMORY[0x263F16250];
      break;
    default:
      int v13 = (unsigned int *)MEMORY[0x263F16248];
      break;
  }
  uint64_t v16 = *v13;
  uint64_t v17 = type metadata accessor for __RKEntityMoveEase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(a1, v16, v17);
}

uint64_t __RKEntityMoveEaseType.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v14 = 0;
LABEL_13:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v14, 1);
    goto LABEL_14;
  }
  char v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_12:
    uint64_t v14 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_13;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_12;
  }
  unsigned int v7 = (void *)v6;

  swift_release();
  size_t v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v18._uint64_t countAndFlagsBits = v9;
  v18._object = v11;
  if (specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v18) == 4)
  {
LABEL_14:
    lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  switch(v12)
  {
    case 2:
      int v13 = (unsigned int *)MEMORY[0x263F16288];
      break;
    case 3:
      int v13 = (unsigned int *)MEMORY[0x263F16278];
      break;
    default:
      int v13 = (unsigned int *)MEMORY[0x263F16280];
      break;
  }
  uint64_t v16 = *v13;
  uint64_t v17 = type metadata accessor for __RKEntityMoveEaseType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(a1, v16, v17);
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

unint64_t specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEaseTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEase.MoveEaseLoadingError()
{
  return &type metadata for __RKEntityMoveEase.MoveEaseLoadingError;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityMoveEase.MoveEaseLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA8F278);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  return &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
}

void one-time initialization function for OutputName(uint64_t a1)
{
}

uint64_t static EntityBuilder.OutputName.getter()
{
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v0 = static EntityBuilder.OutputName;
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for OutputIdentifier(uint64_t a1)
{
}

void one-time initialization function for OutputName(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, void *a4)
{
  uint64_t v6 = (void *)a2();
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *a3 = v7;
  *a4 = v9;
}

uint64_t EntityBuilder.deinit()
{
  unint64_t v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return v0;
}

uint64_t EntityBuilder.__deallocating_deinit()
{
  unint64_t v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return swift_deallocClassInstance();
}

uint64_t EntityProxy.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity;
  __AssetRef.__as<A>(_:)();
  RERelease();
  uint64_t v3 = type metadata accessor for __EntityRef();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t EntityProxy.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity;
  __AssetRef.__as<A>(_:)();
  RERelease();
  uint64_t v2 = type metadata accessor for __EntityRef();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t EntityProxy.coreEntityRef.getter()
{
  __AssetRef.__as<A>(_:)();
  return v1;
}

uint64_t EntityProxy.name.getter()
{
  return String.init(cString:)();
}

uint64_t EntityProxy.parent.getter()
{
  uint64_t v0 = type metadata accessor for __EntityRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x263F8DD08];
  __AssetRef.__as<A>(_:)();
  uint64_t Parent = REEntityGetParent();
  if (!Parent) {
    return 0;
  }
  uint64_t v6 = Parent;
  type metadata accessor for EntityProxy();
  uint64_t v7 = swift_allocObject();
  v9[3] = v4;
  v9[0] = v6;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v7 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity, v3, v0);
  RERetain();
  return v7;
}

uint64_t type metadata accessor for EntityProxy()
{
  uint64_t result = type metadata singleton initialization cache for EntityProxy;
  if (!type metadata singleton initialization cache for EntityProxy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for EntityBuilder()
{
  return self;
}

uint64_t ObjC metadata update function for EntityProxy()
{
  return type metadata accessor for EntityProxy();
}

uint64_t type metadata completion function for EntityProxy()
{
  uint64_t result = type metadata accessor for __EntityRef();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for EntityProxy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EntityProxy);
}

uint64_t dispatch thunk of EntityProxy.coreEntityRef.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of EntityProxy.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of EntityProxy.parent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t EntityBuilder.generateSwiftOutput(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t OutputEntity = RIOBuilderEntityBuilderGetOutputEntity();
  if (OutputEntity)
  {
    void v11[2] = v2;
    v11[3] = a1;
    v11[4] = a2;
    v11[5] = MEMORY[0x270FA5388](OutputEntity);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = partial apply for closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:);
    *(void *)(v6 + 24) = v11;
    uint64_t v14 = partial apply for thunk for @callee_guaranteed () -> ();
    uint64_t v15 = v6;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v13 = thunk for @escaping @callee_guaranteed () -> ();
    *((void *)&v13 + 1) = &block_descriptor_21;
    uint64_t v7 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v7);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  swift_beginAccess();
  id v10 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (!v10) {
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v16, &aBlock);
  type metadata accessor for Outputs();
  swift_dynamicCast();
  long long aBlock = 0u;
  long long v13 = 0u;
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&aBlock, a1, a2);
  return swift_release();
}

uint64_t closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for __EntityRef();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v12 = objc_getAssociatedObject(a1, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v17, &v18);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    uint64_t v14 = type metadata accessor for EntityProxy();
    uint64_t v15 = swift_allocObject();
    uint64_t v19 = MEMORY[0x263F8DD08];
    *(void *)&long long v18 = a4;
    swift_bridgeObjectRetain();
    static __EntityRef.__fromCore(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity, v11, v8);
    RERetain();
    uint64_t v19 = v14;
    *(void *)&long long v18 = v15;
    Outputs.subscript.setter((uint64_t)&v18, a2, a3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:)()
{
  return closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_23AA8FDCC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t __RKEntityEmphasisAnimationType.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v5 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v5 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v14 = 0;
LABEL_12:
    v16[1] = v14;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v14, 1);
    goto LABEL_13;
  }
  uint64_t v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v7 = RIOPxrUsdAttributeCopyValue();
  if (!v7)
  {
LABEL_11:
    uint64_t v14 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  uint64_t v8 = (void *)v7;
  uint64_t v9 = RIOPxrVtValueCopyToken();
  if (!v9)
  {

    goto LABEL_11;
  }
  uint64_t v10 = (void *)v9;

  swift_release();
  int v11 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v10, 0);
  __RKEntityEmphasisAnimationType.init(rawValue:)();
  uint64_t v12 = type metadata accessor for __RKEntityEmphasisAnimationType();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v4, 1, v12) == 1)
  {
    outlined destroy of __RKEntityEmphasisAnimationType?((uint64_t)v4);
LABEL_13:
    lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v4, v12);
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

uint64_t outlined destroy of __RKEntityEmphasisAnimationType?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA90204);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
}

uint64_t specialized static ColorSpaces.ocioName(fromCGColor:)(CGColor *a1)
{
  unint64_t v1 = CGColorGetColorSpace(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    int v3 = (__CFString *)CGColorSpaceCopyName(v1);

    if (v3)
    {
      id v4 = (id)MEMORY[0x23ECBB2A0](v3);
      if (v4)
      {
        id v5 = v4;
        static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      }
    }
  }
  return 0;
}

uint64_t one-time initialization function for rioAudio()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.rioAudio);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.rioAudio);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:)(__n128 a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  __n128 v19 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  __RKEntityForceActionArguments.init(target:force:velocity:)();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x263F163A0], v10);
  unint64_t v14 = *a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, v14);
    *a4 = v14;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v14);
    *a4 = v14;
  }
  *(void *)(v14 + 16) = v17 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v17, v13, v10);
}

uint64_t specialized static ActionBuilder.generateImpulseActionSpecifications(inputs:)()
{
  uint64_t v0 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)v18);

  uint64_t v5 = swift_release();
  uint64_t v6 = (void *)v18[0];
  uint64_t v7 = v18[1];
  uint64_t v8 = v18[2];
  if (v19)
  {
    uint64_t v9 = v18[3];
    v17[1] = v18[0];
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Vector3<Double>, Object.Error>(v6, v7, v8, v9, 1);
    return MEMORY[0x263F8EE78];
  }
  else
  {
    v18[0] = MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](v5);
    v17[-4] = v18;
    *(_OWORD *)&v17[-2] = v11;
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:), (uint64_t)&v17[-6]);
    uint64_t v10 = v18[0];
    if (*(void *)(v18[0] + 16) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v12 = type metadata accessor for __RKEntityActionSpecification();
      uint64_t v13 = *(void *)(v12 - 8);
      unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_23AAB22A0;
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16310], v0);
      swift_bridgeObjectRetain();
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      (*(void (**)(unint64_t, void, uint64_t))(v13 + 104))(v15 + v14, *MEMORY[0x263F163A8], v12);
      swift_bridgeObjectRelease();
      return v15;
    }
  }
  return v10;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:)(*(__n128 *)(v2 + 32), a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t specialized Builder.generateOutputs()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.CoreReference);
  uint64_t result = swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v9, &v10);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    id v4 = (void *)RIOBuilderOutputsCreate();

    id v5 = (id)RIOBuilderOutputsGetSwiftObject();
    type metadata accessor for Outputs();
    if (v5)
    {
      uint64_t v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      uint64_t v6 = (uint64_t)Outputs.init(core:)((uint64_t)v4);
    }
    uint64_t v7 = (void *)v6;
    swift_beginAccess();
    swift_retain();
    objc_setAssociatedObject(v1, &static BuilderAssociatedKeys.OutputsReference, v7, (void *)1);
    swift_endAccess();

    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _BaseBuilder.deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return v0;
}

uint64_t _BaseBuilder.stageSubscription.getter()
{
  uint64_t v0 = (void *)RIOBuilderCopyDirtyStageSubscription();
  uint64_t v1 = (void *)RIOBuilderDirtyStageSubscriptionCopyDirtyStageDescriptors();
  type metadata accessor for RIOBuilderDirtyStageDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v4 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    unint64_t v8 = MEMORY[0x263F8EE78];
LABEL_12:
    uint64_t v9 = specialized Set.init<A>(_:)(v8);

    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  unint64_t v10 = v2;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x23ECBA630](v6, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * v6 + 32);
      }
      ++v6;
      specialized StageDirtyState.__allocating_init(core:)((uint64_t)v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v4 != v6);
    unint64_t v8 = v10;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

unint64_t _BaseBuilder.buildOrder.getter@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = RIOBuilderCopyBuildOrder();
  if (result >= 4)
  {
    type metadata accessor for RIOBuilderBuildOrder(0);
    unint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    *a1 = result;
  }
  return result;
}

uint64_t _BaseBuilder.inputDescriptors()()
{
  uint64_t v0 = (void *)RIOBuilderCopyInputsDescriptor();
  uint64_t v1 = (void *)RIOBuilderInputsDescriptorCopyInputDescriptors();
  *(void *)&long long v32 = 0;
  type metadata accessor for RIOBuilderInputDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v4 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
LABEL_17:
    uint64_t v25 = specialized Set.init<A>(_:)(v6);

    swift_bridgeObjectRelease();
    return v25;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v36 = v2;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = v36;
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = MEMORY[0x23ECBA630](v7, v3);
        static InputDescriptor.create(from:)(v8, (uint64_t)&v32);
        swift_unknownObjectRelease();
        long long v9 = v32;
        long long v10 = v33;
        long long v11 = v34;
        char v12 = v35;
        uint64_t v36 = v6;
        unint64_t v14 = *(void *)(v6 + 16);
        unint64_t v13 = *(void *)(v6 + 24);
        if (v14 >= v13 >> 1)
        {
          long long v28 = v33;
          long long v30 = v32;
          long long v26 = v34;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          long long v11 = v26;
          long long v10 = v28;
          long long v9 = v30;
          uint64_t v6 = v36;
        }
        ++v7;
        *(void *)(v6 + 16) = v14 + 1;
        uint64_t v15 = v6 + 56 * v14;
        *(_OWORD *)(v15 + 32) = v9;
        *(_OWORD *)(v15 + 48) = v10;
        *(_OWORD *)(v15 + 64) = v11;
        *(unsigned char *)(v15 + 80) = v12;
      }
      while (v4 != v7);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        id v17 = *(id *)(v3 + 8 * v16 + 32);
        static InputDescriptor.create(from:)((uint64_t)v17, (uint64_t)&v32);

        long long v18 = v32;
        long long v19 = v33;
        long long v20 = v34;
        char v21 = v35;
        uint64_t v36 = v6;
        unint64_t v23 = *(void *)(v6 + 16);
        unint64_t v22 = *(void *)(v6 + 24);
        if (v23 >= v22 >> 1)
        {
          long long v29 = v33;
          long long v31 = v32;
          long long v27 = v34;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          long long v20 = v27;
          long long v19 = v29;
          long long v18 = v31;
          uint64_t v6 = v36;
        }
        ++v16;
        *(void *)(v6 + 16) = v23 + 1;
        uint64_t v24 = v6 + 56 * v23;
        *(_OWORD *)(v24 + 32) = v18;
        *(_OWORD *)(v24 + 48) = v19;
        *(_OWORD *)(v24 + 64) = v20;
        *(unsigned char *)(v24 + 80) = v21;
      }
      while (v4 != v16);
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t _BaseBuilder.outputDescriptors()()
{
  uint64_t v0 = (void *)RIOBuilderCopyOutputsDescriptor();
  uint64_t v1 = (void *)RIOBuilderOutputsDescriptorCopyOutputDescriptors();
  type metadata accessor for RIOBuilderOutputDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v4 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v35 = specialized Set.init<A>(_:)(v2);

    swift_bridgeObjectRelease();
    return v35;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v36 = v0;
    uint64_t v37 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = 0;
      do
      {
        MEMORY[0x23ECBA630](v6, v3);
        uint64_t v7 = (void *)RIOBuilderOutputDescriptorCopyOutputName();
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v9;

        long long v11 = (void *)RIOBuilderOutputDescriptorCopyOutputIdentifier();
        char v12 = (void *)RIOPxrTfTokenCopyString();
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        uint64_t v16 = RIOBuilderOutputDescriptorCopyOptionality();
        swift_unknownObjectRelease();
        unint64_t v18 = *(void *)(v2 + 16);
        unint64_t v17 = *(void *)(v2 + 24);
        if (v18 >= v17 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        }
        ++v6;
        *(void *)(v2 + 16) = v18 + 1;
        uint64_t v19 = v2 + 40 * v18;
        *(void *)(v19 + 32) = v8;
        *(void *)(v19 + 40) = v10;
        *(void *)(v19 + 48) = v13;
        *(void *)(v19 + 56) = v15;
        *(unsigned char *)(v19 + 64) = v16 == 0;
        uint64_t v3 = v37;
      }
      while (v4 != v6);
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        id v21 = *(id *)(v3 + 8 * v20 + 32);
        unint64_t v22 = (void *)RIOBuilderOutputDescriptorCopyOutputName();
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        long long v26 = (void *)RIOBuilderOutputDescriptorCopyOutputIdentifier();
        long long v27 = (void *)RIOPxrTfTokenCopyString();
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;

        uint64_t v31 = RIOBuilderOutputDescriptorCopyOptionality();
        unint64_t v33 = *(void *)(v2 + 16);
        unint64_t v32 = *(void *)(v2 + 24);
        if (v33 >= v32 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        }
        ++v20;
        *(void *)(v2 + 16) = v33 + 1;
        uint64_t v34 = v2 + 40 * v33;
        *(void *)(v34 + 32) = v23;
        *(void *)(v34 + 40) = v25;
        *(void *)(v34 + 48) = v28;
        *(void *)(v34 + 56) = v30;
        *(unsigned char *)(v34 + 64) = v31 == 0;
        uint64_t v3 = v37;
      }
      while (v4 != v20);
    }
    swift_bridgeObjectRelease();
    uint64_t v0 = v36;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t _BaseBuilder.clear(inputs:)()
{
  return RIOBuilderSetSwiftObject();
}

uint64_t _BaseBuilder.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return swift_deallocClassInstance();
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x23ECBA630](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x23ECBA630](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for TimelineBuilder.Error;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _BaseBuilder()
{
  return self;
}

uint64_t method lookup function for _BaseBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _BaseBuilder);
}

uint64_t dispatch thunk of _BaseBuilder.stageSubscription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of _BaseBuilder.buildOrder.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of _BaseBuilder.inputDescriptors()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of _BaseBuilder.outputDescriptors()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of _BaseBuilder.run(inputs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of _BaseBuilder.clear(inputs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t specialized static _BaseBuilder.create(from:)(void *a1)
{
  id v2 = (id)RIOBuilderGetSwiftObject();
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = (uint64_t)v2;
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_7:
    id v5 = (void *)RIOBuilderCopyIdentifier();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    if (static _CFObject.== infix(_:_:)())
    {
      type metadata accessor for EntityBuilder();
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = a1;
      swift_beginAccess();
      id v6 = a1;
      uint64_t v7 = (void *)swift_retain();
      objc_setAssociatedObject(v7, &static BuilderAssociatedKeys.CoreReference, v6, (void *)1);
      swift_endAccess();
      swift_release();
      RIOBuilderSetSwiftObject();
      swift_retain();
      specialized Builder.generateOutputs()();
      swift_release();
    }
    else
    {

      return 0;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Path.string.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t SceneDescriptionFoundations.Path.parentPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCopyParentPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.isEmpty.getter()
{
  return RIOPxrSdfPathIsEmpty();
}

uint64_t SceneDescriptionFoundations.AssetPath.string.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

void *SceneDescriptionFoundations.AssetPath.referencedData.getter()
{
  id v1 = *v0;
  id v2 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)RIOPxrUtilsCopyCFDataWithArAssetPath();
  swift_release();
  if (v3)
  {
    id v4 = v3;
    uint64_t v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error();
    swift_allocError();
    swift_willThrow();
  }
  return v3;
}

Swift::String __swiftcall SceneDescriptionFoundations.Path.name()()
{
  uint64_t v0 = (void *)RIOPxrSdfPathCopyName();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  uint64_t v4 = v1;
  id v5 = v3;
  result._object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

uint64_t static SceneDescriptionFoundations.Path.Empty.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateEmptyPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)(MEMORY[0x263F37828], a1);
}

uint64_t static SceneDescriptionFoundations.AssetPath.Empty.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfAssetPathCreateEmptyPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)(MEMORY[0x263F37768], a1);
}

uint64_t SceneDescriptionFoundations.Path.init(string:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(string:)(MEMORY[0x263F37828], a1);
}

uint64_t static SceneDescriptionFoundations.Path.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static SceneDescriptionFoundations.Path.== infix(_:_:)(a1, a2, type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

uint64_t SceneDescriptionFoundations.Path.isPropertyPath.getter()
{
  return RIOPxrSdfPathIsPropertyPath();
}

uint64_t SceneDescriptionFoundations.Path.isNamespacedPropertyPath.getter()
{
  return RIOPxrSdfPathIsNamespacedPropertyPath();
}

uint64_t SceneDescriptionFoundations.Path.primPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCopyPrimPath();
  *a1 = result;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Path.elementString()()
{
  uint64_t v0 = (void *)RIOPxrSdfPathCopyElementString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  uint64_t v4 = v1;
  id v5 = v3;
  result._object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t static SceneDescriptionFoundations.Path.< infix(_:_:)()
{
  return RIOPxrSdfPathIsLessThan();
}

uint64_t SceneDescriptionFoundations.Path.description.getter()
{
  return SceneDescriptionFoundations.Path.description.getter(MEMORY[0x263F37820]);
}

uint64_t SceneDescriptionFoundations.Path.debugDescription.getter()
{
  id v1 = *v0;
  id v2 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A687461503CLL;
}

void SceneDescriptionFoundations.Path.hash(into:)(uint64_t a1)
{
}

Swift::Int SceneDescriptionFoundations.Path.hashValue.getter()
{
  return SceneDescriptionFoundations.Path.hashValue.getter(type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, a4, type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.Path()
{
  id v1 = *v0;
  id v2 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(a1, a2, type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path(MEMORY[0x263F37828], a1);
}

uint64_t SceneDescriptionFoundations.Path.init(stringLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)(MEMORY[0x263F37828], a1);
}

uint64_t static SceneDescriptionFoundations.Path.AbsoluteRoot.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateAbsoluteRootPath();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.Path.ReflexiveRelative.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateReflexiveRelativePath();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall String.isIsValidPathIdentifier()()
{
  return String.isIsValidPathIdentifier()(v0, v1, MEMORY[0x263F37830]);
}

Swift::Bool __swiftcall String.isValidNamespacedPathIdentifier()()
{
  return String.isIsValidPathIdentifier()(v0, v1, MEMORY[0x263F37838]);
}

Swift::Bool __swiftcall String.isValidPath()()
{
  return String.isIsValidPathIdentifier()(v0, v1, MEMORY[0x263F37840]);
}

uint64_t String.isIsValidPathIdentifier()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = String.utf8CString.getter();
  uint64_t v5 = a3(v4 + 32);
  swift_release();
  return v5;
}

uint64_t SceneDescriptionFoundations.Path.pathElementCount.getter()
{
  return MEMORY[0x270F22388](*v0);
}

uint64_t SceneDescriptionFoundations.Path.isAbsolutePath.getter()
{
  return RIOPxrSdfPathIsAbsolutePath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimPath.getter()
{
  return RIOPxrSdfPathIsPrimPath();
}

uint64_t SceneDescriptionFoundations.Path.isAbsoluteRootOrPrimPath.getter()
{
  return RIOPxrSdfPathIsAbsoluteRootOrPrimPath();
}

uint64_t SceneDescriptionFoundations.Path.isRootPrimPath.getter()
{
  return RIOPxrSdfPathIsRootPrimPath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimPropertyPath.getter()
{
  return RIOPxrSdfPathIsPrimPropertyPath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimVariantSelectionPath.getter()
{
  return RIOPxrSdfPathIsPrimVariantSelectionPath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimOrPrimVariantSelectionPath.getter()
{
  return RIOPxrSdfPathIsPrimOrPrimVariantSelectionPath();
}

uint64_t SceneDescriptionFoundations.Path.containsPrimVariantSelection.getter()
{
  return RIOPxrSdfPathContainsPrimVariantSelection();
}

uint64_t SceneDescriptionFoundations.Path.containsPropertyElements.getter()
{
  return RIOPxrSdfPathContainsPropertyElements();
}

uint64_t SceneDescriptionFoundations.Path.containsTargetPath.getter()
{
  return RIOPxrSdfPathContainsTargetPath();
}

uint64_t SceneDescriptionFoundations.Path.isRelationalAttributePath.getter()
{
  return RIOPxrSdfPathIsRelationalAttributePath();
}

uint64_t SceneDescriptionFoundations.Path.isTargetPath.getter()
{
  return RIOPxrSdfPathIsTargetPath();
}

uint64_t SceneDescriptionFoundations.Path.isMapperPath.getter()
{
  return RIOPxrSdfPathIsMapperPath();
}

uint64_t SceneDescriptionFoundations.Path.isMapperArgPath.getter()
{
  return RIOPxrSdfPathIsMapperArgPath();
}

uint64_t SceneDescriptionFoundations.Path.isExpressionPath.getter()
{
  return RIOPxrSdfPathIsExpressionPath();
}

uint64_t SceneDescriptionFoundations.Path.prefixes()()
{
  return SceneDescriptionFoundations.Path.prefixes()(MEMORY[0x263F37818]);
}

uint64_t SceneDescriptionFoundations.Path.targetPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCopyTargetPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.allTargetPathsRecursively()()
{
  return SceneDescriptionFoundations.Path.prefixes()(MEMORY[0x263F37810]);
}

uint64_t SceneDescriptionFoundations.Path.prefixes()(uint64_t (*a1)(void))
{
  id v2 = (void *)a1(*v1);
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v5 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v3;
    if ((v4 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        uint64_t v9 = MEMORY[0x23ECBA630](i, v4);
        unint64_t v11 = *(void *)(v7 + 16);
        unint64_t v10 = *(void *)(v7 + 24);
        if (v11 >= v10 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        }
        *(void *)(v7 + 16) = v11 + 1;
        *(void *)(v7 + 8 * v11 + 32) = v9;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v5; ++j)
      {
        unint64_t v13 = *(void *)(v3 + 16);
        unint64_t v14 = *(void *)(v3 + 24);
        id v15 = *(id *)(v4 + 8 * j + 32);
        if (v13 >= v14 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
        }
        *(void *)(v3 + 16) = v13 + 1;
        *(void *)(v3 + 8 * v13 + 32) = v15;
      }
    }
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

Swift::tuple_String_String __swiftcall SceneDescriptionFoundations.Path.variantSelection()()
{
  uint64_t v0 = (void *)RIOPxrSdfPathCopyVariantSelection();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v1 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(MEMORY[0x263F8EE78] + 32);
    unint64_t v3 = *(void *)(MEMORY[0x263F8EE78] + 40);
    uint64_t v4 = MEMORY[0x263F8EE78] + 32 + 16 * v1;
    uint64_t v5 = *(void *)(v4 - 16);
    unint64_t v6 = *(void *)(v4 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v2 = 0;
    unint64_t v6 = 0xE000000000000000;
    unint64_t v3 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v2;
  uint64_t v8 = (void *)v3;
  uint64_t v9 = v5;
  unint64_t v10 = (void *)v6;
  result._1._object = v10;
  result._1._uint64_t countAndFlagsBits = v9;
  result._0._object = v8;
  result._0._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.primOrPrimVariantSelectionPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCopyPrimOrPrimVariantSelectionPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.absoluteRootOrPrimPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCopyAbsoluteRootOrPrimPath();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Path.hasPrefix(_:)(Swift::String a1)
{
  String.utf8CString.getter();
  uint64_t v1 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  char HasPrefix = RIOPxrSdfPathHasPrefix();

  return HasPrefix;
}

uint64_t SceneDescriptionFoundations.Path.hasPrefix(_:)()
{
  return RIOPxrSdfPathHasPrefix();
}

void SceneDescriptionFoundations.Path.replaceName(_:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyReplacingName = RIOPxrSdfPathCreateCopyReplacingName();

  *uint64_t v0 = (void *)CopyReplacingName;
}

uint64_t SceneDescriptionFoundations.Path.replacingName(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyReplacingName();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Path.stripAllVariantSelections()()
{
  uint64_t v1 = *v0;
  uint64_t CopyStrippingAllVariantSelections = RIOPxrSdfPathCreateCopyStrippingAllVariantSelections();

  *uint64_t v0 = (void *)CopyStrippingAllVariantSelections;
}

uint64_t SceneDescriptionFoundations.Path.strippingAllVariantSelections()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyStrippingAllVariantSelections();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.append(_:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyAppendingPath = RIOPxrSdfPathCreateCopyAppendingPath();

  *uint64_t v0 = (void *)CopyAppendingPath;
}

uint64_t SceneDescriptionFoundations.Path.appending(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingPath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendChild(_:)()
{
  uint64_t v1 = *v0;
  CopyAppendinguint64_t Child = RIOPxrSdfPathCreateCopyAppendingChild();

  *uint64_t v0 = (void *)CopyAppendingChild;
}

uint64_t SceneDescriptionFoundations.Path.appendingChild(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingChild();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendProperty(_:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyAppendingProperty = RIOPxrSdfPathCreateCopyAppendingProperty();

  *uint64_t v0 = (void *)CopyAppendingProperty;
}

uint64_t SceneDescriptionFoundations.Path.appendingProperty(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingProperty();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Path.appendVariantSelection(variantSet:variant:)(Swift::String variantSet, Swift::String variant)
{
  unint64_t v3 = *v2;
  String.utf8CString.getter();
  String.utf8CString.getter();
  CopyAppendingVariantSelectiouint64_t n = RIOPxrSdfPathCreateCopyAppendingVariantSelection();

  swift_release();
  swift_release();
  void *v2 = (void *)CopyAppendingVariantSelection;
}

uint64_t SceneDescriptionFoundations.Path.appendingVariantSelection(variantSet:variant:)@<X0>(uint64_t *a1@<X8>)
{
  String.utf8CString.getter();
  String.utf8CString.getter();
  CopyAppendingVariantSelectiouint64_t n = RIOPxrSdfPathCreateCopyAppendingVariantSelection();
  swift_release();
  uint64_t result = swift_release();
  *a1 = CopyAppendingVariantSelection;
  return result;
}

void SceneDescriptionFoundations.Path.appendTarget(_:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyAppendingTarget = RIOPxrSdfPathCreateCopyAppendingTarget();

  *uint64_t v0 = (void *)CopyAppendingTarget;
}

uint64_t SceneDescriptionFoundations.Path.appendingTarget(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingTarget();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendRelationalAttribute(_:)()
{
  uint64_t v1 = *v0;
  CopyAppendingRelationalid Attribute = RIOPxrSdfPathCreateCopyAppendingRelationalAttribute();

  *uint64_t v0 = (void *)CopyAppendingRelationalAttribute;
}

uint64_t SceneDescriptionFoundations.Path.appendingRelationalAttribute(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingRelationalAttribute();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.replaceTargetPath(_:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyReplacingTargetPath = RIOPxrSdfPathCreateCopyReplacingTargetPath();

  *uint64_t v0 = (void *)CopyReplacingTargetPath;
}

uint64_t SceneDescriptionFoundations.Path.replacingTargetPath(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyReplacingTargetPath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendMapper(_:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyAppendingMapper = RIOPxrSdfPathCreateCopyAppendingMapper();

  *uint64_t v0 = (void *)CopyAppendingMapper;
}

uint64_t SceneDescriptionFoundations.Path.appendingMapper(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingMapper();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendMapperArg(_:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyAppendingMapperArg = RIOPxrSdfPathCreateCopyAppendingMapperArg();

  *uint64_t v0 = (void *)CopyAppendingMapperArg;
}

uint64_t SceneDescriptionFoundations.Path.appendingMapperArg(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingMapperArg();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Path.appendExpression()()
{
  uint64_t v1 = *v0;
  CopyAppendingExpressiouint64_t n = RIOPxrSdfPathCreateCopyAppendingExpression();

  *uint64_t v0 = (void *)CopyAppendingExpression;
}

uint64_t SceneDescriptionFoundations.Path.appendingExpression()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingExpression();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendElement(_:)()
{
  uint64_t v1 = *v0;
  CopyAppendingElementTokeuint64_t n = RIOPxrSdfPathCreateCopyAppendingElementToken();

  *uint64_t v0 = (void *)CopyAppendingElementToken;
}

uint64_t SceneDescriptionFoundations.Path.appendingElement(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyAppendingElementToken();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.replacePrefix(_:with:fixTargetPaths:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyReplacingPrefix = RIOPxrSdfPathCreateCopyReplacingPrefix();

  *uint64_t v0 = (void *)CopyReplacingPrefix;
}

uint64_t SceneDescriptionFoundations.Path.replacingPrefix(_:with:fixTargetPaths:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyReplacingPrefix();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.commonPrefix(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCopyCommonPrefix();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.makeAbsolutePath(with:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyMakingAbsolutePath = RIOPxrSdfPathCreateCopyMakingAbsolutePath();

  *uint64_t v0 = (void *)CopyMakingAbsolutePath;
}

uint64_t SceneDescriptionFoundations.Path.makingAbsolutePath(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyMakingAbsolutePath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.makeRelativePath(with:)()
{
  uint64_t v1 = *v0;
  uint64_t CopyMakingRelativePath = RIOPxrSdfPathCreateCopyMakingRelativePath();

  *uint64_t v0 = (void *)CopyMakingRelativePath;
}

uint64_t SceneDescriptionFoundations.Path.makingRelativePath(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfPathCreateCopyMakingRelativePath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.removeCommonSuffix(_:stopAtRootPrim:)(void **a1)
{
  unint64_t v3 = *v1;
  uint64_t v4 = *a1;
  CopyRemovingCommonSuffix = (void *)RIOPxrSdfPathCreateCopyRemovingCommonSuffix();
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    id EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
    swift_bridgeObjectRelease();
    uint64_t v11 = RIOPxrSdfPathCreateEmptyPath();

    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id EmptyPath = *(id *)(v6 + 32);
      swift_bridgeObjectRelease();
      unint64_t v9 = v7 - 1;
      if (!__OFSUB__(v7, 1))
      {
        if ((v9 & 0x8000000000000000) == 0)
        {
          if (v9 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v10 = *(id *)(v6 + 32 + 8 * v9);
LABEL_9:
            uint64_t v11 = (uint64_t)v10;

            swift_bridgeObjectRelease();
LABEL_12:
            void *v1 = EmptyPath;
            *a1 = (void *)v11;
            return;
          }
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  id EmptyPath = (id)MEMORY[0x23ECBA630](0, v6);
  swift_bridgeObjectRelease();
  if (!__OFSUB__(v7, 1))
  {
    id v10 = (id)MEMORY[0x23ECBA630](v7 - 1, v6);
    goto LABEL_9;
  }
LABEL_19:
  __break(1u);
}

uint64_t SceneDescriptionFoundations.Path.removingCommonSuffix(_:stopAtRootPrim:)(uint64_t *a1, void *a2)
{
  CopyRemovingCommonSuffix = (void *)RIOPxrSdfPathCreateCopyRemovingCommonSuffix();
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
    uint64_t v18 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v18)
    {
LABEL_15:
      uint64_t v19 = (void *)v9[4];
      *a1 = (uint64_t)v19;
      uint64_t v20 = (void *)v9[v18 + 3];
      id v21 = v19;
      id v22 = v20;
      uint64_t result = swift_bridgeObjectRelease();
LABEL_19:
      *a2 = v22;
      return result;
    }
LABEL_18:
    uint64_t EmptyPath = RIOPxrSdfPathCreateEmptyPath();
    swift_bridgeObjectRelease();
    *a1 = EmptyPath;
    uint64_t result = RIOPxrSdfPathCreateEmptyPath();
    id v22 = (id)result;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        uint64_t v11 = MEMORY[0x23ECBA630](i, v6);
        unint64_t v13 = v9[2];
        unint64_t v12 = v9[3];
        if (v13 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        }
        void v9[2] = v13 + 1;
        v9[v13 + 4] = v11;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v7; ++j)
      {
        unint64_t v15 = v5[2];
        unint64_t v16 = v5[3];
        id v17 = *(id *)(v6 + 8 * j + 32);
        if (v15 >= v16 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
        }
        void v5[2] = v15 + 1;
        v5[v15 + 4] = v17;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = v9[2];
    if (v18) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.conciseRelativePaths()(uint64_t a1)
{
  return Array<A>.conciseRelativePaths()(a1, MEMORY[0x263F377F8]);
}

uint64_t Array<A>.removeDescendentPaths()()
{
  uint64_t v1 = Array<A>.removingDescendentPaths()(*v0);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
  return result;
}

uint64_t Array<A>.removingDescendentPaths()(uint64_t a1)
{
  return Array<A>.conciseRelativePaths()(a1, MEMORY[0x263F37808]);
}

uint64_t Array<A>.conciseRelativePaths()(uint64_t a1, uint64_t (*a2)(Class))
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for RIOPxrSdfPathRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2(isa);

  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        uint64_t v11 = MEMORY[0x23ECBA630](i, v6);
        unint64_t v13 = *(void *)(v9 + 16);
        unint64_t v12 = *(void *)(v9 + 24);
        if (v13 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        }
        *(void *)(v9 + 16) = v13 + 1;
        *(void *)(v9 + 8 * v13 + 32) = v11;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v7; ++j)
      {
        unint64_t v15 = *(void *)(v5 + 16);
        unint64_t v16 = *(void *)(v5 + 24);
        id v17 = *(id *)(v6 + 8 * j + 32);
        if (v15 >= v16 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
        }
        *(void *)(v5 + 16) = v15 + 1;
        *(void *)(v5 + 8 * v15 + 32) = v17;
      }
    }
    swift_bridgeObjectRelease();
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.removeAncestorPaths()()
{
  uint64_t v1 = Array<A>.removingAncestorPaths()(*v0);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
  return result;
}

uint64_t Array<A>.removingAncestorPaths()(uint64_t a1)
{
  return Array<A>.conciseRelativePaths()(a1, MEMORY[0x263F37800]);
}

uint64_t static SceneDescriptionFoundations.AssetPath.Error.== infix(_:_:)()
{
  return 1;
}

void SceneDescriptionFoundations.AssetPath.Error.hash(into:)()
{
}

Swift::Int SceneDescriptionFoundations.AssetPath.Error.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t static SceneDescriptionFoundations.AssetPath.< infix(_:_:)()
{
  return RIOPxrSdfAssetPathIsLessThan();
}

uint64_t SceneDescriptionFoundations.AssetPath.description.getter()
{
  id v1 = *v0;
  uint64_t v2 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t SceneDescriptionFoundations.AssetPath.assetPath.getter()
{
  return SceneDescriptionFoundations.Path.description.getter(MEMORY[0x263F37760]);
}

uint64_t SceneDescriptionFoundations.Path.description.getter(uint64_t (*a1)(void))
{
  id v3 = *v1;
  uint64_t v4 = (void *)a1();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t SceneDescriptionFoundations.AssetPath.debugDescription.getter()
{
  id v1 = *v0;
  strcpy((char *)v10, "<AssetPath: ");
  id v2 = v1;
  id v3 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v10[0];
}

uint64_t static SceneDescriptionFoundations.AssetPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static SceneDescriptionFoundations.Path.== infix(_:_:)(a1, a2, type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
}

uint64_t static SceneDescriptionFoundations.Path.== infix(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  return static _CFObject.== infix(_:_:)() & 1;
}

void SceneDescriptionFoundations.AssetPath.hash(into:)(uint64_t a1)
{
}

void SceneDescriptionFoundations.Path.hash(into:)(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  Swift::String v7 = *v4;
  a2(0);
  _sSo16RIOPxrSdfPathRefaAB14CoreFoundation9_CFObjectSCWlTm_0(a3, a4);
  id v8 = v7;
  _CFObject.hash(into:)();
}

Swift::Int SceneDescriptionFoundations.AssetPath.hashValue.getter()
{
  return SceneDescriptionFoundations.Path.hashValue.getter(type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
}

Swift::Int SceneDescriptionFoundations.Path.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  Swift::String v7 = *v3;
  Hasher.init(_seed:)();
  a1(0);
  _sSo16RIOPxrSdfPathRefaAB14CoreFoundation9_CFObjectSCWlTm_0(a2, a3);
  id v8 = v7;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, a4, type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.AssetPath()
{
  id v1 = *v0;
  id v2 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(a1, a2, type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  uint64_t v9 = *v5;
  Hasher.init(_seed:)();
  a3(0);
  _sSo16RIOPxrSdfPathRefaAB14CoreFoundation9_CFObjectSCWlTm_0(a4, a5);
  id v10 = v9;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v9 = *v6;
  a4(0);
  _sSo16RIOPxrSdfPathRefaAB14CoreFoundation9_CFObjectSCWlTm_0(a5, a6);
  id v10 = v9;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  id v10 = *v6;
  Hasher.init(_seed:)();
  a4(0);
  _sSo16RIOPxrSdfPathRefaAB14CoreFoundation9_CFObjectSCWlTm_0(a5, a6);
  id v11 = v10;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.AssetPath@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path(MEMORY[0x263F37768], a1);
}

uint64_t SceneDescriptionFoundations.AssetPath.init(stringLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)(MEMORY[0x263F37768], a1);
}

uint64_t SceneDescriptionFoundations.Path.init(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1(v4 + 32);
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1(v4 + 32);
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.init(assetPath:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(string:)(MEMORY[0x263F37768], a1);
}

uint64_t SceneDescriptionFoundations.Path.init(string:)@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1(v4 + 32);
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.init(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.init(assetPath:resolvedPath:)@<X0>(uint64_t *a1@<X8>)
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.isEmpty.getter()
{
  return RIOPxrSdfAssetPathIsEmpty();
}

uint64_t SceneDescriptionFoundations.AssetPath.resolvedPath.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error);
  }
  return result;
}

void SceneDescriptionFoundations.AssetPath.dependencies.getter(void *a1@<X8>)
{
  uint64_t v2 = (void *)RIOPxrUsdUtilsCopyAllDependencies();
  uint64_t v3 = (void *)RIODependencyDescriptorCopyLayers();
  type metadata accessor for RIOPxrSdfLayerRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = (void *)RIODependencyDescriptorCopyAssets();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  Swift::String v7 = (void *)RIODependencyDescriptorCopyUnresolvedPaths();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  *a1 = v5;
  a1[1] = v4;
  a1[2] = v4;
}

void SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = *v3;
  id v8 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)RIOPxrArAssetCreate();
  uint64_t v10 = swift_release();
  if (v9)
  {
    unint64_t v16 = v9;
    MEMORY[0x270FA5388](v10);
    v14[2] = a3;
    v14[3] = v9;
    v14[4] = a1;
    v14[5] = a2;
    type metadata accessor for RIOPxrArAssetRef(0);
    uint64_t v12 = v11;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)partial apply for closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:), (uint64_t)v14, v12, v13, a3, MEMORY[0x263F8E4E0], (uint64_t)&v15);
  }
  else
  {
    lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t CFDataNoCopy = RIOPxrArAssetCreateCFDataNoCopy();
  if (CFDataNoCopy)
  {
    id v7 = (void *)CFDataNoCopy;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error();
  uint64_t v8 = swift_allocError();
  uint64_t result = swift_willThrow();
  *a5 = v8;
  return result;
}

uint64_t SceneDescriptionFoundations.Dependencies.layers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SceneDescriptionFoundations.Dependencies.assets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SceneDescriptionFoundations.Dependencies.unresolvedPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _sSo16RIOPxrSdfPathRefaAB14CoreFoundation9_CFObjectSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(uint64_t *a1)
{
  return closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(v1[3], v1[4], v1[5], v1[2], a1);
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath);
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Path()
{
  return &type metadata for SceneDescriptionFoundations.Path;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.AssetPath()
{
  return &type metadata for SceneDescriptionFoundations.AssetPath;
}

unsigned char *storeEnumTagSinglePayload for SceneDescriptionFoundations.AssetPath.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA949F8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.AssetPath.Error()
{
  return &type metadata for SceneDescriptionFoundations.AssetPath.Error;
}

uint64_t destroy for SceneDescriptionFoundations.Dependencies()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for SceneDescriptionFoundations.Dependencies(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SceneDescriptionFoundations.Dependencies(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SceneDescriptionFoundations.Dependencies(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneDescriptionFoundations.Dependencies(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneDescriptionFoundations.Dependencies(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Dependencies()
{
  return &type metadata for SceneDescriptionFoundations.Dependencies;
}

uint64_t SceneDescriptionFoundations.Reference.description.getter()
{
  id v1 = *v0;
  uint64_t v2 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 3944256;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  id v8 = v1;
  uint64_t result = RIOPxrSdfReferenceCopyPrimPath();
  if (result)
  {
    uint64_t v10 = (void *)result;

    id v11 = v10;
    uint64_t v12 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 62;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    return 64;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Reference.assetPath.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t SceneDescriptionFoundations.Reference.primPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfReferenceCopyPrimPath();
  if (result) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Reference.debugDescription.getter()
{
  strcpy((char *)v3, "<Reference: ");
  v0._uint64_t countAndFlagsBits = SceneDescriptionFoundations.Reference.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t static SceneDescriptionFoundations.Reference.< infix(_:_:)()
{
  return RIOPxrSdfReferenceIsLessThan();
}

uint64_t static SceneDescriptionFoundations.Reference.== infix(_:_:)()
{
  return RIOPxrSdfReferenceIsEqual();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsEqual();
}

void SceneDescriptionFoundations.Reference.hash(into:)()
{
  Swift::String v1 = *v0;
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int SceneDescriptionFoundations.Reference.hashValue.getter()
{
  Swift::String v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef()
{
  unint64_t result = lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef)
  {
    type metadata accessor for RIOPxrSdfReferenceRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Reference()
{
  Swift::String v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Reference()
{
  Swift::String v1 = *v0;
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Reference()
{
  Swift::String v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t SceneDescriptionFoundations.Reference.init(_:_:)@<X0>(void **a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath();

  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t SceneDescriptionFoundations.Reference.init(assetPath:primPath:)@<X0>(void **a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath();

  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

void key path getter for SceneDescriptionFoundations.Reference.assetPath : SceneDescriptionFoundations.Reference(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  uint64_t v4 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *a2 = v5;
  a2[1] = v7;
}

uint64_t key path setter for SceneDescriptionFoundations.Reference.assetPath : SceneDescriptionFoundations.Reference()
{
  String.utf8CString.getter();
  RIOPxrSdfReferenceSetAssetPath();
  return swift_release();
}

uint64_t SceneDescriptionFoundations.Reference.assetPath.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  RIOPxrSdfReferenceSetAssetPath();
  return swift_release();
}

uint64_t (*SceneDescriptionFoundations.Reference.assetPath.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  id v3 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return SceneDescriptionFoundations.Reference.assetPath.modify;
}

uint64_t SceneDescriptionFoundations.Reference.assetPath.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if (a2)
  {
    RIOPxrSdfReferenceSetAssetPath();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    RIOPxrSdfReferenceSetAssetPath();
  }
  return swift_release();
}

void key path getter for SceneDescriptionFoundations.Reference.primPath : SceneDescriptionFoundations.Reference(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  uint64_t v4 = RIOPxrSdfReferenceCopyPrimPath();
  if (v4)
  {
    uint64_t v5 = v4;

    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
}

void SceneDescriptionFoundations.Reference.primPath.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrSdfReferenceSetPrimPath();
}

void (*SceneDescriptionFoundations.Reference.primPath.modify(void (**a1)(id *a1)))(id *a1)
{
  a1[1] = v1;
  uint64_t result = (void (*)(id *))RIOPxrSdfReferenceCopyPrimPath();
  if (result)
  {
    *a1 = result;
    return SceneDescriptionFoundations.Reference.primPath.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SceneDescriptionFoundations.Reference.primPath.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrSdfReferenceSetPrimPath();
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference);
  }
  return result;
}

uint64_t sub_23AA9561C()
{
  return RIOPxrSdfReferenceSetPrimPath();
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Reference()
{
  return &type metadata for SceneDescriptionFoundations.Reference;
}

uint64_t closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:)(double a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  __n128 v28 = a3;
  long long v27 = a6;
  uint64_t v7 = type metadata accessor for __RKEntitySpinDirectionType();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a5, v11, v17);
  uint64_t v20 = v27;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F16330], v7);
  __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, *MEMORY[0x263F16388], v15);
  unint64_t v21 = *v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v20 = v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21);
    unint64_t *v20 = v21;
  }
  unint64_t v24 = *(void *)(v21 + 16);
  unint64_t v23 = *(void *)(v21 + 24);
  if (v24 >= v23 >> 1)
  {
    unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, v21);
    unint64_t *v20 = v21;
  }
  *(void *)(v21 + 16) = v24 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v21+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v24, v19, v15);
}

uint64_t specialized static ActionBuilder.generateSpinActionSpecifications(inputs:)()
{
  uint64_t v0 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v23);

  swift_release();
  uint64_t v5 = v23;
  if (v24 == 1)
  {
    __n128 v28 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v6 = v5;
LABEL_11:
    outlined consume of Result<Double, Object.Error>(v6, 1);
    return MEMORY[0x263F8EE78];
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v7 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v7 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v23);

  swift_release();
  uint64_t v8 = v23;
  if (v24 == 1)
  {
    __n128 v28 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v6 = v8;
    goto LABEL_11;
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v11 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v11 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v23);

  uint64_t v12 = swift_release();
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  uint64_t v15 = v25;
  if (v27)
  {
    uint64_t v16 = v26;
    __n128 v28 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Vector3<Double>, Object.Error>(v13, v14, v15, v16, 1);
    return MEMORY[0x263F8EE78];
  }
  unint64_t v23 = (void *)MEMORY[0x263F8EE78];
  MEMORY[0x270FA5388](v12);
  *(&v23 - 6) = v17;
  *(&v23 - 5) = v5;
  *(&v23 - 4) = v8;
  *((_OWORD *)&v23 - 1) = v18;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:), (uint64_t)(&v23 - 8));
  uint64_t v9 = v23;
  if (v23[2] >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v19 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v20 = *(void *)(v19 - 8);
    unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_23AAB22A0;
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16310], v0);
    swift_bridgeObjectRetain();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, void, uint64_t))(v20 + 104))(v22 + v21, *MEMORY[0x263F163A8], v19);
    swift_bridgeObjectRelease();
    return v22;
  }
  return (uint64_t)v9;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:)(*(double *)(v2 + 24), *(double *)(v2 + 32), *(__n128 *)(v2 + 48), a1, a2, *(unint64_t **)(v2 + 16));
}

void static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __RKAudioSpatialModeSelection();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityAudioActionType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v10 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v10 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    unint64_t v21 = 0;
LABEL_12:
    uint64_t v116 = (uint64_t)v21;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
LABEL_13:
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v21, 1);
    return;
  }
  uint64_t v114 = v7;
  id v11 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v12 = RIOPxrUsdAttributeCopyValue();
  if (!v12)
  {
LABEL_11:
    unint64_t v21 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  uint64_t v13 = (void *)v12;
  uint64_t v113 = v3;
  uint64_t v14 = RIOPxrVtValueCopyToken();
  if (!v14)
  {

    goto LABEL_11;
  }
  uint64_t v15 = (void *)v14;

  swift_release();
  uint64_t v16 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v20 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v20 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    unint64_t v21 = 0;
LABEL_23:
    uint64_t v116 = (uint64_t)v21;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v111 = v17;
  uint64_t v112 = v19;
  uint64_t v22 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v23 = RIOPxrUsdAttributeCopyValue();
  if (!v23)
  {
LABEL_22:
    unint64_t v21 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_23;
  }
  uint64_t v24 = (void *)v23;
  uint64_t v25 = RIOPxrVtValueCopyToken();
  if (!v25)
  {

    goto LABEL_22;
  }
  uint64_t v26 = (void *)v25;

  swift_release();
  char v27 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v26, 0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v30 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v30 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v116);

  swift_release();
  uint64_t v31 = (void *)v116;
  if (v117 == 1)
  {
    uint64_t v118 = v116;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<Double, Object.Error>(v31, 1);
    return;
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1) {
    id v32 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v32 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v33 = v32;
  LODWORD(v109) = RIOPxrUsdPrimHasAttribute();
  if (!v109)
  {

    swift_release();
    uint64_t v116 = 0;
    outlined copy of Object.Error(0);
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    uint64_t v35 = 0;
LABEL_42:
    outlined consume of Result<AnyAttribute, Object.Error>(v35, v109 ^ 1);
    return;
  }
  uint64_t v108 = v29;
  uint64_t v34 = RIOPxrUsdPrimCopyAttribute();

  swift_release();
  type metadata accessor for AnyAttribute();
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = v34;
  swift_retain();
  uint64_t EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue) {
    uint64_t EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  }
  uint64_t v37 = (void *)RIOPxrVtValueCopyAssetPath();

  if (!v37)
  {
    outlined consume of Result<AnyAttribute, Object.Error>(v35, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  char v38 = (void *)RIOPxrUsdAttributeCopyValue();
  if (!v38) {
    char v38 = (void *)RIOPxrVtValueCreateEmptyValue();
  }
  uint64_t v102 = v31;
  id v104 = v37;
  id v105 = v35;
  id v39 = (void *)RIOPxrVtValueCopyAssetPath();

  if (!v39)
  {
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  id v103 = v39;
  id v40 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v109 = v41;

  uint64_t v106 = swift_allocObject();
  *(_DWORD *)(v106 + 16) = 0;
  uint64_t v42 = *(void (**)(char *, void, uint64_t))(v114 + 104);
  v42(v9, *MEMORY[0x263F162F0], v6);
  uint64_t v43 = v111;
  uint64_t v44 = v112;
  if (v111 == 0x6573756170 && v112 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = (unsigned int *)MEMORY[0x263F16300];
    uint64_t v47 = v113;
    uint64_t v46 = v114;
  }
  else
  {
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v46 = v114;
    if (v48)
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = (unsigned int *)MEMORY[0x263F16300];
      uint64_t v47 = v113;
    }
    else if (v43 == 1886352499 && v44 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = (unsigned int *)MEMORY[0x263F162F8];
      uint64_t v47 = v113;
    }
    else
    {
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v47 = v113;
      if ((v49 & 1) == 0) {
        goto LABEL_51;
      }
      uint64_t v45 = (unsigned int *)MEMORY[0x263F162F8];
    }
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v6);
  v42(v9, *v45, v6);
LABEL_51:
  uint64_t v50 = *(void (**)(char *, void, uint64_t))(v47 + 104);
  v50(v5, *MEMORY[0x263F16338], v2);
  uint64_t v51 = v110;
  uint64_t v52 = v108;
  if (v110 == 0x6C616974617073 && v108 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v53 = (unsigned int *)MEMORY[0x263F16340];
LABEL_55:
    unint64_t v54 = v109;
LABEL_56:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v5, v2);
    uint64_t v55 = ((uint64_t (*)(char *, void, uint64_t))v50)(v5, *v53, v2);
    goto LABEL_57;
  }
  if (v51 == 0x69746170536E6F6ELL && v52 == 0xEA00000000006C61)
  {
    swift_bridgeObjectRelease();
    id v53 = (unsigned int *)MEMORY[0x263F16348];
    goto LABEL_55;
  }
  char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v55 = swift_bridgeObjectRelease();
  unint64_t v54 = v109;
  if (v101)
  {
    id v53 = (unsigned int *)MEMORY[0x263F16348];
    goto LABEL_56;
  }
LABEL_57:
  uint64_t v116 = 93;
  unint64_t v117 = 0xE100000000000000;
  MEMORY[0x270FA5388](v55);
  *(&v102 - 2) = &v116;
  uint64_t v56 = v107;
  specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)(&v102 - 4), v107, v54);
  if (v57)
  {
    swift_bridgeObjectRetain();
    uint64_t v65 = v56;
    unint64_t v67 = v54;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = String.subscript.getter();
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    swift_bridgeObjectRelease();
    uint64_t v65 = MEMORY[0x23ECB9FE0](v58, v60, v62, v64);
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();
  }
  uint64_t v68 = HIBYTE(v67) & 0xF;
  if ((v67 & 0x2000000000000000) == 0) {
    uint64_t v68 = v65 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v69 = v113;
  if (!v68)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v115) = static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v85 = swift_allocObject();
    *(_OWORD *)(v85 + 16) = xmmword_23AAB22A0;
    id v86 = v104;
    uint64_t v87 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v89 = v69;
    uint64_t v91 = v90;

    *(void *)(v85 + 56) = MEMORY[0x263F8D310];
    *(void *)(v85 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v85 + 32) = v88;
    *(void *)(v85 + 40) = v91;
    type metadata accessor for OS_os_log();
    uint64_t v92 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    id v93 = v105;
    outlined consume of Result<AnyAttribute, Object.Error>(v105, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v93, 0);

    (*(void (**)(char *, uint64_t))(v89 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v9, v6);
LABEL_79:
    swift_release();
    return;
  }
  uint64_t v111 = v65;
  id v70 = (id)RIOBuilderInputsGetImportSession();
  if (!v70) {
    goto LABEL_85;
  }
  uint64_t v71 = v70;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_86:
    __break(1u);
    return;
  }
  uint64_t v112 = SwiftObject;
  swift_retain();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v74 = MEMORY[0x23ECBB260](ServiceLocator);
  if (!v74)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v94 = v114;
    if (one-time initialization token for rioAudio != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    __swift_project_value_buffer(v95, (uint64_t)static Logger.rioAudio);
    os_log_type_t v96 = static os_log_type_t.error.getter();
    uint64_t v97 = Logger.logObject.getter();
    if (os_log_type_enabled(v97, v96))
    {
      uint64_t v98 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v98 = 0;
      _os_log_impl(&dword_23A99F000, v97, v96, "generateAudioActionSpecifications could not get an AssetManager.", v98, 2u);
      MEMORY[0x23ECBE8B0](v98, -1, -1);
    }

    id v99 = v105;
    outlined consume of Result<AnyAttribute, Object.Error>(v105, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v99, 0);
    swift_release();

    (*(void (**)(char *, uint64_t))(v69 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v9, v6);
    goto LABEL_79;
  }
  uint64_t v110 = v74;
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = 0;
  uint64_t v108 = v75 + 16;
  *(void *)(v75 + 24) = 0xE000000000000000;
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 24) = 0;
  *(void *)(v76 + 16) = 0;
  *(_WORD *)(v76 + 32) = -256;
  uint64_t v77 = (void *)swift_allocObject();
  unint64_t v78 = v109;
  v77[2] = v107;
  v77[3] = v78;
  v77[4] = v106;
  v77[5] = v76;
  uint64_t v79 = v111;
  v77[6] = v110;
  v77[7] = v79;
  uint64_t v80 = v115;
  v77[8] = v67;
  v77[9] = v80;
  v77[10] = a1;
  v77[11] = v75;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v81 = closure #3 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(a1, (uint64_t)partial apply for closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:), (uint64_t)v77, v76 + 16);
  uint64_t v116 = MEMORY[0x263F8EE78];
  if (v81)
  {
    uint64_t v115 = &v102;
    MEMORY[0x270FA5388](v81);
    *(&v102 - 6) = &v116;
    *(&v102 - 5) = (void *)v108;
    *(&v102 - 4) = v9;
    uint64_t v82 = v102;
    *(&v102 - 3) = v5;
    *(&v102 - 2) = v82;
    uint64_t v83 = v114;
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:), (uint64_t)(&v102 - 8));
    id v84 = v105;
    outlined consume of Result<AnyAttribute, Object.Error>(v105, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v84, 0);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    id v100 = v105;
    outlined consume of Result<AnyAttribute, Object.Error>(v105, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v100, 0);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    uint64_t v83 = v114;
  }
  (*(void (**)(char *, uint64_t))(v113 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v9, v6);
  swift_release();
}

void one-time initialization function for savedRef()
{
  static ActionBuilder.savedRef = MEMORY[0x263F8EE78];
}

void closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  String.utf8CString.getter();
  swift_beginAccess();
  uint64_t v13 = (void *)RIOPxrUtilsCopyCFDataWithArAssetPath();
  swift_endAccess();
  swift_release();
  if (!v13)
  {
    swift_beginAccess();
    uint64_t v39 = *(void *)(a4 + 16);
    uint64_t v40 = *(void *)(a4 + 24);
    *(void *)(a4 + 16) = a1;
    *(void *)(a4 + 24) = a2;
    uint64_t v41 = *(unsigned __int16 *)(a4 + 32);
    __int16 v42 = 256;
LABEL_16:
    *(_WORD *)(a4 + 32) = v42;
    outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(v39, v40, v41);
    swift_bridgeObjectRetain();
    return;
  }
  String.utf8CString.getter();
  uint64_t v14 = REAudioFileAssetCreateWithMappedDataNullable();
  swift_release();
  if (!v14)
  {

    swift_beginAccess();
    uint64_t v39 = *(void *)(a4 + 16);
    uint64_t v40 = *(void *)(a4 + 24);
    *(void *)(a4 + 16) = a1;
    *(void *)(a4 + 24) = a2;
    uint64_t v41 = *(unsigned __int16 *)(a4 + 32);
    __int16 v42 = 257;
    goto LABEL_16;
  }
  if (one-time initialization token for savedRef != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = (void *)static ActionBuilder.savedRef;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  static ActionBuilder.savedRef = (uint64_t)v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    static ActionBuilder.savedRef = (uint64_t)v15;
  }
  unint64_t v18 = v15[2];
  unint64_t v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v15);
    static ActionBuilder.savedRef = (uint64_t)v15;
  }
  v15[2] = v18 + 1;
  v15[v18 + 4] = v14;
  swift_endAccess();
  id v19 = (id)RIOBuilderInputsGetImportSession();
  if (!v19)
  {
    __break(1u);
    goto LABEL_18;
  }
  id v20 = v19;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_retain();
  swift_beginAccess();
  RIOImportSessionQueueAssetForLoad();
  swift_release();
  id v22 = (id)RIOBuilderInputsGetImportSession();
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = RIOImportSessionGetSwiftObject();

    if (v24)
    {
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v14;
      uint64_t v26 = (void **)(v24 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_retain();
      swift_beginAccess();
      char v27 = *v26;
      aBlock[4] = partial apply for closure #1 in closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      void aBlock[3] = &block_descriptor_18_0;
      uint64_t v28 = _Block_copy(aBlock);
      id v29 = v27;
      swift_retain();
      swift_release();
      RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue();
      _Block_release(v28);
      swift_release();
      swift_release();

      id v30 = (void *)REAssetHandleCopyAssetIdentifierString();
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      swift_beginAccess();
      *(void *)(a10 + 16) = v31;
      *(void *)(a10 + 24) = v33;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v35 = *(void *)(a10 + 16);
      uint64_t v34 = *(void *)(a10 + 24);
      swift_beginAccess();
      uint64_t v36 = *(void *)(a4 + 16);
      uint64_t v37 = *(void *)(a4 + 24);
      *(void *)(a4 + 16) = v35;
      *(void *)(a4 + 24) = v34;
      uint64_t v38 = *(unsigned __int16 *)(a4 + 32);
      *(_WORD *)(a4 + 32) = 0;
      swift_bridgeObjectRetain();
      outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(v36, v37, v38);
      return;
    }
    goto LABEL_20;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t closure #3 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  void v18[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v18[5] = v7;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed () -> ();
  v18[3] = &block_descriptor_22;
  uint64_t v8 = _Block_copy(v18);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    uint64_t v10 = *(unsigned __int16 *)(a4 + 16);
    if (v10 >> 8 <= 0xFE)
    {
      if ((v10 & 0x100) == 0) {
        return 1;
      }
      uint64_t v12 = *(void *)a4;
      id v11 = *(void **)(a4 + 8);
      outlined copy of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(v12, (uint64_t)v11, v10, 1);
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_23AAB22A0;
      uint64_t v14 = description.getter in AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(v12, v11, v10 & 1);
      uint64_t v16 = v15;
      *(void *)(v13 + 56) = MEMORY[0x263F8D310];
      *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v13 + 32) = v14;
      *(void *)(v13 + 40) = v16;
      type metadata accessor for OS_os_log();
      unint64_t v17 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(v12, (uint64_t)v11, v10);
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return result;
}

uint64_t description.getter in AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    _StringGuts.grow(_:)(72);
    unint64_t v6 = 0xD000000000000046;
    unint64_t v5 = 0x800000023AAB0AD0;
  }
  else
  {
    _StringGuts.grow(_:)(56);
    unint64_t v5 = 0x800000023AAB0B20;
    unint64_t v6 = 0xD000000000000036;
  }
  String.append(_:)(*(Swift::String *)&v6);
  v7._uint64_t countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  return 0;
}

uint64_t closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a6;
  uint64_t v38 = a3;
  uint64_t v34 = a5;
  uint64_t v31 = a2;
  uint64_t v32 = a4;
  uint64_t v6 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v33 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for __RKAudioSpatialModeSelection();
  uint64_t v8 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  id v29 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityAudioActionType();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v31, v14);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v34, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v29, v37, v30);
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v33, *MEMORY[0x263F16418], v36);
  swift_bridgeObjectRetain();
  id v22 = v38;
  __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x263F16398], v18);
  unint64_t v23 = *v22;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *id v22 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, v23);
    *id v22 = v23;
  }
  unint64_t v26 = *(void *)(v23 + 16);
  unint64_t v25 = *(void *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v23);
    *id v22 = v23;
  }
  *(void *)(v23 + 16) = v26 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v19 + 32))(v23+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v26, v21, v18);
}

id outlined copy of Object.Error(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

uint64_t sub_23AA97948()
{
  return MEMORY[0x270FA0238](v0, 20, 7);
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_23AA97A64()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23AA97A9C()
{
  uint64_t v1 = *(unsigned __int16 *)(v0 + 32);
  if (v1 >> 8 <= 0xFE) {
    outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(*(void *)(v0 + 16), *(void *)(v0 + 24), v1, BYTE1(v1) & 1);
  }
  return MEMORY[0x270FA0238](v0, 34, 7);
}

uint64_t outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return outlined consume of CompileSession.LoadError();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_23AA97AFC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 7);
}

void partial apply for closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)()
{
  closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11]);
}

uint64_t partial apply for closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_23AA97BA4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t outlined copy of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return outlined copy of CompileSession.LoadError();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (BYTE1(a3) != 255) {
    return outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(result, a2, a3, BYTE1(a3) & 1);
  }
  return result;
}

uint64_t sub_23AA97BF8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)()
{
  return MEMORY[0x270F1C7D8](*(void *)(v0 + 16));
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v5);
    type metadata accessor for EntityProxy();
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();
  swift_release();
  return 0;
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for [__RKEntityActionSpecification]);
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, void (*a2)(BOOL, uint64_t, uint64_t), uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v14 = MEMORY[0x263F8EE78];
  a2(0, v6, 0);
  uint64_t v7 = v14;
  if (v6)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v13);
      __swift_instantiateConcreteTypeFromMangledName(a3);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        a2(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v14;
      }
      unint64_t v10 = *(void *)(v7 + 16);
      unint64_t v9 = *(void *)(v7 + 24);
      if (v10 >= v9 >> 1)
      {
        a2(v9 > 1, v10 + 1, 1);
        uint64_t v7 = v14;
      }
      *(void *)(v7 + 16) = v10 + 1;
      *(void *)(v7 + 8 * v10 + 32) = v12;
      if (!--v6) {
        return v7;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v7;
}

void Inputs.createIBLAsset(on:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AssetRef?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v34 - v4;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue) {
    uint64_t EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  }
  uint64_t v11 = (void *)RIOPxrVtValueCopyAssetPath();

  if (!v11) {
    goto LABEL_6;
  }
  if (RIOPxrSdfAssetPathIsEmpty())
  {

LABEL_6:
    if (one-time initialization token for importTextures != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    return;
  }
  id v12 = v11;
  uint64_t v13 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v9;

  URL.init(fileURLWithPath:)();
  uint64_t v14 = v37;
  swift_bridgeObjectRelease();
  if (URL.pathExtension.getter() == 0x657974696C616572 && v15 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      id v18 = (id)RIOBuilderInputsGetImportSession();
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

        if (SwiftObject)
        {
          uint64_t ServiceLocator = REEngineGetServiceLocator();
          if (MEMORY[0x23ECBB260]() && MEMORY[0x23ECBB270](ServiceLocator))
          {
            if (RIOBuilderInputsCreateCubeMapTextureAsset())
            {
              REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable();

              (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
              return;
            }
            if (one-time initialization token for importTextures == -1) {
              goto LABEL_24;
            }
          }
          else if (one-time initialization token for importTextures == -1)
          {
LABEL_24:
            static os_log_type_t.error.getter();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            uint64_t v28 = swift_allocObject();
            *(_OWORD *)(v28 + 16) = xmmword_23AAB22A0;
            id v29 = v12;
            uint64_t v30 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
            uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v33 = v32;

            *(void *)(v28 + 56) = MEMORY[0x263F8D310];
            *(void *)(v28 + 64) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v28 + 32) = v31;
            *(void *)(v28 + 40) = v33;
            os_log(_:dso:log:type:_:)();

            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
            return;
          }
          swift_once();
          goto LABEL_24;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
  }
  type metadata accessor for EnvironmentResource();
  id v22 = v12;
  unint64_t v23 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static EnvironmentResource.__load(contentsOf:withName:)();
  swift_bridgeObjectRelease();
  dispatch thunk of EnvironmentResource.coreIBLAsset.getter();
  uint64_t v24 = type metadata accessor for __AssetRef();
  uint64_t v25 = *(void *)(v24 - 8);
  unint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v5, 1, v24);
  uint64_t v36 = v25;
  if (v27 == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for __AssetRef?);
  }
  else
  {
    uint64_t v35 = v7;
    __AssetRef.__as<A>(_:)();
    uint64_t v7 = v35;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v24);
    RERetain();
  }
  dispatch thunk of EnvironmentResource.coreIBLAsset.getter();
  if (v26(v2, 1, v24) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
    swift_release();

    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for __AssetRef?);
  }
  else
  {
    __AssetRef.__as<A>(_:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v2, v24);
  }
}

uint64_t one-time initialization function for importTextures()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.importTextures = result;
  return result;
}

uint64_t Inputs.primPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOBuilderInputsCopyPrimPath();
  if (result) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t Inputs.prim.getter()
{
  uint64_t result = RIOBuilderInputsCopyStage();
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v1 = (void *)result;
  uint64_t result = RIOBuilderInputsCopyPrimPath();
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v2 = (void *)result;
  if (RIOPxrUsdStageHasPrimAtPrimPath())
  {
    id v3 = (id)RIOPxrTfTokenEmpty();
    uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

    uint64_t v2 = v3;
  }
  else
  {
    uint64_t PrimIfNeeded = RIOPxrUsdPrimCreateEmpty();
  }

  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = PrimIfNeeded;
  return result;
}

uint64_t Inputs.stage.getter()
{
  uint64_t result = RIOBuilderInputsCopyStage();
  if (result)
  {
    uint64_t v1 = result;
    type metadata accessor for Stage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id Inputs.stageDelta.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = (void *)v1[5];
  id v7 = (id)v1[6];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return v7;
}

uint64_t Inputs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = (void *)Inputs.fetchBuildersAndOutputNames(key:)(a1, a2);
  uint64_t v6 = v5;
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  uint64_t v7 = v4[4];
  uint64_t v8 = v4[5];
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (!v6[2])
  {
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  uint64_t v10 = v6[4];
  uint64_t v9 = v6[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = Builder.outputs.getter(ObjectType, v8);
  MEMORY[0x270FA5388](v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  if (v17)
  {
    outlined init with take of Any(&v16, a3);
LABEL_5:
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  outlined destroy of Any?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t v14 = v7;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!v14)
  {
    *a3 = 0u;
    a3[1] = 0u;
    goto LABEL_5;
  }
  swift_unknownObjectRetain();
  EntityBuilder.generateSwiftOutput(for:inputs:)(v10, v9);
  uint64_t v15 = Builder.outputs.getter(ObjectType, v8);
  MEMORY[0x270FA5388](v15);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_unknownObjectRelease_n();
}

uint64_t Inputs.accumulatedValues(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = Inputs.fetchBuildersAndOutputNames(key:)(a1, a2);
  uint64_t v4 = result;
  unint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    if (v5 <= *(void *)(v3 + 16))
    {
      uint64_t v6 = 0;
      uint64_t v7 = (void *)MEMORY[0x263F8EE78];
      uint64_t v18 = v3;
      uint64_t v19 = result;
      while (1)
      {
        unint64_t v22 = v5;
        uint64_t v9 = *(void *)(v4 + v6 + 32);
        uint64_t v8 = *(void *)(v4 + v6 + 40);
        uint64_t v21 = v6;
        uint64_t v10 = *(void *)(v3 + v6 + 32);
        uint64_t v11 = *(void *)(v3 + v6 + 40);
        uint64_t ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v20 = v8;
        uint64_t v13 = Builder.outputs.getter(ObjectType, v8);
        MEMORY[0x270FA5388](v13);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();
        if (v26)
        {
          outlined init with take of Any(&v25, &v23);
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for Any?);
          swift_getObjectType();
          if (swift_conformsToProtocol2()) {
            uint64_t v14 = v9;
          }
          else {
            uint64_t v14 = 0;
          }
          if (v14)
          {
            swift_unknownObjectRetain();
            EntityBuilder.generateSwiftOutput(for:inputs:)(v10, v11);
            uint64_t v15 = Builder.outputs.getter(ObjectType, v20);
            MEMORY[0x270FA5388](v15);
            OS_dispatch_queue.sync<A>(execute:)();
            swift_bridgeObjectRelease();
            swift_release();
            swift_unknownObjectRelease();
            goto LABEL_14;
          }
          long long v23 = 0u;
          long long v24 = 0u;
        }
        swift_bridgeObjectRelease();
LABEL_14:
        uint64_t v4 = v19;
        if (*((void *)&v24 + 1))
        {
          outlined init with take of Any(&v23, &v25);
          outlined init with copy of Any((uint64_t)&v25, (uint64_t)&v23);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          }
          unint64_t v17 = v7[2];
          unint64_t v16 = v7[3];
          if (v17 >= v16 >> 1) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v7);
          }
          void v7[2] = v17 + 1;
          outlined init with take of Any(&v23, &v7[4 * v17 + 4]);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);
        }
        else
        {
          swift_unknownObjectRelease();
          outlined destroy of Any?((uint64_t)&v23, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v6 = v21 + 16;
        unint64_t v5 = v22 - 1;
        uint64_t v3 = v18;
        if (v22 == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)v7;
        }
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void Inputs.importSession.getter()
{
  id v0 = (id)RIOBuilderInputsGetImportSession();
  if (!v0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v0;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_7:
    __break(1u);
    return;
  }
  swift_retain();
}

uint64_t Inputs.getEntity(forKey:)(uint64_t a1, uint64_t a2)
{
  Inputs.subscript.getter(a1, a2, &v4);
  if (v5)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v4, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t Inputs.getEntities(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Inputs.accumulatedValues(forKey:)(a1, a2);
  uint64_t v3 = specialized _arrayConditionalCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  if (v3) {
    return v3;
  }
  else {
    return MEMORY[0x263F8EE78];
  }
}

void Inputs.performBlockLaterWithEntity(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (id)RIOBuilderInputsGetImportSession();
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

    if (SwiftObject)
    {
      uint64_t v9 = (void *)swift_allocObject();
      void v9[2] = a1;
      v9[3] = a2;
      void v9[4] = a3;
      uint64_t v10 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_retain();
      swift_beginAccess();
      uint64_t v11 = *v10;
      aBlock[4] = partial apply for closure #1 in Inputs.performBlockLaterWithEntity(_:_:);
      aBlock[5] = v9;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      void aBlock[3] = &block_descriptor_23;
      uint64_t v12 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      id v13 = v11;
      swift_retain();
      swift_release();
      RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue();
      _Block_release(v12);
      swift_release();
      swift_release();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in Inputs.performBlockLaterWithEntity(_:_:)(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for Entity();
  static Entity.__fromCore(_:)();
  a2();
  return swift_release();
}

uint64_t Inputs.performBlockSyncOnEngineQueue(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  v8[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v8[5] = v4;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  void v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_9_0;
  uint64_t v5 = _Block_copy(v8);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v5);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

void Inputs.StageDelta.init(core:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  uint64_t v4 = (void *)RIOBuilderStageDeltaCopyDirtyMetadata();
  *(void *)&long long v22 = 0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_17:
    uint64_t v18 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v19 = (void *)RIOBuilderStageDeltaCopyPrimDelta();
    Inputs.PrimDelta.init(core:)(v19, (uint64_t *)&v22);

    uint64_t v20 = v23;
    long long v21 = v22;
    *(void *)a2 = v18;
    *(_OWORD *)(a2 + 8) = v21;
    *(void *)(a2 + 24) = v20;
    *(void *)(a2 + 32) = v3;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  *(void *)&long long v22 = v5;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = v22;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        uint64_t v10 = MEMORY[0x23ECBA630](i, v6);
        *(void *)&long long v22 = v8;
        unint64_t v12 = *(void *)(v8 + 16);
        unint64_t v11 = *(void *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v8 = v22;
        }
        *(void *)(v8 + 16) = v12 + 1;
        *(void *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v7; ++j)
      {
        uint64_t v14 = *(void **)(v6 + 8 * j + 32);
        *(void *)&long long v22 = v8;
        unint64_t v15 = *(void *)(v8 + 16);
        unint64_t v16 = *(void *)(v8 + 24);
        id v17 = v14;
        if (v15 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
          uint64_t v8 = v22;
        }
        *(void *)(v8 + 16) = v15 + 1;
        *(void *)(v8 + 8 * v15 + 32) = v17;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t Inputs.fetchBuildersAndOutputNames(key:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = MEMORY[0x263F8EE78];
  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v7 = (void *)MEMORY[0x23ECB9F30](a1, a2);
  int AllBuildersAndOutputNamesProvidingValuesWithName = RIOBuilderInputsGetAllBuildersAndOutputNamesProvidingValuesWithName();

  if (!AllBuildersAndOutputNamesProvidingValuesWithName)
  {

    return MEMORY[0x263F8EE78];
  }
  type metadata accessor for RIOBuilderRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RIOBuilderRef]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Builder);
  lazy protocol witness table accessor for type [RIOBuilderRef] and conformance [A]();
  uint64_t v9 = Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for CFStringRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v10 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_4;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    unint64_t v12 = MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  uint64_t v11 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11) {
    goto LABEL_18;
  }
LABEL_4:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
  if (v11 < 0) {
    __break(1u);
  }
  unint64_t v12 = v4;
  if ((v4 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v14 = (void *)MEMORY[0x23ECBA630](i, v10);
      Swift::String v15 = String.init(_:)(v14);
      unint64_t v17 = *(void *)(v12 + 16);
      unint64_t v16 = *(void *)(v12 + 24);
      if (v17 >= v16 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v12 + 16) = v17 + 1;
      *(Swift::String *)(v12 + 16 * v17 + 32) = v15;
    }
  }
  else
  {
    for (uint64_t j = 0; j != v11; ++j)
    {
      Swift::String v19 = String.init(_:)(*(id *)(v4 + 8 * j + 32));
      unint64_t v21 = *(void *)(v4 + 16);
      unint64_t v20 = *(void *)(v4 + 24);
      if (v21 >= v20 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      }
      *(void *)(v4 + 16) = v21 + 1;
      *(Swift::String *)(v4 + 16 * v21 + 32) = v19;
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v22 = *(void *)(v9 + 16);
  uint64_t v23 = *(void *)(v12 + 16);

  if (v22 != v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v9;
}

uint64_t closure #1 in Inputs.fetchBuildersAndOutputNames(key:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v4 = (id)RIOBuilderGetSwiftObject();
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = (uint64_t)v4;
  swift_getObjectType();
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    uint64_t result = v5;
  }
  else {
    uint64_t result = 0;
  }
  if (!result)
  {
    swift_unknownObjectRelease();
LABEL_10:
    uint64_t result = specialized static _BaseBuilder.create(from:)(v3);
  }
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t Inputs.deinit()
{
  uint64_t v1 = *(void **)(v0 + 40);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t Inputs.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 40);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Inputs.createStandardTextureAsset(on:for:)(uint64_t a1, void *a2)
{
  return MEMORY[0x270F21CC0](*(void *)(v2 + 56), *(void *)(a1 + 16), *a2);
}

uint64_t Inputs.createCubeMapTextureAsset(on:for:)()
{
  return RIOBuilderInputsCreateCubeMapTextureAsset();
}

uint64_t Inputs.StageDelta.dirtyMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

id Inputs.StageDelta.primDelta.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[2];
  id v4 = (id)v1[3];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t Inputs.StageDelta.hash(into:)(long long *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = (void *)v1[3];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v7 = v5;
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v6);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t static Inputs.StageDelta.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = (void *)a1[3];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  id v7 = (void *)a2[3];
  if (specialized static Set.== infix(_:_:)(*a1, *a2))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v9 = v7;
    if (specialized static Set.== infix(_:_:)(v2, v5)) {
      char v10 = specialized static Set.== infix(_:_:)(v3, v6);
    }
    else {
      char v10 = 0;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t static Inputs.PrimDelta.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return specialized static Set.== infix(_:_:)(v2, v3);
}

uint64_t Inputs.PrimDelta.init(core:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v4 = (void *)RIOBuilderPrimDeltaCopyDirtyMetadata();
  *(void *)&long long v40 = 0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  *(void *)&long long v40 = v5;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v9 = v40;
  if ((v6 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v11 = MEMORY[0x23ECBA630](i, v6);
      *(void *)&long long v40 = v9;
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v12 = *(void *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v9 = v40;
      }
      *(void *)(v9 + 16) = v13 + 1;
      *(void *)(v9 + 8 * v13 + 32) = v11;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    for (uint64_t j = 0; j != v7; ++j)
    {
      Swift::String v15 = *(void **)(v6 + 8 * j + 32);
      *(void *)&long long v40 = v9;
      unint64_t v17 = *(void *)(v9 + 16);
      unint64_t v16 = *(void *)(v9 + 24);
      id v18 = v15;
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v9 = v40;
      }
      *(void *)(v9 + 16) = v17 + 1;
      *(void *)(v9 + 8 * v17 + 32) = v18;
    }
    swift_bridgeObjectRelease();
    unint64_t v5 = MEMORY[0x263F8EE78];
  }
LABEL_17:
  uint64_t v19 = specialized Set.init<A>(_:)(v9);
  swift_bridgeObjectRelease();
  unint64_t v20 = (void *)RIOBuilderPrimDeltaCopyPropertyDeltas();
  *(void *)&long long v40 = 0;
  type metadata accessor for RIOBuilderPropertyDeltaRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v5 >> 62))
  {
    uint64_t v21 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21) {
      goto LABEL_19;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x263F8EE78];
LABEL_33:
    uint64_t v36 = specialized Set.init<A>(_:)(v22);

    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v19;
    a2[1] = v36;
    a2[2] = (uint64_t)v3;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_32;
  }
LABEL_19:
  uint64_t v42 = v5;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t v39 = v19;
    uint64_t v22 = v42;
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v23 = 0;
      do
      {
        long long v24 = (void *)MEMORY[0x23ECBA630](v23, v5);
        Inputs.PropertyDelta.init(core:)(v24, (uint64_t *)&v40);
        long long v25 = v40;
        uint64_t v26 = v41;
        uint64_t v42 = v22;
        unint64_t v28 = *(void *)(v22 + 16);
        unint64_t v27 = *(void *)(v22 + 24);
        if (v28 >= v27 >> 1)
        {
          long long v37 = v40;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          long long v25 = v37;
          uint64_t v22 = v42;
        }
        ++v23;
        *(void *)(v22 + 16) = v28 + 1;
        uint64_t v29 = v22 + 24 * v28;
        *(_OWORD *)(v29 + 32) = v25;
        *(void *)(v29 + 48) = v26;
      }
      while (v21 != v23);
    }
    else
    {
      uint64_t v30 = 0;
      do
      {
        Inputs.PropertyDelta.init(core:)(*(id *)(v5 + 8 * v30 + 32), (uint64_t *)&v40);
        long long v31 = v40;
        uint64_t v32 = v41;
        uint64_t v42 = v22;
        unint64_t v34 = *(void *)(v22 + 16);
        unint64_t v33 = *(void *)(v22 + 24);
        if (v34 >= v33 >> 1)
        {
          long long v38 = v40;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          long long v31 = v38;
          uint64_t v22 = v42;
        }
        ++v30;
        *(void *)(v22 + 16) = v34 + 1;
        uint64_t v35 = v22 + 24 * v34;
        *(_OWORD *)(v35 + 32) = v31;
        *(void *)(v35 + 48) = v32;
      }
      while (v21 != v30);
    }
    swift_bridgeObjectRelease();
    uint64_t v19 = v39;
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Int Inputs.StageDelta.hashValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)v0[3];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v5 = v4;
  specialized Set.hash(into:)((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Inputs.StageDelta()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)v0[3];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v5 = v4;
  specialized Set.hash(into:)((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Inputs.StageDelta(long long *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  id v5 = (void *)v1[3];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v7 = v5;
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v6);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Inputs.StageDelta()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)v0[3];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v5 = v4;
  specialized Set.hash(into:)((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Inputs.StageDelta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = (void *)a1[3];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  id v7 = (void *)a2[3];
  if (specialized static Set.== infix(_:_:)(*a1, *a2))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v9 = v7;
    if (specialized static Set.== infix(_:_:)(v2, v5)) {
      char v10 = specialized static Set.== infix(_:_:)(v3, v6);
    }
    else {
      char v10 = 0;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t Inputs.PrimDelta.propertyDeltas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Inputs.PrimDelta.hash(into:)(long long *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

void Inputs.PropertyDelta.init(core:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v4 = (void *)RIOBuilderPropertyDeltaCopyDirtyMetadata();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_17:
    uint64_t v17 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v18 = RIOBuilderPropertyDeltaCopyPropertyName();

    *a2 = v17;
    a2[1] = v18;
    a2[2] = (uint64_t)v3;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        uint64_t v10 = MEMORY[0x23ECBA630](i, v6);
        unint64_t v12 = *(void *)(v8 + 16);
        unint64_t v11 = *(void *)(v8 + 24);
        if (v12 >= v11 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        }
        *(void *)(v8 + 16) = v12 + 1;
        *(void *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v7; ++j)
      {
        unint64_t v14 = *(void *)(v5 + 16);
        unint64_t v15 = *(void *)(v5 + 24);
        id v16 = *(id *)(v6 + 8 * j + 32);
        if (v14 >= v15 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
        }
        *(void *)(v5 + 16) = v14 + 1;
        *(void *)(v5 + 8 * v14 + 32) = v16;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
}

Swift::Int Inputs.PrimDelta.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Inputs.PrimDelta()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Inputs.PrimDelta(long long *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Inputs.PrimDelta()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Inputs.PrimDelta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return specialized static Set.== infix(_:_:)(v2, v3);
}

uint64_t Inputs.PropertyDelta.dirtyMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

id Inputs.PropertyDelta.propertyName.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

void Inputs.PropertyDelta.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)v1[1];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  id v5 = v4;
  _CFObject.hash(into:)();
}

uint64_t static Inputs.PropertyDelta.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  id v4 = v2;
  id v5 = v3;
  char v6 = static _CFObject.== infix(_:_:)();

  return v6 & 1;
}

Swift::Int Inputs.PropertyDelta.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v3, v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Inputs.PropertyDelta()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v3, v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Inputs.PropertyDelta(uint64_t a1)
{
  specialized Set.hash(into:)(a1, *v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Inputs.PropertyDelta()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v3, v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Inputs.PropertyDelta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  id v4 = v2;
  id v5 = v3;
  char v6 = static _CFObject.== infix(_:_:)();

  return v6 & 1;
}

uint64_t partial apply for closure #1 in Outputs.subscript.getter@<X0>(_OWORD *a1@<X8>)
{
  return closure #1 in Outputs.subscript.getter(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_23AA9ABF4()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in Inputs.performBlockLaterWithEntity(_:_:)()
{
  return closure #1 in Inputs.performBlockLaterWithEntity(_:_:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t sub_23AA9AC58()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type Inputs.StageDelta and conformance Inputs.StageDelta()
{
  unint64_t result = lazy protocol witness table cache variable for type Inputs.StageDelta and conformance Inputs.StageDelta;
  if (!lazy protocol witness table cache variable for type Inputs.StageDelta and conformance Inputs.StageDelta)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.StageDelta and conformance Inputs.StageDelta);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Inputs.PrimDelta and conformance Inputs.PrimDelta()
{
  unint64_t result = lazy protocol witness table cache variable for type Inputs.PrimDelta and conformance Inputs.PrimDelta;
  if (!lazy protocol witness table cache variable for type Inputs.PrimDelta and conformance Inputs.PrimDelta)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.PrimDelta and conformance Inputs.PrimDelta);
  }
  return result;
}

uint64_t type metadata accessor for Inputs()
{
  return self;
}

uint64_t method lookup function for Inputs(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Inputs);
}

uint64_t dispatch thunk of Inputs.primPath.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of Inputs.prim.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of Inputs.stage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of Inputs.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of Inputs.accumulatedValues(forKey:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Inputs.importSession.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Inputs.getEntity(forKey:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of Inputs.getEntities(forKey:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of Inputs.performBlockLaterWithEntity(_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of Inputs.performBlockSyncOnEngineQueue(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

void destroy for Inputs.StageDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for Inputs.StageDelta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  id v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

void *assignWithCopy for Inputs.StageDelta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[3];
  id v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  id v7 = (void *)a2[4];
  uint64_t v8 = (void *)a1[4];
  a1[4] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for Inputs.StageDelta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  id v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for Inputs.StageDelta(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Inputs.StageDelta(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Inputs.StageDelta()
{
  return &type metadata for Inputs.StageDelta;
}

void destroy for Inputs.PrimDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for Inputs.PrimDelta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for Inputs.PrimDelta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for Inputs.PrimDelta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for Inputs.PrimDelta()
{
  return &type metadata for Inputs.PrimDelta;
}

void destroy for Inputs.PropertyDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();

  uint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for Inputs.PropertyDelta(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for Inputs.PropertyDelta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  id v7 = (void *)a2[2];
  uint64_t v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for Inputs.PropertyDelta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for Inputs.PropertyDelta()
{
  return &type metadata for Inputs.PropertyDelta;
}

unint64_t lazy protocol witness table accessor for type [RIOBuilderRef] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [RIOBuilderRef] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RIOBuilderRef] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RIOBuilderRef]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RIOBuilderRef] and conformance [A]);
  }
  return result;
}

uint64_t closure #1 in Outputs.subscript.getterpartial apply@<X0>(_OWORD *a1@<X8>)
{
  return partial apply for closure #1 in Outputs.subscript.getter(a1);
}

uint64_t __RKEntityActionAnimationStyle.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v5 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v5 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    unint64_t v14 = 0;
LABEL_12:
    v16[1] = v14;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v14, 1);
    goto LABEL_13;
  }
  id v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v7 = RIOPxrUsdAttributeCopyValue();
  if (!v7)
  {
LABEL_11:
    unint64_t v14 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  uint64_t v8 = (void *)v7;
  uint64_t v9 = RIOPxrVtValueCopyToken();
  if (!v9)
  {

    goto LABEL_11;
  }
  uint64_t v10 = (void *)v9;

  swift_release();
  unint64_t v11 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v10, 0);
  __RKEntityActionAnimationStyle.init(rawValue:)();
  uint64_t v12 = type metadata accessor for __RKEntityActionAnimationStyle();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v4, 1, v12) == 1)
  {
    outlined destroy of __RKEntityActionAnimationStyle?((uint64_t)v4);
LABEL_13:
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v4, v12);
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

uint64_t outlined destroy of __RKEntityActionAnimationStyle?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityActionAnimationStyle.AnimationStyleLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA9B8C8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  return &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
}

uint64_t closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v26 = a2;
  unint64_t v27 = a3;
  uint64_t v28 = type metadata accessor for __RKEntityEmphasisAnimationType();
  uint64_t v5 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for __RKEntityActionAnimationStyle();
  uint64_t v8 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v26, v11);
  uint64_t v19 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v29, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v30, v28);
  __RKEntityEmphasisActionArguments.init(target:duration:iterations:animationStyle:emphasisAnimationType:)();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x263F163B8], v15);
  unint64_t v20 = *v19;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v19 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, v20);
    *uint64_t v19 = v20;
  }
  unint64_t v23 = *(void *)(v20 + 16);
  unint64_t v22 = *(void *)(v20 + 24);
  if (v23 >= v22 >> 1)
  {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v20);
    *uint64_t v19 = v20;
  }
  *(void *)(v20 + 16) = v23 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v20+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v23, v18, v15);
}

uint64_t specialized static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)()
{
  uint64_t v28 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v26 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  unint64_t v27 = (char *)&v25 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x270FA5388](v1 - 8);
  int v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __RKEntityActionAnimationStyle();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityEmphasisAnimationType();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v14 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v14 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v32);

  swift_release();
  uint64_t v15 = v32;
  if (v33)
  {
    long long v31 = v32;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v15, 1);
    return MEMORY[0x263F8EE78];
  }
  else
  {
    swift_retain();
    __RKEntityEmphasisAnimationType.init(inputs:)((uint64_t)v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    swift_retain();
    __RKEntityActionAnimationStyle.init(inputs:)((uint64_t)v3);
    uint64_t v19 = v29;
    uint64_t v18 = v30;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v3, 0, 1, v30);
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v6, v3, v18);
    uint64_t v32 = (void *)MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](v20);
    *(&v25 - 4) = (uint64_t)&v32;
    *(&v25 - 3) = (uint64_t)v15;
    *(&v25 - 2) = (uint64_t)v6;
    *(&v25 - 1) = (uint64_t)v13;
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:), (uint64_t)(&v25 - 6));
    uint64_t v16 = (uint64_t)v32;
    if (v32[2] < 2uLL)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v21 = type metadata accessor for __RKEntityActionSpecification();
      uint64_t v22 = *(void *)(v21 - 8);
      unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_23AAB22A0;
      (*(void (**)(char *, void, uint64_t))(v26 + 104))(v27, *MEMORY[0x263F16310], v28);
      swift_bridgeObjectRetain_n();
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      (*(void (**)(unint64_t, void, uint64_t))(v22 + 104))(v24 + v23, *MEMORY[0x263F163A8], v21);
      swift_bridgeObjectRelease();
      uint64_t v16 = v24;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

void BehaviorSchema.triggers.getter(void *a1@<X8>)
{
  *a1 = 0x7372656767697274;
  a1[1] = 0xE800000000000000;
}

void BehaviorSchema.actions.getter(void *a1@<X8>)
{
  *a1 = 0x736E6F69746361;
  a1[1] = 0xE700000000000000;
}

void BehaviorSchema.exclusive.getter(void *a1@<X8>)
{
  *a1 = 0x766973756C637865;
  a1[1] = 0xE900000000000065;
}

void CollideTriggerSchema.colliders.getter(void *a1@<X8>)
{
  *a1 = 0x726564696C6C6F63;
  a1[1] = 0xE900000000000073;
}

void ProximityToCameraTriggerSchema.distance.getter(void *a1@<X8>)
{
  *a1 = 0x65636E6174736964;
  a1[1] = 0xE800000000000000;
}

void AudioActionSchema.audio.getter(void *a1@<X8>)
{
  *a1 = 0x6F69647561;
  a1[1] = 0xE500000000000000;
}

void AudioActionSchema.type.getter(void *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

void AudioActionSchema.gain.getter(void *a1@<X8>)
{
  *a1 = 1852399975;
  a1[1] = 0xE400000000000000;
}

void AudioActionSchema.auralMode.getter(void *a1@<X8>)
{
  *a1 = 0x646F4D6C61727561;
  a1[1] = 0xE900000000000065;
}

void AudioActionSchema.multiplePerformOperation.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000023AAACD40;
}

void ChangeSceneActionSchema.scene.getter(void *a1@<X8>)
{
  *a1 = 0x656E656373;
  a1[1] = 0xE500000000000000;
}

void EmphasisActionSchema.motionType.getter(void *a1@<X8>)
{
  *a1 = 0x79546E6F69746F6DLL;
  a1[1] = 0xEA00000000006570;
}

void EmphasisActionSchema.style.getter(void *a1@<X8>)
{
  *a1 = 0x656C797473;
  a1[1] = 0xE500000000000000;
}

void GroupActionSchema.loops.getter(void *a1@<X8>)
{
  *a1 = 0x73706F6F6CLL;
  a1[1] = 0xE500000000000000;
}

void GroupActionSchema.performCount.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void GroupActionSchema.actions.getter(void *a1@<X8>)
{
  *a1 = 0x736E6F69746361;
  a1[1] = 0xE700000000000000;
}

void ImpulseActionSchema.velocity.getter(void *a1@<X8>)
{
  *a1 = 0x797469636F6C6576;
  a1[1] = 0xE800000000000000;
}

void LookAtCameraActionSchema.front.getter(void *a1@<X8>)
{
  *a1 = 0x746E6F7266;
  a1[1] = 0xE500000000000000;
}

void LookAtCameraActionSchema.upVector.getter(void *a1@<X8>)
{
  *a1 = 0x726F746365567075;
  a1[1] = 0xE800000000000000;
}

void NotificationActionSchema.identifier.getter(void *a1@<X8>)
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
}

void OrbitActionSchema.alignToPath.getter(void *a1@<X8>)
{
  *a1 = 0x506F546E67696C61;
  a1[1] = 0xEB00000000687461;
}

void OrbitActionSchema.center.getter(void *a1@<X8>)
{
  *a1 = 0x7265746E6563;
  a1[1] = 0xE600000000000000;
}

void SpinActionSchema.infoID.getter(void *a1@<X8>)
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
}

void SpinActionSchema.affectedObjects.getter(void *a1@<X8>)
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
}

void SpinActionSchema.duration.getter(void *a1@<X8>)
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
}

void SpinActionSchema.revolutions.getter(void *a1@<X8>)
{
  *a1 = 0x6974756C6F766572;
  a1[1] = 0xEB00000000736E6FLL;
}

uint64_t SpinActionSchema.revolutions.setter()
{
  return swift_bridgeObjectRelease();
}

void StartAnimationSchema.start.getter(void *a1@<X8>)
{
  *a1 = 0x7472617473;
  a1[1] = 0xE500000000000000;
}

void StartAnimationSchema.reversed.getter(void *a1@<X8>)
{
  *a1 = 0x6465737265766572;
  a1[1] = 0xE800000000000000;
}

void StartAnimationSchema.animationSpeed.getter(char *a1@<X8>)
{
  a1[15] = -18;
}

void StartAnimationSchema.reverses.getter(void *a1@<X8>)
{
  *a1 = 0x7365737265766572;
  a1[1] = 0xE800000000000000;
}

void TransformActionSchema.relativeToObject.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000023AAACF20;
}

void TransformActionSchema.xformTarget.getter(void *a1@<X8>)
{
  *a1 = 0x7261546D726F6678;
  a1[1] = 0xEB00000000746567;
}

void VisibilityActionSchema.moveDistance.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t (*CollideTriggerSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*CollideTriggerSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*CollideTriggerSchema.colliders.modify(void *a1))()
{
  *a1 = 0x726564696C6C6F63;
  a1[1] = 0xE900000000000073;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationTriggerSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationTriggerSchema.identifier.modify(void *a1))()
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
  return destroy for RelationshipMetadata;
}

uint64_t (*ProximityToCameraTriggerSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ProximityToCameraTriggerSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*ProximityToCameraTriggerSchema.distance.modify(void *a1))()
{
  *a1 = 0x65636E6174736964;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SceneTransitionTriggerSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SceneTransitionTriggerSchema.type.modify(void *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TapTriggerSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TapTriggerSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.audio.modify(void *a1))()
{
  *a1 = 0x6F69647561;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.auralMode.modify(void *a1))()
{
  *a1 = 0x646F4D6C61727561;
  a1[1] = 0xE900000000000065;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.gain.modify(void *a1))()
{
  *a1 = 1852399975;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.multiplePerformOperation.modify(void *a1))()
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000023AAACD40;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.type.modify(void *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ChangeSceneActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ChangeSceneActionSchema.scene.modify(void *a1))()
{
  *a1 = 0x656E656373;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.motionType.modify(void *a1))()
{
  *a1 = 0x79546E6F69746F6DLL;
  a1[1] = 0xEA00000000006570;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.style.modify(void *a1))()
{
  *a1 = 0x656C797473;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.actions.modify(void *a1))()
{
  *a1 = 0x736E6F69746361;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.loops.modify(void *a1))()
{
  *a1 = 0x73706F6F6CLL;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.performCount.modify(uint64_t a1))()
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.type.modify(void *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ImpulseActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ImpulseActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*ImpulseActionSchema.velocity.modify(void *a1))()
{
  *a1 = 0x797469636F6C6576;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.front.modify(void *a1))()
{
  *a1 = 0x746E6F7266;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.upVector.modify(void *a1))()
{
  *a1 = 0x726F746365567075;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationActionSchema.identifier.modify(void *a1))()
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.axis.modify(void *a1))()
{
  *a1 = 1936291937;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.center.modify(void *a1))()
{
  *a1 = 0x7265746E6563;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.revolutions.modify(void *a1))()
{
  *a1 = 0x6974756C6F766572;
  a1[1] = 0xEB00000000736E6FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.alignToPath.modify(void *a1))()
{
  *a1 = 0x506F546E67696C61;
  a1[1] = 0xEB00000000687461;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

void SpinActionSchema.axis.getter(void *a1@<X8>)
{
  *a1 = 1936291937;
  a1[1] = 0xE400000000000000;
}

uint64_t (*SpinActionSchema.axis.modify(void *a1))()
{
  *a1 = 1936291937;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.revolutions.modify(void *a1))()
{
  *a1 = 0x6974756C6F766572;
  a1[1] = 0xEB00000000736E6FLL;
  return destroy for AttributeMetadata;
}

uint64_t (*StartAnimationSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.multiplePerformOperation.modify(void *a1))()
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000023AAACD40;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.animationSpeed.modify(char *a1))()
{
  a1[15] = -18;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.reversed.modify(void *a1))()
{
  *a1 = 0x6465737265766572;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.reverses.modify(void *a1))()
{
  *a1 = 0x7365737265766572;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.start.modify(void *a1))()
{
  *a1 = 0x7472617473;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

void TransformActionSchema.easeType.getter(void *a1@<X8>)
{
  *a1 = 0x6570795465736165;
  a1[1] = 0xE800000000000000;
}

uint64_t (*TransformActionSchema.easeType.modify(void *a1))()
{
  *a1 = 0x6570795465736165;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.relativeToObject.modify(void *a1))()
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000023AAACF20;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.type.modify(void *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.xformTarget.modify(void *a1))()
{
  *a1 = 0x7261546D726F6678;
  a1[1] = 0xEB00000000746567;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.affectedObjects.modify(void *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.easeType.modify(void *a1))()
{
  *a1 = 0x6570795465736165;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.motionType.modify(void *a1))()
{
  *a1 = 0x79546E6F69746F6DLL;
  a1[1] = 0xEA00000000006570;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.moveDistance.modify(uint64_t a1))()
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.style.modify(void *a1))()
{
  *a1 = 0x656C797473;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.type.modify(void *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*WaitActionSchema.infoID.modify(void *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t key path setter for CollideTriggerSchema.infoID : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  v9[0] = v7;
  v9[1] = v6;
  swift_bridgeObjectRetain();
  return a5(v9);
}

uint64_t (*WaitActionSchema.duration.modify(void *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

void *sub_23AA9D990@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))CollideTriggerSchema.infoID.getter, a1);
}

uint64_t sub_23AA9D9A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))CollideTriggerSchema.infoID.setter);
}

uint64_t sub_23AA9D9D4()
{
  return 16;
}

__n128 sub_23AA9D9E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9D9EC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))CollideTriggerSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9DA04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))CollideTriggerSchema.affectedObjects.setter);
}

uint64_t sub_23AA9DA30()
{
  return 16;
}

__n128 sub_23AA9DA3C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DA48@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))CollideTriggerSchema.colliders.getter, a1);
}

uint64_t sub_23AA9DA60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))CollideTriggerSchema.colliders.setter);
}

uint64_t sub_23AA9DA8C()
{
  return 16;
}

__n128 sub_23AA9DA98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DAA4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))NotificationTriggerSchema.infoID.getter, a1);
}

uint64_t sub_23AA9DABC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))NotificationTriggerSchema.infoID.setter);
}

uint64_t sub_23AA9DAE8()
{
  return 16;
}

__n128 sub_23AA9DAF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DB00@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))NotificationTriggerSchema.identifier.getter, a1);
}

uint64_t sub_23AA9DB18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))NotificationTriggerSchema.identifier.setter);
}

uint64_t sub_23AA9DB44()
{
  return 16;
}

__n128 sub_23AA9DB50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DB5C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ProximityToCameraTriggerSchema.infoID.getter, a1);
}

uint64_t sub_23AA9DB74(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ProximityToCameraTriggerSchema.infoID.setter);
}

uint64_t sub_23AA9DBA0()
{
  return 16;
}

__n128 sub_23AA9DBAC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DBB8@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ProximityToCameraTriggerSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9DBD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ProximityToCameraTriggerSchema.affectedObjects.setter);
}

uint64_t sub_23AA9DBFC()
{
  return 16;
}

__n128 sub_23AA9DC08(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DC14@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ProximityToCameraTriggerSchema.distance.getter, a1);
}

uint64_t sub_23AA9DC2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ProximityToCameraTriggerSchema.distance.setter);
}

uint64_t sub_23AA9DC58()
{
  return 16;
}

__n128 sub_23AA9DC64(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DC70@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))SceneTransitionTriggerSchema.infoID.getter, a1);
}

uint64_t sub_23AA9DC88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))SceneTransitionTriggerSchema.infoID.setter);
}

uint64_t sub_23AA9DCB4()
{
  return 16;
}

__n128 sub_23AA9DCC0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DCCC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))SceneTransitionTriggerSchema.type.getter, a1);
}

uint64_t sub_23AA9DCE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))SceneTransitionTriggerSchema.type.setter);
}

uint64_t sub_23AA9DD10()
{
  return 16;
}

__n128 sub_23AA9DD1C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DD28@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TapTriggerSchema.infoID.getter, a1);
}

uint64_t sub_23AA9DD40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TapTriggerSchema.infoID.setter);
}

uint64_t sub_23AA9DD6C()
{
  return 16;
}

__n128 sub_23AA9DD78(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DD84@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TapTriggerSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9DD9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TapTriggerSchema.affectedObjects.setter);
}

uint64_t sub_23AA9DDC8()
{
  return 16;
}

__n128 sub_23AA9DDD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DDE0@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))AudioActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9DDF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))AudioActionSchema.infoID.setter);
}

uint64_t sub_23AA9DE24()
{
  return 16;
}

__n128 sub_23AA9DE30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DE3C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))AudioActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9DE54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))AudioActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9DE80()
{
  return 16;
}

__n128 sub_23AA9DE8C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DE98@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))AudioActionSchema.audio.getter, a1);
}

uint64_t sub_23AA9DEB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))AudioActionSchema.audio.setter);
}

uint64_t sub_23AA9DEDC()
{
  return 16;
}

__n128 sub_23AA9DEE8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DEF4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))AudioActionSchema.auralMode.getter, a1);
}

uint64_t sub_23AA9DF0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))AudioActionSchema.auralMode.setter);
}

uint64_t sub_23AA9DF38()
{
  return 16;
}

__n128 sub_23AA9DF44(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DF50@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))AudioActionSchema.gain.getter, a1);
}

uint64_t sub_23AA9DF68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))AudioActionSchema.gain.setter);
}

uint64_t sub_23AA9DF94()
{
  return 16;
}

__n128 sub_23AA9DFA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9DFAC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))AudioActionSchema.multiplePerformOperation.getter, a1);
}

uint64_t sub_23AA9DFC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))AudioActionSchema.multiplePerformOperation.setter);
}

uint64_t sub_23AA9DFF0()
{
  return 16;
}

__n128 sub_23AA9DFFC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E008@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))AudioActionSchema.type.getter, a1);
}

uint64_t sub_23AA9E020(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))AudioActionSchema.type.setter);
}

uint64_t sub_23AA9E04C()
{
  return 16;
}

__n128 sub_23AA9E058(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E064@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ChangeSceneActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9E07C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ChangeSceneActionSchema.infoID.setter);
}

uint64_t sub_23AA9E0A8()
{
  return 16;
}

__n128 sub_23AA9E0B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E0C0@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ChangeSceneActionSchema.scene.getter, a1);
}

uint64_t sub_23AA9E0D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ChangeSceneActionSchema.scene.setter);
}

uint64_t sub_23AA9E104()
{
  return 16;
}

__n128 sub_23AA9E110(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E11C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))EmphasisActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9E134(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))EmphasisActionSchema.infoID.setter);
}

uint64_t sub_23AA9E160()
{
  return 16;
}

__n128 sub_23AA9E16C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E178@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))EmphasisActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9E190(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))EmphasisActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9E1BC()
{
  return 16;
}

__n128 sub_23AA9E1C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E1D4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))EmphasisActionSchema.duration.getter, a1);
}

uint64_t sub_23AA9E1EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))EmphasisActionSchema.duration.setter);
}

uint64_t sub_23AA9E218()
{
  return 16;
}

__n128 sub_23AA9E224(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E230@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))EmphasisActionSchema.motionType.getter, a1);
}

uint64_t sub_23AA9E248(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))EmphasisActionSchema.motionType.setter);
}

uint64_t sub_23AA9E274()
{
  return 16;
}

__n128 sub_23AA9E280(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E28C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))EmphasisActionSchema.style.getter, a1);
}

uint64_t sub_23AA9E2A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))EmphasisActionSchema.style.setter);
}

uint64_t sub_23AA9E2D0()
{
  return 16;
}

__n128 sub_23AA9E2DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E2E8@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))GroupActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9E300(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))GroupActionSchema.infoID.setter);
}

uint64_t sub_23AA9E32C()
{
  return 16;
}

__n128 sub_23AA9E338(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E344@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))GroupActionSchema.actions.getter, a1);
}

uint64_t sub_23AA9E35C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))GroupActionSchema.actions.setter);
}

uint64_t sub_23AA9E388()
{
  return 16;
}

__n128 sub_23AA9E394(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E3A0@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))GroupActionSchema.duration.getter, a1);
}

uint64_t sub_23AA9E3B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))GroupActionSchema.duration.setter);
}

uint64_t sub_23AA9E3E4()
{
  return 16;
}

__n128 sub_23AA9E3F0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E3FC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))GroupActionSchema.loops.getter, a1);
}

uint64_t sub_23AA9E414(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))GroupActionSchema.loops.setter);
}

uint64_t sub_23AA9E440()
{
  return 16;
}

__n128 sub_23AA9E44C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E458@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))GroupActionSchema.performCount.getter, a1);
}

uint64_t sub_23AA9E470(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))GroupActionSchema.performCount.setter);
}

uint64_t sub_23AA9E49C()
{
  return 16;
}

__n128 sub_23AA9E4A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E4B4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))GroupActionSchema.type.getter, a1);
}

uint64_t sub_23AA9E4CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))GroupActionSchema.type.setter);
}

uint64_t sub_23AA9E4F8()
{
  return 16;
}

__n128 sub_23AA9E504(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E510@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ImpulseActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9E528(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ImpulseActionSchema.infoID.setter);
}

uint64_t sub_23AA9E554()
{
  return 16;
}

__n128 sub_23AA9E560(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E56C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ImpulseActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9E584(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ImpulseActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9E5B0()
{
  return 16;
}

__n128 sub_23AA9E5BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E5C8@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))ImpulseActionSchema.velocity.getter, a1);
}

uint64_t sub_23AA9E5E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))ImpulseActionSchema.velocity.setter);
}

uint64_t sub_23AA9E60C()
{
  return 16;
}

__n128 sub_23AA9E618(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E624@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))LookAtCameraActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9E63C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))LookAtCameraActionSchema.infoID.setter);
}

uint64_t sub_23AA9E668()
{
  return 16;
}

__n128 sub_23AA9E674(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E680@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))LookAtCameraActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9E698(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))LookAtCameraActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9E6C4()
{
  return 16;
}

__n128 sub_23AA9E6D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E6DC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))LookAtCameraActionSchema.duration.getter, a1);
}

uint64_t sub_23AA9E6F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))LookAtCameraActionSchema.duration.setter);
}

uint64_t sub_23AA9E720()
{
  return 16;
}

__n128 sub_23AA9E72C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E738@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))LookAtCameraActionSchema.front.getter, a1);
}

uint64_t sub_23AA9E750(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))LookAtCameraActionSchema.front.setter);
}

uint64_t sub_23AA9E77C()
{
  return 16;
}

__n128 sub_23AA9E788(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E794@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))LookAtCameraActionSchema.upVector.getter, a1);
}

uint64_t sub_23AA9E7AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))LookAtCameraActionSchema.upVector.setter);
}

uint64_t sub_23AA9E7D8()
{
  return 16;
}

__n128 sub_23AA9E7E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E7F0@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))NotificationActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9E808(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))NotificationActionSchema.infoID.setter);
}

uint64_t sub_23AA9E834()
{
  return 16;
}

__n128 sub_23AA9E840(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E84C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))NotificationActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9E864(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))NotificationActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9E890()
{
  return 16;
}

__n128 sub_23AA9E89C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E8A8@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))NotificationActionSchema.identifier.getter, a1);
}

uint64_t sub_23AA9E8C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))NotificationActionSchema.identifier.setter);
}

uint64_t sub_23AA9E8EC()
{
  return 16;
}

__n128 sub_23AA9E8F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E904@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))OrbitActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9E91C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))OrbitActionSchema.infoID.setter);
}

uint64_t sub_23AA9E948()
{
  return 16;
}

__n128 sub_23AA9E954(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E960@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))OrbitActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9E978(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))OrbitActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9E9A4()
{
  return 16;
}

__n128 sub_23AA9E9B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9E9BC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))OrbitActionSchema.axis.getter, a1);
}

uint64_t sub_23AA9E9D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))OrbitActionSchema.axis.setter);
}

uint64_t sub_23AA9EA00()
{
  return 16;
}

__n128 sub_23AA9EA0C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EA18@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))OrbitActionSchema.center.getter, a1);
}

uint64_t sub_23AA9EA30(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))OrbitActionSchema.center.setter);
}

uint64_t sub_23AA9EA5C()
{
  return 16;
}

__n128 sub_23AA9EA68(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EA74@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))OrbitActionSchema.duration.getter, a1);
}

uint64_t sub_23AA9EA8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))OrbitActionSchema.duration.setter);
}

uint64_t sub_23AA9EAB8()
{
  return 16;
}

__n128 sub_23AA9EAC4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EAD0@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))OrbitActionSchema.revolutions.getter, a1);
}

uint64_t sub_23AA9EAE8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))OrbitActionSchema.revolutions.setter);
}

uint64_t sub_23AA9EB14()
{
  return 16;
}

__n128 sub_23AA9EB20(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EB2C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))OrbitActionSchema.alignToPath.getter, a1);
}

uint64_t sub_23AA9EB44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))OrbitActionSchema.alignToPath.setter);
}

uint64_t sub_23AA9EB70()
{
  return 16;
}

__n128 sub_23AA9EB7C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EB88@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))SpinActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9EBA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))SpinActionSchema.infoID.setter);
}

uint64_t sub_23AA9EBCC()
{
  return 16;
}

__n128 sub_23AA9EBD8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EBE4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))SpinActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9EBFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))SpinActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9EC28()
{
  return 16;
}

__n128 sub_23AA9EC34(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EC40@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))SpinActionSchema.axis.getter, a1);
}

uint64_t sub_23AA9EC58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))SpinActionSchema.axis.setter);
}

uint64_t sub_23AA9EC84()
{
  return 16;
}

__n128 sub_23AA9EC90(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EC9C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))SpinActionSchema.duration.getter, a1);
}

uint64_t sub_23AA9ECB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))SpinActionSchema.duration.setter);
}

uint64_t sub_23AA9ECE0()
{
  return 16;
}

__n128 sub_23AA9ECEC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9ECF8@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))SpinActionSchema.revolutions.getter, a1);
}

uint64_t sub_23AA9ED10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))SpinActionSchema.revolutions.setter);
}

uint64_t sub_23AA9ED3C()
{
  return 16;
}

__n128 sub_23AA9ED48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9ED54@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.infoID.getter, a1);
}

uint64_t sub_23AA9ED6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.infoID.setter);
}

uint64_t sub_23AA9ED98()
{
  return 16;
}

__n128 sub_23AA9EDA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EDB0@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9EDC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.affectedObjects.setter);
}

uint64_t sub_23AA9EDF4()
{
  return 16;
}

__n128 sub_23AA9EE00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EE0C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.multiplePerformOperation.getter, a1);
}

uint64_t sub_23AA9EE24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.multiplePerformOperation.setter);
}

uint64_t sub_23AA9EE50()
{
  return 16;
}

__n128 sub_23AA9EE5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EE68@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.animationSpeed.getter, a1);
}

uint64_t sub_23AA9EE80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.animationSpeed.setter);
}

uint64_t sub_23AA9EEAC()
{
  return 16;
}

__n128 sub_23AA9EEB8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EEC4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.duration.getter, a1);
}

uint64_t sub_23AA9EEDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.duration.setter);
}

uint64_t sub_23AA9EF08()
{
  return 16;
}

__n128 sub_23AA9EF14(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EF20@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.reversed.getter, a1);
}

uint64_t sub_23AA9EF38(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.reversed.setter);
}

uint64_t sub_23AA9EF64()
{
  return 16;
}

__n128 sub_23AA9EF70(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EF7C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.reverses.getter, a1);
}

uint64_t sub_23AA9EF94(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.reverses.setter);
}

uint64_t sub_23AA9EFC0()
{
  return 16;
}

__n128 sub_23AA9EFCC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9EFD8@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))StartAnimationSchema.start.getter, a1);
}

uint64_t sub_23AA9EFF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))StartAnimationSchema.start.setter);
}

uint64_t sub_23AA9F01C()
{
  return 16;
}

__n128 sub_23AA9F028(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F034@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TransformActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9F04C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TransformActionSchema.infoID.setter);
}

uint64_t sub_23AA9F078()
{
  return 16;
}

__n128 sub_23AA9F084(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F090@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TransformActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9F0A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TransformActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9F0D4()
{
  return 16;
}

__n128 sub_23AA9F0E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F0EC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TransformActionSchema.duration.getter, a1);
}

uint64_t sub_23AA9F104(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TransformActionSchema.duration.setter);
}

uint64_t sub_23AA9F130()
{
  return 16;
}

__n128 sub_23AA9F13C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F148@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TransformActionSchema.easeType.getter, a1);
}

uint64_t sub_23AA9F160(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TransformActionSchema.easeType.setter);
}

uint64_t sub_23AA9F18C()
{
  return 16;
}

__n128 sub_23AA9F198(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F1A4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TransformActionSchema.relativeToObject.getter, a1);
}

uint64_t sub_23AA9F1BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TransformActionSchema.relativeToObject.setter);
}

uint64_t sub_23AA9F1E8()
{
  return 16;
}

__n128 sub_23AA9F1F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F200@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TransformActionSchema.type.getter, a1);
}

uint64_t sub_23AA9F218(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TransformActionSchema.type.setter);
}

uint64_t sub_23AA9F244()
{
  return 16;
}

__n128 sub_23AA9F250(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F25C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))TransformActionSchema.xformTarget.getter, a1);
}

uint64_t sub_23AA9F274(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))TransformActionSchema.xformTarget.setter);
}

uint64_t sub_23AA9F2A0()
{
  return 16;
}

__n128 sub_23AA9F2AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F2B8@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9F2D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.infoID.setter);
}

uint64_t sub_23AA9F2FC()
{
  return 16;
}

__n128 sub_23AA9F308(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F314@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_23AA9F32C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.affectedObjects.setter);
}

uint64_t sub_23AA9F358()
{
  return 16;
}

__n128 sub_23AA9F364(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F370@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.duration.getter, a1);
}

uint64_t sub_23AA9F388(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.duration.setter);
}

uint64_t sub_23AA9F3B4()
{
  return 16;
}

__n128 sub_23AA9F3C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F3CC@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.easeType.getter, a1);
}

uint64_t sub_23AA9F3E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.easeType.setter);
}

uint64_t sub_23AA9F410()
{
  return 16;
}

__n128 sub_23AA9F41C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F428@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.motionType.getter, a1);
}

uint64_t sub_23AA9F440(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.motionType.setter);
}

uint64_t sub_23AA9F46C()
{
  return 16;
}

__n128 sub_23AA9F478(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F484@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.moveDistance.getter, a1);
}

uint64_t sub_23AA9F49C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.moveDistance.setter);
}

uint64_t sub_23AA9F4C8()
{
  return 16;
}

__n128 sub_23AA9F4D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F4E0@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.style.getter, a1);
}

uint64_t sub_23AA9F4F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.style.setter);
}

uint64_t sub_23AA9F524()
{
  return 16;
}

__n128 sub_23AA9F530(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F53C@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))VisibilityActionSchema.type.getter, a1);
}

uint64_t sub_23AA9F554(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))VisibilityActionSchema.type.setter);
}

uint64_t sub_23AA9F580()
{
  return 16;
}

__n128 sub_23AA9F58C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F598@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))WaitActionSchema.infoID.getter, a1);
}

uint64_t sub_23AA9F5B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))WaitActionSchema.infoID.setter);
}

uint64_t sub_23AA9F5DC()
{
  return 16;
}

__n128 sub_23AA9F5E8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_23AA9F5F4@<X0>(void *a1@<X8>)
{
  return keypath_getTm_1((void *(*)(void *__return_ptr))WaitActionSchema.duration.getter, a1);
}

void *keypath_getTm_1@<X0>(void *(*a1)(void *__return_ptr)@<X3>, void *a2@<X8>)
{
  __n128 result = a1(v5);
  uint64_t v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t sub_23AA9F648(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CollideTriggerSchema.infoID : <A>A(a1, a2, a3, a4, (uint64_t (*)(void *))WaitActionSchema.duration.setter);
}

uint64_t sub_23AA9F674()
{
  return 16;
}

__n128 sub_23AA9F680(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a2, v5, v7);
  unint64_t v10 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, v10);
    *a3 = v10;
  }
  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v10);
    *a3 = v10;
  }
  *(void *)(v10 + 16) = v13 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v13, v9, v5);
}

uint64_t closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for __RKEntityTriggerSpecification();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
  uint64_t v12 = *(int *)(v11 + 48);
  uint64_t v13 = *(int *)(v11 + 64);
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v10, a2, v14);
  *(void *)&v10[v12] = *a4;
  *(void *)&v10[v13] = MEMORY[0x263F8EE78];
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F163E8], v7);
  unint64_t v15 = *a3;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, v15);
    *a3 = v15;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v15);
    *a3 = v15;
  }
  *(void *)(v15 + 16) = v18 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v18, v10, v7);
}

uint64_t specialized static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)()
{
  uint64_t v0 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v4 = &v6;
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(0x726564696C6C6F63, 0xE900000000000073, (uint64_t)partial apply for closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:), (uint64_t)v3);
  if (*(void *)(v6 + 16))
  {
    uint64_t v5 = v0;
    MEMORY[0x270FA5388](v6);
    v2[2] = &v5;
    v2[3] = &v6;
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:), (uint64_t)v2);
    uint64_t v0 = v5;
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t partial apply for closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t partial apply for closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(void **)(v2 + 24));
}

unint64_t SceneDescriptionFoundations.AttributeSpec.description.getter()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)RIOPxrSdfAttributeSpecCopyLayer();
  uint64_t v1 = (void *)RIOPxrSdfLayerCopyIdentifier();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000019;
}

unint64_t SceneDescriptionFoundations.AttributeSpec.debugDescription.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = SceneDescriptionFoundations.AttributeSpec.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000010;
}

Swift::Bool __swiftcall SceneDescriptionFoundations.AttributeSpec.hasColorSpace()()
{
  return RIOPxrSdfAttributeSpecHasColorSpace();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.AttributeSpec.isBlocked()()
{
  return RIOPxrSdfAttributeSpecIsBlocked();
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.AttributeSpec()
{
  return &type metadata for SceneDescriptionFoundations.AttributeSpec;
}

uint64_t key path getter for Outputs.subscript(_:) : Outputs()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t key path setter for Outputs.subscript(_:) : Outputs(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  outlined init with copy of Any?(a1, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return Outputs.subscript.setter((uint64_t)v6, v4, v3);
}

uint64_t Outputs.subscript.getter()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t closure #1 in Outputs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v11)
    {
      outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v10, (uint64_t)a4);
    }
    else
    {
      *a4 = 0u;
      a4[1] = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t Outputs.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  uint64_t v8 = *(NSObject **)(v3 + 16);
  outlined init with copy of Any?(a1, (uint64_t)v14);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v4;
  v9[3] = a2;
  void v9[4] = a3;
  outlined init with take of Any?((uint64_t)v14, (uint64_t)(v9 + 5));
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in Outputs.subscript.setter;
  *(void *)(v10 + 24) = v9;
  v13[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v13[5] = v10;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  _OWORD v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  v13[3] = &block_descriptor_24;
  char v11 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  outlined destroy of Any?(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

void closure #1 in Outputs.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of Any?(a4, (uint64_t)v11);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v11, a2, a3);
  swift_endAccess();
  outlined init with copy of Any?(a4, (uint64_t)v11);
  if (v12)
  {
    if (swift_dynamicCast())
    {
      uint64_t v7 = (void *)MEMORY[0x23ECB9F30]();
      swift_bridgeObjectRelease();
      id v8 = objc_msgSend(v7, sel_UTF8String);
      id v9 = v7;
      if (v8)
      {
        uint64_t v10 = (void *)MEMORY[0x23ECB9F30](a2, a3);
        RIOBuilderOutputsStoreValueWithName();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11);
  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AAA03F0()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_0(v0 + 40);
  }
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in Outputs.subscript.setter()
{
  closure #1 in Outputs.subscript.setter(v0[2], v0[3], v0[4], (uint64_t)(v0 + 5));
}

uint64_t sub_23AAA04B8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

void (*Outputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[9] = a3;
  v7[10] = v3;
  v7[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  OS_dispatch_queue.sync<A>(execute:)();
  return Outputs.subscript.modify;
}

void Outputs.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v3 = v2[9];
    uint64_t v4 = v2[8];
    outlined init with copy of Any?(*a1, (uint64_t)(v2 + 4));
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)(v2 + 4), v4, v3);
    outlined destroy of Any?((uint64_t)v2);
  }
  else
  {
    uint64_t v5 = v2[9];
    uint64_t v6 = v2[8];
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)v2, v6, v5);
  }
  free(v2);
}

void *Outputs.init(core:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v9 - 8);
  type metadata accessor for OS_dispatch_queue();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F130], v4);
  v2[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v2[3] = a1;
  void v2[4] = v10;
  RIOBuilderOutputsSetSwiftObject();
  return v2;
}

uint64_t Outputs.deinit()
{
  RIOBuilderOutputsSetSwiftObject();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Outputs.__deallocating_deinit()
{
  RIOBuilderOutputsSetSwiftObject();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23AAA08A8()
{
  return 0;
}

uint64_t type metadata accessor for Outputs()
{
  return self;
}

uint64_t method lookup function for Outputs(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Outputs);
}

uint64_t dispatch thunk of Outputs.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of Outputs.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of Outputs.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

id AudioConstants.AudioFile.CalibrationMode.levelToken.getter@<X0>(void *a1@<X8>)
{
  if (*v1 <= 1u)
  {
    if (String.count.getter() >= 1) {
      goto LABEL_5;
    }
LABEL_6:
    id result = (id)RIOPxrTfTokenEmpty();
    goto LABEL_7;
  }
  if (String.count.getter() < 1) {
    goto LABEL_6;
  }
LABEL_5:
  id result = (id)RIOPxrTfTokenCreateWithCString();
LABEL_7:
  *a1 = result;
  return result;
}

void AudioConstants.AudioFile.Normalization.init(rawValue:)(id *a1@<X0>, char *a2@<X8>)
{
  id v3 = *a1;
  if (String.count.getter() < 1) {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v5 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  char v6 = static _CFObject.== infix(_:_:)();

  if (v6)
  {

    char v7 = 0;
  }
  else
  {
    if (String.count.getter() < 1) {
      id v8 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v8 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v9 = v8;
    char v10 = static _CFObject.== infix(_:_:)();

    if (v10) {
      char v7 = 1;
    }
    else {
      char v7 = 2;
    }
  }
  *a2 = v7;
}

void AudioConstants.AudioFile.CalibrationMode.init(rawValue:)(id *a1@<X0>, char *a2@<X8>)
{
  id v3 = *a1;
  if (String.count.getter() < 1) {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v5 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  char v6 = static _CFObject.== infix(_:_:)();

  if (v6)
  {

    char v7 = 0;
  }
  else
  {
    if (String.count.getter() < 1) {
      id v8 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v8 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v9 = v8;
    char v10 = static _CFObject.== infix(_:_:)();

    if (v10)
    {

      char v7 = 1;
    }
    else
    {
      if (String.count.getter() < 1) {
        id v11 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v11 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v12 = v11;
      char v13 = static _CFObject.== infix(_:_:)();

      if (v13) {
        char v7 = 2;
      }
      else {
        char v7 = 3;
      }
    }
  }
  *a2 = v7;
}

float AudioConstants.AudioFile.CalibrationMode.defaultValue.getter()
{
  float result = 80.0;
  if (*v0 != 1) {
    return 0.0;
  }
  return result;
}

id static AudioConstants.AudioFile.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static AudioConstants.AudioFile.primType, a1);
}

id one-time initialization function for assetPath()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.assetPath = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.assetPath.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for assetPath, (void **)&static AudioConstants.AudioFile.assetPath, a1);
}

id one-time initialization function for mixGroup()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.mixGroup = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.mixGroup.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for mixGroup, (void **)&static AudioConstants.AudioFile.mixGroup, a1);
}

id one-time initialization function for loadingStrategy()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.loadingStrategy = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.loadingStrategy.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for loadingStrategy, (void **)&static AudioConstants.AudioFile.loadingStrategy, a1);
}

id one-time initialization function for shouldLoop()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.shouldLoop = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.shouldLoop.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for shouldLoop, (void **)&static AudioConstants.AudioFile.shouldLoop, a1);
}

id one-time initialization function for randomizeStart()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.randomizeStart = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.randomizeStart.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for randomizeStart, (void **)&static AudioConstants.AudioFile.randomizeStart, a1);
}

id one-time initialization function for calibrationMode()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.calibrationMode = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.calibrationMode.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for calibrationMode, (void **)&static AudioConstants.AudioFile.calibrationMode, a1);
}

void *static AudioConstants.AudioFile.CalibrationMode.allCases.getter()
{
  return &outlined read-only object #0 of static AudioConstants.AudioFile.CalibrationMode.allCases.getter;
}

id AudioConstants.AudioFile.CalibrationMode.rawValue.getter@<X0>(void *a1@<X8>)
{
  if (!*v1)
  {
    if (String.count.getter() >= 1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*v1 == 1)
  {
    if (String.count.getter() >= 1) {
      goto LABEL_8;
    }
LABEL_9:
    id result = (id)RIOPxrTfTokenEmpty();
    goto LABEL_10;
  }
  if (String.count.getter() < 1) {
    goto LABEL_9;
  }
LABEL_8:
  id result = (id)RIOPxrTfTokenCreateWithCString();
LABEL_10:
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioConstants.AudioFile.CalibrationMode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioConstants.AudioFile.CalibrationMode()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  char v5 = v1;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v4);
  uint64_t v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioConstants.AudioFile.CalibrationMode()
{
  char v3 = *v0;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v2);
  id v1 = v2;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioConstants.AudioFile.CalibrationMode()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  char v5 = v1;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v4);
  uint64_t v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.CalibrationMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.CalibrationMode;
}

id one-time initialization function for normalization()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.normalizatiouint64_t n = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.normalization.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for normalization, (void **)&static AudioConstants.AudioFile.normalization, a1);
}

void *static AudioConstants.AudioFile.Normalization.allCases.getter()
{
  return &outlined read-only object #0 of static AudioConstants.AudioFile.Normalization.allCases.getter;
}

id AudioConstants.AudioFile.Normalization.rawValue.getter@<X0>(void *a1@<X8>)
{
  if (*v1)
  {
    if (String.count.getter() >= 1) {
      goto LABEL_5;
    }
LABEL_6:
    id result = (id)RIOPxrTfTokenEmpty();
    goto LABEL_7;
  }
  if (String.count.getter() < 1) {
    goto LABEL_6;
  }
LABEL_5:
  id result = (id)RIOPxrTfTokenCreateWithCString();
LABEL_7:
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioConstants.AudioFile.Normalization(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioConstants.AudioFile.Normalization()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  char v5 = v1;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v4);
  uint64_t v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioConstants.AudioFile.Normalization()
{
  char v3 = *v0;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v2);
  id v1 = v2;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioConstants.AudioFile.Normalization()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  char v5 = v1;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v4);
  uint64_t v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.Normalization(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.Normalization;
}

uint64_t static AudioConstants.AudioFile.shouldLoopDefault.getter()
{
  return 0;
}

uint64_t static AudioConstants.AudioFile.randomizeStartDefault.getter()
{
  return 0;
}

void static AudioConstants.AudioFile.calibrationModeDefault.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static AudioConstants.AudioFile.normalizationDefault.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

id static AudioConstants.AudioFileGroup.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static AudioConstants.AudioFileGroup.primType, a1);
}

id static AudioConstants.MixGroup.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static AudioConstants.MixGroup.primType, a1);
}

id one-time initialization function for gain()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.MixGroup.gaiuint64_t n = (uint64_t)result;
  return result;
}

id static AudioConstants.MixGroup.gain.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for gain, (void **)&static AudioConstants.MixGroup.gain, a1);
}

id one-time initialization function for speed()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.MixGroup.speed = (uint64_t)result;
  return result;
}

id static AudioConstants.MixGroup.speed.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for speed, (void **)&static AudioConstants.MixGroup.speed, a1);
}

id one-time initialization function for mute()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.MixGroup.mute = (uint64_t)result;
  return result;
}

id static AudioConstants.MixGroup.mute.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for mute, (void **)&static AudioConstants.MixGroup.mute, a1);
}

double static AudioConstants.MixGroup.gainDefault.getter()
{
  return 0.0;
}

double static AudioConstants.MixGroup.speedDefault.getter()
{
  return 1.0;
}

uint64_t static AudioConstants.MixGroup.muteDefault.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode;
  if (!lazy protocol witness table cache variable for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AudioConstants.AudioFile.CalibrationMode()
{
  return lazy protocol witness table accessor for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A](&lazy protocol witness table cache variable for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A], &demangling cache variable for type metadata for [AudioConstants.AudioFile.CalibrationMode]);
}

unint64_t lazy protocol witness table accessor for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization;
  if (!lazy protocol witness table cache variable for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AudioConstants.AudioFile.Normalization()
{
  return lazy protocol witness table accessor for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A](&lazy protocol witness table cache variable for type [AudioConstants.AudioFile.Normalization] and conformance [A], &demangling cache variable for type metadata for [AudioConstants.AudioFile.Normalization]);
}

uint64_t lazy protocol witness table accessor for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioConstants()
{
  return &type metadata for AudioConstants;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFile()
{
  return &type metadata for AudioConstants.AudioFile;
}

unsigned char *storeEnumTagSinglePayload for AudioConstants.AudioFile.CalibrationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23AAA1ADCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFile.CalibrationMode()
{
  return &type metadata for AudioConstants.AudioFile.CalibrationMode;
}

uint64_t getEnumTagSinglePayload for AudioConstants.AudioFile.Normalization(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AudioConstants.AudioFile.Normalization(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23AAA1C70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AudioConstants.AudioFile.Normalization(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFile.Normalization()
{
  return &type metadata for AudioConstants.AudioFile.Normalization;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFileGroup()
{
  return &type metadata for AudioConstants.AudioFileGroup;
}

ValueMetadata *type metadata accessor for AudioConstants.MixGroup()
{
  return &type metadata for AudioConstants.MixGroup;
}

uint64_t ObjectsChangeNoticePublisher.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObjectsChangeNoticeSubscription();
  swift_allocObject();
  int v3 = specialized ObjectsChangeNoticeSubscription.init(_:)(a1);
  v5[3] = v2;
  void v5[4] = swift_getWitnessTable();
  v5[0] = v3;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
}

uint64_t type metadata accessor for ObjectsChangeNoticeSubscription()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance ObjectsChangeNoticePublisher(uint64_t a1)
{
  return ObjectsChangeNoticePublisher.receive<A>(subscriber:)(a1);
}

uint64_t closure #1 in ObjectsChangeNoticeSubscription.init(_:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 16))
    {
      uint64_t v2 = (uint64_t *)(result + 24);
      swift_beginAccess();
      uint64_t v3 = *(void *)(v1 + 24);
      static Subscribers.Demand.unlimited.getter();
      uint64_t result = static Subscribers.Demand.== infix(_:_:)();
      if (result) {
        goto LABEL_6;
      }
      if (v3 < 0)
      {
        __break(1u);
        goto LABEL_26;
      }
      if (v3)
      {
LABEL_6:
        swift_beginAccess();
        uint64_t v4 = *v2;
        static Subscribers.Demand.unlimited.getter();
        if (static Subscribers.Demand.== infix(_:_:)())
        {
LABEL_13:
          swift_endAccess();
          ObjectsChangeInfo.init(_:)(&v10);
          uint64_t v6 = dispatch thunk of Subscriber.receive(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_beginAccess();
          uint64_t v7 = *v2;
          static Subscribers.Demand.unlimited.getter();
          if (static Subscribers.Demand.== infix(_:_:)())
          {
LABEL_22:
            swift_endAccess();
            return swift_release();
          }
          static Subscribers.Demand.unlimited.getter();
          char v8 = static Subscribers.Demand.== infix(_:_:)();
          uint64_t v9 = static Subscribers.Demand.unlimited.getter();
          if (v8)
          {
LABEL_21:
            uint64_t *v2 = v9;
            goto LABEL_22;
          }
          uint64_t result = static Subscribers.Demand.== infix(_:_:)();
          if (result)
          {
LABEL_19:
            uint64_t v9 = static Subscribers.Demand.unlimited.getter();
            goto LABEL_21;
          }
          if (((v7 | v6) & 0x8000000000000000) == 0)
          {
            uint64_t v9 = v7 + v6;
            if (!__OFADD__(v7, v6))
            {
              if ((v9 & 0x8000000000000000) == 0) {
                goto LABEL_21;
              }
LABEL_29:
              __break(1u);
              return result;
            }
            goto LABEL_19;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        static Subscribers.Demand.unlimited.getter();
        uint64_t result = static Subscribers.Demand.== infix(_:_:)();
        if (result)
        {
          uint64_t v5 = static Subscribers.Demand.unlimited.getter();
LABEL_12:
          uint64_t *v2 = v5;
          goto LABEL_13;
        }
        if ((v4 & 0x8000000000000000) == 0)
        {
          if (v4)
          {
            uint64_t v5 = v4 - 1;
            goto LABEL_12;
          }
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t ObjectsChangeNoticeSubscription.request(_:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  static Subscribers.Demand.unlimited.getter();
  if (static Subscribers.Demand.== infix(_:_:)()) {
    return swift_endAccess();
  }
  static Subscribers.Demand.unlimited.getter();
  char v5 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v6 = static Subscribers.Demand.unlimited.getter();
  if (v5)
  {
LABEL_9:
    *uint64_t v3 = v6;
    return swift_endAccess();
  }
  uint64_t result = static Subscribers.Demand.== infix(_:_:)();
  if (result) {
    goto LABEL_7;
  }
  if ((v4 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = v4 + a1;
  if (__OFADD__(v4, a1))
  {
LABEL_7:
    uint64_t v6 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t ObjectsChangeNoticeSubscription.cancel()()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    return MEMORY[0x270F21E08]();
  }
  return result;
}

uint64_t ObjectsChangeNoticeSubscription.deinit()
{
  uint64_t v1 = v0 + direct field offset for ObjectsChangeNoticeSubscription.combineIdentifier;
  uint64_t v2 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ObjectsChangeNoticeSubscription.__deallocating_deinit()
{
  ObjectsChangeNoticeSubscription.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Subscription.request(_:) in conformance ObjectsChangeNoticeSubscription<A>(uint64_t a1)
{
  return ObjectsChangeNoticeSubscription.request(_:)(a1);
}

uint64_t protocol witness for Cancellable.cancel() in conformance ObjectsChangeNoticeSubscription<A>()
{
  return ObjectsChangeNoticeSubscription.cancel()();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance ObjectsChangeNoticeSubscription<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + direct field offset for ObjectsChangeNoticeSubscription.combineIdentifier;
  uint64_t v4 = type metadata accessor for CombineIdentifier();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

void *specialized ObjectsChangeNoticeSubscription.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)aBlock - v6;
  v1[2] = 0;
  v1[3] = static Subscribers.Demand.none.getter();
  CombineIdentifier.init()();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = (char *)swift_allocObject();
  *((void *)v10 + 2) = v4;
  *((void *)v10 + 3) = *(void *)(v3 + 88);
  *((void *)v10 + 4) = v8;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v10[v9], v7, v4);
  aBlock[4] = partial apply for closure #1 in ObjectsChangeNoticeSubscription.init(_:);
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
  void aBlock[3] = &block_descriptor_25;
  id v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v12 = RIOPxrUsdNoticeObjectsChangedAddNoticeCallback();
  _Block_release(v11);
  swift_release();
  char v13 = (void *)v1[2];
  v1[2] = v12;

  return v1;
}

ValueMetadata *type metadata accessor for ObjectsChangeNoticePublisher()
{
  return &type metadata for ObjectsChangeNoticePublisher;
}

uint64_t type metadata completion function for ObjectsChangeNoticeSubscription()
{
  uint64_t result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for Cancellable in ObjectsChangeNoticeSubscription<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in ObjectsChangeNoticeSubscription<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_23AAA2524()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_23AAA255C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ObjectsChangeNoticeSubscription.init(_:)()
{
  return closure #1 in ObjectsChangeNoticeSubscription.init(_:)();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

void OutputDescriptor.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int OutputDescriptor.hashValue.getter()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OutputDescriptor()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance OutputDescriptor()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OutputDescriptor()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized static OutputDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  BOOL v8 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v9 & 1) != 0))
  {
    if (v2 == v5 && v3 == v6) {
      return v4 ^ v7 ^ 1u;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if (v12) {
      return v4 ^ v7 ^ 1u;
    }
  }
  return result;
}

uint64_t destroy for OutputDescriptor()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OutputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OutputDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OutputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for OutputDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OutputDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OutputDescriptor()
{
  return &type metadata for OutputDescriptor;
}

uint64_t closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, int a5, int a6)
{
  int v30 = a5;
  int v31 = a6;
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a2, v11, v17);
  uint64_t v20 = v7;
  uint64_t v21 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v28, v20);
  __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, *MEMORY[0x263F16370], v15);
  unint64_t v22 = *v21;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v21 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22);
    *uint64_t v21 = v22;
  }
  unint64_t v25 = *(void *)(v22 + 16);
  unint64_t v24 = *(void *)(v22 + 24);
  if (v25 >= v24 >> 1)
  {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
    *uint64_t v21 = v22;
  }
  *(void *)(v22 + 16) = v25 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v22+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v25, v19, v15);
}

uint64_t specialized static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)()
{
  uint64_t v0 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v32 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  unint64_t v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v10 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v10 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  uint64_t v11 = v34;
  if (v35 == 1)
  {
    char v33 = v34;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v12 = v11;
LABEL_23:
    outlined consume of Result<Double, Object.Error>(v12, 1);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v31 = v7;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v13 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v13 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  uint64_t v14 = v34;
  if (v35 == 1) {
    goto LABEL_22;
  }
  int v30 = v34;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v15 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v15 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  uint64_t v14 = v34;
  if (v35 == 1) {
    goto LABEL_22;
  }
  uint64_t v29 = (uint64_t)v34;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v16 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v16 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  uint64_t v14 = v34;
  if (v35 == 1) {
    goto LABEL_22;
  }
  uint64_t v28 = v34;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v17 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v17 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  uint64_t v18 = v31;
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  uint64_t v14 = v34;
  if (v35)
  {
LABEL_22:
    char v33 = v14;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v12 = v14;
    goto LABEL_23;
  }
  swift_retain();
  __RKEntityActionMultiplePerformBehavior.init(inputs:)((uint64_t)v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v5, 0, 1, v6);
  uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v9, v5, v6);
  unint64_t v34 = (void *)MEMORY[0x263F8EE78];
  MEMORY[0x270FA5388](v21);
  *(&v27 - 8) = (uint64_t)&v34;
  *(&v27 - 7) = (uint64_t)v9;
  uint64_t v22 = (uint64_t)v30;
  *(&v27 - 6) = (uint64_t)v11;
  *(&v27 - 5) = v22;
  *((unsigned char *)&v27 - 32) = v29 & 1;
  *(&v27 - 3) = (uint64_t)v28;
  *((unsigned char *)&v27 - 16) = v14 & 1;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:), (uint64_t)(&v27 - 10));
  uint64_t v19 = (uint64_t)v34;
  if (v34[2] < 2uLL)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v23 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v24 = *(void *)(v23 - 8);
    unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_23AAB22A0;
    (*(void (**)(char *, void, uint64_t))(v32 + 104))(v2, *MEMORY[0x263F16310], v0);
    swift_bridgeObjectRetain_n();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, void, uint64_t))(v24 + 104))(v26 + v25, *MEMORY[0x263F163A8], v23);
    swift_bridgeObjectRelease();
    uint64_t v19 = v26;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t outlined destroy of __RKEntityActionMultiplePerformBehavior?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 48), *(unsigned __int8 *)(v2 + 64));
}

BOOL static SceneDescriptionFoundations.Variability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SceneDescriptionFoundations.Variability.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SceneDescriptionFoundations.Variability.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Variability(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SceneDescriptionFoundations.Variability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23AAA3910);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Variability()
{
  return &type metadata for SceneDescriptionFoundations.Variability;
}

uint64_t specialized RIOPxrVtValueRef.mapUSDValue<A>()()
{
  uint64_t v0 = RIOPxrVtValueCopyString();
  if (v0)
  {
    Swift::UInt v1 = (void *)v0;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  if (swift_dynamicCast()) {
    return v3;
  }
  else {
    return 0;
  }
}

void one-time initialization function for ResourceNameOutputName()
{
  *(_WORD *)&algn_268A58518[6] = -4864;
}

void one-time initialization function for GroupNameOutputName()
{
  algn_268A58528[7] = -18;
}

void one-time initialization function for ResourceNameOutputIdentifier()
{
  algn_268A58538[5] = 0;
  *(_WORD *)&algn_268A58538[6] = -5120;
}

void one-time initialization function for GroupNameOutputIdentifier()
{
  *(_WORD *)&algn_268A58548[6] = -4864;
}

uint64_t closure #1 in ReferenceImageBuilder.stageSubscription.getter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v1;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = closure #1 in closure #1 in ReferenceImageBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  unsigned int v6 = (void *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8EE88];
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x263F8EE88]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AAB22C0;
  *(void *)(v9 + 32) = v6;
  unint64_t v12 = v9;
  specialized Array._endMutation()();
  uint64_t v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v12);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t closure #1 in closure #1 in ReferenceImageBuilder.stageSubscription.getter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v1 = v0;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v2 = (void *)swift_allocObject();
  void v2[4] = v1;
  id v3 = v1;
  uint64_t v4 = MEMORY[0x263F8EE88];
  id v5 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v3, MEMORY[0x263F8EE88]);

  v2[2] = v4;
  v2[3] = v5;
  swift_retain();
  if (String.count.getter() < 1) {
    id v6 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v6 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v7 = v6;
  id v8 = (void *)swift_allocObject();
  v8[4] = v7;
  id v9 = v7;
  id v10 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v9, v4);

  void v8[2] = v4;
  v8[3] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2570;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v8;
  unint64_t v14 = inited;
  specialized Array._endMutation()();
  uint64_t v12 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v14);
  swift_bridgeObjectRelease();
  swift_release();
  return v12;
}

void closure #1 in ReferenceImageBuilder.ImageReferenceState.init(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = RIOBuilderInputsCopyStage();
  if (!v4)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v5 = (void *)v4;
  id v6 = (void *)RIOPxrUsdStageCopyRootLayer();
  int HasCustomLayerMetaData = RIOPxrSdfLayerHasCustomLayerMetaData();

  if (!HasCustomLayerMetaData) {
    goto LABEL_12;
  }
  uint64_t v8 = RIOBuilderInputsCopyStage();
  if (!v8)
  {
LABEL_16:
    __break(1u);
    return;
  }
  id v9 = (void *)v8;
  if (String.count.getter() < 1) {
    id v10 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v10 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v11 = v10;
  uint64_t v12 = (void *)RIOPxrUsdStageCopyRootLayer();
  id v13 = (void *)RIOPxrSdfLayerCopyCustomLayerDataValue();

  if (!v13)
  {

    goto LABEL_12;
  }
  uint64_t v14 = specialized RIOPxrVtValueRef.mapUSDValue<A>()();
  uint64_t v16 = v15;

  if (!v16) {
    goto LABEL_12;
  }
  v20[0] = v14;
  v20[1] = v16;
  Regex.init(_regexString:version:)();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type Regex<Substring> and conformance Regex<A>();
  char v17 = BidirectionalCollection<>.starts<A>(with:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
LABEL_12:
    uint64_t v18 = RIOBuilderInputsCopyStage();
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      RIOPxrUsdStageGetMetersPerUnit();

      return;
    }
    goto LABEL_15;
  }
}

uint64_t ReferenceImageBuilder.run(inputs:)()
{
  uint64_t v1 = v0;
  swift_retain();
  specialized ReferenceImageBuilder.ImageReferenceState.init(_:)(v21);
  uint64_t result = outlined init with take of ReferenceImageBuilder.ImageReferenceState?((uint64_t)v21, (uint64_t)&v22);
  if (!v23) {
    return result;
  }
  uint64_t v4 = v25;
  uint64_t v3 = v26;
  uint64_t v6 = v27;
  uint64_t v5 = v28;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20F28]), sel_initWithCGImage_orientation_physicalWidth_, v24, 1, v22);
  dispatch thunk of __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)();
  uint64_t v8 = (void *)MEMORY[0x23ECB9F30]();
  objc_msgSend(v7, sel_setName_, v8);

  id v9 = v7;
  dispatch thunk of __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)();
  swift_bridgeObjectRelease();

  swift_beginAccess();
  id v10 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (!v10)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v17 = v4;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v18, &v19);
  type metadata accessor for Outputs();
  swift_dynamicCast();
  if (one-time initialization token for ResourceNameOutputName != -1) {
    swift_once();
  }
  uint64_t v11 = static ReferenceImageBuilder.ResourceNameOutputName;
  uint64_t v12 = *(void *)algn_268A58518;
  uint64_t v13 = MEMORY[0x263F8D310];
  uint64_t v20 = MEMORY[0x263F8D310];
  *(void *)&long long v19 = v6;
  *((void *)&v19 + 1) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v19, v11, v12);
  swift_release();
  swift_beginAccess();
  id v14 = objc_getAssociatedObject(v1, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (!v14) {
    goto LABEL_11;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v18, &v19);
  swift_dynamicCast();
  if (one-time initialization token for GroupNameOutputName != -1) {
    swift_once();
  }
  uint64_t v15 = static ReferenceImageBuilder.GroupNameOutputName;
  uint64_t v16 = *(void *)algn_268A58528;
  uint64_t v20 = v13;
  *(void *)&long long v19 = v17;
  *((void *)&v19 + 1) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v19, v15, v16);
  swift_release();
  return outlined release of ReferenceImageBuilder.ImageReferenceState?((uint64_t)v21);
}

uint64_t type metadata accessor for ReferenceImageBuilder()
{
  return self;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance ReferenceImageBuilder()
{
  uint64_t v0 = closure #1 in ReferenceImageBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v5 = inited;
  specialized Array._endMutation()();
  uint64_t v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

CGImageRef specialized static CGImageRef.image(with:)(uint64_t a1, unint64_t a2)
{
  CGImageRef ImageAtIndex = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 == a1 >> 32) {
        return 0;
      }
      goto LABEL_7;
    case 2uLL:
      if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
        goto LABEL_7;
      }
      return 0;
    case 3uLL:
      return ImageAtIndex;
    default:
      if ((a2 & 0xFF000000000000) == 0) {
        return 0;
      }
LABEL_7:
      CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v4 = CGImageSourceCreateWithData(isa, 0);

      if (!v4) {
        return 0;
      }
      size_t PrimaryImageIndex = CGImageSourceGetPrimaryImageIndex(v4);
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, PrimaryImageIndex, 0);

      return ImageAtIndex;
  }
}

Swift::Int specialized ReferenceImageBuilder.outputDescriptors()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24E0;
  if (one-time initialization token for ResourceNameOutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static ReferenceImageBuilder.ResourceNameOutputName;
  uint64_t v1 = *(void *)algn_268A58518;
  uint64_t v3 = one-time initialization token for ResourceNameOutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = static ReferenceImageBuilder.ResourceNameOutputIdentifier;
  uint64_t v4 = *(void *)algn_268A58538;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v4;
  *(unsigned char *)(inited + 64) = 0;
  uint64_t v6 = one-time initialization token for GroupNameOutputName;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = static ReferenceImageBuilder.GroupNameOutputName;
  uint64_t v7 = *(void *)algn_268A58528;
  uint64_t v9 = one-time initialization token for GroupNameOutputIdentifier;
  swift_bridgeObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = static ReferenceImageBuilder.GroupNameOutputIdentifier;
  uint64_t v10 = *(void *)algn_268A58548;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 80) = v7;
  *(void *)(inited + 88) = v11;
  *(void *)(inited + 96) = v10;
  *(unsigned char *)(inited + 104) = 0;
  swift_bridgeObjectRetain();
  Swift::Int v12 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v12;
}

void specialized ReferenceImageBuilder.ImageReferenceState.init(_:)(void *a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1) {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v3 = v2;
  if (!RIOPxrUsdPrimHasAttribute())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
LABEL_18:
    swift_release();
    swift_release();
    id v14 = 0;
    char v15 = 1;
LABEL_19:
    outlined consume of Result<AnyAttribute, Object.Error>(v14, v15);
    goto LABEL_20;
  }
  uint64_t v4 = RIOPxrUsdPrimCopyAttribute();

  type metadata accessor for AnyAttribute();
  uint64_t v5 = (void *)swift_allocObject();
  void v5[2] = v4;
  if (String.count.getter() <= 0) {
    id v6 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v6 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v7 = v6;
  if (!RIOPxrUsdPrimHasAttribute())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    goto LABEL_18;
  }
  uint64_t v8 = RIOPxrUsdPrimCopyAttribute();

  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v8;
  uint64_t EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue) {
    uint64_t EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  }
  uint64_t v11 = (void *)RIOPxrVtValueCopyAssetPath();
  if (!v11)
  {
    swift_release();

    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);
    swift_release();
    goto LABEL_20;
  }

  Swift::Int v12 = (void *)RIOPxrUsdAttributeCopyValue();
  if (!v12) {
    Swift::Int v12 = (void *)RIOPxrVtValueCreateEmptyValue();
  }
  char Float = RIOPxrVtValueGetFloat();

  if ((Float & 1) == 0)
  {

    swift_release();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);
    id v14 = v5;
    char v15 = 0;
    goto LABEL_19;
  }
  closure #1 in ReferenceImageBuilder.ImageReferenceState.init(_:)();
  uint64_t v17 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  uint64_t v18 = v11;
  long long v19 = (void *)RIOPxrArAssetCreate();
  swift_release();
  if (v19)
  {
    uint64_t CFDataNoCopy = (void *)RIOPxrArAssetCreateCFDataNoCopy();
    if (!CFDataNoCopy)
    {
      outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
      outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);

      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_21;
    }
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();

    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);
    swift_bridgeObjectRelease();
    swift_release();
  }
LABEL_20:
  uint64_t CFDataNoCopy = 0;
LABEL_21:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = CFDataNoCopy;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
}

uint64_t specialized ReferenceImageBuilder.clear(inputs:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (!v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v9, &v10);
  type metadata accessor for Outputs();
  swift_dynamicCast();
  if (one-time initialization token for ResourceNameOutputName != -1) {
    swift_once();
  }
  uint64_t v4 = static ReferenceImageBuilder.ResourceNameOutputName;
  uint64_t v5 = *(void *)algn_268A58518;
  long long v10 = 0u;
  long long v11 = 0u;
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v10, v4, v5);
  swift_release();
  swift_beginAccess();
  id v6 = objc_getAssociatedObject(v1, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (!v6) {
    goto LABEL_9;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v9, &v10);
  swift_dynamicCast();
  if (one-time initialization token for GroupNameOutputName != -1) {
    swift_once();
  }
  uint64_t v7 = static ReferenceImageBuilder.GroupNameOutputName;
  uint64_t v8 = *(void *)algn_268A58528;
  long long v10 = 0u;
  long long v11 = 0u;
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v10, v7, v8);
  return swift_release();
}

uint64_t outlined init with take of ReferenceImageBuilder.ImageReferenceState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReferenceImageBuilder.ImageReferenceState?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of ReferenceImageBuilder.ImageReferenceState?(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of ReferenceImageBuilder.ImageReferenceState?(uint64_t a1, void *a2, void *a3)
{
  if (a2)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Regex<Substring> and conformance Regex<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<Substring>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>);
  }
  return result;
}

uint64_t destroy for ReferenceImageBuilder.ImageReferenceState(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v7 = v3;
  id v8 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  id v7 = *(void **)(a2 + 16);
  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;

  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReferenceImageBuilder.ImageReferenceState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReferenceImageBuilder.ImageReferenceState()
{
  return &type metadata for ReferenceImageBuilder.ImageReferenceState;
}

uint64_t closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a3;
  uint64_t v29 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  uint64_t v8 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  long long v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v15 = *(void *)(v27 - 8);
  double v16 = MEMORY[0x270FA5388](v27);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v19(v14, v29, v11, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v30, v28);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v7, v31, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
  uint64_t v20 = v32;
  uint64_t v21 = v27;
  __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimation:)();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, *MEMORY[0x263F16370], v21);
  unint64_t v22 = *v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v20 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22);
    unint64_t *v20 = v22;
  }
  unint64_t v25 = *(void *)(v22 + 16);
  unint64_t v24 = *(void *)(v22 + 24);
  if (v25 >= v24 >> 1)
  {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
    unint64_t *v20 = v22;
  }
  *(void *)(v22 + 16) = v25 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(v22+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v25, v18, v21);
}

uint64_t specialized static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)()
{
  uint64_t v41 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v43 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v42 = (char *)&v35 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x270FA5388](v1 - 8);
  long long v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  uint64_t v44 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  long long v37 = v3;
  long long v38 = v9;
  uint64_t v39 = v13;
  uint64_t v40 = v11;
  if (!*(void *)(v14 + 16))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  id v17 = *(id *)(v14 + 32);
  swift_bridgeObjectRelease();
  uint64_t result = RIOBuilderInputsCopyStage();
  if (result)
  {
    uint64_t v18 = (void *)result;
    int HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

    if (HasPrimAtPrimPath)
    {
      uint64_t v20 = v6;
      uint64_t v21 = (uint64_t)v38;
      Inputs.identifierForEntity(withInputKey:)(0x6F6974616D696E61, 0xEF797469746E456ELL, (uint64_t)v38);
      uint64_t v22 = v40;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v21, 1, v10) != 1)
      {
        id v36 = v17;
        (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v39, v21, v10);
        swift_retain();
        uint64_t v23 = (uint64_t)v37;
        __RKEntityActionMultiplePerformBehavior.init(inputs:)((uint64_t)v37);
        uint64_t v24 = v44;
        uint64_t v25 = v4;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v23, 0, 1, v4);
        uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 32))(v20, v23, v4);
        uint64_t v27 = v43;
        uint64_t v45 = MEMORY[0x263F8EE78];
        MEMORY[0x270FA5388](v26);
        *(&v35 - 4) = (uint64_t)&v45;
        *(&v35 - 3) = (uint64_t)v20;
        *(&v35 - 2) = (uint64_t)v39;
        uint64_t v28 = v42;
        if (one-time initialization token for OutputName != -1) {
          swift_once();
        }
        specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:), (uint64_t)(&v35 - 6));
        uint64_t v15 = v45;
        if (*(void *)(v45 + 16) < 2uLL)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
          uint64_t v29 = type metadata accessor for __RKEntityActionSpecification();
          uint64_t v30 = *(void *)(v29 - 8);
          unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
          uint64_t v32 = swift_allocObject();
          *(_OWORD *)(v32 + 16) = xmmword_23AAB22A0;
          (*(void (**)(char *, void, uint64_t))(v27 + 104))(v28, *MEMORY[0x263F16310], v41);
          swift_bridgeObjectRetain_n();
          __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
          unint64_t v33 = v32 + v31;
          uint64_t v24 = v44;
          (*(void (**)(unint64_t, void, uint64_t))(v30 + 104))(v33, *MEMORY[0x263F163A8], v29);
          uint64_t v25 = v4;
          swift_bridgeObjectRelease();
          uint64_t v15 = v32;
        }
        unint64_t v34 = v39;

        (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v25);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v10);
        swift_bridgeObjectRelease();
        return v15;
      }

      outlined destroy of Any?(v21, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
    }
    return MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:)(double a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, int a8)
{
  int v35 = a8;
  __n128 v34 = a3;
  uint64_t v31 = a7;
  uint64_t v32 = a6;
  uint64_t v30 = a5;
  uint64_t v33 = type metadata accessor for __RKEntitySpinDirectionType();
  uint64_t v8 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  id v17 = (char *)&v30 - v16;
  uint64_t v18 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v23(v17, v30, v11, v20);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v14, v31, v11);
  uint64_t v24 = v32;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F16330], v33);
  __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, *MEMORY[0x263F16358], v18);
  unint64_t v25 = *v24;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v24 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1, v25);
    *uint64_t v24 = v25;
  }
  unint64_t v28 = *(void *)(v25 + 16);
  unint64_t v27 = *(void *)(v25 + 24);
  if (v28 >= v27 >> 1)
  {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v25);
    *uint64_t v24 = v25;
  }
  *(void *)(v25 + 16) = v28 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v19 + 32))(v25+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v28, v22, v18);
}

uint64_t specialized static ActionBuilder.generateOrbitActionSpecifications(inputs:)()
{
  uint64_t v0 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  long long v3 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  char v48 = v10;
  uint64_t v49 = v7;
  uint64_t v47 = v1;
  if (!*(void *)(v11 + 16))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v46 = v8;
  id v12 = *(id *)(v11 + 32);
  swift_bridgeObjectRelease();
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v13 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v13 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  uint64_t v14 = v0;
  uint64_t v15 = v3;
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  uint64_t v16 = v50;
  if (v51 == 1)
  {
    uint64_t v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    id v17 = v16;
LABEL_23:
    outlined consume of Result<Double, Object.Error>(v17, 1);
    return MEMORY[0x263F8EE78];
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v18 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v18 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  uint64_t v19 = v50;
  if (v51 == 1)
  {
    uint64_t v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    id v17 = v19;
    goto LABEL_23;
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v20 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v20 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  uint64_t v21 = v50;
  uint64_t v22 = v51;
  if (v54 == 1)
  {
    uint64_t v23 = v52;
    uint64_t v24 = v53;
    uint64_t v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    outlined consume of Result<Vector3<Double>, Object.Error>(v21, v22, v23, v24, 1);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v43 = v52;
  *(void *)&long long v44 = v51;
  uint64_t v45 = v50;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v25 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v25 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  uint64_t v26 = v50;
  if (v51 == 1)
  {
    uint64_t v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    id v17 = v26;
    goto LABEL_23;
  }
  Inputs.identifierForEntity(withInputKey:)(0x6E457265746E6563, 0xEC00000079746974, (uint64_t)v6);
  uint64_t v29 = v46;
  uint64_t v30 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v6, 1, v49) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6);

    return MEMORY[0x263F8EE78];
  }
  *(void *)&long long v31 = v43;
  long long v42 = v31;
  uint64_t v43 = (uint64_t)v26;
  *(void *)&long long v32 = v45;
  *((void *)&v32 + 1) = v44;
  long long v44 = v32;
  uint64_t v33 = *(uint64_t (**)(char *, char *, uint64_t))(v29 + 32);
  __n128 v34 = v48;
  uint64_t v35 = v33(v48, v6, v30);
  uint64_t v50 = (void *)MEMORY[0x263F8EE78];
  *(double *)&long long v36 = MEMORY[0x270FA5388](v35);
  *((void *)&v42 - 8) = &v50;
  *((void *)&v42 - 7) = v34;
  *((void *)&v42 - 6) = v16;
  *((void *)&v42 - 5) = v19;
  *(&v42 - 2) = v36;
  *((unsigned char *)&v42 - 16) = v43 & 1;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:), (uint64_t)(&v42 - 5));
  uint64_t v27 = (uint64_t)v50;
  if (v50[2] < 2uLL)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v37 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v38 = *(void *)(v37 - 8);
    unint64_t v39 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_23AAB22A0;
    (*(void (**)(char *, void, uint64_t))(v47 + 104))(v15, *MEMORY[0x263F16310], v14);
    swift_bridgeObjectRetain_n();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, void, uint64_t))(v38 + 104))(v40 + v39, *MEMORY[0x263F163A8], v37);
    swift_bridgeObjectRelease();
    uint64_t v27 = v40;
  }
  uint64_t v41 = v48;

  (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v49);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:)(*(double *)(v2 + 32), *(double *)(v2 + 40), *(__n128 *)(v2 + 48), a1, a2, *(unint64_t **)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 64));
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x270EEE628]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x270EEE688]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x270EEFBC0]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x270EEFC48]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x270EEFC58]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x270EEFCB0]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x270EEFCE0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingPathExtension()()
{
  return MEMORY[0x270EEFD58]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x270EEFD78]();
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x270EEFDC0]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x270EF0070]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF0168]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x270EF0998]();
}

uint64_t Date.init()()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t type metadata accessor for __RealityFileError()
{
  return MEMORY[0x270EFB9D0]();
}

uint64_t static __AssetRef.__fromCore(_:)()
{
  return MEMORY[0x270EFB9D8]();
}

uint64_t __AssetRef.__as<A>(_:)()
{
  return MEMORY[0x270EFB9E0]();
}

uint64_t type metadata accessor for __AssetRef()
{
  return MEMORY[0x270EFB9E8]();
}

uint64_t static __SceneRef.__fromCore(_:)()
{
  return MEMORY[0x270EFB9F0]();
}

uint64_t type metadata accessor for __SceneRef()
{
  return MEMORY[0x270EFBA00]();
}

uint64_t ModelEntity.init(_coreEntity:)()
{
  return MEMORY[0x270EFBA50]();
}

uint64_t ModelEntity.init()()
{
  return MEMORY[0x270EFBA60]();
}

uint64_t type metadata accessor for ModelEntity()
{
  return MEMORY[0x270EFBA68]();
}

uint64_t __EngineRef.__as<A>(_:)()
{
  return MEMORY[0x270EFBA80]();
}

uint64_t type metadata accessor for __EngineRef()
{
  return MEMORY[0x270EFBA88]();
}

uint64_t __EntityRef.__validInteractionIdentifier.getter()
{
  return MEMORY[0x270EFBA90]();
}

uint64_t static __EntityRef.__fromCore(_:)()
{
  return MEMORY[0x270EFBA98]();
}

uint64_t __EntityRef.__as<A>(_:)()
{
  return MEMORY[0x270EFBAA0]();
}

uint64_t type metadata accessor for __EntityRef()
{
  return MEMORY[0x270EFBAA8]();
}

uint64_t AnchorEntity.init(_coreEntity:)()
{
  return MEMORY[0x270EFBAC8]();
}

uint64_t AnchorEntity.init()()
{
  return MEMORY[0x270EFBAD8]();
}

uint64_t type metadata accessor for AnchorEntity()
{
  return MEMORY[0x270EFBAE0]();
}

uint64_t HasHierarchy.parent.getter()
{
  return MEMORY[0x270EFBAF8]();
}

uint64_t HasHierarchy.children.getter()
{
  return MEMORY[0x270EFBB08]();
}

uint64_t HasHierarchy.setParent(_:preservingWorldTransform:)()
{
  return MEMORY[0x270EFBB10]();
}

uint64_t HasBodyTracking.bodyTracking.setter()
{
  return MEMORY[0x270EFBD08]();
}

uint64_t __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter()
{
  return MEMORY[0x270EFBD30]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS()
{
  return MEMORY[0x270EFBD38]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter()
{
  return MEMORY[0x270EFBD40]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.version.getter()
{
  return MEMORY[0x270EFBD48]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:)()
{
  return MEMORY[0x270EFBD50]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter()
{
  return MEMORY[0x270EFBD58]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget()
{
  return MEMORY[0x270EFBD60]();
}

uint64_t __REAssetBundle.ExportOptions.deploymentTarget.getter()
{
  return MEMORY[0x270EFBD70]();
}

uint64_t static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)()
{
  return MEMORY[0x270EFBD80]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement()
{
  return MEMORY[0x270EFBD88]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions()
{
  return MEMORY[0x270EFBD90]();
}

uint64_t dispatch thunk of __REAssetService.__handle.getter()
{
  return MEMORY[0x270EFBDF0]();
}

uint64_t __RKScenePhysics.Registration.componentType.getter()
{
  return MEMORY[0x270EFBDF8]();
}

uint64_t static __RKScenePhysics.registration.getter()
{
  return MEMORY[0x270EFBE00]();
}

uint64_t __RKScenePhysics.gravity.setter()
{
  return MEMORY[0x270EFBE08]();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return MEMORY[0x270EFBE10]();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.getter()
{
  return MEMORY[0x270EFBE18]();
}

uint64_t dispatch thunk of __ServiceLocator.engine.getter()
{
  return MEMORY[0x270EFBE30]();
}

uint64_t static __ServiceLocator.shared.getter()
{
  return MEMORY[0x270EFBE38]();
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return MEMORY[0x270EFBE40]();
}

uint64_t static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  return MEMORY[0x270EFBE48]();
}

uint64_t AnimationResource.definition.getter()
{
  return MEMORY[0x270EFBE50]();
}

uint64_t static AnimationResource.generate(with:)()
{
  return MEMORY[0x270EFBE58]();
}

uint64_t AnimationResource.repeat(duration:)()
{
  return MEMORY[0x270EFBE60]();
}

uint64_t type metadata accessor for AnimationResource()
{
  return MEMORY[0x270EFBE68]();
}

uint64_t BodyTrackedEntity.init(_coreEntity:)()
{
  return MEMORY[0x270EFBE70]();
}

uint64_t type metadata accessor for BodyTrackedEntity()
{
  return MEMORY[0x270EFBE78]();
}

uint64_t type metadata accessor for CollisionComponent()
{
  return MEMORY[0x270EFBEA8]();
}

uint64_t SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)()
{
  return MEMORY[0x270EFBEB8]();
}

uint64_t type metadata accessor for SpotLightComponent.Shadow.ShadowClippingPlane()
{
  return MEMORY[0x270EFBEC0]();
}

uint64_t SpotLightComponent.Shadow.cullModeOverride.setter()
{
  return MEMORY[0x270EFBEC8]();
}

uint64_t SpotLightComponent.Shadow.zFar.setter()
{
  return MEMORY[0x270EFBED0]();
}

uint64_t SpotLightComponent.Shadow.zNear.setter()
{
  return MEMORY[0x270EFBED8]();
}

uint64_t SpotLightComponent.Shadow.depthBias.setter()
{
  return MEMORY[0x270EFBEE0]();
}

uint64_t SpotLightComponent.Shadow.init()()
{
  return MEMORY[0x270EFBEE8]();
}

uint64_t type metadata accessor for SpotLightComponent.Shadow()
{
  return MEMORY[0x270EFBEF0]();
}

uint64_t type metadata accessor for SpotLightComponent()
{
  return MEMORY[0x270EFBEF8]();
}

uint64_t __AssetLoadRequest.__allocating_init(serviceLocator:)()
{
  return MEMORY[0x270EFBF00]();
}

Swift::Void __swiftcall __AssetLoadRequest.waitForCompletion()()
{
}

uint64_t __AssetLoadRequest.add(asset:)()
{
  return MEMORY[0x270EFBF10]();
}

{
  return MEMORY[0x270EFBF18]();
}

uint64_t type metadata accessor for __AssetLoadRequest()
{
  return MEMORY[0x270EFBF20]();
}

uint64_t __ComponentTypeRef.__as<A>(_:)()
{
  return MEMORY[0x270EFBF28]();
}

uint64_t type metadata accessor for __ComponentTypeRef()
{
  return MEMORY[0x270EFBF30]();
}

uint64_t type metadata accessor for __RKEntityMoveEase()
{
  return MEMORY[0x270EFBF38]();
}

uint64_t dispatch thunk of EnvironmentResource.coreIBLAsset.getter()
{
  return MEMORY[0x270EFBF40]();
}

uint64_t static EnvironmentResource.__load(contentsOf:withName:)()
{
  return MEMORY[0x270EFBF48]();
}

uint64_t type metadata accessor for EnvironmentResource()
{
  return MEMORY[0x270EFBF50]();
}

uint64_t static __SceneResourceCache.attachImportedScenesForSceneChangeToEntity(importedScenes:entity:)()
{
  return MEMORY[0x270EFBF78]();
}

uint64_t type metadata accessor for __SceneResourceCache()
{
  return MEMORY[0x270EFBF80]();
}

uint64_t BodyTrackingComponent.init()()
{
  return MEMORY[0x270EFBF88]();
}

uint64_t type metadata accessor for BodyTrackingComponent()
{
  return MEMORY[0x270EFBF90]();
}

uint64_t type metadata accessor for __RKEntityMoveEaseType()
{
  return MEMORY[0x270EFBFA0]();
}

uint64_t __SceneImportOperation.__ImportedScene.init(sceneIdentifier:sceneName:sceneAsset:sceneActive:)()
{
  return MEMORY[0x270EFBFA8]();
}

uint64_t type metadata accessor for __SceneImportOperation.__ImportedScene()
{
  return MEMORY[0x270EFBFB0]();
}

uint64_t static AnimationTimingFunction.cubicBezier(controlPoint1:controlPoint2:)()
{
  return MEMORY[0x270EFBFB8]();
}

uint64_t static AnimationTimingFunction.easeIn.getter()
{
  return MEMORY[0x270EFBFC0]();
}

uint64_t static AnimationTimingFunction.linear.getter()
{
  return MEMORY[0x270EFBFC8]();
}

uint64_t static AnimationTimingFunction.default.getter()
{
  return MEMORY[0x270EFBFD0]();
}

uint64_t static AnimationTimingFunction.easeOut.getter()
{
  return MEMORY[0x270EFBFD8]();
}

uint64_t static AnimationTimingFunction.easeInOut.getter()
{
  return MEMORY[0x270EFBFE0]();
}

uint64_t type metadata accessor for AnimationTimingFunction()
{
  return MEMORY[0x270EFBFE8]();
}

uint64_t type metadata accessor for __RKEntityMoveSelection()
{
  return MEMORY[0x270EFC020]();
}

uint64_t __RKWaitActionArguments.init(duration:)()
{
  return MEMORY[0x270EFC028]();
}

uint64_t __RKWaitActionArguments.duration.getter()
{
  return MEMORY[0x270EFC030]();
}

uint64_t type metadata accessor for __RKWaitActionArguments()
{
  return MEMORY[0x270EFC038]();
}

uint64_t type metadata accessor for DirectionalLightComponent.Shadow.ShadowProjectionType()
{
  return MEMORY[0x270EFC050]();
}

uint64_t DirectionalLightComponent.Shadow.init(shadowProjection:depthBias:cullMode:)()
{
  return MEMORY[0x270EFC058]();
}

uint64_t type metadata accessor for DirectionalLightComponent.Shadow()
{
  return MEMORY[0x270EFC070]();
}

uint64_t DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)()
{
  return MEMORY[0x270EFC078]();
}

uint64_t type metadata accessor for DirectionalLightComponent()
{
  return MEMORY[0x270EFC088]();
}

uint64_t __RKEntityAudioActionType.rawValue.getter()
{
  return MEMORY[0x270EFC090]();
}

uint64_t type metadata accessor for __RKEntityAudioActionType()
{
  return MEMORY[0x270EFC098]();
}

uint64_t type metadata accessor for __RKEntityGroupActionOrder()
{
  return MEMORY[0x270EFC0B8]();
}

uint64_t type metadata accessor for __RKEntityProximityTrigger.ExitType()
{
  return MEMORY[0x270EFC0C0]();
}

uint64_t type metadata accessor for __RKEntitySpinDirectionType()
{
  return MEMORY[0x270EFC0E0]();
}

uint64_t type metadata accessor for __RKAudioSpatialModeSelection()
{
  return MEMORY[0x270EFC0E8]();
}

uint64_t type metadata accessor for __RKEntityActionSpecification()
{
  return MEMORY[0x270EFC0F0]();
}

uint64_t __RKEntityHideActionArguments.animationStyle.getter()
{
  return MEMORY[0x270EFC0F8]();
}

uint64_t __RKEntityHideActionArguments.buildOutAnimationType.getter()
{
  return MEMORY[0x270EFC100]();
}

uint64_t __RKEntityHideActionArguments.ease.getter()
{
  return MEMORY[0x270EFC108]();
}

uint64_t __RKEntityHideActionArguments.target.getter()
{
  return MEMORY[0x270EFC110]();
}

uint64_t __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)()
{
  return MEMORY[0x270EFC118]();
}

uint64_t __RKEntityHideActionArguments.distance.getter()
{
  return MEMORY[0x270EFC120]();
}

uint64_t __RKEntityHideActionArguments.duration.getter()
{
  return MEMORY[0x270EFC128]();
}

uint64_t __RKEntityHideActionArguments.easeType.getter()
{
  return MEMORY[0x270EFC130]();
}

uint64_t type metadata accessor for __RKEntityHideActionArguments()
{
  return MEMORY[0x270EFC138]();
}

uint64_t __RKEntityShowActionArguments.animationStyle.getter()
{
  return MEMORY[0x270EFC140]();
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.getter()
{
  return MEMORY[0x270EFC148]();
}

uint64_t __RKEntityShowActionArguments.ease.getter()
{
  return MEMORY[0x270EFC150]();
}

uint64_t __RKEntityShowActionArguments.target.getter()
{
  return MEMORY[0x270EFC158]();
}

uint64_t __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)()
{
  return MEMORY[0x270EFC160]();
}

uint64_t __RKEntityShowActionArguments.distance.getter()
{
  return MEMORY[0x270EFC168]();
}

uint64_t __RKEntityShowActionArguments.duration.getter()
{
  return MEMORY[0x270EFC170]();
}

uint64_t __RKEntityShowActionArguments.easeType.getter()
{
  return MEMORY[0x270EFC178]();
}

uint64_t type metadata accessor for __RKEntityShowActionArguments()
{
  return MEMORY[0x270EFC180]();
}

uint64_t __RKEntitySpinActionArguments.iterations.getter()
{
  return MEMORY[0x270EFC188]();
}

uint64_t __RKEntitySpinActionArguments.axis.getter()
{
  return MEMORY[0x270EFC190]();
}

uint64_t __RKEntitySpinActionArguments.target.getter()
{
  return MEMORY[0x270EFC198]();
}

uint64_t __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)()
{
  return MEMORY[0x270EFC1A0]();
}

uint64_t __RKEntitySpinActionArguments.duration.getter()
{
  return MEMORY[0x270EFC1A8]();
}

uint64_t __RKEntitySpinActionArguments.direction.getter()
{
  return MEMORY[0x270EFC1B0]();
}

uint64_t type metadata accessor for __RKEntitySpinActionArguments()
{
  return MEMORY[0x270EFC1B8]();
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.getter()
{
  return MEMORY[0x270EFC1C0]();
}

uint64_t __RKChangeSceneActionArguments.init(sceneRoot:targetSceneIdentifier:)()
{
  return MEMORY[0x270EFC1C8]();
}

uint64_t type metadata accessor for __RKChangeSceneActionArguments()
{
  return MEMORY[0x270EFC1D0]();
}

uint64_t __RKEntityActionAnimationStyle.init(rawValue:)()
{
  return MEMORY[0x270EFC1D8]();
}

uint64_t __RKEntityActionAnimationStyle.rawValue.getter()
{
  return MEMORY[0x270EFC1E0]();
}

uint64_t type metadata accessor for __RKEntityActionAnimationStyle()
{
  return MEMORY[0x270EFC1E8]();
}

uint64_t __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)()
{
  return MEMORY[0x270EFC1F0]();
}

uint64_t __RKEntityActionGroupArguments.order.getter()
{
  return MEMORY[0x270EFC1F8]();
}

uint64_t __RKEntityActionGroupArguments.actions.getter()
{
  return MEMORY[0x270EFC200]();
}

uint64_t __RKEntityActionGroupArguments.exclusive.getter()
{
  return MEMORY[0x270EFC208]();
}

uint64_t __RKEntityActionGroupArguments.loopCount.getter()
{
  return MEMORY[0x270EFC210]();
}

uint64_t type metadata accessor for __RKEntityActionGroupArguments()
{
  return MEMORY[0x270EFC218]();
}

uint64_t __RKEntityAudioActionArguments.spatialMode.getter()
{
  return MEMORY[0x270EFC220]();
}

uint64_t __RKEntityAudioActionArguments.multiplePerformBehavior.getter()
{
  return MEMORY[0x270EFC228]();
}

uint64_t __RKEntityAudioActionArguments.path.getter()
{
  return MEMORY[0x270EFC230]();
}

uint64_t __RKEntityAudioActionArguments.type.getter()
{
  return MEMORY[0x270EFC238]();
}

uint64_t __RKEntityAudioActionArguments.loops.getter()
{
  return MEMORY[0x270EFC240]();
}

uint64_t __RKEntityAudioActionArguments.target.getter()
{
  return MEMORY[0x270EFC248]();
}

uint64_t __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)()
{
  return MEMORY[0x270EFC250]();
}

uint64_t __RKEntityAudioActionArguments.volume.getter()
{
  return MEMORY[0x270EFC258]();
}

uint64_t type metadata accessor for __RKEntityAudioActionArguments()
{
  return MEMORY[0x270EFC260]();
}

uint64_t __RKEntityForceActionArguments.target.getter()
{
  return MEMORY[0x270EFC268]();
}

uint64_t __RKEntityForceActionArguments.init(target:force:velocity:)()
{
  return MEMORY[0x270EFC270]();
}

uint64_t __RKEntityForceActionArguments.velocity.getter()
{
  return MEMORY[0x270EFC278]();
}

uint64_t type metadata accessor for __RKEntityForceActionArguments()
{
  return MEMORY[0x270EFC280]();
}

uint64_t type metadata accessor for __RKEntityTriggerSpecification()
{
  return MEMORY[0x270EFC288]();
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.getter()
{
  return MEMORY[0x270EFC290]();
}

uint64_t __RKEntityCustomActionArguments.target.getter()
{
  return MEMORY[0x270EFC298]();
}

uint64_t __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)()
{
  return MEMORY[0x270EFC2A0]();
}

uint64_t type metadata accessor for __RKEntityCustomActionArguments()
{
  return MEMORY[0x270EFC2A8]();
}

uint64_t __RKEntityEmphasisAnimationType.init(rawValue:)()
{
  return MEMORY[0x270EFC2B0]();
}

uint64_t __RKEntityEmphasisAnimationType.rawValue.getter()
{
  return MEMORY[0x270EFC2B8]();
}

uint64_t type metadata accessor for __RKEntityEmphasisAnimationType()
{
  return MEMORY[0x270EFC2C0]();
}

uint64_t __RKEntityEmphasisActionArguments.animationStyle.getter()
{
  return MEMORY[0x270EFC2C8]();
}

uint64_t __RKEntityEmphasisActionArguments.emphasisAnimationType.getter()
{
  return MEMORY[0x270EFC2D0]();
}

uint64_t __RKEntityEmphasisActionArguments.target.getter()
{
  return MEMORY[0x270EFC2D8]();
}

uint64_t __RKEntityEmphasisActionArguments.init(target:duration:iterations:animationStyle:emphasisAnimationType:)()
{
  return MEMORY[0x270EFC2E0]();
}

uint64_t __RKEntityEmphasisActionArguments.duration.getter()
{
  return MEMORY[0x270EFC2E8]();
}

uint64_t type metadata accessor for __RKEntityEmphasisActionArguments()
{
  return MEMORY[0x270EFC2F0]();
}

uint64_t __RKEntityInteractionSpecification.action.getter()
{
  return MEMORY[0x270EFC2F8]();
}

uint64_t __RKEntityInteractionSpecification.init(trigger:action:)()
{
  return MEMORY[0x270EFC300]();
}

uint64_t __RKEntityInteractionSpecification.trigger.getter()
{
  return MEMORY[0x270EFC308]();
}

uint64_t type metadata accessor for __RKEntityInteractionSpecification()
{
  return MEMORY[0x270EFC310]();
}

uint64_t __RKEntityTransformActionArguments.orientation.getter()
{
  return MEMORY[0x270EFC318]();
}

uint64_t __RKEntityTransformActionArguments.relativeToEntity.getter()
{
  return MEMORY[0x270EFC320]();
}

uint64_t __RKEntityTransformActionArguments.ease.getter()
{
  return MEMORY[0x270EFC328]();
}

uint64_t __RKEntityTransformActionArguments.scale.getter()
{
  return MEMORY[0x270EFC330]();
}

uint64_t __RKEntityTransformActionArguments.target.getter()
{
  return MEMORY[0x270EFC338]();
}

uint64_t __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)()
{
  return MEMORY[0x270EFC340]();
}

uint64_t __RKEntityTransformActionArguments.duration.getter()
{
  return MEMORY[0x270EFC348]();
}

uint64_t __RKEntityTransformActionArguments.easeType.getter()
{
  return MEMORY[0x270EFC350]();
}

uint64_t __RKEntityTransformActionArguments.location.getter()
{
  return MEMORY[0x270EFC358]();
}

uint64_t __RKEntityTransformActionArguments.moveType.getter()
{
  return MEMORY[0x270EFC360]();
}

uint64_t type metadata accessor for __RKEntityTransformActionArguments()
{
  return MEMORY[0x270EFC368]();
}

uint64_t __RKEntityOrbitEntityActionArguments.orbitalAxis.getter()
{
  return MEMORY[0x270EFC370]();
}

uint64_t __RKEntityOrbitEntityActionArguments.pivotTarget.getter()
{
  return MEMORY[0x270EFC378]();
}

uint64_t __RKEntityOrbitEntityActionArguments.orientToPath.getter()
{
  return MEMORY[0x270EFC380]();
}

uint64_t __RKEntityOrbitEntityActionArguments.spinDirection.getter()
{
  return MEMORY[0x270EFC388]();
}

uint64_t __RKEntityOrbitEntityActionArguments.target.getter()
{
  return MEMORY[0x270EFC390]();
}

uint64_t __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)()
{
  return MEMORY[0x270EFC398]();
}

uint64_t __RKEntityOrbitEntityActionArguments.duration.getter()
{
  return MEMORY[0x270EFC3A0]();
}

uint64_t __RKEntityOrbitEntityActionArguments.rotations.getter()
{
  return MEMORY[0x270EFC3A8]();
}

uint64_t type metadata accessor for __RKEntityOrbitEntityActionArguments()
{
  return MEMORY[0x270EFC3B0]();
}

uint64_t __RKEntityLookAtCameraActionArguments.target.getter()
{
  return MEMORY[0x270EFC3B8]();
}

uint64_t __RKEntityLookAtCameraActionArguments.init(target:duration:animationDuration:direction:rotation:upVector:loops:)()
{
  return MEMORY[0x270EFC3C0]();
}

uint64_t __RKEntityLookAtCameraActionArguments.duration.getter()
{
  return MEMORY[0x270EFC3C8]();
}

uint64_t __RKEntityLookAtCameraActionArguments.upVector.getter()
{
  return MEMORY[0x270EFC3D0]();
}

uint64_t __RKEntityLookAtCameraActionArguments.direction.getter()
{
  return MEMORY[0x270EFC3D8]();
}

uint64_t type metadata accessor for __RKEntityLookAtCameraActionArguments()
{
  return MEMORY[0x270EFC3E0]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipStart.getter()
{
  return MEMORY[0x270EFC3E8]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipDuration.getter()
{
  return MEMORY[0x270EFC3F0]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipReversed.getter()
{
  return MEMORY[0x270EFC3F8]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipReverses.getter()
{
  return MEMORY[0x270EFC400]();
}

uint64_t __RKEntityStartAnimateActionArguments.animationSpeed.getter()
{
  return MEMORY[0x270EFC408]();
}

uint64_t __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter()
{
  return MEMORY[0x270EFC410]();
}

uint64_t __RKEntityStartAnimateActionArguments.target.getter()
{
  return MEMORY[0x270EFC418]();
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimation:)()
{
  return MEMORY[0x270EFC420]();
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)()
{
  return MEMORY[0x270EFC428]();
}

uint64_t __RKEntityStartAnimateActionArguments.loopCount.getter()
{
  return MEMORY[0x270EFC430]();
}

uint64_t type metadata accessor for __RKEntityStartAnimateActionArguments()
{
  return MEMORY[0x270EFC438]();
}

uint64_t type metadata accessor for __RKEntityActionMultiplePerformBehavior()
{
  return MEMORY[0x270EFC440]();
}

uint64_t type metadata accessor for __RKEntityShowActionBuildInAnimationType()
{
  return MEMORY[0x270EFC448]();
}

uint64_t type metadata accessor for __RKEntityHideActionBuildOutAnimationType()
{
  return MEMORY[0x270EFC450]();
}

uint64_t dispatch thunk of Scene.containsChangeSceneActions()()
{
  return MEMORY[0x270EFC458]();
}

uint64_t static Scene.__fromCore(_:)()
{
  return MEMORY[0x270EFC478]();
}

uint64_t Scene.__sceneIdentifier.getter()
{
  return MEMORY[0x270EFC4A8]();
}

uint64_t Scene.__sceneIdentifier.setter()
{
  return MEMORY[0x270EFC4B0]();
}

uint64_t dispatch thunk of Scene.name.getter()
{
  return MEMORY[0x270EFC4C0]();
}

uint64_t static Scene.fromCore(_:)()
{
  return MEMORY[0x270EFC4E0]();
}

uint64_t type metadata accessor for Scene()
{
  return MEMORY[0x270EFC4F8]();
}

uint64_t Entity.coreEntity.getter()
{
  return MEMORY[0x270EFC500]();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return MEMORY[0x270EFC508]();
}

Swift::Void __swiftcall Entity.setLoadContext(fileName:)(Swift::String fileName)
{
}

uint64_t static Entity.__fromCore(_:)()
{
  return MEMORY[0x270EFC5D0]();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return MEMORY[0x270EFC5D8]();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  return MEMORY[0x270EFC5E0]();
}

uint64_t Entity.ComponentSet.set<A>(_:)()
{
  return MEMORY[0x270EFC620]();
}

uint64_t type metadata accessor for Entity.ComponentSet()
{
  return MEMORY[0x270EFC638]();
}

uint64_t Entity.ComponentSet.subscript.getter()
{
  return MEMORY[0x270EFC648]();
}

uint64_t Entity.ComponentSet.subscript.setter()
{
  return MEMORY[0x270EFC650]();
}

uint64_t Entity.__interactions.modify()
{
  return MEMORY[0x270EFC658]();
}

uint64_t Entity.__interactions.setter()
{
  return MEMORY[0x270EFC660]();
}

uint64_t type metadata accessor for Entity.ChildCollection()
{
  return MEMORY[0x270EFC6A8]();
}

uint64_t Entity.ChildCollection.subscript.getter()
{
  return MEMORY[0x270EFC6B0]();
}

uint64_t Entity.__interactionIdentifier.getter()
{
  return MEMORY[0x270EFC6C0]();
}

uint64_t Entity.__interactionIdentifier.setter()
{
  return MEMORY[0x270EFC6C8]();
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:)(Swift::Bool recursive)
{
}

uint64_t dispatch thunk of Entity.name.getter()
{
  return MEMORY[0x270EFC6E8]();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return MEMORY[0x270EFC6F0]();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)()
{
  return MEMORY[0x270EFC700]();
}

uint64_t type metadata accessor for Entity()
{
  return MEMORY[0x270EFC728]();
}

uint64_t dispatch thunk of __Engine.__coreEngine.getter()
{
  return MEMORY[0x270EFC758]();
}

uint64_t __Engine.queue.getter()
{
  return MEMORY[0x270EFC760]();
}

uint64_t dispatch thunk of static Component.__coreComponentType.getter()
{
  return MEMORY[0x270EFC768]();
}

uint64_t dispatch thunk of static Component.componentName.getter()
{
  return MEMORY[0x270EFC778]();
}

uint64_t static Component.registerComponentProxy(componentName:)()
{
  return MEMORY[0x270EFC788]();
}

uint64_t Transform.init(matrix:)()
{
  return MEMORY[0x270EFC7E0]();
}

uint64_t static __REAsset.__fromHandle(_:)()
{
  return MEMORY[0x270EFC7F8]();
}

uint64_t dispatch thunk of __REAsset.__handle.getter()
{
  return MEMORY[0x270EFC800]();
}

uint64_t type metadata accessor for __REAsset()
{
  return MEMORY[0x270EFC808]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x270FA06B8]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x270FA06C8]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x270FA06D8]();
}

uint64_t BindTarget.EntityPath.billboardBlendFactor.getter()
{
  return MEMORY[0x270EFC840]();
}

uint64_t BindTarget.EntityPath.entity(_:)()
{
  return MEMORY[0x270EFC848]();
}

uint64_t BindTarget.EntityPath.opacity.getter()
{
  return MEMORY[0x270EFC850]();
}

uint64_t BindTarget.EntityPath.transform.getter()
{
  return MEMORY[0x270EFC858]();
}

uint64_t type metadata accessor for BindTarget.EntityPath()
{
  return MEMORY[0x270EFC860]();
}

uint64_t static BindTarget.entity(_:)()
{
  return MEMORY[0x270EFC868]();
}

uint64_t type metadata accessor for BindTarget()
{
  return MEMORY[0x270EFC870]();
}

uint64_t SpinAction.init(revolutions:localAxis:timingFunction:isAdditive:)()
{
  return MEMORY[0x270EFC898]();
}

uint64_t type metadata accessor for SpinAction()
{
  return MEMORY[0x270EFC8A0]();
}

uint64_t AnimationView.source.getter()
{
  return MEMORY[0x270EFC8D8]();
}

uint64_t type metadata accessor for AnimationView()
{
  return MEMORY[0x270EFC8E0]();
}

uint64_t ImpulseAction.init(targetEntity:linearImpulse:)()
{
  return MEMORY[0x270EFC8E8]();
}

uint64_t type metadata accessor for ImpulseAction()
{
  return MEMORY[0x270EFC8F0]();
}

uint64_t AnimationGroup.init(group:name:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  return MEMORY[0x270EFC8F8]();
}

uint64_t AnimationGroup.group.getter()
{
  return MEMORY[0x270EFC900]();
}

uint64_t type metadata accessor for AnimationGroup()
{
  return MEMORY[0x270EFC908]();
}

uint64_t static FromToByAction.TransformMode.default.getter()
{
  return MEMORY[0x270EFCA18]();
}

uint64_t FromToByAction.init(from:to:timing:isAdditive:)()
{
  return MEMORY[0x270EFCA20]();
}

uint64_t FromToByAction<>.init(by:timing:isAdditive:)()
{
  return MEMORY[0x270EFCA28]();
}

uint64_t FromToByAction<>.init(from:to:mode:timing:isAdditive:)()
{
  return MEMORY[0x270EFCA30]();
}

uint64_t type metadata accessor for ModelSortGroup.DepthPass()
{
  return MEMORY[0x270EFCA38]();
}

uint64_t ModelSortGroup.init(depthPass:)()
{
  return MEMORY[0x270EFCA40]();
}

uint64_t type metadata accessor for ModelSortGroup()
{
  return MEMORY[0x270EFCA48]();
}

uint64_t BillboardAction.Transition.init(duration:timingFunction:)()
{
  return MEMORY[0x270EFCA70]();
}

uint64_t type metadata accessor for BillboardAction.Transition()
{
  return MEMORY[0x270EFCA78]();
}

uint64_t BillboardAction.init(transitionIn:transitionOut:)()
{
  return MEMORY[0x270EFCA80]();
}

uint64_t type metadata accessor for BillboardAction()
{
  return MEMORY[0x270EFCA88]();
}

uint64_t EmphasizeAction.init(motionType:style:isAdditive:)()
{
  return MEMORY[0x270EFCA90]();
}

uint64_t type metadata accessor for EmphasizeAction.EmphasisMotionType()
{
  return MEMORY[0x270EFCA98]();
}

uint64_t type metadata accessor for EmphasizeAction.EmphasisAnimationStyle()
{
  return MEMORY[0x270EFCAA0]();
}

uint64_t type metadata accessor for EmphasizeAction()
{
  return MEMORY[0x270EFCAA8]();
}

uint64_t PlayAudioAction.init(targetEntity:audioResourceName:gain:useControlledPlayback:)()
{
  return MEMORY[0x270EFCAB8]();
}

uint64_t type metadata accessor for PlayAudioAction()
{
  return MEMORY[0x270EFCAC0]();
}

uint64_t static AnimationFillMode.forwards.getter()
{
  return MEMORY[0x270EFCB80]();
}

uint64_t type metadata accessor for AnimationFillMode()
{
  return MEMORY[0x270EFCB88]();
}

uint64_t OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:isOrientedToPath:isAdditive:)()
{
  return MEMORY[0x270EFCBB8]();
}

uint64_t type metadata accessor for OrbitEntityAction()
{
  return MEMORY[0x270EFCBC0]();
}

uint64_t NotificationAction.init(name:customArguments:)()
{
  return MEMORY[0x270EFCBE0]();
}

uint64_t type metadata accessor for NotificationAction()
{
  return MEMORY[0x270EFCBE8]();
}

uint64_t dispatch thunk of AnimationDefinition.delay.getter()
{
  return MEMORY[0x270EFCC08]();
}

uint64_t dispatch thunk of AnimationDefinition.duration.getter()
{
  return MEMORY[0x270EFCC10]();
}

uint64_t type metadata accessor for AnimationRepeatMode()
{
  return MEMORY[0x270EFCC18]();
}

uint64_t PlayAnimationAction.init(animationName:targetEntity:transitionDuration:blendLayer:separateAnimatedValue:useParentedControllers:handoffType:)()
{
  return MEMORY[0x270EFCC50]();
}

uint64_t type metadata accessor for PlayAnimationAction()
{
  return MEMORY[0x270EFCC58]();
}

uint64_t static AnimationHandoffType.snapshotAndReplace(applyToAllLayers:)()
{
  return MEMORY[0x270EFCC60]();
}

uint64_t static AnimationHandoffType.stop.getter()
{
  return MEMORY[0x270EFCC68]();
}

uint64_t static AnimationHandoffType.compose.getter()
{
  return MEMORY[0x270EFCC70]();
}

uint64_t static AnimationHandoffType.default.getter()
{
  return MEMORY[0x270EFCC78]();
}

uint64_t static AnimationHandoffType.replace(applyToAllLayers:)()
{
  return MEMORY[0x270EFCC80]();
}

uint64_t type metadata accessor for AnimationHandoffType()
{
  return MEMORY[0x270EFCC88]();
}

uint64_t CustomComponentProxy.init(with:)()
{
  return MEMORY[0x270EFCC90]();
}

uint64_t static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)()
{
  return MEMORY[0x270EFCC98]();
}

uint64_t type metadata accessor for CustomComponentProxy()
{
  return MEMORY[0x270EFCCA0]();
}

uint64_t static ActionEntityResolution.sourceEntity.getter()
{
  return MEMORY[0x270EFCCD0]();
}

uint64_t type metadata accessor for ActionEntityResolution()
{
  return MEMORY[0x270EFCCD8]();
}

uint64_t type metadata accessor for MaterialParameterTypes.FaceCulling()
{
  return MEMORY[0x270EFCCE0]();
}

uint64_t SetEntityEnabledAction.init(targetEntity:isEnabled:)()
{
  return MEMORY[0x270EFCCE8]();
}

uint64_t type metadata accessor for SetEntityEnabledAction()
{
  return MEMORY[0x270EFCCF0]();
}

uint64_t ModelSortGroupComponent.init(group:order:)()
{
  return MEMORY[0x270EFCDC0]();
}

uint64_t type metadata accessor for ModelSortGroupComponent()
{
  return MEMORY[0x270EFCDC8]();
}

uint64_t SetEntityPropertyAction.init(targetEntity:key:value:)()
{
  return MEMORY[0x270EFCE10]();
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.setter()
{
  return MEMORY[0x270EFCE28]();
}

uint64_t AnimationLibraryComponent.animations.modify()
{
  return MEMORY[0x270EFCE30]();
}

uint64_t AnimationLibraryComponent.init()()
{
  return MEMORY[0x270EFCE38]();
}

uint64_t type metadata accessor for AnimationLibraryComponent()
{
  return MEMORY[0x270EFCE40]();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createSchemePrefix(with:)()
{
  return MEMORY[0x270EFCE98]();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)()
{
  return MEMORY[0x270EFCEA0]();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)()
{
  return MEMORY[0x270EFCEA8]();
}

uint64_t static __USDARReferenceProvidingPlugin.instance(for:)()
{
  return MEMORY[0x270EFCEB0]();
}

uint64_t type metadata accessor for __USDARReferenceProvidingPlugin()
{
  return MEMORY[0x270EFCEB8]();
}

uint64_t __RKEntityPlayTimelineActionArguments.init(target:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)()
{
  return MEMORY[0x270EFCEC0]();
}

uint64_t Regex.init(_regexString:version:)()
{
  return MEMORY[0x270FA2A68]();
}

uint64_t Regex.firstMatch(in:)()
{
  return MEMORY[0x270FA2A70]();
}

uint64_t Regex.Match.subscript.getter()
{
  return MEMORY[0x270FA2AA0]();
}

uint64_t Regex.Match.output.getter()
{
  return MEMORY[0x270FA2AB8]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x270FA2C68]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x270FA2C78]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t CombineIdentifier.init()()
{
  return MEMORY[0x270EE3830]();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return MEMORY[0x270EE3838]();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return MEMORY[0x270EE3AE8]();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return MEMORY[0x270EE3AF0]();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return MEMORY[0x270EE3B40]();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return MEMORY[0x270EE3B48]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x270EE3B50]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x270EE3C50]();
}

uint64_t PassthroughSubject.receive<A>(subscriber:)()
{
  return MEMORY[0x270EE3C58]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x270EE3C70]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x270EEAA78]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x270EEAA80]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x270EEAA98]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x270EEAAA8]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x270EEB090]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x270F9D030]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1820]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x270F9D060]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x270FA2B70]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  uint64_t v1 = MEMORY[0x270EF1B18](a1);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x270F9D5F8]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x270F9D600]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x270F9D620]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x270F9D748]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x270F9D750]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9D758]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x270F9D7C0]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D880](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8B0]();
}

{
  return MEMORY[0x270F9D8F0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x270F9D908]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9D968]();
}

uint64_t Sequence.flatMap<A>(_:)()
{
  return MEMORY[0x270F9D9C8]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x270F9DA28]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1B98]();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1BA8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x270F9DCD8]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1BD8]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1C18]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x270F9DD60]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1C48]();
}

uint64_t Float.significand.getter()
{
  return MEMORY[0x270F9DE00]();
}

uint64_t Float._roundSlowPath(_:)()
{
  return MEMORY[0x270F9DE08]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x270EF1C98]();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1CB8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x270F9DEB0]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.Index._asCocoa.modify()
{
  return MEMORY[0x270F9DF28]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x270F9E080]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x270F9E0D0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t CGColorRef.components.getter()
{
  return MEMORY[0x270EE5820]();
}

uint64_t static simd_quatf.identity.getter()
{
  return MEMORY[0x270EFCEF8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return MEMORY[0x270FA0C38]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x270FA0D88]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x270FA11A0]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x270FA2ED0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x270F9E518]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x270EF2560]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return MEMORY[0x270FA13A0]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x270F9E640]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x270F9E648]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x270F9E650]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x270F9E800]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x270F9E810]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return MEMORY[0x270F9E820]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x270F9E838]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x270F9E840]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x270F9E858]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x270F9E860]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x270F9E878]();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return MEMORY[0x270F9E888]();
}

uint64_t AnyHashable.hash(into:)()
{
  return MEMORY[0x270F9E8D8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t dispatch thunk of SIMDStorage.init()()
{
  return MEMORY[0x270F9E940]();
}

uint64_t dispatch thunk of SIMDStorage.subscript.getter()
{
  return MEMORY[0x270F9E948]();
}

uint64_t dispatch thunk of SIMDStorage.subscript.setter()
{
  return MEMORY[0x270F9E950]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9E968]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x270F9EF50]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x270F9EF88]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x270F9EFB0]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x270F9EFC0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9F0A8]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x270F9F0D0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x270F9F1A8]();
}

uint64_t _arrayConditionalCast<A, B>(_:)()
{
  return MEMORY[0x270F9F220]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F300]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F440]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x270F9F750]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x270F9F7C8]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x270F9FA68]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t SIMD.init(from:)()
{
  return MEMORY[0x270F9FAE0]();
}

uint64_t SIMD.hash(into:)()
{
  return MEMORY[0x270F9FAE8]();
}

uint64_t SIMD.encode(to:)()
{
  return MEMORY[0x270F9FAF0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x270EF2680]();
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF26A8]();
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF26E0]();
}

uint64_t type metadata accessor for SIMD2()
{
  return MEMORY[0x270F9FB88]();
}

uint64_t SIMD3<>.cgColor.getter()
{
  return MEMORY[0x270EFCF20]();
}

uint64_t type metadata accessor for SIMD3()
{
  return MEMORY[0x270F9FB90]();
}

uint64_t type metadata accessor for SIMD4()
{
  return MEMORY[0x270F9FB98]();
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF2720]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x270F9FC30]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x270F9FCF8]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF2760]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF27A0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B80](red, green, blue, alpha);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5BC8](color);
}

CFStringRef CGColorSpaceCopyName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x270EE5C38](space);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x270EF5050](isrc);
}

uint64_t IsCoreRIOBundleVersionValid()
{
  return MEMORY[0x270F21B00]();
}

uint64_t REAnchorComponentGetComponentType()
{
  return MEMORY[0x270F1BF58]();
}

uint64_t REAnchoringComponentGetComponentType()
{
  return MEMORY[0x270F1BFE0]();
}

uint64_t REAnchoringComponentSetDescriptorAlignment()
{
  return MEMORY[0x270F1C0A0]();
}

uint64_t REAnchoringComponentSetDescriptorBounds()
{
  return MEMORY[0x270F1C0B0]();
}

uint64_t REAnchoringComponentSetDescriptorClassification()
{
  return MEMORY[0x270F1C0C0]();
}

uint64_t REAnchoringComponentSetDescriptorResourceGroup()
{
  return MEMORY[0x270F1C0D0]();
}

uint64_t REAnchoringComponentSetDescriptorResourceName()
{
  return MEMORY[0x270F1C0D8]();
}

uint64_t REAnchoringComponentSetDescriptorTransform()
{
  return MEMORY[0x270F1C0E8]();
}

uint64_t REAnchoringComponentSetDescriptorType()
{
  return MEMORY[0x270F1C0F0]();
}

uint64_t REAnchoringComponentSetIsRequired()
{
  return MEMORY[0x270F1C0F8]();
}

uint64_t REAnchoringComponentSetScaleFactor()
{
  return MEMORY[0x270F1C110]();
}

uint64_t REAssetHandleCopyAssetIdentifierString()
{
  return MEMORY[0x270F1C400]();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return MEMORY[0x270F1C560]();
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable()
{
  return MEMORY[0x270F1C5B8]();
}

uint64_t REAssetManagerSceneAssetCreate()
{
  return MEMORY[0x270F1C680]();
}

uint64_t REAssetWithMetadataCreate()
{
  return MEMORY[0x270F1C778]();
}

uint64_t REAssetWithMetadataSetConfigurationNames()
{
  return MEMORY[0x270F1C780]();
}

uint64_t REAssetWithMetadataSetLabel()
{
  return MEMORY[0x270F1C788]();
}

uint64_t REAudioFileAssetConfigurationCreate()
{
  return MEMORY[0x270F1C7E8]();
}

uint64_t REAudioFileAssetConfigurationDestroy()
{
  return MEMORY[0x270F1C7F0]();
}

uint64_t REAudioFileAssetConfigurationGetCalibrationLevel()
{
  return MEMORY[0x270F1C7F8]();
}

uint64_t REAudioFileAssetConfigurationGetCalibrationMode()
{
  return MEMORY[0x270F1C800]();
}

uint64_t REAudioFileAssetConfigurationGetMixGroupName()
{
  return MEMORY[0x270F1C808]();
}

uint64_t REAudioFileAssetConfigurationGetNormalizationMode()
{
  return MEMORY[0x270F1C810]();
}

uint64_t REAudioFileAssetConfigurationGetRandomizeStart()
{
  return MEMORY[0x270F1C818]();
}

uint64_t REAudioFileAssetConfigurationGetShouldLoop()
{
  return MEMORY[0x270F1C820]();
}

uint64_t REAudioFileAssetConfigurationGetStreaming()
{
  return MEMORY[0x270F1C828]();
}

uint64_t REAudioFileAssetConfigurationSetCalibrationLevel()
{
  return MEMORY[0x270F1C830]();
}

uint64_t REAudioFileAssetConfigurationSetCalibrationMode()
{
  return MEMORY[0x270F1C838]();
}

uint64_t REAudioFileAssetConfigurationSetMixGroupName()
{
  return MEMORY[0x270F1C850]();
}

uint64_t REAudioFileAssetConfigurationSetNormalizationMode()
{
  return MEMORY[0x270F1C858]();
}

uint64_t REAudioFileAssetConfigurationSetRandomizeStart()
{
  return MEMORY[0x270F1C860]();
}

uint64_t REAudioFileAssetConfigurationSetShouldLoop()
{
  return MEMORY[0x270F1C868]();
}

uint64_t REAudioFileAssetConfigurationSetStreaming()
{
  return MEMORY[0x270F1C870]();
}

uint64_t REAudioFileAssetCreateWithMappedDataAndConfiguration()
{
  return MEMORY[0x270F1C890]();
}

uint64_t REAudioFileAssetCreateWithMappedDataNullable()
{
  return MEMORY[0x270F1C898]();
}

uint64_t REAudioFileAssetGetLayoutTag()
{
  return MEMORY[0x270F1C8D0]();
}

uint64_t REAudioFileGroupAssetCreateWithFileAssets()
{
  return MEMORY[0x270F1C958]();
}

uint64_t REAudioMixGroupsComponentAddMixGroup()
{
  return MEMORY[0x270F1C9E0]();
}

uint64_t REAudioMixGroupsComponentCreateMixGroupID()
{
  return MEMORY[0x270F1C9E8]();
}

uint64_t REAudioMixGroupsComponentGetComponentType()
{
  return MEMORY[0x270F1C9F8]();
}

uint64_t REBallSocketJointComponentGetComponentType()
{
  return MEMORY[0x270F1CB58]();
}

uint64_t REBodyTrackingComponentGetComponentType()
{
  return MEMORY[0x270F1CE60]();
}

uint64_t REColliderComponentGetComponentType()
{
  return MEMORY[0x270F1D110]();
}

uint64_t REComponentClassFromName()
{
  return MEMORY[0x270F1D2A8]();
}

uint64_t REComponentClassFromType()
{
  return MEMORY[0x270F1D2B0]();
}

uint64_t REComponentClassFromTypeInfo()
{
  return MEMORY[0x270F1D2B8]();
}

uint64_t REComponentClassGetName()
{
  return MEMORY[0x270F1D2C0]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x270F1D2F0]();
}

uint64_t REComponentMarkDirty()
{
  return MEMORY[0x270F1D300]();
}

uint64_t RECustomComponentGetObject()
{
  return MEMORY[0x270F1D4D8]();
}

uint64_t REDebugMeshComponentGetComponentType()
{
  return MEMORY[0x270F1D5D0]();
}

uint64_t REDirectionalLightComponentGetComponentType()
{
  return MEMORY[0x270F1D728]();
}

uint64_t REEngineGetServiceLocator()
{
  return MEMORY[0x270F1DAB8]();
}

uint64_t REEntityAddComponentByClass()
{
  return MEMORY[0x270F1DB68]();
}

uint64_t REEntityAddCustomComponent()
{
  return MEMORY[0x270F1DB78]();
}

uint64_t REEntityGetChild()
{
  return MEMORY[0x270F1DBE8]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x270F1DC10]();
}

uint64_t REEntityGetCustomComponent()
{
  return MEMORY[0x270F1DC20]();
}

uint64_t REEntityGetName()
{
  return MEMORY[0x270F1DC30]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x270F1DC40]();
}

uint64_t REEntityGetOrAddCustomComponent()
{
  return MEMORY[0x270F1DC48]();
}

uint64_t REEntityGetParent()
{
  return MEMORY[0x270F1DC50]();
}

uint64_t REEntityInsertChild()
{
  return MEMORY[0x270F1DC80]();
}

uint64_t REEntityRemoveComponentByClass()
{
  return MEMORY[0x270F1DCC8]();
}

uint64_t REEntityRemoveCustomComponent()
{
  return MEMORY[0x270F1DCD0]();
}

uint64_t REGlobalTypeRegistryWithReadLock()
{
  return MEMORY[0x270F1E130]();
}

uint64_t REHingeJointComponentGetComponentType()
{
  return MEMORY[0x270F1E1A0]();
}

uint64_t REImageBasedLightComponentGetComponentType()
{
  return MEMORY[0x270F1E318]();
}

uint64_t REImageBasedLightComponentSetBlendIBLsFactor()
{
  return MEMORY[0x270F1E350]();
}

uint64_t REImageBasedLightComponentSetBlendRotationEnabled()
{
  return MEMORY[0x270F1E358]();
}

uint64_t REImageBasedLightComponentSetEnableBlend()
{
  return MEMORY[0x270F1E360]();
}

uint64_t REImageBasedLightComponentSetGlobalIBL()
{
  return MEMORY[0x270F1E368]();
}

uint64_t REImageBasedLightComponentSetIBLBlendNullable()
{
  return MEMORY[0x270F1E378]();
}

uint64_t REImageBasedLightComponentSetIBLNullable()
{
  return MEMORY[0x270F1E380]();
}

uint64_t REImageBasedLightComponentSetIntensityExponent()
{
  return MEMORY[0x270F1E388]();
}

uint64_t REImageBasedLightComponentSetMixColor()
{
  return MEMORY[0x270F1E390]();
}

uint64_t REImageBasedLightComponentSetMixFactor()
{
  return MEMORY[0x270F1E398]();
}

uint64_t REImageBasedLightComponentSetRotationEnabled()
{
  return MEMORY[0x270F1E3A0]();
}

uint64_t REImageBasedLightReceiverComponentGetComponentType()
{
  return MEMORY[0x270F1E3A8]();
}

uint64_t REImageBasedLightReceiverComponentSetIBLEntity()
{
  return MEMORY[0x270F1E3B8]();
}

uint64_t REMeshComponentGetComponentType()
{
  return MEMORY[0x270F1EE50]();
}

uint64_t REMeshSortingComponentGetComponentType()
{
  return MEMORY[0x270F1EF40]();
}

uint64_t REMotionStateComponentGetComponentType()
{
  return MEMORY[0x270F1EF90]();
}

uint64_t RENetworkComponentGetComponentType()
{
  return MEMORY[0x270F1EFE0]();
}

uint64_t RENetworkMarkComponentDirty()
{
  return MEMORY[0x270F1F038]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x270F1F178]();
}

uint64_t REPinComponentGetComponentType()
{
  return MEMORY[0x270F1F340]();
}

uint64_t REPointLightComponentGetComponentType()
{
  return MEMORY[0x270F1F3C0]();
}

uint64_t RERealityFileAssetWriteReportCreate()
{
  return MEMORY[0x270F1F638]();
}

uint64_t RERealityFileAssetWriteReportGetError()
{
  return MEMORY[0x270F1F640]();
}

uint64_t RERealityFileWriterCertifyFreeOfChangeSceneActions()
{
  return MEMORY[0x270F1F718]();
}

uint64_t RERealityFileWriterClose()
{
  return MEMORY[0x270F1F720]();
}

uint64_t RERealityFileWriterCreateWithParameters()
{
  return MEMORY[0x270F1F728]();
}

uint64_t RERealityFileWriterGetVersionFromDeploymentTarget()
{
  return MEMORY[0x270F1F740]();
}

uint64_t RERealityFileWriterOpen()
{
  return MEMORY[0x270F1F748]();
}

uint64_t RERealityFileWriterSetConfigurationSetNames()
{
  return MEMORY[0x270F1F758]();
}

uint64_t RERealityFileWriterWriteAssetArrayAndDependencies()
{
  return MEMORY[0x270F1F778]();
}

uint64_t RERealityFileWritingParametersCreate()
{
  return MEMORY[0x270F1F788]();
}

uint64_t RERealityFileWritingParametersSetMajorVersion()
{
  return MEMORY[0x270F1F798]();
}

uint64_t RERelease()
{
  return MEMORY[0x270F1F850]();
}

uint64_t RERetain()
{
  return MEMORY[0x270F1FA58]();
}

uint64_t RERigidBodyComponentGetComponentType()
{
  return MEMORY[0x270F1FAE0]();
}

uint64_t RESceneAddEntity()
{
  return MEMORY[0x270F1FC28]();
}

uint64_t RESceneCreate()
{
  return MEMORY[0x270F1FC50]();
}

uint64_t RESceneGetEntitiesArray()
{
  return MEMORY[0x270F1FCD8]();
}

uint64_t RESceneGetName()
{
  return MEMORY[0x270F1FCF8]();
}

uint64_t RESceneLoadFromAsset()
{
  return MEMORY[0x270F1FDC0]();
}

uint64_t RESceneUnderstandingComponentGetComponentType()
{
  return MEMORY[0x270F1FE28]();
}

uint64_t REServiceLocatorGetAssetManager()
{
  return MEMORY[0x270F1FED0]();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return MEMORY[0x270F1FF38]();
}

uint64_t RESpotLightComponentGetComponentType()
{
  return MEMORY[0x270F20228]();
}

uint64_t RETextureImportGetCGColorSpaceFromOCIOString()
{
  return MEMORY[0x270F20730]();
}

uint64_t RETextureImportGetOCIOStringArrayFromCGColorSpace()
{
  return MEMORY[0x270F20738]();
}

uint64_t RETextureImportOperationGetImageUTType()
{
  return MEMORY[0x270F20788]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x270F20F50]();
}

uint64_t RETypeInfoGetID()
{
  return MEMORY[0x270F21048]();
}

uint64_t RETypeInfoGetName()
{
  return MEMORY[0x270F21058]();
}

uint64_t RETypeInfoGetSubClass()
{
  return MEMORY[0x270F21088]();
}

uint64_t RETypeInfoGetSubClassCount()
{
  return MEMORY[0x270F21090]();
}

uint64_t RETypeRegistryGetTypeInfoByTypeName()
{
  return MEMORY[0x270F210E8]();
}

uint64_t REVirtualEnvironmentProbeComponentAddResource()
{
  return MEMORY[0x270F21A20]();
}

uint64_t REVirtualEnvironmentProbeComponentClearResources()
{
  return MEMORY[0x270F21A28]();
}

uint64_t REVirtualEnvironmentProbeComponentGetComponentType()
{
  return MEMORY[0x270F21A30]();
}

uint64_t REVirtualEnvironmentProbeComponentGetResourceCount()
{
  return MEMORY[0x270F21A50]();
}

uint64_t REVirtualEnvironmentProbeComponentSetIntensityExponent()
{
  return MEMORY[0x270F21A58]();
}

uint64_t REVirtualEnvironmentProbeComponentSetRelativeWeight()
{
  return MEMORY[0x270F21A60]();
}

uint64_t REVirtualEnvironmentProbeComponentSetResource()
{
  return MEMORY[0x270F21A68]();
}

uint64_t RIOBuilderAddComponent()
{
  return MEMORY[0x270F21B08]();
}

uint64_t RIOBuilderAddComponentByClass()
{
  return MEMORY[0x270F21B10]();
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x270F21B18]();
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCopyName()
{
  return MEMORY[0x270F21B20]();
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCreateWithNameAndMetadataDescriptors()
{
  return MEMORY[0x270F21B28]();
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x270F21B30]();
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyNamespacePrefix()
{
  return MEMORY[0x270F21B38]();
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCreateWithNamespacePrefixAndMetadataDescriptors()
{
  return MEMORY[0x270F21B40]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyChildPrimType()
{
  return MEMORY[0x270F21B48]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x270F21B50]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x270F21B58]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x270F21B60]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCreate()
{
  return MEMORY[0x270F21B68]();
}

uint64_t RIOBuilderCopyBuildOrder()
{
  return MEMORY[0x270F21B70]();
}

uint64_t RIOBuilderCopyDirtyStageSubscription()
{
  return MEMORY[0x270F21B78]();
}

uint64_t RIOBuilderCopyIdentifier()
{
  return MEMORY[0x270F21B80]();
}

uint64_t RIOBuilderCopyInputsDescriptor()
{
  return MEMORY[0x270F21B88]();
}

uint64_t RIOBuilderCopyOutputsDescriptor()
{
  return MEMORY[0x270F21B90]();
}

uint64_t RIOBuilderCopyPrim()
{
  return MEMORY[0x270F21B98]();
}

uint64_t RIOBuilderCopyPrimPath()
{
  return MEMORY[0x270F21BA0]();
}

uint64_t RIOBuilderCreateWithBuilderInfo()
{
  return MEMORY[0x270F21BA8]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x270F21BB0]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x270F21BB8]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x270F21BC0]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCreate()
{
  return MEMORY[0x270F21BC8]();
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCopyCallbackFunction()
{
  return MEMORY[0x270F21BD0]();
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCopyInputName()
{
  return MEMORY[0x270F21BD8]();
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCreate()
{
  return MEMORY[0x270F21BE0]();
}

uint64_t RIOBuilderDescendantPrimInputDescriptorCreate()
{
  return MEMORY[0x270F21BE8]();
}

uint64_t RIOBuilderDescendantPrimsInputDescriptorCreate()
{
  return MEMORY[0x270F21BF0]();
}

uint64_t RIOBuilderDirtyMetadataDescriptorCopyMetadata()
{
  return MEMORY[0x270F21BF8]();
}

uint64_t RIOBuilderDirtyMetadataDescriptorCreateWithMetadata()
{
  return MEMORY[0x270F21C00]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x270F21C08]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyPropertyDescriptors()
{
  return MEMORY[0x270F21C10]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyType()
{
  return MEMORY[0x270F21C18]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors()
{
  return MEMORY[0x270F21C20]();
}

uint64_t RIOBuilderDirtyPropertyDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x270F21C28]();
}

uint64_t RIOBuilderDirtyPropertyDescriptorCopyType()
{
  return MEMORY[0x270F21C30]();
}

uint64_t RIOBuilderDirtyPropertyDescriptorCreateWithMetadataDescriptors()
{
  return MEMORY[0x270F21C38]();
}

uint64_t RIOBuilderDirtyStageDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x270F21C40]();
}

uint64_t RIOBuilderDirtyStageDescriptorCopyPrimDescriptors()
{
  return MEMORY[0x270F21C48]();
}

uint64_t RIOBuilderDirtyStageDescriptorCreateWithPrimDescriptorsAndMetadataDescriptors()
{
  return MEMORY[0x270F21C50]();
}

uint64_t RIOBuilderDirtyStageSubscriptionCopyDirtyStageDescriptors()
{
  return MEMORY[0x270F21C58]();
}

uint64_t RIOBuilderDirtyStageSubscriptionCreateWithDirtyStageDescriptors()
{
  return MEMORY[0x270F21C60]();
}

uint64_t RIOBuilderEntityBuilderGetOutputEntity()
{
  return MEMORY[0x270F21C68]();
}

uint64_t RIOBuilderEntityGeneratingPrimDescriptorCreate()
{
  return MEMORY[0x270F21C70]();
}

uint64_t RIOBuilderEntityGeneratingPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x270F21C78]();
}

uint64_t RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x270F21C80]();
}

uint64_t RIOBuilderEntityGeneratingPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x270F21C88]();
}

uint64_t RIOBuilderGetSwiftObject()
{
  return MEMORY[0x270F21C90]();
}

uint64_t RIOBuilderInputDescriptorCopyType()
{
  return MEMORY[0x270F21C98]();
}

uint64_t RIOBuilderInputsCopyPrimPath()
{
  return MEMORY[0x270F21CA0]();
}

uint64_t RIOBuilderInputsCopyStage()
{
  return MEMORY[0x270F21CA8]();
}

uint64_t RIOBuilderInputsCopyStageDelta()
{
  return MEMORY[0x270F21CB0]();
}

uint64_t RIOBuilderInputsCreateCubeMapTextureAsset()
{
  return MEMORY[0x270F21CB8]();
}

uint64_t RIOBuilderInputsDescriptorCopyInputDescriptors()
{
  return MEMORY[0x270F21CC8]();
}

uint64_t RIOBuilderInputsDescriptorCreateWithInputDescriptors()
{
  return MEMORY[0x270F21CD0]();
}

uint64_t RIOBuilderInputsGetAllBuildersAndOutputNamesProvidingValuesWithName()
{
  return MEMORY[0x270F21CD8]();
}

uint64_t RIOBuilderInputsGetImportSession()
{
  return MEMORY[0x270F21CE0]();
}

uint64_t RIOBuilderInputsPerformBlockSyncOnEngineQueue()
{
  return MEMORY[0x270F21CE8]();
}

uint64_t RIOBuilderOutputDescriptorCopyOptionality()
{
  return MEMORY[0x270F21CF0]();
}

uint64_t RIOBuilderOutputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x270F21CF8]();
}

uint64_t RIOBuilderOutputDescriptorCopyOutputName()
{
  return MEMORY[0x270F21D00]();
}

uint64_t RIOBuilderOutputDescriptorCreateWithNameAndOutputIdentifierAndOptionality()
{
  return MEMORY[0x270F21D08]();
}

uint64_t RIOBuilderOutputsCreate()
{
  return MEMORY[0x270F21D10]();
}

uint64_t RIOBuilderOutputsDescriptorCopyOutputDescriptors()
{
  return MEMORY[0x270F21D18]();
}

uint64_t RIOBuilderOutputsDescriptorCreateWithOutputDescriptors()
{
  return MEMORY[0x270F21D20]();
}

uint64_t RIOBuilderOutputsGetSwiftObject()
{
  return MEMORY[0x270F21D28]();
}

uint64_t RIOBuilderOutputsSetSwiftObject()
{
  return MEMORY[0x270F21D30]();
}

uint64_t RIOBuilderOutputsStoreValueWithName()
{
  return MEMORY[0x270F21D38]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x270F21D40]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x270F21D48]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x270F21D50]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCreate()
{
  return MEMORY[0x270F21D58]();
}

uint64_t RIOBuilderPrimDeltaCopyDirtyMetadata()
{
  return MEMORY[0x270F21D60]();
}

uint64_t RIOBuilderPrimDeltaCopyPropertyDeltas()
{
  return MEMORY[0x270F21D68]();
}

uint64_t RIOBuilderPropertyDeltaCopyDirtyMetadata()
{
  return MEMORY[0x270F21D70]();
}

uint64_t RIOBuilderPropertyDeltaCopyPropertyName()
{
  return MEMORY[0x270F21D78]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x270F21D80]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x270F21D88]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x270F21D90]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyPropertyNameOnCurrentPrimWithRelationship()
{
  return MEMORY[0x270F21D98]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCreate()
{
  return MEMORY[0x270F21DA0]();
}

uint64_t RIOBuilderSetSwiftObject()
{
  return MEMORY[0x270F21DA8]();
}

uint64_t RIOBuilderStageDeltaCopyDirtyMetadata()
{
  return MEMORY[0x270F21DB0]();
}

uint64_t RIOBuilderStageDeltaCopyPrimDelta()
{
  return MEMORY[0x270F21DB8]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x270F21DC0]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x270F21DC8]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x270F21DD0]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyPrimPath()
{
  return MEMORY[0x270F21DD8]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCreate()
{
  return MEMORY[0x270F21DE0]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x270F21DE8]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCopyPropertyDescriptors()
{
  return MEMORY[0x270F21DF0]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCopyTypeNames()
{
  return MEMORY[0x270F21DF8]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors()
{
  return MEMORY[0x270F21E00]();
}

uint64_t RIODependencyDescriptorCopyAssets()
{
  return MEMORY[0x270F21E10]();
}

uint64_t RIODependencyDescriptorCopyLayers()
{
  return MEMORY[0x270F21E18]();
}

uint64_t RIODependencyDescriptorCopyUnresolvedPaths()
{
  return MEMORY[0x270F21E20]();
}

uint64_t RIOImportSessionAssetInfoMetadataKey()
{
  return MEMORY[0x270F21E40]();
}

uint64_t RIOImportSessionCopyExtraAssetTags()
{
  return MEMORY[0x270F21E48]();
}

uint64_t RIOImportSessionCopySceneAssetName()
{
  return MEMORY[0x270F21E50]();
}

uint64_t RIOImportSessionCopySceneName()
{
  return MEMORY[0x270F21E58]();
}

uint64_t RIOImportSessionCopyStatistics()
{
  return MEMORY[0x270F21E60]();
}

uint64_t RIOImportSessionCreateSingleUseImporterWithStage()
{
  return MEMORY[0x270F21E68]();
}

uint64_t RIOImportSessionCreateSingleUseImporterWithURL()
{
  return MEMORY[0x270F21E70]();
}

uint64_t RIOImportSessionCreateWithEngine()
{
  return MEMORY[0x270F21E78]();
}

uint64_t RIOImportSessionCreateWithStage()
{
  return MEMORY[0x270F21E80]();
}

uint64_t RIOImportSessionCreateWithURL()
{
  return MEMORY[0x270F21E88]();
}

uint64_t RIOImportSessionCreateWithURLWithErrorReporting()
{
  return MEMORY[0x270F21E90]();
}

uint64_t RIOImportSessionDumpDiagnostics()
{
  return MEMORY[0x270F21E98]();
}

uint64_t RIOImportSessionGatherFaultRecords()
{
  return MEMORY[0x270F21EA0]();
}

uint64_t RIOImportSessionGatherMeshEstimates()
{
  return MEMORY[0x270F21EA8]();
}

uint64_t RIOImportSessionGatherTextureInfoWithOptionallyUnusedTextures()
{
  return MEMORY[0x270F21EB0]();
}

uint64_t RIOImportSessionGetEngineRef()
{
  return MEMORY[0x270F21EB8]();
}

uint64_t RIOImportSessionGetEntityAtPrimPath()
{
  return MEMORY[0x270F21EC0]();
}

uint64_t RIOImportSessionGetExtraAssetWithTag()
{
  return MEMORY[0x270F21EC8]();
}

uint64_t RIOImportSessionGetLoadSubdsAsSubds()
{
  return MEMORY[0x270F21ED8]();
}

uint64_t RIOImportSessionGetPrimPathForEntity()
{
  return MEMORY[0x270F21EE0]();
}

uint64_t RIOImportSessionGetRootEntity()
{
  return MEMORY[0x270F21EE8]();
}

uint64_t RIOImportSessionGetSceneCount()
{
  return MEMORY[0x270F21EF0]();
}

uint64_t RIOImportSessionGetStage()
{
  return MEMORY[0x270F21EF8]();
}

uint64_t RIOImportSessionGetSwiftObject()
{
  return MEMORY[0x270F21F00]();
}

uint64_t RIOImportSessionIsSceneActive()
{
  return MEMORY[0x270F21F08]();
}

uint64_t RIOImportSessionOverridePrimPathToEntityForSceneAssetEntities()
{
  return MEMORY[0x270F21F10]();
}

uint64_t RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue()
{
  return MEMORY[0x270F21F18]();
}

uint64_t RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue()
{
  return MEMORY[0x270F21F20]();
}

uint64_t RIOImportSessionPrimPathMetadataKey()
{
  return MEMORY[0x270F21F28]();
}

uint64_t RIOImportSessionQueueAssetForLoad()
{
  return MEMORY[0x270F21F30]();
}

uint64_t RIOImportSessionRegisterAudioAsset()
{
  return MEMORY[0x270F21F38]();
}

uint64_t RIOImportSessionRegisterBuilderGenerator()
{
  return MEMORY[0x270F21F40]();
}

uint64_t RIOImportSessionReloadAsset()
{
  return MEMORY[0x270F21F48]();
}

uint64_t RIOImportSessionRemoveExtraAssetWithTag()
{
  return MEMORY[0x270F21F50]();
}

uint64_t RIOImportSessionResolvedPathMetadataKey()
{
  return MEMORY[0x270F21F58]();
}

uint64_t RIOImportSessionSetBundleInfo()
{
  return MEMORY[0x270F21F60]();
}

uint64_t RIOImportSessionSetExtraAssetWithTag()
{
  return MEMORY[0x270F21F68]();
}

uint64_t RIOImportSessionSetIsLoadModelUseCase()
{
  return MEMORY[0x270F21F70]();
}

uint64_t RIOImportSessionSetOriginalUrl()
{
  return MEMORY[0x270F21F78]();
}

uint64_t RIOImportSessionSetRegistrationForScenes()
{
  return MEMORY[0x270F21F80]();
}

uint64_t RIOImportSessionSetSceneUpdatePassCompletion()
{
  return MEMORY[0x270F21F88]();
}

uint64_t RIOImportSessionSetSwiftObject()
{
  return MEMORY[0x270F21F90]();
}

uint64_t RIOImportSessionUpdate()
{
  return MEMORY[0x270F21F98]();
}

uint64_t RIOImportSessionUpdateSynchronouslyOnEngineQueue()
{
  return MEMORY[0x270F21FA0]();
}

uint64_t RIOPxrArAssetCreate()
{
  return MEMORY[0x270F21FA8]();
}

uint64_t RIOPxrArAssetCreateCFDataNoCopy()
{
  return MEMORY[0x270F21FB0]();
}

uint64_t RIOPxrSdfAssetPathAssetPathCopyString()
{
  return MEMORY[0x270F21FB8]();
}

uint64_t RIOPxrSdfAssetPathCreateEmptyPath()
{
  return MEMORY[0x270F21FC0]();
}

uint64_t RIOPxrSdfAssetPathCreateFromCString()
{
  return MEMORY[0x270F21FC8]();
}

uint64_t RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath()
{
  return MEMORY[0x270F21FD0]();
}

uint64_t RIOPxrSdfAssetPathIsEmpty()
{
  return MEMORY[0x270F21FD8]();
}

uint64_t RIOPxrSdfAssetPathIsLessThan()
{
  return MEMORY[0x270F21FE0]();
}

uint64_t RIOPxrSdfAssetPathResolvedPathCopyString()
{
  return MEMORY[0x270F21FE8]();
}

uint64_t RIOPxrSdfAttributeSpecCopyLayer()
{
  return MEMORY[0x270F21FF0]();
}

uint64_t RIOPxrSdfAttributeSpecHasColorSpace()
{
  return MEMORY[0x270F21FF8]();
}

uint64_t RIOPxrSdfAttributeSpecIsBlocked()
{
  return MEMORY[0x270F22000]();
}

uint64_t RIOPxrSdfLayerClearAllCustomLayerMetaData()
{
  return MEMORY[0x270F22010]();
}

uint64_t RIOPxrSdfLayerClearCustomLayerData()
{
  return MEMORY[0x270F22028]();
}

uint64_t RIOPxrSdfLayerClearDefaultPrim()
{
  return MEMORY[0x270F22030]();
}

uint64_t RIOPxrSdfLayerCopyAbsolutePath()
{
  return MEMORY[0x270F22070]();
}

uint64_t RIOPxrSdfLayerCopyColorConfiguration()
{
  return MEMORY[0x270F22078]();
}

uint64_t RIOPxrSdfLayerCopyColorManagementSystem()
{
  return MEMORY[0x270F22080]();
}

uint64_t RIOPxrSdfLayerCopyCustomLayerDataValue()
{
  return MEMORY[0x270F22088]();
}

uint64_t RIOPxrSdfLayerCopyDefaultPrim()
{
  return MEMORY[0x270F22090]();
}

uint64_t RIOPxrSdfLayerCopyDocumentation()
{
  return MEMORY[0x270F22098]();
}

uint64_t RIOPxrSdfLayerCopyExportString()
{
  return MEMORY[0x270F220A0]();
}

uint64_t RIOPxrSdfLayerCopyIdentifier()
{
  return MEMORY[0x270F220A8]();
}

uint64_t RIOPxrSdfLayerCopyOwner()
{
  return MEMORY[0x270F220B0]();
}

uint64_t RIOPxrSdfLayerCopySessionOwner()
{
  return MEMORY[0x270F220B8]();
}

uint64_t RIOPxrSdfLayerCopySubLayerPaths()
{
  return MEMORY[0x270F220C0]();
}

uint64_t RIOPxrSdfLayerCreateAnonymous()
{
  return MEMORY[0x270F220C8]();
}

uint64_t RIOPxrSdfLayerCreateIdentifier()
{
  return MEMORY[0x270F220D0]();
}

uint64_t RIOPxrSdfLayerCreateOrFindRelativeToLayer()
{
  return MEMORY[0x270F220D8]();
}

uint64_t RIOPxrSdfLayerExportWithFilePath()
{
  return MEMORY[0x270F220E0]();
}

uint64_t RIOPxrSdfLayerExportWithURL()
{
  return MEMORY[0x270F220E8]();
}

uint64_t RIOPxrSdfLayerFlattenSubGraphInPlace()
{
  return MEMORY[0x270F220F0]();
}

uint64_t RIOPxrSdfLayerGetEndTimeCode()
{
  return MEMORY[0x270F220F8]();
}

uint64_t RIOPxrSdfLayerGetFramePrecision()
{
  return MEMORY[0x270F22100]();
}

uint64_t RIOPxrSdfLayerGetFramesPerSecond()
{
  return MEMORY[0x270F22108]();
}

uint64_t RIOPxrSdfLayerGetHasOwnedSubLayers()
{
  return MEMORY[0x270F22110]();
}

uint64_t RIOPxrSdfLayerGetMetadata()
{
  return MEMORY[0x270F22118]();
}

uint64_t RIOPxrSdfLayerGetStartTimeCode()
{
  return MEMORY[0x270F22128]();
}

uint64_t RIOPxrSdfLayerGetTimeCodesPerSecond()
{
  return MEMORY[0x270F22130]();
}

uint64_t RIOPxrSdfLayerHasColorConfiguration()
{
  return MEMORY[0x270F22138]();
}

uint64_t RIOPxrSdfLayerHasColorManagementSystem()
{
  return MEMORY[0x270F22140]();
}

uint64_t RIOPxrSdfLayerHasCustomLayerMetaData()
{
  return MEMORY[0x270F22148]();
}

uint64_t RIOPxrSdfLayerHasEndTimeCode()
{
  return MEMORY[0x270F22150]();
}

uint64_t RIOPxrSdfLayerHasFramePrecision()
{
  return MEMORY[0x270F22158]();
}

uint64_t RIOPxrSdfLayerHasFramesPerSecond()
{
  return MEMORY[0x270F22160]();
}

uint64_t RIOPxrSdfLayerHasOwner()
{
  return MEMORY[0x270F22168]();
}

uint64_t RIOPxrSdfLayerHasSessionOwner()
{
  return MEMORY[0x270F22170]();
}

uint64_t RIOPxrSdfLayerHasStartTimeCode()
{
  return MEMORY[0x270F22178]();
}

uint64_t RIOPxrSdfLayerHasTimeCodesPerSecond()
{
  return MEMORY[0x270F22180]();
}

uint64_t RIOPxrSdfLayerIsAnonymous()
{
  return MEMORY[0x270F22188]();
}

uint64_t RIOPxrSdfLayerIsEmpty()
{
  return MEMORY[0x270F22190]();
}

uint64_t RIOPxrSdfLayerReload()
{
  return MEMORY[0x270F22198]();
}

uint64_t RIOPxrSdfLayerReplicationReceive()
{
  return MEMORY[0x270F221A0]();
}

uint64_t RIOPxrSdfLayerReplicationStartSending()
{
  return MEMORY[0x270F221A8]();
}

uint64_t RIOPxrSdfLayerReplicationStopSending()
{
  return MEMORY[0x270F221B0]();
}

uint64_t RIOPxrSdfLayerSave()
{
  return MEMORY[0x270F221B8]();
}

uint64_t RIOPxrSdfLayerSetColorConfiguration()
{
  return MEMORY[0x270F221C0]();
}

uint64_t RIOPxrSdfLayerSetColorManagementSystem()
{
  return MEMORY[0x270F221C8]();
}

uint64_t RIOPxrSdfLayerSetCustomLayerData()
{
  return MEMORY[0x270F221D0]();
}

uint64_t RIOPxrSdfLayerSetDefaultPrim()
{
  return MEMORY[0x270F221D8]();
}

uint64_t RIOPxrSdfLayerSetMetadata()
{
  return MEMORY[0x270F22200]();
}

uint64_t RIOPxrSdfLayerSetSubLayerPathsWithStrings()
{
  return MEMORY[0x270F22210]();
}

uint64_t RIOPxrSdfNamespaceEditCopyCurrentPath()
{
  return MEMORY[0x270F22228]();
}

uint64_t RIOPxrSdfNamespaceEditCopyNewPath()
{
  return MEMORY[0x270F22230]();
}

uint64_t RIOPxrSdfNamespaceEditCreateEmpty()
{
  return MEMORY[0x270F22238]();
}

uint64_t RIOPxrSdfNamespaceEditCreateFromPaths()
{
  return MEMORY[0x270F22240]();
}

uint64_t RIOPxrSdfNamespaceEditCreateRemove()
{
  return MEMORY[0x270F22248]();
}

uint64_t RIOPxrSdfNamespaceEditCreateRename()
{
  return MEMORY[0x270F22250]();
}

uint64_t RIOPxrSdfNamespaceEditCreateReorder()
{
  return MEMORY[0x270F22258]();
}

uint64_t RIOPxrSdfNamespaceEditCreateReparent()
{
  return MEMORY[0x270F22260]();
}

uint64_t RIOPxrSdfNamespaceEditCreateReparentAndRename()
{
  return MEMORY[0x270F22268]();
}

uint64_t RIOPxrSdfNamespaceEditGetIndex()
{
  return MEMORY[0x270F22270]();
}

uint64_t RIOPxrSdfPathContainsPrimVariantSelection()
{
  return MEMORY[0x270F22278]();
}

uint64_t RIOPxrSdfPathContainsPropertyElements()
{
  return MEMORY[0x270F22280]();
}

uint64_t RIOPxrSdfPathContainsTargetPath()
{
  return MEMORY[0x270F22288]();
}

uint64_t RIOPxrSdfPathCopyAbsoluteRootOrPrimPath()
{
  return MEMORY[0x270F22290]();
}

uint64_t RIOPxrSdfPathCopyCommonPrefix()
{
  return MEMORY[0x270F22298]();
}

uint64_t RIOPxrSdfPathCopyElementString()
{
  return MEMORY[0x270F222A0]();
}

uint64_t RIOPxrSdfPathCopyName()
{
  return MEMORY[0x270F222A8]();
}

uint64_t RIOPxrSdfPathCopyParentPath()
{
  return MEMORY[0x270F222B0]();
}

uint64_t RIOPxrSdfPathCopyPrimOrPrimVariantSelectionPath()
{
  return MEMORY[0x270F222B8]();
}

uint64_t RIOPxrSdfPathCopyPrimPath()
{
  return MEMORY[0x270F222C0]();
}

uint64_t RIOPxrSdfPathCopyString()
{
  return MEMORY[0x270F222C8]();
}

uint64_t RIOPxrSdfPathCopyTargetPath()
{
  return MEMORY[0x270F222D0]();
}

uint64_t RIOPxrSdfPathCopyVariantSelection()
{
  return MEMORY[0x270F222D8]();
}

uint64_t RIOPxrSdfPathCreateAbsoluteRootPath()
{
  return MEMORY[0x270F222E0]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingChild()
{
  return MEMORY[0x270F222E8]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingElementToken()
{
  return MEMORY[0x270F222F0]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingExpression()
{
  return MEMORY[0x270F222F8]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapper()
{
  return MEMORY[0x270F22300]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapperArg()
{
  return MEMORY[0x270F22308]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingPath()
{
  return MEMORY[0x270F22310]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingProperty()
{
  return MEMORY[0x270F22318]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingRelationalAttribute()
{
  return MEMORY[0x270F22320]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingTarget()
{
  return MEMORY[0x270F22328]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingVariantSelection()
{
  return MEMORY[0x270F22330]();
}

uint64_t RIOPxrSdfPathCreateCopyMakingAbsolutePath()
{
  return MEMORY[0x270F22338]();
}

uint64_t RIOPxrSdfPathCreateCopyMakingRelativePath()
{
  return MEMORY[0x270F22340]();
}

uint64_t RIOPxrSdfPathCreateCopyRemovingCommonSuffix()
{
  return MEMORY[0x270F22348]();
}

uint64_t RIOPxrSdfPathCreateCopyReplacingName()
{
  return MEMORY[0x270F22350]();
}

uint64_t RIOPxrSdfPathCreateCopyReplacingPrefix()
{
  return MEMORY[0x270F22358]();
}

uint64_t RIOPxrSdfPathCreateCopyReplacingTargetPath()
{
  return MEMORY[0x270F22360]();
}

uint64_t RIOPxrSdfPathCreateCopyStrippingAllVariantSelections()
{
  return MEMORY[0x270F22368]();
}

uint64_t RIOPxrSdfPathCreateEmptyPath()
{
  return MEMORY[0x270F22370]();
}

uint64_t RIOPxrSdfPathCreateFromCString()
{
  return MEMORY[0x270F22378]();
}

uint64_t RIOPxrSdfPathCreateReflexiveRelativePath()
{
  return MEMORY[0x270F22380]();
}

uint64_t RIOPxrSdfPathHasPrefix()
{
  return MEMORY[0x270F22390]();
}

uint64_t RIOPxrSdfPathIsAbsolutePath()
{
  return MEMORY[0x270F22398]();
}

uint64_t RIOPxrSdfPathIsAbsoluteRootOrPrimPath()
{
  return MEMORY[0x270F223A0]();
}

uint64_t RIOPxrSdfPathIsEmpty()
{
  return MEMORY[0x270F223A8]();
}

uint64_t RIOPxrSdfPathIsExpressionPath()
{
  return MEMORY[0x270F223B0]();
}

uint64_t RIOPxrSdfPathIsLessThan()
{
  return MEMORY[0x270F223B8]();
}

uint64_t RIOPxrSdfPathIsMapperArgPath()
{
  return MEMORY[0x270F223C0]();
}

uint64_t RIOPxrSdfPathIsMapperPath()
{
  return MEMORY[0x270F223C8]();
}

uint64_t RIOPxrSdfPathIsNamespacedPropertyPath()
{
  return MEMORY[0x270F223D0]();
}

uint64_t RIOPxrSdfPathIsPrimOrPrimVariantSelectionPath()
{
  return MEMORY[0x270F223D8]();
}

uint64_t RIOPxrSdfPathIsPrimPath()
{
  return MEMORY[0x270F223E0]();
}

uint64_t RIOPxrSdfPathIsPrimPropertyPath()
{
  return MEMORY[0x270F223E8]();
}

uint64_t RIOPxrSdfPathIsPrimVariantSelectionPath()
{
  return MEMORY[0x270F223F0]();
}

uint64_t RIOPxrSdfPathIsPropertyPath()
{
  return MEMORY[0x270F223F8]();
}

uint64_t RIOPxrSdfPathIsRelationalAttributePath()
{
  return MEMORY[0x270F22400]();
}

uint64_t RIOPxrSdfPathIsRootPrimPath()
{
  return MEMORY[0x270F22408]();
}

uint64_t RIOPxrSdfPathIsTargetPath()
{
  return MEMORY[0x270F22410]();
}

uint64_t RIOPxrSdfPrimSpecCopyAttribute()
{
  return MEMORY[0x270F22418]();
}

uint64_t RIOPxrSdfPrimSpecCopyLayer()
{
  return MEMORY[0x270F22420]();
}

uint64_t RIOPxrSdfPrimSpecCopyPath()
{
  return MEMORY[0x270F22428]();
}

uint64_t RIOPxrSdfReferenceCopyAssetPathString()
{
  return MEMORY[0x270F22438]();
}

uint64_t RIOPxrSdfReferenceCopyPrimPath()
{
  return MEMORY[0x270F22440]();
}

uint64_t RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath()
{
  return MEMORY[0x270F22448]();
}

uint64_t RIOPxrSdfReferenceIsEqual()
{
  return MEMORY[0x270F22450]();
}

uint64_t RIOPxrSdfReferenceIsLessThan()
{
  return MEMORY[0x270F22458]();
}

uint64_t RIOPxrSdfReferenceSetAssetPath()
{
  return MEMORY[0x270F22460]();
}

uint64_t RIOPxrSdfReferenceSetPrimPath()
{
  return MEMORY[0x270F22468]();
}

uint64_t RIOPxrSdfValueTypeNameCopyToken()
{
  return MEMORY[0x270F22470]();
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPath()
{
  return MEMORY[0x270F22478]();
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPathArray()
{
  return MEMORY[0x270F22480]();
}

uint64_t RIOPxrSdfValueTypeNameCreateBool()
{
  return MEMORY[0x270F22488]();
}

uint64_t RIOPxrSdfValueTypeNameCreateBoolArray()
{
  return MEMORY[0x270F22490]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3d()
{
  return MEMORY[0x270F22498]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3dArray()
{
  return MEMORY[0x270F224A0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3f()
{
  return MEMORY[0x270F224A8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3fArray()
{
  return MEMORY[0x270F224B0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3h()
{
  return MEMORY[0x270F224B8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3hArray()
{
  return MEMORY[0x270F224C0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4d()
{
  return MEMORY[0x270F224C8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4dArray()
{
  return MEMORY[0x270F224D0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4f()
{
  return MEMORY[0x270F224D8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4fArray()
{
  return MEMORY[0x270F224E0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4h()
{
  return MEMORY[0x270F224E8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4hArray()
{
  return MEMORY[0x270F224F0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble()
{
  return MEMORY[0x270F224F8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2()
{
  return MEMORY[0x270F22500]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2Array()
{
  return MEMORY[0x270F22508]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3()
{
  return MEMORY[0x270F22510]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3Array()
{
  return MEMORY[0x270F22518]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4()
{
  return MEMORY[0x270F22520]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4Array()
{
  return MEMORY[0x270F22528]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDoubleArray()
{
  return MEMORY[0x270F22530]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat()
{
  return MEMORY[0x270F22538]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2()
{
  return MEMORY[0x270F22540]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2Array()
{
  return MEMORY[0x270F22548]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3()
{
  return MEMORY[0x270F22550]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3Array()
{
  return MEMORY[0x270F22558]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4()
{
  return MEMORY[0x270F22560]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4Array()
{
  return MEMORY[0x270F22568]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloatArray()
{
  return MEMORY[0x270F22570]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4d()
{
  return MEMORY[0x270F22578]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4dArray()
{
  return MEMORY[0x270F22580]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf()
{
  return MEMORY[0x270F22588]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2()
{
  return MEMORY[0x270F22590]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2Array()
{
  return MEMORY[0x270F22598]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3()
{
  return MEMORY[0x270F225A0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3Array()
{
  return MEMORY[0x270F225A8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4()
{
  return MEMORY[0x270F225B0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4Array()
{
  return MEMORY[0x270F225B8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalfArray()
{
  return MEMORY[0x270F225C0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2()
{
  return MEMORY[0x270F225C8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2Array()
{
  return MEMORY[0x270F225D0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3()
{
  return MEMORY[0x270F225D8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32()
{
  return MEMORY[0x270F225E0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32Array()
{
  return MEMORY[0x270F225E8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3Array()
{
  return MEMORY[0x270F225F0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4()
{
  return MEMORY[0x270F225F8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4Array()
{
  return MEMORY[0x270F22600]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64()
{
  return MEMORY[0x270F22608]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64Array()
{
  return MEMORY[0x270F22610]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2d()
{
  return MEMORY[0x270F22618]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2dArray()
{
  return MEMORY[0x270F22620]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3d()
{
  return MEMORY[0x270F22628]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3dArray()
{
  return MEMORY[0x270F22630]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4d()
{
  return MEMORY[0x270F22638]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4dArray()
{
  return MEMORY[0x270F22640]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3d()
{
  return MEMORY[0x270F22648]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3dArray()
{
  return MEMORY[0x270F22650]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3f()
{
  return MEMORY[0x270F22658]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3fArray()
{
  return MEMORY[0x270F22660]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3h()
{
  return MEMORY[0x270F22668]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3hArray()
{
  return MEMORY[0x270F22670]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3d()
{
  return MEMORY[0x270F22678]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3dArray()
{
  return MEMORY[0x270F22680]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3f()
{
  return MEMORY[0x270F22688]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3fArray()
{
  return MEMORY[0x270F22690]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3h()
{
  return MEMORY[0x270F22698]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3hArray()
{
  return MEMORY[0x270F226A0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatd()
{
  return MEMORY[0x270F226A8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatdArray()
{
  return MEMORY[0x270F226B0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatf()
{
  return MEMORY[0x270F226B8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatfArray()
{
  return MEMORY[0x270F226C0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuath()
{
  return MEMORY[0x270F226C8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuathArray()
{
  return MEMORY[0x270F226D0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateString()
{
  return MEMORY[0x270F226D8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateStringArray()
{
  return MEMORY[0x270F226E0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2d()
{
  return MEMORY[0x270F226E8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2dArray()
{
  return MEMORY[0x270F226F0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2f()
{
  return MEMORY[0x270F226F8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2fArray()
{
  return MEMORY[0x270F22700]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2h()
{
  return MEMORY[0x270F22708]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2hArray()
{
  return MEMORY[0x270F22710]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3d()
{
  return MEMORY[0x270F22718]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3dArray()
{
  return MEMORY[0x270F22720]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3f()
{
  return MEMORY[0x270F22728]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3fArray()
{
  return MEMORY[0x270F22730]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3h()
{
  return MEMORY[0x270F22738]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3hArray()
{
  return MEMORY[0x270F22740]();
}

uint64_t RIOPxrSdfValueTypeNameCreateToken()
{
  return MEMORY[0x270F22748]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTokenArray()
{
  return MEMORY[0x270F22750]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32()
{
  return MEMORY[0x270F22758]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32Array()
{
  return MEMORY[0x270F22760]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64()
{
  return MEMORY[0x270F22768]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64Array()
{
  return MEMORY[0x270F22770]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8()
{
  return MEMORY[0x270F22778]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8Array()
{
  return MEMORY[0x270F22780]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3d()
{
  return MEMORY[0x270F22788]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3dArray()
{
  return MEMORY[0x270F22790]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3f()
{
  return MEMORY[0x270F22798]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3fArray()
{
  return MEMORY[0x270F227A0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3h()
{
  return MEMORY[0x270F227A8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3hArray()
{
  return MEMORY[0x270F227B0]();
}

uint64_t RIOPxrSdrRegistryCopyNodeNames()
{
  return MEMORY[0x270F227B8]();
}

uint64_t RIOPxrSdrRegistryGetShaderNodeByName()
{
  return MEMORY[0x270F227C0]();
}

uint64_t RIOPxrSdrShaderNodeCopyFamily()
{
  return MEMORY[0x270F227C8]();
}

uint64_t RIOPxrSdrShaderPropertyCopyDefaultValue()
{
  return MEMORY[0x270F227D0]();
}

uint64_t RIOPxrSdrShaderPropertyCopyName()
{
  return MEMORY[0x270F227D8]();
}

uint64_t RIOPxrSdrShaderPropertyCopyType()
{
  return MEMORY[0x270F227E0]();
}

uint64_t RIOPxrSdrShaderPropertyGetArraySize()
{
  return MEMORY[0x270F227E8]();
}

uint64_t RIOPxrSdrShaderPropertyIsArray()
{
  return MEMORY[0x270F227F0]();
}

uint64_t RIOPxrSdrShaderPropertyIsConnectable()
{
  return MEMORY[0x270F227F8]();
}

uint64_t RIOPxrTfTokenCopyString()
{
  return MEMORY[0x270F22800]();
}

uint64_t RIOPxrTfTokenCopyTypeSchemaPropertyNames()
{
  return MEMORY[0x270F22808]();
}

uint64_t RIOPxrTfTokenCreateWithCString()
{
  return MEMORY[0x270F22810]();
}

uint64_t RIOPxrTfTokenEmpty()
{
  return MEMORY[0x270F22818]();
}

uint64_t RIOPxrTfTokenIsEmpty()
{
  return MEMORY[0x270F22828]();
}

uint64_t RIOPxrTfTokenIsImmortal()
{
  return MEMORY[0x270F22830]();
}

uint64_t RIOPxrUsdAttributeAddConnection()
{
  return MEMORY[0x270F22838]();
}

uint64_t RIOPxrUsdAttributeClear()
{
  return MEMORY[0x270F22848]();
}

uint64_t RIOPxrUsdAttributeClearColorSpace()
{
  return MEMORY[0x270F22858]();
}

uint64_t RIOPxrUsdAttributeClearConnections()
{
  return MEMORY[0x270F22860]();
}

uint64_t RIOPxrUsdAttributeCopyColorSpace()
{
  return MEMORY[0x270F22868]();
}

uint64_t RIOPxrUsdAttributeCopyTimeSamples()
{
  return MEMORY[0x270F22870]();
}

uint64_t RIOPxrUsdAttributeCopyTypeName()
{
  return MEMORY[0x270F22878]();
}

uint64_t RIOPxrUsdAttributeCopyValue()
{
  return MEMORY[0x270F22880]();
}

uint64_t RIOPxrUsdAttributeGetVariability()
{
  return MEMORY[0x270F22888]();
}

uint64_t RIOPxrUsdAttributeHasAuthoredConnections()
{
  return MEMORY[0x270F22890]();
}

uint64_t RIOPxrUsdAttributeHasAuthoredValue()
{
  return MEMORY[0x270F22898]();
}

uint64_t RIOPxrUsdAttributeHasColorSpace()
{
  return MEMORY[0x270F228A0]();
}

uint64_t RIOPxrUsdAttributeHasValue()
{
  return MEMORY[0x270F228A8]();
}

uint64_t RIOPxrUsdAttributeRemoveConnection()
{
  return MEMORY[0x270F228B0]();
}

uint64_t RIOPxrUsdAttributeSetColorSpace()
{
  return MEMORY[0x270F228B8]();
}

uint64_t RIOPxrUsdAttributeSetConnections()
{
  return MEMORY[0x270F228C0]();
}

uint64_t RIOPxrUsdAttributeSetValue()
{
  return MEMORY[0x270F228C8]();
}

uint64_t RIOPxrUsdEditTargetCopyLayer()
{
  return MEMORY[0x270F228D0]();
}

uint64_t RIOPxrUsdEditTargetCopyPrimSpec()
{
  return MEMORY[0x270F228D8]();
}

uint64_t RIOPxrUsdEditTargetCreateEmpty()
{
  return MEMORY[0x270F228E0]();
}

uint64_t RIOPxrUsdEditTargetCreateWithLayer()
{
  return MEMORY[0x270F228E8]();
}

uint64_t RIOPxrUsdEditTargetIsNull()
{
  return MEMORY[0x270F228F0]();
}

uint64_t RIOPxrUsdEditTargetIsValid()
{
  return MEMORY[0x270F228F8]();
}

uint64_t RIOPxrUsdGeomXformableXformQueryCopyTimeSamples()
{
  return MEMORY[0x270F22900]();
}

uint64_t RIOPxrUsdGeomXformableXformQueryGetLocalTransformation()
{
  return MEMORY[0x270F22908]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedAddNoticeCallback()
{
  return MEMORY[0x270F22910]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyChangedFields()
{
  return MEMORY[0x270F22918]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyChangedInfoOnlyPaths()
{
  return MEMORY[0x270F22920]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyResyncedPaths()
{
  return MEMORY[0x270F22928]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyStageRef()
{
  return MEMORY[0x270F22930]();
}

uint64_t RIOPxrUsdObjectAccessibilityInfoDictionarySetValue()
{
  return MEMORY[0x270F22938]();
}

uint64_t RIOPxrUsdObjectClearColorSpace()
{
  return MEMORY[0x270F22940]();
}

uint64_t RIOPxrUsdObjectClearMetadata()
{
  return MEMORY[0x270F22948]();
}

uint64_t RIOPxrUsdObjectCopyColorSpace()
{
  return MEMORY[0x270F22950]();
}

uint64_t RIOPxrUsdObjectCopyMetadata()
{
  return MEMORY[0x270F22958]();
}

uint64_t RIOPxrUsdObjectCopyName()
{
  return MEMORY[0x270F22960]();
}

uint64_t RIOPxrUsdObjectCopyPath()
{
  return MEMORY[0x270F22968]();
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryClearValue()
{
  return MEMORY[0x270F22970]();
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryCopyValue()
{
  return MEMORY[0x270F22978]();
}

uint64_t RIOPxrUsdObjectCustomDataDictionarySetValue()
{
  return MEMORY[0x270F22980]();
}

uint64_t RIOPxrUsdObjectHasMetadataValue()
{
  return MEMORY[0x270F22988]();
}

uint64_t RIOPxrUsdObjectIsValid()
{
  return MEMORY[0x270F22990]();
}

uint64_t RIOPxrUsdObjectMetadataCopyValue()
{
  return MEMORY[0x270F22998]();
}

uint64_t RIOPxrUsdObjectMetadataSetValue()
{
  return MEMORY[0x270F229A0]();
}

uint64_t RIOPxrUsdObjectSetColorSpace()
{
  return MEMORY[0x270F229A8]();
}

uint64_t RIOPxrUsdObjectUiInfoDictionarySetValue()
{
  return MEMORY[0x270F229B0]();
}

uint64_t RIOPxrUsdPrimAddAppliedSchema()
{
  return MEMORY[0x270F229B8]();
}

uint64_t RIOPxrUsdPrimAddReference()
{
  return MEMORY[0x270F229C0]();
}

uint64_t RIOPxrUsdPrimClearActive()
{
  return MEMORY[0x270F229C8]();
}

uint64_t RIOPxrUsdPrimClearInstanceable()
{
  return MEMORY[0x270F229D8]();
}

uint64_t RIOPxrUsdPrimClearSpecializes()
{
  return MEMORY[0x270F229E8]();
}

uint64_t RIOPxrUsdPrimCopyAttribute()
{
  return MEMORY[0x270F229F0]();
}

uint64_t RIOPxrUsdPrimCopyFilteredDescendants()
{
  return MEMORY[0x270F22A00]();
}

uint64_t RIOPxrUsdPrimCopyParent()
{
  return MEMORY[0x270F22A08]();
}

uint64_t RIOPxrUsdPrimCopyPrototype()
{
  return MEMORY[0x270F22A10]();
}

uint64_t RIOPxrUsdPrimCopyRelationship()
{
  return MEMORY[0x270F22A18]();
}

uint64_t RIOPxrUsdPrimCopyStage()
{
  return MEMORY[0x270F22A20]();
}

uint64_t RIOPxrUsdPrimCopyTypeName()
{
  return MEMORY[0x270F22A28]();
}

uint64_t RIOPxrUsdPrimCopyVariantSets()
{
  return MEMORY[0x270F22A38]();
}

uint64_t RIOPxrUsdPrimCreateAttribute()
{
  return MEMORY[0x270F22A40]();
}

uint64_t RIOPxrUsdPrimCreateCreateRelationship()
{
  return MEMORY[0x270F22A48]();
}

uint64_t RIOPxrUsdPrimCreateEmpty()
{
  return MEMORY[0x270F22A50]();
}

uint64_t RIOPxrUsdPrimEvaluateEntityOnExport()
{
  return MEMORY[0x270F22A58]();
}

uint64_t RIOPxrUsdPrimFlagsConjunctionPredicateCreate()
{
  return MEMORY[0x270F22A60]();
}

uint64_t RIOPxrUsdPrimFlagsConjunctionPredicateToRIOPxrUsdPrimFlagsPredicate()
{
  return MEMORY[0x270F22A68]();
}

uint64_t RIOPxrUsdPrimFlagsCreateAllPrimsPredicate()
{
  return MEMORY[0x270F22A70]();
}

uint64_t RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm()
{
  return MEMORY[0x270F22A78]();
}

uint64_t RIOPxrUsdPrimFlagsCreateConjunctionPredicateNegation()
{
  return MEMORY[0x270F22A80]();
}

uint64_t RIOPxrUsdPrimFlagsCreateDefaultPredicate()
{
  return MEMORY[0x270F22A88]();
}

uint64_t RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm()
{
  return MEMORY[0x270F22A90]();
}

uint64_t RIOPxrUsdPrimFlagsCreateDisjunctionPredicateNegation()
{
  return MEMORY[0x270F22A98]();
}

uint64_t RIOPxrUsdPrimFlagsDisjunctionPredicateCreate()
{
  return MEMORY[0x270F22AA0]();
}

uint64_t RIOPxrUsdPrimFlagsDisjunctionPredicateToRIOPxrUsdPrimFlagsPredicate()
{
  return MEMORY[0x270F22AA8]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies()
{
  return MEMORY[0x270F22AB0]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreate()
{
  return MEMORY[0x270F22AB8]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreateContradiction()
{
  return MEMORY[0x270F22AC0]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreateTautology()
{
  return MEMORY[0x270F22AC8]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreateWithTerm()
{
  return MEMORY[0x270F22AD0]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal()
{
  return MEMORY[0x270F22AD8]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim()
{
  return MEMORY[0x270F22AE0]();
}

uint64_t RIOPxrUsdPrimGetPropertyOrder()
{
  return MEMORY[0x270F22AE8]();
}

uint64_t RIOPxrUsdPrimGetSpecifier()
{
  return MEMORY[0x270F22AF8]();
}

uint64_t RIOPxrUsdPrimGetTaggedAsEntity()
{
  return MEMORY[0x270F22B00]();
}

uint64_t RIOPxrUsdPrimHasAttribute()
{
  return MEMORY[0x270F22B08]();
}

uint64_t RIOPxrUsdPrimHasAuthoredActive()
{
  return MEMORY[0x270F22B10]();
}

uint64_t RIOPxrUsdPrimHasAuthoredInstanceable()
{
  return MEMORY[0x270F22B18]();
}

uint64_t RIOPxrUsdPrimHasAuthoredType()
{
  return MEMORY[0x270F22B20]();
}

uint64_t RIOPxrUsdPrimHasAuthoredTypeOnLayer()
{
  return MEMORY[0x270F22B28]();
}

uint64_t RIOPxrUsdPrimHasProperty()
{
  return MEMORY[0x270F22B30]();
}

uint64_t RIOPxrUsdPrimHasRelationship()
{
  return MEMORY[0x270F22B38]();
}

uint64_t RIOPxrUsdPrimHasVariantSets()
{
  return MEMORY[0x270F22B40]();
}

uint64_t RIOPxrUsdPrimIsAType()
{
  return MEMORY[0x270F22B48]();
}

uint64_t RIOPxrUsdPrimIsActive()
{
  return MEMORY[0x270F22B50]();
}

uint64_t RIOPxrUsdPrimIsEntityConvertible()
{
  return MEMORY[0x270F22B58]();
}

uint64_t RIOPxrUsdPrimIsInstance()
{
  return MEMORY[0x270F22B60]();
}

uint64_t RIOPxrUsdPrimIsInstanceProxy()
{
  return MEMORY[0x270F22B68]();
}

uint64_t RIOPxrUsdPrimIsInstanceable()
{
  return MEMORY[0x270F22B70]();
}

uint64_t RIOPxrUsdPrimIsPrototype()
{
  return MEMORY[0x270F22B78]();
}

uint64_t RIOPxrUsdPrimIsPseudoRoot()
{
  return MEMORY[0x270F22B80]();
}

uint64_t RIOPxrUsdPrimRemoveAppliedSchema()
{
  return MEMORY[0x270F22B88]();
}

uint64_t RIOPxrUsdPrimRemoveProperty()
{
  return MEMORY[0x270F22B90]();
}

uint64_t RIOPxrUsdPrimSetInstanceable()
{
  return MEMORY[0x270F22BA0]();
}

uint64_t RIOPxrUsdPrimSetReferences()
{
  return MEMORY[0x270F22BA8]();
}

uint64_t RIOPxrUsdPrimSetSpecializes()
{
  return MEMORY[0x270F22BB0]();
}

uint64_t RIOPxrUsdPrimSetTypeName()
{
  return MEMORY[0x270F22BC8]();
}

uint64_t RIOPxrUsdPropertyCopyBaseName()
{
  return MEMORY[0x270F22BD0]();
}

uint64_t RIOPxrUsdPropertyCopyNamespace()
{
  return MEMORY[0x270F22BD8]();
}

uint64_t RIOPxrUsdPropertyCopyPropertyStack()
{
  return MEMORY[0x270F22BE0]();
}

uint64_t RIOPxrUsdPropertyCopySplitName()
{
  return MEMORY[0x270F22BE8]();
}

uint64_t RIOPxrUsdPropertyIsAuthored()
{
  return MEMORY[0x270F22BF0]();
}

uint64_t RIOPxrUsdPropertyIsAuthoredAt()
{
  return MEMORY[0x270F22BF8]();
}

uint64_t RIOPxrUsdRelationshipClearTargets()
{
  return MEMORY[0x270F22C00]();
}

uint64_t RIOPxrUsdRelationshipSetTargets()
{
  return MEMORY[0x270F22C08]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBind()
{
  return MEMORY[0x270F22C10]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBindCollection()
{
  return MEMORY[0x270F22C18]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingCollectionPath()
{
  return MEMORY[0x270F22C20]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingMaterialPath()
{
  return MEMORY[0x270F22C28]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingPrimCollectionName()
{
  return MEMORY[0x270F22C30]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength()
{
  return MEMORY[0x270F22C38]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindings()
{
  return MEMORY[0x270F22C40]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding()
{
  return MEMORY[0x270F22C48]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef()
{
  return MEMORY[0x270F22C50]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength()
{
  return MEMORY[0x270F22C58]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding()
{
  return MEMORY[0x270F22C60]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbind()
{
  return MEMORY[0x270F22C68]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbindCollection()
{
  return MEMORY[0x270F22C70]();
}

uint64_t RIOPxrUsdStageClearDefaultPrim()
{
  return MEMORY[0x270F22C78]();
}

uint64_t RIOPxrUsdStageCopyColorConfiguration()
{
  return MEMORY[0x270F22C90]();
}

uint64_t RIOPxrUsdStageCopyColorManagementSystem()
{
  return MEMORY[0x270F22C98]();
}

uint64_t RIOPxrUsdStageCopyDefaultPrim()
{
  return MEMORY[0x270F22CA0]();
}

uint64_t RIOPxrUsdStageCopyEditTarget()
{
  return MEMORY[0x270F22CA8]();
}

uint64_t RIOPxrUsdStageCopyFlattenedUSDA()
{
  return MEMORY[0x270F22CB0]();
}

uint64_t RIOPxrUsdStageCopyPseudoRootPrim()
{
  return MEMORY[0x270F22CB8]();
}

uint64_t RIOPxrUsdStageCopyRootLayer()
{
  return MEMORY[0x270F22CC0]();
}

uint64_t RIOPxrUsdStageCopyUSDA()
{
  return MEMORY[0x270F22CD0]();
}

uint64_t RIOPxrUsdStageCopyUpAxis()
{
  return MEMORY[0x270F22CD8]();
}

uint64_t RIOPxrUsdStageCopyUsedLayers()
{
  return MEMORY[0x270F22CE0]();
}

uint64_t RIOPxrUsdStageCreateInMemory()
{
  return MEMORY[0x270F22CE8]();
}

uint64_t RIOPxrUsdStageCreatePrimIfNeeded()
{
  return MEMORY[0x270F22CF0]();
}

uint64_t RIOPxrUsdStageCreateWithFilePathWithErrorReporting()
{
  return MEMORY[0x270F22CF8]();
}

uint64_t RIOPxrUsdStageCreateWithFileURL()
{
  return MEMORY[0x270F22D00]();
}

uint64_t RIOPxrUsdStageCreateWithFileURLWithErrorReporting()
{
  return MEMORY[0x270F22D08]();
}

uint64_t RIOPxrUsdStageCreateWithInMemoryBuffer()
{
  return MEMORY[0x270F22D10]();
}

uint64_t RIOPxrUsdStageCreateWithInMemoryDataBufferWithErrorReporting()
{
  return MEMORY[0x270F22D18]();
}

uint64_t RIOPxrUsdStageEqual()
{
  return MEMORY[0x270F22D20]();
}

uint64_t RIOPxrUsdStageExportWithFileURL()
{
  return MEMORY[0x270F22D28]();
}

uint64_t RIOPxrUsdStageGatherDiagnostics()
{
  return MEMORY[0x270F22D30]();
}

uint64_t RIOPxrUsdStageGetEndTimeCode()
{
  return MEMORY[0x270F22D38]();
}

uint64_t RIOPxrUsdStageGetEntityTaggingEditMode()
{
  return MEMORY[0x270F22D40]();
}

uint64_t RIOPxrUsdStageGetFramesPerSecond()
{
  return MEMORY[0x270F22D48]();
}

uint64_t RIOPxrUsdStageGetIncludeUnusedMaterials()
{
  return MEMORY[0x270F22D50]();
}

uint64_t RIOPxrUsdStageGetMetersPerUnit()
{
  return MEMORY[0x270F22D58]();
}

uint64_t RIOPxrUsdStageGetStartTimeCode()
{
  return MEMORY[0x270F22D60]();
}

uint64_t RIOPxrUsdStageGetTimeCodesPerSecond()
{
  return MEMORY[0x270F22D68]();
}

uint64_t RIOPxrUsdStageGetUsdError()
{
  return MEMORY[0x270F22D70]();
}

uint64_t RIOPxrUsdStageGetUsdErrors()
{
  return MEMORY[0x270F22D78]();
}

uint64_t RIOPxrUsdStageHasAuthoredTimeCodeRange()
{
  return MEMORY[0x270F22D80]();
}

uint64_t RIOPxrUsdStageHasPrimAtPrimPath()
{
  return MEMORY[0x270F22D88]();
}

uint64_t RIOPxrUsdStageIsSupportedFile()
{
  return MEMORY[0x270F22D90]();
}

uint64_t RIOPxrUsdStageLoadThenUnload()
{
  return MEMORY[0x270F22D98]();
}

uint64_t RIOPxrUsdStageRemovePrim()
{
  return MEMORY[0x270F22DA8]();
}

uint64_t RIOPxrUsdStageSetColorConfiguration()
{
  return MEMORY[0x270F22DB8]();
}

uint64_t RIOPxrUsdStageSetColorManagementSystem()
{
  return MEMORY[0x270F22DC0]();
}

uint64_t RIOPxrUsdStageSetDefaultPrim()
{
  return MEMORY[0x270F22DC8]();
}

uint64_t RIOPxrUsdStageSetDiagnosticChangeNotification()
{
  return MEMORY[0x270F22DD0]();
}

uint64_t RIOPxrUsdStageSetEditTarget()
{
  return MEMORY[0x270F22DD8]();
}

uint64_t RIOPxrUsdStageSetIncludeUnusedMaterials()
{
  return MEMORY[0x270F22DF8]();
}

uint64_t RIOPxrUsdStageSetUpAxis()
{
  return MEMORY[0x270F22E18]();
}

uint64_t RIOPxrUsdUtilsCopyAllDependencies()
{
  return MEMORY[0x270F22E20]();
}

uint64_t RIOPxrUsdUtilsCreateTopLevelEntityFromStage()
{
  return MEMORY[0x270F22E28]();
}

uint64_t RIOPxrUsdUtilsModifyAssetPaths()
{
  return MEMORY[0x270F22E30]();
}

uint64_t RIOPxrUsdUtilsSdfCopySpec()
{
  return MEMORY[0x270F22E38]();
}

uint64_t RIOPxrUsdUtilsStageGetRealityKitOptionBool()
{
  return MEMORY[0x270F22E40]();
}

uint64_t RIOPxrUsdVariantSetAddVariant()
{
  return MEMORY[0x270F22E48]();
}

uint64_t RIOPxrUsdVariantSetClearVariantSelection()
{
  return MEMORY[0x270F22E50]();
}

uint64_t RIOPxrUsdVariantSetCopyEditTarget()
{
  return MEMORY[0x270F22E58]();
}

uint64_t RIOPxrUsdVariantSetCopyPrim()
{
  return MEMORY[0x270F22E60]();
}

uint64_t RIOPxrUsdVariantSetCopyVariantNames()
{
  return MEMORY[0x270F22E68]();
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelection()
{
  return MEMORY[0x270F22E78]();
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelectionOnLayer()
{
  return MEMORY[0x270F22E80]();
}

uint64_t RIOPxrUsdVariantSetIsValid()
{
  return MEMORY[0x270F22E88]();
}

uint64_t RIOPxrUsdVariantSetSetVariantSelection()
{
  return MEMORY[0x270F22E90]();
}

uint64_t RIOPxrUsdVariantSetsCopyAllVariantSelections()
{
  return MEMORY[0x270F22E98]();
}

uint64_t RIOPxrUsdVariantSetsCopySetNames()
{
  return MEMORY[0x270F22EA0]();
}

uint64_t RIOPxrUsdVariantSetsCopyVariantSelection()
{
  return MEMORY[0x270F22EA8]();
}

uint64_t RIOPxrUsdVariantSetsCopyVariantSet()
{
  return MEMORY[0x270F22EB0]();
}

uint64_t RIOPxrUsdVariantSetsSetSelection()
{
  return MEMORY[0x270F22EC0]();
}

uint64_t RIOPxrUtilsCopyCFDataWithArAssetPath()
{
  return MEMORY[0x270F22EC8]();
}

uint64_t RIOPxrVtValueCopyAssetPath()
{
  return MEMORY[0x270F22ED8]();
}

uint64_t RIOPxrVtValueCopyBoolArray()
{
  return MEMORY[0x270F22EE0]();
}

uint64_t RIOPxrVtValueCopyDictionary()
{
  return MEMORY[0x270F22EE8]();
}

uint64_t RIOPxrVtValueCopyDouble2Array()
{
  return MEMORY[0x270F22EF0]();
}

uint64_t RIOPxrVtValueCopyDouble3Array()
{
  return MEMORY[0x270F22EF8]();
}

uint64_t RIOPxrVtValueCopyDouble4Array()
{
  return MEMORY[0x270F22F00]();
}

uint64_t RIOPxrVtValueCopyFloat2Array()
{
  return MEMORY[0x270F22F08]();
}

uint64_t RIOPxrVtValueCopyFloat3Array()
{
  return MEMORY[0x270F22F10]();
}

uint64_t RIOPxrVtValueCopyFloat4Array()
{
  return MEMORY[0x270F22F18]();
}

uint64_t RIOPxrVtValueCopyHalf2Array()
{
  return MEMORY[0x270F22F20]();
}

uint64_t RIOPxrVtValueCopyHalf3Array()
{
  return MEMORY[0x270F22F28]();
}

uint64_t RIOPxrVtValueCopyHalf4Array()
{
  return MEMORY[0x270F22F30]();
}

uint64_t RIOPxrVtValueCopyInt2Array()
{
  return MEMORY[0x270F22F38]();
}

uint64_t RIOPxrVtValueCopyInt32Array()
{
  return MEMORY[0x270F22F40]();
}

uint64_t RIOPxrVtValueCopyInt3Array()
{
  return MEMORY[0x270F22F48]();
}

uint64_t RIOPxrVtValueCopyInt4Array()
{
  return MEMORY[0x270F22F50]();
}

uint64_t RIOPxrVtValueCopyMatrix2dArray()
{
  return MEMORY[0x270F22F58]();
}

uint64_t RIOPxrVtValueCopyMatrix3dArray()
{
  return MEMORY[0x270F22F60]();
}

uint64_t RIOPxrVtValueCopyMatrix4dArray()
{
  return MEMORY[0x270F22F68]();
}

uint64_t RIOPxrVtValueCopyPath()
{
  return MEMORY[0x270F22F70]();
}

uint64_t RIOPxrVtValueCopyString()
{
  return MEMORY[0x270F22F78]();
}

uint64_t RIOPxrVtValueCopyStringArray()
{
  return MEMORY[0x270F22F80]();
}

uint64_t RIOPxrVtValueCopyToken()
{
  return MEMORY[0x270F22F88]();
}

uint64_t RIOPxrVtValueCreateEmptyValue()
{
  return MEMORY[0x270F22F90]();
}

uint64_t RIOPxrVtValueCreateWithAssetPath()
{
  return MEMORY[0x270F22F98]();
}

uint64_t RIOPxrVtValueCreateWithBool()
{
  return MEMORY[0x270F22FA0]();
}

uint64_t RIOPxrVtValueCreateWithBoolArray()
{
  return MEMORY[0x270F22FA8]();
}

uint64_t RIOPxrVtValueCreateWithCString()
{
  return MEMORY[0x270F22FB0]();
}

uint64_t RIOPxrVtValueCreateWithDictionary()
{
  return MEMORY[0x270F22FB8]();
}

uint64_t RIOPxrVtValueCreateWithDouble()
{
  return MEMORY[0x270F22FC0]();
}

uint64_t RIOPxrVtValueCreateWithDouble2()
{
  return MEMORY[0x270F22FC8]();
}

uint64_t RIOPxrVtValueCreateWithDouble2Array()
{
  return MEMORY[0x270F22FD0]();
}

uint64_t RIOPxrVtValueCreateWithDouble3()
{
  return MEMORY[0x270F22FD8]();
}

uint64_t RIOPxrVtValueCreateWithDouble3Array()
{
  return MEMORY[0x270F22FE0]();
}

uint64_t RIOPxrVtValueCreateWithDouble4()
{
  return MEMORY[0x270F22FE8]();
}

uint64_t RIOPxrVtValueCreateWithDouble4Array()
{
  return MEMORY[0x270F22FF0]();
}

uint64_t RIOPxrVtValueCreateWithDoubleArray()
{
  return MEMORY[0x270F22FF8]();
}

uint64_t RIOPxrVtValueCreateWithFloat()
{
  return MEMORY[0x270F23000]();
}

uint64_t RIOPxrVtValueCreateWithFloat2()
{
  return MEMORY[0x270F23008]();
}

uint64_t RIOPxrVtValueCreateWithFloat2Array()
{
  return MEMORY[0x270F23010]();
}

uint64_t RIOPxrVtValueCreateWithFloat3()
{
  return MEMORY[0x270F23018]();
}

uint64_t RIOPxrVtValueCreateWithFloat3Array()
{
  return MEMORY[0x270F23020]();
}

uint64_t RIOPxrVtValueCreateWithFloat4()
{
  return MEMORY[0x270F23028]();
}

uint64_t RIOPxrVtValueCreateWithFloat4Array()
{
  return MEMORY[0x270F23030]();
}

uint64_t RIOPxrVtValueCreateWithFloatArray()
{
  return MEMORY[0x270F23038]();
}

uint64_t RIOPxrVtValueCreateWithHalf()
{
  return MEMORY[0x270F23040]();
}

uint64_t RIOPxrVtValueCreateWithHalf2()
{
  return MEMORY[0x270F23048]();
}

uint64_t RIOPxrVtValueCreateWithHalf2Array()
{
  return MEMORY[0x270F23050]();
}

uint64_t RIOPxrVtValueCreateWithHalf3()
{
  return MEMORY[0x270F23058]();
}

uint64_t RIOPxrVtValueCreateWithHalf3Array()
{
  return MEMORY[0x270F23060]();
}

uint64_t RIOPxrVtValueCreateWithHalf4()
{
  return MEMORY[0x270F23068]();
}

uint64_t RIOPxrVtValueCreateWithHalf4Array()
{
  return MEMORY[0x270F23070]();
}

uint64_t RIOPxrVtValueCreateWithHalfArray()
{
  return MEMORY[0x270F23078]();
}

uint64_t RIOPxrVtValueCreateWithInt2()
{
  return MEMORY[0x270F23080]();
}

uint64_t RIOPxrVtValueCreateWithInt2Array()
{
  return MEMORY[0x270F23088]();
}

uint64_t RIOPxrVtValueCreateWithInt3()
{
  return MEMORY[0x270F23090]();
}

uint64_t RIOPxrVtValueCreateWithInt32()
{
  return MEMORY[0x270F23098]();
}

uint64_t RIOPxrVtValueCreateWithInt32Array()
{
  return MEMORY[0x270F230A0]();
}

uint64_t RIOPxrVtValueCreateWithInt3Array()
{
  return MEMORY[0x270F230A8]();
}

uint64_t RIOPxrVtValueCreateWithInt4()
{
  return MEMORY[0x270F230B0]();
}

uint64_t RIOPxrVtValueCreateWithInt4Array()
{
  return MEMORY[0x270F230B8]();
}

uint64_t RIOPxrVtValueCreateWithMatrix2d()
{
  return MEMORY[0x270F230C8]();
}

uint64_t RIOPxrVtValueCreateWithMatrix2dArray()
{
  return MEMORY[0x270F230D0]();
}

uint64_t RIOPxrVtValueCreateWithMatrix2f()
{
  return MEMORY[0x270F230D8]();
}

uint64_t RIOPxrVtValueCreateWithMatrix3d()
{
  return MEMORY[0x270F230E0]();
}

uint64_t RIOPxrVtValueCreateWithMatrix3dArray()
{
  return MEMORY[0x270F230E8]();
}

uint64_t RIOPxrVtValueCreateWithMatrix3f()
{
  return MEMORY[0x270F230F0]();
}

uint64_t RIOPxrVtValueCreateWithMatrix4d()
{
  return MEMORY[0x270F230F8]();
}

uint64_t RIOPxrVtValueCreateWithMatrix4dArray()
{
  return MEMORY[0x270F23100]();
}

uint64_t RIOPxrVtValueCreateWithMatrix4f()
{
  return MEMORY[0x270F23108]();
}

uint64_t RIOPxrVtValueCreateWithQuatd()
{
  return MEMORY[0x270F23110]();
}

uint64_t RIOPxrVtValueCreateWithQuatdArray()
{
  return MEMORY[0x270F23118]();
}

uint64_t RIOPxrVtValueCreateWithQuatf()
{
  return MEMORY[0x270F23120]();
}

uint64_t RIOPxrVtValueCreateWithQuatfArray()
{
  return MEMORY[0x270F23128]();
}

uint64_t RIOPxrVtValueCreateWithStringArray()
{
  return MEMORY[0x270F23130]();
}

uint64_t RIOPxrVtValueCreateWithToken()
{
  return MEMORY[0x270F23138]();
}

uint64_t RIOPxrVtValueCreateWithTokenArray()
{
  return MEMORY[0x270F23140]();
}

uint64_t RIOPxrVtValueCreateWithUInt32()
{
  return MEMORY[0x270F23148]();
}

uint64_t RIOPxrVtValueCreateWithUInt32Array()
{
  return MEMORY[0x270F23150]();
}

uint64_t RIOPxrVtValueCreateWithUInt8()
{
  return MEMORY[0x270F23160]();
}

uint64_t RIOPxrVtValueCreateWithUInt8Array()
{
  return MEMORY[0x270F23168]();
}

uint64_t RIOPxrVtValueGetBool()
{
  return MEMORY[0x270F23170]();
}

uint64_t RIOPxrVtValueGetDouble()
{
  return MEMORY[0x270F23178]();
}

uint64_t RIOPxrVtValueGetDouble2()
{
  return MEMORY[0x270F23180]();
}

uint64_t RIOPxrVtValueGetDouble3()
{
  return MEMORY[0x270F23188]();
}

uint64_t RIOPxrVtValueGetDouble4()
{
  return MEMORY[0x270F23190]();
}

uint64_t RIOPxrVtValueGetFloat()
{
  return MEMORY[0x270F23198]();
}

uint64_t RIOPxrVtValueGetFloat2()
{
  return MEMORY[0x270F231A0]();
}

uint64_t RIOPxrVtValueGetFloat3()
{
  return MEMORY[0x270F231A8]();
}

uint64_t RIOPxrVtValueGetFloat4()
{
  return MEMORY[0x270F231B0]();
}

uint64_t RIOPxrVtValueGetHalf2()
{
  return MEMORY[0x270F231B8]();
}

uint64_t RIOPxrVtValueGetHalf3()
{
  return MEMORY[0x270F231C0]();
}

uint64_t RIOPxrVtValueGetHalf4()
{
  return MEMORY[0x270F231C8]();
}

uint64_t RIOPxrVtValueGetInt2()
{
  return MEMORY[0x270F231D0]();
}

uint64_t RIOPxrVtValueGetInt3()
{
  return MEMORY[0x270F231D8]();
}

uint64_t RIOPxrVtValueGetInt32()
{
  return MEMORY[0x270F231E0]();
}

uint64_t RIOPxrVtValueGetInt4()
{
  return MEMORY[0x270F231E8]();
}

uint64_t RIOPxrVtValueGetInt64()
{
  return MEMORY[0x270F231F0]();
}

uint64_t RIOPxrVtValueGetMatrix2d()
{
  return MEMORY[0x270F231F8]();
}

uint64_t RIOPxrVtValueGetMatrix3d()
{
  return MEMORY[0x270F23200]();
}

uint64_t RIOPxrVtValueGetMatrix4d()
{
  return MEMORY[0x270F23208]();
}

uint64_t RIOPxrVtValueGetQuatd()
{
  return MEMORY[0x270F23210]();
}

uint64_t RIOPxrVtValueGetQuatf()
{
  return MEMORY[0x270F23218]();
}

uint64_t RIOPxrVtValueGetUInt32()
{
  return MEMORY[0x270F23220]();
}

uint64_t RIOPxrVtValueGetUInt8()
{
  return MEMORY[0x270F23228]();
}

uint64_t RIOPxrVtValueIsEmpty()
{
  return MEMORY[0x270F23230]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

float remainderf(float a1, float a2)
{
  MEMORY[0x270EDB1E0](a1, a2);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x270FA0218]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x270FA0270]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x270FA0500]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x270FA0540]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x270FA0610]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x270FA0618]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x270FA0620]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}