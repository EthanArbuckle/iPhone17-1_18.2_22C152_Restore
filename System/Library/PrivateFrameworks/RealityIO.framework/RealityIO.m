ValueMetadata *type metadata accessor for SceneDescriptionFoundations()
{
  return &type metadata for SceneDescriptionFoundations;
}

void type metadata accessor for RIOCancellableRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderOutputsRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfAttributeSpecRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderPropertyDeltaRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderPrimDeltaRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderStageDeltaRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderInputsRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdEditTargetRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdPrimFlagsDisjunctionPredicateRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdPrimFlagsConjunctionPredicateRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdPrimFlagsPredicateRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdVariantSetsRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdVariantSetRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdrShaderPropertyRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdrShaderNodeRef(uint64_t a1)
{
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdStageRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderDirtyPrimDescriptorRef(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float2x2(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_float2x2(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for simd_float2x2(uint64_t a1)
{
}

void type metadata accessor for RIOPxrArAssetRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderOutputDescriptorRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderInputDescriptorRef(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderBuildOrder(uint64_t a1)
{
}

void type metadata accessor for RIOBuilderDirtyStageDescriptorRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfReferenceRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfPrimSpecRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdShadeMaterialBindingAPICollectionBindingRef(uint64_t a1)
{
}

void type metadata accessor for RETypeID(uint64_t a1)
{
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for REComponentClassPtr(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REComponentClassPtr(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for REComponentClassPtr(uint64_t a1)
{
}

void type metadata accessor for RIOImportSessionRef(uint64_t a1)
{
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfNamespaceEditRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfAssetPathRef(uint64_t a1)
{
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_float4x4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float3x3(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_float3x3(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfLayerRef(uint64_t a1)
{
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrVtValueRef(uint64_t a1)
{
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for simd_quatd(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_quatd(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_quatd(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for simd_quatd(uint64_t a1)
{
}

void type metadata accessor for simd_double2x2(uint64_t a1)
{
}

__n128 __swift_memcpy96_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double3x3(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_double3x3(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for simd_double3x3(uint64_t a1)
{
}

__n128 __swift_memcpy128_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double4x4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_double4x4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for simd_double4x4(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfValueTypeNameRef(uint64_t a1)
{
}

void type metadata accessor for REComponentType(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfPathRef(uint64_t a1)
{
}

void type metadata accessor for REEngineClockMode(uint64_t a1)
{
}

void type metadata accessor for REEngineServiceMask(uint64_t a1)
{
}

void type metadata accessor for RIOPxrTfTokenRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdObjectRef(uint64_t a1)
{
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrTfTokenRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrTfTokenRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

{
  Hasher.init(_seed:)();
  swift_getWitnessTable();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance REStartupOptions@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance REStartupOptions(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance REStartupOptions(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance REStartupOptions@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfValueTypeNameRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfValueTypeNameRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfValueTypeNameRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfValueTypeNameRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfPathRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfPathRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfPathRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfLayerRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfLayerRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfLayerRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance REComponentClassPtr()
{
  return MEMORY[0x270F9EAF8](*v0);
}

void protocol witness for Hashable.hash(into:) in conformance REComponentClassPtr()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REComponentClassPtr()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REComponentClassPtr(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOImportSessionRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOImportSessionRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOImportSessionRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfAssetPathRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfAssetPathRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfAssetPathRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfReferenceRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfReferenceRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfReferenceRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrTfTokenRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REEngineServiceMask(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance REEngineServiceMask(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance REEngineServiceMask(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance REEngineServiceMask@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance REEngineServiceMask(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance REEngineServiceMask(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance REEngineServiceMask(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance REEngineServiceMask(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance REEngineServiceMask()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance REEngineServiceMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance REEngineServiceMask(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfPathRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfLayerRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance REComponentClassPtr@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REComponentClassPtr(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOImportSessionRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrUsdObjectRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrUsdObjectRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrUsdObjectRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfAssetPathRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfReferenceRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REEngineServiceMask(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance REEngineServiceMask@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance REComponentClassPtr()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrUsdObjectRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in RIOPxrUsdObjectRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, type metadata accessor for RIOPxrUsdObjectRef);
}

uint64_t base witness table accessor for Equatable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t base witness table accessor for RawRepresentable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t base witness table accessor for SetAlgebra in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfValueTypeNameRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef, type metadata accessor for RIOPxrSdfValueTypeNameRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfLayerRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, type metadata accessor for RIOPxrSdfLayerRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfLayerRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, type metadata accessor for RIOPxrSdfLayerRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfAssetPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in RIOImportSessionRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
}

uint64_t base witness table accessor for RawRepresentable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, type metadata accessor for REComponentClassPtr);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, type metadata accessor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, type metadata accessor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfReferenceRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef, type metadata accessor for RIOPxrSdfReferenceRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfReferenceRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef, type metadata accessor for RIOPxrSdfReferenceRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfAssetPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, type metadata accessor for RIOPxrSdfAssetPathRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

uint64_t base witness table accessor for Hashable in RIOImportSessionRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, type metadata accessor for RIOImportSessionRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrUsdObjectRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, type metadata accessor for RIOPxrUsdObjectRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrTfTokenRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfValueTypeNameRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef, type metadata accessor for RIOPxrSdfValueTypeNameRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrTfTokenRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  int v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(uint64_t a1)
{
}

void type metadata accessor for CFSetRef(uint64_t a1)
{
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
}

void type metadata accessor for RIOCancellableRef(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t __RKEntityActionMultiplePerformBehavior.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v15 = 0;
LABEL_14:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 1);
    goto LABEL_15;
  }
  int v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_13:
    v15 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_14;
  }
  int v5 = (void *)v4;
  uint64_t v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_13;
  }
  long long v7 = (void *)v6;

  swift_release();
  v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  Swift::Int v13 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionMultiplePerformBehaviorUSD.init(rawValue:), v12);
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_release();
    v14 = (unsigned int *)MEMORY[0x263F16420];
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    swift_release();
    v14 = (unsigned int *)MEMORY[0x263F16410];
    goto LABEL_18;
  }
  if (v13 != 1)
  {
LABEL_15:
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  v14 = (unsigned int *)MEMORY[0x263F16418];
LABEL_18:
  uint64_t v17 = *v14;
  uint64_t v18 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a1, v17, v18);
}

unint64_t lazy protocol witness table accessor for type Object.Error and conformance Object.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Object.Error and conformance Object.Error;
  if (!lazy protocol witness table cache variable for type Object.Error and conformance Object.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Object.Error and conformance Object.Error);
  }
  return result;
}

void outlined consume of Result<ToolsFoundations.Token, Object.Error>(id a1, char a2)
{
  if (a2) {
    outlined consume of Object.Error(a1);
  }
  else {
}
  }

void outlined consume of Object.Error(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

unint64_t lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23A9A36C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return 0;
}

ValueMetadata *type metadata accessor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
}

uint64_t closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, void *a5)
{
  v38 = a3;
  id v39 = a5;
  id v36 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  v37 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[2] = v11;
  MEMORY[0x270FA5388](v12);
  v14 = (char *)v34 - v13;
  uint64_t v15 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x270FA5388](v15);
  v35 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v19(v14, a2, v8, v17);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v11, a2, v8);
  id v20 = v36;
  v21 = (void *)RIOPxrSdfPathCopyString();
  id v36 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v34[1] = v22;

  v23 = v37;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v37, a2, v8);
  uint64_t v24 = v15;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v23, 0, 1, v8);
  v25 = v38;
  id v26 = v39;
  v27 = (void *)RIOPxrSdfPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v28 = v35;
  __RKEntityPlayTimelineActionArguments.init(target:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v28, *MEMORY[0x263F16368], v24);
  unint64_t v29 = *v25;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v25 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, v29);
    unint64_t *v25 = v29;
  }
  unint64_t v32 = *(void *)(v29 + 16);
  unint64_t v31 = *(void *)(v29 + 24);
  if (v32 >= v31 >> 1)
  {
    unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v29);
    unint64_t *v25 = v29;
  }
  *(void *)(v29 + 16) = v32 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v29+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v32, v28, v24);
}

uint64_t specialized static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)()
{
  uint64_t v0 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  if (!*(void *)(v4 + 16)) {
    goto LABEL_10;
  }
  id v6 = *(id *)(v4 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  if (!*(void *)(v7 + 16))
  {

LABEL_10:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  id v8 = *(id *)(v7 + 32);
  uint64_t v9 = swift_bridgeObjectRelease();
  v15[0] = MEMORY[0x263F8EE78];
  MEMORY[0x270FA5388](v9);
  v15[-4] = v15;
  v15[-3] = v6;
  v15[-2] = v8;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:), (uint64_t)&v15[-6]);
  uint64_t v10 = v15[0];
  if (*(void *)(v15[0] + 16) < 2uLL)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = v10;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v11 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_23AAB22A0;
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16310], v0);
    swift_bridgeObjectRetain();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, void, uint64_t))(v12 + 104))(v14 + v13, *MEMORY[0x263F163A8], v11);
  }

  swift_bridgeObjectRelease();
  return v14;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void AudioFileGroupBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = Inputs.prim.getter();
  uint64_t v5 = *(void *)(a1 + 56);
  id v6 = (id)RIOBuilderInputsGetImportSession();
  if (!v6)
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v7 = v6;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_retain();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v10 = MEMORY[0x23ECBB260](ServiceLocator);
  if (!v10)
  {
    if (one-time initialization token for rioAudio == -1)
    {
LABEL_19:
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.rioAudio);
      os_log_type_t v22 = static os_log_type_t.error.getter();
      v23 = Logger.logObject.getter();
      os_log_type_t v24 = v22;
      if (os_log_type_enabled(v23, v22))
      {
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        _os_log_impl(&dword_23A99F000, v23, v24, "AudioFileGroupBuilder could not get an AssetManager.", v25, 2u);
        MEMORY[0x23ECBE8B0](v25, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
      }
      swift_release();
      return;
    }
LABEL_37:
    swift_once();
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v43 = a1;
  uint64_t v44 = v5;
  unint64_t v12 = Prim.children.getter();
  unint64_t v13 = v12;
  aBlock[0] = MEMORY[0x263F8EE78];
  if (v12 >> 62)
  {
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v42 = v11;
    if (v14) {
      goto LABEL_6;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    unint64_t v20 = MEMORY[0x263F8EE78];
    goto LABEL_27;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v42 = v11;
  if (!v14) {
    goto LABEL_26;
  }
LABEL_6:
  v40 = v2;
  uint64_t v41 = SwiftObject;
  type metadata accessor for RIOPxrTfTokenRef(0);
  if (v14 < 1)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v39 = v4;
  for (uint64_t i = 0; i != v14; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0) {
      MEMORY[0x23ECBA630](i, v13);
    }
    else {
      swift_retain();
    }
    uint64_t v16 = (void *)RIOPxrUsdPrimCopyTypeName();
    if (one-time initialization token for primType != -1) {
      swift_once();
    }
    double v17 = (void *)static AudioConstants.AudioFile.primType;
    lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
    id v18 = v17;
    char v19 = static _CFObject.== infix(_:_:)();

    if (v19)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v20 = aBlock[0];
  uint64_t v4 = v39;
  uint64_t v2 = v40;
LABEL_27:
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v20);
  uint64_t v27 = v26;
  swift_release();
  uint64_t v28 = swift_release();
  if (*(void *)(v27 + 16))
  {
    MEMORY[0x270FA5388](v28);
    v38[2] = v2;
    v38[3] = v43;
    v38[4] = v27;
    v38[5] = v42;
    v38[6] = v4;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = partial apply for closure #3 in AudioFileGroupBuilder.run(inputs:);
    *(void *)(v29 + 24) = v38;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor;
    v30 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v30);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    if ((v30 & 1) == 0) {
      return;
    }
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  id v31 = (id)RIOBuilderInputsGetImportSession();
  if (!v31) {
    goto LABEL_40;
  }
  unint64_t v32 = v31;
  uint64_t v33 = RIOImportSessionGetSwiftObject();

  if (!v33)
  {
LABEL_41:
    __break(1u);
    return;
  }
  uint64_t v34 = v2[4];
  swift_retain();
  if (v34)
  {
    swift_bridgeObjectRetain();
    RERelease();
    v35 = (void **)(v33 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    id v36 = *v35;
    String.utf8CString.getter();
    id v37 = v36;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_bridgeObjectRelease();

    swift_release();
  }
  v2[3] = 0;
  v2[4] = 0;
  v2[5] = 0;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
}

void closure #3 in AudioFileGroupBuilder.run(inputs:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (id)RIOBuilderInputsGetImportSession();
  if (!v5)
  {
    __break(1u);
    goto LABEL_18;
  }
  id v6 = v5;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = a1[4];
  swift_retain();
  if (v8)
  {
    swift_bridgeObjectRetain();
    RERelease();
    uint64_t v9 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    uint64_t v10 = *v9;
    String.utf8CString.getter();
    id v11 = v10;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_bridgeObjectRelease();

    swift_release();
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v12)
  {
    uint64_t v39 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v13 = v39;
    uint64_t v14 = a3 + 32;
    int64_t v15 = v12;
    do
    {
      int LayoutTag = REAudioFileAssetGetLayoutTag();
      unint64_t v18 = *(void *)(v39 + 16);
      unint64_t v17 = *(void *)(v39 + 24);
      if (v18 >= v17 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      }
      *(void *)(v39 + 16) = v18 + 1;
      *(_DWORD *)(v39 + 4 * v18 + 32) = LayoutTag;
      v14 += 8;
      --v15;
    }
    while (v15);
  }
  uint64_t v19 = specialized Set.init<A>(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v19 + 16);
  swift_bridgeObjectRelease();
  if (v20 == 1)
  {
    uint64_t v21 = (void *)RIOPxrUsdObjectCopyName();
    os_log_type_t v22 = (void *)RIOPxrTfTokenCopyString();
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    uint64_t v26 = (void *)MEMORY[0x23ECB9F30](v23, v25);
    swift_bridgeObjectRelease();
    uint64_t v27 = REAudioFileGroupAssetCreateWithFileAssets();

    uint64_t v28 = (void *)RIOPxrUsdObjectCopyPath();
    uint64_t v29 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    if (v27)
    {
      a1[3] = v30;
      a1[4] = v32;
      a1[5] = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v33 = (id)RIOBuilderInputsGetImportSession();
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = RIOImportSessionGetSwiftObject();

        if (v35)
        {
          id v36 = (void **)(v35 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
          swift_retain();
          swift_beginAccess();
          id v37 = *v36;
          String.utf8CString.getter();
          id v38 = v37;
          RIOImportSessionSetExtraAssetWithTag();
          swift_bridgeObjectRelease();
          swift_release();

          swift_release();
          return;
        }
        goto LABEL_20;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
  }
}

void AudioFileGroupBuilder.clear(inputs:)()
{
  id v1 = (id)RIOBuilderInputsGetImportSession();
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v4 = v0[4];
  swift_retain();
  if (v4)
  {
    swift_bridgeObjectRetain();
    RERelease();
    id v5 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    id v6 = *v5;
    String.utf8CString.getter();
    id v7 = v6;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_bridgeObjectRelease();

    swift_release();
  }
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = 0;
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t AudioFileGroupBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioFileGroupBuilder()
{
  return self;
}

void protocol witness for Builder.buildOrder.getter in conformance AudioFileGroupBuilder(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t protocol witness for Builder.inputDescriptors() in conformance AudioFileGroupBuilder()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)static AudioConstants.AudioFile.primType;
  *(void *)(inited + 32) = 0xD00000000000001FLL;
  *(void *)(inited + 40) = 0x800000023AAACC60;
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x800000023AAACC60;
  *(void *)(inited + 64) = v1;
  *(void *)(inited + 72) = 1;
  *(unsigned char *)(inited + 80) = 32;
  id v2 = v1;
  uint64_t v3 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v3;
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance AudioFileGroupBuilder()
{
  return MEMORY[0x263F8EE88];
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v25 = v8;
      type metadata accessor for StageDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      uint64_t result = 0;
      *a1 = *(void *)&v24[0];
      return result;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    *(void *)&v24[0] = v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v23 = *(void *)&v24[0];
    }
    else
    {
      uint64_t v23 = v22;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v23);
    *uint64_t v3 = v23;
  }
  else
  {
    Hasher.init(_seed:)();
    uint64_t v10 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v24, v10);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v24, v11);
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      uint64_t v15 = ~v13;
      do
      {
        uint64_t v16 = *(void *)(*(void *)(v6 + 48) + 8 * v14);
        uint64_t v17 = *(void *)(v16 + 24);
        uint64_t v18 = *(void *)(a2 + 24);
        swift_retain();
        if (specialized static Set.== infix(_:_:)(v17, v18))
        {
          char v19 = specialized static Set.== infix(_:_:)(*(void *)(v16 + 16), *(void *)(a2 + 16));
          swift_release();
          if (v19)
          {
            swift_release();
            swift_bridgeObjectRelease();
            *a1 = *(void *)(*(void *)(*v3 + 48) + 8 * v14);
            swift_retain();
            return 0;
          }
        }
        else
        {
          swift_release();
        }
        unint64_t v14 = (v14 + 1) & v15;
      }
      while (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v24[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    Swift::Int v21 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v21, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = *(void *)&v24[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(void *);
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  Swift::Int v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v20;
  void v21[10];

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v21[9] = v8;
      type metadata accessor for PrimDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      uint64_t result = 0;
      *a1 = v21[0];
      return result;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v21[0] = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v18 = v21[0];
    }
    else
    {
      uint64_t v18 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v18);
    *uint64_t v3 = v18;
  }
  else
  {
    Hasher.init(_seed:)();
    uint64_t v10 = *(void (**)(void *))(*(void *)a2 + 128);
    swift_bridgeObjectRetain();
    v10(v21);
    uint64_t v11 = Hasher._finalize()();
    Swift::Int v12 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      unint64_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v6 + 48) + 8 * v13) + 136);
      swift_retain();
      LOBYTE(v14) = v14(a2);
      swift_release();
      if (v14)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        uint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        uint64_t v16 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v6 + 48) + 8 * v13) + 136);
        swift_retain();
        LOBYTE(v16) = v16(a2);
        swift_release();
        if (v16) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v2;
    *id v2 = 0x8000000000000000;
    uint64_t v20 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v20, v13, isUniquelyReferenced_nonNull_native);
    *id v2 = v21[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(void *);
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  Swift::Int v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v20;
  void v21[10];

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v21[9] = v8;
      type metadata accessor for PropertyDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21[0];
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v21[0] = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v18 = v21[0];
    }
    else
    {
      uint64_t v18 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v18);
    *uint64_t v3 = v18;
  }
  else
  {
    Hasher.init(_seed:)();
    uint64_t v10 = *(void (**)(void *))(*(void *)a2 + 120);
    swift_bridgeObjectRetain();
    v10(v21);
    uint64_t v11 = Hasher._finalize()();
    Swift::Int v12 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      unint64_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v6 + 48) + 8 * v13) + 128);
      swift_retain();
      LOBYTE(v14) = v14(a2);
      swift_release();
      if (v14)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        uint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        uint64_t v16 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v6 + 48) + 8 * v13) + 128);
        swift_retain();
        LOBYTE(v16) = v16(a2);
        swift_release();
        if (v16) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v2;
    *id v2 = 0x8000000000000000;
    uint64_t v20 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v20, v13, isUniquelyReferenced_nonNull_native);
    *id v2 = v21[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of InputDescriptor(a2, (uint64_t)v25);
  uint64_t v5 = *v2;
  outlined init with take of InputDescriptor(a2, (uint64_t)v24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  InputDescriptor.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = ~v7;
    while (1)
    {
      uint64_t v10 = *(void *)(v5 + 48) + 56 * v8;
      char v11 = *(unsigned char *)(v10 + 48);
      v22[0] = *(_OWORD *)v10;
      v22[1] = *(_OWORD *)(v10 + 16);
      v22[2] = *(_OWORD *)(v10 + 32);
      char v23 = v11;
      if (specialized static InputDescriptor.== infix(_:_:)((uint64_t)v22, (uint64_t)v25)) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    outlined retain of InputDescriptor(a2, (void (*)(void, void, void, void, void, void, void))outlined consume of InputDescriptor);
    uint64_t v14 = *(void *)(*v2 + 48) + 56 * v8;
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 24);
    char v19 = *(void **)(v14 + 32);
    uint64_t v20 = *(void *)(v14 + 40);
    unsigned __int8 v21 = *(unsigned char *)(v14 + 48);
    *(void *)a1 = *(void *)v14;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v17;
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 40) = v20;
    *(unsigned char *)(a1 + 48) = v21;
    outlined copy of InputDescriptor(v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with take of InputDescriptor((uint64_t)v25, (uint64_t)v22);
    v24[0] = *v2;
    *id v2 = 0x8000000000000000;
    outlined retain of InputDescriptor((uint64_t)v22, (void (*)(void, void, void, void, void, void, void))outlined copy of InputDescriptor);
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v22, v8, isUniquelyReferenced_nonNull_native);
    *id v2 = v24[0];
    swift_bridgeObjectRelease();
    outlined init with take of InputDescriptor((uint64_t)v22, a1);
    return 1;
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  void *v28;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[4];
  unsigned __int8 v36;

  outlined init with take of OutputDescriptor(a2, (uint64_t)v35);
  uint64_t v3 = v35[0];
  uint64_t v4 = v35[1];
  uint64_t v5 = v35[2];
  Swift::Int v6 = v35[3];
  uint64_t v7 = v36;
  uint64_t v28 = v2;
  unint64_t v8 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  uint64_t v32 = v6;
  id v33 = v5;
  String.hash(into:)();
  uint64_t v31 = v7;
  Hasher._combine(_:)(v7);
  uint64_t v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  char v11 = v9 & ~v10;
  Swift::Int v12 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v13 = ~v10;
    uint64_t v14 = *(void *)(v8 + 48);
    do
    {
      uint64_t v15 = v14 + 40 * v11;
      uint64_t v16 = *(void *)(v15 + 16);
      uint64_t v17 = *(void *)(v15 + 24);
      uint64_t v18 = *(unsigned __int8 *)(v15 + 32);
      char v19 = *(void *)v15 == v3 && *(void *)(v15 + 8) == v4;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v16 == v33 && v17 == v32)
        {
          if (v31 == v18) {
            goto LABEL_16;
          }
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v31 ^ v18) & 1) == 0)
        {
LABEL_16:
          swift_bridgeObjectRelease();
          outlined release of OutputDescriptor(a2);
          unsigned __int8 v21 = *(void *)(*v28 + 48) + 40 * v11;
          char v23 = *(void *)v21;
          uint64_t v22 = *(void *)(v21 + 8);
          uint64_t v24 = *(void *)(v21 + 16);
          uint64_t v25 = *(void *)(v21 + 24);
          LOBYTE(v21) = *(unsigned char *)(v21 + 32);
          *(void *)a1 = v23;
          *(void *)(a1 + 8) = v22;
          *(void *)(a1 + 16) = v24;
          *(void *)(a1 + 24) = v25;
          *(unsigned char *)(a1 + 32) = v21;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          return 0;
        }
      }
      char v11 = (v11 + 1) & v13;
    }
    while (((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = *v28;
  void *v28 = 0x8000000000000000;
  outlined retain of OutputDescriptor(a2);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v11, isUniquelyReferenced_nonNull_native);
  void *v28 = v34;
  swift_bridgeObjectRelease();
  outlined init with take of OutputDescriptor(a2, a1);
  return 1;
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  Swift::Int v6 = type metadata accessor for ImportSession.EvaluationFault(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ImportSession.EvaluationFault.hash(into:)();
  char v11 = Hasher._finalize()();
  Swift::Int v12 = -1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    char v19 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      outlined init with copy of ImportSession.EvaluationFault(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9);
      uint64_t v16 = specialized static ImportSession.EvaluationFault.== infix(_:_:)((uint64_t)v9, a2);
      outlined destroy of ImportSession.EvaluationFault((uint64_t)v9);
      if (v16) {
        break;
      }
      uint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of ImportSession.EvaluationFault(a2);
    outlined init with copy of ImportSession.EvaluationFault(*(void *)(*v3 + 48) + v15 * v13, v19);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of ImportSession.EvaluationFault(a2, (uint64_t)v9);
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    outlined init with take of ImportSession.EvaluationFault(a2, a1);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x23ECBA9E0](*(void *)(v6 + 40), a2, 4);
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
  swift_bridgeObjectRetain();
  id v6 = a2;
  _CFObject.hash(into:)();

  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    id v10 = *(id *)(*(void *)(v5 + 48) + 8 * v9);
    char v11 = static _CFObject.== infix(_:_:)();

    if (v11)
    {
LABEL_6:

      swift_bridgeObjectRelease();
      uint64_t v15 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
      *a1 = v15;
      id v16 = v15;
      return 0;
    }
    uint64_t v12 = ~v8;
    while (1)
    {
      unint64_t v9 = (v9 + 1) & v12;
      if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        break;
      }
      id v13 = *(id *)(*(void *)(v5 + 48) + 8 * v9);
      char v14 = static _CFObject.== infix(_:_:)();

      if (v14) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  id v19 = v6;
  specialized _NativeSet.insertNew(_:at:isUnique:)(v19, v9, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = v19;
  return 1;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  void *v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  id v18;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  swift_bridgeObjectRetain();
  _CFObject.hash(into:)();
  id v6 = Hasher._finalize()();
  Swift::Int v7 = -1 << *(unsigned char *)(v5 + 32);
  uint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    unint64_t v9 = *(id *)(*(void *)(v5 + 48) + 8 * v8);
    id v10 = static _CFObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:

      swift_bridgeObjectRelease();
      char v14 = *(void **)(*(void *)(*v3 + 48) + 8 * v8);
      *a1 = v14;
      uint64_t v15 = v14;
      return 0;
    }
    char v11 = ~v7;
    while (1)
    {
      uint64_t v8 = (v8 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        break;
      }
      uint64_t v12 = *(id *)(*(void *)(v5 + 48) + 8 * v8);
      id v13 = static _CFObject.== infix(_:_:)();

      if (v13) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  uint64_t v18 = a2;
  specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v18, v8, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v20;
  swift_bridgeObjectRelease();
  *a1 = v18;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  id v26;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;

  uint64_t v3 = v2;
  id v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      Swift::Int v7 = *v2;
    }
    else {
      Swift::Int v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = a2;
    unint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for RIOPxrSdfPathRef(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v28;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v29 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      uint64_t v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      uint64_t v22 = v29;
    }
    else
    {
      uint64_t v22 = v21;
      char v23 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v22);
    *uint64_t v3 = v22;
    swift_bridgeObjectRelease();
    *a1 = v8;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
    swift_bridgeObjectRetain();
    _CFObject.hash(into:)();
    char v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    id v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      char v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      uint64_t v15 = static _CFObject.== infix(_:_:)();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v19 = *(void **)(*(void *)(*v3 + 48) + 8 * v13);
        *a1 = v19;
        uint64_t v20 = v19;
        return 0;
      }
      id v16 = ~v12;
      while (1)
      {
        id v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        uint64_t v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        uint64_t v18 = static _CFObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    uint64_t v25 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v25, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v30;
    swift_bridgeObjectRelease();
    *a1 = v25;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Stage.MissingReference.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  uint64_t v45 = (uint64_t)a2;
  uint64_t v46 = a1;
  uint64_t v44 = v3;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v11 = ~v8;
    uint64_t v12 = *(void *)(v6 + 48);
    int v13 = *(unsigned __int8 *)a2;
    uint64_t v14 = a2[1];
    uint64_t v15 = a2[2];
    uint64_t v54 = a2[4];
    uint64_t v55 = v15;
    uint64_t v47 = a2[5];
    uint64_t v49 = a2[3];
    uint64_t v50 = a2[6];
    uint64_t v48 = a2[8];
    uint64_t v41 = a2[9];
    uint64_t v42 = a2[7];
    uint64_t v43 = a2[10];
    uint64_t v56 = v14;
    do
    {
      id v16 = (void *)(v12 + 88 * v9);
      if (*(unsigned __int8 *)v16 != v13) {
        goto LABEL_4;
      }
      uint64_t v18 = v16[3];
      uint64_t v17 = v16[4];
      uint64_t v19 = v16[5];
      uint64_t v20 = v16[6];
      uint64_t v21 = v16[8];
      uint64_t v52 = v16[7];
      uint64_t v51 = v16[9];
      uint64_t v53 = v16[10];
      if (v16[1] != v14 || v16[2] != v15)
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v15 = v55;
        uint64_t v14 = v56;
        if ((v23 & 1) == 0) {
          goto LABEL_4;
        }
      }
      if (v17)
      {
        if (!v54) {
          goto LABEL_4;
        }
        if (v18 != v49 || v17 != v54)
        {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v15 = v55;
          uint64_t v14 = v56;
          if ((v25 & 1) == 0) {
            goto LABEL_4;
          }
        }
      }
      else if (v54)
      {
        goto LABEL_4;
      }
      if (v20)
      {
        if (!v50) {
          goto LABEL_4;
        }
        if (v19 != v47 || v20 != v50)
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v15 = v55;
          uint64_t v14 = v56;
          if ((v27 & 1) == 0) {
            goto LABEL_4;
          }
        }
      }
      else if (v50)
      {
        goto LABEL_4;
      }
      if (v21)
      {
        if (!v48) {
          goto LABEL_4;
        }
        if (v52 != v42 || v21 != v48)
        {
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v15 = v55;
          uint64_t v14 = v56;
          if ((v29 & 1) == 0) {
            goto LABEL_4;
          }
        }
      }
      else if (v48)
      {
        goto LABEL_4;
      }
      if (v53)
      {
        if (v43)
        {
          if (v51 == v41 && v53 == v43
            || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v15 = v55, v14 = v56, (v30 & 1) != 0))
          {
LABEL_43:
            swift_bridgeObjectRelease();
            outlined release of Stage.MissingReference(v45);
            uint64_t v31 = *(void *)(*v44 + 48) + 88 * v9;
            uint64_t v32 = *(void *)(v31 + 8);
            uint64_t v33 = *(void *)(v31 + 16);
            uint64_t v34 = *(void *)(v31 + 24);
            uint64_t v35 = *(void *)(v31 + 80);
            *(unsigned char *)uint64_t v46 = *(unsigned char *)v31;
            *(void *)(v46 + 8) = v32;
            *(void *)(v46 + 16) = v33;
            *(void *)(v46 + 24) = v34;
            long long v36 = *(_OWORD *)(v31 + 48);
            *(_OWORD *)(v46 + 32) = *(_OWORD *)(v31 + 32);
            *(_OWORD *)(v46 + 48) = v36;
            *(_OWORD *)(v46 + 64) = *(_OWORD *)(v31 + 64);
            *(void *)(v46 + 80) = v35;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            return 0;
          }
        }
      }
      else if (!v43)
      {
        goto LABEL_43;
      }
LABEL_4:
      unint64_t v9 = (v9 + 1) & v11;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v57 = *v44;
  *uint64_t v44 = 0x8000000000000000;
  outlined retain of Stage.MissingReference(v45);
  specialized _NativeSet.insertNew(_:at:isUnique:)(v45, v9, isUniquelyReferenced_nonNull_native);
  *uint64_t v44 = v57;
  swift_bridgeObjectRelease();
  long long v39 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v46 + 48) = v39;
  *(_OWORD *)(v46 + 64) = *(_OWORD *)(v45 + 64);
  *(void *)(v46 + 80) = *(void *)(v45 + 80);
  long long v40 = *(_OWORD *)(v45 + 16);
  uint64_t result = 1;
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v45;
  *(_OWORD *)(v46 + 16) = v40;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v38, a2);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  id v37 = a3;
  _CFObject.hash(into:)();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v35 = v5;
  long long v36 = a1;
  uint64_t v34 = a4;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    do
    {
      Swift::Int v15 = (uint64_t *)(*(void *)(v10 + 48) + 24 * v13);
      uint64_t v17 = *v15;
      id v16 = (void *)v15[1];
      uint64_t v18 = (void *)v15[2];
      swift_bridgeObjectRetain();
      id v19 = v16;
      id v20 = v18;
      if (specialized static Set.== infix(_:_:)(v17, a2))
      {
        uint64_t v21 = a2;
        id v22 = v19;
        id v23 = v37;
        char v24 = static _CFObject.== infix(_:_:)();

        swift_bridgeObjectRelease();
        a2 = v21;

        if (v24)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v25 = (uint64_t *)(*(void *)(*v35 + 48) + 24 * v13);
          uint64_t v26 = (void *)v25[1];
          char v27 = (void *)v25[2];
          *long long v36 = *v25;
          v36[1] = (uint64_t)v26;
          v36[2] = (uint64_t)v27;
          swift_bridgeObjectRetain();
          id v28 = v26;
          id v29 = v27;
          return 0;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v38[0] = *v35;
  void *v35 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  id v32 = v37;
  id v33 = v34;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v32, (uint64_t)v33, v13, isUniquelyReferenced_nonNull_native);
  void *v35 = v38[0];
  swift_bridgeObjectRelease();
  *long long v36 = a2;
  v36[1] = (uint64_t)v32;
  uint64_t result = 1;
  v36[2] = (uint64_t)v33;
  return result;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v12 = v2;
    __CocoaSet.makeIterator()();
    uint64_t v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for StageDirtyState();
      do
      {
        *(void *)&v10[0] = v4;
        swift_dynamicCast();
        uint64_t v2 = v12;
        if (*(void *)(v12 + 24) <= *(void *)(v12 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v12;
        }
        uint64_t v5 = v11;
        Hasher.init(_seed:)();
        uint64_t v6 = *(void *)(v5 + 24);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)(v10, v6);
        swift_bridgeObjectRelease();
        uint64_t v7 = *(void *)(v5 + 16);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)((uint64_t)v10, v7);
        swift_bridgeObjectRelease();
        Hasher._finalize()();
        unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
        *(void *)(v2 + 56 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v5;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v17 = v2;
    __CocoaSet.makeIterator()();
    uint64_t v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for PrimDirtyState();
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        uint64_t v2 = v17;
        if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v17;
        }
        uint64_t v5 = v16[9];
        Hasher.init(_seed:)();
        (*(void (**)(void *))(*(void *)v5 + 128))(v16);
        Swift::Int result = Hasher._finalize()();
        uint64_t v7 = v2 + 56;
        uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v9 = result & ~v8;
        unint64_t v10 = v9 >> 6;
        if (((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v12 = 0;
          unint64_t v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v14 = v10 == v13;
            if (v10 == v13) {
              unint64_t v10 = 0;
            }
            v12 |= v14;
            uint64_t v15 = *(void *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(void *)(*(void *)(v2 + 48) + 8 * v11) = v5;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  void v16[10];
  uint64_t v17;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v17 = v2;
    __CocoaSet.makeIterator()();
    uint64_t v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for PropertyDirtyState();
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        uint64_t v2 = v17;
        if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v17;
        }
        uint64_t v5 = v16[9];
        Hasher.init(_seed:)();
        (*(void (**)(void *))(*(void *)v5 + 120))(v16);
        Swift::Int result = Hasher._finalize()();
        uint64_t v7 = v2 + 56;
        uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v9 = result & ~v8;
        unint64_t v10 = v9 >> 6;
        if (((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v12 = 0;
          unint64_t v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v14 = v10 == v13;
            if (v10 == v13) {
              unint64_t v10 = 0;
            }
            v12 |= v14;
            uint64_t v15 = *(void *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(void *)(*(void *)(v2 + 48) + 8 * v11) = v5;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    BOOL v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for RIOPxrSdfPathRef(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
        _CFObject.hash(into:)();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        uint64_t v6 = result & ~v5;
        uint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          uint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            unint64_t v11 = v7 == v10;
            if (v7 == v10) {
              uint64_t v7 = 0;
            }
            v9 |= v11;
            char v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          uint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

unint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    id v22 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v18 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v18 >= v9) {
          goto LABEL_21;
        }
        unint64_t v19 = v6[v18];
        ++v12;
        if (!v19)
        {
          int64_t v12 = v18 + 1;
          if (v18 + 1 >= v9) {
            goto LABEL_21;
          }
          unint64_t v19 = v6[v12];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v9)
            {
LABEL_21:
              swift_release();
              uint64_t v21 = 1 << *(unsigned char *)(v2 + 32);
              if (v21 > 63) {
                bzero((void *)(v2 + 56), ((unint64_t)(v21 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v6 = -1 << v21;
              }
              uint64_t v1 = v22;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v19 = v6[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v12 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_27;
                }
                if (v12 >= v9) {
                  goto LABEL_21;
                }
                unint64_t v19 = v6[v12];
                ++v20;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v20;
          }
        }
LABEL_20:
        unint64_t v8 = (v19 - 1) & v19;
        unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
      }
      uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      uint64_t v16 = *(void *)(v15 + 24);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)(v23, v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v15 + 16);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)((uint64_t)v23, v17);
      swift_bridgeObjectRelease();
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(void *)(*(void *)(v4 + 48) + 8 * result) = v15;
      ++*(void *)(v4 + 16);
    }
  }
  unint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  long long v22;
  char v23[72];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Inputs.PropertyDelta>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v21 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    unint64_t result = swift_retain();
    unint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        int64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v11 << 6);
      }
      else
      {
        uint64_t v17 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v17 >= v8) {
          goto LABEL_23;
        }
        int64_t v18 = v21[v17];
        ++v11;
        if (!v18)
        {
          unint64_t v11 = v17 + 1;
          if (v17 + 1 >= v8) {
            goto LABEL_23;
          }
          int64_t v18 = v21[v11];
          if (!v18)
          {
            unint64_t v11 = v17 + 2;
            if (v17 + 2 >= v8) {
              goto LABEL_23;
            }
            int64_t v18 = v21[v11];
            if (!v18)
            {
              unint64_t v19 = v17 + 3;
              if (v19 >= v8)
              {
LABEL_23:
                swift_release();
                int64_t v20 = 1 << *(unsigned char *)(v2 + 32);
                if (v20 > 63) {
                  bzero(v21, ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v21 = -1 << v20;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v18 = v21[v19];
              if (!v18)
              {
                while (1)
                {
                  unint64_t v11 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_29;
                  }
                  if (v11 >= v8) {
                    goto LABEL_23;
                  }
                  int64_t v18 = v21[v11];
                  ++v19;
                  if (v18) {
                    goto LABEL_22;
                  }
                }
              }
              unint64_t v11 = v19;
            }
          }
        }
LABEL_22:
        uint64_t v7 = (v18 - 1) & v18;
        unint64_t v13 = __clz(__rbit64(v18)) + (v11 << 6);
      }
      unint64_t v14 = *(void *)(v2 + 48) + 24 * v13;
      uint64_t v15 = *(void *)(v14 + 16);
      id v22 = *(_OWORD *)v14;
      Hasher.init(_seed:)();
      specialized Set.hash(into:)((uint64_t)v23, v22);
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
      _CFObject.hash(into:)();
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v16 = *(void *)(v4 + 48) + 24 * result;
      *(_OWORD *)uint64_t v16 = v22;
      *(void *)(v16 + 16) = v15;
      ++*(void *)(v4 + 16);
    }
  }
  unint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_31;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_31;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v9)
            {
LABEL_31:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
              if (v27 > 63) {
                bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v6 = -1 << v27;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v17 = v6[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v12 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_37;
                }
                if (v12 >= v9) {
                  goto LABEL_31;
                }
                unint64_t v17 = v6[v12];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v18;
          }
        }
LABEL_21:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      (*(void (**)(char *))(*(void *)v19 + 128))(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v35 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v34 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    long long v36 = v2;
    while (1)
    {
      if (v7)
      {
        id v37 = (v7 - 1) & v7;
        id v38 = v10;
        unint64_t v13 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        unint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v34) {
          goto LABEL_33;
        }
        unint64_t v15 = v35[v14];
        int64_t v16 = v10 + 1;
        if (!v15)
        {
          int64_t v16 = v10 + 2;
          if (v10 + 2 >= v34) {
            goto LABEL_33;
          }
          unint64_t v15 = v35[v16];
          if (!v15)
          {
            int64_t v16 = v10 + 3;
            if (v10 + 3 >= v34) {
              goto LABEL_33;
            }
            unint64_t v15 = v35[v16];
            if (!v15)
            {
              unint64_t v17 = v10 + 4;
              if (v10 + 4 >= v34)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                id v33 = 1 << *(unsigned char *)(v2 + 32);
                if (v33 > 63) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v35 = -1 << v33;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v35[v17];
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v35[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v16 = v10 + 4;
            }
          }
        }
LABEL_23:
        id v37 = (v15 - 1) & v15;
        id v38 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      int64_t v18 = *(void *)(v2 + 48) + 56 * v13;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      unint64_t v21 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      unint64_t v24 = *(void *)(v18 + 32);
      char v23 = *(void *)(v18 + 40);
      BOOL v25 = *(unsigned char *)(v18 + 48);
      Hasher.init(_seed:)();
      InputDescriptor.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v27 = result & ~v26;
      id v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        id v29 = 0;
        char v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            id v28 = 0;
          }
          v29 |= v31;
          id v32 = *(void *)(v8 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v11 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      int64_t v12 = *(void *)(v4 + 48) + 56 * v11;
      *(void *)int64_t v12 = v19;
      *(void *)(v12 + 8) = v20;
      *(void *)(v12 + 16) = v21;
      *(void *)(v12 + 24) = v22;
      *(void *)(v12 + 32) = v24;
      *(void *)(v12 + 40) = v23;
      *(unsigned char *)(v12 + 48) = v25;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v36;
      uint64_t v7 = v37;
      uint64_t v10 = v38;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    id v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = MEMORY[0x23ECBA9E0](*(void *)(v4 + 40), v18, 4);
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28[72];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      (*(void (**)(char *))(*(void *)v19 + 120))(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v28 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        unint64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        int64_t v16 = v28[v15];
        ++v11;
        if (!v16)
        {
          unint64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          int64_t v16 = v28[v11];
          if (!v16)
          {
            unint64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            int64_t v16 = v28[v11];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero(v28, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v28 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v28[v17];
              if (!v16)
              {
                while (1)
                {
                  unint64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v28[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v11 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      int64_t v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrSdfPathRef(0);
      lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
      uint64_t v19 = v18;
      _CFObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v9 + 8 * v22);
        }
        while (v26 == -1);
        int64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
      _CFObject.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt8 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  uint64_t i;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v33 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    id v32 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    for (i = v2; ; uint64_t v2 = i)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32) {
          goto LABEL_33;
        }
        int64_t v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          uint64_t v10 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_33;
          }
          int64_t v16 = v33[v10];
          if (!v16)
          {
            uint64_t v10 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_33;
            }
            int64_t v16 = v33[v10];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v33 = -1 << v31;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v32) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v33[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v10 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      int64_t v18 = *(void *)(v2 + 48) + 40 * v14;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      unint64_t v21 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      char v23 = *(unsigned char *)(v18 + 32);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      String.hash(into:)();
      String.hash(into:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      BOOL v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          id v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0;
          }
          v27 |= v29;
          char v30 = *(void *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      int64_t v12 = *(void *)(v4 + 48) + 40 * v11;
      *(void *)int64_t v12 = v19;
      *(void *)(v12 + 8) = v20;
      *(void *)(v12 + 16) = v21;
      *(void *)(v12 + 24) = v22;
      *(unsigned char *)(v12 + 32) = v23;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  char *v32;
  char *v33;
  uint64_t v34;
  Swift::UInt32 v35;
  uint64_t v36;
  Swift::UInt32 v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t *v53;
  void (**v54)(char *, uint64_t);
  void (**v55)(char *, uint64_t);
  void (**v56)(char *, uint64_t);
  void (**v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  uint64_t v1 = v0;
  v63 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v2 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  v62 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v4 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  v60 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v6 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  v59 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  v69 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v52 - v12;
  unint64_t v14 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
  unint64_t v15 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_46;
  }
  uint64_t v53 = v0;
  unint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  int64_t v18 = *(void *)(v14 + 56);
  v66 = (void *)(v14 + 56);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  uint64_t v20 = v6;
  unint64_t v21 = v19 & v18;
  v65 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v20 + 32);
  uint64_t v56 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v55 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v54 = (void (**)(char *, uint64_t))(v20 + 8);
  unint64_t v22 = v15 + 56;
  swift_retain();
  char v23 = 0;
  v67 = v13;
  v68 = v14;
  v58 = v8;
  while (1)
  {
    if (v21)
    {
      BOOL v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      uint64_t v26 = v25 | (v23 << 6);
      goto LABEL_24;
    }
    uint64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      goto LABEL_47;
    }
    if (v27 >= v65) {
      break;
    }
    id v28 = v66[v27];
    ++v23;
    if (!v28)
    {
      char v23 = v27 + 1;
      if (v27 + 1 >= v65) {
        break;
      }
      id v28 = v66[v23];
      if (!v28)
      {
        char v23 = v27 + 2;
        if (v27 + 2 >= v65) {
          break;
        }
        id v28 = v66[v23];
        if (!v28)
        {
          id v29 = v27 + 3;
          if (v29 >= v65) {
            break;
          }
          id v28 = v66[v29];
          if (!v28)
          {
            while (1)
            {
              char v23 = v29 + 1;
              if (__OFADD__(v29, 1)) {
                goto LABEL_48;
              }
              if (v23 >= v65) {
                goto LABEL_42;
              }
              id v28 = v66[v23];
              ++v29;
              if (v28) {
                goto LABEL_23;
              }
            }
          }
          char v23 = v29;
        }
      }
    }
LABEL_23:
    unint64_t v21 = (v28 - 1) & v28;
    uint64_t v26 = __clz(__rbit64(v28)) + (v23 << 6);
LABEL_24:
    char v30 = *(void *)(v69 + 72);
    outlined init with take of ImportSession.EvaluationFault(*(void *)(v14 + 48) + v30 * v26, (uint64_t)v13);
    Hasher.init(_seed:)();
    outlined init with copy of ImportSession.EvaluationFault((uint64_t)v13, (uint64_t)v10);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v31 = 2;
        goto LABEL_31;
      case 2u:
        id v32 = v59;
        (*v57)(v59, v10, v64);
        Hasher._combine(_:)(3uLL);
        id v33 = v60;
        __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
        uint64_t v34 = v61;
        dispatch thunk of Hashable.hash(into:)();
        (*v56)(v33, v34);
        uint64_t v35 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        Hasher._combine(_:)(v35);
        long long v36 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        Hasher._combine(_:)(HIDWORD(v36));
        __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        Hasher._combine(_:)(v37);
        id v38 = v62;
        __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, MEMORY[0x263F161C8]);
        long long v39 = v63;
        dispatch thunk of Hashable.hash(into:)();
        long long v40 = v38;
        uint64_t v41 = v39;
        unint64_t v13 = v67;
        unint64_t v14 = v68;
        (*v55)(v40, v41);
        (*v54)(v32, v64);
        goto LABEL_32;
      case 3u:
        uint64_t v31 = 4;
        goto LABEL_31;
      case 4u:
        uint64_t v31 = 5;
        goto LABEL_31;
      case 5u:
        uint64_t v31 = 6;
        goto LABEL_31;
      case 6u:
        Hasher._combine(_:)(0);
        goto LABEL_32;
      default:
        uint64_t v31 = 1;
LABEL_31:
        Hasher._combine(_:)(v31);
        unint64_t v14 = v68;
        String.hash(into:)();
        unint64_t v13 = v67;
        swift_bridgeObjectRelease();
LABEL_32:
        uint64_t v42 = Hasher._finalize()();
        uint64_t v43 = -1 << *(unsigned char *)(v16 + 32);
        uint64_t v44 = v42 & ~v43;
        uint64_t v45 = v44 >> 6;
        if (((-1 << v44) & ~*(void *)(v22 + 8 * (v44 >> 6))) != 0)
        {
          unint64_t v24 = __clz(__rbit64((-1 << v44) & ~*(void *)(v22 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_7;
        }
        uint64_t v46 = 0;
        uint64_t v47 = (unint64_t)(63 - v43) >> 6;
        break;
    }
    do
    {
      if (++v45 == v47 && (v46 & 1) != 0)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        JUMPOUT(0x23A9A90A0);
      }
      uint64_t v48 = v45 == v47;
      if (v45 == v47) {
        uint64_t v45 = 0;
      }
      v46 |= v48;
      uint64_t v49 = *(void *)(v22 + 8 * v45);
    }
    while (v49 == -1);
    unint64_t v24 = __clz(__rbit64(~v49)) + (v45 << 6);
LABEL_7:
    *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    outlined init with take of ImportSession.EvaluationFault((uint64_t)v13, *(void *)(v16 + 48) + v24 * v30);
    ++*(void *)(v16 + 16);
  }
LABEL_42:
  swift_release();
  uint64_t v1 = v53;
  uint64_t v50 = 1 << *(unsigned char *)(v14 + 32);
  if (v50 > 63) {
    bzero(v66, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *v66 = -1 << v50;
  }
  *(void *)(v14 + 16) = 0;
LABEL_46:
  uint64_t result = swift_release();
  uint64_t *v1 = v16;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrSdfPathRef(0);
      lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
      _CFObject.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Stage.MissingReference>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    long long v39 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    id v37 = v1;
    id v38 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    long long v40 = v2;
    uint64_t v41 = v4;
    while (1)
    {
      if (v7)
      {
        uint64_t v42 = (v7 - 1) & v7;
        uint64_t v44 = v10;
        unint64_t v14 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          return result;
        }
        if (v15 >= v38) {
          goto LABEL_44;
        }
        int64_t v16 = v39[v15];
        unint64_t v17 = v10 + 1;
        if (!v16)
        {
          unint64_t v17 = v10 + 2;
          if (v10 + 2 >= v38) {
            goto LABEL_44;
          }
          int64_t v16 = v39[v17];
          if (!v16)
          {
            unint64_t v17 = v10 + 3;
            if (v10 + 3 >= v38) {
              goto LABEL_44;
            }
            int64_t v16 = v39[v17];
            if (!v16)
            {
              int64_t v18 = v10 + 4;
              if (v10 + 4 >= v38)
              {
LABEL_44:
                swift_release();
                uint64_t v1 = v37;
                long long v36 = 1 << *(unsigned char *)(v2 + 32);
                if (v36 > 63) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v39 = -1 << v36;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v39[v18];
              if (!v16)
              {
                while (1)
                {
                  unint64_t v17 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_50;
                  }
                  if (v17 >= v38) {
                    goto LABEL_44;
                  }
                  int64_t v16 = v39[v17];
                  ++v18;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v17 = v10 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v42 = (v16 - 1) & v16;
        uint64_t v44 = v17;
        unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      uint64_t v19 = (void *)(*(void *)(v2 + 48) + 88 * v14);
      uint64_t v20 = *(unsigned __int8 *)v19;
      unint64_t v21 = v19[1];
      unint64_t v22 = v19[2];
      unint64_t v24 = v19[3];
      char v23 = v19[4];
      BOOL v25 = v19[5];
      uint64_t v26 = v19[6];
      uint64_t v27 = v19[7];
      uint64_t v45 = v19[9];
      uint64_t v46 = v19[8];
      uint64_t v47 = v19[10];
      Hasher.init(_seed:)();
      uint64_t v43 = v20;
      Hasher._combine(_:)(v20);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v23)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        id v28 = v24;
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v28 = v24;
        Hasher._combine(_:)(0);
      }
      if (v26)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      if (v46)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v47) {
          goto LABEL_32;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v47)
        {
LABEL_32:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
      }
      Hasher._combine(_:)(0);
LABEL_35:
      uint64_t result = Hasher._finalize()();
      uint64_t v4 = v41;
      id v29 = -1 << *(unsigned char *)(v41 + 32);
      char v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v8 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v30) & ~*(void *)(v8 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        int64_t v12 = v47;
      }
      else
      {
        id v32 = 0;
        id v33 = (unint64_t)(63 - v29) >> 6;
        int64_t v12 = v47;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_49;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v8 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v11 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v13 = *(void *)(v41 + 48) + 88 * v11;
      uint64_t v10 = v44;
      *(unsigned char *)unint64_t v13 = v43;
      *(void *)(v13 + 8) = v21;
      *(void *)(v13 + 16) = v22;
      *(void *)(v13 + 24) = v28;
      *(void *)(v13 + 32) = v23;
      *(void *)(v13 + 40) = v25;
      *(void *)(v13 + 48) = v26;
      *(void *)(v13 + 56) = v27;
      *(void *)(v13 + 64) = v46;
      *(void *)(v13 + 72) = v45;
      *(void *)(v13 + 80) = v12;
      ++*(void *)(v41 + 16);
      uint64_t v2 = v40;
      uint64_t v7 = v42;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          unint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            unint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                id v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      char v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          id v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  uint64_t v4 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

{
  unint64_t result;
  unsigned char v5[72];

  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(v5);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

{
  unint64_t result;
  unsigned char v5[72];

  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 120))(v5);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

{
  unint64_t result;

  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
  _CFObject.hash(into:)();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  uint64_t v10 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v22, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v22, v11);
  swift_bridgeObjectRelease();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v12;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v13 = ~v12;
    type metadata accessor for StageDirtyState();
    do
    {
      uint64_t v14 = *(void *)(*(void *)(v9 + 48) + 8 * a2);
      uint64_t v15 = *(void *)(v14 + 24);
      uint64_t v16 = *(void *)(v6 + 24);
      swift_retain();
      if (specialized static Set.== infix(_:_:)(v15, v16))
      {
        char v17 = specialized static Set.== infix(_:_:)(*(void *)(v14 + 16), *(void *)(v6 + 16));
        unint64_t result = swift_release();
        if (v17)
        {
          unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {
        unint64_t result = swift_release();
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  uint64_t v18 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = v6;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(Swift::Int);
  uint64_t v11;
  uint64_t (*v12)(Swift::Int);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned char v17[72];

  uint64_t v5 = result;
  Swift::Int v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  unint64_t v8 = *v3;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v5 + 128))(v17);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for PrimDirtyState();
    uint64_t v10 = *(uint64_t (**)(Swift::Int))(**(void **)(*(void *)(v8 + 48) + 8 * a2) + 136);
    swift_retain();
    LOBYTE(v10) = v10(v5);
    unint64_t result = swift_release();
    if (v10)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v12 = *(uint64_t (**)(Swift::Int))(**(void **)(*(void *)(v8 + 48) + 8 * a2) + 136);
        swift_retain();
        LOBYTE(v12) = v12(v5);
        unint64_t result = swift_release();
        if (v12) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(Swift::Int);
  uint64_t v11;
  uint64_t (*v12)(Swift::Int);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned char v17[72];

  uint64_t v5 = result;
  Swift::Int v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  unint64_t v8 = *v3;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v5 + 120))(v17);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for PropertyDirtyState();
    uint64_t v10 = *(uint64_t (**)(Swift::Int))(**(void **)(*(void *)(v8 + 48) + 8 * a2) + 128);
    swift_retain();
    LOBYTE(v10) = v10(v5);
    unint64_t result = swift_release();
    if (v10)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v12 = *(uint64_t (**)(Swift::Int))(**(void **)(*(void *)(v8 + 48) + 8 * a2) + 128);
        swift_retain();
        LOBYTE(v12) = v12(v5);
        unint64_t result = swift_release();
        if (v12) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

{
  uint64_t *v3;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v5 = (unsigned __int8 *)result;
  Swift::Int v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_51;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_51;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  unint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Stage.MissingReference.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  uint64_t v10 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v8 + 48);
    uint64_t v13 = *v5;
    uint64_t v14 = *((void *)v5 + 1);
    uint64_t v15 = *((void *)v5 + 2);
    uint64_t v46 = *((void *)v5 + 4);
    uint64_t v47 = v15;
    id v37 = *((void *)v5 + 5);
    uint64_t v41 = *((void *)v5 + 6);
    uint64_t v42 = ~v9;
    uint64_t v35 = *((void *)v5 + 7);
    id v38 = *((void *)v5 + 8);
    long long v39 = *((void *)v5 + 3);
    uint64_t v34 = *((void *)v5 + 9);
    long long v36 = *((void *)v5 + 10);
    uint64_t v48 = v14;
    do
    {
      uint64_t v16 = (void *)(v12 + 88 * a2);
      if (*(unsigned __int8 *)v16 != v13) {
        goto LABEL_11;
      }
      unint64_t result = v16[1];
      char v17 = v16[3];
      uint64_t v18 = v16[4];
      BOOL v20 = v16[5];
      uint64_t v19 = v16[6];
      uint64_t v21 = v16[8];
      uint64_t v44 = v16[7];
      uint64_t v43 = v16[9];
      uint64_t v45 = v16[10];
      if (result != v14 || v16[2] != v15)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v15 = v47;
        uint64_t v14 = v48;
        uint64_t v11 = v42;
        if ((result & 1) == 0) {
          goto LABEL_11;
        }
      }
      if (v18)
      {
        if (!v46) {
          goto LABEL_11;
        }
        if (v17 != v39 || v18 != v46)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v15 = v47;
          uint64_t v14 = v48;
          uint64_t v11 = v42;
          if ((result & 1) == 0) {
            goto LABEL_11;
          }
        }
      }
      else if (v46)
      {
        goto LABEL_11;
      }
      if (v19)
      {
        if (!v41) {
          goto LABEL_11;
        }
        if (v20 != v37 || v19 != v41)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v15 = v47;
          uint64_t v14 = v48;
          uint64_t v11 = v42;
          if ((result & 1) == 0) {
            goto LABEL_11;
          }
        }
      }
      else if (v41)
      {
        goto LABEL_11;
      }
      if (v21)
      {
        if (!v38) {
          goto LABEL_11;
        }
        if (v44 != v35 || v21 != v38)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v15 = v47;
          uint64_t v14 = v48;
          uint64_t v11 = v42;
          if ((result & 1) == 0) {
            goto LABEL_11;
          }
        }
      }
      else if (v38)
      {
        goto LABEL_11;
      }
      if (v45)
      {
        if (v36)
        {
          if (v43 == v34 && v45 == v36
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                uint64_t v15 = v47,
                uint64_t v14 = v48,
                uint64_t v11 = v42,
                (result & 1) != 0))
          {
LABEL_50:
            unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!v36)
      {
        goto LABEL_50;
      }
LABEL_11:
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v10 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_51:
  uint64_t v26 = *v40;
  *(void *)(*v40 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v27 = *(void *)(v26 + 48) + 88 * a2;
  id v28 = *((_OWORD *)v5 + 1);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v5;
  *(_OWORD *)(v27 + 16) = v28;
  *(void *)(v27 + 80) = *((void *)v5 + 10);
  id v29 = *((_OWORD *)v5 + 4);
  char v30 = *((_OWORD *)v5 + 2);
  *(_OWORD *)(v27 + 48) = *((_OWORD *)v5 + 3);
  *(_OWORD *)(v27 + 64) = v29;
  *(_OWORD *)(v27 + 32) = v30;
  uint64_t v31 = *(void *)(v26 + 16);
  id v32 = __OFADD__(v31, 1);
  id v33 = v31 + 1;
  if (v32) {
    __break(1u);
  }
  else {
    *(void *)(v26 + 16) = v33;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  outlined init with take of InputDescriptor(a1, (uint64_t)v25);
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v9 > v8)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v10 = *v4;
  outlined init with take of InputDescriptor(a1, (uint64_t)v24);
  Hasher.init(_seed:)();
  InputDescriptor.hash(into:)();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  a2 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v13 = ~v12;
    do
    {
      uint64_t v14 = *(void *)(v10 + 48) + 56 * a2;
      char v15 = *(unsigned char *)(v14 + 48);
      long long v16 = *(_OWORD *)(v14 + 16);
      v22[0] = *(_OWORD *)v14;
      v22[1] = v16;
      v22[2] = *(_OWORD *)(v14 + 32);
      char v23 = v15;
      if (specialized static InputDescriptor.== infix(_:_:)((uint64_t)v22, (uint64_t)v25)) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of InputDescriptor(a1, *(void *)(v17 + 48) + 56 * a2);
  uint64_t v19 = *(void *)(v17 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (!v20)
  {
    *(void *)(v17 + 16) = v21;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  Swift::UInt8 v31[4];
  uint64_t v32;
  void v33[4];
  unsigned __int8 v34;

  outlined init with take of OutputDescriptor(a1, (uint64_t)v33);
  unint64_t v7 = v33[0];
  unint64_t v8 = v33[1];
  unint64_t v9 = v33[3];
  id v32 = v33[2];
  *(_DWORD *)uint64_t v31 = v34;
  uint64_t v10 = *(void *)(*v3 + 16);
  Swift::Int v11 = *(void *)(*v3 + 24);
  id v29 = v3;
  char v30 = a1;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_24;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_24;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v31[0]);
  uint64_t v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  char v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    long long v16 = ~v14;
    uint64_t v17 = *(void *)(v12 + 48);
    do
    {
      uint64_t v18 = v17 + 40 * a2;
      uint64_t v19 = *(void *)(v18 + 16);
      BOOL v20 = *(void *)(v18 + 24);
      uint64_t v21 = *(unsigned __int8 *)(v18 + 32);
      unint64_t v22 = *(void *)v18 == v7 && *(void *)(v18 + 8) == v8;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v19 == v32 && v20 == v9)
        {
          if (*(_DWORD *)v31 == v21) {
            goto LABEL_23;
          }
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((*(_DWORD *)v31 ^ v21) & 1) == 0)
        {
LABEL_23:
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_24:
  unint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of OutputDescriptor(v30, *(void *)(v24 + 48) + 40 * a2);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1);
  id v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v4 = v3;
  unint64_t v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  unint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::Int v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(*v4 + 16);
  uint64_t v13 = *(void *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
    goto LABEL_8;
  }
  if (v13 <= v12)
  {
    specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
    char v15 = *v4;
    Hasher.init(_seed:)();
    ImportSession.EvaluationFault.hash(into:)();
    long long v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v26 = v8;
      uint64_t v18 = ~v17;
      uint64_t v14 = v9;
      uint64_t v19 = *(void *)(v9 + 72);
      while (1)
      {
        outlined init with copy of ImportSession.EvaluationFault(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v11);
        BOOL v20 = specialized static ImportSession.EvaluationFault.== infix(_:_:)((uint64_t)v11, a1);
        outlined destroy of ImportSession.EvaluationFault((uint64_t)v11);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v9;
  specialized _NativeSet.copy()();
LABEL_14:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of ImportSession.EvaluationFault(a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2);
  char v23 = *(void *)(v21 + 16);
  unint64_t v24 = __OFADD__(v23, 1);
  BOOL v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = MEMORY[0x23ECBA9E0](*(void *)(*v3 + 40), v5, 4);
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(void *a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
  id v10 = a1;
  _CFObject.hash(into:)();

  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    id v13 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v14 = static _CFObject.== infix(_:_:)();

    if (v14)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v15 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v17 = static _CFObject.== infix(_:_:)();

        if (v17) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v18 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  _CFObject.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static _CFObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static _CFObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
  _CFObject.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static _CFObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static _CFObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  unsigned int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    id v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = *(void *)(*v5 + 16);
  unint64_t v8 = *(void *)(*v5 + 24);
  if (v8 > v7 && (a5 & 1) != 0) {
    goto LABEL_15;
  }
  if (a5)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v5;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v31, a1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  _CFObject.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a4 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v12 = ~v11;
    do
    {
      uint64_t v13 = (uint64_t *)(*(void *)(v9 + 48) + 24 * a4);
      uint64_t v15 = *v13;
      uint64_t v14 = (void *)v13[1];
      BOOL v16 = (void *)v13[2];
      swift_bridgeObjectRetain();
      id v17 = v14;
      id v18 = v16;
      if (specialized static Set.== infix(_:_:)(v15, a1))
      {
        id v19 = v17;
        id v20 = a2;
        char v21 = static _CFObject.== infix(_:_:)();

        swift_bridgeObjectRelease();
        if (v21)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      a4 = (a4 + 1) & v12;
    }
    while (((*(void *)(v9 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_15:
  uint64_t v22 = *v27;
  *(void *)(*v27 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  BOOL v23 = (uint64_t *)(*(void *)(v22 + 48) + 24 * a4);
  uint64_t *v23 = a1;
  v23[1] = (uint64_t)a2;
  v23[2] = a3;
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25) {
    __break(1u);
  }
  else {
    *(void *)(v22 + 16) = v26;
  }
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v14) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v14) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }
  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7) {
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v13) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27)
      {
        int64_t v9 = v26 + 2;
        if (v26 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v27 = *(void *)(v6 + 8 * v9);
        if (!v27) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 56 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(void **)(v17 + 32);
    uint64_t v23 = *(void *)(v17 + 40);
    uint64_t v24 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v25 = *(unsigned char *)(v17 + 48);
    *(void *)uint64_t v24 = *(void *)v17;
    *(void *)(v24 + 8) = v19;
    *(void *)(v24 + 16) = v20;
    *(void *)(v24 + 24) = v21;
    *(void *)(v24 + 32) = v22;
    *(void *)(v24 + 40) = v23;
    *(unsigned char *)(v24 + 48) = v25;
    outlined copy of InputDescriptor(v18, v19, v20, v21, v22, v23, v25);
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v13) {
    goto LABEL_28;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13) {
      goto LABEL_28;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24)
      {
        int64_t v9 = v23 + 2;
        if (v23 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v24 = *(void *)(v6 + 8 * v9);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 40 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v19 = *(void *)v17;
    int64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    LOBYTE(v17) = *(unsigned char *)(v17 + 32);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v22 = v19;
    *(void *)(v22 + 8) = v18;
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = v21;
    *(unsigned char *)(v22 + 32) = v17;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unsigned __int8 v25 = v23 + 3;
  if (v25 >= v13) {
    goto LABEL_28;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ImportSession.EvaluationFault(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  unint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    uint64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    uint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      unint64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      uint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        unint64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        uint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    int64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    outlined init with copy of ImportSession.EvaluationFault(*(void *)(v6 + 48) + v19, (uint64_t)v5);
    uint64_t result = (void *)outlined init with take of ImportSession.EvaluationFault((uint64_t)v5, *(void *)(v8 + 48) + v19);
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v16) {
    goto LABEL_25;
  }
  uint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    unint64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    uint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Stage.MissingReference>);
  int64_t v28 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    void *v28 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 56);
  uint64_t v5 = v1 + 56;
  uint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v6) {
    uint64_t result = memmove(result, (const void *)(v1 + 56), 8 * v6);
  }
  unint64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  int64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v1 + 56);
  unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      int64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    unsigned __int8 v25 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v12) {
      goto LABEL_28;
    }
    int64_t v26 = *(void *)(v5 + 8 * v25);
    ++v8;
    if (!v26)
    {
      unint64_t v8 = v25 + 1;
      if (v25 + 1 >= v12) {
        goto LABEL_28;
      }
      int64_t v26 = *(void *)(v5 + 8 * v8);
      if (!v26)
      {
        unint64_t v8 = v25 + 2;
        if (v25 + 2 >= v12) {
          goto LABEL_28;
        }
        int64_t v26 = *(void *)(v5 + 8 * v8);
        if (!v26) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v11 = (v26 - 1) & v26;
    unint64_t v14 = __clz(__rbit64(v26)) + (v8 << 6);
LABEL_12:
    unint64_t v15 = 88 * v14;
    int64_t v16 = *(void *)(v1 + 48) + v15;
    unint64_t v17 = *(void *)(v16 + 8);
    int64_t v18 = *(void *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 24);
    uint64_t v20 = *(void *)(v16 + 80);
    uint64_t v21 = *(void *)(v3 + 48) + v15;
    uint64_t v22 = *(_OWORD *)(v16 + 32);
    uint64_t v23 = *(_OWORD *)(v16 + 48);
    uint64_t v24 = *(_OWORD *)(v16 + 64);
    *(unsigned char *)uint64_t v21 = *(unsigned char *)v16;
    *(void *)(v21 + 8) = v17;
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = v19;
    *(_OWORD *)(v21 + 32) = v22;
    *(_OWORD *)(v21 + 48) = v23;
    *(_OWORD *)(v21 + 64) = v24;
    *(void *)(v21 + 80) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v27 = v25 + 3;
  if (v27 >= v12) {
    goto LABEL_28;
  }
  int64_t v26 = *(void *)(v5 + 8 * v27);
  if (v26)
  {
    unint64_t v8 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    unint64_t v8 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    int64_t v26 = *(void *)(v5 + 8 * v8);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  long long v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Inputs.PropertyDelta>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    int64_t v18 = *(void **)(v17 + 16);
    unint64_t v19 = *(void *)(v4 + 48) + v16;
    uint64_t v24 = *(_OWORD *)v17;
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v17;
    *(void *)(v19 + 16) = v18;
    swift_bridgeObjectRetain();
    int64_t v20 = *((id *)&v24 + 1);
    id result = v18;
  }
  uint64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_22:
    unint64_t result = swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v21 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  unint64_t result = swift_retain_n();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    int64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v18 >= v9) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v12);
      if (!v19) {
        break;
      }
    }
LABEL_20:
    unint64_t v8 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_7:
    uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    uint64_t v16 = *(void *)(v15 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v22, v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v15 + 16);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v22, v17);
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(*(void *)(v4 + 48) + 8 * result) = v15;
    ++*(void *)(v4 + 16);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v9)
  {
LABEL_21:
    swift_release_n();
    uint64_t v1 = v21;
    goto LABEL_22;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v12 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  long long v21;
  char v22[72];

  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Inputs.PropertyDelta>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_24:
    unint64_t result = swift_release();
    uint64_t *v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v20 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(v1 + 56);
  uint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  unint64_t v8 = v2 + 56;
  unint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      uint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v12 = v11 | (v10 << 6);
      goto LABEL_7;
    }
    uint64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v7) {
      goto LABEL_23;
    }
    int64_t v18 = *(void *)(v20 + 8 * v17);
    ++v10;
    if (!v18)
    {
      uint64_t v10 = v17 + 1;
      if (v17 + 1 >= v7) {
        goto LABEL_23;
      }
      int64_t v18 = *(void *)(v20 + 8 * v10);
      if (!v18)
      {
        uint64_t v10 = v17 + 2;
        if (v17 + 2 >= v7) {
          goto LABEL_23;
        }
        int64_t v18 = *(void *)(v20 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v6 = (v18 - 1) & v18;
    int64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_7:
    unint64_t v13 = *(void *)(v1 + 48) + 24 * v12;
    unint64_t v14 = *(void **)(v13 + 16);
    int64_t v21 = *(_OWORD *)v13;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    *((id *)&v21 + 1);
    uint64_t v15 = v14;
    specialized Set.hash(into:)((uint64_t)v22, v21);
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = *(void *)(v3 + 48) + 24 * result;
    *(_OWORD *)uint64_t v16 = v21;
    *(void *)(v16 + 16) = v15;
    ++*(void *)(v3 + 16);
  }
  unint64_t v19 = v17 + 3;
  if (v19 >= v7)
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  int64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    int64_t v18 = *(void *)(v20 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_32:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v26 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain_n();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_21;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v14 >= v27) {
      goto LABEL_30;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v10);
      if (!v15)
      {
        int64_t v16 = v14 + 2;
        if (v16 >= v27)
        {
LABEL_30:
          uint64_t result = swift_release_n();
          uint64_t v1 = v0;
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v16);
        int64_t v10 = v16;
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_21:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    int64_t v18 = *(void (**)(char *))(*(void *)v17 + 128);
    swift_retain();
    v18(v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v8 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_30;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  id v33 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v34 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v35 = v2;
  while (1)
  {
    if (v7)
    {
      long long v36 = (v7 - 1) & v7;
      id v37 = v10;
      unint64_t v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v34) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v33 + 8 * v14);
    int64_t v16 = v10 + 1;
    if (!v15)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v34) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v33 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v10 + 3;
        if (v10 + 3 >= v34) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v33 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    long long v36 = (v15 - 1) & v15;
    id v37 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    int64_t v18 = *(void *)(v2 + 48) + 56 * v13;
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    char v22 = *(void *)(v18 + 24);
    unint64_t v23 = *(void **)(v18 + 32);
    BOOL v24 = *(void *)(v18 + 40);
    uint64_t v25 = *(unsigned char *)(v18 + 48);
    Hasher.init(_seed:)();
    outlined copy of InputDescriptor(v19, v20, v21, v22, v23, v24, v25);
    InputDescriptor.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v27 = result & ~v26;
    int64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      id v29 = 0;
      char v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          int64_t v28 = 0;
        }
        v29 |= v31;
        id v32 = *(void *)(v8 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v11 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = *(void *)(v4 + 48) + 56 * v11;
    *(void *)unint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(void *)(v12 + 16) = v21;
    *(void *)(v12 + 24) = v22;
    *(void *)(v12 + 32) = v23;
    *(void *)(v12 + 40) = v24;
    *(unsigned char *)(v12 + 48) = v25;
    ++*(void *)(v4 + 16);
    uint64_t v2 = v35;
    unint64_t v7 = v36;
    int64_t v10 = v37;
  }
  uint64_t v17 = v10 + 4;
  if (v10 + 4 >= v34)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v33 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v34) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v33 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  unint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = MEMORY[0x23ECBA9E0](*(void *)(v4 + 40), v18, 4);
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void (*v18)(char *);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  char v28[72];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v26 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v27) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    int64_t v18 = *(void (**)(char *))(*(void *)v17 + 120);
    swift_retain();
    v18(v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v8 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      unint64_t v11 = v15 + 1;
      if (v15 + 1 >= v27) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        unint64_t v11 = v15 + 2;
        if (v15 + 2 >= v27) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    int64_t v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
    uint64_t v19 = v18;
    _CFObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      BOOL v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          char v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v19;
    ++*(void *)(v4 + 16);
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    unint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      unint64_t v11 = v15 + 1;
      if (v15 + 1 >= v27) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        unint64_t v11 = v15 + 2;
        if (v15 + 2 >= v27) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    int64_t v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
    uint64_t v19 = v18;
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      BOOL v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          char v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v19;
    ++*(void *)(v4 + 16);
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    unint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt8 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t i;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v31 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  id v32 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v32) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v31 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v32) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v31 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v32) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v31 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    int64_t v18 = *(void *)(v2 + 48) + 40 * v14;
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    char v22 = *(void *)(v18 + 24);
    unint64_t v23 = *(unsigned char *)(v18 + 32);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    String.hash(into:)();
    Hasher._combine(_:)(v23);
    uint64_t result = Hasher._finalize()();
    BOOL v24 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v27 = 0;
      int64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        id v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0;
        }
        v27 |= v29;
        char v30 = *(void *)(v8 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = *(void *)(v4 + 48) + 40 * v11;
    *(void *)unint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(void *)(v12 + 16) = v21;
    *(void *)(v12 + 24) = v22;
    *(unsigned char *)(v12 + 32) = v23;
    ++*(void *)(v4 + 16);
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v31 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v31 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  char *v31;
  char *v32;
  uint64_t v33;
  Swift::UInt32 v34;
  uint64_t v35;
  Swift::UInt32 v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t *v51;
  void (**v52)(char *, uint64_t);
  void (**v53)(char *, uint64_t);
  void (**v54)(char *, uint64_t);
  void (**v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  uint64_t v1 = v0;
  v61 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v2 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  v60 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v4 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  v58 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v6 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  v67 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v50 - v12;
  int64_t v14 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
  unint64_t v15 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v16 = v15;
  if (!*(void *)(v14 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_44;
  }
  uint64_t v51 = v0;
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  int64_t v18 = *(void *)(v14 + 56);
  v63 = v14 + 56;
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  v64 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v54 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v53 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v52 = (void (**)(char *, uint64_t))(v6 + 8);
  unint64_t v21 = v15 + 56;
  swift_retain();
  char v22 = 0;
  v65 = v13;
  v66 = v14;
  uint64_t v56 = v8;
  while (1)
  {
    if (v20)
    {
      BOOL v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      uint64_t v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    uint64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_45;
    }
    if (v26 >= v64) {
      break;
    }
    int64_t v27 = *(void *)(v63 + 8 * v26);
    ++v22;
    if (!v27)
    {
      char v22 = v26 + 1;
      if (v26 + 1 >= v64) {
        break;
      }
      int64_t v27 = *(void *)(v63 + 8 * v22);
      if (!v27)
      {
        char v22 = v26 + 2;
        if (v26 + 2 >= v64) {
          break;
        }
        int64_t v27 = *(void *)(v63 + 8 * v22);
        if (!v27)
        {
          int64_t v28 = v26 + 3;
          if (v28 >= v64) {
            break;
          }
          int64_t v27 = *(void *)(v63 + 8 * v28);
          if (!v27)
          {
            while (1)
            {
              char v22 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_46;
              }
              if (v22 >= v64) {
                goto LABEL_42;
              }
              int64_t v27 = *(void *)(v63 + 8 * v22);
              ++v28;
              if (v27) {
                goto LABEL_23;
              }
            }
          }
          char v22 = v28;
        }
      }
    }
LABEL_23:
    unint64_t v20 = (v27 - 1) & v27;
    uint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_24:
    id v29 = *(void *)(v67 + 72);
    outlined init with copy of ImportSession.EvaluationFault(*(void *)(v14 + 48) + v29 * v25, (uint64_t)v13);
    Hasher.init(_seed:)();
    outlined init with copy of ImportSession.EvaluationFault((uint64_t)v13, (uint64_t)v10);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        char v30 = 2;
        goto LABEL_31;
      case 2u:
        uint64_t v31 = v57;
        (*v55)(v57, v10, v62);
        Hasher._combine(_:)(3uLL);
        id v32 = v58;
        __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, MEMORY[0x263F161A8]);
        id v33 = v59;
        dispatch thunk of Hashable.hash(into:)();
        (*v54)(v32, v33);
        uint64_t v34 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        Hasher._combine(_:)(v34);
        uint64_t v35 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        Hasher._combine(_:)(HIDWORD(v35));
        __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        Hasher._combine(_:)(v36);
        id v37 = v60;
        __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, MEMORY[0x263F161C8]);
        id v38 = v61;
        dispatch thunk of Hashable.hash(into:)();
        long long v39 = v37;
        long long v40 = v38;
        unint64_t v13 = v65;
        int64_t v14 = v66;
        (*v53)(v39, v40);
        (*v52)(v31, v62);
        goto LABEL_32;
      case 3u:
        char v30 = 4;
        goto LABEL_31;
      case 4u:
        char v30 = 5;
        goto LABEL_31;
      case 5u:
        char v30 = 6;
        goto LABEL_31;
      case 6u:
        Hasher._combine(_:)(0);
        goto LABEL_32;
      default:
        char v30 = 1;
LABEL_31:
        Hasher._combine(_:)(v30);
        int64_t v14 = v66;
        String.hash(into:)();
        unint64_t v13 = v65;
        swift_bridgeObjectRelease();
LABEL_32:
        uint64_t v41 = Hasher._finalize()();
        uint64_t v42 = -1 << *(unsigned char *)(v16 + 32);
        uint64_t v43 = v41 & ~v42;
        uint64_t v44 = v43 >> 6;
        if (((-1 << v43) & ~*(void *)(v21 + 8 * (v43 >> 6))) != 0)
        {
          unint64_t v23 = __clz(__rbit64((-1 << v43) & ~*(void *)(v21 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_7;
        }
        uint64_t v45 = 0;
        uint64_t v46 = (unint64_t)(63 - v42) >> 6;
        break;
    }
    do
    {
      if (++v44 == v46 && (v45 & 1) != 0)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        JUMPOUT(0x23A9AED38);
      }
      uint64_t v47 = v44 == v46;
      if (v44 == v46) {
        uint64_t v44 = 0;
      }
      v45 |= v47;
      uint64_t v48 = *(void *)(v21 + 8 * v44);
    }
    while (v48 == -1);
    unint64_t v23 = __clz(__rbit64(~v48)) + (v44 << 6);
LABEL_7:
    *(void *)(v21 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    outlined init with take of ImportSession.EvaluationFault((uint64_t)v13, *(void *)(v16 + 48) + v23 * v29);
    ++*(void *)(v16 + 16);
  }
LABEL_42:
  uint64_t result = swift_release_n();
  uint64_t v1 = v51;
LABEL_44:
  uint64_t *v1 = v16;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      unint64_t v11 = v15 + 1;
      if (v15 + 1 >= v27) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        unint64_t v11 = v15 + 2;
        if (v15 + 2 >= v27) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    int64_t v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
    uint64_t v19 = v18;
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      BOOL v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          char v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v19;
    ++*(void *)(v4 + 16);
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    unint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Stage.MissingReference>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_45:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v35 = v1;
  long long v36 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  id v37 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  id v38 = v2;
  long long v39 = v4;
  while (1)
  {
    if (v7)
    {
      long long v40 = (v7 - 1) & v7;
      uint64_t v42 = v10;
      unint64_t v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v14 >= v37) {
      goto LABEL_43;
    }
    unint64_t v15 = *(void *)(v36 + 8 * v14);
    int64_t v16 = v10 + 1;
    if (!v15)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v37) {
        goto LABEL_43;
      }
      unint64_t v15 = *(void *)(v36 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v10 + 3;
        if (v10 + 3 >= v37) {
          goto LABEL_43;
        }
        unint64_t v15 = *(void *)(v36 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    long long v40 = (v15 - 1) & v15;
    uint64_t v42 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    int64_t v18 = (void *)(*(void *)(v2 + 48) + 88 * v13);
    uint64_t v19 = *(unsigned __int8 *)v18;
    unint64_t v20 = v18[1];
    unint64_t v21 = v18[2];
    char v22 = v18[3];
    unint64_t v23 = v18[4];
    BOOL v24 = v18[6];
    uint64_t v25 = v18[8];
    uint64_t v44 = v18[7];
    uint64_t v45 = v18[5];
    uint64_t v26 = v18[10];
    uint64_t v43 = v18[9];
    Hasher.init(_seed:)();
    uint64_t v41 = v19;
    Hasher._combine(_:)(v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v23)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      int64_t v27 = v22;
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      int64_t v27 = v22;
      Hasher._combine(_:)(0);
    }
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v25) {
        goto LABEL_29;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (v25)
      {
LABEL_29:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_30;
        }
        goto LABEL_33;
      }
    }
    Hasher._combine(_:)(0);
    if (v26)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
LABEL_33:
    Hasher._combine(_:)(0);
LABEL_34:
    uint64_t result = Hasher._finalize()();
    uint64_t v4 = v39;
    int64_t v28 = -1 << *(unsigned char *)(v39 + 32);
    id v29 = result & ~v28;
    char v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v8 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v29) & ~*(void *)(v8 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      id v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        id v33 = v30 == v32;
        if (v30 == v32) {
          char v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v8 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v11 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = *(void *)(v39 + 48) + 88 * v11;
    int64_t v10 = v42;
    *(unsigned char *)unint64_t v12 = v41;
    *(void *)(v12 + 8) = v20;
    *(void *)(v12 + 16) = v21;
    *(void *)(v12 + 24) = v27;
    *(void *)(v12 + 32) = v23;
    *(void *)(v12 + 40) = v45;
    *(void *)(v12 + 48) = v24;
    *(void *)(v12 + 56) = v44;
    *(void *)(v12 + 64) = v25;
    *(void *)(v12 + 72) = v43;
    *(void *)(v12 + 80) = v26;
    ++*(void *)(v39 + 16);
    uint64_t v2 = v38;
    unint64_t v7 = v40;
  }
  uint64_t v17 = v10 + 4;
  if (v10 + 4 >= v37)
  {
LABEL_43:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v36 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v37) {
      goto LABEL_43;
    }
    unint64_t v15 = *(void *)(v36 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  id v29 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      unint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        unint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        int64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        int64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized AudioFileGroupBuilder.stageSubscription.getter()
{
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AudioConstants.AudioFileGroup.primType;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v0;
  id v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = MEMORY[0x263F8EE88];
  unint64_t v6 = MEMORY[0x263F8EE88];
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      unint64_t v6 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    }
    else {
      unint64_t v6 = MEMORY[0x263F8EE88];
    }
  }
  type metadata accessor for TypeNamePrimDirtyState();
  unint64_t v7 = (void *)swift_allocObject();
  v7[5] = v4;
  swift_bridgeObjectRetain();
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v6, v5);
  swift_bridgeObjectRelease();
  v7[2] = v5;
  v7[3] = v6;
  long long v7[4] = v8;
  uint64_t v15 = v5;
  swift_retain_n();
  specialized Set._Variant.insert(_:)(&v14, (uint64_t)v7);
  swift_release_n();
  swift_release();
  uint64_t v9 = v15;
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v10 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v5, v9, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AAB22C0;
  *(void *)(v11 + 32) = v10;
  uint64_t v15 = v11;
  specialized Array._endMutation()();
  uint64_t v12 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v15);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t outlined init with take of InputDescriptor(uint64_t a1, uint64_t a2)
{
  return a2;
}

void outlined copy of InputDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned __int8 a7)
{
  switch(a7 >> 4)
  {
    case 0:
    case 1:
    case 7:
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2:
    case 3:
    case 5:
    case 6:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v7 = a5;
      break;
    case 4:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
      break;
    case 8:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    default:
      return;
  }
}

uint64_t outlined retain of InputDescriptor(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

void outlined consume of InputDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned __int8 a7)
{
  switch(a7 >> 4)
  {
    case 0:
    case 1:
    case 7:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 2:
    case 3:
    case 5:
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      break;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_22;
  }
LABEL_3:
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  uint64_t v4 = 4;
  while (1)
  {
    uint64_t v19 = v3;
    uint64_t v5 = v4 - 4;
    if ((a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x23ECBA630](v4 - 4, a1);
      uint64_t v6 = v4 - 3;
      if (__OFADD__(v5, 1)) {
        goto LABEL_20;
      }
    }
    else
    {
      swift_retain();
      uint64_t v6 = v4 - 3;
      if (__OFADD__(v5, 1))
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    id v7 = (id)RIOBuilderInputsGetImportSession();
    if (!v7) {
      break;
    }
    id v8 = v7;
    uint64_t v18 = v6;
    uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

    if (!SwiftObject) {
      goto LABEL_24;
    }
    swift_retain();
    uint64_t v10 = (void *)RIOPxrUsdObjectCopyPath();
    uint64_t v11 = (void *)RIOPxrSdfPathCopyString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    unint64_t v13 = *v12;
    String.utf8CString.getter();
    id v14 = v13;
    uint64_t ExtraAssetWithTag = RIOImportSessionGetExtraAssetWithTag();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    if (ExtraAssetWithTag)
    {
      uint64_t v3 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      }
      unint64_t v17 = v3[2];
      unint64_t v16 = v3[3];
      if (v17 >= v16 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v3);
      }
      v3[2] = v17 + 1;
      v3[v17 + 4] = ExtraAssetWithTag;
    }
    else
    {
      uint64_t v3 = v19;
    }
    ++v4;
    if (v18 == v2) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void partial apply for closure #3 in AudioFileGroupBuilder.run(inputs:)()
{
  closure #3 in AudioFileGroupBuilder.run(inputs:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_23A9B021C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t outlined init with take of OutputDescriptor(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of OutputDescriptor(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of OutputDescriptor(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of Stage.MissingReference(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Stage.MissingReference(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ImportSession.EvaluationFault(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ImportSession.EvaluationFault(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ImportSession.EvaluationFault(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ImportSession.EvaluationFault(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:)(float a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7 = type metadata accessor for __RKEntityTriggerSpecification();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
  uint64_t v12 = *(int *)(v11 + 48);
  unint64_t v13 = &v10[*(int *)(v11 + 64)];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v10, a3, v14);
  *(float *)&v10[v12] = a1;
  uint64_t v15 = *MEMORY[0x263F16320];
  uint64_t v16 = type metadata accessor for __RKEntityProximityTrigger.ExitType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v13, v15, v16);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F163F0], v7);
  unint64_t v17 = *a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
    *a4 = v17;
  }
  unint64_t v20 = *(void *)(v17 + 16);
  unint64_t v19 = *(void *)(v17 + 24);
  if (v20 >= v19 >> 1)
  {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
    *a4 = v17;
  }
  *(void *)(v17 + 16) = v20 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v20, v10, v7);
}

uint64_t ToolsFoundations.Token.stringValue.getter()
{
  uint64_t v0 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t static ToolsFoundations.Token.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef()
{
  unint64_t result = lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef;
  if (!lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef)
  {
    type metadata accessor for RIOPxrTfTokenRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef;
  if (!lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef)
  {
    type metadata accessor for RIOPxrTfTokenRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef);
  }
  return result;
}

uint64_t ToolsFoundations.Token.description.getter()
{
  id v1 = *v0;
  uint64_t v2 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ToolsFoundations.Token.debugDescription.getter()
{
  id v1 = *v0;
  uint64_t v2 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A6E656B6F543CLL;
}

void ToolsFoundations.Token.hash(into:)()
{
  id v1 = *v0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int ToolsFoundations.Token.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToolsFoundations.Token()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolsFoundations.Token()
{
  id v1 = *v0;
  id v2 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolsFoundations.Token()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ToolsFoundations.Token()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolsFoundations.Token()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance ToolsFoundations.Token(void **a1, void **a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Comparable.<= infix(_:_:)(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = a1;
  uint64_t v9 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v5 == v10 && v7 == v12)
  {
    swift_bridgeObjectRelease_n();
    char v13 = 1;
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v13 = v14 ^ 1;
  }
  return v13 & 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance ToolsFoundations.Token(void **a1, void **a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Comparable.>= infix(_:_:)(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = a2;
  uint64_t v9 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v5 == v10 && v7 == v12)
  {
    swift_bridgeObjectRelease_n();
    char v13 = 1;
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v13 = v14 ^ 1;
  }
  return v13 & 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ToolsFoundations.Token(void **a1, void **a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Comparable.> infix(_:_:)(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = a1;
  uint64_t v9 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v5 == v10 && v7 == v12) {
    char v13 = 0;
  }
  else {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

id ToolsFoundations.Token.init(stringLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id result = (id)RIOPxrTfTokenEmpty();
    uint64_t v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v2 = RIOPxrTfTokenCreateWithCString();
    id result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

id protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance ToolsFoundations.Token@<X0>(uint64_t *a1@<X8>)
{
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id result = (id)RIOPxrTfTokenEmpty();
    uint64_t v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v2 = RIOPxrTfTokenCreateWithCString();
    id result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

id static ToolsFoundations.Token.Empty.getter@<X0>(void *a1@<X8>)
{
  id result = (id)RIOPxrTfTokenEmpty();
  *a1 = result;
  return result;
}

id ToolsFoundations.Token.init(string:immortal:)@<X0>(uint64_t *a1@<X8>)
{
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id result = (id)RIOPxrTfTokenEmpty();
    uint64_t v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v2 = RIOPxrTfTokenCreateWithCString();
    id result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

id ToolsFoundations.Token.init(string:)@<X0>(uint64_t *a1@<X8>)
{
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id result = (id)RIOPxrTfTokenEmpty();
    uint64_t v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v2 = RIOPxrTfTokenCreateWithCString();
    id result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

uint64_t ToolsFoundations.Token.isImmortal.getter()
{
  return RIOPxrTfTokenIsImmortal();
}

uint64_t ToolsFoundations.Token.isEmpty.getter()
{
  return RIOPxrTfTokenIsEmpty();
}

uint64_t ToolsFoundations.Token.count.getter()
{
  return MEMORY[0x270F22820](*v0);
}

uint64_t *ToolsFoundations.Token.swap(_:)(uint64_t *result)
{
  uint64_t v2 = *result;
  *id result = *v1;
  uint64_t *v1 = v2;
  return result;
}

uint64_t specialized static ToolsFoundations.Token.< infix(_:_:)(id *a1, void **a2)
{
  uint64_t v2 = *a2;
  id v3 = *a1;
  uint64_t v4 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = v2;
  uint64_t v9 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v5 == v10 && v7 == v12) {
    char v14 = 0;
  }
  else {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14 & 1;
}

unint64_t lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in ToolsFoundations.Token()
{
  return MEMORY[0x263F8D388];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in ToolsFoundations.Token()
{
  return MEMORY[0x263F8D398];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in ToolsFoundations.Token()
{
  return MEMORY[0x263F8D390];
}

ValueMetadata *type metadata accessor for ToolsFoundations.Token()
{
  return &type metadata for ToolsFoundations.Token;
}

uint64_t closure #1 in closure #1 in AudioMixGroupBuilder.stageSubscription.getter()
{
  if (one-time initialization token for gain != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AudioConstants.MixGroup.gain;
  type metadata accessor for NamedPropertyDirtyState();
  id v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = v0;
  uint64_t v3 = MEMORY[0x263F8EE88];
  id v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x263F8EE88]);

  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = one-time initialization token for speed;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static AudioConstants.MixGroup.speed;
  uint64_t v7 = (void *)swift_allocObject();
  long long v7[4] = v6;
  id v8 = v6;
  id v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  v7[2] = v3;
  v7[3] = v9;
  uint64_t v10 = one-time initialization token for mute;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)static AudioConstants.MixGroup.mute;
  uint64_t v12 = (void *)swift_allocObject();
  v12[4] = v11;
  id v13 = v11;
  id v14 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v13, v3);

  v12[2] = v3;
  v12[3] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24D0;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 48) = v12;
  unint64_t v18 = inited;
  specialized Array._endMutation()();
  uint64_t v16 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v18);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v16;
}

uint64_t AudioMixGroupBuilder.run(inputs:)()
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v0 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v0, v1, &aBlock);
  if (!v36)
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __AssetRef.__as<A>(_:)();
  REAudioMixGroupsComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass) {
    return swift_release();
  }
  uint64_t v3 = ComponentByClass;
  Inputs.prim.getter();
  id v4 = (void *)RIOPxrUsdObjectCopyName();
  uint64_t v5 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (one-time initialization token for gain != -1) {
    swift_once();
  }
  *(void *)&long long aBlock = static AudioConstants.MixGroup.gain;
  id v9 = (id)static AudioConstants.MixGroup.gain;
  uint64_t v10 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  int v11 = 0;
  if (v10)
  {
    LODWORD(aBlock) = 0;
    char Float = RIOPxrVtValueGetFloat();

    if (Float) {
      int v11 = aBlock;
    }
  }
  if (one-time initialization token for speed != -1) {
    swift_once();
  }
  *(void *)&long long aBlock = static AudioConstants.MixGroup.speed;
  id v13 = (id)static AudioConstants.MixGroup.speed;
  id v14 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  float v15 = 1.0;
  if (v14)
  {
    LODWORD(aBlock) = 0;
    char v16 = RIOPxrVtValueGetFloat();

    if (v16) {
      float v15 = *(float *)&aBlock;
    }
  }
  if (one-time initialization token for mute != -1) {
    swift_once();
  }
  *(void *)&long long aBlock = static AudioConstants.MixGroup.mute;
  id v17 = (id)static AudioConstants.MixGroup.mute;
  unint64_t v18 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  uint64_t v32 = v33;
  uint64_t v19 = v6;
  if (v18 && (LOBYTE(aBlock) = 0, char Bool = RIOPxrVtValueGetBool(), v18, (Bool & 1) != 0)) {
    char v21 = aBlock;
  }
  else {
    char v21 = 0;
  }
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = swift_weakInit();
  MEMORY[0x270FA5388](v24);
  v28[2] = v23;
  v28[3] = v3;
  v28[4] = v19;
  v28[5] = v8;
  int v29 = v11;
  float v30 = v15;
  char v31 = v21;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for closure #1 in AudioMixGroupBuilder.run(inputs:);
  *(void *)(v25 + 24) = v28;
  id v37 = thunk for @callee_guaranteed () -> ()partial apply;
  uint64_t v38 = v25;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v35 = thunk for @escaping @callee_guaranteed () -> ();
  long long v36 = &block_descriptor_18;
  uint64_t v26 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v26);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in AudioMixGroupBuilder.run(inputs:)(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong
    || (MixGroupID = *(void *)(Strong + 24), int v13 = *(unsigned __int8 *)(Strong + 32), swift_release(), v13 == 1))
  {
    uint64_t MixGroupID = REAudioMixGroupsComponentCreateMixGroupID();
  }
  uint64_t v14 = String.utf8CString.getter();
  MEMORY[0x23ECBADE0](a4, MixGroupID, v14 + 32, a7 & 1, a1, a2);
  swift_release();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + 24) = MixGroupID;
    *(unsigned char *)(result + 32) = 0;
    return swift_release();
  }
  return result;
}

uint64_t AudioMixGroupBuilder.clear(inputs:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v3 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v3, &aBlock);
  if (!v14)
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_9;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_10:
    *(void *)(v1 + 24) = 0;
    uint64_t v6 = (unsigned char *)(v1 + 32);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  __AssetRef.__as<A>(_:)();
  REAudioMixGroupsComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    uint64_t result = swift_release();
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (unsigned char *)(v1 + 32);
  if (*(unsigned char *)(v1 + 32))
  {
    uint64_t result = swift_release();
    *(void *)(v1 + 24) = v5;
LABEL_11:
    *uint64_t v6 = 1;
    return result;
  }
  v11[2] = MEMORY[0x270FA5388](ComponentByClass);
  v11[3] = v5;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in AudioMixGroupBuilder.clear(inputs:);
  *(void *)(v8 + 24) = v11;
  float v15 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v16 = v8;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  int v13 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v14 = &block_descriptor_0;
  id v9 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    *(void *)(v1 + 24) = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AudioMixGroupBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioMixGroupBuilder()
{
  return self;
}

uint64_t specialized AudioMixGroupBuilder.stageSubscription.getter()
{
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AudioConstants.MixGroup.primType;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v0;
  id v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = closure #1 in closure #1 in AudioMixGroupBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v6 = (void *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8EE88];
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x263F8EE88]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AAB22C0;
  *(void *)(v9 + 32) = v6;
  unint64_t v15 = v9;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v15);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v11 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v10, 0);
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AAB22C0;
  *(void *)(v12 + 32) = v11;
  unint64_t v16 = v12;
  specialized Array._endMutation()();
  uint64_t v13 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v16);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t specialized AudioMixGroupBuilder.inputDescriptors()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24E0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  uint64_t v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = static EntityBuilder.OutputIdentifier;
  uint64_t v4 = qword_268A584E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 56) = v4;
  *(unsigned char *)(inited + 80) = 112;
  *(void *)(inited + 88) = 0xD000000000000017;
  *(void *)(inited + 96) = 0x800000023AAACE40;
  *(void *)(inited + 104) = 0xD000000000000017;
  *(void *)(inited + 112) = 0x800000023AAACE40;
  *(_OWORD *)(inited + 120) = xmmword_23AAB24F0;
  *(unsigned char *)(inited + 136) = 16;
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v6;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in AudioMixGroupBuilder.clear(inputs:)()
{
  return MEMORY[0x270F1CA10](*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_23A9B2180()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)()
{
  if (RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v0 = RIOPxrUsdPrimCopyAttribute();
    type metadata accessor for AnyAttribute();
    uint64_t v1 = (void *)swift_allocObject();
    v1[2] = v0;
    uint64_t EmptyValue = RIOPxrUsdAttributeCopyValue();
    if (!EmptyValue) {
      uint64_t EmptyValue = RIOPxrVtValueCreateEmptyValue();
    }
    outlined consume of Result<AnyAttribute, Object.Error>(v1, 0);
  }
  else
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  return EmptyValue;
}

uint64_t sub_23A9B2270()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in AudioMixGroupBuilder.run(inputs:)()
{
  return closure #1 in AudioMixGroupBuilder.run(inputs:)(*(float *)(v0 + 48), *(float *)(v0 + 52), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 56));
}

uint64_t sub_23A9B22BC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void outlined consume of Result<AnyAttribute, Object.Error>(id a1, char a2)
{
  if (a2) {
    outlined consume of Object.Error(a1);
  }
  else {
    swift_release();
  }
}

uint64_t static Utils.getBundleVersion()()
{
  return MEMORY[0x270F21AF8]();
}

uint64_t static Utils.isCoreRIOBundleVersionValid()()
{
  return IsCoreRIOBundleVersionValid();
}

uint64_t closure #1 in static Utils.getDigest(of:salt:length:encoding:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8E778];
  *(_OWORD *)(v4 + 16) = xmmword_23AAB22A0;
  uint64_t v6 = MEMORY[0x263F8E7C0];
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = v6;
  *(unsigned char *)(v4 + 32) = v3;
  uint64_t result = String.init(format:_:)();
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5107_s9RealityIO5UtilsC9getDigest2of4salt6length8encodingSSSgSS_SSSiSS10FoundationE8EncodingVtFZSSs5UInt8VXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SHA256Digest();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
  uint64_t v7 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v35 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  uint64_t v8 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v10 = v34;
    if (v7)
    {
      uint64_t v11 = v33;
      uint64_t v29 = *(void *)(v33 + 16);
      unint64_t v12 = v34;
      while (v29 != v12)
      {
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_24;
        }
        if (v12 >= *(void *)(v11 + 16)) {
          goto LABEL_25;
        }
        v30[0] = *(unsigned char *)(v11 + v12 + 32);
        v30[1] = 0;
        uint64_t result = closure #1 in static Utils.getDigest(of:salt:length:encoding:)(v30, &v31);
        if (v1)
        {
LABEL_21:
          swift_release();
          goto LABEL_22;
        }
        unint64_t v13 = v10;
        uint64_t v15 = v31;
        uint64_t v14 = v32;
        uint64_t v35 = v8;
        unint64_t v17 = *(void *)(v8 + 16);
        unint64_t v16 = *(void *)(v8 + 24);
        if (v17 >= v16 >> 1)
        {
          uint64_t v28 = v11;
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          uint64_t v11 = v28;
          uint64_t v8 = v35;
        }
        *(void *)(v8 + 16) = v17 + 1;
        uint64_t v18 = v8 + 16 * v17;
        *(void *)(v18 + 32) = v15;
        *(void *)(v18 + 40) = v14;
        ++v12;
        --v7;
        unint64_t v10 = v13;
        if (!v7)
        {
          unint64_t v34 = v12;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      unint64_t v12 = v34;
LABEL_14:
      uint64_t v19 = v33;
      unint64_t v20 = *(void *)(v33 + 16);
      if (v12 == v20)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return v8;
      }
      while (v12 < v20)
      {
        char v21 = *(unsigned char *)(v19 + 32 + v12);
        unint64_t v34 = v12 + 1;
        v30[0] = v21;
        uint64_t result = closure #1 in static Utils.getDigest(of:salt:length:encoding:)(v30, &v31);
        if (v1) {
          goto LABEL_21;
        }
        uint64_t v22 = v31;
        uint64_t v23 = v32;
        uint64_t v35 = v8;
        unint64_t v25 = *(void *)(v8 + 16);
        unint64_t v24 = *(void *)(v8 + 24);
        if (v25 >= v24 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          uint64_t v8 = v35;
        }
        *(void *)(v8 + 16) = v25 + 1;
        uint64_t v26 = v8 + 16 * v25;
        *(void *)(v26 + 32) = v22;
        *(void *)(v26 + 40) = v23;
        unint64_t v12 = v34;
        unint64_t v20 = *(void *)(v19 + 16);
        if (v34 == v20) {
          goto LABEL_22;
        }
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static Utils.relativePath(base:path:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a3;
  unint64_t v27 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  if (BidirectionalCollection<>.starts<A>(with:)())
  {
    uint64_t v26 = a3;
    unint64_t v27 = a4;
    uint64_t v24 = a1;
    uint64_t v25 = a2;
    uint64_t v11 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.range<A>(of:options:range:locale:)();
    unint64_t v13 = v12;
    char v15 = v14;
    outlined destroy of Locale?((uint64_t)v10);
    if (v15) {
      unint64_t v13 = 15;
    }
    swift_bridgeObjectRetain();
    unint64_t v16 = specialized Collection.subscript.getter(v13, a3, a4);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    a3 = MEMORY[0x23ECB9FE0](v16, v18, v20, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a3;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t Utils.deinit()
{
  return v0;
}

uint64_t Utils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  if (v5) {
    RIOPxrSdfLayerReplicationReceive();
  }
  return swift_release();
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t specialized static Utils.getDigest(of:salt:length:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v32 = a5;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for SHA256();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SHA256Digest();
  uint64_t v33 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v34 = a1;
  *((void *)&v34 + 1) = a2;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = a3;
  v16._object = a4;
  String.append(_:)(v16);
  uint64_t v17 = String.data(using:allowLossyConversion:)();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = 0;
  if (v19 >> 60 != 15)
  {
    lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    dispatch thunk of HashFunction.init()();
    uint64_t v31 = v13;
    switch(v19 >> 62)
    {
      case 1uLL:
        if (v17 >> 32 < (int)v17) {
          __break(1u);
        }
        outlined copy of Data._Representation(v17, v19);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v17, v17 >> 32);
        goto LABEL_7;
      case 2uLL:
        uint64_t v21 = *(void *)(v17 + 16);
        uint64_t v22 = *(void *)(v17 + 24);
        outlined copy of Data?(v17, v19);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22);
        swift_release();
        swift_release();
LABEL_7:
        outlined consume of Data?(v17, v19);
        goto LABEL_10;
      case 3uLL:
        *(void *)((char *)&v34 + 6) = 0;
        *(void *)&long long v34 = 0;
        goto LABEL_9;
      default:
        *(void *)&long long v34 = v17;
        WORD4(v34) = v19;
        BYTE10(v34) = BYTE2(v19);
        BYTE11(v34) = BYTE3(v19);
        BYTE12(v34) = BYTE4(v19);
        BYTE13(v34) = BYTE5(v19);
LABEL_9:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        outlined consume of Data?(v17, v19);
LABEL_10:
        dispatch thunk of HashFunction.finalize()();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        *(void *)&long long v34 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5107_s9RealityIO5UtilsC9getDigest2of4salt6length8encodingSSSgSS_SSSiSS10FoundationE8EncodingVtFZSSs5UInt8VXEfU_Tf1cn_n((uint64_t)v15);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
        swift_bridgeObjectRelease();
        if (v32 < 1)
        {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v31);
          outlined consume of Data?(v17, v19);
        }
        else
        {
          uint64_t v23 = specialized Collection.prefix(_:)(v32);
          uint64_t v25 = v24;
          uint64_t v27 = v26;
          uint64_t v29 = v28;
          swift_bridgeObjectRelease();
          uint64_t v20 = MEMORY[0x23ECB9FE0](v23, v25, v27, v29);
          swift_bridgeObjectRelease();
          outlined consume of Data?(v17, v19);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v31);
        }
        break;
    }
  }
  return v20;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t type metadata accessor for Utils()
{
  return self;
}

uint64_t method lookup function for Utils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Utils);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void one-time initialization function for OutputName()
{
  static ActionBuilder.OutputName = 0x736E6F69746341;
  *(void *)algn_268A58168 = 0xE700000000000000;
}

{
  static TimelineTrackAndActionBuilder.OutputName = 0x6B63617254;
  *(void *)algn_268A581E8 = 0xE500000000000000;
}

{
  static TimelineBuilder.OutputName = 0x656E696C656D6954;
  *(void *)algn_268A581F8 = 0xE900000000000073;
}

{
  static TriggerBuilder.OutputName = 0x7372656767697254;
  *(void *)algn_268A58208 = 0xE800000000000000;
}

{
  static BehaviorBuilder.OutputName = 0x726F697661686542;
  unk_268A582F0 = 0xE800000000000000;
}

uint64_t closure #1 in ActionBuilder.inputDescriptors()()
{
  swift_bridgeObjectRetain();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v1 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v2 = (void *)swift_allocObject();
    v2[2] = v1;
    uint64_t v3 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
    uint64_t v4 = specialized Set.init<A>(_:)(v3);
    swift_bridgeObjectRelease();
    return v4;
  }
  else
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x263F8EE88];
  }
}

uint64_t closure #2 in ActionBuilder.inputDescriptors()()
{
  if (!RIOPxrUsdStageHasPrimAtPrimPath()) {
    return 0;
  }
  id v0 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = PrimIfNeeded;
  if (String.count.getter() < 1) {
    id v3 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v3 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v4 = v3;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  uint64_t v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
    swift_release();

    return 0;
  }
  uint64_t v7 = (void *)v6;
  uint64_t v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {
    swift_release();

    return 0;
  }
  uint64_t v9 = (void *)v8;

  id v10 = v9;
  uint64_t v11 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized closure #3 in ActionBuilder.inputDescriptors()()
{
  if (!closure #2 in ActionBuilder.inputDescriptors()()) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v2 = v0;
  uint64_t v3 = v1;
  if (one-time initialization token for actionTypesUsingAffectedObjects != -1) {
    swift_once();
  }
  uint64_t v4 = static ActionBuilder.actionTypesUsingAffectedObjects;
  swift_bridgeObjectRetain();
  char v5 = specialized Set.contains(_:)(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5) {
    uint64_t v6 = closure #1 in ActionBuilder.inputDescriptors()();
  }
  else {
    uint64_t v6 = MEMORY[0x263F8EE88];
  }
  swift_release();
  return v6;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          Swift::String v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized closure #4 in ActionBuilder.inputDescriptors()()
{
  if (closure #2 in ActionBuilder.inputDescriptors()())
  {
    if (v0 == 0x70756F7247 && v1 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        uint64_t v2 = MEMORY[0x263F8EE88];
        goto LABEL_9;
      }
    }
    uint64_t v2 = closure #1 in ActionBuilder.inputDescriptors()();
LABEL_9:
    swift_release();
    return v2;
  }
  return MEMORY[0x263F8EE88];
}

uint64_t specialized closure #5 in ActionBuilder.inputDescriptors()()
{
  if (!closure #2 in ActionBuilder.inputDescriptors()()) {
    return MEMORY[0x263F8EE88];
  }
  if (v0 == 0x746962724FLL && v1 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x263F8EE88];
    }
  }
  if (String.count.getter() < 1) {
    id v3 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v3 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v4 = v3;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x263F8EE88];
  }
  uint64_t v5 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  Swift::Int v6 = (void *)swift_allocObject();
  v6[2] = v5;
  uint64_t v7 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v6, 0);
  if (!*(void *)(v7 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  id v8 = *(id *)(v7 + 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v8;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v11 = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  return v11;
}

uint64_t specialized closure #6 in ActionBuilder.inputDescriptors()()
{
  if (!closure #2 in ActionBuilder.inputDescriptors()()) {
    return MEMORY[0x263F8EE88];
  }
  if (v0 == 0x726F66736E617254 && v1 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x263F8EE88];
    }
  }
  if (String.count.getter() < 1) {
    id v3 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v3 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v4 = v3;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x263F8EE88];
  }
  uint64_t v5 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  Swift::Int v6 = (void *)swift_allocObject();
  v6[2] = v5;
  uint64_t v7 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v6, 0);
  if (!*(void *)(v7 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  id v8 = *(id *)(v7 + 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v8;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v11 = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  return v11;
}

uint64_t specialized closure #7 in ActionBuilder.inputDescriptors()()
{
  if (!closure #2 in ActionBuilder.inputDescriptors()()) {
    return MEMORY[0x263F8EE88];
  }
  if (v0 == 0xD000000000000012 && v1 == 0x800000023AAACF00)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x263F8EE88];
    }
  }
  if (String.count.getter() < 1) {
    id v3 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v3 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v4 = v3;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x263F8EE88];
  }
  uint64_t v5 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  Swift::Int v6 = (void *)swift_allocObject();
  v6[2] = v5;
  uint64_t v7 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v6, 0);
  if (!*(void *)(v7 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  id v8 = *(id *)(v7 + 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v8;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v11 = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  return v11;
}

uint64_t specialized closure #8 in ActionBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2)
{
  uint64_t v19 = *a2;
  uint64_t v2 = closure #2 in ActionBuilder.inputDescriptors()();
  if (!v2) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v5 = v2;
  if (v3 == 0x635365676E616843 && v4 == 0xEB00000000656E65)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x263F8EE88];
    }
  }
  if (String.count.getter() < 1) {
    id v7 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v7 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v8 = v7;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    uint64_t v19 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x263F8EE88];
  }
  uint64_t v9 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  uint64_t v11 = Relationship.targets.getter();
  if (*(void *)(v11 + 16))
  {
    id EmptyPath = *(id *)(v11 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
  }
  outlined consume of Result<AnyAttribute, Object.Error>(v10, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = RIOPxrSdfPathCopyParentPath();
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v13 = v16;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v19 = v13;
  if (specialized static ActionBuilder.findSceneRoot(from:)(v5))
  {
    BOOL v17 = (void *)RIOPxrUsdObjectCopyPath();
    specialized Set._Variant.insert(_:)(&v18, v17);
    swift_release();

    swift_release();
    return v19;
  }
  else
  {

    swift_release();
  }
  return v13;
}

uint64_t ActionBuilder.run(inputs:)(uint64_t a1)
{
  void (*v17)(_OWORD *__return_ptr, long long *);
  uint64_t v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _OWORD v24[2];
  long long v25;
  uint64_t v26;

  uint64_t v2 = v1;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v23 = 0;
LABEL_18:
    *(void *)&uint64_t v25 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v23, 1);
    return specialized ActionBuilder.clear(inputs:)();
  }
  uint64_t v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
LABEL_17:
    uint64_t v23 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_18;
  }
  id v7 = (void *)v6;
  uint64_t v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {

    goto LABEL_17;
  }
  uint64_t v9 = (void *)v8;

  swift_release();
  uint64_t v10 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v9, 0);
  if (one-time initialization token for actionTypeToActionSpecificationsGenerator != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = static ActionBuilder.actionTypeToActionSpecificationsGenerator;
  if (!*((void *)static ActionBuilder.actionTypeToActionSpecificationsGenerator + 2)) {
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    swift_endAccess();
    swift_bridgeObjectRelease();
    return specialized ActionBuilder.clear(inputs:)();
  }
  BOOL v17 = *(void (**)(_OWORD *__return_ptr, long long *))(v14[7] + 16 * v15);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease_n();
  *(void *)&uint64_t v25 = a1;
  v17(v24, &v25);
  swift_release();
  id v18 = *(void *)&v24[0];
  swift_beginAccess();
  uint64_t v19 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v24, &v25);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    uint64_t v21 = static ActionBuilder.OutputName;
    uint64_t v22 = *(void *)algn_268A58168;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    *(void *)&uint64_t v25 = v18;
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)&v25, v21, v22);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for actionTypesUsingAffectedObjects()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2550;
  *(void *)(inited + 32) = 0x6F69647541;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = 0x7A69736168706D45;
  *(void *)(inited + 56) = 0xE900000000000065;
  *(void *)(inited + 64) = 0x65736C75706D49;
  *(void *)(inited + 72) = 0xE700000000000000;
  strcpy((char *)(inited + 80), "LookAtCamera");
  *(unsigned char *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  strcpy((char *)(inited + 96), "Notification");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = 0x746962724FLL;
  *(void *)(inited + 120) = 0xE500000000000000;
  strcpy((char *)(inited + 128), "PlayTimeline");
  *(unsigned char *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(void *)(inited + 144) = 1852403795;
  *(void *)(inited + 152) = 0xE400000000000000;
  strcpy((char *)(inited + 160), "StartAnimation");
  *(unsigned char *)(inited + 175) = -18;
  *(void *)(inited + 176) = 0x726F66736E617254;
  *(void *)(inited + 184) = 0xE90000000000006DLL;
  *(void *)(inited + 192) = 0xD000000000000012;
  *(void *)(inited + 200) = 0x800000023AAACF00;
  *(void *)(inited + 208) = 0x696C696269736956;
  *(void *)(inited + 216) = 0xEA00000000007974;
  Swift::Int v1 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  static ActionBuilder.actionTypesUsingAffectedObjects = v1;
  return result;
}

{
  uint64_t inited;
  Swift::Int v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2680;
  *(void *)(inited + 32) = 0x6564696C6C6F43;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = 0xD000000000000011;
  *(void *)(inited + 56) = 0x800000023AAADA30;
  *(void *)(inited + 64) = 0x7574736547706154;
  *(void *)(inited + 72) = 0xEA00000000006572;
  Swift::Int v1 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  static TriggerBuilder.actionTypesUsingAffectedObjects = v1;
  return result;
}

void *one-time initialization function for actionTypeToActionSpecificationsGenerator()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (_:))>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2560;
  *(void *)(inited + 32) = 0x6F69647541;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0x635365676E616843;
  *(void *)(inited + 72) = 0xEB00000000656E65;
  *(void *)(inited + 80) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x7A69736168706D45;
  *(void *)(inited + 104) = 0xE900000000000065;
  *(void *)(inited + 112) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0x70756F7247;
  *(void *)(inited + 136) = 0xE500000000000000;
  *(void *)(inited + 144) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0x65736C75706D49;
  *(void *)(inited + 168) = 0xE700000000000000;
  *(void *)(inited + 176) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 184) = 0;
  strcpy((char *)(inited + 192), "LookAtCamera");
  *(unsigned char *)(inited + 205) = 0;
  *(_WORD *)(inited + 206) = -5120;
  *(void *)(inited + 208) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 216) = 0;
  strcpy((char *)(inited + 224), "Notification");
  *(unsigned char *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(void *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 248) = 0;
  *(void *)(inited + 256) = 0x746962724FLL;
  *(void *)(inited + 264) = 0xE500000000000000;
  *(void *)(inited + 272) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 280) = 0;
  strcpy((char *)(inited + 288), "PlayTimeline");
  *(unsigned char *)(inited + 301) = 0;
  *(_WORD *)(inited + 302) = -5120;
  *(void *)(inited + 304) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 312) = 0;
  *(void *)(inited + 320) = 1852403795;
  *(void *)(inited + 328) = 0xE400000000000000;
  *(void *)(inited + 336) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 344) = 0;
  strcpy((char *)(inited + 352), "StartAnimation");
  *(unsigned char *)(inited + 367) = -18;
  *(void *)(inited + 368) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 376) = 0;
  *(void *)(inited + 384) = 0x726F66736E617254;
  *(void *)(inited + 392) = 0xE90000000000006DLL;
  *(void *)(inited + 400) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 408) = 0;
  *(void *)(inited + 416) = 0xD000000000000012;
  *(void *)(inited + 424) = 0x800000023AAACF00;
  *(void *)(inited + 432) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 440) = 0;
  *(void *)(inited + 448) = 0x696C696269736956;
  *(void *)(inited + 456) = 0xEA00000000007974;
  *(void *)(inited + 464) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 472) = 0;
  *(void *)(inited + 480) = 1953063255;
  *(void *)(inited + 488) = 0xE400000000000000;
  *(void *)(inited + 496) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(void *)(inited + 504) = 0;
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  static ActionBuilder.actionTypeToActionSpecificationsGenerator = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])(a1, (uint64_t (*)(uint64_t))static ActionBuilder.generateAudioActionSpecifications(inputs:), a2);
}

{
  return specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])(a1, (uint64_t (*)(uint64_t))static ActionBuilder.generateGroupActionSpecifications(inputs:), a2);
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateTransformActionSpecifications(inputs:)(*a1);
  *a2 = result;
  return result;
}

void specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])(uint64_t *a1@<X0>, void *a2@<X8>)
{
  specialized static ActionBuilder.generateChangeSceneActionSpecifications(inputs:)(*a1);
  *a2 = v3;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateImpulseActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateNotificationActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateOrbitActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateSpinActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = implicit closure #15 in variable initialization expression of static ActionBuilder.actionTypeToActionSpecificationsGenerator();
  *a1 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  type metadata accessor for ActionBuilder();
  uint64_t result = a2(v5);
  *a3 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(*a1);
  *a2 = result;
  return result;
}

uint64_t implicit closure #15 in variable initialization expression of static ActionBuilder.actionTypeToActionSpecificationsGenerator()
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v7);

  swift_release();
  Swift::Int v1 = v7;
  if (v8)
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v1, 1);
    return MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v3 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v4 = *(void *)(v3 - 8);
    unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_23AAB22A0;
    __RKWaitActionArguments.init(duration:)();
    (*(void (**)(unint64_t, void, uint64_t))(v4 + 104))(v2 + v5, *MEMORY[0x263F16390], v3);
  }
  return v2;
}

uint64_t ActionBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActionBuilder()
{
  return self;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance ActionBuilder()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_268A58168;
  *(void *)(inited + 32) = static ActionBuilder.OutputName;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x800000023AAACEA0;
  *(unsigned char *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  Swift::Int v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t specialized ActionBuilder.stageSubscription.getter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v23 = (unint64_t)v0;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v23 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v23;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8EE88];
  uint64_t v6 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  swift_retain();
  if (String.count.getter() < 1) {
    id v7 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v7 = (id)RIOPxrTfTokenCreateWithCString();
  }
  char v8 = v7;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v9 = (void *)swift_allocObject();
  v9[4] = v8;
  id v10 = v8;
  id v11 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v10, v5);

  v9[2] = v5;
  v9[3] = v11;
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AAB22C0;
  *(void *)(v12 + 32) = v9;
  unint64_t v23 = v12;
  specialized Array._endMutation()();
  unint64_t v13 = v23;
  swift_retain();
  uint64_t v14 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for PrimDirtyState();
  swift_allocObject();
  uint64_t v15 = PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(v5, v14, 0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_23AAB22C0;
  *(void *)(v16 + 32) = v15;
  unint64_t v23 = v16;
  specialized Array._endMutation()();
  unint64_t v17 = v23;
  swift_retain();
  uint64_t v18 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v17);
  swift_bridgeObjectRelease();
  swift_release();
  swift_allocObject();
  uint64_t v19 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v5, v18, 0);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_23AAB2570;
  *(void *)(v20 + 32) = v6;
  *(void *)(v20 + 40) = v19;
  unint64_t v23 = v20;
  specialized Array._endMutation()();
  uint64_t v21 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v23);
  swift_bridgeObjectRelease();
  swift_release();
  return v21;
}

uint64_t specialized ActionBuilder.inputDescriptors()()
{
  uint64_t v6 = MEMORY[0x263F8EE88];
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = static EntityBuilder.OutputName;
  uint64_t v0 = *(void *)algn_268A4BAA8;
  uint64_t v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  v38[0] = v1;
  v38[1] = v0;
  v38[2] = static EntityBuilder.OutputIdentifier;
  v38[3] = qword_268A584E0;
  v38[4] = specialized closure #3 in ActionBuilder.inputDescriptors();
  v38[5] = 0;
  char v39 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v32, (uint64_t)v38);
  outlined consume of InputDescriptor(v32, *((uint64_t *)&v32 + 1), v33, v34, v35, v36, v37);
  long long v32 = xmmword_23AAB2580;
  uint64_t v33 = 0xD00000000000001FLL;
  uint64_t v34 = 0x800000023AAACEA0;
  uint64_t v35 = specialized closure #4 in ActionBuilder.inputDescriptors();
  uint64_t v36 = 0;
  unsigned __int8 v37 = -127;
  specialized Set._Variant.insert(_:)((uint64_t)&v26, (uint64_t)&v32);
  outlined consume of InputDescriptor(v26, *((uint64_t *)&v26 + 1), v27, v28, v29, v30, v31);
  long long v26 = xmmword_23AAB2590;
  uint64_t v27 = static EntityBuilder.OutputIdentifier;
  uint64_t v28 = qword_268A584E0;
  uint64_t v29 = specialized closure #5 in ActionBuilder.inputDescriptors();
  uint64_t v30 = 0;
  unsigned __int8 v31 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v19, (uint64_t)&v26);
  outlined consume of InputDescriptor(v19, v20, v21, v22, v23, v24, v25);
  uint64_t v19 = 0xD000000000000010;
  uint64_t v20 = 0x800000023AAACEC0;
  uint64_t v21 = static EntityBuilder.OutputIdentifier;
  uint64_t v22 = qword_268A584E0;
  unint64_t v23 = specialized closure #6 in ActionBuilder.inputDescriptors();
  uint64_t v24 = 0;
  unsigned __int8 v25 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v13, (uint64_t)&v19);
  outlined consume of InputDescriptor(v13, *((uint64_t *)&v13 + 1), v14, v15, v16, v17, v18);
  long long v13 = xmmword_23AAB25A0;
  uint64_t v14 = static EntityBuilder.OutputIdentifier;
  uint64_t v15 = qword_268A584E0;
  uint64_t v16 = specialized closure #7 in ActionBuilder.inputDescriptors();
  uint64_t v17 = 0;
  unsigned __int8 v18 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v7, (uint64_t)&v13);
  outlined consume of InputDescriptor(v7, v8, v9, *((uint64_t *)&v9 + 1), v10, v11, v12);
  uint64_t v7 = 0xD000000000000011;
  uint64_t v8 = 0x800000023AAACEE0;
  long long v9 = xmmword_23AAB25B0;
  id v10 = specialized closure #8 in ActionBuilder.inputDescriptors();
  uint64_t v11 = 0;
  unsigned __int8 v12 = -127;
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)&v7);
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t specialized ActionBuilder.clear(inputs:)()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v5, v6);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    uint64_t v3 = static ActionBuilder.OutputName;
    uint64_t v4 = *(void *)algn_268A58168;
    memset(v6, 0, sizeof(v6));
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)v6, v3, v4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void outlined consume of Result<Double, Object.Error>(id a1, char a2)
{
  if (a2) {
    outlined consume of Object.Error(a1);
  }
}

id one-time initialization function for infoID()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightReceiverBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static VirtualEnvironmentProbeComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ModelSortGroupComponentBuilder.infoID = (uint64_t)result;
  return result;
}

id one-time initialization function for realityKitComponentTypeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightReceiverBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static VirtualEnvironmentProbeComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ModelSortGroupComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for colorAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.colorAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.colorAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for intensityAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.intensityAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.intensityAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for realWorldProxyAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.realWorldProxyAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowStructName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowStructName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowStructName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowEnabledAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowEnabledAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowEnabledAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowDistanceAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowDistanceAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowDepthBiasAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowDepthBiasAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowDepthBiasAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowCullModeAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowCullModeAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowCullModeAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowProjectionTypeAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowProjectionTypeAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowZBoundsAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowZBoundsAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowOrthographicScaleAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static DirectionalLightComponentBuilder.shadowOrthographicScaleAttributeName = (uint64_t)result;
  return result;
}

uint64_t DirectionalLightComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  v7[2] = a1;
  uint64_t v8 = v1;
  uint64_t v9 = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in DirectionalLightComponentBuilder.run(inputs:);
  *(void *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_1;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in DirectionalLightComponentBuilder.run(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent.Shadow?);
  MEMORY[0x270FA5388](v3 - 8);
  v122 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DirectionalLightComponent.Shadow();
  uint64_t v123 = *(void *)(v5 - 8);
  uint64_t v124 = v5;
  MEMORY[0x270FA5388](v5);
  v117 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v116 = (uint64_t)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v119 = (uint64_t)&v111 - v10;
  uint64_t v120 = type metadata accessor for DirectionalLightComponent.Shadow.ShadowProjectionType();
  uint64_t v118 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  v115 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v121 = (char *)&v111 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (uint64_t)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DirectionalLightComponent();
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  MEMORY[0x270FA5388](v17);
  v126 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for __EntityRef();
  uint64_t v125 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (unint64_t)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = Inputs.prim.getter();
  unint64_t v23 = (void *)RIOPxrUsdObjectCopyName();
  uint64_t v24 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v28 = (id)static DirectionalLightComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

    goto LABEL_41;
  }
  uint64_t v114 = a2;
  uint64_t v129 = v22;
  uint64_t v29 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v30 = RIOPxrUsdAttributeCopyValue();
  if (!v30)
  {
    swift_bridgeObjectRelease();

    goto LABEL_41;
  }
  unsigned __int8 v31 = (void *)v30;
  uint64_t v32 = RIOPxrVtValueCopyToken();
  if (!v32)
  {
    swift_bridgeObjectRelease();

    goto LABEL_41;
  }
  uint64_t v33 = (void *)v32;

  uint64_t v34 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  if (v35 != 0xD00000000000001BLL || v37 != 0x800000023AAAD010)
  {
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
LABEL_41:
    DirectionalLightComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_13:
  if (one-time initialization token for OutputName != -1) {
LABEL_86:
  }
    swift_once();
  uint64_t v39 = static EntityBuilder.OutputName;
  uint64_t v40 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v39, v40, &v131);
  if (v132)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast())
    {
      uint64_t v41 = v130;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0)
      {
        DirectionalLightComponentBuilder.clear(inputs:)();
        swift_release();
        return swift_release();
      }
      uint64_t v113 = v41;
      Inputs.prim.getter();
      if (one-time initialization token for colorAttributeName != -1) {
        swift_once();
      }
      id v42 = (id)static DirectionalLightComponentBuilder.colorAttributeName;
      uint64_t v43 = specialized Prim.attributeValue<A>(of:type:)();
      uint64_t v45 = v44;
      char v47 = v46;

      swift_release();
      v48.i32[0] = 0;
      v49.i32[0] = v47 & 1;
      int8x16_t v50 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v49, v48), 0);
      v49.i64[0] = v43;
      v49.i64[1] = v45;
      int8x16_t v131 = vbslq_s8(v50, v49, (int8x16_t)xmmword_23AAB25F0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      lazy protocol witness table accessor for type Float and conformance Float();
      uint64_t v51 = (void *)SIMD3<>.cgColor.getter();
      Inputs.prim.getter();
      if (one-time initialization token for intensityAttributeName != -1) {
        swift_once();
      }
      id v52 = (id)static DirectionalLightComponentBuilder.intensityAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for realWorldProxyAttributeName != -1) {
        swift_once();
      }
      id v53 = (id)static DirectionalLightComponentBuilder.realWorldProxyAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      *(unsigned char *)(v114 + 17) = 1;
      type metadata accessor for Entity();
      uint64_t v54 = MEMORY[0x263F8DD08];
      __AssetRef.__as<A>(_:)();
      uint64_t v132 = v54;
      static __EntityRef.__fromCore(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v131);
      uint64_t v55 = static Entity.__fromCore(_:)();
      (*(void (**)(unint64_t, uint64_t))(v125 + 8))(v21, v19);
      id v56 = v51;
      uint64_t v57 = (uint64_t)v126;
      id v112 = v56;
      DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)();
      uint64_t v58 = v127;
      uint64_t v59 = v128;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v16, v57, v128);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v16, 0, 1, v59);
      v60 = (void (*)(int8x16_t *, void))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v60(&v131, 0);
      specialized Builder.addComponent<A>(component:)(v57);
      unint64_t v61 = Prim.children.getter();
      unint64_t v21 = v61;
      if (v61 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        if (v25) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v25 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v25)
        {
LABEL_25:
          uint64_t v111 = v55;
          type metadata accessor for RIOPxrTfTokenRef(0);
          uint64_t v16 = 4;
          uint64_t v27 = &unk_268A58000;
          while (1)
          {
            uint64_t v62 = v16 - 4;
            if ((v21 & 0xC000000000000001) != 0)
            {
              uint64_t v63 = MEMORY[0x23ECBA630](v16 - 4, v21);
              uint64_t v19 = v16 - 3;
              if (__OFADD__(v62, 1)) {
                goto LABEL_85;
              }
            }
            else
            {
              uint64_t v63 = swift_retain();
              uint64_t v19 = v16 - 3;
              if (__OFADD__(v62, 1))
              {
LABEL_85:
                __break(1u);
                goto LABEL_86;
              }
            }
            uint64_t v125 = v63;
            v64 = (void *)RIOPxrUsdObjectCopyName();
            if (one-time initialization token for shadowStructName != -1) {
              swift_once();
            }
            v65 = (void *)static DirectionalLightComponentBuilder.shadowStructName;
            lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
            id v66 = v65;
            char v67 = static _CFObject.== infix(_:_:)();

            if (v67) {
              break;
            }
            swift_release();
            ++v16;
            if (v19 == v25) {
              goto LABEL_95;
            }
          }
          swift_bridgeObjectRelease_n();
          if (one-time initialization token for shadowEnabledAttributeName != -1) {
            swift_once();
          }
          id v70 = (id)static DirectionalLightComponentBuilder.shadowEnabledAttributeName;
          char v71 = specialized Prim.attributeValue<A>(of:type:)();

          if (v71 == 2 || (v71 & 1) == 0)
          {
            swift_release();
            goto LABEL_96;
          }
          if (one-time initialization token for shadowDistanceAttributeName != -1) {
            swift_once();
          }
          id v72 = (id)static DirectionalLightComponentBuilder.shadowDistanceAttributeName;
          unint64_t v73 = specialized Prim.attributeValue<A>(of:type:)();

          if ((v73 & 0x100000000) != 0) {
            float v74 = 5.0;
          }
          else {
            float v74 = *(float *)&v73;
          }
          if (one-time initialization token for shadowDepthBiasAttributeName != -1) {
            swift_once();
          }
          id v75 = (id)static DirectionalLightComponentBuilder.shadowDepthBiasAttributeName;
          specialized Prim.attributeValue<A>(of:type:)();

          if (one-time initialization token for shadowZBoundsAttributeName != -1) {
            swift_once();
          }
          id v76 = (id)static DirectionalLightComponentBuilder.shadowZBoundsAttributeName;
          uint64_t v77 = specialized Prim.attributeValue<A>(of:type:)();
          char v79 = v78;

          if (one-time initialization token for shadowOrthographicScaleAttributeName != -1) {
            swift_once();
          }
          id v80 = (id)static DirectionalLightComponentBuilder.shadowOrthographicScaleAttributeName;
          unint64_t v81 = specialized Prim.attributeValue<A>(of:type:)();

          if ((v81 & 0x100000000) != 0) {
            float v82 = 1.0;
          }
          else {
            float v82 = *(float *)&v81;
          }
          if (one-time initialization token for shadowProjectionTypeAttributeName != -1) {
            swift_once();
          }
          id v83 = (id)static DirectionalLightComponentBuilder.shadowProjectionTypeAttributeName;
          uint64_t v84 = specialized Prim.attributeValue<A>(of:type:)();
          uint64_t v86 = v85;

          v87 = v121;
          if (v86)
          {
            if (v84 == 0x6465786946 && v86 == 0xE500000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_71:
              v88.i32[0] = 0;
              v89.i32[0] = v79 & 1;
              *(int8x8_t *)v87 = vbsl_s8(vdup_lane_s8(vceq_s8(v89, v88), 0), (int8x8_t)v77, (int8x8_t)0x412000003C23D70ALL);
              *((float *)v87 + 2) = v82;
              v91 = (unsigned int *)MEMORY[0x263F162C0];
              goto LABEL_73;
            }
            char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v90) {
              goto LABEL_71;
            }
          }
          *(float *)v87 = v74;
          v91 = (unsigned int *)MEMORY[0x263F162C8];
LABEL_73:
          uint64_t v92 = v119;
          (*(void (**)(char *, void, uint64_t))(v118 + 104))(v87, *v91, v120);
          if (one-time initialization token for shadowCullModeAttributeName != -1) {
            swift_once();
          }
          id v93 = (id)static DirectionalLightComponentBuilder.shadowCullModeAttributeName;
          uint64_t v94 = specialized Prim.attributeValue<A>(of:type:)();
          uint64_t v96 = v95;

          if (v96)
          {
            if (v94 == 1801675074 && v96 == 0xE400000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v97 = (unsigned int *)MEMORY[0x263F167C8];
LABEL_80:
              uint64_t v98 = *v97;
              uint64_t v99 = type metadata accessor for MaterialParameterTypes.FaceCulling();
              uint64_t v100 = *(void *)(v99 - 8);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 104))(v92, v98, v99);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v92, 0, 1, v99);
LABEL_93:
              uint64_t v103 = v118;
              uint64_t v104 = v120;
              (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v115, v121, v120);
              outlined init with copy of MaterialParameterTypes.FaceCulling?(v92, v116);
              uint64_t v105 = (uint64_t)v117;
              DirectionalLightComponent.Shadow.init(shadowProjection:depthBias:cullMode:)();
              v107 = v122;
              uint64_t v106 = v123;
              uint64_t v108 = v124;
              (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v105, v124);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v107, 0, 1, v108);
              v109 = (void (*)(int8x16_t *, void))dispatch thunk of Entity.components.modify();
              Entity.ComponentSet.subscript.setter();
              v109(&v131, 0);
              specialized Builder.addComponent<A>(component:)(v105);
              swift_release();

              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v105, v108);
              outlined destroy of Any?(v119, &demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
              (*(void (**)(char *, uint64_t))(v103 + 8))(v121, v104);
              return (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v126, v128);
            }
            if (v94 == 0x746E6F7246 && v96 == 0xE500000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v97 = (unsigned int *)MEMORY[0x263F167D8];
              goto LABEL_80;
            }
            if (v94 == 1701736270 && v96 == 0xE400000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_91:
              v97 = (unsigned int *)MEMORY[0x263F167D0];
              goto LABEL_80;
            }
            char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v101) {
              goto LABEL_91;
            }
          }
          uint64_t v102 = type metadata accessor for MaterialParameterTypes.FaceCulling();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v92, 1, 1, v102);
          goto LABEL_93;
        }
      }
LABEL_95:
      swift_bridgeObjectRelease_n();
LABEL_96:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v122, 1, 1, v124);
      v110 = (void (*)(int8x16_t *, void))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v110(&v131, 0);
      swift_release();

      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v126, v128);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v131, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for lightComponent != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_23AAB22A0;
  *(void *)(v68 + 56) = MEMORY[0x263F8D310];
  *(void *)(v68 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v68 + 32) = v25;
  *(void *)(v68 + 40) = v27;
  os_log(_:dso:log:type:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t DirectionalLightComponentBuilder.clear(inputs:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent.Shadow?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __EntityRef();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v11 = static EntityBuilder.OutputName;
  uint64_t v12 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v11, v12, &v20);
  if (!v21)
  {
    outlined destroy of Any?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 17) & 1) == 0) {
    return swift_release();
  }
  type metadata accessor for Entity();
  uint64_t v13 = MEMORY[0x263F8DD08];
  __AssetRef.__as<A>(_:)();
  uint64_t v21 = v13;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
  static Entity.__fromCore(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = type metadata accessor for DirectionalLightComponent();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
  uint64_t v15 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v15(&v20, 0);
  uint64_t v16 = type metadata accessor for DirectionalLightComponent.Shadow();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v3, 1, 1, v16);
  uint64_t v17 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v17(&v20, 0);
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)(v0 + 17) = 0;
  return result;
}

uint64_t DirectionalLightComponentBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DirectionalLightComponentBuilder()
{
  return self;
}

uint64_t specialized DirectionalLightComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for realityKitComponentTypeName != -1) {
    swift_once();
  }
  unint64_t v9 = static DirectionalLightComponentBuilder.realityKitComponentTypeName;
  id v0 = (id)static DirectionalLightComponentBuilder.realityKitComponentTypeName;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v9;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v9 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized DirectionalLightComponentBuilder.inputDescriptors()()
{
  uint64_t v7 = MEMORY[0x263F8EE88];
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = static EntityBuilder.OutputName;
  uint64_t v0 = *(void *)algn_268A4BAA8;
  uint64_t v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  v14[0] = v1;
  v14[1] = v0;
  v14[2] = static EntityBuilder.OutputIdentifier;
  v14[3] = qword_268A584E0;
  v14[4] = 0;
  v14[5] = 0;
  char v15 = 112;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v8, (uint64_t)v14);
  outlined consume of InputDescriptor(v8, *((uint64_t *)&v8 + 1), v9, v10, v11, v12, v13);
  if (String.count.getter() < 1) {
    id v3 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v3 = (id)RIOPxrTfTokenCreateWithCString();
  }
  long long v8 = xmmword_23AAB2600;
  uint64_t v9 = 0xD000000000000020;
  uint64_t v10 = 0x800000023AAACFC0;
  uint64_t v11 = v3;
  uint64_t v12 = 1;
  unsigned __int8 v13 = 32;
  specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)&v8);
  outlined consume of InputDescriptor(v5[0], v5[1], v5[2], v5[3], (void *)v5[4], v5[5], v6);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t partial apply for closure #1 in DirectionalLightComponentBuilder.run(inputs:)()
{
  return closure #1 in DirectionalLightComponentBuilder.run(inputs:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_23A9B76F4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

uint64_t outlined init with copy of MaterialParameterTypes.FaceCulling?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (a3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v7 = i - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x23ECBA630](i - 4, a3);
          uint64_t v9 = i - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a3 + 8 * i);
          swift_retain();
          uint64_t v9 = i - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        uint64_t v14 = v8;
        a1(&v13, &v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        uint64_t v10 = swift_release();
        if (v13)
        {
          MEMORY[0x23ECBA100](v10);
          if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return v15;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AnimationResourceC04animG0_Si11trackNumbertG_AHs5NeverOTg504_s10d5Kit17fg42CSiACIggyo_AC04animD0_Si11trackNumbertACs5K104OIegnrzr_TR03_s9a60IO15TimelineBuilderC3run6inputsyAA6InputsC_tFyyXEfU_0A3Kit17cd7CAJ_SitQ3U3_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 16;
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

uint64_t one-time initialization function for timeline()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.timeline = result;
  return result;
}

id one-time initialization function for timingFunction()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ToolsFoundations.Token.timingFunction = (uint64_t)result;
  return result;
}

id one-time initialization function for targetPathAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ToolsFoundations.Token.targetPathAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for transformMode()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ToolsFoundations.Token.transformMode = (uint64_t)result;
  return result;
}

id one-time initialization function for pivotEntity()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ToolsFoundations.Token.pivotEntity = (uint64_t)result;
  return result;
}

id one-time initialization function for realityKitStruct()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ToolsFoundations.Token.realityKitStruct = (uint64_t)result;
  return result;
}

uint64_t closure #1 in TimelineTrackAndActionBuilder.stageSubscription.getter()
{
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  unint64_t v14 = static TimelineConstants.Timeline.primType;
  id v0 = (id)static TimelineConstants.Timeline.primType;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  uint64_t v2 = one-time initialization token for primType;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  unint64_t v14 = static TimelineConstants.Track.primType;
  id v3 = (id)static TimelineConstants.Track.primType;
  uint64_t v4 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  uint64_t v5 = one-time initialization token for primType;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  unint64_t v14 = static TimelineConstants.Action.primType;
  id v6 = (id)static TimelineConstants.Action.primType;
  uint64_t v7 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  uint64_t v8 = one-time initialization token for realityKitStruct;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  unint64_t v14 = static ToolsFoundations.Token.realityKitStruct;
  id v9 = (id)static ToolsFoundations.Token.realityKitStruct;
  uint64_t v10 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2660;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v4;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v10;
  unint64_t v14 = inited;
  specialized Array._endMutation()();
  uint64_t v12 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v14);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v12;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance TimelineTrackAndActionBuilder()
{
  uint64_t v0 = closure #1 in TimelineTrackAndActionBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v5 = inited;
  specialized Array._endMutation()();
  uint64_t v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Int protocol witness for Builder.inputDescriptors() in conformance TimelineTrackAndActionBuilder()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  uint64_t v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = static EntityBuilder.OutputIdentifier;
  uint64_t v4 = qword_268A584E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 56) = v4;
  *(unsigned char *)(inited + 80) = 112;
  swift_bridgeObjectRetain();
  Swift::Int v6 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v6;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance TimelineTrackAndActionBuilder()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_268A581E8;
  *(void *)(inited + 32) = static TimelineTrackAndActionBuilder.OutputName;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 0xD000000000000027;
  *(void *)(inited + 56) = 0x800000023AAAD120;
  *(unsigned char *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  Swift::Int v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t closure #1 in TimelineBuilder.inputDescriptors()()
{
  if (!RIOPxrUsdStageHasPrimAtPrimPath()) {
    return MEMORY[0x263F8EE88];
  }
  id v0 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = PrimIfNeeded;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_23AAB24E0;
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static ToolsFoundations.Token.targetPathAttributeName;
  *(void *)(v3 + 32) = static ToolsFoundations.Token.targetPathAttributeName;
  uint64_t v5 = one-time initialization token for pivotEntity;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)static ToolsFoundations.Token.pivotEntity;
  *(void *)(v3 + 40) = static ToolsFoundations.Token.pivotEntity;
  id v8 = v7;
  unint64_t v9 = Prim.descendants.getter();
  uint64_t v10 = specialized Sequence.flatMap<A>(_:)(v9, v3);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v11 = specialized Set.init<A>(_:)(v10);
  swift_bridgeObjectRelease();
  swift_setDeallocating();

  return v11;
}

uint64_t TimelineBuilder.createActions(for:inputs:)(uint64_t a1, void (**a2)(char *, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  id v6 = (void *)static TimelineConstants.Track.primType;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  id v7 = v6;
  char v8 = static _CFObject.== infix(_:_:)();

  uint64_t result = 0;
  if (v8)
  {
    if (String.count.getter() < 1) {
      id v10 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v10 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v11 = v10;
    char v12 = specialized Prim.attributeValue<A>(of:type:)();

    if (v12 == 2 || (v12 & 1) != 0)
    {
      unint64_t v13 = Prim.children.getter();
      swift_retain();
      swift_retain();
      uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO4PrimCG_Say0D3Kit17AnimationResourceCGs5NeverOTg503_s9d57IO15TimelineBuilderC13createActions3for6inputsSay0A3Kit17hi7CGSgAA4F22C_AA6InputsCtFAjMXEfU_AF0mN0CAF0W0CTf1cn_nTf4ngg_n(v13, v3, a2);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v18 = MEMORY[0x263F8EE78];
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          unint64_t v17 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v17);
        }
        swift_bridgeObjectRelease_n();
        return v18;
      }
      else
      {
        swift_bridgeObjectRelease();
        return MEMORY[0x263F8EE78];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TimelineBuilder.timingFunction(for:)(uint64_t a1@<X8>)
{
  unint64_t v2 = Prim.children.getter();
  uint64_t v3 = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_42:
    swift_bridgeObjectRelease_n();
LABEL_43:
    uint64_t v28 = type metadata accessor for AnimationTimingFunction();
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
    uint64_t v25 = v28;
    uint64_t v26 = a1;
    uint64_t v27 = 1;
LABEL_44:
    v24(v26, v27, 1, v25);
    return;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_42;
  }
LABEL_3:
  type metadata accessor for RIOPxrTfTokenRef(0);
  uint64_t v6 = v5;
  uint64_t v7 = 4;
  while (1)
  {
    uint64_t v8 = v7 - 4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      MEMORY[0x23ECBA630](v7 - 4, v3);
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v8, 1)) {
        goto LABEL_32;
      }
    }
    else
    {
      swift_retain();
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    id v10 = (void *)RIOPxrUsdObjectCopyName();
    if (one-time initialization token for timingFunction != -1) {
      swift_once();
    }
    uint64_t v11 = (void *)static ToolsFoundations.Token.timingFunction;
    lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
    id v12 = v11;
    char v13 = static _CFObject.== infix(_:_:)();

    if (v13) {
      break;
    }
    swift_release();
    ++v7;
    if (v9 == v4) {
      goto LABEL_42;
    }
  }
  swift_bridgeObjectRelease_n();
  if (String.count.getter() < 1) {
    id v14 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v14 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v15 = v14;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    goto LABEL_43;
  }
  uint64_t v16 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v17 = RIOPxrUsdAttributeCopyValue();
  if (!v17)
  {
    swift_release();

    goto LABEL_43;
  }
  uint64_t v18 = (void *)v17;
  uint64_t v19 = RIOPxrVtValueCopyToken();
  if (!v19)
  {
    swift_release();

    goto LABEL_43;
  }
  long long v20 = (void *)v19;

  id v40 = v20;
  uint64_t v21 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v22;

  if (v3 == 0x746C7561666564 && v6 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static AnimationTimingFunction.default.getter();
LABEL_24:

    swift_release();
    uint64_t v23 = type metadata accessor for AnimationTimingFunction();
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
    uint64_t v25 = v23;
    uint64_t v26 = a1;
    uint64_t v27 = 0;
    goto LABEL_44;
  }
  if (v3 == 0x6E4965736165 && v6 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static AnimationTimingFunction.easeIn.getter();
    goto LABEL_24;
  }
LABEL_33:
  if (v3 == 0x754F6E4965736165 && v6 == 0xE900000000000074
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static AnimationTimingFunction.easeInOut.getter();
    goto LABEL_24;
  }
  if (v3 == 0x74754F65736165 && v6 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static AnimationTimingFunction.easeOut.getter();
    goto LABEL_24;
  }
  if (v3 == 0x7261656E696CLL && v6 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static AnimationTimingFunction.linear.getter();
    goto LABEL_24;
  }
  if (v3 == 0x7A65426369627563 && v6 == 0xEB00000000726569)
  {
    swift_bridgeObjectRelease();
LABEL_55:
    if (String.count.getter() < 1) {
      id v30 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v30 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v32 = v30;
    specialized Prim.attributeValue<A>(of:type:)();

    if (String.count.getter() < 1) {
      id v33 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v33 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v34 = v33;
    specialized Prim.attributeValue<A>(of:type:)();

    __asm { FMOV            V2.2S, #1.0 }
    static AnimationTimingFunction.cubicBezier(controlPoint1:controlPoint2:)();
    goto LABEL_24;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v29) {
    goto LABEL_55;
  }
  uint64_t v31 = type metadata accessor for AnimationTimingFunction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a1, 1, 1, v31);
  swift_release();
}

uint64_t TimelineBuilder.transformMode(for:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v65 - v8);
  unint64_t v10 = Prim.children.getter();
  unint64_t v11 = v10;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_3;
    }
LABEL_51:
    swift_bridgeObjectRelease_n();
    goto LABEL_52;
  }
  uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_51;
  }
LABEL_3:
  uint64_t v66 = a1;
  char v67 = v9;
  v65 = v6;
  uint64_t v68 = a2;
  type metadata accessor for RIOPxrTfTokenRef(0);
  uint64_t v14 = v13;
  uint64_t v15 = 4;
  while (1)
  {
    uint64_t v16 = v15 - 4;
    if ((v11 & 0xC000000000000001) != 0)
    {
      MEMORY[0x23ECBA630](v15 - 4, v11);
      uint64_t v17 = v15 - 3;
      if (__OFADD__(v16, 1)) {
        goto LABEL_34;
      }
    }
    else
    {
      swift_retain();
      uint64_t v17 = v15 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    uint64_t v18 = (void *)RIOPxrUsdObjectCopyName();
    if (one-time initialization token for transformMode != -1) {
      swift_once();
    }
    uint64_t v19 = (void *)static ToolsFoundations.Token.transformMode;
    lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
    id v20 = v19;
    char v21 = static _CFObject.== infix(_:_:)();

    if (v21) {
      break;
    }
    swift_release();
    ++v15;
    if (v17 == v12)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease_n();
  if (String.count.getter() < 1) {
    id v22 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v22 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v23 = v22;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

LABEL_29:
    a2 = v68;
LABEL_52:
    static FromToByAction.TransformMode.default.getter();
    goto LABEL_53;
  }
  uint64_t v24 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v25 = RIOPxrUsdAttributeCopyValue();
  if (!v25)
  {
    swift_release();

    goto LABEL_29;
  }
  uint64_t v26 = (void *)v25;
  uint64_t v27 = RIOPxrVtValueCopyToken();
  if (!v27)
  {
    swift_release();

    goto LABEL_29;
  }
  uint64_t v28 = (void *)v27;

  unint64_t v11 = v28;
  char v29 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v30;

  if (v12 == 0x746E65726170 && v14 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {

    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v31 = (unsigned int *)MEMORY[0x263F16658];
    goto LABEL_24;
  }
  if (v12 == 0x6C61636F6CLL && v14 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {

    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v31 = (unsigned int *)MEMORY[0x263F16648];
LABEL_24:
    uint64_t v32 = *v31;
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
    char v67 = *(void (***)(uint64_t, uint64_t, uint64_t))(v33 - 8);
    uint64_t v34 = v68;
    v67[13](v68, v32, v33);
LABEL_25:
    uint64_t v35 = v67[7];
    uint64_t v36 = v34;
    uint64_t v37 = v33;
    goto LABEL_54;
  }
LABEL_35:
  if (v12 == 0x65766974616C6572 && v14 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (String.count.getter() < 1) {
      id v38 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v38 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v39 = v38;
    if (RIOPxrUsdPrimHasRelationship())
    {
      uint64_t v40 = RIOPxrUsdPrimCopyRelationship();

      type metadata accessor for Relationship();
      uint64_t v41 = (void *)swift_allocObject();
      v41[2] = v40;
      uint64_t v42 = Relationship.targets.getter();
      outlined consume of Result<AnyAttribute, Object.Error>(v41, 0);
      if (*(void *)(v42 + 16))
      {
        id v43 = *(id *)(v42 + 32);
        swift_bridgeObjectRelease();
        v69 = v43;
        id v44 = v43;
        uint64_t v45 = (uint64_t)v67;
        TimelineBuilder.createBindPath(from:inputs:)(&v69, v66, (uint64_t)v67);

        uint64_t v52 = (uint64_t)v65;
        outlined init with copy of TimelineBuilder.BindPathWrapper(v45, (uint64_t)v65);
        uint64_t v53 = type metadata accessor for BindTarget.EntityPath();
        uint64_t v54 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53) == 1)
        {
          uint64_t v55 = v68;
          static ActionEntityResolution.sourceEntity.getter();

          swift_release();
          outlined destroy of TimelineBuilder.BindPathWrapper(v45);
          uint64_t v56 = *MEMORY[0x263F16660];
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
          uint64_t v58 = *(void *)(v57 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 104))(v55, v56, v57);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
        }
        else
        {
          outlined destroy of TimelineBuilder.BindPathWrapper(v45);

          swift_release();
          uint64_t v59 = v68;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v68, v52, v53);
          uint64_t v60 = *MEMORY[0x263F167C0];
          uint64_t v61 = type metadata accessor for ActionEntityResolution();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v59, v60, v61);
          uint64_t v62 = *MEMORY[0x263F16660];
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
          uint64_t v64 = *(void *)(v63 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 104))(v59, v62, v63);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v59, 0, 1, v63);
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {

      v69 = 0;
      lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
      swift_willThrowTypedImpl();
      outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    }
    uint64_t v46 = v68;
    static FromToByAction.TransformMode.default.getter();

    swift_release();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 0, 1, v47);
  }
  if (v12 == 0x656E656373 && v14 == 0xE500000000000000)
  {

    swift_release();
    swift_bridgeObjectRelease();
LABEL_59:
    uint64_t v51 = *MEMORY[0x263F16650];
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
    char v67 = *(void (***)(uint64_t, uint64_t, uint64_t))(v33 - 8);
    uint64_t v34 = v68;
    v67[13](v68, v51, v33);
    goto LABEL_25;
  }
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v50)
  {

    swift_release();
    goto LABEL_59;
  }
  a2 = v68;
  static FromToByAction.TransformMode.default.getter();

  swift_release();
LABEL_53:
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56);
  uint64_t v37 = v49;
  uint64_t v36 = a2;
LABEL_54:
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v35)(v36, 0, 1, v37);
}

uint64_t TimelineBuilder.createBindPath(rootEntity:targetEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v5 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v51 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget.EntityPath?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v46 = (uint64_t)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v45 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v53 = (uint64_t)v45 - v14;
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v45 - v17;
  uint64_t v48 = v6;
  uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  v45[0] = v5;
  uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19;
  uint64_t v55 = v6 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v19)((char *)v45 - v17, 1, 1, v5, v16);
  type metadata accessor for Entity();
  swift_retain();
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t v21 = MEMORY[0x263F16568];
  long long v52 = xmmword_23AAB22A0;
  while (1)
  {
    uint64_t v22 = v21;
    uint64_t v23 = HasHierarchy.parent.getter();
    if (v23)
    {
      uint64_t v56 = a1;
      uint64_t v57 = v23;
      lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode(&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x263F16580]);
      swift_retain();
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      if (v24) {
        break;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = v52;
    *(void *)(v25 + 32) = dispatch thunk of Entity.name.getter();
    *(void *)(v25 + 40) = v26;
    uint64_t v57 = v25;
    specialized Array.append<A>(contentsOf:)(v20);
    uint64_t v20 = v57;
    uint64_t v21 = v22;
    uint64_t v27 = HasHierarchy.parent.getter();
    if (!v27) {
      break;
    }
    uint64_t v28 = v27;
    swift_release();
    a2 = v28;
  }
  v45[1] = a2;
  uint64_t v29 = *(void *)(v20 + 16);
  uint64_t v30 = v45[0];
  if (v29)
  {
    *(void *)&long long v52 = v48 + 48;
    uint64_t v49 = (void (**)(char *, uint64_t))(v48 + 8);
    char v50 = (void (**)(char *, uint64_t, uint64_t))(v48 + 32);
    uint64_t v31 = (uint64_t *)(v20 + 40);
    do
    {
      uint64_t v34 = (uint64_t)v18;
      uint64_t v35 = v30;
      uint64_t v37 = *(v31 - 1);
      uint64_t v36 = *v31;
      uint64_t v38 = v34;
      uint64_t v39 = v53;
      outlined init with copy of BindTarget.EntityPath?(v34, v53);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v52)(v39, 1, v35) == 1)
      {
        swift_bridgeObjectRetain();
        outlined destroy of Any?(v39, &demangling cache variable for type metadata for BindTarget.EntityPath?);
        static BindTarget.entity(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v32 = v39;
        uint64_t v33 = v51;
        (*v50)(v51, v32, v35);
        swift_bridgeObjectRetain();
        MEMORY[0x23ECB9850](v37, v36);
        swift_bridgeObjectRelease();
        (*v49)(v33, v35);
      }
      uint64_t v30 = v35;
      v31 += 2;
      uint64_t v18 = (char *)v38;
      outlined destroy of Any?(v38, &demangling cache variable for type metadata for BindTarget.EntityPath?);
      v54((uint64_t)v12, 0, 1, v30);
      outlined init with take of BindTarget.EntityPath?((uint64_t)v12, v38);
      --v29;
    }
    while (v29);
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v40 = v46;
  outlined init with take of BindTarget.EntityPath?((uint64_t)v18, v46);
  uint64_t v41 = v48;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v40, 1, v30) == 1)
  {
    outlined destroy of Any?(v40, &demangling cache variable for type metadata for BindTarget.EntityPath?);
    uint64_t v42 = 1;
    uint64_t v43 = v47;
  }
  else
  {
    uint64_t v43 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v47, v40, v30);
    uint64_t v42 = 0;
  }
  return v54(v43, v42, 1, v30);
}

void TimelineBuilder.createBindPath(from:inputs:)(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __EntityRef?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __EntityRef();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = *a1;
  if (!*a1)
  {
    lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error();
    swift_allocError();
    *uint64_t v29 = 0;
LABEL_14:
    swift_willThrow();
    return;
  }
  uint64_t v37 = v12;
  uint64_t v40 = a3;
  uint64_t v16 = *(void *)(a2 + 56);
  id v41 = v15;
  uint64_t v39 = v16;
  id v17 = (id)RIOBuilderInputsGetImportSession();
  if (!v17)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v18 = v17;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_retain();
  swift_beginAccess();
  uint64_t EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
  if (!EntityAtPrimPath)
  {
    swift_release();
    lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error();
    swift_allocError();
    void *v30 = v15;
    goto LABEL_14;
  }
  uint64_t v21 = EntityAtPrimPath;
  uint64_t v22 = type metadata accessor for Entity();
  uint64_t v43 = MEMORY[0x263F8DD08];
  *(void *)&long long v42 = v21;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v42);
  uint64_t v35 = v22;
  uint64_t v38 = static Entity.__fromCore(_:)();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v10 + 8);
  v36(v14, v9);
  swift_release();
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v23 = static EntityBuilder.OutputName;
  uint64_t v24 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v23, v24, &v42);
  uint64_t v25 = v40;
  if (!v43)
  {
    outlined destroy of Any?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_17;
  }
  uint64_t v26 = v44;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, v26 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity, v9);
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_17:
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for __EntityRef?);
    goto LABEL_18;
  }
  uint64_t v27 = v37;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v37, v8, v9);
  static Entity.__fromCore(_:)();
  uint64_t v28 = HasHierarchy.parent.getter();
  swift_release();
  if (v28)
  {
    TimelineBuilder.createBindPath(rootEntity:targetEntity:)(v28, v38, v25);

    swift_release();
    swift_release();
    v36(v27, v9);
    return;
  }
  v36(v27, v9);
LABEL_18:
  uint64_t v31 = RIOBuilderInputsCopyPrimPath();
  if (v31)
  {
    uint64_t v32 = (void *)v31;
    uint64_t v44 = v31;
    SceneDescriptionFoundations.Path.deletingLastPathComponent()((uint64_t *)&v42);

    uint64_t v33 = v42;
    lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error();
    swift_allocError();
    *uint64_t v34 = v33;
    swift_willThrow();
    swift_release();

    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t TimelineBuilder.createAnimationAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v114 = a2;
  uint64_t v3 = type metadata accessor for PlayAnimationAction();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v97[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for ActionEntityResolution();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v106 = &v97[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  v115 = &v97[-v11];
  uint64_t v12 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v104 = &v97[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v116 = &v97[-v15];
  uint64_t v16 = type metadata accessor for AnimationHandoffType();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v105 = &v97[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = &v97[-v20];
  uint64_t v22 = String.count.getter();
  v107 = v6;
  uint64_t v108 = v8;
  if (v22 < 1) {
    id v23 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v23 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v24 = v23;
  uint64_t v103 = (void *)specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v26 = v25;

  if (!v26) {
    return 0;
  }
  uint64_t v110 = v26;
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v27 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v28 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v28;
    uint64_t v111 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v29, 0);
  }
  else
  {

    uint64_t v118 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    uint64_t v111 = MEMORY[0x263F8EE78];
  }
  uint64_t v31 = String.count.getter();
  uint64_t v100 = v7;
  if (v31 < 1) {
    id v32 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v32 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v33 = v32;
  double v34 = COERCE_DOUBLE(specialized Prim.attributeValue<A>(of:type:)());
  char v36 = v35;

  if (v36) {
    double v37 = 0.0;
  }
  else {
    double v37 = v34;
  }
  if (String.count.getter() < 1) {
    id v38 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v38 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v39 = v38;
  uint64_t v40 = specialized Prim.attributeValue<A>(of:type:)();
  char v42 = v41;

  if (v42) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = v40;
  }
  if (String.count.getter() < 1) {
    id v44 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v44 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v45 = v44;
  v117 = v21;
  int v46 = specialized Prim.attributeValue<A>(of:type:)();

  uint64_t v113 = a1;
  unint64_t v47 = Prim.children.getter();
  unint64_t v48 = v47;
  uint64_t v109 = v16;
  uint64_t v112 = v17;
  uint64_t v102 = v3;
  uint64_t v101 = v4;
  uint64_t v99 = v43;
  int v98 = v46;
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v49) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v49 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v49)
    {
LABEL_28:
      type metadata accessor for RIOPxrTfTokenRef(0);
      unint64_t v50 = v48 & 0xC000000000000001;
      uint64_t v51 = 4;
      while (1)
      {
        uint64_t v52 = v51 - 4;
        if (v50)
        {
          MEMORY[0x23ECBA630](v51 - 4, v48);
          unint64_t v53 = v51 - 3;
          if (__OFADD__(v52, 1)) {
            goto LABEL_81;
          }
        }
        else
        {
          swift_retain();
          unint64_t v53 = v51 - 3;
          if (__OFADD__(v52, 1))
          {
LABEL_81:
            __break(1u);
            goto LABEL_82;
          }
        }
        uint64_t v54 = (void *)RIOPxrUsdObjectCopyName();
        id v55 = String.count.getter() < 1
            ? (id)RIOPxrTfTokenEmpty()
            : (id)RIOPxrTfTokenCreateWithCString();
        uint64_t v56 = v55;
        lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
        char v57 = static _CFObject.== infix(_:_:)();

        if (v57) {
          break;
        }
        swift_release();
        ++v51;
        if (v53 == v49) {
          goto LABEL_39;
        }
      }
      swift_bridgeObjectRelease_n();
      unint64_t v53 = 0xD000000000000012;
      if (String.count.getter() < 1) {
        id v59 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v59 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v60 = v59;
      uint64_t v49 = v114;
      int v61 = specialized Prim.attributeValue<A>(of:type:)();

      if (String.count.getter() < 1) {
        id v62 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v62 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v63 = v62;
      if (RIOPxrUsdPrimHasAttribute())
      {
        uint64_t v64 = (void *)RIOPxrUsdPrimCopyAttribute();
        uint64_t v65 = RIOPxrUsdAttributeCopyValue();
        if (v65)
        {
          uint64_t v66 = (void *)v65;
          LODWORD(v114) = v61;
          char v67 = (void *)RIOPxrVtValueCopyToken();

          unint64_t v68 = 0x800000023AAAD880;
          BOOL v69 = 0x800000023AAAD880 == 0xE700000000000000;
          if (v67)
          {
            id v70 = (void *)RIOPxrTfTokenCopyString();
            uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v68 = v72;

            BOOL v69 = v68 == 0xE700000000000000;
            if (v71 == 0x65736F706D6F43)
            {
              unint64_t v50 = (unint64_t)v115;
              if (v68 == 0xE700000000000000) {
                goto LABEL_56;
              }
LABEL_55:
              if (_stringCompareWithSmolCheck(_:_:expecting:)())
              {
LABEL_56:
                swift_bridgeObjectRelease();
                static AnimationHandoffType.compose.getter();
LABEL_61:
                swift_release();
                uint64_t v58 = v109;
                goto LABEL_62;
              }
              if (v71 == 1886352467 && v68 == 0xE400000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                static AnimationHandoffType.stop.getter();
                goto LABEL_61;
              }
              if (v71 == 0x6563616C706552 && v69 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                static AnimationHandoffType.replace(applyToAllLayers:)();
                goto LABEL_61;
              }
              if (v71 == 0xD000000000000012 && v68 == 0x800000023AAAD8A0)
              {
                swift_bridgeObjectRelease();
                uint64_t v58 = v109;
                goto LABEL_83;
              }
LABEL_82:
              char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              uint64_t v58 = v109;
              if (v96) {
LABEL_83:
              }
                static AnimationHandoffType.snapshotAndReplace(applyToAllLayers:)();
              else {
                static AnimationHandoffType.default.getter();
              }
              swift_release();
              goto LABEL_62;
            }
          }
          else
          {
            uint64_t v71 = 0xD000000000000012;
          }
          unint64_t v50 = (unint64_t)v115;
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v64 = v63;
      }

      unint64_t v68 = 0x800000023AAAD880;
      BOOL v69 = 0x800000023AAAD880 == 0xE700000000000000;
      uint64_t v71 = 0xD000000000000012;
      unint64_t v50 = (unint64_t)v115;
      goto LABEL_55;
    }
  }
LABEL_39:
  swift_bridgeObjectRelease_n();
  static AnimationHandoffType.default.getter();
  uint64_t v58 = v109;
  uint64_t v49 = v114;
  unint64_t v50 = (unint64_t)v115;
  unint64_t v53 = 0xD000000000000012;
LABEL_62:
  uint64_t v73 = String.count.getter();
  uint64_t v74 = v112;
  if (v73 < 1) {
    id v75 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v75 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v76 = v75;
  char v77 = specialized Prim.attributeValue<A>(of:type:)();

  if (*(void *)(v111 + 16))
  {
    char v78 = *(void **)(v111 + 32);
    id v79 = v78;
  }
  else
  {
    char v78 = 0;
  }
  id v80 = v116;
  swift_bridgeObjectRelease();
  uint64_t v118 = v78;
  TimelineBuilder.createBindPath(from:inputs:)(&v118, v49, (uint64_t)v80);
  char v81 = (v77 == 2) | v77;

  float v82 = v104;
  outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v80, (uint64_t)v104);
  uint64_t v83 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v84 = *(void *)(v83 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83) == 1)
  {
    static ActionEntityResolution.sourceEntity.getter();
    uint64_t v85 = v100;
    uint64_t v86 = v108;
  }
  else
  {
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v84 + 32))(v50, v82, v83);
    uint64_t v86 = v108;
    uint64_t v85 = v100;
    (*(void (**)(unint64_t, void, uint64_t))(v108 + 104))(v50, *MEMORY[0x263F167C0], v100);
  }
  uint64_t v118 = v103;
  uint64_t v119 = v110;
  swift_bridgeObjectRetain();
  v87._countAndFlagsBits = v53 + 6;
  v87._object = (void *)0x800000023AAAD260;
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  int8x8_t v88 = v118;
  uint64_t v89 = v119;
  char v90 = v106;
  (*(void (**)(unsigned char *, unint64_t, uint64_t))(v86 + 16))(v106, v50, v85);
  v91 = v105;
  uint64_t v92 = v117;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v74 + 16))(v105, v117, v58);
  uint64_t v93 = v81 & 1;
  uint64_t v94 = (uint64_t)v107;
  MEMORY[0x23ECB9AE0](v88, v89, v90, v99, v98 & 1, v93, v91, v37);
  uint64_t v30 = specialized TimelineBuilder.handleLooping(action:for:)(v94, v113, MEMORY[0x263F16798], MEMORY[0x263F16790]);
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v94, v102);
  (*(void (**)(unsigned char *, uint64_t))(v86 + 8))(v115, v85);
  outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v116);
  (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v92, v58);
  return v30;
}

uint64_t TimelineBuilder.createTimelineAction(for:inputs:)(uint64_t a1, void *a2)
{
  id v69 = a2;
  uint64_t v3 = type metadata accessor for AnimationHandoffType();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PlayAnimationAction();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v63 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for ActionEntityResolution();
  uint64_t v8 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimelineBuilder.BindPathWrapper?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  uint64_t v68 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v59 - v21;
  uint64_t v23 = String.count.getter();
  uint64_t v66 = v8;
  if (v23 < 1) {
    id v24 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v24 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v25 = v24;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    id v70 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  uint64_t v26 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  id v27 = (void *)swift_allocObject();
  v27[2] = v26;
  uint64_t v28 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v27, 0);
  if (!*(void *)(v28 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v60 = a1;
  int v61 = v13;
  uint64_t v29 = v5;
  id v30 = *(id *)(v28 + 32);
  swift_bridgeObjectRelease();
  uint64_t result = RIOBuilderInputsCopyStage();
  if (result)
  {
    id v32 = (void *)result;
    int HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

    if (!HasPrimAtPrimPath)
    {

      return 0;
    }
    id v62 = v30;
    uint64_t result = RIOBuilderInputsCopyStage();
    if (result)
    {
      double v34 = (void *)result;
      id v35 = (id)RIOPxrTfTokenEmpty();
      uint64_t PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

      type metadata accessor for Prim();
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = PrimIfNeeded;
      uint64_t v38 = String.count.getter();
      id v59 = v29;
      if (v38 < 1) {
        id v39 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v39 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v40 = v39;
      char v41 = v61;
      int v61 = (char *)inited;
      char v42 = specialized Prim.attributeValue<A>(of:type:)();

      if (v42 == 2 || (v42 & 1) != 0)
      {
        id v72 = v62;
        SceneDescriptionFoundations.Path.deletingLastPathComponent()((uint64_t *)&v70);
        uint64_t v43 = v70;
        TimelineBuilder.createBindPath(from:inputs:)(&v70, (uint64_t)v69, (uint64_t)v16);
        id v69 = v43;

        (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v16, 0, 1, v17);
        outlined init with take of TimelineBuilder.BindPathWrapper((uint64_t)v16, (uint64_t)v22);
        outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v22, (uint64_t)v19);
        uint64_t v45 = type metadata accessor for BindTarget.EntityPath();
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v19, 1, v45) == 1)
        {
          static ActionEntityResolution.sourceEntity.getter();
          uint64_t v47 = v66;
          uint64_t v48 = v67;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v41, v19, v45);
          uint64_t v47 = v66;
          uint64_t v48 = v67;
          (*(void (**)(char *, void, uint64_t))(v66 + 104))(v41, *MEMORY[0x263F167C0], v67);
        }
        id v49 = v62;
        unint64_t v50 = (void *)RIOPxrSdfPathCopyString();
        uint64_t v51 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v52;

        id v70 = v51;
        uint64_t v71 = v53;
        swift_bridgeObjectRetain();
        v54._object = (void *)0x800000023AAAD260;
        v54._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v54);
        swift_bridgeObjectRelease();
        id v55 = v70;
        uint64_t v56 = v71;
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v10, v41, v48);
        char v57 = v59;
        static AnimationHandoffType.compose.getter();
        uint64_t v58 = (uint64_t)v63;
        MEMORY[0x23ECB9AE0](v55, v56, v10, 0, 1, 1, v57, 0.0);
        uint64_t v44 = specialized TimelineBuilder.handleLooping(action:for:)(v58, v60, MEMORY[0x263F16798], MEMORY[0x263F16790]);

        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v58, v65);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v41, v48);
        outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v22);
        return v44;
      }

      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t default argument 6 of static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t TimelineBuilder.createAudioAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlayAudioAction();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v46[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for ActionEntityResolution();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = &v46[-v12];
  uint64_t v14 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = &v46[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = &v46[-v18];
  uint64_t v20 = String.count.getter();
  uint64_t v50 = v5;
  uint64_t v53 = a2;
  if (v20 < 1) {
    id v21 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v21 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v22 = v21;
  uint64_t v23 = specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v25 = v24;

  if (!v25) {
    return v25;
  }
  uint64_t v26 = String.count.getter();
  uint64_t v48 = v23;
  uint64_t v49 = v4;
  if (v26 < 1) {
    id v27 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v27 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v28 = v27;
  double v29 = COERCE_DOUBLE(specialized Prim.attributeValue<A>(of:type:)());
  char v31 = v30;

  if (v31) {
    double v32 = 0.0;
  }
  else {
    double v32 = v29;
  }
  if (String.count.getter() < 1) {
    id v33 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v33 = (id)RIOPxrTfTokenCreateWithCString();
  }
  double v34 = v33;
  int v35 = specialized Prim.attributeValue<A>(of:type:)();

  BOOL v47 = v35 == 2;
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v36 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    Swift::String v54 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
LABEL_21:
    id v40 = 0;
    goto LABEL_22;
  }
  uint64_t v37 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  uint64_t v38 = (void *)swift_allocObject();
  v38[2] = v37;
  uint64_t v39 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v38, 0);
  if (!*(void *)(v39 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  id v40 = *(id *)(v39 + 32);
  swift_bridgeObjectRelease();
LABEL_22:
  Swift::String v54 = v40;
  TimelineBuilder.createBindPath(from:inputs:)(&v54, v53, (uint64_t)v19);
  LODWORD(v53) = v47 | v35;
  outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v19, (uint64_t)v16);
  uint64_t v41 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v41) == 1)
  {
    static ActionEntityResolution.sourceEntity.getter();
    uint64_t v44 = v51;
    uint64_t v43 = v52;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 32))(v13, v16, v41);
    uint64_t v44 = v51;
    uint64_t v43 = v52;
    (*(void (**)(unsigned char *, void, uint64_t))(v51 + 104))(v13, *MEMORY[0x263F167C0], v52);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v44 + 16))(v10, v13, v43);
  MEMORY[0x23ECB9A30](v10, v48, v25, v53 & 1, v32);
  uint64_t v25 = specialized TimelineBuilder.handleLooping(action:for:)((uint64_t)v7, a1, MEMORY[0x263F166F0], MEMORY[0x263F166E8]);

  (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v7, v49);
  (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v13, v43);
  outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v19);
  return v25;
}

uint64_t TimelineBuilder.createEmphasizeAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = a2;
  uint64_t v105 = a1;
  uint64_t v2 = type metadata accessor for AnimationRepeatMode();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::String v87 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for AnimationFillMode();
  uint64_t v85 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v93 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v99 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for BindTarget();
  uint64_t v98 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v92 = (uint64_t)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EmphasizeAction();
  uint64_t v97 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for EmphasizeAction.EmphasisAnimationStyle();
  uint64_t v12 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v101 = (char *)&v82 - v16;
  uint64_t v17 = type metadata accessor for EmphasizeAction.EmphasisMotionType();
  uint64_t v103 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v104 = (char *)&v82 - v21;
  if (String.count.getter() < 1) {
    id v22 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v22 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v23 = v22;
  uint64_t v88 = v3;
  uint64_t v89 = v2;
  uint64_t v100 = v9;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v24 = v23;
LABEL_14:

    id v95 = 0;
    goto LABEL_17;
  }
  uint64_t v24 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v25 = RIOPxrUsdAttributeCopyValue();
  if (!v25)
  {

    goto LABEL_14;
  }
  uint64_t v26 = (void *)v25;
  uint64_t v84 = v11;
  id v27 = (void *)RIOPxrVtValueCopyToken();

  if (!v27)
  {
    id v95 = 0;
    goto LABEL_16;
  }
  id v28 = v27;
  double v29 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;
  id v95 = v28;

  if (!v32)
  {
LABEL_16:
    uint64_t v11 = v84;
    goto LABEL_17;
  }
  uint64_t v11 = v84;
  if (v30 == 7368560 && v32 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    id v33 = (unsigned int *)MEMORY[0x263F16688];
    goto LABEL_18;
  }
  if (v30 == 0x6B6E696C62 && v32 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v33 = (unsigned int *)MEMORY[0x263F166A0];
    goto LABEL_18;
  }
  if (v30 == 0x65636E756F62 && v32 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v33 = (unsigned int *)MEMORY[0x263F166B8];
    goto LABEL_18;
  }
  if (v30 == 1885957222 && v32 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v33 = (unsigned int *)MEMORY[0x263F16690];
    goto LABEL_18;
  }
  if (v30 == 0x74616F6C66 && v32 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v33 = (unsigned int *)MEMORY[0x263F166A8];
    goto LABEL_18;
  }
  if (v30 == 0x656C6767696ALL && v32 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v33 = (unsigned int *)MEMORY[0x263F166C0];
    goto LABEL_18;
  }
  if ((v30 != 0x65736C7570 || v32 != 0xE500000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v30 == 1852403827 && v32 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_88:
      id v33 = (unsigned int *)MEMORY[0x263F16698];
      goto LABEL_89;
    }
    char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v81) {
      goto LABEL_88;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  id v33 = (unsigned int *)MEMORY[0x263F166B0];
LABEL_89:
  uint64_t v11 = v84;
LABEL_18:
  (*(void (**)(char *, void, uint64_t))(v103 + 104))(v104, *v33, v17);
  if (String.count.getter() < 1) {
    id v34 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v34 = (id)RIOPxrTfTokenCreateWithCString();
  }
  int v35 = v34;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    id v36 = v35;
LABEL_32:

    id v94 = 0;
    goto LABEL_35;
  }
  id v36 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v37 = RIOPxrUsdAttributeCopyValue();
  if (!v37)
  {

    goto LABEL_32;
  }
  uint64_t v38 = (void *)v37;
  uint64_t v83 = v12;
  uint64_t v39 = v17;
  id v40 = v11;
  uint64_t v41 = (void *)RIOPxrVtValueCopyToken();

  if (!v41)
  {
    id v94 = 0;
    goto LABEL_34;
  }
  id v42 = v41;
  uint64_t v43 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;
  id v94 = v42;

  if (!v46)
  {
LABEL_34:
    uint64_t v11 = v40;
    uint64_t v17 = v39;
    uint64_t v12 = v83;
    goto LABEL_35;
  }
  uint64_t v11 = v40;
  if (v44 == 0x6369736162 && v46 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    BOOL v47 = (unsigned int *)MEMORY[0x263F166D0];
    uint64_t v17 = v39;
LABEL_29:
    uint64_t v12 = v83;
    uint64_t v48 = v93;
    goto LABEL_36;
  }
  uint64_t v17 = v39;
  if (v44 == 0x6C756679616C70 && v46 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    BOOL v47 = (unsigned int *)MEMORY[0x263F166D8];
    goto LABEL_29;
  }
  uint64_t v12 = v83;
  if (v44 != 1684826487 || v46 != 0xE400000000000000)
  {
    char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v80) {
      goto LABEL_67;
    }
LABEL_35:
    uint64_t v48 = v93;
    BOOL v47 = (unsigned int *)MEMORY[0x263F166D0];
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
LABEL_67:
  BOOL v47 = (unsigned int *)MEMORY[0x263F166C8];
  uint64_t v48 = v93;
LABEL_36:
  uint64_t v49 = v98;
  uint64_t v51 = v101;
  uint64_t v50 = v102;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v101, *v47, v102);
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v19, v104, v17);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v51, v50);
  EmphasizeAction.init(motionType:style:isAdditive:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  uint64_t v52 = String.count.getter();
  uint64_t v96 = v17;
  if (v52 < 1) {
    id v53 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v53 = (id)RIOPxrTfTokenCreateWithCString();
  }
  Swift::String v54 = v53;
  uint64_t v55 = v99;
  specialized Prim.attributeValue<A>(of:type:)();

  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v56 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v57 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v58 = (void *)swift_allocObject();
    v58[2] = v57;
    uint64_t v59 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v58, 0);
    if (*(void *)(v59 + 16))
    {
      uint64_t v60 = *(void **)(v59 + 32);
      id v61 = v60;
    }
    else
    {
      uint64_t v60 = 0;
    }
    uint64_t v64 = v91;
    swift_bridgeObjectRelease();
    uint64_t v65 = v92;
    closure #1 in TimelineBuilder.createEmphasizeAction(for:inputs:)(v60, v90, v92);
    uint64_t v83 = v12;
    uint64_t v105 = type metadata accessor for AnimationResource();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v55, v65, v64);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v55, 0, 1, v64);
    static AnimationFillMode.forwards.getter();
    uint64_t v66 = v48;
    uint64_t v67 = v88;
    uint64_t v68 = v87;
    uint64_t v69 = v89;
    (*(void (**)(char *, void, uint64_t))(v88 + 104))(v87, *MEMORY[0x263F16760], v89);
    uint64_t v84 = v11;
    id v70 = v66;
    uint64_t v79 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v70, v86);
    outlined destroy of Any?(v99, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v92, v91);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v84, v100);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v101, v102);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v96);
  }
  else
  {

    uint64_t v106 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    id v62 = (void *)swift_allocError();
    *uint64_t v63 = 0;
    uint64_t v71 = v11;
    static os_log_type_t.error.getter();
    uint64_t v72 = v100;
    if (one-time initialization token for timeline != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_23AAB22A0;
    uint64_t v106 = v62;
    id v74 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v75 = String.init<A>(describing:)();
    uint64_t v77 = v76;
    *(void *)(v73 + 56) = MEMORY[0x263F8D310];
    *(void *)(v73 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v73 + 32) = v75;
    *(void *)(v73 + 40) = v77;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v97 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v101, v102);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v96);
    return 0;
  }
  return v79;
}

void closure #1 in TimelineBuilder.createEmphasizeAction(for:inputs:)(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v19 - v15;
  uint64_t v20 = a1;
  TimelineBuilder.createBindPath(from:inputs:)(&v20, a2, (uint64_t)&v19 - v15);
  if (!v3)
  {
    outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v16, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
    {
      outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v16);
      uint64_t v17 = *MEMORY[0x263F165C8];
      uint64_t v18 = type metadata accessor for BindTarget();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a3, v17, v18);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
      BindTarget.EntityPath.transform.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v16);
    }
  }
}

uint64_t TimelineBuilder.createImpulseAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a2;
  uint64_t v2 = type metadata accessor for AnimationFillMode();
  uint64_t v72 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v77 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for AnimationRepeatMode();
  uint64_t v78 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v75 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for ImpulseAction();
  uint64_t v71 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v81 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for BindTarget();
  uint64_t v80 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v83 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ActionEntityResolution();
  uint64_t v84 = *(void *)(v14 - 8);
  uint64_t v85 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v89 = (char *)&v71 - v18;
  uint64_t v19 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v71 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v90 = (uint64_t)&v71 - v26;
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  uint64_t v27 = String.count.getter();
  uint64_t v79 = v2;
  id v74 = v7;
  uint64_t v88 = v9;
  if (v27 < 1) {
    id v28 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v28 = (id)RIOPxrTfTokenCreateWithCString();
  }
  double v29 = v28;
  uint64_t v30 = specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v32 = v31;
  char v34 = v33;

  if (v34)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TimelineBuilder.createImpulseAction(for:inputs:));
  }
  else
  {
    *(void *)&long long v35 = v30;
    *((void *)&v35 + 1) = v32;
  }
  long long v73 = v35;
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v36 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v37 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v38 = (void *)swift_allocObject();
    v38[2] = v37;
    uint64_t v39 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v38, 0);
    if (*(void *)(v39 + 16))
    {
      id v40 = *(void **)(v39 + 32);
      id v41 = v40;
    }
    else
    {
      id v40 = 0;
    }
    uint64_t v44 = v90;
    uint64_t v45 = v87;
    swift_bridgeObjectRelease();
    uint64_t v91 = v40;
    TimelineBuilder.createBindPath(from:inputs:)(&v91, v45, v44);
    outlined init with copy of TimelineBuilder.BindPathWrapper(v44, (uint64_t)v24);
    uint64_t v46 = v81;
    BOOL v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
    if (v47(v24, 1, v10) == 1)
    {
      static ActionEntityResolution.sourceEntity.getter();
      uint64_t v49 = v84;
      uint64_t v48 = v85;
    }
    else
    {
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
      uint64_t v51 = v89;
      v50(v89, v24, v10);
      uint64_t v49 = v84;
      uint64_t v52 = v51;
      uint64_t v48 = v85;
      (*(void (**)(char *, void, uint64_t))(v84 + 104))(v52, *MEMORY[0x263F167C0], v85);
    }
    outlined init with copy of TimelineBuilder.BindPathWrapper(v90, (uint64_t)v21);
    if (v47(v21, 1, v10) == 1)
    {
      uint64_t v53 = v80;
      Swift::String v54 = v83;
      uint64_t v55 = v86;
      (*(void (**)(char *, void, uint64_t))(v80 + 104))(v83, *MEMORY[0x263F165C8], v86);
    }
    else
    {
      uint64_t v56 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v12, v21, v10);
      Swift::String v54 = v83;
      BindTarget.EntityPath.transform.getter();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v10);
      uint64_t v55 = v86;
      uint64_t v53 = v80;
    }
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v16, v89, v48);
    ImpulseAction.init(targetEntity:linearImpulse:)();
    uint64_t v87 = type metadata accessor for AnimationResource();
    uint64_t v57 = (uint64_t)v74;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v74, v54, v55);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v57, 0, 1, v55);
    uint64_t v58 = v78;
    uint64_t v59 = v75;
    (*(void (**)(char *, void, uint64_t))(v78 + 104))(v75, *MEMORY[0x263F16760], v82);
    uint64_t v91 = (void *)MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, MEMORY[0x263F16730]);
    uint64_t v60 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode]);
    id v61 = v77;
    uint64_t v62 = v79;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v63 = v76;
    uint64_t v70 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    (*(void (**)(char *, uint64_t))(v72 + 8))(v61, v62);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v82);
    outlined destroy of Any?(v57, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v88, v63);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v83, v86);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v85);
    outlined destroy of TimelineBuilder.BindPathWrapper(v90);
  }
  else
  {

    uint64_t v91 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    id v42 = (void *)swift_allocError();
    *uint64_t v43 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_23AAB22A0;
    uint64_t v91 = v42;
    id v65 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v66 = String.init<A>(describing:)();
    uint64_t v68 = v67;
    *(void *)(v64 + 56) = MEMORY[0x263F8D310];
    *(void *)(v64 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v64 + 32) = v66;
    *(void *)(v64 + 40) = v68;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return 0;
  }
  return v70;
}

uint64_t TimelineBuilder.createLookAtTransition(for:attributeName:)(uint64_t a1, void **a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for AnimationTimingFunction();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v20[-v11];
  uint64_t v13 = *a2;
  unint64_t v14 = Prim.children.getter();
  id v15 = v13;
  uint64_t v16 = specialized Sequence.first(where:)(v14);
  swift_bridgeObjectRelease();

  if (v16)
  {
    if (String.count.getter() < 1) {
      id v17 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v17 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v19 = v17;
    specialized Prim.attributeValue<A>(of:type:)();

    TimelineBuilder.timingFunction(for:)((uint64_t)v5);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      static AnimationTimingFunction.default.getter();
      outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for AnimationTimingFunction?);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v12, v5, v6);
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v9, v12, v6);
    BillboardAction.Transition.init(duration:timingFunction:)();
    swift_release();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
  }
  else
  {
    static AnimationTimingFunction.default.getter();
    return BillboardAction.Transition.init(duration:timingFunction:)();
  }
}

uint64_t TimelineBuilder.createLookAtAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = a2;
  uint64_t v67 = type metadata accessor for AnimationRepeatMode();
  uint64_t v74 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  long long v73 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for AnimationFillMode();
  uint64_t v64 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v72 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v71 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v7 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v63 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BindTarget();
  uint64_t v69 = *(void *)(v9 - 8);
  uint64_t v70 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v68 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v78 = (uint64_t)&v60 - v15;
  uint64_t v16 = type metadata accessor for BillboardAction();
  uint64_t v76 = *(void *)(v16 - 8);
  uint64_t v77 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v79 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for BillboardAction.Transition();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v60 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v60 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v80 = (char *)&v60 - v29;
  if (String.count.getter() < 1) {
    id v30 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v30 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v31 = v30;
  v81[0] = v30;
  TimelineBuilder.createLookAtTransition(for:attributeName:)(a1, v81);

  if (String.count.getter() < 1) {
    id v32 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v32 = (id)RIOPxrTfTokenCreateWithCString();
  }
  char v33 = v32;
  v81[0] = v32;
  TimelineBuilder.createLookAtTransition(for:attributeName:)(a1, v81);

  char v34 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v34(v24, v80, v18);
  v34(v21, v27, v18);
  BillboardAction.init(transitionIn:transitionOut:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1) {
    id v35 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v35 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v36 = v35;
  unint64_t v37 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v37 & 0x100000000) != 0) {
    int v38 = 0;
  }
  else {
    int v38 = v37;
  }
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v39 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v40 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    id v41 = (void *)swift_allocObject();
    v41[2] = v40;
    uint64_t v42 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v41, 0);
    if (*(void *)(v42 + 16))
    {
      id v43 = *(id *)(v42 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
  else
  {

    v81[0] = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
  }
  id v43 = 0;
LABEL_21:
  v81[0] = v43;
  uint64_t v44 = v78;
  TimelineBuilder.createBindPath(from:inputs:)(v81, v75, v78);
  LODWORD(v75) = v38;
  outlined init with copy of TimelineBuilder.BindPathWrapper(v44, (uint64_t)v13);
  uint64_t v45 = v65;
  int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v65);
  uint64_t v62 = v27;
  uint64_t v61 = v18;
  if (v46 == 1)
  {
    uint64_t v48 = v68;
    uint64_t v47 = v69;
    uint64_t v49 = v70;
    (*(void (**)(char *, void, uint64_t))(v69 + 104))(v68, *MEMORY[0x263F165B8], v70);
  }
  else
  {
    uint64_t v50 = v63;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v63, v13, v45);
    uint64_t v48 = v68;
    BindTarget.EntityPath.billboardBlendFactor.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v50, v45);
    uint64_t v47 = v69;
    uint64_t v49 = v70;
  }
  type metadata accessor for AnimationResource();
  uint64_t v51 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v71, v48, v49);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v51, 0, 1, v49);
  static AnimationFillMode.forwards.getter();
  uint64_t v52 = v67;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, *MEMORY[0x263F16760], v67);
  uint64_t v53 = v77;
  uint64_t v54 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

  uint64_t v55 = v64;
  uint64_t v56 = v62;
  uint64_t v57 = v61;
  (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v52);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v72, v66);
  outlined destroy of Any?(v71, &demangling cache variable for type metadata for BindTarget?);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
  outlined destroy of TimelineBuilder.BindPathWrapper(v78);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v79, v53);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v19 + 8);
  v58(v56, v57);
  v58(v80, v57);
  return v54;
}

uint64_t TimelineBuilder.createOrbitAction(for:inputs:)(uint64_t a1, void (**a2)(char *, uint64_t))
{
  int8x16_t v131 = a2;
  uint64_t v116 = type metadata accessor for AnimationRepeatMode();
  uint64_t v114 = *(void *)(v116 - 8);
  MEMORY[0x270FA5388](v116);
  uint64_t v3 = (char *)&v104 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for AnimationFillMode();
  uint64_t v113 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v5 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v118 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = (void (**)(void, void))type metadata accessor for BindTarget.EntityPath();
  uint64_t v125 = (uint64_t)*(v128 - 1);
  MEMORY[0x270FA5388](v128);
  uint64_t v110 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for BindTarget();
  uint64_t v121 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  uint64_t v120 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OrbitEntityAction();
  uint64_t v122 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ActionEntityResolution();
  uint64_t v130 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v104 - v17;
  uint64_t v19 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v112 = (uint64_t)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v126 = (uint64_t)&v104 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v104 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v132 = (uint64_t)&v104 - v27;
  uint64_t v28 = String.count.getter();
  v115 = v3;
  if (v28 < 1) {
    id v29 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v29 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v30 = v29;
  specialized Prim.attributeValue<A>(of:type:)();

  uint64_t v31 = String.count.getter();
  uint64_t v129 = v18;
  uint64_t v127 = v12;
  if (v31 < 1) {
    id v32 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v32 = (id)RIOPxrTfTokenCreateWithCString();
  }
  char v33 = v32;
  uint64_t v34 = specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v36 = v35;
  char v38 = v37;

  if (v38)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TimelineBuilder.createOrbitAction(for:inputs:));
  }
  else
  {
    *(void *)&long long v39 = v34;
    *((void *)&v39 + 1) = v36;
  }
  long long v124 = v39;
  if (String.count.getter() < 1) {
    id v40 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v40 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v41 = v40;
  int v123 = specialized Prim.attributeValue<A>(of:type:)();

  if (String.count.getter() < 1) {
    id v42 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v42 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v43 = v42;
  int HasAttribute = RIOPxrUsdPrimHasAttribute();
  uint64_t v119 = v5;
  if (HasAttribute)
  {
    uint64_t v45 = (void *)RIOPxrUsdPrimCopyAttribute();
    uint64_t v46 = RIOPxrUsdAttributeCopyValue();
    if (v46)
    {
      uint64_t v47 = (void *)v46;
      uint64_t v48 = (void *)RIOPxrVtValueCopyToken();

      if (v48) {
        goto LABEL_27;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v45 = v43;
  }

LABEL_23:
  if (String.count.getter() < 1) {
    id v49 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v49 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v48 = v49;
LABEL_27:
  if (String.count.getter() < 1) {
    id v50 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v50 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v51 = v50;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  static _CFObject.== infix(_:_:)();

  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1) {
    id v52 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v52 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v53 = v52;
  unint64_t v54 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v54 & 0x100000000) != 0) {
    int v55 = 0;
  }
  else {
    int v55 = v54;
  }
  if (one-time initialization token for pivotEntity != -1) {
    swift_once();
  }
  id v56 = (id)static ToolsFoundations.Token.pivotEntity;
  if (RIOPxrUsdPrimHasRelationship())
  {
    int v107 = v55;
    uint64_t v109 = v10;
    uint64_t v57 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v58 = (void *)swift_allocObject();
    v58[2] = v57;
    uint64_t v59 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v58, 0);
    if (*(void *)(v59 + 16))
    {
      uint64_t v60 = *(void **)(v59 + 32);
      id v61 = v60;
    }
    else
    {
      uint64_t v60 = 0;
    }
    uint64_t v64 = v132;
    swift_bridgeObjectRelease();
    v133 = v60;
    TimelineBuilder.createBindPath(from:inputs:)(&v133, (uint64_t)v131, v64);
    uint64_t v108 = v13;
    outlined init with copy of TimelineBuilder.BindPathWrapper(v64, (uint64_t)v25);
    uint64_t v65 = v125;
    uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, void (**)(void, void)))(v125 + 48);
    uint64_t v67 = v128;
    uint64_t v106 = v125 + 48;
    uint64_t v105 = v66;
    if (v66((uint64_t)v25, 1, v128) == 1)
    {
      uint64_t v68 = v129;
      static ActionEntityResolution.sourceEntity.getter();
      uint64_t v69 = v108;
      uint64_t v70 = v130;
    }
    else
    {
      uint64_t v71 = *(void (**)(char *, char *, void (**)(void, void)))(v65 + 32);
      uint64_t v68 = v129;
      v71(v129, v25, v67);
      uint64_t v70 = v130;
      uint64_t v69 = v108;
      (*(void (**)(char *, void, uint64_t))(v130 + 104))(v68, *MEMORY[0x263F167C0], v108);
    }
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v15, v68, v69);
    uint64_t v72 = v126;
    long long v73 = v127;
    OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:isOrientedToPath:isAdditive:)();
    if (one-time initialization token for targetPathAttributeName != -1) {
      swift_once();
    }
    id v74 = (id)static ToolsFoundations.Token.targetPathAttributeName;
    if (RIOPxrUsdPrimHasRelationship())
    {
      uint64_t v75 = RIOPxrUsdPrimCopyRelationship();

      uint64_t v76 = (void *)swift_allocObject();
      v76[2] = v75;
      uint64_t v77 = Relationship.targets.getter();
      outlined consume of Result<AnyAttribute, Object.Error>(v76, 0);
      if (*(void *)(v77 + 16))
      {
        uint64_t v78 = *(void **)(v77 + 32);
        id v79 = v78;
      }
      else
      {
        uint64_t v78 = 0;
      }
      uint64_t v81 = v120;
      uint64_t v82 = v121;
      swift_bridgeObjectRelease();
      v133 = v78;
      TimelineBuilder.createBindPath(from:inputs:)(&v133, (uint64_t)v131, v72);
      uint64_t v90 = v112;
      outlined init with copy of TimelineBuilder.BindPathWrapper(v72, v112);
      uint64_t v91 = v128;
      if (v105(v90, 1, v128) == 1)
      {
        uint64_t v92 = v117;
        (*(void (**)(char *, void, uint64_t))(v82 + 104))(v81, *MEMORY[0x263F165C8], v117);
        uint64_t v93 = v118;
      }
      else
      {
        uint64_t v94 = v125;
        uint64_t v95 = v90;
        uint64_t v96 = v110;
        (*(void (**)(char *, uint64_t, void (**)(void, void)))(v125 + 32))(v110, v95, v91);
        BindTarget.EntityPath.transform.getter();
        (*(void (**)(char *, void))(v94 + 8))(v96, v91);
        uint64_t v93 = v118;
        uint64_t v92 = v117;
      }
      int8x16_t v131 = (void (**)(char *, uint64_t))type metadata accessor for AnimationResource();
      (*(void (**)(uint64_t, char *, uint64_t))(v82 + 16))(v93, v81, v92);
      uint64_t v97 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56);
      uint64_t v121 = v82 + 56;
      v97(v93, 0, 1, v92);
      static AnimationFillMode.forwards.getter();
      uint64_t v98 = v114 + 104;
      uint64_t v99 = v115;
      uint64_t v100 = v116;
      (*(void (**)(char *, void, uint64_t))(v114 + 104))(v115, *MEMORY[0x263F16760], v116);
      uint64_t v101 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
      uint64_t v102 = (void (**)(char *, uint64_t))(v98 - 96);
      uint64_t v103 = (void (**)(char *, uint64_t))(v113 + 8);
      uint64_t v125 = v121 - 48;
      uint64_t v128 = (void (**)(void, void))(v122 + 8);
      int8x16_t v131 = (void (**)(char *, uint64_t))(v130 + 8);
      uint64_t v88 = v101;

      (*v102)(v99, v100);
      (*v103)(v119, v111);
      outlined destroy of Any?(v118, &demangling cache variable for type metadata for BindTarget?);
      (*(void (**)(char *, uint64_t))v125)(v120, v117);
      outlined destroy of TimelineBuilder.BindPathWrapper(v126);
      (*v128)(v127, v109);
      (*v131)(v129, v108);
      outlined destroy of TimelineBuilder.BindPathWrapper(v132);
      return v88;
    }

    v133 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v62 = (void *)swift_allocError();
    *uint64_t v80 = 0;

    (*(void (**)(char *, uint64_t))(v122 + 8))(v73, v109);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v108);
    outlined destroy of TimelineBuilder.BindPathWrapper(v132);
  }
  else
  {

    v133 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v62 = (void *)swift_allocError();
    *uint64_t v63 = 0;
  }
  static os_log_type_t.error.getter();
  if (one-time initialization token for timeline != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_23AAB22A0;
  v133 = v62;
  id v84 = v62;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v85 = String.init<A>(describing:)();
  uint64_t v87 = v86;
  *(void *)(v83 + 56) = MEMORY[0x263F8D310];
  *(void *)(v83 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v83 + 32) = v85;
  *(void *)(v83 + 40) = v87;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t TimelineBuilder.createSpinAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a2;
  uint64_t v2 = type metadata accessor for AnimationRepeatMode();
  uint64_t v86 = *(void *)(v2 - 8);
  uint64_t v87 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v85 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for AnimationFillMode();
  uint64_t v76 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  id v84 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v83 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v75 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for BindTarget();
  uint64_t v8 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v91 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v74 - v14;
  uint64_t v16 = type metadata accessor for SpinAction();
  uint64_t v89 = *(void *)(v16 - 8);
  uint64_t v90 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v93 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for AnimationTimingFunction();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v94 = (char *)&v74 - v26;
  uint64_t v27 = String.count.getter();
  uint64_t v78 = v12;
  if (v27 < 1) {
    id v28 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v28 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v29 = v28;
  specialized Prim.attributeValue<A>(of:type:)();

  uint64_t v30 = String.count.getter();
  uint64_t v81 = v8;
  if (v30 < 1) {
    id v31 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v31 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v32 = v31;
  uint64_t v33 = specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v35 = v34;
  char v37 = v36;

  if (v37)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TimelineBuilder.createSpinAction(for:inputs:));
  }
  else
  {
    *(void *)&long long v38 = v33;
    *((void *)&v38 + 1) = v35;
  }
  long long v92 = v38;
  TimelineBuilder.timingFunction(for:)((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    static AnimationTimingFunction.default.getter();
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for AnimationTimingFunction?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v94, v20, v21);
  }
  if (String.count.getter() < 1) {
    id v39 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v39 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v40 = v39;
  if (RIOPxrUsdPrimHasAttribute())
  {
    id v41 = (void *)RIOPxrUsdPrimCopyAttribute();
    uint64_t v42 = RIOPxrUsdAttributeCopyValue();
    if (v42)
    {
      id v43 = (void *)v42;
      uint64_t v44 = (void *)RIOPxrVtValueCopyToken();

      if (v44) {
        goto LABEL_27;
      }
      goto LABEL_23;
    }
  }
  else
  {
    id v41 = v40;
  }

LABEL_23:
  if (String.count.getter() < 1) {
    id v45 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v45 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v44 = v45;
LABEL_27:
  if (String.count.getter() < 1) {
    id v46 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v46 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v47 = v46;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  char v48 = static _CFObject.== infix(_:_:)();

  if (v48)
  {
    *(float32x2_t *)&long long v49 = vsub_f32(0, *(float32x2_t *)&v92);
    *((float *)&v49 + 2) = 0.0 - *((float *)&v92 + 2);
    HIDWORD(v49) = 0;
    long long v92 = v49;
  }
  id v50 = v91;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v94, v21);
  SpinAction.init(revolutions:localAxis:timingFunction:isAdditive:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1) {
    id v51 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v51 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v52 = v51;
  unint64_t v53 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v53 & 0x100000000) != 0) {
    int v54 = 0;
  }
  else {
    int v54 = v53;
  }
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v55 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v56 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v57 = (void *)swift_allocObject();
    v57[2] = v56;
    uint64_t v58 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v57, 0);
    if (*(void *)(v58 + 16))
    {
      id v59 = *(id *)(v58 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
  }
  else
  {

    uint64_t v95 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
  }
  id v59 = 0;
LABEL_46:
  uint64_t v95 = v59;
  uint64_t v60 = (uint64_t)v15;
  TimelineBuilder.createBindPath(from:inputs:)(&v95, v88, (uint64_t)v15);
  LODWORD(v92) = v54;
  uint64_t v61 = (uint64_t)v78;
  outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v15, (uint64_t)v78);
  uint64_t v62 = v79;
  uint64_t v63 = v80;
  int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v61, 1, v80);
  uint64_t v74 = v60;
  if (v64 == 1)
  {
    uint64_t v65 = v81;
    uint64_t v66 = v82;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v50, *MEMORY[0x263F165C8], v82);
  }
  else
  {
    uint64_t v67 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v75, v61, v63);
    BindTarget.EntityPath.transform.getter();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v63);
    uint64_t v65 = v81;
    uint64_t v66 = v82;
  }
  type metadata accessor for AnimationResource();
  uint64_t v68 = v83;
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v83, v50, v66);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v68, 0, 1, v66);
  static AnimationFillMode.forwards.getter();
  (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, *MEMORY[0x263F16760], v87);
  uint64_t v69 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

  uint64_t v70 = v77;
  uint64_t v71 = v76;
  uint64_t v72 = v89;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v87);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v84, v70);
  outlined destroy of Any?(v83, &demangling cache variable for type metadata for BindTarget?);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v91, v82);
  outlined destroy of TimelineBuilder.BindPathWrapper(v74);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v93, v90);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v94, v21);
  return v69;
}

uint64_t TimelineBuilder.createEnableAction(for:inputs:enabled:)(uint64_t a1, uint64_t a2, int a3)
{
  LODWORD(v49) = a3;
  uint64_t v53 = type metadata accessor for AnimationFillMode();
  uint64_t v48 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  id v52 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for AnimationRepeatMode();
  uint64_t v50 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  id v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v54 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for SetEntityEnabledAction();
  uint64_t v47 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ActionEntityResolution();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v45 - v21;
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v23 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v24 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v24;
    uint64_t v26 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v25, 0);
    if (*(void *)(v26 + 16))
    {
      uint64_t v27 = *(void **)(v26 + 32);
      id v28 = v27;
    }
    else
    {
      uint64_t v27 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v57 = v27;
    TimelineBuilder.createBindPath(from:inputs:)(&v57, a2, (uint64_t)v22);

    outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v22, (uint64_t)v19);
    uint64_t v31 = type metadata accessor for BindTarget.EntityPath();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v31) == 1)
    {
      static ActionEntityResolution.sourceEntity.getter();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v16, v19, v31);
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v16, *MEMORY[0x263F167C0], v10);
    }
    uint64_t v45 = v10;
    uint64_t v46 = v11;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    SetEntityEnabledAction.init(targetEntity:isEnabled:)();
    uint64_t v49 = type metadata accessor for AnimationResource();
    uint64_t v33 = type metadata accessor for BindTarget();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v54, 1, 1, v33);
    uint64_t v34 = v50;
    uint64_t v35 = v51;
    (*(void (**)(char *, void, uint64_t))(v50 + 104))(v51, *MEMORY[0x263F16760], v56);
    uint64_t v57 = (void *)MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, MEMORY[0x263F16730]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode]);
    uint64_t v36 = v53;
    char v37 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v44 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v36);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v56);
    outlined destroy of Any?(v54, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v55);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v45);
    outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v22);
  }
  else
  {

    uint64_t v57 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    id v29 = (void *)swift_allocError();
    void *v30 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_23AAB22A0;
    uint64_t v57 = v29;
    id v39 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v42 = v41;
    *(void *)(v38 + 56) = MEMORY[0x263F8D310];
    *(void *)(v38 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v38 + 32) = v40;
    *(void *)(v38 + 40) = v42;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return 0;
  }
  return v44;
}

uint64_t TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ActionEntityResolution();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v10 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v11 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v11;
    uint64_t v13 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v12, 0);
    if (*(void *)(v13 + 16))
    {
      uint64_t v14 = *(void **)(v13 + 32);
      id v15 = v14;
    }
    else
    {
      uint64_t v14 = 0;
    }
    swift_bridgeObjectRelease();
    id v28 = v14;
    TimelineBuilder.createBindPath(from:inputs:)(&v28, a2, (uint64_t)v9);
    static ActionEntityResolution.sourceEntity.getter();
    double v24 = specialized TimelineBuilder.startTimeAndDuration(for:)();
    unint64_t v25 = Prim.children.getter();
    MEMORY[0x270FA5388](v25);
    *(&v27 - 4) = (uint64_t)v6;
    *(&v27 - 3) = 0x3FA1111111111111;
    *((double *)&v27 - 2) = v24;
    uint64_t v26 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:), (uint64_t)(&v27 - 6), v25);
    swift_bridgeObjectRelease();

    outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {

    id v28 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v16 = (void *)swift_allocError();
    *uint64_t v17 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_23AAB22A0;
    id v28 = v16;
    id v19 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    *(void *)(v18 + 56) = MEMORY[0x263F8D310];
    *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v18 + 32) = v20;
    *(void *)(v18 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return MEMORY[0x263F8EE78];
  }
  return v26;
}

void closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v54 = type metadata accessor for AnimationFillMode();
  uint64_t v48 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v53 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for AnimationRepeatMode();
  uint64_t v51 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v49 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ActionEntityResolution();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  uint64_t v47 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (String.count.getter() < 1) {
    id v14 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v14 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v15 = v14;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    uint64_t v56 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    uint64_t v24 = 0;
    goto LABEL_21;
  }
  uint64_t v46 = a2;
  uint64_t v16 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  uint64_t v18 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v17, 0);
  if (!*(void *)(v18 + 16))
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = 0;
    a2 = v46;
    goto LABEL_21;
  }
  id v19 = *(id *)(v18 + 32);
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v45[0] = v22;
  v45[1] = v21;

  if (String.count.getter() < 1) {
    id v23 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v23 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v25 = v23;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    uint64_t v56 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
LABEL_16:
    uint64_t v31 = 0;
    unint64_t v33 = 0xE000000000000000;
    goto LABEL_17;
  }
  uint64_t v26 = RIOPxrUsdPrimCopyRelationship();

  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v26;
  uint64_t v28 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v27, 0);
  if (!*(void *)(v28 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  id v29 = *(id *)(v28 + 32);
  swift_bridgeObjectRelease();
  uint64_t v30 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v33 = v32;

LABEL_17:
  uint64_t v34 = v51;
  uint64_t v35 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v50, v8);
  uint64_t v56 = v31;
  unint64_t v57 = v33;
  SetEntityPropertyAction.init(targetEntity:key:value:)();
  uint64_t v51 = type metadata accessor for AnimationResource();
  uint64_t v36 = type metadata accessor for BindTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v7, 1, 1, v36);
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v35, *MEMORY[0x263F16760], v55);
  uint64_t v56 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, MEMORY[0x263F16730]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode]);
  char v37 = v13;
  uint64_t v38 = (uint64_t)v7;
  id v39 = v35;
  uint64_t v40 = v53;
  uint64_t v41 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type SetEntityPropertyAction<String> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  uint64_t v42 = v52;
  id v43 = v58;
  uint64_t v44 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  if (v43)
  {

    (*(void (**)(char *, uint64_t))(v48 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v55);
    outlined destroy of Any?(v38, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v42);
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = v44;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v55);
    outlined destroy of Any?(v38, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v42);
  }
  a2 = v46;
LABEL_21:
  *a2 = v24;
}

uint64_t TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)(char a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 & 1;
  uint64_t v6 = type metadata accessor for AnimationRepeatMode();
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnimationFillMode();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v63 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v70 = (uint64_t)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v14 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v61 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BindTarget();
  uint64_t v68 = *(void *)(v16 - 8);
  uint64_t v69 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v71 = (uint64_t)v60 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v72 = v24;
  uint64_t v73 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v74 = (uint64_t)v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  uint64_t v27 = String.count.getter();
  uint64_t v65 = v8;
  if (v27 < 1) {
    id v28 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v28 = (id)RIOPxrTfTokenCreateWithCString();
  }
  id v29 = v28;
  unint64_t v30 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v30 & 0x100000000) != 0) {
    LODWORD(v30) = 0;
  }
  uint64_t v31 = v74;
  closure #1 in TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)(v3, v5, a3, v74);
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v32 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v60[1] = v30;
    uint64_t v33 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v34 = (void *)swift_allocObject();
    v34[2] = v33;
    uint64_t v35 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v34, 0);
    if (*(void *)(v35 + 16))
    {
      uint64_t v36 = *(void **)(v35 + 32);
      id v37 = v36;
    }
    else
    {
      uint64_t v36 = 0;
    }
    uint64_t v40 = v70;
    swift_bridgeObjectRelease();
    uint64_t v75 = v36;
    uint64_t v41 = v71;
    TimelineBuilder.createBindPath(from:inputs:)(&v75, a3, v71);
    outlined init with copy of TimelineBuilder.BindPathWrapper(v41, (uint64_t)v21);
    uint64_t v50 = v64;
    int v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v21, 1, v64);
    if (v51 == 1)
    {
      uint64_t v52 = v68;
      uint64_t v53 = v69;
      (*(void (**)(char *, void, uint64_t))(v68 + 104))(v18, *MEMORY[0x263F165C8], v69);
    }
    else
    {
      uint64_t v54 = v61;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v61, v21, v50);
      BindTarget.EntityPath.transform.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v54, v50);
      uint64_t v52 = v68;
      uint64_t v53 = v69;
    }
    type metadata accessor for AnimationResource();
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v40, v18, v53);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v40, 0, 1, v53);
    static AnimationFillMode.forwards.getter();
    uint64_t v55 = *MEMORY[0x263F16760];
    uint64_t v64 = (uint64_t)v18;
    unint64_t v57 = v65;
    uint64_t v56 = v66;
    uint64_t v58 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 104))(v65, v55, v67);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type FromToByAction<Transform> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Transform>);
    uint64_t v59 = v72;
    uint64_t v48 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v11, v63);
    outlined destroy of Any?(v70, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v64, v69);
    outlined destroy of TimelineBuilder.BindPathWrapper(v71);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v59);
  }
  else
  {

    uint64_t v75 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v38 = (void *)swift_allocError();
    *id v39 = 0;
    uint64_t v42 = v72;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_23AAB22A0;
    uint64_t v75 = v38;
    id v44 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v45 = String.init<A>(describing:)();
    uint64_t v47 = v46;
    *(void *)(v43 + 56) = MEMORY[0x263F8D310];
    *(void *)(v43 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v43 + 32) = v45;
    *(void *)(v43 + 40) = v47;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v31, v42);
    return 0;
  }
  return v48;
}

uint64_t closure #1 in TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  int v29 = a2;
  uint64_t v30 = a4;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AnimationTimingFunction();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v24 - v19;
  __n128 v26 = specialized TimelineBuilder.transform(for:)();
  long long v27 = v21;
  long long v28 = v22;
  TimelineBuilder.timingFunction(for:)((uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    static AnimationTimingFunction.default.getter();
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for AnimationTimingFunction?);
    if (v29)
    {
LABEL_3:
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
      FromToByAction<>.init(by:timing:isAdditive:)();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    if (v29) {
      goto LABEL_3;
    }
  }
  TimelineBuilder.transformMode(for:inputs:)(v25, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    static FromToByAction.TransformMode.default.getter();
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  char v34 = 1;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
  FromToByAction<>.init(from:to:mode:timing:isAdditive:)();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
}

uint64_t TimelineBuilder.createShowOrHideAction(showOrHide:for:inputs:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v75 = a3;
  uint64_t v4 = type metadata accessor for AnimationRepeatMode();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v72 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnimationFillMode();
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v71 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v70 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v64 = *(void *)(v10 - 8);
  uint64_t v65 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BindTarget();
  uint64_t v69 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v68 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v76 = (uint64_t)&v62 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
  uint64_t v77 = *(void *)(v20 - 8);
  uint64_t v78 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v79 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for AnimationTimingFunction();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  long long v28 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  long long v31 = (char *)&v62 - v30;
  TimelineBuilder.timingFunction(for:)((uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    static AnimationTimingFunction.default.getter();
    outlined destroy of Any?((uint64_t)v24, &demangling cache variable for type metadata for AnimationTimingFunction?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v31, v24, v25);
  }
  LODWORD(v80) = 0;
  BYTE4(v80) = 1;
  float v32 = 0.0;
  if ((a1 & 1) == 0) {
    float v32 = 1.0;
  }
  float v81 = v32;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v31, v25);
  FromToByAction.init(from:to:timing:isAdditive:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1) {
    id v33 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v33 = (id)RIOPxrTfTokenCreateWithCString();
  }
  char v34 = v33;
  unint64_t v35 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v35 & 0x100000000) != 0) {
    LODWORD(v35) = 0;
  }
  if (one-time initialization token for targetPathAttributeName != -1) {
    swift_once();
  }
  id v36 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    int v63 = v35;
    uint64_t v37 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    uint64_t v38 = (void *)swift_allocObject();
    v38[2] = v37;
    uint64_t v39 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v38, 0);
    if (*(void *)(v39 + 16))
    {
      uint64_t v40 = *(void **)(v39 + 32);
      id v41 = v40;
    }
    else
    {
      uint64_t v40 = 0;
    }
    uint64_t v45 = v75;
    uint64_t v44 = v76;
    swift_bridgeObjectRelease();
    uint64_t v80 = v40;
    TimelineBuilder.createBindPath(from:inputs:)(&v80, v45, v44);
    outlined init with copy of TimelineBuilder.BindPathWrapper(v44, (uint64_t)v17);
    uint64_t v56 = v64;
    uint64_t v55 = v65;
    int v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48))(v17, 1, v65);
    uint64_t v62 = v13;
    if (v57 == 1)
    {
      uint64_t v59 = v68;
      uint64_t v58 = v69;
      (*(void (**)(char *, void, uint64_t))(v69 + 104))(v68, *MEMORY[0x263F165C0], v13);
      uint64_t v60 = v13;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v12, v17, v55);
      uint64_t v59 = v68;
      BindTarget.EntityPath.opacity.getter();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v55);
      uint64_t v60 = v62;
      uint64_t v58 = v69;
    }
    type metadata accessor for AnimationResource();
    uint64_t v61 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v70, v59, v60);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v61, 0, 1, v60);
    static AnimationFillMode.forwards.getter();
    (*(void (**)(char *, void, uint64_t))(v73 + 104))(v72, *MEMORY[0x263F16760], v74);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type FromToByAction<Float> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Float>);
    uint64_t v53 = v78;
    uint64_t v51 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    uint64_t v52 = v77;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v71, v67);
    outlined destroy of Any?(v70, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v62);
    outlined destroy of TimelineBuilder.BindPathWrapper(v76);
  }
  else
  {

    uint64_t v80 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    uint64_t v42 = (void *)swift_allocError();
    *uint64_t v43 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_23AAB22A0;
    uint64_t v80 = v42;
    id v47 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v48 = String.init<A>(describing:)();
    uint64_t v50 = v49;
    *(void *)(v46 + 56) = MEMORY[0x263F8D310];
    *(void *)(v46 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v46 + 32) = v48;
    *(void *)(v46 + 40) = v50;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    uint64_t v51 = 0;
    uint64_t v52 = v77;
    uint64_t v53 = v78;
  }
  (*(void (**)(char *, uint64_t))(v52 + 8))(v79, v53);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v25);
  return v51;
}

uint64_t TimelineBuilder.createAction(for:inputs:)(uint64_t a1, void (**a2)(char *, uint64_t))
{
  uint64_t v4 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)static TimelineConstants.Action.primType;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
  id v6 = v5;
  char v7 = static _CFObject.== infix(_:_:)();

  if ((v7 & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  id v8 = String.count.getter() < 1
     ? (id)RIOPxrTfTokenEmpty()
     : (id)RIOPxrTfTokenCreateWithCString();
  uint64_t v9 = v8;
  uint64_t v10 = specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v12 = v11;

  if (!v12) {
    return MEMORY[0x263F8EE78];
  }
  if (String.count.getter() < 1) {
    id v13 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v13 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v14 = v13;
  char v15 = specialized Prim.attributeValue<A>(of:type:)();

  if (v15 != 2 && (v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  if (v10 == 0x6F6974616D696E61 && v12 == 0xE90000000000006ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createAnimationAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
LABEL_18:
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_23AAB22C0;
    *(void *)(v18 + 32) = v17;
    uint64_t v26 = v18;
    specialized Array._endMutation()();
    return v26;
  }
  if (v10 == 0x6F69647561 && v12 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createAudioAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 0x7A69736168706D65 && v12 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createEmphasizeAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 0x656C62616E65 && v12 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = a1;
    uint64_t v21 = (uint64_t)a2;
    int v22 = 1;
    goto LABEL_33;
  }
  if (v10 == 0x656C6261736964 && v12 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = a1;
    uint64_t v21 = (uint64_t)a2;
    int v22 = 0;
LABEL_33:
    uint64_t v16 = TimelineBuilder.createEnableAction(for:inputs:enabled:)(v20, v21, v22);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 0x65736C75706D69 && v12 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createImpulseAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 0x74416B6F6F6CLL && v12 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createLookAtAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 0x746962726FLL && v12 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createOrbitAction(for:inputs:)(a1, a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 1852403827 && v12 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createSpinAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 0x6163696669746F6ELL && v12 == 0xEC0000006E6F6974
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = specialized TimelineBuilder.createNotificationAction(for:inputs:)(a1);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if (v10 == 0x656E696C656D6974 && v12 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = TimelineBuilder.createTimelineAction(for:inputs:)(a1, a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  if ((v10 != 0xD000000000000010 || v12 != 0x800000023AAAD460)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v10 == 0x6F5465766F6DLL && v12 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v23 = 0;
    }
    else
    {
      if ((v10 != 0x794265766F6DLL || v12 != 0xE600000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v10 == 2003789939 && v12 == 0xE400000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          char v24 = 0;
        }
        else
        {
          if (v10 == 1701079400 && v12 == 0xE400000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v25 & 1) == 0) {
              return MEMORY[0x263F8EE78];
            }
          }
          char v24 = 1;
        }
        uint64_t v16 = TimelineBuilder.createShowOrHideAction(showOrHide:for:inputs:)(v24, a1, (uint64_t)a2);
        if (!v16) {
          return MEMORY[0x263F8EE78];
        }
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      char v23 = 1;
    }
    uint64_t v16 = TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)(v23, a1, (uint64_t)a2);
    if (!v16) {
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  return TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(a1, (uint64_t)a2);
}

uint64_t TimelineBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  v7[2] = a1;
  id v8 = v1;
  uint64_t v9 = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in TimelineBuilder.run(inputs:);
  *(void *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_2;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in TimelineBuilder.run(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v150 = type metadata accessor for AnimationFillMode();
  MEMORY[0x270FA5388](v150);
  v152 = (char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for AnimationRepeatMode();
  uint64_t v148 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149);
  v151 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationLibraryComponent?);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for Entity.ComponentSet();
  uint64_t v157 = *(void *)(v154 - 8);
  MEMORY[0x270FA5388](v154);
  v147 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v160 = (char *)&v137 - v11;
  uint64_t v156 = type metadata accessor for AnimationLibraryComponent();
  uint64_t v158 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  v153 = (char *)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v155 = (char *)&v137 - v14;
  uint64_t v15 = Inputs.prim.getter();
  uint64_t v16 = (void *)RIOPxrUsdObjectCopyName();
  uint64_t v18 = RIOPxrTfTokenCopyString();
  uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v162 = v17;

  LOBYTE(v18) = static os_log_type_t.info.getter();
  if (one-time initialization token for timeline != -1) {
LABEL_60:
  }
    swift_once();
  uint64_t v19 = static OS_os_log.timeline;
  os_log_type_t v20 = v18;
  if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, (os_log_type_t)v18))
  {
    swift_retain_n();
    uint64_t v21 = v15;
    uint64_t v22 = swift_slowAlloc();
    os_log_t v145 = v19;
    char v23 = (uint8_t *)v22;
    uint64_t v146 = swift_slowAlloc();
    *(void *)&long long v163 = v146;
    *(_DWORD *)char v23 = 136315138;
    v144 = v23 + 4;
    char v24 = (void *)RIOPxrUsdObjectCopyPath();
    uint64_t v25 = a2;
    uint64_t v26 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v27 = v8;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v159 = a1;
    unint64_t v30 = v29;

    uint64_t v15 = v21;
    a2 = v25;
    uint64_t v31 = v28;
    id v8 = v27;
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a1 = v159;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23A99F000, v145, v20, "Begin TimelineBuilder for prim at path: %s", v23, 0xCu);
    uint64_t v32 = v146;
    swift_arrayDestroy();
    MEMORY[0x23ECBE8B0](v32, -1, -1);
    MEMORY[0x23ECBE8B0](v23, -1, -1);
  }
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_23AAB24E0;
      uint64_t v37 = (void *)RIOPxrUsdObjectCopyPath();
      uint64_t v38 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      uint64_t v42 = MEMORY[0x263F8D310];
      *(void *)(v36 + 56) = MEMORY[0x263F8D310];
      unint64_t v43 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v36 + 32) = v39;
      *(void *)(v36 + 40) = v41;
      *(void *)(v36 + 96) = v42;
      *(void *)(v36 + 104) = v43;
      uint64_t v44 = v161;
      *(void *)(v36 + 64) = v43;
      *(void *)(v36 + 72) = v44;
      *(void *)(v36 + 80) = v162;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v33 = static EntityBuilder.OutputName;
  uint64_t v34 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v33, v34, &v163);
  if (!v164)
  {
    outlined destroy of Any?((uint64_t)&v163, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_23AAB22A0;
    *(void *)(v45 + 56) = MEMORY[0x263F8D310];
    *(void *)(v45 + 64) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v46 = v162;
    *(void *)(v45 + 32) = v161;
    *(void *)(v45 + 40) = v46;
    os_log(_:dso:log:type:_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  os_log_t v145 = v166;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (String.count.getter() < 1) {
    id v35 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v35 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v48 = v35;
  char v49 = specialized Prim.attributeValue<A>(of:type:)();

  if (v49 != 2 && (v49 & 1) == 0)
  {
    specialized TimelineBuilder.clear(inputs:)();
    swift_release();
    return swift_release();
  }
  type metadata accessor for Entity();
  uint64_t v50 = static Entity.__fromCore(_:)();
  uint64_t v51 = v160;
  uint64_t v143 = v50;
  dispatch thunk of Entity.components.getter();
  uint64_t v52 = v156;
  Entity.ComponentSet.subscript.getter();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v157 + 8);
  v157 += 8;
  v141 = v53;
  v53(v51, v154);
  uint64_t v54 = v158;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v8, 1, v52) == 1)
  {
    uint64_t v55 = v155;
    AnimationLibraryComponent.init()();
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for AnimationLibraryComponent?);
  }
  else
  {
    uint64_t v55 = v155;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v155, v8, v52);
  }
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v57 = (uint64_t)v153;
  uint64_t v140 = v54 + 16;
  v139 = v56;
  v56(v153, v55, v52);
  specialized Builder.addComponent<A>(component:)(v57);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v54 + 8);
  uint64_t v158 = v54 + 8;
  v142 = v58;
  v58((char *)v57, v52);
  v144 = (uint8_t *)v15;
  unint64_t v59 = Prim.children.getter();
  swift_retain();
  swift_retain();
  uint64_t v60 = 0;
  specialized Sequence.compactMap<A>(_:)(v59, a2, (void (**)(char *, uint64_t))a1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v61 = swift_release();
  MEMORY[0x270FA5388](v61);
  uint64_t v63 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say10RealityKit17AnimationResourceCG_Sits5NeverOTg509_sSiSay10d5Kit17fg10CGSiIgyod_j8AD_Sits5H11OIegnrzr_TRSiAJSiIgyod_Tf1cn_nTf4ng_n(0, v62, (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #1 in TimelineBuilder.run(inputs:));
  swift_bridgeObjectRelease();
  uint64_t v64 = v63;
  uint64_t v18 = MEMORY[0x263F8EE78];
  *(void *)&long long v163 = MEMORY[0x263F8EE78];
  uint64_t v65 = *(void *)(v64 + 16);
  if (v65)
  {
    uint64_t v138 = 0;
    uint64_t v159 = v64 + 32;
    uint64_t v137 = v64;
    swift_bridgeObjectRetain();
    uint64_t v66 = 0;
    uint64_t v146 = v65;
    while (1)
    {
      uint64_t v67 = (uint64_t *)(v159 + 16 * (void)v66);
      uint64_t v68 = *v67;
      uint64_t v15 = v67[1];
      if ((unint64_t)*v67 >> 62)
      {
        swift_bridgeObjectRetain();
        a1 = _CocoaArrayWrapper.endIndex.getter();
        if (!a1)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          a2 = (uint64_t)v18;
          goto LABEL_27;
        }
      }
      else
      {
        a1 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!a1) {
          goto LABEL_26;
        }
      }
      uint64_t v161 = v68;
      v166 = v18;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1 & ~(a1 >> 63), 0);
      if (a1 < 0)
      {
        __break(1u);
        goto LABEL_60;
      }
      v160 = v66;
      a2 = (uint64_t)v166;
      uint64_t v69 = v161;
      if ((v161 & 0xC000000000000001) != 0)
      {
        uint64_t v70 = 0;
        do
        {
          id v8 = (char *)MEMORY[0x23ECBA630](v70, v69);
          v166 = a2;
          unint64_t v72 = *(void *)(a2 + 16);
          unint64_t v71 = *(void *)(a2 + 24);
          if (v72 >= v71 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
            uint64_t v69 = v161;
            a2 = (uint64_t)v166;
          }
          ++v70;
          *(void *)(a2 + 16) = v72 + 1;
          uint64_t v73 = a2 + 16 * v72;
          *(void *)(v73 + 32) = v8;
          *(void *)(v73 + 40) = v15;
        }
        while (a1 != v70);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v74 = 0;
        v162 = (uint8_t *)(v161 + 32);
        Class isa = v166[2].isa;
        uint64_t v76 = 16 * (void)isa;
        do
        {
          uint64_t v77 = *(void *)&v162[8 * v74];
          v166 = a2;
          unint64_t v78 = *(void *)(a2 + 24);
          id v8 = (char *)isa + v74 + 1;
          swift_retain();
          if ((unint64_t)isa + v74 >= v78 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, (int64_t)isa + v74 + 1, 1);
            a2 = (uint64_t)v166;
          }
          ++v74;
          *(void *)(a2 + 16) = v8;
          uint64_t v79 = a2 + v76;
          *(void *)(v79 + 32) = v77;
          *(void *)(v79 + 40) = v15;
          v76 += 16;
        }
        while (a1 != v74);
        swift_bridgeObjectRelease();
        uint64_t v18 = MEMORY[0x263F8EE78];
        uint64_t v65 = v146;
      }
      uint64_t v66 = v160;
LABEL_27:
      ++v66;
      specialized Array.append<A>(contentsOf:)(a2);
      if (v66 == (char *)v65)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v80 = v163;
        uint64_t v60 = v138;
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v80 = MEMORY[0x263F8EE78];
LABEL_47:
  *(void *)&long long v163 = v80;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((void **)&v163);
  if (v60) {
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
  unint64_t v81 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AnimationResourceC04animG0_Si11trackNumbertG_AHs5NeverOTg504_s10d5Kit17fg42CSiACIggyo_AC04animD0_Si11trackNumbertACs5K104OIegnrzr_TR03_s9a60IO15TimelineBuilderC3run6inputsyAA6InputsC_tFyyXEfU_0A3Kit17cd7CAJ_SitQ3U3_Tf3nnnpf_nTf1cn_n(v163);
  swift_release();
  if (v81 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v82) {
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v82 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v82)
    {
LABEL_50:
      v166 = v18;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82 & ~(v82 >> 63), 0);
      if ((v82 & 0x8000000000000000) == 0)
      {
        uint64_t v83 = 0;
        id v84 = v166;
        do
        {
          if ((v81 & 0xC000000000000001) != 0) {
            MEMORY[0x23ECBA630](v83, v81);
          }
          else {
            swift_retain();
          }
          AnimationResource.definition.getter();
          swift_release();
          v166 = v84;
          unint64_t v86 = (unint64_t)v84[2].isa;
          unint64_t v85 = (unint64_t)v84[3].isa;
          if (v86 >= v85 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1);
            id v84 = v166;
          }
          ++v83;
          v84[2].Class isa = (Class)(v86 + 1);
          outlined init with take of AnimationDefinition(&v163, (uint64_t)&v84[5 * v86 + 4]);
        }
        while (v82 != v83);
        goto LABEL_62;
      }
      __break(1u);
LABEL_68:
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
  }
LABEL_62:
  swift_bridgeObjectRelease();
  type metadata accessor for AnimationResource();
  (*(void (**)(char *, void, uint64_t))(v148 + 104))(v151, *MEMORY[0x263F16760], v149);
  v166 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, MEMORY[0x263F16730]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v164 = type metadata accessor for AnimationGroup();
  uint64_t v165 = MEMORY[0x263F165E0];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v163);
  AnimationGroup.init(group:name:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  uint64_t v87 = static AnimationResource.generate(with:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v163);
  uint64_t v88 = (void *)RIOPxrUsdObjectCopyPath();
  uint64_t v89 = (void *)RIOPxrSdfPathCopyString();
  unint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v92 = v91;

  specialized TimelineBuilder.printDebug(_:key:)(v87, v90, v92);
  swift_bridgeObjectRelease();
  uint64_t v93 = (void *)RIOPxrUsdObjectCopyPath();
  uint64_t v94 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v97 = v96;

  swift_retain();
  uint64_t v98 = v155;
  uint64_t v99 = (void (*)(long long *, void))AnimationLibraryComponent.animations.modify();
  MEMORY[0x23ECB9C10](v87, v95, v97);
  v99(&v163, 0);
  uint64_t v100 = (void *)RIOPxrUsdObjectCopyPath();
  uint64_t v101 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v104 = v103;

  *(void *)&long long v163 = v102;
  *((void *)&v163 + 1) = v104;
  swift_bridgeObjectRetain();
  v105._object = (void *)0x800000023AAAD260;
  v105._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  long long v106 = v163;
  uint64_t v107 = AnimationResource.repeat(duration:)();
  uint64_t v108 = (void (*)(long long *, void))AnimationLibraryComponent.animations.modify();
  MEMORY[0x23ECB9C10](v107, v106, *((void *)&v106 + 1));
  v108(&v163, 0);
  uint64_t v109 = v147;
  dispatch thunk of Entity.components.getter();
  uint64_t v110 = v153;
  uint64_t v111 = v156;
  uint64_t v112 = v139;
  v139(v153, v98, v156);
  Entity.ComponentSet.set<A>(_:)();
  v142(v110, v111);
  v141(v109, v154);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v113 = swift_allocObject();
  *(_OWORD *)(v113 + 16) = xmmword_23AAB22A0;
  v112(v110, v98, v111);
  uint64_t v114 = String.init<A>(describing:)();
  uint64_t v116 = v115;
  *(void *)(v113 + 56) = MEMORY[0x263F8D310];
  *(void *)(v113 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v113 + 32) = v114;
  *(void *)(v113 + 40) = v116;
  uint64_t v117 = &unk_268A58000;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  os_log_type_t v118 = static os_log_type_t.info.getter();
  uint64_t v119 = static OS_os_log.timeline;
  os_log_type_t v120 = v118;
  if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, v118))
  {
    swift_retain_n();
    uint64_t v121 = (uint8_t *)swift_slowAlloc();
    uint64_t v122 = swift_slowAlloc();
    *(_DWORD *)uint64_t v121 = 136315138;
    v162 = v121 + 4;
    *(void *)&long long v163 = v122;
    Entity.entityPath.getter();
    uint64_t v123 = MEMORY[0x23ECBA140]();
    unint64_t v125 = v124;
    swift_bridgeObjectRelease();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v125, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23A99F000, v119, v120, "Storing onto entity with path: %s", v121, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECBE8B0](v122, -1, -1);
    uint64_t v126 = v121;
    uint64_t v117 = &unk_268A58000;
    MEMORY[0x23ECBE8B0](v126, -1, -1);
  }
  swift_release();
  os_log_type_t v127 = static os_log_type_t.info.getter();
  uint64_t v128 = *((void *)v117 + 59);
  os_log_type_t v129 = v127;
  if (os_log_type_enabled(v128, v127))
  {
    swift_retain_n();
    uint64_t v130 = (uint8_t *)swift_slowAlloc();
    uint64_t v131 = swift_slowAlloc();
    *(_DWORD *)uint64_t v130 = 136315138;
    v162 = v130 + 4;
    *(void *)&long long v163 = v131;
    uint64_t v132 = (void *)RIOPxrUsdObjectCopyPath();
    v133 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v136 = v135;

    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v136, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23A99F000, v128, v129, "End TimelineBuilder for prim at path: %s", v130, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECBE8B0](v131, -1, -1);
    MEMORY[0x23ECBE8B0](v130, -1, -1);
  }
  swift_release();
  swift_release();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v142)(v155, v156);
}

unint64_t closure #2 in closure #1 in TimelineBuilder.run(inputs:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a2 + 16) > result)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

void *Entity.entityPath.getter()
{
  type metadata accessor for Entity();
  if (HasHierarchy.parent.getter())
  {
    id v0 = (void *)Entity.entityPath.getter();
    swift_release();
  }
  else
  {
    id v0 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v1 = dispatch thunk of Entity.name.getter();
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0[2] + 1, 1, v0);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  uint64_t v7 = &v4[2 * v6];
  long long v7[4] = v1;
  v7[5] = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance TimelineBuilder()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_268A581F8;
  *(void *)(inited + 32) = static TimelineBuilder.OutputName;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 0xD000000000000021;
  *(void *)(inited + 56) = 0x800000023AAAD150;
  *(unsigned char *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  Swift::Int v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

id one-time initialization function for primType()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static TimelineConstants.Timeline.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static TimelineConstants.Track.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static TimelineConstants.Action.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static MeshSortingConstants.MeshSortingGroup.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFile.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.AudioFileGroup.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AudioConstants.MixGroup.primType = (uint64_t)result;
  return result;
}

id static TimelineConstants.Timeline.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static TimelineConstants.Timeline.primType, a1);
}

id static TimelineConstants.Track.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static TimelineConstants.Track.primType, a1);
}

id static TimelineConstants.Action.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static TimelineConstants.Action.primType, a1);
}

id static TimelineConstants.Timeline.primType.getter@<X0>(void *a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  unint64_t v5 = *a2;
  *a3 = *a2;
  return v5;
}

uint64_t type metadata accessor for TimelineTrackAndActionBuilder()
{
  return self;
}

uint64_t type metadata accessor for TimelineBuilder()
{
  return self;
}

ValueMetadata *type metadata accessor for TimelineConstants()
{
  return &type metadata for TimelineConstants;
}

ValueMetadata *type metadata accessor for TimelineConstants.Timeline()
{
  return &type metadata for TimelineConstants.Timeline;
}

ValueMetadata *type metadata accessor for TimelineConstants.Track()
{
  return &type metadata for TimelineConstants.Track;
}

ValueMetadata *type metadata accessor for TimelineConstants.Action()
{
  return &type metadata for TimelineConstants.Action;
}

uint64_t specialized static Array<A>.getValueOpt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = RIOPxrVtValueCopyStringArray();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();

      return MEMORY[0x263F8EE78];
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x263F163C8]);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  unint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  id v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  unint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  id v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  unint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  id v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x263F16400]);
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  unint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    id v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    char v23 = v4 + v2;
  }
  else {
    char v23 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  id v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for ImportSession.EvaluationFault(0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v3 + v13 + v12 * v9;
  uint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  uint64_t v17 = v14 + v16;
  uint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  os_log_type_t v20 = *(void *)(v3 + 16);
  uint64_t v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    void *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x23ECBA640](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, void *a2, char a3, void *a4)
{
  if (!a1[2] || (uint64_t v51 = a2[2]) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v50 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)*a4;
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_30;
  }
  char v16 = v11;
  if (v10[3] >= v15)
  {
    if (a3)
    {
      unint64_t v19 = a1;
      if (v11) {
        goto LABEL_11;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      unint64_t v19 = a1;
      if (v16) {
        goto LABEL_11;
      }
    }
LABEL_14:
    BOOL v22 = (void *)*a4;
    *(void *)(*a4 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    uint64_t v23 = (uint64_t *)(v22[6] + 16 * v12);
    uint64_t *v23 = v7;
    v23[1] = v6;
    char v24 = (void *)(v22[7] + 16 * v12);
    *char v24 = v8;
    v24[1] = v9;
    uint64_t v25 = v22[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v22[2] = v27;
    if (v50 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return;
    }
    if (v19[2] < 2uLL) {
      goto LABEL_32;
    }
    if (v51 == 1) {
      goto LABEL_18;
    }
    uint64_t v28 = v19 + 7;
    unint64_t v29 = a2 + 7;
    for (unint64_t i = 2; ; ++i)
    {
      uint64_t v32 = *(v28 - 1);
      uint64_t v31 = *v28;
      swift_bridgeObjectRetain();
      uint64_t v33 = *(v29 - 1);
      uint64_t v34 = *v29;
      id v35 = (void *)*a4;
      swift_bridgeObjectRetain();
      unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
      uint64_t v38 = v35[2];
      BOOL v39 = (v37 & 1) == 0;
      BOOL v26 = __OFADD__(v38, v39);
      uint64_t v40 = v38 + v39;
      if (v26) {
        break;
      }
      char v41 = v37;
      if (v35[3] < v40)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, 1);
        unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
        if ((v41 & 1) != (v42 & 1)) {
          goto LABEL_33;
        }
      }
      if (v41) {
        goto LABEL_11;
      }
      unint64_t v43 = (void *)*a4;
      *(void *)(*a4 + 8 * (v36 >> 6) + 64) |= 1 << v36;
      uint64_t v44 = (uint64_t *)(v43[6] + 16 * v36);
      *uint64_t v44 = v32;
      v44[1] = v31;
      uint64_t v45 = (void *)(v43[7] + 16 * v36);
      *uint64_t v45 = v33;
      v45[1] = v34;
      uint64_t v46 = v43[2];
      BOOL v26 = __OFADD__(v46, 1);
      uint64_t v47 = v46 + 1;
      if (v26) {
        goto LABEL_31;
      }
      v43[2] = v47;
      if (v50 == i) {
        goto LABEL_18;
      }
      if (i >= a1[2]) {
        goto LABEL_32;
      }
      if (v51 == i) {
        goto LABEL_18;
      }
      v29 += 2;
      v28 += 2;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a3 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    unint64_t v19 = a1;
    if ((v16 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    os_log_type_t v20 = (void *)swift_allocError();
    swift_willThrow();
    id v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_34;
  }
LABEL_33:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_34:
  _StringGuts.grow(_:)(30);
  v48._object = (void *)0x800000023AAAD4D0;
  v48._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v48);
  _print_unlocked<A, B>(_:_:)();
  v49._countAndFlagsBits = 39;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_158;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_166;
  }
  Swift::Int v123 = v3;
  Swift::Int v118 = result;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      char v11 = (char *)MEMORY[0x263F8EE78];
LABEL_123:
      uint64_t v117 = v8;
      if (v13 >= 2)
      {
        uint64_t v109 = *v2;
        do
        {
          unint64_t v110 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_153;
          }
          if (!v109) {
            goto LABEL_165;
          }
          uint64_t v111 = *(void *)&v11[16 * v110 + 32];
          uint64_t v112 = *(void *)&v11[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v109 + 16 * v111), (char *)(v109 + 16 * *(void *)&v11[16 * v13 + 16]), v109 + 16 * v112, __dst);
          if (v1) {
            break;
          }
          if (v112 < v111) {
            goto LABEL_154;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          }
          if (v110 >= *((void *)v11 + 2)) {
            goto LABEL_155;
          }
          uint64_t v113 = &v11[16 * v110 + 32];
          *(void *)uint64_t v113 = v111;
          *((void *)v113 + 1) = v112;
          unint64_t v114 = *((void *)v11 + 2);
          if (v13 > v114) {
            goto LABEL_156;
          }
          memmove(&v11[16 * v13 + 16], &v11[16 * v13 + 32], 16 * (v114 - v13));
          *((void *)v11 + 2) = v114 - 1;
          unint64_t v13 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_134:
      swift_bridgeObjectRelease();
      *(void *)(v117 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v117 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v117 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v115 = v2;
  uint64_t v116 = *v2 + 8;
  char v11 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v12 = v123;
  uint64_t v129 = *v2;
  while (1)
  {
    Swift::Int v14 = v9 + 1;
    uint64_t v122 = v11;
    if (v9 + 1 >= v12) {
      goto LABEL_53;
    }
    uint64_t v15 = *(void *)(v10 + 16 * v14 + 8);
    uint64_t v16 = *(void *)(v10 + 16 * v9 + 8);
    swift_retain();
    swift_retain();
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.duration.getter();
    double v18 = v17;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.duration.getter();
    double v20 = v19;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    if (v18 != v20)
    {
      LODWORD(v132) = v18 < v20;
      swift_release();
      swift_release();
LABEL_21:
      Swift::Int v25 = v9 + 1;
      uint64_t v10 = v129;
      goto LABEL_22;
    }
    uint64_t v132 = v16;
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.delay.getter();
    double v22 = v21;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.delay.getter();
    double v24 = v23;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    swift_release();
    swift_release();
    if (v22 < v24)
    {
      LODWORD(v132) = 1;
      goto LABEL_21;
    }
    Swift::Int v25 = v9 + 1;
    uint64_t v10 = v129;
    if (v22 == v24)
    {
      Swift::Int v26 = v9 + 2;
      if (v15 >= v132)
      {
        if (v26 >= v123)
        {
LABEL_52:
          Swift::Int v14 = v26;
          goto LABEL_53;
        }
        LODWORD(v132) = 0;
      }
      else
      {
        if (v26 >= v123) {
          goto LABEL_38;
        }
        LODWORD(v132) = 1;
      }
LABEL_23:
      uint64_t v120 = v9;
      uint64_t v27 = (uint64_t *)(v116 + 16 * v26);
      Swift::Int v28 = v26;
      while (1)
      {
        uint64_t v126 = *v27;
        uint64_t v29 = *(void *)(v10 + 16 * v25 + 8);
        swift_retain();
        swift_retain();
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        double v31 = v30;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        double v33 = v32;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        if (v31 < v33)
        {
          swift_release();
          swift_release();
        }
        else
        {
          if (v31 != v33)
          {
            swift_release();
            swift_release();
LABEL_33:
            char v11 = v122;
            uint64_t v10 = v129;
            if (v132)
            {
              Swift::Int v26 = v28;
              uint64_t v9 = v120;
              goto LABEL_37;
            }
            goto LABEL_26;
          }
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v130, v131);
          dispatch thunk of AnimationDefinition.delay.getter();
          double v35 = v34;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v130, v131);
          dispatch thunk of AnimationDefinition.delay.getter();
          double v37 = v36;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
          swift_release();
          swift_release();
          if (v35 >= v37 && (v35 != v37 || v126 >= v29)) {
            goto LABEL_33;
          }
        }
        char v11 = v122;
        uint64_t v10 = v129;
        if ((v132 & 1) == 0)
        {
          Swift::Int v14 = v28;
          uint64_t v9 = v120;
          goto LABEL_53;
        }
LABEL_26:
        v27 += 2;
        Swift::Int v26 = v28 + 1;
        Swift::Int v25 = v28;
        Swift::Int v28 = v26;
        if (v26 >= v123)
        {
          uint64_t v9 = v120;
          goto LABEL_36;
        }
      }
    }
    LODWORD(v132) = 0;
LABEL_22:
    Swift::Int v26 = v9 + 2;
    if (v9 + 2 < v123) {
      goto LABEL_23;
    }
LABEL_36:
    Swift::Int v28 = v26;
    Swift::Int v14 = v26;
    if (v132) {
      break;
    }
LABEL_53:
    if (v14 >= v123) {
      goto LABEL_75;
    }
    if (__OFSUB__(v14, v9)) {
      goto LABEL_157;
    }
    if (v14 - v9 >= v118) {
      goto LABEL_75;
    }
    Swift::Int v45 = v9 + v118;
    if (__OFADD__(v9, v118)) {
      goto LABEL_159;
    }
    if (v45 >= v123) {
      Swift::Int v45 = v123;
    }
    if (v45 < v9)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if (v14 == v45) {
      goto LABEL_75;
    }
    uint64_t v46 = (void *)(v10 + 16 * v14);
    Swift::Int v119 = v45;
    uint64_t v121 = v9;
    while (2)
    {
      uint64_t v47 = *(void *)(v10 + 16 * v14 + 8);
      uint64_t v48 = v9;
      unint64_t v124 = v46;
      Swift::Int v127 = v14;
      while (1)
      {
        uint64_t v132 = *(v46 - 1);
        swift_retain();
        swift_retain();
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        double v50 = v49;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        double v52 = v51;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        if (v50 >= v52) {
          break;
        }
        swift_release();
        swift_release();
        Swift::Int v53 = v127;
        uint64_t v10 = v129;
LABEL_71:
        if (!v10) {
          goto LABEL_162;
        }
        uint64_t v58 = *v46;
        uint64_t v47 = v46[1];
        *(_OWORD *)uint64_t v46 = *((_OWORD *)v46 - 1);
        *(v46 - 1) = v47;
        *(v46 - 2) = v58;
        v46 -= 2;
        if (v53 == ++v48) {
          goto LABEL_62;
        }
      }
      if (v50 == v52)
      {
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.delay.getter();
        double v55 = v54;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.delay.getter();
        double v57 = v56;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        swift_release();
        swift_release();
        Swift::Int v53 = v127;
        uint64_t v10 = v129;
        if (v55 >= v57 && (v55 != v57 || v47 >= v132)) {
          goto LABEL_62;
        }
        goto LABEL_71;
      }
      swift_release();
      swift_release();
      Swift::Int v53 = v127;
      uint64_t v10 = v129;
LABEL_62:
      Swift::Int v14 = v53 + 1;
      uint64_t v46 = v124 + 2;
      uint64_t v9 = v121;
      if (v14 != v119) {
        continue;
      }
      break;
    }
    Swift::Int v14 = v119;
    char v11 = v122;
LABEL_75:
    if (v14 < v9) {
      goto LABEL_152;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v60 = *((void *)v11 + 2);
    unint64_t v59 = *((void *)v11 + 3);
    unint64_t v13 = v60 + 1;
    uint64_t v10 = v129;
    if (v60 >= v59 >> 1)
    {
      uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v11);
      uint64_t v10 = v129;
      char v11 = v108;
    }
    *((void *)v11 + 2) = v13;
    uint64_t v61 = v11 + 32;
    uint64_t v62 = &v11[16 * v60 + 32];
    *(void *)uint64_t v62 = v9;
    *((void *)v62 + 1) = v14;
    Swift::Int v128 = v14;
    if (v60)
    {
      while (2)
      {
        unint64_t v63 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v68 = &v61[16 * v13];
          uint64_t v69 = *((void *)v68 - 8);
          uint64_t v70 = *((void *)v68 - 7);
          BOOL v74 = __OFSUB__(v70, v69);
          uint64_t v71 = v70 - v69;
          if (v74) {
            goto LABEL_141;
          }
          uint64_t v73 = *((void *)v68 - 6);
          uint64_t v72 = *((void *)v68 - 5);
          BOOL v74 = __OFSUB__(v72, v73);
          uint64_t v66 = v72 - v73;
          char v67 = v74;
          if (v74) {
            goto LABEL_142;
          }
          unint64_t v75 = v13 - 2;
          uint64_t v76 = &v61[16 * v13 - 32];
          uint64_t v78 = *(void *)v76;
          uint64_t v77 = *((void *)v76 + 1);
          BOOL v74 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          if (v74) {
            goto LABEL_144;
          }
          BOOL v74 = __OFADD__(v66, v79);
          uint64_t v80 = v66 + v79;
          if (v74) {
            goto LABEL_147;
          }
          if (v80 >= v71)
          {
            uint64_t v98 = &v61[16 * v63];
            uint64_t v100 = *(void *)v98;
            uint64_t v99 = *((void *)v98 + 1);
            BOOL v74 = __OFSUB__(v99, v100);
            uint64_t v101 = v99 - v100;
            if (v74) {
              goto LABEL_151;
            }
            BOOL v91 = v66 < v101;
          }
          else
          {
LABEL_94:
            if (v67) {
              goto LABEL_143;
            }
            unint64_t v75 = v13 - 2;
            unint64_t v81 = &v61[16 * v13 - 32];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            BOOL v84 = __OFSUB__(v82, v83);
            uint64_t v85 = v82 - v83;
            char v86 = v84;
            if (v84) {
              goto LABEL_146;
            }
            uint64_t v87 = &v61[16 * v63];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            BOOL v74 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v74) {
              goto LABEL_149;
            }
            if (__OFADD__(v85, v90)) {
              goto LABEL_150;
            }
            if (v85 + v90 < v66) {
              goto LABEL_106;
            }
            BOOL v91 = v66 < v90;
          }
          if (v91) {
            unint64_t v63 = v75;
          }
        }
        else
        {
          if (v13 == 3)
          {
            uint64_t v65 = *((void *)v11 + 4);
            uint64_t v64 = *((void *)v11 + 5);
            BOOL v74 = __OFSUB__(v64, v65);
            uint64_t v66 = v64 - v65;
            char v67 = v74;
            goto LABEL_94;
          }
          uint64_t v92 = *((void *)v11 + 4);
          uint64_t v93 = *((void *)v11 + 5);
          BOOL v74 = __OFSUB__(v93, v92);
          uint64_t v85 = v93 - v92;
          char v86 = v74;
LABEL_106:
          if (v86) {
            goto LABEL_145;
          }
          uint64_t v94 = &v61[16 * v63];
          uint64_t v96 = *(void *)v94;
          uint64_t v95 = *((void *)v94 + 1);
          BOOL v74 = __OFSUB__(v95, v96);
          uint64_t v97 = v95 - v96;
          if (v74) {
            goto LABEL_148;
          }
          if (v97 < v85) {
            goto LABEL_15;
          }
        }
        unint64_t v102 = v63 - 1;
        if (v63 - 1 >= v13)
        {
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        if (!v10) {
          goto LABEL_163;
        }
        uint64_t v103 = &v61[16 * v102];
        uint64_t v104 = *(void *)v103;
        Swift::String v105 = &v61[16 * v63];
        uint64_t v106 = *((void *)v105 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 16 * *(void *)v103), (char *)(v10 + 16 * *(void *)v105), v10 + 16 * v106, __dst);
        if (v1) {
          goto LABEL_134;
        }
        if (v106 < v104) {
          goto LABEL_138;
        }
        if (v63 > *((void *)v11 + 2)) {
          goto LABEL_139;
        }
        *(void *)uint64_t v103 = v104;
        *(void *)&v61[16 * v102 + 8] = v106;
        unint64_t v107 = *((void *)v11 + 2);
        if (v63 >= v107) {
          goto LABEL_140;
        }
        unint64_t v13 = v107 - 1;
        memmove(&v61[16 * v63], v105 + 16, 16 * (v107 - 1 - v63));
        *((void *)v11 + 2) = v107 - 1;
        uint64_t v10 = v129;
        if (v107 <= 2) {
          goto LABEL_15;
        }
        continue;
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v12 = v123;
    uint64_t v9 = v128;
    if (v128 >= v123)
    {
      uint64_t v8 = v117;
      uint64_t v2 = v115;
      goto LABEL_123;
    }
  }
LABEL_37:
  if (v28 >= v9)
  {
LABEL_38:
    if (v9 < v26)
    {
      uint64_t v38 = 16 * v26;
      uint64_t v39 = 16 * v9;
      Swift::Int v40 = v26;
      Swift::Int v41 = v9;
      while (1)
      {
        if (v41 != --v40)
        {
          if (!v10) {
            goto LABEL_164;
          }
          uint64_t v42 = v10 + v38;
          uint64_t v43 = *(void *)(v10 + v39);
          uint64_t v44 = *(void *)(v10 + v39 + 8);
          *(_OWORD *)(v10 + v39) = *(_OWORD *)(v10 + v38 - 16);
          *(void *)(v42 - 16) = v43;
          *(void *)(v42 - 8) = v44;
        }
        ++v41;
        v38 -= 16;
        v39 += 16;
        if (v41 >= v40) {
          goto LABEL_52;
        }
      }
    }
    goto LABEL_52;
  }
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = result;
  if (a3 != a2)
  {
    uint64_t v20 = *a4;
    uint64_t v4 = (void *)(*a4 + 16 * a3);
LABEL_5:
    uint64_t v5 = *(void *)(v20 + 16 * a3 + 8);
    uint64_t v6 = v18;
    double v19 = v4;
    uint64_t v21 = a3;
    while (1)
    {
      uint64_t v24 = *(v4 - 1);
      swift_retain();
      swift_retain();
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v22, v23);
      dispatch thunk of AnimationDefinition.duration.getter();
      double v8 = v7;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v22, v23);
      dispatch thunk of AnimationDefinition.duration.getter();
      double v10 = v9;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      if (v8 >= v10)
      {
        if (v8 != v10)
        {
          swift_release();
          Swift::Int result = swift_release();
          uint64_t v11 = v21;
LABEL_4:
          a3 = v11 + 1;
          uint64_t v4 = v19 + 2;
          if (a3 == a2) {
            return result;
          }
          goto LABEL_5;
        }
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v22, v23);
        dispatch thunk of AnimationDefinition.delay.getter();
        double v13 = v12;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v22, v23);
        dispatch thunk of AnimationDefinition.delay.getter();
        double v15 = v14;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
        swift_release();
        Swift::Int result = swift_release();
        uint64_t v11 = v21;
        if (v13 >= v15 && (v13 != v15 || v5 >= v24)) {
          goto LABEL_4;
        }
      }
      else
      {
        swift_release();
        Swift::Int result = swift_release();
        uint64_t v11 = v21;
      }
      if (!v20) {
        break;
      }
      uint64_t v16 = *v4;
      uint64_t v5 = v4[1];
      *(_OWORD *)uint64_t v4 = *((_OWORD *)v4 - 1);
      *(v4 - 1) = v5;
      *(v4 - 2) = v16;
      v4 -= 2;
      if (v11 == ++v6) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = a2;
  uint64_t v5 = __src;
  int64_t v6 = a2 - __src;
  int64_t v7 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v7 = a2 - __src;
  }
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 4;
  double v52 = __src;
  double v51 = __dst;
  uint64_t v42 = __dst;
  if (v8 >= v10 >> 4)
  {
    if (v9 < -15) {
      goto LABEL_55;
    }
    if (__dst != a2 || &a2[16 * v11] <= __dst)
    {
      memmove(__dst, a2, 16 * v11);
      __dst = v42;
    }
    uint64_t v23 = &__dst[16 * v11];
    double v50 = v23;
    double v52 = v4;
    if (v5 >= v4 || v9 < 16)
    {
LABEL_54:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v52, &v51, &v50);
      return 1;
    }
    uint64_t v24 = (char *)(a3 - 16);
    Swift::Int v25 = v4;
    uint64_t v39 = v5;
    while (1)
    {
      Swift::Int v45 = v24 + 16;
      uint64_t v47 = v23;
      uint64_t v26 = *((void *)v23 - 1);
      v23 -= 16;
      uint64_t v27 = *((void *)v25 - 1);
      v25 -= 16;
      uint64_t v40 = v27;
      uint64_t v41 = v26;
      swift_retain();
      swift_retain();
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v48, v49);
      dispatch thunk of AnimationDefinition.duration.getter();
      double v29 = v28;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v48, v49);
      dispatch thunk of AnimationDefinition.duration.getter();
      double v31 = v30;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
      if (v29 < v31) {
        break;
      }
      if (v29 == v31)
      {
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.delay.getter();
        double v34 = v33;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.delay.getter();
        double v36 = v35;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        swift_release();
        swift_release();
        unint64_t v32 = (unint64_t)v39;
        if (v34 < v36 || v34 == v36 && v41 < v40) {
          goto LABEL_46;
        }
      }
      else
      {
        swift_release();
        swift_release();
        unint64_t v32 = (unint64_t)v39;
      }
      double v50 = v23;
      double v37 = v42;
      if (v45 < v47 || v24 >= v47 || v45 != v47) {
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v23;
      }
      Swift::Int v25 = v4;
      if ((unint64_t)v4 <= v32) {
        goto LABEL_54;
      }
LABEL_38:
      v24 -= 16;
      uint64_t v4 = v25;
      if (v23 <= v37) {
        goto LABEL_54;
      }
    }
    swift_release();
    swift_release();
    unint64_t v32 = (unint64_t)v39;
LABEL_46:
    uint64_t v23 = v47;
    double v37 = v42;
    if (v45 != v4 || v24 >= v4) {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    }
    double v52 = v25;
    if ((unint64_t)v25 <= v32) {
      goto LABEL_54;
    }
    goto LABEL_38;
  }
  if (v6 >= -15)
  {
    if (__dst != __src || &__src[16 * v8] <= __dst)
    {
      memmove(__dst, __src, 16 * v8);
      __dst = v42;
    }
    uint64_t v43 = &__dst[16 * v8];
    double v50 = v43;
    if ((unint64_t)v4 < a3 && v6 >= 16)
    {
      while (1)
      {
        uint64_t v44 = *((void *)v4 + 1);
        uint64_t v12 = *((void *)__dst + 1);
        double v13 = __dst;
        swift_retain();
        swift_retain();
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.duration.getter();
        double v15 = v14;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.duration.getter();
        double v17 = v16;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        if (v15 >= v17)
        {
          if (v15 != v17)
          {
            swift_release();
            swift_release();
LABEL_23:
            if (v5 != v13) {
              *(_OWORD *)uint64_t v5 = *(_OWORD *)v13;
            }
            __dst = v13 + 16;
            double v51 = v13 + 16;
            double v22 = v4;
            goto LABEL_26;
          }
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v48, v49);
          dispatch thunk of AnimationDefinition.delay.getter();
          double v19 = v18;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v48, v49);
          dispatch thunk of AnimationDefinition.delay.getter();
          double v21 = v20;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
          swift_release();
          swift_release();
          if (v19 >= v21 && (v19 != v21 || v44 >= v12)) {
            goto LABEL_23;
          }
        }
        else
        {
          swift_release();
          swift_release();
        }
        double v22 = v4 + 16;
        __dst = v13;
        if (v5 < v4 || v5 >= v22 || v5 != v4) {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
        }
LABEL_26:
        v5 += 16;
        double v52 = v5;
        if (__dst < v43)
        {
          uint64_t v4 = v22;
          if ((unint64_t)v22 < a3) {
            continue;
          }
        }
        goto LABEL_54;
      }
    }
    goto LABEL_54;
  }
LABEL_55:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  double v13 = v10 + 32;
  double v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Half>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      double v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      double v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      double v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      double v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationResource] and conformance [A], &demangling cache variable for type metadata for [AnimationResource]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationResource]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for AnimationResource();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [RIOBuilderDirtyStageDescriptorRef] and conformance [A], &demangling cache variable for type metadata for [RIOBuilderDirtyStageDescriptorRef]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RIOBuilderDirtyStageDescriptorRef]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for RIOBuilderDirtyStageDescriptorRef(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

double specialized TimelineBuilder.startTimeAndDuration(for:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  double v2 = COERCE_DOUBLE(specialized Prim.attributeValue<A>(of:type:)());
  char v4 = v3;

  if (String.count.getter() < 1) {
    id v5 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v5 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v6 = v5;
  if (v4) {
    double v7 = 0.0;
  }
  else {
    double v7 = v2;
  }
  specialized Prim.attributeValue<A>(of:type:)();

  return v7;
}

uint64_t specialized TimelineBuilder.handleLooping(action:for:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, double), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for AnimationFillMode();
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for AnimationRepeatMode();
  uint64_t v10 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  double v14 = MEMORY[0x270FA5388](v13 - 8);
  double v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a3(0, v14);
  uint64_t v30 = v17;
  uint64_t v31 = a4;
  v25[2] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  double v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
  v25[1] = boxed_opaque_existential_1;
  v19(boxed_opaque_existential_1, a1, v17);
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1) {
    id v20 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v20 = (id)RIOPxrTfTokenCreateWithCString();
  }
  double v21 = v20;
  specialized Prim.attributeValue<A>(of:type:)();

  __swift_project_boxed_opaque_existential_1(v29, v30);
  type metadata accessor for AnimationResource();
  uint64_t v22 = type metadata accessor for BindTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v16, 1, 1, v22);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F16768], v28);
  default argument 6 of static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  uint64_t v23 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v28);
  outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for BindTarget?);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
  return v23;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      unint64_t v3 = v1 - 1;
    }
    long long v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      long long v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      long long v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      type metadata accessor for RIOPxrTfTokenRef(0);
      uint64_t v3 = 4;
      do
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = MEMORY[0x23ECBA630](v3 - 4, a1);
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v7 = (void *)RIOPxrUsdObjectCopyName();
        lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
        char v8 = static _CFObject.== infix(_:_:)();

        if (v8)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
        swift_release();
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized TimelineBuilder.createNotificationAction(for:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationFillMode();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnimationRepeatMode();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NotificationAction();
  uint64_t v59 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v60 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for targetPathAttributeName != -1) {
LABEL_53:
  }
    swift_once();
  uint64_t v61 = a1;
  id v15 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    uint64_t v62 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  uint64_t v16 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  Relationship.targets.getter();
  swift_bridgeObjectRelease();
  outlined consume of Result<AnyAttribute, Object.Error>(v17, 0);
  uint64_t v18 = String.count.getter();
  uint64_t v53 = v3;
  if (v18 <= 0) {
    id v19 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v19 = (id)RIOPxrTfTokenCreateWithCString();
  }
  double v21 = v19;
  uint64_t v52 = specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v23 = v22;

  uint64_t v51 = v23;
  if (!v23) {
    return 0;
  }
  uint64_t v50 = v2;
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v25 = Prim.children.getter();
  uint64_t v2 = v25;
  uint64_t v57 = v7;
  uint64_t v58 = v6;
  uint64_t v49 = v5;
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  double v54 = v12;
  uint64_t v55 = v13;
  double v56 = v9;
  if (!v7)
  {
LABEL_22:
    swift_bridgeObjectRelease_n();
    uint64_t v48 = 0;
    uint64_t v28 = v49;
    uint64_t v29 = v50;
    uint64_t v31 = v57;
    uint64_t v30 = v58;
    goto LABEL_45;
  }
  unint64_t v47 = v24;
  type metadata accessor for RIOPxrTfTokenRef(0);
  uint64_t v12 = (char *)(v2 & 0xC000000000000001);
  a1 = 4;
  while (1)
  {
    uint64_t v5 = (char *)(a1 - 4);
    if (v12)
    {
      uint64_t v3 = MEMORY[0x23ECBA630](a1 - 4, v2);
      uint64_t v6 = a1 - 3;
      if (__OFADD__(v5, 1)) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(v2 + 8 * a1);
      swift_retain();
      uint64_t v6 = a1 - 3;
      if (__OFADD__(v5, 1))
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
    }
    uint64_t v26 = (void *)RIOPxrUsdPrimCopyTypeName();
    uint64_t v27 = String.count.getter() < 1
        ? (char *)(id)RIOPxrTfTokenEmpty()
        : (char *)RIOPxrTfTokenCreateWithCString();
    uint64_t v9 = v27;
    lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, type metadata accessor for RIOPxrTfTokenRef);
    uint64_t v13 = static _CFObject.== infix(_:_:)();

    if (v13) {
      break;
    }
    swift_release();
    ++a1;
    if (v6 == v7) {
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n();
  if (String.count.getter() < 1) {
    id v32 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v32 = (id)RIOPxrTfTokenCreateWithCString();
  }
  double v33 = v32;
  uint64_t v28 = v49;
  uint64_t v29 = v50;
  uint64_t v31 = v57;
  uint64_t v30 = v58;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

LABEL_44:
    uint64_t v48 = 0;
    goto LABEL_45;
  }
  double v34 = (void *)RIOPxrUsdPrimCopyAttribute();
  double v35 = (void *)specialized static Array<A>.getValueOpt(from:time:)();

  if (!v35)
  {
    swift_release();
    goto LABEL_44;
  }
  if (String.count.getter() < 1) {
    id v36 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v36 = (id)RIOPxrTfTokenCreateWithCString();
  }
  double v37 = v36;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();
    swift_bridgeObjectRelease();

    goto LABEL_44;
  }
  uint64_t v38 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v39 = (void *)specialized static Array<A>.getValueOpt(from:time:)();

  if (!v39)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  if (v39[2] >= v35[2]) {
    uint64_t v40 = v35[2];
  }
  else {
    uint64_t v40 = v39[2];
  }
  if (v40)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v41 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v41 = MEMORY[0x263F8EE80];
  }
  uint64_t v62 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v35, v39, 1, &v62);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = 0;
LABEL_45:
  NotificationAction.init(name:customArguments:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  type metadata accessor for AnimationResource();
  uint64_t v42 = type metadata accessor for BindTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v54, 1, 1, v42);
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v56, *MEMORY[0x263F16760], v30);
  uint64_t v62 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, MEMORY[0x263F16730]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v43 = v48;
  uint64_t v44 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  if (v43)
  {

    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = v44;
  }
  uint64_t v45 = v59;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  outlined destroy of Any?((uint64_t)v54, &demangling cache variable for type metadata for BindTarget?);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v60, v55);
  return v20;
}

__n128 specialized TimelineBuilder.transform(for:)()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  specialized Prim.attributeValue<A>(of:type:)();

  if (String.count.getter() < 1) {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v3 = v2;
  specialized Prim.attributeValue<A>(of:type:)();

  if (String.count.getter() < 1) {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v6 = v4;
  v5.i32[0] = 0;
  int8x16_t v15 = v5;
  uint64_t v7 = specialized Prim.attributeValue<A>(of:type:)();
  uint64_t v9 = v8;
  char v11 = v10;

  v12.i32[0] = v11 & 1;
  v13.i64[0] = v7;
  v13.i64[1] = v9;
  int8x16_t v16 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v12, v15), 0), v13, (int8x16_t)xmmword_23AAB25F0);
  static simd_quatf.identity.getter();
  return (__n128)v16;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO4PrimCG_Say0D3Kit17AnimationResourceCGs5NeverOTg503_s9d57IO15TimelineBuilderC13createActions3for6inputsSay0A3Kit17hi7CGSgAA4F22C_AA6InputsCtFAjMXEfU_AF0mN0CAF0W0CTf1cn_nTf4ngg_n(unint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t))
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v6) {
      break;
    }
    uint64_t v32 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    uint64_t result = v32;
    unint64_t v29 = v5 & 0xC000000000000001;
    unint64_t v24 = a3;
    while (v6 != v8)
    {
      uint64_t v30 = result;
      if (v29)
      {
        uint64_t v9 = MEMORY[0x23ECBA630](v8, v5);
      }
      else
      {
        uint64_t v9 = *(void *)(v5 + 8 * v8 + 32);
        swift_retain();
      }
      os_log_type_t v10 = static os_log_type_t.info.getter();
      if (one-time initialization token for timeline != -1) {
        swift_once();
      }
      uint64_t v11 = static OS_os_log.timeline;
      if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, v10))
      {
        swift_retain_n();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v31 = v28;
        *(_DWORD *)uint64_t v26 = 136315138;
        int8x16_t v12 = (void *)RIOPxrUsdObjectCopyPath();
        os_log_type_t type = v10;
        uint64_t v13 = v6;
        uint64_t v14 = a2;
        int8x16_t v15 = (void *)RIOPxrSdfPathCopyString();
        log = v11;
        unint64_t v16 = v5;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;

        a3 = v24;
        a2 = v14;
        uint64_t v6 = v13;
        uint64_t v20 = v17;
        unint64_t v5 = v16;
        *(void *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v31);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23A99F000, log, type, "Start producing an EntityAction for prim at path: %s", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23ECBE8B0](v28, -1, -1);
        MEMORY[0x23ECBE8B0](v26, -1, -1);
      }
      uint64_t v21 = TimelineBuilder.createAction(for:inputs:)(v9, a3);
      swift_release();
      uint64_t result = v30;
      uint64_t v32 = v30;
      unint64_t v23 = *(void *)(v30 + 16);
      unint64_t v22 = *(void *)(v30 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t result = v32;
      }
      ++v8;
      *(void *)(result + 16) = v23 + 1;
      *(void *)(result + 8 * v23 + 32) = v21;
      if (v6 == v8) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t))
{
  unint64_t v5 = a1;
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      unint64_t v34 = v5 & 0xC000000000000001;
      uint64_t v7 = (void *)MEMORY[0x263F8EE78];
      uint64_t v8 = 4;
      uint64_t v28 = v6;
      unint64_t v29 = a3;
      while (1)
      {
        uint64_t v9 = v8 - 4;
        if (v34)
        {
          uint64_t v10 = MEMORY[0x23ECBA630](v8 - 4, v5);
          uint64_t v11 = v8 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(v5 + 8 * v8);
          swift_retain();
          uint64_t v11 = v8 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        os_log_type_t v12 = static os_log_type_t.info.getter();
        if (one-time initialization token for timeline != -1) {
          swift_once();
        }
        uint64_t v35 = v11;
        uint64_t v13 = static OS_os_log.timeline;
        if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, v12))
        {
          swift_retain_n();
          double v33 = v7;
          uint64_t v14 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          uint64_t v36 = v32;
          *(_DWORD *)uint64_t v14 = 136315138;
          int8x16_t v15 = (void *)RIOPxrUsdObjectCopyPath();
          log = v13;
          unint64_t v16 = v5;
          uint64_t v17 = (void *)RIOPxrSdfPathCopyString();
          uint64_t v18 = a2;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_type_t type = v12;
          unint64_t v21 = v20;

          a3 = v29;
          unint64_t v5 = v16;
          uint64_t v22 = v19;
          a2 = v18;
          uint64_t v6 = v28;
          *(void *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v36);
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23A99F000, log, type, "Start producing a Track for prim at path: %s", (uint8_t *)v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23ECBE8B0](v32, -1, -1);
          uint64_t v23 = v14;
          uint64_t v7 = v33;
          MEMORY[0x23ECBE8B0](v23, -1, -1);
        }
        uint64_t v24 = TimelineBuilder.createActions(for:inputs:)(v10, a3);
        swift_release();
        if (v24)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          }
          unint64_t v26 = v7[2];
          unint64_t v25 = v7[3];
          if (v26 >= v25 >> 1) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v7);
          }
          v7[2] = v26 + 1;
          v7[v26 + 4] = v24;
        }
        ++v8;
        if (v35 == v6) {
          goto LABEL_23;
        }
      }
    }
  }
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
LABEL_23:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say10RealityKit17AnimationResourceCG_Sits5NeverOTg509_sSiSay10d5Kit17fg10CGSiIgyod_j8AD_Sits5H11OIegnrzr_TRSiAJSiIgyod_Tf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    return v4;
  }
  uint64_t v7 = result;
  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if (a2 >= v7 && (v3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = v14;
    while (a2 != v7)
    {
      uint64_t result = a3(v7);
      uint64_t v8 = result;
      uint64_t v10 = v9;
      unint64_t v12 = *(void *)(v14 + 16);
      unint64_t v11 = *(void *)(v14 + 24);
      if (v12 >= v11 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v14 + 16) = v12 + 1;
      uint64_t v13 = v14 + 16 * v12;
      *(void *)(v13 + 32) = v8;
      *(void *)(v13 + 40) = v10;
      if (a2 == ++v7) {
        return v4;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized TimelineBuilder.stageSubscription.getter()
{
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  unint64_t v9 = static TimelineConstants.Timeline.primType;
  id v0 = (id)static TimelineConstants.Timeline.primType;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v9;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v9 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int specialized TimelineBuilder.inputDescriptors()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2680;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  uint64_t v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = static EntityBuilder.OutputIdentifier;
  uint64_t v5 = qword_268A584E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(unsigned char *)(inited + 80) = 112;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB2680;
  uint64_t v7 = one-time initialization token for primType;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)static TimelineConstants.Track.primType;
  *(void *)(v6 + 32) = static TimelineConstants.Track.primType;
  uint64_t v9 = one-time initialization token for primType;
  id v10 = v8;
  if (v9 != -1) {
    swift_once();
  }
  unint64_t v11 = (void *)static TimelineConstants.Action.primType;
  *(void *)(v6 + 40) = static TimelineConstants.Action.primType;
  uint64_t v12 = one-time initialization token for realityKitStruct;
  id v13 = v11;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)static ToolsFoundations.Token.realityKitStruct;
  *(void *)(v6 + 48) = static ToolsFoundations.Token.realityKitStruct;
  *(void *)(inited + 88) = 0xD000000000000010;
  *(void *)(inited + 96) = 0x800000023AAAD180;
  *(void *)(inited + 104) = 0xD000000000000027;
  *(void *)(inited + 112) = 0x800000023AAAD120;
  *(void *)(inited + 120) = v6;
  *(void *)(inited + 128) = 1;
  *(unsigned char *)(inited + 136) = 64;
  uint64_t v15 = static EntityBuilder.OutputIdentifier;
  uint64_t v16 = qword_268A584E0;
  *(void *)(inited + 144) = 0xD000000000000010;
  *(void *)(inited + 152) = 0x800000023AAAD1A0;
  *(void *)(inited + 160) = v15;
  *(void *)(inited + 168) = v16;
  *(void *)(inited + 176) = closure #1 in TimelineBuilder.inputDescriptors();
  *(void *)(inited + 184) = 0;
  *(unsigned char *)(inited + 192) = -127;
  id v17 = v14;
  swift_bridgeObjectRetain();
  Swift::Int v18 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v18;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v28 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_43;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
LABEL_3:
    uint64_t v5 = 0;
    uint64_t v25 = v3;
    unint64_t v26 = v3 & 0xC000000000000001;
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v24 = v4;
    while (1)
    {
      if (v26)
      {
        MEMORY[0x23ECBA630](v5, v3);
        BOOL v7 = __OFADD__(v5++, 1);
        if (v7) {
          goto LABEL_42;
        }
      }
      else
      {
        swift_retain();
        BOOL v7 = __OFADD__(v5++, 1);
        if (v7) {
          goto LABEL_42;
        }
      }
      if (v6) {
        break;
      }
      swift_release();
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
LABEL_5:
      specialized Array.append<A>(contentsOf:)((uint64_t)v9);
      if (v5 == v4)
      {
        swift_bridgeObjectRelease();
        return v28;
      }
    }
    uint64_t v27 = v5;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      id v10 = *(id *)(a2 + 8 * v8 + 32);
      if (RIOPxrUsdPrimHasRelationship())
      {
        uint64_t v11 = RIOPxrUsdPrimCopyRelationship();
        type metadata accessor for Relationship();
        uint64_t v12 = (void *)swift_allocObject();
        v12[2] = v11;
        uint64_t v13 = Relationship.targets.getter();
        outlined consume of Result<AnyAttribute, Object.Error>(v12, 0);
      }
      else
      {
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

        uint64_t v13 = MEMORY[0x263F8EE78];
      }
      uint64_t v3 = *(void *)(v13 + 16);
      int64_t v14 = v9[2];
      int64_t v15 = v14 + v3;
      if (__OFADD__(v14, v3))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (!v4) {
          break;
        }
        goto LABEL_3;
      }
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v15 <= v9[3] >> 1)
      {
        if (*(void *)(v13 + 16)) {
          goto LABEL_27;
        }
      }
      else
      {
        if (v14 <= v15) {
          int64_t v17 = v14 + v3;
        }
        else {
          int64_t v17 = v14;
        }
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v17, 1, v9);
        if (*(void *)(v13 + 16))
        {
LABEL_27:
          uint64_t v18 = v9[2];
          if ((v9[3] >> 1) - v18 < v3) {
            goto LABEL_40;
          }
          unint64_t v19 = (unint64_t)&v9[v18 + 4];
          if (v13 + 32 < v19 + 8 * v3 && v19 < v13 + 32 + 8 * v3)
          {
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v3)
          {
            uint64_t v21 = v9[2];
            BOOL v7 = __OFADD__(v21, v3);
            uint64_t v22 = v21 + v3;
            if (v7) {
              goto LABEL_41;
            }
            v9[2] = v22;
          }
          goto LABEL_14;
        }
      }
      if (v3) {
        goto LABEL_39;
      }
LABEL_14:
      swift_bridgeObjectRelease();
      if (v6 == ++v8)
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v4 = v24;
        uint64_t v3 = v25;
        uint64_t v5 = v27;
        goto LABEL_5;
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized TimelineBuilder.printDebug(_:key:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v60 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationView?);
  MEMORY[0x270FA5388](v5 - 8);
  BOOL v7 = (long long *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AnimationView();
  uint64_t v59 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationGroup?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AnimationGroup();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v53 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.debug.getter();
  if (one-time initialization token for timeline != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v16 = swift_allocObject();
  long long v48 = xmmword_23AAB22A0;
  *(_OWORD *)(v16 + 16) = xmmword_23AAB22A0;
  *(void *)(v16 + 56) = MEMORY[0x263F8D310];
  unint64_t v55 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v16 + 64) = v55;
  *(void *)(v16 + 32) = a2;
  *(void *)(v16 + 40) = a3;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  AnimationResource.definition.getter();
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
  int v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (!v17)
  {
    v18(v12, 1, 1, v13);
    goto LABEL_18;
  }
  v18(v12, 0, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
LABEL_18:
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for AnimationGroup?);
    static os_log_type_t.debug.getter();
    return os_log(_:dso:log:_:_:)();
  }
  uint64_t v44 = v14;
  unint64_t v19 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v45 = v13;
  v19(v53, v12, v13);
  uint64_t v20 = *(void *)(AnimationGroup.group.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v52 = v20;
  if (v20)
  {
    a2 = 0;
    uint64_t v14 = v59 + 56;
    uint64_t v50 = (uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
    unint64_t v47 = (void (**)(char *, char *, uint64_t))(v59 + 32);
    uint64_t v46 = (void (**)(uint64_t, uint64_t))(v59 + 8);
    a3 = 32;
    long long v51 = xmmword_23AAB2690;
    uint64_t v12 = (char *)MEMORY[0x263F8D310];
    while (1)
    {
      uint64_t v25 = AnimationGroup.group.getter();
      if (a2 >= *(void *)(v25 + 16))
      {
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v57 = a3;
      outlined init with copy of AnimationDefinition(v25 + a3, (uint64_t)v64);
      swift_bridgeObjectRelease();
      LODWORD(v59) = static os_log_type_t.debug.getter();
      uint64_t v60 = static OS_os_log.timeline;
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v51;
      unint64_t v58 = a2;
      v63[0] = a2;
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v28 = v55;
      *(void *)(v26 + 56) = v12;
      *(void *)(v26 + 64) = v28;
      *(void *)(v26 + 32) = v27;
      *(void *)(v26 + 40) = v29;
      outlined init with copy of AnimationDefinition((uint64_t)v64, (uint64_t)v63);
      uint64_t v30 = String.init<A>(describing:)();
      *(void *)(v26 + 96) = v12;
      *(void *)(v26 + 104) = v28;
      *(void *)(v26 + 72) = v30;
      *(void *)(v26 + 80) = v31;
      __swift_project_boxed_opaque_existential_1(v64, v65);
      dispatch thunk of AnimationDefinition.delay.getter();
      uint64_t v32 = Double.description.getter();
      *(void *)(v26 + 136) = v12;
      *(void *)(v26 + 144) = v28;
      *(void *)(v26 + 112) = v32;
      *(void *)(v26 + 120) = v33;
      uint64_t v13 = v66;
      __swift_project_boxed_opaque_existential_1(v64, v65);
      dispatch thunk of AnimationDefinition.duration.getter();
      uint64_t v34 = Double.description.getter();
      *(void *)(v26 + 176) = v12;
      *(void *)(v26 + 184) = v28;
      *(void *)(v26 + 152) = v34;
      *(void *)(v26 + 160) = v35;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      outlined init with copy of AnimationDefinition((uint64_t)v64, (uint64_t)v63);
      int v36 = swift_dynamicCast();
      double v37 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))v14;
      if (!v36) {
        break;
      }
      v37(v7, 0, 1, v8);
      int v38 = (*v50)((char *)v7, 1, v8);
      uint64_t v40 = v57;
      unint64_t v39 = v58;
      if (v38 == 1) {
        goto LABEL_14;
      }
      uint64_t v13 = (uint64_t)v49;
      (*v47)(v49, (char *)v7, v8);
      AnimationView.source.getter();
      if (!v62)
      {
        (*v46)(v13, v8);
        uint64_t v41 = &v61;
        uint64_t v42 = (uint64_t *)&demangling cache variable for type metadata for AnimationDefinition?;
        goto LABEL_15;
      }
      outlined init with take of AnimationDefinition(&v61, (uint64_t)v63);
      static os_log_type_t.debug.getter();
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = v48;
      outlined init with copy of AnimationDefinition((uint64_t)v63, (uint64_t)&v61);
      uint64_t v22 = String.init<A>(describing:)();
      unint64_t v23 = v55;
      *(void *)(v21 + 56) = MEMORY[0x263F8D310];
      *(void *)(v21 + 64) = v23;
      *(void *)(v21 + 32) = v22;
      *(void *)(v21 + 40) = v24;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v63);
      (*v46)(v13, v8);
LABEL_8:
      a2 = v39 + 1;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v64);
      a3 = v40 + 40;
      if (v52 == a2) {
        return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v53, v45);
      }
    }
    v37(v7, 1, 1, v8);
    uint64_t v40 = v57;
    unint64_t v39 = v58;
LABEL_14:
    uint64_t v41 = v7;
    uint64_t v42 = &demangling cache variable for type metadata for AnimationView?;
LABEL_15:
    outlined destroy of Any?((uint64_t)v41, v42);
    goto LABEL_8;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v53, v45);
}

uint64_t specialized TimelineBuilder.clear(inputs:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationLibraryComponent?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Entity.ComponentSet();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  uint64_t v35 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for AnimationLibraryComponent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v29 - v15;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v17 = static EntityBuilder.OutputName;
  uint64_t v18 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v17, v18, &v37);
  if (!v38)
  {
    outlined destroy of Any?((uint64_t)&v37, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = v36;
  swift_bridgeObjectRelease();
  uint64_t v32 = Inputs.prim.getter();
  type metadata accessor for Entity();
  uint64_t v33 = v19;
  static Entity.__fromCore(_:)();
  dispatch thunk of Entity.components.getter();
  Entity.ComponentSet.subscript.getter();
  uint64_t v20 = v35 + 8;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
  v31(v9, v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) == 1)
  {
    swift_release();
    swift_release();
    swift_release();
    return outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for AnimationLibraryComponent?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v2, v10);
    uint64_t v22 = RIOPxrUsdObjectCopyPath();
    uint64_t v35 = v20;
    unint64_t v23 = (void *)v22;
    uint64_t v24 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v26;

    uint64_t v27 = (void (*)(long long *, void))AnimationLibraryComponent.animations.modify();
    MEMORY[0x23ECB9C10](0, v25, v30);
    v27(&v37, 0);
    dispatch thunk of Entity.components.getter();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    Entity.ComponentSet.set<A>(_:)();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v28(v13, v10);
    v31(v6, v34);
    return ((uint64_t (*)(char *, uint64_t))v28)(v16, v10);
  }
}

uint64_t partial apply for closure #1 in TimelineBuilder.run(inputs:)()
{
  return closure #1 in TimelineBuilder.run(inputs:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_23A9CA944()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t partial apply for closure #2 in closure #1 in TimelineBuilder.run(inputs:)(unint64_t a1)
{
  return closure #2 in closure #1 in TimelineBuilder.run(inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with take of AnimationDefinition(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with copy of AnimationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t type metadata accessor for TimelineBuilder.BindPathWrapper()
{
  uint64_t result = type metadata singleton initialization cache for TimelineBuilder.BindPathWrapper;
  if (!type metadata singleton initialization cache for TimelineBuilder.BindPathWrapper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimelineBuilder.BindPathWrapper(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(uint64_t *a1@<X8>)
{
  closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(*(void *)(v1 + 16), a1);
}

uint64_t outlined init with take of TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineBuilder.Error and conformance TimelineBuilder.Error;
  if (!lazy protocol witness table cache variable for type TimelineBuilder.Error and conformance TimelineBuilder.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineBuilder.Error and conformance TimelineBuilder.Error);
  }
  return result;
}

uint64_t outlined init with copy of BindTarget.EntityPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget.EntityPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of BindTarget.EntityPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget.EntityPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for TimelineBuilder.Error(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for TimelineBuilder.Error(id *a1)
{
}

void **assignWithCopy for TimelineBuilder.Error(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for TimelineBuilder.Error(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineBuilder.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimelineBuilder.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TimelineBuilder.Error(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for TimelineBuilder.Error(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TimelineBuilder.Error()
{
  return &type metadata for TimelineBuilder.Error;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimelineBuilder.BindPathWrapper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for BindTarget.EntityPath();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for TimelineBuilder.BindPathWrapper(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    id v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for TimelineBuilder.BindPathWrapper(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for TimelineBuilder.BindPathWrapper(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for TimelineBuilder.BindPathWrapper(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for TimelineBuilder.BindPathWrapper(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23A9CB6A0);
}

uint64_t sub_23A9CB6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BindTarget.EntityPath();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23A9CB720);
}

uint64_t sub_23A9CB720(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for TimelineBuilder.BindPathWrapper(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BindTarget.EntityPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 1, v4);
}

uint64_t type metadata completion function for TimelineBuilder.BindPathWrapper()
{
  uint64_t result = type metadata accessor for BindTarget.EntityPath();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t SceneDescriptionFoundations.ValueTypeName.description.getter()
{
  id v0 = (id)RIOPxrSdfValueTypeNameCopyToken();
  unint64_t v1 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t SceneDescriptionFoundations.ValueTypeName.token.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCopyToken();
  *a1 = result;
  return result;
}

unint64_t SceneDescriptionFoundations.ValueTypeName.debugDescription.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  id v0 = (id)RIOPxrSdfValueTypeNameCopyToken();
  unint64_t v1 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000010;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

void SceneDescriptionFoundations.ValueTypeName.hash(into:)()
{
  unint64_t v1 = *v0;
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int SceneDescriptionFoundations.ValueTypeName.hashValue.getter()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.ValueTypeName()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.ValueTypeName()
{
  id v0 = (id)RIOPxrSdfValueTypeNameCopyToken();
  unint64_t v1 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef()
{
  unint64_t result = lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef)
  {
    type metadata accessor for RIOPxrSdfValueTypeNameRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.ValueTypeName()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.ValueTypeName()
{
  unint64_t v1 = *v0;
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.ValueTypeName()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void SceneDescriptionFoundations.ValueTypeName.type.getter()
{
}

void RIOPxrSdfValueTypeNameRef.type.getter()
{
  char Bool = (void *)RIOPxrSdfValueTypeNameCreateBool();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  char v1 = static _CFObject.== infix(_:_:)();

  if (v1) {
    return;
  }
  Int32 = (void *)RIOPxrSdfValueTypeNameCreateInt32();
  char v3 = static _CFObject.== infix(_:_:)();

  if (v3) {
    return;
  }
  Int64 = (void *)RIOPxrSdfValueTypeNameCreateInt64();
  char v5 = static _CFObject.== infix(_:_:)();

  if (v5) {
    return;
  }
  UInt8 = (void *)RIOPxrSdfValueTypeNameCreateUInt8();
  char v7 = static _CFObject.== infix(_:_:)();

  if (v7) {
    return;
  }
  UInt32 = (void *)RIOPxrSdfValueTypeNameCreateUInt32();
  char v9 = static _CFObject.== infix(_:_:)();

  if (v9) {
    return;
  }
  UInt64 = (void *)RIOPxrSdfValueTypeNameCreateUInt64();
  char v11 = static _CFObject.== infix(_:_:)();

  if (v11) {
    return;
  }
  Int2 = (void *)RIOPxrSdfValueTypeNameCreateInt2();
  char v13 = static _CFObject.== infix(_:_:)();

  if (v13)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Int32>;
LABEL_14:
    __swift_instantiateConcreteTypeFromMangledName(v14);
    return;
  }
  Int3 = (void *)RIOPxrSdfValueTypeNameCreateInt3();
  char v16 = static _CFObject.== infix(_:_:)();

  if (v16)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Int32>;
    goto LABEL_14;
  }
  Int4 = (void *)RIOPxrSdfValueTypeNameCreateInt4();
  char v18 = static _CFObject.== infix(_:_:)();

  if (v18)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Int32>;
    goto LABEL_14;
  }
  Half = (void *)RIOPxrSdfValueTypeNameCreateHalf();
  char v20 = static _CFObject.== infix(_:_:)();

  if (v20) {
    return;
  }
  Half2 = (void *)RIOPxrSdfValueTypeNameCreateHalf2();
  char v22 = static _CFObject.== infix(_:_:)();

  if (v22)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Half>;
    goto LABEL_14;
  }
  Half3 = (void *)RIOPxrSdfValueTypeNameCreateHalf3();
  char v24 = static _CFObject.== infix(_:_:)();

  if (v24)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Half>;
    goto LABEL_14;
  }
  Half4 = (void *)RIOPxrSdfValueTypeNameCreateHalf4();
  char v26 = static _CFObject.== infix(_:_:)();

  if (v26)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Half>;
    goto LABEL_14;
  }
  char Float = (void *)RIOPxrSdfValueTypeNameCreateFloat();
  char v28 = static _CFObject.== infix(_:_:)();

  if (v28) {
    return;
  }
  Float2 = (void *)RIOPxrSdfValueTypeNameCreateFloat2();
  char v30 = static _CFObject.== infix(_:_:)();

  if (v30)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Float>;
    goto LABEL_14;
  }
  Float3 = (void *)RIOPxrSdfValueTypeNameCreateFloat3();
  char v32 = static _CFObject.== infix(_:_:)();

  if (v32)
  {
    uint64_t v14 = &demangling cache variable for type metadata for SIMD3<Float>;
    goto LABEL_14;
  }
  Float4 = (void *)RIOPxrSdfValueTypeNameCreateFloat4();
  char v34 = static _CFObject.== infix(_:_:)();

  if (v34)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
    goto LABEL_14;
  }
  Double = (void *)RIOPxrSdfValueTypeNameCreateDouble();
  char v36 = static _CFObject.== infix(_:_:)();

  if (v36) {
    return;
  }
  Double2 = (void *)RIOPxrSdfValueTypeNameCreateDouble2();
  char v38 = static _CFObject.== infix(_:_:)();

  if (v38)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Double>;
    goto LABEL_14;
  }
  Double3 = (void *)RIOPxrSdfValueTypeNameCreateDouble3();
  char v40 = static _CFObject.== infix(_:_:)();

  if (v40)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Double>;
    goto LABEL_14;
  }
  Double4 = (void *)RIOPxrSdfValueTypeNameCreateDouble4();
  char v42 = static _CFObject.== infix(_:_:)();

  if (v42)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Double>;
    goto LABEL_14;
  }
  Color3h = (void *)RIOPxrSdfValueTypeNameCreateColor3h();
  char v44 = static _CFObject.== infix(_:_:)();

  if (v44)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Color3<Half>;
    goto LABEL_14;
  }
  Color3f = (void *)RIOPxrSdfValueTypeNameCreateColor3f();
  char v46 = static _CFObject.== infix(_:_:)();

  if (v46)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Color3<Float>;
    goto LABEL_14;
  }
  Color3d = (void *)RIOPxrSdfValueTypeNameCreateColor3d();
  char v48 = static _CFObject.== infix(_:_:)();

  if (v48)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Color3<Double>;
    goto LABEL_14;
  }
  Point3h = (void *)RIOPxrSdfValueTypeNameCreatePoint3h();
  char v50 = static _CFObject.== infix(_:_:)();

  if (v50)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Point3<Half>;
    goto LABEL_14;
  }
  Point3f = (void *)RIOPxrSdfValueTypeNameCreatePoint3f();
  char v52 = static _CFObject.== infix(_:_:)();

  if (v52)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Point3<Float>;
    goto LABEL_14;
  }
  Point3d = (void *)RIOPxrSdfValueTypeNameCreatePoint3d();
  char v54 = static _CFObject.== infix(_:_:)();

  if (v54)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Point3<Double>;
    goto LABEL_14;
  }
  Normal3h = (void *)RIOPxrSdfValueTypeNameCreateNormal3h();
  char v56 = static _CFObject.== infix(_:_:)();

  if (v56)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Half>;
    goto LABEL_14;
  }
  Normal3f = (void *)RIOPxrSdfValueTypeNameCreateNormal3f();
  char v58 = static _CFObject.== infix(_:_:)();

  if (v58)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Float>;
    goto LABEL_14;
  }
  Normal3d = (void *)RIOPxrSdfValueTypeNameCreateNormal3d();
  char v60 = static _CFObject.== infix(_:_:)();

  if (v60)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Double>;
    goto LABEL_14;
  }
  Vector3h = (void *)RIOPxrSdfValueTypeNameCreateVector3h();
  char v62 = static _CFObject.== infix(_:_:)();

  if (v62)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Half>;
    goto LABEL_14;
  }
  Vector3f = (void *)RIOPxrSdfValueTypeNameCreateVector3f();
  char v64 = static _CFObject.== infix(_:_:)();

  if (v64)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Float>;
    goto LABEL_14;
  }
  Vector3d = (void *)RIOPxrSdfValueTypeNameCreateVector3d();
  char v66 = static _CFObject.== infix(_:_:)();

  if (v66)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Double>;
    goto LABEL_14;
  }
  Color4h = (void *)RIOPxrSdfValueTypeNameCreateColor4h();
  char v68 = static _CFObject.== infix(_:_:)();

  if (v68)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Color4<Half>;
    goto LABEL_14;
  }
  Color4f = (void *)RIOPxrSdfValueTypeNameCreateColor4f();
  char v70 = static _CFObject.== infix(_:_:)();

  if (v70)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Color4<Float>;
    goto LABEL_14;
  }
  Color4d = (void *)RIOPxrSdfValueTypeNameCreateColor4d();
  char v72 = static _CFObject.== infix(_:_:)();

  if (v72)
  {
    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for Color4<Double>;
    goto LABEL_14;
  }
  Quath = (void *)RIOPxrSdfValueTypeNameCreateQuath();
  char v74 = static _CFObject.== infix(_:_:)();

  if ((v74 & 1) != 0
    || (Quatf = (void *)RIOPxrSdfValueTypeNameCreateQuatf(),
        char v76 = static _CFObject.== infix(_:_:)(),
        Quatf,
        (v76 & 1) != 0))
  {
    type metadata accessor for simd_quatf(0);
    return;
  }
  Quatd = (void *)RIOPxrSdfValueTypeNameCreateQuatd();
  char v78 = static _CFObject.== infix(_:_:)();

  if (v78)
  {
    type metadata accessor for simd_quatd(0);
    return;
  }
  Matrix2d = (void *)RIOPxrSdfValueTypeNameCreateMatrix2d();
  char v80 = static _CFObject.== infix(_:_:)();

  if (v80)
  {
    type metadata accessor for simd_double2x2(0);
    return;
  }
  Matrix3d = (void *)RIOPxrSdfValueTypeNameCreateMatrix3d();
  char v82 = static _CFObject.== infix(_:_:)();

  if (v82)
  {
    type metadata accessor for simd_double3x3(0);
    return;
  }
  Matrix4d = (void *)RIOPxrSdfValueTypeNameCreateMatrix4d();
  char v84 = static _CFObject.== infix(_:_:)();

  if (v84)
  {
    type metadata accessor for simd_double4x4(0);
    return;
  }
  Frame4d = (void *)RIOPxrSdfValueTypeNameCreateFrame4d();
  char v86 = static _CFObject.== infix(_:_:)();

  if ((v86 & 1) == 0)
  {
    String = (void *)RIOPxrSdfValueTypeNameCreateString();
    char v88 = static _CFObject.== infix(_:_:)();

    if ((v88 & 1) == 0)
    {
      TexCoord2h = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2h();
      char v90 = static _CFObject.== infix(_:_:)();

      if (v90)
      {
        uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Half>;
      }
      else
      {
        TexCoord2f = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2f();
        char v92 = static _CFObject.== infix(_:_:)();

        if (v92)
        {
          uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Float>;
        }
        else
        {
          TexCoord2d = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2d();
          char v94 = static _CFObject.== infix(_:_:)();

          if (v94)
          {
            uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Double>;
          }
          else
          {
            TexCoord3h = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3h();
            char v96 = static _CFObject.== infix(_:_:)();

            if (v96)
            {
              uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Half>;
            }
            else
            {
              TexCoord3f = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3f();
              char v98 = static _CFObject.== infix(_:_:)();

              if (v98)
              {
                uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Float>;
              }
              else
              {
                TexCoord3d = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3d();
                char v100 = static _CFObject.== infix(_:_:)();

                if (v100)
                {
                  uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Double>;
                }
                else
                {
                  AssetPath = (void *)RIOPxrSdfValueTypeNameCreateAssetPath();
                  char v102 = static _CFObject.== infix(_:_:)();

                  if (v102) {
                    return;
                  }
                  Token = (void *)RIOPxrSdfValueTypeNameCreateToken();
                  char v104 = static _CFObject.== infix(_:_:)();

                  if (v104) {
                    return;
                  }
                  BoolArray = (void *)RIOPxrSdfValueTypeNameCreateBoolArray();
                  char v106 = static _CFObject.== infix(_:_:)();

                  if (v106)
                  {
                    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Bool];
                  }
                  else
                  {
                    Int32Array = (void *)RIOPxrSdfValueTypeNameCreateInt32Array();
                    char v108 = static _CFObject.== infix(_:_:)();

                    if (v108)
                    {
                      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Int32];
                    }
                    else
                    {
                      UInt8Array = (void *)RIOPxrSdfValueTypeNameCreateUInt8Array();
                      char v110 = static _CFObject.== infix(_:_:)();

                      if (v110)
                      {
                        uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [UInt8];
                      }
                      else
                      {
                        UInt32Array = (void *)RIOPxrSdfValueTypeNameCreateUInt32Array();
                        char v112 = static _CFObject.== infix(_:_:)();

                        if (v112)
                        {
                          uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [UInt32];
                        }
                        else
                        {
                          Int64Array = (void *)RIOPxrSdfValueTypeNameCreateInt64Array();
                          char v114 = static _CFObject.== infix(_:_:)();

                          if (v114)
                          {
                            uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Int64];
                          }
                          else
                          {
                            UInt64Array = (void *)RIOPxrSdfValueTypeNameCreateUInt64Array();
                            char v116 = static _CFObject.== infix(_:_:)();

                            if (v116)
                            {
                              uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [UInt64];
                            }
                            else
                            {
                              Int2Array = (void *)RIOPxrSdfValueTypeNameCreateInt2Array();
                              char v118 = static _CFObject.== infix(_:_:)();

                              if (v118)
                              {
                                uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Int32>];
                              }
                              else
                              {
                                Int3Array = (void *)RIOPxrSdfValueTypeNameCreateInt3Array();
                                char v120 = static _CFObject.== infix(_:_:)();

                                if (v120)
                                {
                                  uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Int32>];
                                }
                                else
                                {
                                  Int4Array = (void *)RIOPxrSdfValueTypeNameCreateInt4Array();
                                  char v122 = static _CFObject.== infix(_:_:)();

                                  if (v122)
                                  {
                                    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Int32>];
                                  }
                                  else
                                  {
                                    HalfArray = (void *)RIOPxrSdfValueTypeNameCreateHalfArray();
                                    char v124 = static _CFObject.== infix(_:_:)();

                                    if (v124)
                                    {
                                      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Half];
                                    }
                                    else
                                    {
                                      Half2Array = (void *)RIOPxrSdfValueTypeNameCreateHalf2Array();
                                      char v126 = static _CFObject.== infix(_:_:)();

                                      if (v126)
                                      {
                                        uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Half>];
                                      }
                                      else
                                      {
                                        Half3Array = (void *)RIOPxrSdfValueTypeNameCreateHalf3Array();
                                        char v128 = static _CFObject.== infix(_:_:)();

                                        if (v128)
                                        {
                                          uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Half>];
                                        }
                                        else
                                        {
                                          Half4Array = (void *)RIOPxrSdfValueTypeNameCreateHalf4Array();
                                          char v130 = static _CFObject.== infix(_:_:)();

                                          if (v130)
                                          {
                                            uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Half>];
                                          }
                                          else
                                          {
                                            FloatArray = (void *)RIOPxrSdfValueTypeNameCreateFloatArray();
                                            char v132 = static _CFObject.== infix(_:_:)();

                                            if (v132)
                                            {
                                              uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Float];
                                            }
                                            else
                                            {
                                              Float2Array = (void *)RIOPxrSdfValueTypeNameCreateFloat2Array();
                                              char v134 = static _CFObject.== infix(_:_:)();

                                              if (v134)
                                              {
                                                uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Float>];
                                              }
                                              else
                                              {
                                                Float3Array = (void *)RIOPxrSdfValueTypeNameCreateFloat3Array();
                                                char v136 = static _CFObject.== infix(_:_:)();

                                                if (v136)
                                                {
                                                  uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Float>];
                                                }
                                                else
                                                {
                                                  Float4Array = (void *)RIOPxrSdfValueTypeNameCreateFloat4Array();
                                                  char v138 = static _CFObject.== infix(_:_:)();

                                                  if (v138)
                                                  {
                                                    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Float>];
                                                  }
                                                  else
                                                  {
                                                    DoubleArray = (void *)RIOPxrSdfValueTypeNameCreateDoubleArray();
                                                    char v140 = static _CFObject.== infix(_:_:)();

                                                    if (v140)
                                                    {
                                                      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Double];
                                                    }
                                                    else
                                                    {
                                                      Double2Array = (void *)RIOPxrSdfValueTypeNameCreateDouble2Array();
                                                      char v142 = static _CFObject.== infix(_:_:)();

                                                      if (v142)
                                                      {
                                                        uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Double>];
                                                      }
                                                      else
                                                      {
                                                        Double3Array = (void *)RIOPxrSdfValueTypeNameCreateDouble3Array();
                                                        char v144 = static _CFObject.== infix(_:_:)();

                                                        if (v144)
                                                        {
                                                          uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Double>];
                                                        }
                                                        else
                                                        {
                                                          Double4Array = (void *)RIOPxrSdfValueTypeNameCreateDouble4Array();
                                                          char v146 = static _CFObject.== infix(_:_:)();

                                                          if (v146)
                                                          {
                                                            uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Double>];
                                                          }
                                                          else
                                                          {
                                                            Vector3hArray = (void *)RIOPxrSdfValueTypeNameCreateVector3hArray();
                                                            char v148 = static _CFObject.== infix(_:_:)();

                                                            if (v148)
                                                            {
                                                              uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Half>];
                                                            }
                                                            else
                                                            {
                                                              Vector3fArray = (void *)RIOPxrSdfValueTypeNameCreateVector3fArray();
                                                              char v150 = static _CFObject.== infix(_:_:)();

                                                              if (v150)
                                                              {
                                                                uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Float>];
                                                              }
                                                              else
                                                              {
                                                                Vector3dArray = (void *)RIOPxrSdfValueTypeNameCreateVector3dArray();
                                                                char v152 = static _CFObject.== infix(_:_:)();

                                                                if (v152)
                                                                {
                                                                  uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Double>];
                                                                }
                                                                else
                                                                {
                                                                  TexCoord2hArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2hArray();
                                                                  char v154 = static _CFObject.== infix(_:_:)();

                                                                  if (v154)
                                                                  {
                                                                    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Half>];
                                                                  }
                                                                  else
                                                                  {
                                                                    TexCoord2fArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2fArray();
                                                                    char v156 = static _CFObject.== infix(_:_:)();

                                                                    if (v156)
                                                                    {
                                                                      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Float>];
                                                                    }
                                                                    else
                                                                    {
                                                                      TexCoord2dArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2dArray();
                                                                      char v158 = static _CFObject.== infix(_:_:)();

                                                                      if (v158)
                                                                      {
                                                                        uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Double>];
                                                                      }
                                                                      else
                                                                      {
                                                                        TexCoord3hArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3hArray();
                                                                        char v160 = static _CFObject.== infix(_:_:)();

                                                                        if (v160)
                                                                        {
                                                                          uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Half>];
                                                                        }
                                                                        else
                                                                        {
                                                                          TexCoord3fArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3fArray();
                                                                          char v162 = static _CFObject.== infix(_:_:)();

                                                                          if (v162)
                                                                          {
                                                                            uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Float>];
                                                                          }
                                                                          else
                                                                          {
                                                                            TexCoord3dArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3dArray();
                                                                            char v164 = static _CFObject.== infix(_:_:)();

                                                                            if (v164)
                                                                            {
                                                                              uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Double>];
                                                                            }
                                                                            else
                                                                            {
                                                                              Normal3hArray = (void *)RIOPxrSdfValueTypeNameCreateNormal3hArray();
                                                                              char v166 = static _CFObject.== infix(_:_:)();

                                                                              if (v166)
                                                                              {
                                                                                uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Half>];
                                                                              }
                                                                              else
                                                                              {
                                                                                Normal3fArray = (void *)RIOPxrSdfValueTypeNameCreateNormal3fArray();
                                                                                char v168 = static _CFObject.== infix(_:_:)();

                                                                                if (v168)
                                                                                {
                                                                                  uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Float>];
                                                                                }
                                                                                else
                                                                                {
                                                                                  Normal3dArray = (void *)RIOPxrSdfValueTypeNameCreateNormal3dArray();
                                                                                  char v170 = static _CFObject.== infix(_:_:)();

                                                                                  if (v170)
                                                                                  {
                                                                                    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Double>];
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    Point3hArray = (void *)RIOPxrSdfValueTypeNameCreatePoint3hArray();
                                                                                    char v172 = static _CFObject.== infix(_:_:)();

                                                                                    if (v172)
                                                                                    {
                                                                                      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Half>];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      Point3fArray = (void *)RIOPxrSdfValueTypeNameCreatePoint3fArray();
                                                                                      char v174 = static _CFObject.== infix(_:_:)();

                                                                                      if (v174)
                                                                                      {
                                                                                        uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Float>];
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        Point3dArray = (void *)RIOPxrSdfValueTypeNameCreatePoint3dArray();
                                                                                        char v176 = static _CFObject.== infix(_:_:)();

                                                                                        if (v176)
                                                                                        {
                                                                                          uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Double>];
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          Color3hArray = (void *)RIOPxrSdfValueTypeNameCreateColor3hArray();
                                                                                          char v178 = static _CFObject.== infix(_:_:)();

                                                                                          if (v178)
                                                                                          {
                                                                                            uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Half>];
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            Color3fArray = (void *)RIOPxrSdfValueTypeNameCreateColor3fArray();
                                                                                            char v180 = static _CFObject.== infix(_:_:)();

                                                                                            if (v180)
                                                                                            {
                                                                                              uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Float>];
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              Color3dArray = (void *)RIOPxrSdfValueTypeNameCreateColor3dArray();
                                                                                              char v182 = static _CFObject.== infix(_:_:)();

                                                                                              if (v182)
                                                                                              {
                                                                                                uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Double>];
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                Color4hArray = (void *)RIOPxrSdfValueTypeNameCreateColor4hArray();
                                                                                                char v184 = static _CFObject.== infix(_:_:)();

                                                                                                if (v184)
                                                                                                {
                                                                                                  uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Half>];
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  Color4fArray = (void *)RIOPxrSdfValueTypeNameCreateColor4fArray();
                                                                                                  char v186 = static _CFObject.== infix(_:_:)();

                                                                                                  if (v186)
                                                                                                  {
                                                                                                    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Float>];
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    Color4dArray = (void *)RIOPxrSdfValueTypeNameCreateColor4dArray();
                                                                                                    char v188 = static _CFObject.== infix(_:_:)();

                                                                                                    if (v188)
                                                                                                    {
                                                                                                      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Double>];
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      QuathArray = (void *)RIOPxrSdfValueTypeNameCreateQuathArray();
                                                                                                      char v190 = static _CFObject.== infix(_:_:)();

                                                                                                      if (v190 & 1) != 0 || (QuatfArray = (void *)RIOPxrSdfValueTypeNameCreateQuatfArray(), char v192 = static _CFObject.== infix(_:_:)(), QuatfArray, (v192))
                                                                                                      {
                                                                                                        uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatf];
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        QuatdArray = (void *)RIOPxrSdfValueTypeNameCreateQuatdArray();
                                                                                                        char v194 = static _CFObject.== infix(_:_:)();

                                                                                                        if (v194)
                                                                                                        {
                                                                                                          uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatd];
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          Matrix2dArray = (void *)RIOPxrSdfValueTypeNameCreateMatrix2dArray();
                                                                                                          char v196 = static _CFObject.== infix(_:_:)();

                                                                                                          if (v196)
                                                                                                          {
                                                                                                            uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_double2x2];
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            Matrix3dArray = (void *)RIOPxrSdfValueTypeNameCreateMatrix3dArray();
                                                                                                            char v198 = static _CFObject.== infix(_:_:)();

                                                                                                            if (v198)
                                                                                                            {
                                                                                                              uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_double3x3];
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              Matrix4dArray = (void *)RIOPxrSdfValueTypeNameCreateMatrix4dArray();
                                                                                                              char v200 = static _CFObject.== infix(_:_:)();

                                                                                                              if (v200)
                                                                                                              {
                                                                                                                uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_double4x4];
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                Frame4dArray = (void *)RIOPxrSdfValueTypeNameCreateFrame4dArray();
                                                                                                                char v202 = static _CFObject.== infix(_:_:)();

                                                                                                                if (v202)
                                                                                                                {
                                                                                                                  uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [Frame4D];
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  StringArray = (void *)RIOPxrSdfValueTypeNameCreateStringArray();
                                                                                                                  char v204 = static _CFObject.== infix(_:_:)();

                                                                                                                  if (v204)
                                                                                                                  {
                                                                                                                    uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [String];
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    TokenArray = (void *)RIOPxrSdfValueTypeNameCreateTokenArray();
                                                                                                                    char v206 = static _CFObject.== infix(_:_:)();

                                                                                                                    if (v206)
                                                                                                                    {
                                                                                                                      uint64_t v14 = &demangling cache variable for type metadata for [ToolsFoundations.Token];
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      AssetPathArray = (void *)RIOPxrSdfValueTypeNameCreateAssetPathArray();
                                                                                                                      char v208 = static _CFObject.== infix(_:_:)();

                                                                                                                      if ((v208 & 1) == 0) {
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath];
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_14;
    }
  }
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Bool.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateBool();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt32();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int64.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt64();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt32();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt8.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt8();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt64.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt64();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreatePoint3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreatePoint3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreatePoint3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateVector3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateVector3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateVector3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateNormal3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateNormal3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateNormal3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor4h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor4f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor4d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Quath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuath();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Quatf.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatf();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Quatd.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatd();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix2d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix2d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix4d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix4d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Frame4d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFrame4d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.String.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateString();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Token.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateToken();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.AssetPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateAssetPath();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.BoolArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateBoolArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int32Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt32Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int64Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt64Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt32Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt32Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt8Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt8Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt64Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt64Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.HalfArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalfArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.FloatArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloatArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.DoubleArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDoubleArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor4hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor4fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateColor4dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreatePoint3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreatePoint3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreatePoint3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateVector3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateVector3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateVector3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateNormal3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateNormal3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateNormal3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.QuathArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuathArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.QuatfArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatfArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.QuatdArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatdArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix2dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix2dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix4dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix4dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Frame4dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFrame4dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.StringArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateStringArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TokenArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTokenArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.AssetPathArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateAssetPathArray();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName);
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.ValueTypeName()
{
  return &type metadata for SceneDescriptionFoundations.ValueTypeName;
}

uint64_t closure #2 in TriggerBuilder.inputDescriptors()()
{
  if (!RIOPxrUsdStageHasPrimAtPrimPath()) {
    return 0;
  }
  id v0 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = PrimIfNeeded;
  if (String.count.getter() < 1) {
    id v3 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v3 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v4 = v3;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  char v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
    swift_release();

    return 0;
  }
  char v7 = (void *)v6;
  uint64_t v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {
    swift_release();

    return 0;
  }
  char v9 = (void *)v8;

  int v10 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized closure #3 in TriggerBuilder.inputDescriptors()()
{
  if (!closure #2 in TriggerBuilder.inputDescriptors()()) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v2 = v0;
  uint64_t v3 = v1;
  if (one-time initialization token for actionTypesUsingAffectedObjects != -1) {
    swift_once();
  }
  uint64_t v4 = static TriggerBuilder.actionTypesUsingAffectedObjects;
  swift_bridgeObjectRetain();
  char v5 = specialized Set.contains(_:)(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5) {
    uint64_t v6 = closure #1 in ActionBuilder.inputDescriptors()();
  }
  else {
    uint64_t v6 = MEMORY[0x263F8EE88];
  }
  swift_release();
  return v6;
}

uint64_t specialized closure #4 in TriggerBuilder.inputDescriptors()()
{
  if (closure #2 in TriggerBuilder.inputDescriptors()())
  {
    if (v0 == 0x6564696C6C6F43 && v1 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        uint64_t v2 = MEMORY[0x263F8EE88];
        goto LABEL_9;
      }
    }
    uint64_t v2 = closure #1 in ActionBuilder.inputDescriptors()();
LABEL_9:
    swift_release();
    return v2;
  }
  return MEMORY[0x263F8EE88];
}

uint64_t specialized closure #5 in TriggerBuilder.inputDescriptors()()
{
  if (closure #2 in TriggerBuilder.inputDescriptors()())
  {
    if (v0 == 0x7574736547706154 && v1 == 0xEA00000000006572)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        uint64_t v2 = MEMORY[0x263F8EE88];
        goto LABEL_9;
      }
    }
    uint64_t v2 = closure #1 in ActionBuilder.inputDescriptors()();
LABEL_9:
    swift_release();
    return v2;
  }
  return MEMORY[0x263F8EE88];
}

uint64_t TriggerBuilder.run(inputs:)(uint64_t a1)
{
  void (*v17)(_OWORD *__return_ptr, long long *);
  uint64_t v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _OWORD v24[2];
  long long v25;
  uint64_t v26;
  uint64_t vars8;

  uint64_t v2 = v1;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    unint64_t v23 = 0;
LABEL_21:
    *(void *)&uint64_t v25 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v23, 1);
    return specialized TriggerBuilder.clear(inputs:)();
  }
  char v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
LABEL_20:
    unint64_t v23 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_21;
  }
  char v7 = (void *)v6;
  uint64_t v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {

    goto LABEL_20;
  }
  char v9 = (void *)v8;

  swift_release();
  int v10 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v9, 0);
  if (one-time initialization token for triggerTypeToTriggerSpecificationsGenerator != -1) {
    swift_once();
  }
  uint64_t v14 = static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator;
  if (*((void *)static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator + 2)
    && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13), (v16 & 1) != 0))
  {
    uint64_t v17 = *(void (**)(_OWORD *__return_ptr, long long *))(v14[7] + 16 * v15);
    swift_retain();
    swift_bridgeObjectRelease();
    *(void *)&uint64_t v25 = a1;
    v17(v24, &v25);
    swift_release();
    char v18 = *(void *)&v24[0];
    swift_beginAccess();
    uint64_t v19 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.OutputsReference);
    unint64_t result = swift_endAccess();
    if (v19)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(v24, &v25);
      type metadata accessor for Outputs();
      swift_dynamicCast();
      if (one-time initialization token for OutputName != -1) {
        swift_once();
      }
      uint64_t v21 = static TriggerBuilder.OutputName;
      char v22 = *(void *)algn_268A58208;
      char v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
      *(void *)&uint64_t v25 = v18;
      swift_bridgeObjectRetain();
      Outputs.subscript.setter((uint64_t)&v25, v21, v22);
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return specialized TriggerBuilder.clear(inputs:)();
  }
  return result;
}

void *one-time initialization function for triggerTypeToTriggerSpecificationsGenerator()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (_:))>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2870;
  *(void *)(inited + 32) = 0x6564696C6C6F43;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(void *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "Notification");
  *(unsigned char *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  *(void *)(inited + 80) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0xD000000000000011;
  *(void *)(inited + 104) = 0x800000023AAADA30;
  *(void *)(inited + 112) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0x617254656E656353;
  *(void *)(inited + 136) = 0xEF6E6F697469736ELL;
  *(void *)(inited + 144) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(void *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0x7574736547706154;
  *(void *)(inited + 168) = 0xEA00000000006572;
  *(void *)(inited + 176) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(void *)(inited + 184) = 0;
  unint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = implicit closure #2 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator();
  *a1 = result;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
  uint64_t v2 = type metadata accessor for __RKEntityTriggerSpecification();
  char v3 = *(void *)(v2 - 8);
  id v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  char v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23AAB22A0;
  uint64_t result = (*(uint64_t (**)(unint64_t, void, uint64_t))(v3 + 104))(v5 + v4, *MEMORY[0x263F163D8], v2);
  *a1 = v5;
  return result;
}

void *specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification])@<X0>(void *a1@<X8>)
{
  uint64_t result = implicit closure #3 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator();
  *a1 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = implicit closure #5 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator(*a1);
  *a2 = result;
  return result;
}

uint64_t implicit closure #2 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator()
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)v8);

  swift_release();
  uint64_t v2 = (void *)v8[0];
  uint64_t v1 = v8[1];
  if (v9)
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<String, Object.Error>(v2, v1, 1);
    return MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    uint64_t v4 = *(void *)(type metadata accessor for __RKEntityTriggerSpecification() - 8);
    unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_23AAB22A0;
    uint64_t v6 = (void *)(v3 + v5);
    *uint64_t v6 = v2;
    v6[1] = v1;
    (*(void (**)(void))(v4 + 104))();
  }
  return v3;
}

void *implicit closure #3 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator()
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v7);

  uint64_t v1 = swift_release();
  uint64_t v2 = v7;
  if (v8)
  {
    uint64_t v6 = v7;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v2, 1);
    LODWORD(v2) = 0;
  }
  char v7 = (void *)MEMORY[0x263F8EE78];
  MEMORY[0x270FA5388](v1);
  v4[2] = &v7;
  int v5 = (int)v2;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:), (uint64_t)v4);
  return v7;
}

uint64_t implicit closure #5 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  v2[2] = &v3;
  v2[3] = a1;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_268A4BAA8, (uint64_t)partial apply for closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:), (uint64_t)v2);
  return v3;
}

uint64_t type metadata accessor for TriggerBuilder()
{
  return self;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance TriggerBuilder()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_268A58208;
  *(void *)(inited + 32) = static TriggerBuilder.OutputName;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 0xD000000000000020;
  *(void *)(inited + 56) = 0x800000023AAAD9E0;
  *(unsigned char *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  Swift::Int v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t specialized TriggerBuilder.stageSubscription.getter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v23 = (unint64_t)v0;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v23 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v23;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8EE88];
  uint64_t v6 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  swift_retain();
  if (String.count.getter() < 1) {
    id v7 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v7 = (id)RIOPxrTfTokenCreateWithCString();
  }
  char v8 = v7;
  type metadata accessor for NamedPropertyDirtyState();
  char v9 = (void *)swift_allocObject();
  v9[4] = v8;
  id v10 = v8;
  id v11 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v10, v5);

  v9[2] = v5;
  v9[3] = v11;
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AAB22C0;
  *(void *)(v12 + 32) = v9;
  unint64_t v23 = v12;
  specialized Array._endMutation()();
  unint64_t v13 = v23;
  swift_retain();
  uint64_t v14 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for PrimDirtyState();
  swift_allocObject();
  uint64_t v15 = PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(v5, v14, 0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_23AAB22C0;
  *(void *)(v16 + 32) = v15;
  unint64_t v23 = v16;
  specialized Array._endMutation()();
  unint64_t v17 = v23;
  swift_retain();
  uint64_t v18 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v17);
  swift_bridgeObjectRelease();
  swift_release();
  swift_allocObject();
  uint64_t v19 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v5, v18, 0);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_23AAB2570;
  *(void *)(v20 + 32) = v6;
  *(void *)(v20 + 40) = v19;
  unint64_t v23 = v20;
  specialized Array._endMutation()();
  uint64_t v21 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v23);
  swift_bridgeObjectRelease();
  swift_release();
  return v21;
}

uint64_t specialized TriggerBuilder.inputDescriptors()()
{
  uint64_t v6 = MEMORY[0x263F8EE88];
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = static EntityBuilder.OutputName;
  uint64_t v0 = *(void *)algn_268A4BAA8;
  uint64_t v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  v20[0] = v1;
  v20[1] = v0;
  v20[2] = static EntityBuilder.OutputIdentifier;
  v20[3] = qword_268A584E0;
  v20[4] = specialized closure #3 in TriggerBuilder.inputDescriptors();
  v20[5] = 0;
  char v21 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v14, (uint64_t)v20);
  outlined consume of InputDescriptor(v14, *((uint64_t *)&v14 + 1), v15, v16, v17, v18, v19);
  long long v14 = xmmword_23AAB2880;
  uint64_t v15 = static EntityBuilder.OutputIdentifier;
  uint64_t v16 = qword_268A584E0;
  unint64_t v17 = specialized closure #4 in TriggerBuilder.inputDescriptors();
  uint64_t v18 = 0;
  unsigned __int8 v19 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v7, (uint64_t)&v14);
  outlined consume of InputDescriptor(v7, v8, v9, v10, v11, v12, v13);
  uint64_t v7 = 0xD00000000000001ALL;
  uint64_t v8 = 0x800000023AAADA10;
  uint64_t v9 = 0xD00000000000001ALL;
  uint64_t v10 = 0x800000023AAADA10;
  id v11 = specialized closure #5 in TriggerBuilder.inputDescriptors();
  uint64_t v12 = 0;
  unsigned __int8 v13 = -127;
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)&v7);
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t specialized TriggerBuilder.clear(inputs:)()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v5, v6);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    uint64_t v3 = static TriggerBuilder.OutputName;
    uint64_t v4 = *(void *)algn_268A58208;
    memset(v6, 0, sizeof(v6));
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)v6, v3, v4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void partial apply for closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t partial apply for closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:)(*(float *)(v2 + 24), a1, a2, *(unint64_t **)(v2 + 16));
}

void outlined consume of Result<String, Object.Error>(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    outlined consume of Object.Error(a1);
  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t AttributeMetadata.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributeMetadata.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static AttributeMetadata.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t AttributeMetadata.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int AttributeMetadata.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance AttributeMetadata<A>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return AttributeMetadata.init(stringLiteral:)(*a1, a1[1], a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeMetadata<A>()
{
  return Hasher._finalize()();
}

uint64_t RelationshipMetadata.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

RealityIO::RelationshipMetadata __swiftcall RelationshipMetadata.init(stringLiteral:)(RealityIO::RelationshipMetadata stringLiteral)
{
  RealityIO::RelationshipMetadata *v1 = stringLiteral;
  return stringLiteral;
}

uint64_t static RelationshipMetadata.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t RelationshipMetadata.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int RelationshipMetadata.hashValue.getter()
{
  return Hasher._finalize()();
}

void *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance RelationshipMetadata@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RelationshipMetadata(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RelationshipMetadata()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RelationshipMetadata()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RelationshipMetadata()
{
  return Hasher._finalize()();
}

uint64_t base witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral in AttributeMetadata<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in AttributeMetadata<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByUnicodeScalarLiteral in AttributeMetadata<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type RelationshipMetadata and conformance RelationshipMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata;
  if (!lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata;
  if (!lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata;
  if (!lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata);
  }
  return result;
}

uint64_t type metadata instantiation function for AttributeMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

void *initializeBufferWithCopyOfBuffer for AttributeMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AttributeMetadata()
{
  return swift_bridgeObjectRelease();
}

void *assignWithTake for AttributeMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for AttributeMetadata()
{
  return __swift_instantiateGenericMetadata();
}

void *assignWithCopy for AttributeMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RelationshipMetadata()
{
  return &type metadata for RelationshipMetadata;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t StageDirtyState.__allocating_init(primsContainAnyOf:)(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  type metadata accessor for StageDirtyState();
  uint64_t v2 = swift_allocObject();
  StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v1, 0);
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO14PrimDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d9IO15Stagegh122C26stageMetadataContainsAnyOf012primsContainiJ04coreACShyAA16ToolsFoundationsO5TokenVG_ShyAA04PrimdE0CGSo010RIOBuilderdC13J73RefaSgtcfcSo0rdqsT0aAMcfu_32f3b6550bcda465057a28ab83a1317178AmSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.count.getter();
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v3) {
      return result;
    }
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = __CocoaSet.startIndex.getter();
    uint64_t v20 = v5;
    unsigned __int8 v21 = 1;
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = specialized _NativeSet.startIndex.getter(a1);
    uint64_t v20 = v6;
    unsigned __int8 v21 = v7 & 1;
    while (1)
    {
LABEL_9:
      while (1)
      {
        uint64_t v13 = v19;
        uint64_t v14 = v20;
        uint64_t v15 = v21;
        id v16 = *(id *)(specialized Set.subscript.getter(v19, v20, v21, a1) + 32);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if (v2) {
          break;
        }
        uint64_t v8 = specialized _NativeSet.index(after:)(v13, v14, v15, a1);
        uint64_t v10 = v9;
        char v12 = v11;
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v13, v14, v15);
        uint64_t v19 = v8;
        uint64_t v20 = v10;
        unsigned __int8 v21 = v12 & 1;
        if (!--v3) {
          goto LABEL_14;
        }
      }
      if ((v15 & 1) == 0) {
        break;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PrimDirtyState>.Index);
      unint64_t v17 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v17(v18, 0);
      if (!--v3)
      {
LABEL_14:
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v19, v20, v21);
        return v22;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t StageDirtyState.stageMetadataContainsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StageDirtyState.primsContainAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StageDirtyState.__allocating_init(stageMetadataContainsAnyOf:)(uint64_t a1)
{
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v2 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v2 = MEMORY[0x263F8EE88];
  }
  type metadata accessor for StageDirtyState();
  uint64_t v3 = swift_allocObject();
  StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(a1, v2, 0);
  return v3;
}

uint64_t StageDirtyState.__allocating_init(stageMetadataContainsAnyOf:primsContainAnyOf:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  type metadata accessor for StageDirtyState();
  uint64_t v4 = swift_allocObject();
  StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(a1, v3, 0);
  return v4;
}

uint64_t StageDirtyState.hash(into:)(long long *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static StageDirtyState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Set.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  return specialized static Set.== infix(_:_:)(v4, v5);
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v24 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      uint64_t v26 = (v6 - 1) & v6;
      int64_t v27 = v3;
      unint64_t v8 = __clz(__rbit64(v6)) | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v9 >= v25) {
      return 1;
    }
    unint64_t v10 = *(void *)(v24 + 8 * v9);
    int64_t v11 = v3 + 1;
    if (!v10)
    {
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v25) {
        return 1;
      }
      unint64_t v10 = *(void *)(v24 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v3 + 3;
        if (v3 + 3 >= v25) {
          return 1;
        }
        unint64_t v10 = *(void *)(v24 + 8 * v11);
        if (!v10) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v26 = (v10 - 1) & v10;
    int64_t v27 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_24:
    uint64_t v13 = result;
    uint64_t v14 = *(void **)(*(void *)(result + 48) + 8 * v8);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
    id v15 = v14;
    _CFObject.hash(into:)();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = v16 & ~v17;
    if (((*(void *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      goto LABEL_31;
    }
    id v19 = *(id *)(*(void *)(a2 + 48) + 8 * v18);
    char v20 = static _CFObject.== infix(_:_:)();

    if ((v20 & 1) == 0)
    {
      uint64_t v21 = ~v17;
      while (1)
      {
        unint64_t v18 = (v18 + 1) & v21;
        if (((*(void *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(a2 + 48) + 8 * v18);
        char v23 = static _CFObject.== infix(_:_:)();

        if (v23) {
          goto LABEL_7;
        }
      }
LABEL_31:

      return 0;
    }
LABEL_7:

    uint64_t result = v13;
    unint64_t v6 = v26;
    int64_t v3 = v27;
  }
  uint64_t v12 = v3 + 4;
  if (v3 + 4 >= v25) {
    return 1;
  }
  unint64_t v10 = *(void *)(v24 + 8 * v12);
  if (v10)
  {
    int64_t v11 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v25) {
      return 1;
    }
    unint64_t v10 = *(void *)(v24 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_23;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  char v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  char v43[72];

  if (result == a2) {
    return 1;
  }
  unint64_t v2 = a2;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  if (v5 < 64) {
    unint64_t v6 = ~(-1 << v5);
  }
  else {
    unint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(result + 56);
  unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = a2 + 56;
  char v36 = result + 56;
  long long v37 = result;
  uint64_t v35 = v8;
  if (v7) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v11 >= v8) {
    return 1;
  }
  uint64_t v12 = *(void *)(v4 + 8 * v11);
  uint64_t v13 = v3 + 1;
  if (!v12)
  {
    uint64_t v13 = v11 + 1;
    if (v11 + 1 >= v8) {
      return 1;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v13);
    if (!v12)
    {
      uint64_t v13 = v11 + 2;
      if (v11 + 2 >= v8) {
        return 1;
      }
      uint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        uint64_t v14 = v11 + 3;
        if (v14 < v8)
        {
          uint64_t v12 = *(void *)(v4 + 8 * v14);
          if (v12)
          {
            uint64_t v13 = v14;
            goto LABEL_21;
          }
          while (1)
          {
            uint64_t v13 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              break;
            }
            if (v13 >= v8) {
              return 1;
            }
            uint64_t v12 = *(void *)(v4 + 8 * v13);
            ++v14;
            if (v12) {
              goto LABEL_21;
            }
          }
LABEL_34:
          __break(1u);
          return result;
        }
        return 1;
      }
    }
  }
LABEL_21:
  char v38 = (v12 - 1) & v12;
  unint64_t v39 = v13;
  for (unint64_t i = __clz(__rbit64(v12)) + (v13 << 6); ; unint64_t i = __clz(__rbit64(v7)) | (v3 << 6))
  {
    id v15 = (uint64_t *)(*(void *)(result + 48) + 24 * i);
    uint64_t v17 = *v15;
    Swift::Int v16 = (void *)v15[1];
    unint64_t v18 = (void *)v15[2];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    id v19 = v16;
    char v40 = v18;
    char v42 = v17;
    specialized Set.hash(into:)((uint64_t)v43, v17);
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
    uint64_t v41 = v19;
    _CFObject.hash(into:)();
    char v20 = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
    id v22 = v20 & ~v21;
    if (((*(void *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
      break;
    }
    char v23 = ~v21;
    while (1)
    {
      uint64_t v24 = (uint64_t *)(*(void *)(v2 + 48) + 24 * v22);
      uint64_t v26 = *v24;
      int64_t v25 = (void *)v24[1];
      int64_t v27 = (void *)v24[2];
      swift_bridgeObjectRetain();
      char v28 = v25;
      uint64_t v29 = v27;
      if (specialized static Set.== infix(_:_:)(v26, v42)) {
        break;
      }

      swift_bridgeObjectRelease();
LABEL_25:
      id v22 = (v22 + 1) & v23;
      if (((*(void *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
        goto LABEL_31;
      }
    }
    char v30 = v9;
    uint64_t v31 = v2;
    char v32 = v28;
    uint64_t v33 = v41;
    char v34 = static _CFObject.== infix(_:_:)();

    swift_bridgeObjectRelease();
    unint64_t v2 = v31;
    int64_t v9 = v30;

    if ((v34 & 1) == 0) {
      goto LABEL_25;
    }

    swift_bridgeObjectRelease();
    uint64_t v4 = v36;
    uint64_t result = v37;
    unint64_t v8 = v35;
    uint64_t v7 = v38;
    int64_t v3 = v39;
    if (!v38) {
      goto LABEL_8;
    }
LABEL_7:
    char v38 = (v7 - 1) & v7;
    unint64_t v39 = v3;
  }
LABEL_31:

  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      a2 = a1;
    }
    else {
      a2 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    if (v4)
    {
      if (v2 < 0) {
        a1 = v2;
      }
      else {
        a1 = v2 & 0xFFFFFFFFFFFFFF8;
      }
      return MEMORY[0x270F9E868](a1, a2);
    }
    char v6 = specialized _NativeSet.isEqual(to:)(a2, v2);
    return v6 & 1;
  }
  if (v4)
  {
    if (a2 < 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    char v6 = specialized _NativeSet.isEqual(to:)(v5, v3);
    return v6 & 1;
  }
  if (a1 == a2)
  {
LABEL_47:
    char v6 = 1;
    return v6 & 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
LABEL_49:
    char v6 = 0;
    return v6 & 1;
  }
  int64_t v7 = 0;
  uint64_t v28 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v29 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = a2 + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v7 << 6);
      goto LABEL_41;
    }
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v14 >= v29) {
      goto LABEL_47;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v7;
    if (!v15)
    {
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_47;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v7);
      if (!v15)
      {
        int64_t v7 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_47;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v7);
        if (!v15) {
          break;
        }
      }
    }
LABEL_40:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_41:
    uint64_t v17 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    unint64_t v18 = *(void (**)(char *))(*(void *)v17 + 120);
    swift_retain();
    v18(v31);
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      goto LABEL_48;
    }
    int64_t v30 = v7;
    id v22 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v2 + 48) + 8 * v21) + 128);
    swift_retain();
    LOBYTE(v22) = v22(v17);
    swift_release();
    if ((v22 & 1) == 0)
    {
      uint64_t v23 = ~v20;
      for (unint64_t i = v21 + 1; ; unint64_t i = v25 + 1)
      {
        uint64_t v25 = i & v23;
        if (((*(void *)(v11 + (((i & v23) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v23)) & 1) == 0) {
          break;
        }
        uint64_t v26 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v2 + 48) + 8 * v25) + 128);
        swift_retain();
        LOBYTE(v26) = v26(v17);
        swift_release();
        if (v26) {
          goto LABEL_24;
        }
      }
LABEL_48:
      swift_release();
      goto LABEL_49;
    }
LABEL_24:
    a1 = swift_release();
    int64_t v7 = v30;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29) {
    goto LABEL_47;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v7 = v16;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v7 >= v29) {
      goto LABEL_47;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_40;
    }
  }
LABEL_52:
  __break(1u);
  return MEMORY[0x270F9E868](a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void (*v18)(char *);
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31[72];
  uint64_t vars8;

  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      a2 = a1;
    }
    else {
      a2 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    if (v4)
    {
      if (v2 < 0) {
        a1 = v2;
      }
      else {
        a1 = v2 & 0xFFFFFFFFFFFFFF8;
      }
      return MEMORY[0x270F9E868](a1, a2);
    }
    char v6 = specialized _NativeSet.isEqual(to:)(a2, v2);
    return v6 & 1;
  }
  if (v4)
  {
    if (a2 < 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    char v6 = specialized _NativeSet.isEqual(to:)(v5, v3);
    return v6 & 1;
  }
  if (a1 == a2)
  {
LABEL_47:
    char v6 = 1;
    return v6 & 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
LABEL_49:
    char v6 = 0;
    return v6 & 1;
  }
  int64_t v7 = 0;
  uint64_t v28 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v29 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = a2 + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v7 << 6);
      goto LABEL_41;
    }
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v14 >= v29) {
      goto LABEL_47;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v7;
    if (!v15)
    {
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_47;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v7);
      if (!v15)
      {
        int64_t v7 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_47;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v7);
        if (!v15) {
          break;
        }
      }
    }
LABEL_40:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_41:
    uint64_t v17 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    unint64_t v18 = *(void (**)(char *))(*(void *)v17 + 128);
    swift_retain();
    v18(v31);
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      goto LABEL_48;
    }
    int64_t v30 = v7;
    id v22 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v2 + 48) + 8 * v21) + 136);
    swift_retain();
    LOBYTE(v22) = v22(v17);
    swift_release();
    if ((v22 & 1) == 0)
    {
      uint64_t v23 = ~v20;
      for (unint64_t i = v21 + 1; ; unint64_t i = v25 + 1)
      {
        uint64_t v25 = i & v23;
        if (((*(void *)(v11 + (((i & v23) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v23)) & 1) == 0) {
          break;
        }
        uint64_t v26 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v2 + 48) + 8 * v25) + 136);
        swift_retain();
        LOBYTE(v26) = v26(v17);
        swift_release();
        if (v26) {
          goto LABEL_24;
        }
      }
LABEL_48:
      swift_release();
      goto LABEL_49;
    }
LABEL_24:
    a1 = swift_release();
    int64_t v7 = v30;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29) {
    goto LABEL_47;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v7 = v16;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v7 >= v29) {
      goto LABEL_47;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_40;
    }
  }
LABEL_52:
  __break(1u);
  return MEMORY[0x270F9E868](a1, a2);
}

uint64_t StageDirtyState.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StageDirtyState.Type);
  uint64_t v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  type metadata accessor for PrimDirtyState();
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, 255, (void (*)(uint64_t))type metadata accessor for PrimDirtyState);
  v1._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0xD000000000000014;
  v3._object = (void *)0x800000023AAADA70;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v6._object = (void *)0x800000023AAADA90;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  if (a3)
  {
    uint64_t v4 = a3;
LABEL_13:
    v3[4] = v4;
    return (uint64_t)v3;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO14PrimDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d9IO15Stagegh122C26stageMetadataContainsAnyOf012primsContainiJ04coreACShyAA16ToolsFoundationsO5TokenVG_ShyAA04PrimdE0CGSo010RIOBuilderdC13J73RefaSgtcfcSo0rdqsT0aAMcfu_32f3b6550bcda465057a28ab83a1317178AmSTf3nnnpk_nTf1cn_n(a2);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOBuilderDirtyPrimDescriptorRef(0);
  v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v18 = v7.super.isa;
    Swift::Int v19 = isa;
    uint64_t v4 = RIOBuilderDirtyStageDescriptorCreateWithPrimDescriptorsAndMetadataDescriptors();

    goto LABEL_13;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t result = specialized Set.startIndex.getter(a1);
  uint64_t v10 = result;
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_16;
    }
    RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t result = specialized _NativeSet.index(after:)(v10, v12, v14 & 1, a1);
    uint64_t v10 = result;
    uint64_t v12 = v15;
    char v14 = v16 & 1;
    if (!--v8)
    {
      outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v15, v16 & 1);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t StageDirtyState.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t StageDirtyState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int StageDirtyState.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StageDirtyState()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v5, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StageDirtyState(long long *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v5);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StageDirtyState()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v5, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StageDirtyState()
{
  return StageDirtyState.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StageDirtyState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((specialized static Set.== infix(_:_:)(*(void *)(*a1 + 24), *(void *)(*a2 + 24)) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v3 + 16);
  return specialized static Set.== infix(_:_:)(v4, v5);
}

uint64_t specialized _NativeSet.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = __CocoaSet.count.getter();
  if (v3 != result) {
    return 0;
  }
  int64_t v5 = 0;
  uint64_t v6 = a2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & *(void *)(a2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v9 &= v9 - 1;
LABEL_6:
    swift_retain();
    char v11 = __CocoaSet.contains(_:)();
    uint64_t result = swift_release();
    if ((v11 & 1) == 0) {
      return 0;
    }
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v12 >= v10) {
    return 1;
  }
  uint64_t v13 = *(void *)(v6 + 8 * v12);
  ++v5;
  if (v13) {
    goto LABEL_19;
  }
  int64_t v5 = v12 + 1;
  if (v12 + 1 >= v10) {
    return 1;
  }
  uint64_t v13 = *(void *)(v6 + 8 * v5);
  if (v13)
  {
LABEL_19:
    uint64_t v9 = (v13 - 1) & v13;
    goto LABEL_6;
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v10) {
    return 1;
  }
  uint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13)
  {
    int64_t v5 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v5 >= v10) {
      return 1;
    }
    uint64_t v13 = *(void *)(v6 + 8 * v5);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

void specialized Set.hash(into:)(long long *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 8);
  long long v4 = a1[1];
  long long v26 = *a1;
  long long v27 = v4;
  long long v5 = a1[3];
  long long v28 = a1[2];
  long long v29 = v5;
  uint64_t v30 = v3;
  Hasher._finalize()();
  uint64_t v6 = a2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v11 = 0;
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v12++, 1)) {
      goto LABEL_19;
    }
    if (v12 >= v10)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v11);
      return;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v12);
    if (!v23) {
      break;
    }
LABEL_16:
    unint64_t v9 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 48) + 24 * v14);
    uint64_t v17 = *v15;
    char v16 = (void *)v15[1];
    unint64_t v18 = (void *)v15[2];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    id v19 = v16;
    id v20 = v18;
    specialized Set.hash(into:)((uint64_t)v25, v17);
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    Swift::Int v21 = Hasher._finalize()();

    swift_bridgeObjectRelease();
    v11 ^= v21;
  }
  int64_t v24 = v12 + 1;
  if (v12 + 1 >= v10) {
    goto LABEL_17;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    ++v12;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_17;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

{
  uint64_t v3;
  long long v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23[9];
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;

  uint64_t v3 = *((void *)a1 + 8);
  long long v4 = a1[1];
  uint64_t v25 = *a1;
  long long v26 = v4;
  long long v5 = a1[3];
  long long v27 = a1[2];
  long long v28 = v5;
  long long v29 = v3;
  Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for PrimDirtyState();
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, 255, (void (*)(uint64_t))type metadata accessor for PrimDirtyState);
    Set.Iterator.init(_cocoa:)();
    a2 = v30;
    uint64_t v6 = v31;
    uint64_t v7 = v32;
    uint64_t v8 = v33;
    unint64_t v9 = v34;
  }
  else
  {
    int64_t v10 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v6 = a2 + 56;
    uint64_t v7 = ~v10;
    Swift::UInt v11 = -v10;
    if (v11 < 64) {
      int64_t v12 = ~(-1 << v11);
    }
    else {
      int64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  unint64_t v13 = 0;
  unint64_t v14 = (unint64_t)(v7 + 64) >> 6;
  while (a2 < 0)
  {
    id v22 = __CocoaSet.Iterator.next()();
    if (!v22) {
      goto LABEL_26;
    }
    v23[0] = v22;
    type metadata accessor for PrimDirtyState();
    swift_dynamicCast();
    unint64_t v18 = v24;
    if (!v24) {
      goto LABEL_27;
    }
    uint64_t v17 = v8;
    uint64_t v15 = v9;
LABEL_10:
    Hasher.init(_seed:)();
    (*(void (**)(uint64_t *))(*(void *)v18 + 128))(v23);
    id v19 = Hasher._finalize()();
    swift_release();
    v13 ^= v19;
    uint64_t v8 = v17;
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v15 = (v9 - 1) & v9;
    char v16 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v17 = v8;
LABEL_9:
    int64_t v24 = *(void *)(*(void *)(a2 + 48) + 8 * v16);
    unint64_t v18 = v24;
    swift_retain();
    if (!v18) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  uint64_t v17 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v17 >= v14) {
      goto LABEL_26;
    }
    id v20 = *(void *)(v6 + 8 * v17);
    if (!v20)
    {
      uint64_t v17 = v8 + 2;
      if (v8 + 2 >= v14) {
        goto LABEL_26;
      }
      id v20 = *(void *)(v6 + 8 * v17);
      if (!v20)
      {
        Swift::Int v21 = v8 + 3;
        while (v14 != v21)
        {
          id v20 = *(void *)(v6 + 8 * v21++);
          if (v20)
          {
            uint64_t v17 = v21 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        int64_t v24 = 0;
LABEL_27:
        outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
        Hasher._combine(_:)(v13);
        return;
      }
    }
LABEL_22:
    uint64_t v15 = (v20 - 1) & v20;
    char v16 = __clz(__rbit64(v20)) + (v17 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v3;
  long long v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23[9];
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;

  uint64_t v3 = *((void *)a1 + 8);
  long long v4 = a1[1];
  uint64_t v25 = *a1;
  long long v26 = v4;
  long long v5 = a1[3];
  long long v27 = a1[2];
  long long v28 = v5;
  long long v29 = v3;
  Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for PropertyDirtyState();
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, 255, (void (*)(uint64_t))type metadata accessor for PropertyDirtyState);
    Set.Iterator.init(_cocoa:)();
    a2 = v30;
    uint64_t v6 = v31;
    uint64_t v7 = v32;
    uint64_t v8 = v33;
    unint64_t v9 = v34;
  }
  else
  {
    int64_t v10 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v6 = a2 + 56;
    uint64_t v7 = ~v10;
    Swift::UInt v11 = -v10;
    if (v11 < 64) {
      int64_t v12 = ~(-1 << v11);
    }
    else {
      int64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  unint64_t v13 = 0;
  unint64_t v14 = (unint64_t)(v7 + 64) >> 6;
  while (a2 < 0)
  {
    id v22 = __CocoaSet.Iterator.next()();
    if (!v22) {
      goto LABEL_26;
    }
    v23[0] = v22;
    type metadata accessor for PropertyDirtyState();
    swift_dynamicCast();
    unint64_t v18 = v24;
    if (!v24) {
      goto LABEL_27;
    }
    uint64_t v17 = v8;
    uint64_t v15 = v9;
LABEL_10:
    Hasher.init(_seed:)();
    (*(void (**)(uint64_t *))(*(void *)v18 + 120))(v23);
    id v19 = Hasher._finalize()();
    swift_release();
    v13 ^= v19;
    uint64_t v8 = v17;
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v15 = (v9 - 1) & v9;
    char v16 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v17 = v8;
LABEL_9:
    int64_t v24 = *(void *)(*(void *)(a2 + 48) + 8 * v16);
    unint64_t v18 = v24;
    swift_retain();
    if (!v18) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  uint64_t v17 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v17 >= v14) {
      goto LABEL_26;
    }
    id v20 = *(void *)(v6 + 8 * v17);
    if (!v20)
    {
      uint64_t v17 = v8 + 2;
      if (v8 + 2 >= v14) {
        goto LABEL_26;
      }
      id v20 = *(void *)(v6 + 8 * v17);
      if (!v20)
      {
        Swift::Int v21 = v8 + 3;
        while (v14 != v21)
        {
          id v20 = *(void *)(v6 + 8 * v21++);
          if (v20)
          {
            uint64_t v17 = v21 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        int64_t v24 = 0;
LABEL_27:
        outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
        Hasher._combine(_:)(v13);
        return;
      }
    }
LABEL_22:
    uint64_t v15 = (v20 - 1) & v20;
    char v16 = __clz(__rbit64(v20)) + (v17 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  Hasher._finalize()();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_19;
    }
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v9);
    if (!v16) {
      break;
    }
LABEL_16:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    int64_t v12 = *(void **)(*(void *)(a2 + 48) + 8 * v11);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
    id v13 = v12;
    _CFObject.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();

    v8 ^= v14;
  }
  int64_t v17 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_17;
  }
  unint64_t v16 = *(void *)(v3 + 8 * v17);
  if (v16)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_17;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t specialized static PrimDirtyStateBuilder.buildBlock(_:)(unint64_t a1)
{
  uint64_t v7 = MEMORY[0x263F8EE88];
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x23ECBA630](v4, a1);
      }
      else
      {
        uint64_t v5 = *(void *)(a1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      swift_retain();
      specialized Set._Variant.insert(_:)(&v6, v5);
      swift_release();
      swift_release();
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t type metadata accessor for StageDirtyState()
{
  return self;
}

uint64_t base witness table accessor for Equatable in StageDirtyState(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type StageDirtyState and conformance StageDirtyState, a2, (void (*)(uint64_t))type metadata accessor for StageDirtyState);
}

ValueMetadata *type metadata accessor for PrimDirtyStateBuilder()
{
  return &type metadata for PrimDirtyStateBuilder;
}

uint64_t method lookup function for StageDirtyState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StageDirtyState);
}

uint64_t dispatch thunk of StageDirtyState.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of StageDirtyState.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of StageDirtyState.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

void *specialized StageDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v2 = (void *)RIOBuilderDirtyStageDescriptorCopyPrimDescriptors();
  type metadata accessor for RIOBuilderDirtyPrimDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    unint64_t v10 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v7 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x23ECBA630](v7, v4);
    }
    else {
      id v8 = *(id *)(v4 + 8 * v7 + 32);
    }
    uint64_t v9 = (uint64_t)v8;
    if (RIOBuilderDirtyPrimDescriptorCopyType() == 2)
    {
      specialized TypeNamePrimDirtyState.__allocating_init(core:)(v9);
    }
    else
    {
      type metadata accessor for PrimDirtyState();
      PrimDirtyState.__allocating_init(core:)(v9);
    }
    ++v7;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v5 != v7);
  unint64_t v10 = v3;
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v11 = specialized Set.init<A>(_:)(v10);
  swift_bridgeObjectRelease();
  int64_t v12 = (void *)RIOBuilderDirtyStageDescriptorCopyMetadataDescriptors();
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v3 >> 62))
  {
    uint64_t v13 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_17;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x263F8EE78];
LABEL_31:
    uint64_t v23 = specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for StageDirtyState();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v23;
    result[3] = v11;
    result[4] = a1;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_30;
  }
LABEL_17:
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        MEMORY[0x23ECBA630](i, v3);
        uint64_t v16 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        unint64_t v18 = *(void *)(v3 + 16);
        unint64_t v17 = *(void *)(v3 + 24);
        if (v18 >= v17 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        }
        *(void *)(v3 + 16) = v18 + 1;
        *(void *)(v3 + 8 * v18 + 32) = v16;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v13; ++j)
      {
        uint64_t v20 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        unint64_t v22 = *(void *)(v14 + 16);
        unint64_t v21 = *(void *)(v14 + 24);
        if (v22 >= v21 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        }
        *(void *)(v14 + 16) = v22 + 1;
        *(void *)(v14 + 8 * v22 + 32) = v20;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Set<PropertyDirtyState>.Iterator._Variant()
{
  return swift_release();
}

uint64_t outlined consume of Set<ToolsFoundations.Token>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static ActionBuilder.generateGroupActionSpecifications(inputs:)()
{
  uint64_t v0 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v37 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityGroupActionOrder?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v37 - v14;
  Inputs.prim.getter();
  uint64_t v16 = String.count.getter();
  char v40 = v4;
  uint64_t v41 = v1;
  unint64_t v39 = v6;
  if (v16 < 1)
  {
    id v17 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v17 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v44);

  swift_release();
  unint64_t v18 = v44;
  if (v45 == 1)
  {
    uint64_t v43 = v44;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    id v19 = v18;
LABEL_11:
    outlined consume of Result<Double, Object.Error>(v19, 1);
    return MEMORY[0x263F8EE78];
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v20 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v20 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v44);

  swift_release();
  unint64_t v21 = v44;
  if (v45)
  {
    uint64_t v43 = v44;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    id v19 = v21;
    goto LABEL_11;
  }
  swift_retain();
  __RKEntityGroupActionOrder.init(inputs:)((uint64_t)v9);
  uint64_t v24 = v42;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v9, 0, 1, v10);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, v9, v10);
  uint64_t v25 = Inputs.accumulatedValues(forKey:)(0x736E6F69746361, 0xE700000000000000);
  uint64_t v26 = specialized _arrayConditionalCast<A, B>(_:)(v25);
  swift_bridgeObjectRelease();
  if (v26)
  {
    uint64_t v38 = v0;
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      v37[1] = v21;
      swift_bridgeObjectRetain();
      uint64_t v28 = 0;
      long long v29 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v30 = *(void *)(v26 + 8 * v28++ + 32);
        char v44 = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v30);
        swift_bridgeObjectRelease();
        long long v29 = v44;
      }
      while (v27 != v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v29 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    uint64_t v31 = v38;
    if (v29[2])
    {
      uint64_t v32 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v13, v15, v10);
      uint64_t v33 = v39;
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      uint64_t v34 = v41;
      (*(void (**)(char *, void, uint64_t))(v41 + 104))(v33, *MEMORY[0x263F163A8], v31);
      uint64_t v35 = (uint64_t)v40;
      static ActionBuilder.collapseAndReturnGroupActionSpecification(_:)(v33, (uint64_t)v40);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      unint64_t v36 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_23AAB22A0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32))(v22 + v36, v35, v31);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v31);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v10);
      return v22;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v10);
  return MEMORY[0x263F8EE78];
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v102 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v81 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  MEMORY[0x270FA5388](v5 - 8);
  char v90 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v7 - 8);
  char v92 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments();
  uint64_t v93 = *(void *)(started - 8);
  uint64_t v94 = started;
  MEMORY[0x270FA5388](started);
  BOOL v91 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __RKEntityAudioActionArguments();
  uint64_t v96 = *(void *)(v11 - 8);
  uint64_t v97 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v95 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __RKEntityOrbitEntityActionArguments();
  uint64_t v88 = *(void *)(v13 - 8);
  uint64_t v89 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v87 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for __RKEntitySpinActionArguments();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v83 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  char v100 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v101 = (char *)&v74 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v74 - v22;
  uint64_t v24 = type metadata accessor for __RKEntityActionGroupArguments();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v28(v23, a1, v16);
  uint64_t v99 = *(char **)(v17 + 88);
  if (((unsigned int (*)(char *, uint64_t))v99)(v23, v16) != *MEMORY[0x263F163A8])
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v102, a1, v16);
  }
  uint64_t v86 = v17 + 16;
  char v82 = (uint64_t (*)(uint64_t, char *, uint64_t))v28;
  char v80 = a1;
  long long v29 = *(void (**)(char *, uint64_t))(v17 + 96);
  v29(v23, v16);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v24);
  uint64_t v30 = *(void *)(__RKEntityActionGroupArguments.actions.getter() + 16);
  swift_bridgeObjectRelease();
  if (v30 != 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    return v82(v102, v80, v16);
  }
  uint64_t v31 = v17;
  uint64_t v77 = v29;
  uint64_t v79 = v24;
  uint64_t v78 = v25;
  uint64_t v32 = __RKEntityActionGroupArguments.loopCount.getter();
  if (v33)
  {
    uint64_t v76 = 1;
    uint64_t v34 = v101;
  }
  else
  {
    uint64_t v34 = v101;
    if (v32 < 1)
    {
      (*(void (**)(char *, uint64_t))(v78 + 8))(v27, v79);
      return v82(v102, v80, v16);
    }
    uint64_t v76 = v32;
  }
  uint64_t result = __RKEntityActionGroupArguments.actions.getter();
  if (*(void *)(result + 16))
  {
    unint64_t v75 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    unint64_t v36 = (void (*)(char *, char *, uint64_t))v82;
    v82((uint64_t)v34, (char *)(result + v75), v16);
    swift_bridgeObjectRelease();
    long long v37 = v100;
    v36(v100, v34, v16);
    uint64_t v38 = v16;
    unsigned int v39 = ((uint64_t (*)(char *, uint64_t))v99)(v37, v16);
    if (v39 == *MEMORY[0x263F16398])
    {
      char v40 = v34;
      v77(v37, v16);
      uint64_t v42 = (uint64_t)v95;
      uint64_t v41 = v96;
      uint64_t v43 = v97;
      (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v95, v37, v97);
      static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)(v80, v76, v42, v102);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v38);
      return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v27, v79);
    }
    uint64_t v44 = v17;
    uint64_t v45 = v78;
    uint64_t v46 = v79;
    if (v39 != *MEMORY[0x263F16370])
    {
      if (v39 == *MEMORY[0x263F16358])
      {
        v77(v37, v16);
        uint64_t v54 = v17;
        char v56 = v87;
        uint64_t v55 = v88;
        uint64_t v57 = v89;
        (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v87, v37, v89);
        static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)((uint64_t)v27, v76, v102);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v101, v16);
        return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v27, v46);
      }
      char v58 = v27;
      uint64_t v59 = v16;
      if (v39 == *MEMORY[0x263F16388])
      {
        v77(v37, v16);
        uint64_t v60 = v84;
        uint64_t v61 = v44;
        char v62 = v83;
        unint64_t v63 = v37;
        uint64_t v64 = v59;
        uint64_t v65 = v85;
        (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v63, v85);
        static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)((uint64_t)v27, v76, v102);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v65);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v101, v64);
        return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v27, v46);
      }
      if (v76 == 1)
      {
        uint64_t v66 = *(void *)(__RKEntityActionGroupArguments.actions.getter() + 16);
        swift_bridgeObjectRelease();
        uint64_t v67 = v102;
        char v68 = (void (*)(char *, unint64_t, uint64_t))v82;
        if (v66 == 1)
        {
          uint64_t v69 = __RKEntityActionGroupArguments.actions.getter();
          if (*(void *)(v69 + 16))
          {
            uint64_t v70 = (uint64_t)v81;
            v68(v81, v69 + v75, v59);
            uint64_t v71 = 0;
          }
          else
          {
            uint64_t v71 = 1;
            uint64_t v70 = (uint64_t)v81;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v70, v71, 1, v59);
          swift_bridgeObjectRelease();
          char v72 = *(void (**)(char *, uint64_t))(v44 + 8);
          v72(v101, v59);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v58, v79);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v70, 1, v59) != 1)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v67, v70, v59);
            return ((uint64_t (*)(char *, uint64_t))v72)(v100, v59);
          }
          outlined destroy of Any?(v70, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
        }
        else
        {
          char v72 = *(void (**)(char *, uint64_t))(v44 + 8);
          v72(v101, v59);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v58, v46);
        }
        long long v37 = v100;
        v68((char *)v67, (unint64_t)v80, v59);
      }
      else
      {
        char v72 = *(void (**)(char *, uint64_t))(v44 + 8);
        uint64_t v73 = v79;
        v72(v101, v16);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v58, v73);
        v82(v102, v80, v16);
      }
      return ((uint64_t (*)(char *, uint64_t))v72)(v37, v59);
    }
    LODWORD(v98) = v39;
    uint64_t v99 = v27;
    uint64_t v97 = v16;
    v77(v37, v16);
    uint64_t v48 = v93;
    uint64_t v47 = v94;
    uint64_t v49 = v91;
    uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v93 + 32))(v91, v37, v94);
    MEMORY[0x23ECB9540](v50);
    uint64_t result = __RKEntityStartAnimateActionArguments.loopCount.getter();
    if ((unsigned __int128)(result * (__int128)v76) >> 64 == (result * v76) >> 63)
    {
      __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter();
      __RKEntityStartAnimateActionArguments.clipStart.getter();
      __RKEntityStartAnimateActionArguments.clipDuration.getter();
      __RKEntityStartAnimateActionArguments.clipReversed.getter();
      long long v51 = v49;
      __RKEntityStartAnimateActionArguments.animationSpeed.getter();
      __RKEntityStartAnimateActionArguments.clipReverses.getter();
      uint64_t v52 = v102;
      __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)();
      uint64_t v53 = v97;
      (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v52, v98, v97);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v47);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v101, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v99, v79);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v5 = type metadata accessor for __RKEntityGroupActionOrder();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for __RKEntityActionGroupArguments();
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntitySpinActionArguments();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = __RKEntitySpinActionArguments.duration.getter();
  unint64_t v15 = __RKEntitySpinActionArguments.iterations.getter();
  uint64_t v16 = v15 | ((HIDWORD(v15) & 1) << 32);
  uint64_t v17 = v14 | ((HIDWORD(v14) & 1) << 32);
  if (a2)
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v17, v16);
    static ActionBuilder.copySpinActionArguments(_:multiplier:)();
    uint64_t v18 = *MEMORY[0x263F16388];
    uint64_t v19 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104);
    return v20(a3, v18, v19);
  }
  else
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v17, v16);
    static ActionBuilder.copySpinActionArguments(_:multiplier:)();
    __RKEntityActionGroupArguments.order.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v22 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v31 = v22;
    uint64_t v32 = a3;
    uint64_t v23 = *(void *)(v22 - 8);
    unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_23AAB22A0;
    unint64_t v26 = v25 + v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 16))(v26, v13, v10);
    uint64_t v27 = *MEMORY[0x263F16388];
    uint64_t v30 = v7;
    uint64_t v28 = *(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 104);
    v28(v26, v27, v22);
    __RKEntityActionGroupArguments.exclusive.getter();
    __RKEntityActionGroupArguments.loopCount.getter();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v29 = v32;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v32, v9, v35);
    return ((uint64_t (*)(uint64_t, void, uint64_t))v28)(v29, *MEMORY[0x263F163A8], v31);
  }
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v5 = type metadata accessor for __RKEntityGroupActionOrder();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for __RKEntityActionGroupArguments();
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityOrbitEntityActionArguments();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = __RKEntityOrbitEntityActionArguments.duration.getter();
  unint64_t v15 = __RKEntityOrbitEntityActionArguments.rotations.getter();
  uint64_t v16 = v15 | ((HIDWORD(v15) & 1) << 32);
  uint64_t v17 = v14 | ((HIDWORD(v14) & 1) << 32);
  if (a2)
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v17, v16);
    static ActionBuilder.copyOrbitActionArguments(_:multiplier:)(a3);
    uint64_t v18 = *MEMORY[0x263F16358];
    uint64_t v19 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104);
    return v20(a3, v18, v19);
  }
  else
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v17, v16);
    static ActionBuilder.copyOrbitActionArguments(_:multiplier:)((uint64_t)v13);
    __RKEntityActionGroupArguments.order.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v22 = type metadata accessor for __RKEntityActionSpecification();
    uint64_t v31 = v22;
    uint64_t v32 = a3;
    uint64_t v23 = *(void *)(v22 - 8);
    unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_23AAB22A0;
    unint64_t v26 = v25 + v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 16))(v26, v13, v10);
    uint64_t v27 = *MEMORY[0x263F16358];
    uint64_t v30 = v7;
    uint64_t v28 = *(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 104);
    v28(v26, v27, v22);
    __RKEntityActionGroupArguments.exclusive.getter();
    __RKEntityActionGroupArguments.loopCount.getter();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v29 = v32;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v32, v9, v35);
    return ((uint64_t (*)(uint64_t, void, uint64_t))v28)(v29, *MEMORY[0x263F163A8], v31);
  }
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t v50 = a4;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  uint64_t v47 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __RKAudioSpatialModeSelection();
  uint64_t v45 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityAudioActionType?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for __RKEntityAudioActionType();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  if (v49 < 1)
  {
    uint64_t v42 = v13;
    uint64_t v43 = v15;
    uint64_t v48 = v9;
    uint64_t v49 = (uint64_t)v22;
    uint64_t v44 = v7;
    uint64_t v31 = v45;
    MEMORY[0x23ECB91A0](v24);
    uint64_t v32 = __RKEntityAudioActionArguments.path.getter();
    v41[1] = v33;
    v41[2] = v32;
    __RKEntityAudioActionArguments.type.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v49, *MEMORY[0x263F162F0], v19);
      outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for __RKEntityAudioActionType?);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v49, v18, v19);
    }
    __RKEntityAudioActionArguments.spatialMode.getter();
    uint64_t v34 = v42;
    int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v12, 1, v42);
    uint64_t v36 = v47;
    if (v35 == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v31 + 104))(v43, *MEMORY[0x263F16340], v34);
      outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v43, v12, v34);
    }
    __RKEntityAudioActionArguments.volume.getter();
    __RKEntityAudioActionArguments.multiplePerformBehavior.getter();
    uint64_t v37 = v44;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v6, 1, v44) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v36 + 104))(v48, *MEMORY[0x263F16420], v37);
      outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v48, v6, v37);
    }
    uint64_t v38 = v50;
    __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)();
    uint64_t v39 = *MEMORY[0x263F16398];
    uint64_t v40 = type metadata accessor for __RKEntityActionSpecification();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v38, v39, v40);
  }
  else
  {
    uint64_t v25 = type metadata accessor for __RKEntityActionSpecification();
    unint64_t v26 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 16);
    uint64_t v27 = v25;
    uint64_t v28 = v50;
    uint64_t v29 = v48;
    return v26(v28, v29, v27);
  }
}

uint64_t static ActionBuilder.copySpinActionArguments(_:multiplier:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for __RKEntitySpinDirectionType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  MEMORY[0x23ECB9040](v8);
  __RKEntitySpinActionArguments.duration.getter();
  __RKEntitySpinActionArguments.iterations.getter();
  __RKEntitySpinActionArguments.direction.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F16330], v3);
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  }
  __RKEntitySpinActionArguments.axis.getter();
  return __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)();
}

uint64_t static ActionBuilder.copyOrbitActionArguments(_:multiplier:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __RKEntitySpinDirectionType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v14 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  MEMORY[0x23ECB9430](v9);
  __RKEntityOrbitEntityActionArguments.pivotTarget.getter();
  __RKEntityOrbitEntityActionArguments.duration.getter();
  __RKEntityOrbitEntityActionArguments.rotations.getter();
  __RKEntityOrbitEntityActionArguments.orbitalAxis.getter();
  uint64_t v12 = v10;
  int v13 = __RKEntityOrbitEntityActionArguments.orientToPath.getter();
  __RKEntityOrbitEntityActionArguments.spinDirection.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v14, *MEMORY[0x263F16330], v4);
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v14, v3, v4);
  }
  return __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

float specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)&a1;
  float v3 = 1.0;
  if ((a1 & 0x100000000) != 0) {
    float v2 = 1.0;
  }
  if ((a2 & 0x100000000) == 0) {
    float v3 = *(float *)&a2;
  }
  if (v2 <= v3)
  {
    if ((LODWORD(v3) & 0x7FFFFF) == 0) {
      float v2 = v3;
    }
    if ((~LODWORD(v3) & 0x7F800000) != 0) {
      float v2 = v3;
    }
  }
  return roundf(3.4028e38 / v2);
}

uint64_t one-time initialization function for lightComponent()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.lightComponent = result;
  return result;
}

id one-time initialization function for innerAngleAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.innerAngleAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for outerAngleAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.outerAngleAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for attenuationRadiusAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.attenuationRadiusAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for attenuationFalloffExponentAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.attenuationFalloffExponentAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowZNearAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowZNearAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowZNearValueAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowZNearValueAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowZFarAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowZFarAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowZFarValueAttributeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static SpotLightComponentBuilder.shadowZFarValueAttributeName = (uint64_t)result;
  return result;
}

uint64_t SpotLightComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  v7[2] = a1;
  uint64_t v8 = v1;
  uint64_t v9 = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in SpotLightComponentBuilder.run(inputs:);
  *(void *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in SpotLightComponentBuilder.run(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent.Shadow?);
  MEMORY[0x270FA5388](v3 - 8);
  char v142 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SpotLightComponent.Shadow();
  uint64_t v143 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v136 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for SpotLightComponent.Shadow.ShadowClippingPlane();
  uint64_t v138 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  unint64_t v135 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  v133 = (float *)((char *)&v127 - v9);
  MEMORY[0x270FA5388](v10);
  uint64_t v137 = (char *)&v127 - v11;
  MEMORY[0x270FA5388](v12);
  char v132 = (float *)((char *)&v127 - v13);
  MEMORY[0x270FA5388](v14);
  v141 = (char *)&v127 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v134 = (uint64_t)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v140 = (uint64_t)&v127 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent?);
  MEMORY[0x270FA5388](v20 - 8);
  os_log_t v145 = (char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SpotLightComponent();
  uint64_t v147 = *(void *)(v22 - 8);
  uint64_t v148 = v22;
  MEMORY[0x270FA5388](v22);
  char v146 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for __EntityRef();
  uint64_t v144 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v26 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = Inputs.prim.getter();
  uint64_t v28 = (void *)RIOPxrUsdObjectCopyName();
  uint64_t v29 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v30 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v32 = v31;

  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v33 = (id)static SpotLightComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

    goto LABEL_48;
  }
  uint64_t v149 = v27;
  uint64_t v131 = (void *)v5;
  uint64_t v34 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v35 = RIOPxrUsdAttributeCopyValue();
  if (!v35)
  {
    swift_bridgeObjectRelease();

    goto LABEL_48;
  }
  uint64_t v36 = (void *)v35;
  uint64_t v37 = RIOPxrVtValueCopyToken();
  if (!v37)
  {
    swift_bridgeObjectRelease();

    goto LABEL_48;
  }
  uint64_t v38 = (void *)v37;
  uint64_t v130 = a2;

  uint64_t v39 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  if (v40 != 0xD000000000000014 || v42 != 0x800000023AAADB40)
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = v130;
    if (v44) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
LABEL_48:
    SpotLightComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v43 = v130;
LABEL_13:
  if (one-time initialization token for OutputName != -1) {
LABEL_75:
  }
    swift_once();
  uint64_t v45 = static EntityBuilder.OutputName;
  uint64_t v46 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v45, v46, &v151);
  if (v152)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast())
    {
      uint64_t v47 = v150;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0)
      {
        SpotLightComponentBuilder.clear(inputs:)();
        swift_release();
        return swift_release();
      }
      uint64_t v129 = v47;
      Inputs.prim.getter();
      if (one-time initialization token for colorAttributeName != -1) {
        swift_once();
      }
      id v48 = (id)static SpotLightComponentBuilder.colorAttributeName;
      uint64_t v49 = specialized Prim.attributeValue<A>(of:type:)();
      uint64_t v51 = v50;
      char v53 = v52;

      swift_release();
      v54.i32[0] = 0;
      v55.i32[0] = v53 & 1;
      int8x16_t v56 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v55, v54), 0);
      v55.i64[0] = v49;
      v55.i64[1] = v51;
      int8x16_t v151 = vbslq_s8(v56, v55, (int8x16_t)xmmword_23AAB25F0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      lazy protocol witness table accessor for type Float and conformance Float();
      id v128 = (id)SIMD3<>.cgColor.getter();
      Inputs.prim.getter();
      if (one-time initialization token for intensityAttributeName != -1) {
        swift_once();
      }
      id v57 = (id)static SpotLightComponentBuilder.intensityAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for innerAngleAttributeName != -1) {
        swift_once();
      }
      id v58 = (id)static SpotLightComponentBuilder.innerAngleAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for outerAngleAttributeName != -1) {
        swift_once();
      }
      id v59 = (id)static SpotLightComponentBuilder.outerAngleAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for attenuationRadiusAttributeName != -1) {
        swift_once();
      }
      id v60 = (id)static SpotLightComponentBuilder.attenuationRadiusAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for attenuationFalloffExponentAttributeName != -1) {
        swift_once();
      }
      id v61 = (id)static SpotLightComponentBuilder.attenuationFalloffExponentAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      *(unsigned char *)(v43 + 17) = 1;
      type metadata accessor for Entity();
      uint64_t v62 = MEMORY[0x263F8DD08];
      __AssetRef.__as<A>(_:)();
      uint64_t v152 = v62;
      static __EntityRef.__fromCore(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v151);
      uint64_t v63 = static Entity.__fromCore(_:)();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v26, v24);
      id v64 = v128;
      unint64_t v26 = v146;
      SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)();
      uint64_t v65 = v147;
      uint64_t v66 = v148;
      uint64_t v67 = v145;
      (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v145, v26, v148);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v67, 0, 1, v66);
      char v68 = (void (*)(int8x16_t *, void))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v68(&v151, 0);
      specialized Builder.addComponent<A>(component:)((uint64_t)v26);
      unint64_t v69 = Prim.children.getter();
      unint64_t v70 = v69;
      if (v69 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v43 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      id v32 = v131;
      if (!v43)
      {
        swift_bridgeObjectRelease_n();
LABEL_58:
        (*(void (**)(char *, uint64_t, uint64_t, id))(v143 + 56))(v142, 1, 1, v32);
        char v80 = (void (*)(int8x16_t *, void))dispatch thunk of Entity.components.modify();
        Entity.ComponentSet.subscript.setter();
        v80(&v151, 0);
        swift_release();

        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v147 + 8))(v146, v148);
      }
      id v128 = v64;
      uint64_t v144 = v63;
      type metadata accessor for RIOPxrTfTokenRef(0);
      uint64_t v24 = 4;
      uint64_t v30 = &unk_268A58000;
      while (1)
      {
        uint64_t v71 = v24 - 4;
        if ((v70 & 0xC000000000000001) != 0)
        {
          uint64_t v72 = MEMORY[0x23ECBA630](v24 - 4, v70);
          uint64_t v73 = v24 - 3;
          if (__OFADD__(v71, 1)) {
            goto LABEL_74;
          }
        }
        else
        {
          uint64_t v72 = swift_retain();
          uint64_t v73 = v24 - 3;
          if (__OFADD__(v71, 1))
          {
LABEL_74:
            __break(1u);
            goto LABEL_75;
          }
        }
        os_log_t v145 = (char *)v72;
        unint64_t v26 = (char *)RIOPxrUsdObjectCopyName();
        if (one-time initialization token for shadowStructName != -1) {
          swift_once();
        }
        uint64_t v74 = (void *)static SpotLightComponentBuilder.shadowStructName;
        lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
        id v32 = v74;
        char v75 = static _CFObject.== infix(_:_:)();

        if (v75) {
          break;
        }
        swift_release();
        ++v24;
        if (v73 == v43)
        {
          swift_bridgeObjectRelease_n();
          id v32 = v131;
          id v64 = v128;
          goto LABEL_58;
        }
      }
      swift_bridgeObjectRelease_n();
      if (one-time initialization token for shadowEnabledAttributeName != -1) {
        swift_once();
      }
      id v78 = (id)static SpotLightComponentBuilder.shadowEnabledAttributeName;
      char v79 = specialized Prim.attributeValue<A>(of:type:)();

      id v32 = v131;
      id v64 = v128;
      if (v79 == 2 || (v79 & 1) == 0)
      {
        swift_release();
        goto LABEL_58;
      }
      if (one-time initialization token for shadowDepthBiasAttributeName != -1) {
        swift_once();
      }
      id v81 = (id)static SpotLightComponentBuilder.shadowDepthBiasAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      if (one-time initialization token for shadowCullModeAttributeName != -1) {
        swift_once();
      }
      id v82 = (id)static SpotLightComponentBuilder.shadowCullModeAttributeName;
      uint64_t v83 = specialized Prim.attributeValue<A>(of:type:)();
      uint64_t v85 = v84;

      if (v85)
      {
        if (v83 == 1801675074 && v85 == 0xE400000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v86 = (unsigned int *)MEMORY[0x263F167C8];
LABEL_73:
          uint64_t v87 = *v86;
          uint64_t v88 = type metadata accessor for MaterialParameterTypes.FaceCulling();
          uint64_t v89 = *(void *)(v88 - 8);
          uint64_t v90 = v140;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 104))(v140, v87, v88);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v90, 0, 1, v88);
          goto LABEL_82;
        }
        if (v83 == 0x746E6F7246 && v85 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v86 = (unsigned int *)MEMORY[0x263F167D8];
          goto LABEL_73;
        }
        if (v83 == 1701736270 && v85 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_80:
          uint64_t v86 = (unsigned int *)MEMORY[0x263F167D0];
          goto LABEL_73;
        }
        char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v91) {
          goto LABEL_80;
        }
      }
      uint64_t v92 = type metadata accessor for MaterialParameterTypes.FaceCulling();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v140, 1, 1, v92);
LABEL_82:
      if (one-time initialization token for shadowZNearAttributeName != -1) {
        swift_once();
      }
      id v93 = (id)static SpotLightComponentBuilder.shadowZNearAttributeName;
      uint64_t v94 = specialized Prim.attributeValue<A>(of:type:)();
      uint64_t v96 = v95;

      uint64_t v97 = (unsigned int *)MEMORY[0x263F16220];
      if (v96)
      {
        if (v94 == 0x6465786946 && v96 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_89:
          if (one-time initialization token for shadowZNearValueAttributeName != -1) {
            swift_once();
          }
          id v99 = (id)static SpotLightComponentBuilder.shadowZNearValueAttributeName;
          unint64_t v100 = specialized Prim.attributeValue<A>(of:type:)();

          float v101 = *(float *)&v100;
          if ((v100 & 0x100000000) != 0) {
            float v101 = 0.01;
          }
          uint64_t v102 = v132;
          *char v132 = v101;
          uint64_t v103 = v138;
          char v104 = *(void (**)(float *, uint64_t, uint64_t))(v138 + 104);
          uint64_t v105 = v139;
          v104(v102, *MEMORY[0x263F16218], v139);
          (*(void (**)(char *, float *, uint64_t))(v103 + 32))(v141, v102, v105);
LABEL_95:
          if (one-time initialization token for shadowZFarAttributeName != -1) {
            swift_once();
          }
          id v106 = (id)static SpotLightComponentBuilder.shadowZFarAttributeName;
          uint64_t v107 = specialized Prim.attributeValue<A>(of:type:)();
          uint64_t v109 = v108;

          if (v109)
          {
            if (v107 == 0x6465786946 && v109 == 0xE500000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_102:
              if (one-time initialization token for shadowZFarValueAttributeName != -1) {
                swift_once();
              }
              id v111 = (id)static SpotLightComponentBuilder.shadowZFarValueAttributeName;
              unint64_t v112 = specialized Prim.attributeValue<A>(of:type:)();

              float v113 = *(float *)&v112;
              if ((v112 & 0x100000000) != 0) {
                float v113 = 10.0;
              }
              char v114 = v133;
              float *v133 = v113;
              uint64_t v115 = v138;
              uint64_t v116 = v139;
              v104(v114, *MEMORY[0x263F16218], v139);
              uint64_t v117 = v137;
              (*(void (**)(char *, float *, uint64_t))(v115 + 32))(v137, v114, v116);
              goto LABEL_108;
            }
            char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v110) {
              goto LABEL_102;
            }
          }
          uint64_t v118 = *v97;
          uint64_t v115 = v138;
          uint64_t v117 = v137;
          uint64_t v116 = v139;
          v104((float *)v137, v118, v139);
LABEL_108:
          uint64_t v119 = (uint64_t)v136;
          SpotLightComponent.Shadow.init()();
          SpotLightComponent.Shadow.depthBias.setter();
          outlined init with copy of MaterialParameterTypes.FaceCulling?(v140, v134);
          SpotLightComponent.Shadow.cullModeOverride.setter();
          char v120 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
          uint64_t v121 = v135;
          v120(v135, v141, v116);
          SpotLightComponent.Shadow.zNear.setter();
          v120(v121, v117, v116);
          SpotLightComponent.Shadow.zFar.setter();
          uint64_t v122 = v116;
          char v124 = v142;
          uint64_t v123 = v143;
          (*(void (**)(char *, uint64_t, id))(v143 + 16))(v142, v119, v32);
          (*(void (**)(char *, void, uint64_t, id))(v123 + 56))(v124, 0, 1, v32);
          unint64_t v125 = (void (*)(int8x16_t *, void))dispatch thunk of Entity.components.modify();
          Entity.ComponentSet.subscript.setter();
          v125(&v151, 0);
          specialized Builder.addComponent<A>(component:)(v119);
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, id))(v123 + 8))(v119, v32);
          char v126 = *(void (**)(char *, uint64_t))(v115 + 8);
          v126(v137, v122);
          v126(v141, v122);
          outlined destroy of Any?(v140, &demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
          return (*(uint64_t (**)(char *, uint64_t))(v147 + 8))(v146, v148);
        }
        char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v98) {
          goto LABEL_89;
        }
      }
      char v104 = *(void (**)(float *, uint64_t, uint64_t))(v138 + 104);
      v104((float *)v141, *v97, v139);
      goto LABEL_95;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v151, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for lightComponent != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_23AAB22A0;
  *(void *)(v76 + 56) = MEMORY[0x263F8D310];
  *(void *)(v76 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v76 + 32) = v30;
  *(void *)(v76 + 40) = v32;
  os_log(_:dso:log:type:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t SpotLightComponentBuilder.clear(inputs:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent.Shadow?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __EntityRef();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v11 = static EntityBuilder.OutputName;
  uint64_t v12 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v11, v12, &v20);
  if (!v21)
  {
    outlined destroy of Any?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 17) & 1) == 0) {
    return swift_release();
  }
  type metadata accessor for Entity();
  uint64_t v13 = MEMORY[0x263F8DD08];
  __AssetRef.__as<A>(_:)();
  uint64_t v21 = v13;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
  static Entity.__fromCore(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = type metadata accessor for SpotLightComponent();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
  uint64_t v15 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v15(&v20, 0);
  uint64_t v16 = type metadata accessor for SpotLightComponent.Shadow();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v3, 1, 1, v16);
  uint64_t v17 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v17(&v20, 0);
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)(v0 + 17) = 0;
  return result;
}

uint64_t type metadata accessor for SpotLightComponentBuilder()
{
  return self;
}

uint64_t specialized SpotLightComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for realityKitComponentTypeName != -1) {
    swift_once();
  }
  unint64_t v9 = static SpotLightComponentBuilder.realityKitComponentTypeName;
  id v0 = (id)static SpotLightComponentBuilder.realityKitComponentTypeName;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v9;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v9 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t partial apply for closure #1 in SpotLightComponentBuilder.run(inputs:)()
{
  return closure #1 in SpotLightComponentBuilder.run(inputs:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_23A9D7284()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

id SafeSceneUUIDTable.getOrAssign(to:forScene:fallback:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v38 = a4;
  uint64_t v40 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v37 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v36 - v17;
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v36 - v21;
  id v39 = *(id *)(v6 + 16);
  objc_msgSend(v39, sel_lock, v20);
  uint64_t v23 = 10867;
  if (a3)
  {
    unint64_t v24 = 0xE200000000000000;
  }
  else
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
  }
  uint64_t v41 = v23;
  unint64_t v42 = v24;
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = a1;
  v25._object = a2;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  uint64_t v27 = v41;
  uint64_t v26 = v42;
  swift_beginAccess();
  uint64_t v28 = *(void *)(v6 + 24);
  if (*(void *)(v28 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
    if (v30)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v22, *(void *)(v28 + 56) + *(void *)(v11 + 72) * v29, v10);
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v31(v22, 0, 1, v10);
    }
    else
    {
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v31(v22, 1, 1, v10);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v22, 1, v10) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v40, v22, v10);
      swift_endAccess();
      swift_bridgeObjectRelease();
      id v33 = v39;
      return objc_msgSend(v33, sel_unlock);
    }
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v31(v22, 1, 1, v10);
  }
  outlined destroy of UUID?((uint64_t)v22);
  swift_endAccess();
  outlined init with copy of UUID?(v38, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, v10) == 1)
  {
    id v32 = v37;
    UUID.init()();
    outlined destroy of UUID?((uint64_t)v18);
  }
  else
  {
    id v32 = v37;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v37, v18, v10);
  }
  id v33 = v39;
  uint64_t v34 = v40;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v32, v10);
  v31(v15, 0, 1, v10);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v15, v27, v26);
  swift_endAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v34, v32, v10);
  return objc_msgSend(v33, sel_unlock);
}

uint64_t SafeSceneUUIDTable.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SafeSceneUUIDTable()
{
  return self;
}

uint64_t SceneAssetKeepAlive.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneAssetKeepAlive()
{
  return self;
}

uint64_t specialized static ActionBuilder.findSceneRoot(from:)(uint64_t a1)
{
  swift_retain();
  if (RIOPxrUsdObjectIsValid())
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = a1;
      swift_retain();
      uint64_t v4 = Object.authoredMetadata()();
      swift_release();
      if (String.count.getter() < 1) {
        id v5 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v5 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v6 = v5;
      if (*(void *)(v4 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v8 & 1) != 0))
      {
        id v9 = *(id *)(*(void *)(v4 + 56) + 8 * v7);

        swift_bridgeObjectRelease();
        uint64_t v10 = RIOPxrVtValueCopyString();
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v14 = v13;

          if (v14)
          {
            if (v12 == 0x62694C656E656373 && v14 == 0xEC00000079726172)
            {
              swift_release();
              swift_bridgeObjectRelease();
              return v2;
            }
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v15)
            {
              swift_release();
              return v2;
            }
          }
        }
        else
        {
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      uint64_t v16 = (void *)RIOPxrUsdObjectCopyName();
      if (String.count.getter() < 1) {
        id v17 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v17 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v18 = v17;
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
      char v19 = static _CFObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = RIOPxrUsdPrimCopyParent();
        if (v20)
        {
          uint64_t v21 = v20;
          type metadata accessor for Prim();
          a1 = swift_allocObject();
          *(void *)(a1 + 16) = v21;
          swift_release();
          uint64_t v2 = v3;
          if (RIOPxrUsdObjectIsValid()) {
            continue;
          }
        }
      }
      swift_release();
      break;
    }
  }
  swift_release();
  return 0;
}

void specialized static ActionBuilder.generateChangeSceneActionSpecifications(inputs:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  id v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  unint64_t v7 = (char *)&v71 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v81 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  char v80 = (char *)&v71 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v71 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v71 - v17;
  Inputs.prim.getter();
  if (String.count.getter() < 1) {
    id v19 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v19 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v20 = v19;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    swift_release();
    uint64_t v82 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return;
  }
  uint64_t v21 = RIOPxrUsdPrimCopyRelationship();

  swift_release();
  type metadata accessor for Relationship();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v21;
  uint64_t v23 = Relationship.targets.getter();
  if (*(void *)(v23 + 16))
  {
    id EmptyPath = *(id *)(v23 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
  }
  outlined consume of Result<AnyAttribute, Object.Error>(v22, 0);
  uint64_t v25 = Inputs.prim.getter();
  uint64_t v26 = specialized static ActionBuilder.findSceneRoot(from:)(v25);
  swift_release();
  if (!v26)
  {

    return;
  }
  uint64_t v79 = v26;
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 56);
  id v28 = (id)RIOBuilderInputsGetImportSession();
  if (!v28)
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v29 = v28;
  char v75 = v16;
  uint64_t v76 = v27;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v31 = *(void *)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable);
  id v32 = EmptyPath;
  swift_retain();
  id v33 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;
  id v77 = v32;

  uint64_t v82 = 10867;
  unint64_t v83 = 0xE200000000000000;
  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  uint64_t v38 = v82;
  uint64_t v39 = v83;
  uint64_t v40 = *(void **)(v31 + 16);
  objc_msgSend(v40, sel_lock);
  swift_beginAccess();
  uint64_t v41 = *(void *)(v31 + 24);
  uint64_t v42 = *(void *)(v41 + 16);
  id v78 = v18;
  if (v42)
  {
    swift_bridgeObjectRetain();
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
    if (v44)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, *(void *)(v41 + 56) + *(void *)(v9 + 72) * v43, v8);
      uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v45(v7, 0, 1, v8);
    }
    else
    {
      uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v45(v7, 1, 1, v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v45(v7, 1, 1, v8);
  }
  swift_endAccess();
  objc_msgSend(v40, sel_unlock);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v46(v7, 1, v8) == 1)
  {
    swift_release();

    uint64_t v47 = (uint64_t)v7;
LABEL_31:
    outlined destroy of UUID?(v47);
    return;
  }
  uint64_t v74 = v45;
  id v48 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v48(v78, v7, v8);
  id v49 = (id)RIOBuilderInputsGetImportSession();
  if (!v49) {
    goto LABEL_35;
  }
  uint64_t v50 = v49;
  uint64_t v72 = v48;
  uint64_t v73 = v9 + 32;
  uint64_t v76 = v46;
  uint64_t v51 = RIOImportSessionGetSwiftObject();

  if (!v51)
  {
LABEL_36:
    __break(1u);
    return;
  }
  uint64_t v52 = *(void *)(v51 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable);
  swift_retain();
  id v53 = (id)RIOPxrUsdObjectCopyPath();
  int8x16_t v54 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v56;

  id v58 = *(void **)(v52 + 16);
  objc_msgSend(v58, sel_lock);
  swift_beginAccess();
  uint64_t v59 = *(void *)(v52 + 24);
  if (*(void *)(v59 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v57);
    if (v61)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v5, *(void *)(v59 + 56) + *(void *)(v9 + 72) * v60, v8);
      uint64_t v62 = v5;
      uint64_t v63 = 0;
    }
    else
    {
      uint64_t v62 = v5;
      uint64_t v63 = 1;
    }
    v74(v62, v63, 1, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v74(v5, 1, 1, v8);
  }
  swift_endAccess();
  objc_msgSend(v58, sel_unlock);

  swift_release();
  swift_bridgeObjectRelease();
  if (v76(v5, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v78, v8);
    swift_release();

    uint64_t v47 = (uint64_t)v5;
    goto LABEL_31;
  }
  id v64 = v75;
  v72(v75, v5, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
  uint64_t v76 = (unsigned int (*)(char *, uint64_t, uint64_t))type metadata accessor for __RKEntityActionSpecification();
  uint64_t v65 = *((void *)v76 - 1);
  unint64_t v66 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_23AAB22A0;
  char v68 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v68(v80, v64, v8);
  unint64_t v69 = v78;
  v68(v81, v78, v8);
  __RKChangeSceneActionArguments.init(sceneRoot:targetSceneIdentifier:)();
  (*(void (**)(unint64_t, void, unsigned int (*)(char *, uint64_t, uint64_t)))(v65 + 104))(v67 + v66, *MEMORY[0x263F16350], v76);
  swift_release();

  unint64_t v70 = *(void (**)(char *, uint64_t))(v9 + 8);
  v70(v75, v8);
  v70(v69, v8);
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d105IO22TypeNamePrimDirtyStateC04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16fg2O5h88VG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13DescriptorRefaSgtcfc12generateCoreL_AQyFSo08I60TftX0aAKcfu_33_1208ebe0c1611b0e36169838b3b02464AkUTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = specialized Set.startIndex.getter(a1);
    uint64_t v4 = result;
    uint64_t v6 = v5;
    char v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_12;
      }
      id v9 = *(id *)(*(void *)(a1 + 48) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t result = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, a1);
      uint64_t v4 = result;
      uint64_t v6 = v10;
      char v8 = v11 & 1;
      if (!--v2)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v10, v11 & 1);
        return v12;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO18PropertyDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d16IO22TypeNamePrimgh146C04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16ToolsFoundationsO5TokenVG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13J94RefaSgtcfc12generateCoreL_AQyFSo0vfuwX0aANcfu0_32f9454acde0e12ec4aa46a683ab4ea6ebAnUTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.count.getter();
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v3) {
      return result;
    }
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = __CocoaSet.startIndex.getter();
    uint64_t v20 = v5;
    unsigned __int8 v21 = 1;
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = specialized _NativeSet.startIndex.getter(a1);
    uint64_t v20 = v6;
    unsigned __int8 v21 = v7 & 1;
    while (1)
    {
LABEL_9:
      while (1)
      {
        uint64_t v13 = v19;
        uint64_t v14 = v20;
        uint64_t v15 = v21;
        id v16 = *(id *)(specialized Set.subscript.getter(v19, v20, v21, a1) + 24);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if (v2) {
          break;
        }
        uint64_t v8 = specialized _NativeSet.index(after:)(v13, v14, v15, a1);
        uint64_t v10 = v9;
        char v12 = v11;
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v13, v14, v15);
        uint64_t v19 = v8;
        uint64_t v20 = v10;
        unsigned __int8 v21 = v12 & 1;
        if (!--v3) {
          goto LABEL_14;
        }
      }
      if ((v15 & 1) == 0) {
        break;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PropertyDirtyState>.Index);
      uint64_t v17 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v17(v18, 0);
      if (!--v3)
      {
LABEL_14:
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v19, v20, v21);
        return v22;
      }
    }
    __break(1u);
  }
  return result;
}

void *TypeNamePrimDirtyState.__allocating_init(typeName:primMetadataContainsAnyOf:propertiesContainAnyOf:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v5;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v8 = v7;
  swift_setDeallocating();
  uint64_t v9 = swift_arrayDestroy();
  uint64_t v10 = a3(v9);
  type metadata accessor for TypeNamePrimDirtyState();
  char v11 = (void *)swift_allocObject();
  void v11[5] = v8;
  swift_bridgeObjectRetain();
  id v12 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v8, v10, a2);
  swift_bridgeObjectRelease();
  v11[2] = a2;
  v11[3] = v10;
  v11[4] = v12;
  return v11;
}

uint64_t PrimDirtyState.__allocating_init(propertiesContainAnyOf:)(uint64_t (*a1)(void))
{
  uint64_t v2 = a1();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 152);
  uint64_t v4 = MEMORY[0x263F8EE88];
  return v3(v4, v2, 0);
}

uint64_t PrimDirtyState.primMetadataContainsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrimDirtyState.propertiesContainAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrimDirtyState.__allocating_init(metadata:propertiesContainAnyOf:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 152);
  return v5(a1, v4, 0);
}

uint64_t PrimDirtyState.hash(into:)(long long *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static PrimDirtyState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a2) & 1;
}

uint64_t PrimDirtyState.isEqual(to:)(uint64_t a1)
{
  if ((specialized static Set.== infix(_:_:)(*(void *)(v1 + 24), *(void *)(a1 + 24)) & 1) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  return specialized static Set.== infix(_:_:)(v3, v4);
}

uint64_t PrimDirtyState.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrimDirtyState.Type);
  uint64_t v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyDirtyState();
  lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, 255, (void (*)(uint64_t))type metadata accessor for PropertyDirtyState);
  v1._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0xD000000000000019;
  v3._object = (void *)0x800000023AAADC80;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0xD00000000000001BLL;
  v6._object = (void *)0x800000023AAADCA0;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PrimDirtyState.__allocating_init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(a1, a2, a3);
  return v6;
}

uint64_t PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  if (a3)
  {
    uint64_t v4 = a3;
LABEL_13:
    v3[4] = v4;
    return (uint64_t)v3;
  }
  uint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO18PropertyDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d16IO22TypeNamePrimgh146C04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16ToolsFoundationsO5TokenVG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13J94RefaSgtcfc12generateCoreL_AQyFSo0vfuwX0aANcfu0_32f9454acde0e12ec4aa46a683ab4ea6ebAnUTf3nnnpk_nTf1cn_nTm(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v18 = v17;
    uint64_t v19 = isa;
    uint64_t v4 = RIOBuilderDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors();

    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t result = specialized Set.startIndex.getter(a1);
  uint64_t v9 = result;
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v11) {
      goto LABEL_16;
    }
    RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t result = specialized _NativeSet.index(after:)(v9, v11, v13 & 1, a1);
    uint64_t v9 = result;
    uint64_t v11 = v14;
    char v13 = v15 & 1;
    if (!--v7)
    {
      outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v14, v15 & 1);
      swift_bridgeObjectRelease();
      uint64_t v5 = a2;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t PrimDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x23ECBB590]();
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v9 = v5;
  if ((v6 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      MEMORY[0x23ECBA630](i, v6);
      uint64_t v11 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
      swift_unknownObjectRelease();
      unint64_t v13 = *(void *)(v5 + 16);
      unint64_t v12 = *(void *)(v5 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v5 + 16) = v13 + 1;
      *(void *)(v5 + 8 * v13 + 32) = v11;
    }
  }
  else
  {
    for (uint64_t j = 0; j != v7; ++j)
    {
      uint64_t v15 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
      unint64_t v17 = *(void *)(v5 + 16);
      unint64_t v16 = *(void *)(v5 + 24);
      if (v17 >= v16 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v5 + 16) = v17 + 1;
      *(void *)(v5 + 8 * v17 + 32) = v15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v18 = specialized Set.init<A>(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v19 = (void *)MEMORY[0x23ECBB5A0](a1);
  type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_19:
      uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
      if ((v20 & 0x8000000000000000) == 0)
      {
        uint64_t v21 = 0;
        do
        {
          if ((v5 & 0xC000000000000001) != 0) {
            id v22 = (id)MEMORY[0x23ECBA630](v21, v5);
          }
          else {
            id v22 = *(id *)(v5 + 8 * v21 + 32);
          }
          uint64_t v23 = v22;
          uint64_t v24 = RIOBuilderDirtyPropertyDescriptorCopyType();
          if (v24 == 3)
          {
            specialized NamespacedPropertyDirtyState.__allocating_init(core:)(v23);
          }
          else if (v24 == 2)
          {
            specialized NamedPropertyDirtyState.__allocating_init(core:)((uint64_t)v23);
          }
          else
          {
            type metadata accessor for PropertyDirtyState();
            PropertyDirtyState.__allocating_init(core:)((uint64_t)v23);
          }
          ++v21;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v20 != v21);
        unint64_t v25 = v5;
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
LABEL_37:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20) {
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v25 = MEMORY[0x263F8EE78];
LABEL_33:
  uint64_t v26 = specialized Set.init<A>(_:)(v25);
  swift_bridgeObjectRelease();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 152);
  return v27(v18, v26, a1);
}

uint64_t PrimDirtyState.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t PrimDirtyState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int PrimDirtyState.hashValue.getter()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 128))(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PrimDirtyState()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 128))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PrimDirtyState()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PrimDirtyState()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 128))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PrimDirtyState()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PrimDirtyState(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))(*a2) & 1;
}

uint64_t TypeNamePrimDirtyState.typeNameIsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

void *TypeNamePrimDirtyState.__allocating_init(typeName:propertiesContainAnyOf:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v3;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v6 = v5;
  swift_setDeallocating();
  uint64_t v7 = swift_arrayDestroy();
  uint64_t v8 = a2(v7);
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v9 = (void *)swift_allocObject();
  v9[5] = v6;
  swift_bridgeObjectRetain();
  uint64_t v10 = MEMORY[0x263F8EE88];
  id v11 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v6, v8, MEMORY[0x263F8EE88]);
  swift_bridgeObjectRelease();
  v9[2] = v10;
  v9[3] = v8;
  v9[4] = v11;
  return v9;
}

void *TypeNamePrimDirtyState.__allocating_init(typeName:primMetadataContainsAnyOf:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v3;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v6 = v5;
  swift_setDeallocating();
  swift_arrayDestroy();
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v7 = MEMORY[0x263F8EE88];
  }
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v8 = (void *)swift_allocObject();
  v8[5] = v6;
  swift_bridgeObjectRetain();
  id v9 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v6, v7, a2);
  swift_bridgeObjectRelease();
  void v8[2] = a2;
  v8[3] = v7;
  v8[4] = v9;
  return v8;
}

void *TypeNamePrimDirtyState.__allocating_init(typeNameIsAnyOf:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE88];
  unint64_t v3 = MEMORY[0x263F8EE88];
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      unint64_t v3 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    }
    else {
      unint64_t v3 = MEMORY[0x263F8EE88];
    }
  }
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v4 = (void *)swift_allocObject();
  v4[5] = a1;
  swift_bridgeObjectRetain();
  id v5 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, a1, v3, v2);
  swift_bridgeObjectRelease();
  v4[2] = v2;
  void v4[3] = v3;
  long long v4[4] = v5;
  return v4;
}

void *TypeNamePrimDirtyState.__allocating_init(typeNameIsAnyOf:primMetadataContainsAnyOf:)(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v4 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v4 = MEMORY[0x263F8EE88];
  }
  type metadata accessor for TypeNamePrimDirtyState();
  id v5 = (void *)swift_allocObject();
  v5[5] = a1;
  swift_bridgeObjectRetain();
  id v6 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, a1, v4, a2);
  swift_bridgeObjectRelease();
  uint64_t v5[2] = a2;
  v5[3] = v4;
  long long v5[4] = v6;
  return v5;
}

void *TypeNamePrimDirtyState.__allocating_init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  type metadata accessor for TypeNamePrimDirtyState();
  id v6 = (void *)swift_allocObject();
  v6[5] = a1;
  swift_bridgeObjectRetain();
  id v7 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, a1, v5, a2);
  swift_bridgeObjectRelease();
  _OWORD v6[2] = a2;
  v6[3] = v5;
  v6[4] = v7;
  return v6;
}

uint64_t TypeNamePrimDirtyState.hash(into:)(long long *a1)
{
  uint64_t v3 = v1[5];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = v1[3];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = v1[2];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t TypeNamePrimDirtyState.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = v0[5];
    uint64_t v4 = *(void *)(v1 + 40);
    swift_retain();
    swift_bridgeObjectRetain();
    LOBYTE(v3) = specialized static Set.== infix(_:_:)(v3, v4);
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0
      && (uint64_t v5 = v0[3],
          uint64_t v6 = *(void *)(v2 + 24),
          swift_bridgeObjectRetain(),
          LOBYTE(v5) = specialized static Set.== infix(_:_:)(v5, v6),
          swift_bridgeObjectRelease(),
          (v5 & 1) != 0))
    {
      uint64_t v7 = v0[2];
      uint64_t v8 = *(void *)(v2 + 16);
      swift_bridgeObjectRetain();
      char v9 = specialized static Set.== infix(_:_:)(v7, v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = 0;
    }
    swift_release();
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t TypeNamePrimDirtyState.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypeNamePrimDirtyState.Type);
  uint64_t v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v1._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0xD000000000000012;
  v3._object = (void *)0x800000023AAADCC0;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyDirtyState();
  lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, 255, (void (*)(uint64_t))type metadata accessor for PropertyDirtyState);
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0xD000000000000018;
  v6._object = (void *)0x800000023AAADCE0;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0xD00000000000001BLL;
  v9._object = (void *)0x800000023AAADCA0;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

id generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    return a1;
  }
  else
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d105IO22TypeNamePrimDirtyStateC04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16fg2O5h88VG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13DescriptorRefaSgtcfc12generateCoreL_AQyFSo08I60TftX0aAKcfu_33_1208ebe0c1611b0e36169838b3b02464AkUTf3nnnpk_nTf1cn_n(a2);
    type metadata accessor for RIOPxrTfTokenRef(0);
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO18PropertyDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d16IO22TypeNamePrimgh146C04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16ToolsFoundationsO5TokenVG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13J94RefaSgtcfc12generateCoreL_AQyFSo0vfuwX0aANcfu0_32f9454acde0e12ec4aa46a683ab4ea6ebAnUTf3nnnpk_nTf1cn_nTm(a3);
    type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      id result = (id)specialized Set.startIndex.getter(a4);
      uint64_t v10 = (uint64_t)result;
      uint64_t v12 = v11;
      char v14 = v13 & 1;
      while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a4 + 32))
      {
        if (((*(void *)(a4 + 56 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_15;
        }
        if (*(_DWORD *)(a4 + 36) != v12) {
          goto LABEL_16;
        }
        RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        id result = (id)specialized _NativeSet.index(after:)(v10, v12, v14 & 1, a4);
        uint64_t v10 = (uint64_t)result;
        uint64_t v12 = v15;
        char v14 = v16 & 1;
        if (!--v9)
        {
          outlined consume of Set<ToolsFoundations.Token>.Index._Variant((uint64_t)result, v15, v16 & 1);
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    else
    {
LABEL_13:
      type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v18 = RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors();

      return (id)v18;
    }
  }
  return result;
}

void TypeNamePrimDirtyState.__allocating_init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)()
{
}

uint64_t TypeNamePrimDirtyState.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t TypeNamePrimDirtyState.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TypeNamePrimDirtyState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v22 = v1;
    uint64_t v23 = a1 + 32;
    do
    {
      Swift::String v6 = *(void **)(v23 + 8 * v4);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, type metadata accessor for RIOPxrTfTokenRef);
      id v7 = v6;
      _CFObject.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = v8 & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      if (((1 << v10) & v12) != 0)
      {
        id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
        char v15 = static _CFObject.== infix(_:_:)();

        if (v15)
        {
LABEL_3:

          uint64_t v1 = v22;
          goto LABEL_4;
        }
        uint64_t v16 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v16;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          id v17 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
          char v18 = static _CFObject.== infix(_:_:)();

          if (v18) {
            goto LABEL_3;
          }
        }
        uint64_t v1 = v22;
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(*(void *)(v3 + 48) + 8 * v10) = v7;
      uint64_t v19 = *(void *)(v3 + 16);
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20)
      {
        __break(1u);
        return;
      }
      *(void *)(v3 + 16) = v21;
LABEL_4:
      ++v4;
    }
    while (v4 != v1);
  }
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v22 = v1;
    uint64_t v23 = a1 + 32;
    do
    {
      Swift::String v6 = *(void **)(v23 + 8 * v4);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrSdfPathRef(0);
      lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, type metadata accessor for RIOPxrSdfPathRef);
      id v7 = v6;
      _CFObject.hash(into:)();

      Swift::Int v8 = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = v8 & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      if (((1 << v10) & v12) != 0)
      {
        id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
        char v15 = static _CFObject.== infix(_:_:)();

        if (v15)
        {
LABEL_3:

          uint64_t v1 = v22;
          goto LABEL_4;
        }
        uint64_t v16 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v16;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          id v17 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
          char v18 = static _CFObject.== infix(_:_:)();

          if (v18) {
            goto LABEL_3;
          }
        }
        uint64_t v1 = v22;
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(*(void *)(v3 + 48) + 8 * v10) = v7;
      uint64_t v19 = *(void *)(v3 + 16);
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20)
      {
        __break(1u);
        return;
      }
      *(void *)(v3 + 16) = v21;
LABEL_4:
      ++v4;
    }
    while (v4 != v1);
  }
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    id result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
      id result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      id result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 56;
  uint64_t v22 = v5;
  while ((v1 & 0xC000000000000001) != 0)
  {
    id result = MEMORY[0x23ECBA630](v7, v1);
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_27;
    }
LABEL_17:
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(void *)v9 + 120))(v23);
    id result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) == 0) {
      goto LABEL_24;
    }
    uint64_t v16 = *(uint64_t (**)(unint64_t))(**(void **)(*(void *)(v3 + 48) + 8 * v12) + 128);
    swift_retain();
    LOBYTE(v16) = v16(v9);
    id result = swift_release();
    if (v16)
    {
LABEL_10:
      id result = swift_release();
      uint64_t v5 = v22;
      if (v7 == v22) {
        return v3;
      }
    }
    else
    {
      uint64_t v17 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v17;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        char v18 = *(uint64_t (**)(unint64_t))(**(void **)(*(void *)(v3 + 48) + 8 * v12) + 128);
        swift_retain();
        char v19 = v18(v9);
        id result = swift_release();
        if (v19) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = v22;
LABEL_24:
      *(void *)(v8 + 8 * v13) = v15 | v14;
      *(void *)(*(void *)(v3 + 48) + 8 * v12) = v9;
      uint64_t v20 = *(void *)(v3 + 16);
      BOOL v10 = __OFADD__(v20, 1);
      uint64_t v21 = v20 + 1;
      if (v10) {
        goto LABEL_28;
      }
      *(void *)(v3 + 16) = v21;
      if (v7 == v5) {
        return v3;
      }
    }
  }
  if (v7 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_29;
  }
  unint64_t v9 = *(void *)(v1 + 32 + 8 * v7);
  id result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_17;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(unint64_t);
  uint64_t v17;
  uint64_t (*v18)(unint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23[72];

  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    id result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
      id result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      id result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 56;
  uint64_t v22 = v5;
  while ((v1 & 0xC000000000000001) != 0)
  {
    id result = MEMORY[0x23ECBA630](v7, v1);
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_27;
    }
LABEL_17:
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(void *)v9 + 128))(v23);
    id result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) == 0) {
      goto LABEL_24;
    }
    uint64_t v16 = *(uint64_t (**)(unint64_t))(**(void **)(*(void *)(v3 + 48) + 8 * v12) + 136);
    swift_retain();
    LOBYTE(v16) = v16(v9);
    id result = swift_release();
    if (v16)
    {
LABEL_10:
      id result = swift_release();
      uint64_t v5 = v22;
      if (v7 == v22) {
        return v3;
      }
    }
    else
    {
      uint64_t v17 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v17;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        char v18 = *(uint64_t (**)(unint64_t))(**(void **)(*(void *)(v3 + 48) + 8 * v12) + 136);
        swift_retain();
        char v19 = v18(v9);
        id result = swift_release();
        if (v19) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = v22;
LABEL_24:
      *(void *)(v8 + 8 * v13) = v15 | v14;
      *(void *)(*(void *)(v3 + 48) + 8 * v12) = v9;
      uint64_t v20 = *(void *)(v3 + 16);
      BOOL v10 = __OFADD__(v20, 1);
      uint64_t v21 = v20 + 1;
      if (v10) {
        goto LABEL_28;
      }
      *(void *)(v3 + 16) = v21;
      if (v7 == v5) {
        return v3;
      }
    }
  }
  if (v7 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_29;
  }
  unint64_t v9 = *(void *)(v1 + 32 + 8 * v7);
  id result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_17;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized TypeNamePrimDirtyState.__allocating_init(typeName:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v1;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = MEMORY[0x263F8EE88];
  unint64_t v6 = MEMORY[0x263F8EE88];
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      unint64_t v6 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    }
    else {
      unint64_t v6 = MEMORY[0x263F8EE88];
    }
  }
  type metadata accessor for TypeNamePrimDirtyState();
  unint64_t v7 = (void *)swift_allocObject();
  v7[5] = v4;
  swift_bridgeObjectRetain();
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v6, v5);
  swift_bridgeObjectRelease();
  v7[2] = v5;
  void v7[3] = v6;
  long long v7[4] = v8;
  return v7;
}

uint64_t specialized static PropertyDirtyStateBuilder.buildBlock(_:)(unint64_t a1)
{
  uint64_t v7 = MEMORY[0x263F8EE88];
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x23ECBA630](v4, a1);
      }
      else
      {
        uint64_t v5 = *(void *)(a1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      swift_retain();
      specialized Set._Variant.insert(_:)(&v6, v5);
      swift_release();
      swift_release();
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t type metadata accessor for TypeNamePrimDirtyState()
{
  return self;
}

uint64_t base witness table accessor for Equatable in PrimDirtyState(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, a2, (void (*)(uint64_t))type metadata accessor for PrimDirtyState);
}

uint64_t type metadata accessor for PrimDirtyState()
{
  return self;
}

ValueMetadata *type metadata accessor for PropertyDirtyStateBuilder()
{
  return &type metadata for PropertyDirtyStateBuilder;
}

uint64_t method lookup function for PrimDirtyState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PrimDirtyState);
}

uint64_t dispatch thunk of PrimDirtyState.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PrimDirtyState.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PrimDirtyState.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t method lookup function for TypeNamePrimDirtyState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TypeNamePrimDirtyState);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          char v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  Swift::Int result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    id v33 = v3 + 56;
    unint64_t v29 = v1;
    char v30 = a1 + 32;
    id v28 = v3;
    while (1)
    {
      uint64_t v31 = v4;
      uint64_t v5 = (uint64_t *)(v30 + 40 * v4);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      unint64_t v9 = v5[2];
      uint64_t v8 = v5[3];
      uint64_t v10 = *((unsigned __int8 *)v5 + 32);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      String.hash(into:)();
      id v32 = v10;
      Hasher._combine(_:)(v10);
      Swift::Int result = Hasher._finalize()();
      unint64_t v12 = ~(-1 << *(unsigned char *)(v3 + 32));
      uint64_t v13 = result & v12;
      uint64_t v14 = (result & (unint64_t)v12) >> 6;
      uint64_t v15 = *(void *)(v33 + 8 * v14);
      uint64_t v16 = 1 << (result & v12);
      BOOL v17 = *(void *)(v3 + 48);
      if ((v16 & v15) != 0)
      {
        do
        {
          uint64_t v18 = v17 + 40 * v13;
          Swift::Int result = *(void *)v18;
          char v19 = *(void *)(v18 + 16);
          uint64_t v20 = *(void *)(v18 + 24);
          uint64_t v21 = *(unsigned __int8 *)(v18 + 32);
          uint64_t v22 = *(void *)v18 == v7 && *(void *)(v18 + 8) == v6;
          if (v22 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            if (v19 == v9 && v20 == v8)
            {
              if (v32 == v21) {
                goto LABEL_3;
              }
            }
            else
            {
              Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0 && ((v32 ^ v21) & 1) == 0)
              {
LABEL_3:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v3 = v28;
                uint64_t v1 = v29;
                goto LABEL_4;
              }
            }
          }
          uint64_t v13 = (v13 + 1) & v12;
          uint64_t v14 = v13 >> 6;
          uint64_t v15 = *(void *)(v33 + 8 * (v13 >> 6));
          uint64_t v16 = 1 << v13;
        }
        while ((v15 & (1 << v13)) != 0);
        uint64_t v3 = v28;
        uint64_t v1 = v29;
        BOOL v17 = *(void *)(v28 + 48);
      }
      *(void *)(v33 + 8 * v14) = v16 | v15;
      uint64_t v24 = v17 + 40 * v13;
      *(void *)uint64_t v24 = v7;
      *(void *)(v24 + 8) = v6;
      *(void *)(v24 + 16) = v9;
      *(void *)(v24 + 24) = v8;
      *(unsigned char *)(v24 + 32) = v32;
      uint64_t v25 = *(void *)(v3 + 16);
      uint64_t v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        break;
      }
      *(void *)(v3 + 16) = v27;
LABEL_4:
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v1) {
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE88];
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;
  Swift::Int result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  long long v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[3];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned __int8 v39;
  void v40[6];
  unsigned __int8 v41;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v27 = v1;
    id v28 = a1 + 32;
    while (1)
    {
      uint64_t v6 = v28 + 56 * v4;
      uint64_t v8 = *(void *)(v6 + 8);
      unint64_t v9 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      unint64_t v11 = *(void **)(v6 + 32);
      unint64_t v12 = *(void *)(v6 + 40);
      uint64_t v13 = *(unsigned char *)(v6 + 48);
      v40[0] = *(void *)v6;
      uint64_t v7 = v40[0];
      v40[1] = v8;
      v40[2] = v9;
      v40[3] = v10;
      v40[4] = v11;
      v40[5] = v12;
      uint64_t v41 = v13;
      id v33 = v40[0];
      uint64_t v34 = v8;
      uint64_t v35 = v9;
      uint64_t v36 = v10;
      Swift::String v37 = v11;
      uint64_t v38 = v12;
      uint64_t v39 = v13;
      Hasher.init(_seed:)();
      unint64_t v29 = v8;
      char v30 = v7;
      outlined copy of InputDescriptor(v7, v8, v9, v10, v11, v12, v13);
      InputDescriptor.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v15 = ~(-1 << *(unsigned char *)(v3 + 32));
      uint64_t v16 = result & v15;
      BOOL v17 = (result & (unint64_t)v15) >> 6;
      uint64_t v18 = *(void *)(v5 + 8 * v17);
      char v19 = 1 << (result & v15);
      if ((v19 & v18) != 0)
      {
        while (1)
        {
          uint64_t v20 = *(void *)(v3 + 48) + 56 * v16;
          uint64_t v21 = *(unsigned char *)(v20 + 48);
          uint64_t v22 = *(_OWORD *)(v20 + 16);
          v31[0] = *(_OWORD *)v20;
          v31[1] = v22;
          v31[2] = *(_OWORD *)(v20 + 32);
          id v32 = v21;
          Swift::Int result = specialized static InputDescriptor.== infix(_:_:)((uint64_t)v31, (uint64_t)v40);
          if (result) {
            break;
          }
          uint64_t v16 = (v16 + 1) & v15;
          BOOL v17 = v16 >> 6;
          uint64_t v18 = *(void *)(v5 + 8 * (v16 >> 6));
          char v19 = 1 << v16;
          if ((v18 & (1 << v16)) == 0) {
            goto LABEL_8;
          }
        }
        outlined consume of InputDescriptor(v30, v29, v9, v10, v11, v12, v13);
      }
      else
      {
LABEL_8:
        *(void *)(v5 + 8 * v17) = v19 | v18;
        BOOL v23 = *(void *)(v3 + 48) + 56 * v16;
        *(void *)BOOL v23 = v30;
        *(void *)(v23 + 8) = v29;
        *(void *)(v23 + 16) = v9;
        *(void *)(v23 + 24) = v10;
        *(void *)(v23 + 32) = v11;
        *(void *)(v23 + 40) = v12;
        *(unsigned char *)(v23 + 48) = v13;
        uint64_t v24 = *(void *)(v3 + 16);
        uint64_t v25 = __OFADD__(v24, 1);
        uint64_t v26 = v24 + 1;
        if (v25)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v26;
      }
      if (++v4 == v27) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

void *specialized TypeNamePrimDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v2 = (void *)RIOBuilderTypeNameDirtyPrimDescriptorCopyTypeNames();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_16;
  }
LABEL_3:
  Swift::Int result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v7 = v3;
  if ((v4 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v9 = MEMORY[0x23ECBA630](i, v4);
      unint64_t v11 = *(void *)(v3 + 16);
      unint64_t v10 = *(void *)(v3 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v3 + 16) = v11 + 1;
      *(void *)(v3 + 8 * v11 + 32) = v9;
    }
  }
  else
  {
    for (uint64_t j = 0; j != v5; ++j)
    {
      unint64_t v13 = *(void *)(v3 + 16);
      unint64_t v14 = *(void *)(v3 + 24);
      id v15 = *(id *)(v4 + 8 * j + 32);
      if (v13 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
      }
      *(void *)(v3 + 16) = v13 + 1;
      *(void *)(v3 + 8 * v13 + 32) = v15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v16 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  BOOL v17 = (void *)MEMORY[0x23ECBB960](a1);
  type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v3 >> 62))
  {
    uint64_t v18 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v18) {
      goto LABEL_19;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    unint64_t v23 = MEMORY[0x263F8EE78];
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_32;
  }
LABEL_19:
  Swift::Int result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
  if (v18 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v19 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v20 = (id)MEMORY[0x23ECBA630](v19, v3);
    }
    else {
      id v20 = *(id *)(v3 + 8 * v19 + 32);
    }
    uint64_t v21 = v20;
    uint64_t v22 = RIOBuilderDirtyPropertyDescriptorCopyType();
    if (v22 == 3)
    {
      specialized NamespacedPropertyDirtyState.__allocating_init(core:)(v21);
    }
    else if (v22 == 2)
    {
      specialized NamedPropertyDirtyState.__allocating_init(core:)((uint64_t)v21);
    }
    else
    {
      type metadata accessor for PropertyDirtyState();
      PropertyDirtyState.__allocating_init(core:)((uint64_t)v21);
    }
    ++v19;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v18 != v19);
  unint64_t v23 = v3;
  swift_bridgeObjectRelease();
LABEL_33:
  uint64_t v24 = specialized Set.init<A>(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)MEMORY[0x23ECBB950](a1);
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v3 >> 62))
  {
    uint64_t v26 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_35;
    }
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8EE78];
LABEL_49:
    uint64_t v36 = specialized Set.init<A>(_:)(v27);
    swift_bridgeObjectRelease();
    type metadata accessor for TypeNamePrimDirtyState();
    Swift::Int result = (void *)swift_allocObject();
    result[2] = v36;
    result[3] = v24;
    result[4] = a1;
    result[5] = v16;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v26) {
    goto LABEL_48;
  }
LABEL_35:
  Swift::Int result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0);
  if ((v26 & 0x8000000000000000) == 0)
  {
    uint64_t v27 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (uint64_t k = 0; k != v26; ++k)
      {
        MEMORY[0x23ECBA630](k, v3);
        uint64_t v29 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        unint64_t v31 = *(void *)(v3 + 16);
        unint64_t v30 = *(void *)(v3 + 24);
        if (v31 >= v30 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        }
        *(void *)(v3 + 16) = v31 + 1;
        *(void *)(v3 + 8 * v31 + 32) = v29;
      }
    }
    else
    {
      for (uint64_t m = 0; m != v26; ++m)
      {
        uint64_t v33 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        unint64_t v35 = *(void *)(v27 + 16);
        unint64_t v34 = *(void *)(v27 + 24);
        if (v35 >= v34 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        }
        *(void *)(v27 + 16) = v35 + 1;
        *(void *)(v27 + 8 * v35 + 32) = v33;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v83 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  uint64_t v2 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v79 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v82 = (char *)&v73 - v5;
  uint64_t v98 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v6 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v96 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v95 = (char *)&v73 - v9;
  MEMORY[0x270FA5388](v10);
  id v77 = (char *)&v73 - v11;
  uint64_t v12 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  id v99 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  BOOL v17 = (char *)&v73 - v16;
  MEMORY[0x270FA5388](v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v73 - v20;
  MEMORY[0x270FA5388](v22);
  MEMORY[0x270FA5388](v23);
  uint64_t v102 = (char *)&v73 - v26;
  uint64_t v27 = *(void *)(a1 + 16);
  if (!v27) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v97 = v25;
  uint64_t v93 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAssetBundle.ExportOptions.DeploymentTarget>);
  uint64_t v28 = static _SetStorage.allocate(capacity:)();
  uint64_t v29 = 0;
  float v101 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v90 = v28 + 56;
  uint64_t v76 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v91 = *(void *)(v13 + 72);
  uint64_t v88 = (void (**)(char *, uint64_t))(v6 + 8);
  id v81 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v100 = v13 + 16;
  char v75 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32);
  uint64_t v92 = v21;
  uint64_t v94 = v17;
  uint64_t v74 = v27;
  uint64_t v89 = v28;
  uint64_t v85 = (void (**)(uint64_t, uint64_t))(v13 + 8);
  while (2)
  {
    uint64_t v78 = v29;
    v101(v102, v76 + v91 * v29, v12);
    Hasher.init(_seed:)();
    unint64_t v30 = v77;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, 255, MEMORY[0x263F161A8]);
    uint64_t v31 = v98;
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v87 = *v88;
    v87(v30, v31);
    Swift::UInt32 v32 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    Hasher._combine(_:)(v32);
    uint64_t v33 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    Hasher._combine(_:)(HIDWORD(v33));
    __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    Hasher._combine(_:)(v34);
    unint64_t v35 = v82;
    __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
    lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, 255, MEMORY[0x263F161C8]);
    uint64_t v36 = v83;
    dispatch thunk of Hashable.hash(into:)();
    char v80 = *v81;
    v80(v35, v36);
    Swift::Int v37 = Hasher._finalize()();
    uint64_t v38 = v89;
    uint64_t v39 = -1 << *(unsigned char *)(v89 + 32);
    unint64_t v40 = v37 & ~v39;
    unint64_t v41 = v40 >> 6;
    uint64_t v42 = *(void *)(v90 + 8 * (v40 >> 6));
    uint64_t v43 = 1 << v40;
    if (((1 << v40) & v42) == 0) {
      goto LABEL_20;
    }
    uint64_t v86 = ~v39;
    char v44 = (char *)v97;
    do
    {
      v101(v44, *(void *)(v38 + 48) + v40 * v91, v12);
      __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
      __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
      lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, 255, MEMORY[0x263F161A8]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v105 == v103 && v106 == v104)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v45 = v98;
        uint64_t v46 = v87;
        v87(v96, v98);
        v46(v95, v45);
        uint64_t v47 = (void (*)(uint64_t, char *, uint64_t))v101;
        v101(v21, v97, v12);
        v47(v93, v102, v12);
      }
      else
      {
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v49 = v98;
        uint64_t v50 = v87;
        v87(v96, v98);
        v50(v95, v49);
        uint64_t v51 = (void (*)(uint64_t, char *, uint64_t))v101;
        v101(v21, v97, v12);
        uint64_t v52 = v21;
        uint64_t v53 = v93;
        v51(v93, v102, v12);
        BOOL v54 = 0;
        if ((v48 & 1) == 0) {
          goto LABEL_16;
        }
      }
      uint64_t v55 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
      int v57 = v56;
      BOOL v54 = v55 == __REAssetBundle.ExportOptions.DeploymentTarget.version.getter() && v57 == v58;
      uint64_t v53 = v93;
      uint64_t v52 = v92;
LABEL_16:
      uint64_t v59 = *v85;
      (*v85)(v53, v12);
      v59((uint64_t)v52, v12);
      unint64_t v60 = v94;
      char v44 = (char *)v97;
      char v61 = (void (*)(char *, char *, uint64_t))v101;
      v101(v94, v97, v12);
      v61(v99, v102, v12);
      if (v54)
      {
        uint64_t v62 = v82;
        __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
        uint64_t v63 = v79;
        __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
        int v84 = static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)();
        id v64 = v63;
        uint64_t v65 = v83;
        unint64_t v66 = v80;
        v80(v64, v83);
        uint64_t v67 = v62;
        uint64_t v21 = v92;
        char v68 = v94;
        v66(v67, v65);
        v59((uint64_t)v99, v12);
        v59((uint64_t)v68, v12);
        v59((uint64_t)v44, v12);
        uint64_t v38 = v89;
        if (v84)
        {
          v59((uint64_t)v102, v12);
          uint64_t v27 = v74;
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v21 = v52;
        v59((uint64_t)v99, v12);
        v59((uint64_t)v60, v12);
        v59((uint64_t)v44, v12);
        uint64_t v38 = v89;
      }
      unint64_t v40 = (v40 + 1) & v86;
      unint64_t v41 = v40 >> 6;
      uint64_t v42 = *(void *)(v90 + 8 * (v40 >> 6));
      uint64_t v43 = 1 << v40;
    }
    while ((v42 & (1 << v40)) != 0);
    uint64_t v27 = v74;
LABEL_20:
    *(void *)(v90 + 8 * v41) = v43 | v42;
    uint64_t result = (*v75)(*(void *)(v38 + 48) + v40 * v91, v102, v12);
    uint64_t v70 = *(void *)(v38 + 16);
    BOOL v71 = __OFADD__(v70, 1);
    uint64_t v72 = v70 + 1;
    if (!v71)
    {
      *(void *)(v38 + 16) = v72;
LABEL_3:
      uint64_t v29 = v78 + 1;
      if (v78 + 1 == v27) {
        return v38;
      }
      continue;
    }
    break;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  char *v52;
  char *v53;
  uint64_t v54;
  Swift::UInt32 v55;
  uint64_t v56;
  Swift::UInt32 v57;
  char *v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  void (*v89)(char *, uint64_t);
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  void (**v105)(char *, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void (**v110)(char *, uint64_t);
  void (**v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  void (**v117)(char *, uint64_t, uint64_t);
  char *v118;
  char *v119;
  char *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  void (**v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  unint64_t v135 = *(void *)(v107 - 8);
  MEMORY[0x270FA5388](v107);
  uint64_t v104 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v106 = (char *)&v101 - v7;
  uint64_t v127 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v8 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  char v120 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v119 = (char *)&v101 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v102 = (char *)&v101 - v13;
  uint64_t v14 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  BOOL v17 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v115 = (char *)&v101 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v130 = (char *)&v101 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v118 = (char *)&v101 - v23;
  MEMORY[0x270FA5388](v24);
  char v132 = (char *)&v101 - v25;
  MEMORY[0x270FA5388](v26);
  float v101 = (char *)&v101 - v27;
  unint64_t v112 = type metadata accessor for ImportSession.EvaluationFault(0);
  uint64_t v28 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112);
  unint64_t v125 = (uint64_t *)((char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v30);
  char v124 = (uint64_t *)((char *)&v101 - v31);
  MEMORY[0x270FA5388](v32);
  uint64_t v123 = (uint64_t *)((char *)&v101 - v33);
  MEMORY[0x270FA5388](v34);
  uint64_t v131 = (char *)&v101 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v122 = (uint64_t *)((char *)&v101 - v37);
  MEMORY[0x270FA5388](v38);
  uint64_t v121 = (uint64_t *)((char *)&v101 - v39);
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v101 - v41;
  MEMORY[0x270FA5388](v43);
  id v128 = (uint64_t)&v101 - v44;
  MEMORY[0x270FA5388](v45);
  uint64_t v138 = (uint64_t)&v101 - v46;
  uint64_t v47 = *(void *)(a1 + 16);
  if (v47)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
    uint64_t v109 = v17;
    float v113 = v47;
    char v48 = static _SetStorage.allocate(capacity:)();
    uint64_t v49 = 0;
    uint64_t v134 = v48;
    char v136 = v48 + 56;
    char v114 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    uint64_t v137 = *(void *)(v28 + 72);
    id v111 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
    char v110 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v105 = (void (**)(char *, uint64_t))(v135 + 8);
    char v126 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v117 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v108 = v2;
    v133 = v14;
    uint64_t v103 = v42;
    while (1)
    {
      uint64_t v50 = v138;
      uint64_t v129 = v49 + 1;
      outlined init with copy of ImportSession.EvaluationFault(v114 + v137 * v49, v138);
      Hasher.init(_seed:)();
      outlined init with copy of ImportSession.EvaluationFault(v50, v128);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v51 = 2;
          goto LABEL_13;
        case 2u:
          uint64_t v52 = v101;
          (*v111)(v101, v128, v14);
          Hasher._combine(_:)(3uLL);
          uint64_t v53 = v102;
          __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
          lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, 255, MEMORY[0x263F161A8]);
          BOOL v54 = v127;
          dispatch thunk of Hashable.hash(into:)();
          (*v110)(v53, v54);
          uint64_t v55 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
          Hasher._combine(_:)(v55);
          int v56 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
          Hasher._combine(_:)(HIDWORD(v56));
          __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
          Hasher._combine(_:)(v57);
          int v58 = v106;
          __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
          lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, 255, MEMORY[0x263F161C8]);
          uint64_t v59 = v107;
          dispatch thunk of Hashable.hash(into:)();
          (*v105)(v58, v59);
          (*v126)(v52, v14);
          goto LABEL_14;
        case 3u:
          uint64_t v51 = 4;
          goto LABEL_13;
        case 4u:
          uint64_t v51 = 5;
          goto LABEL_13;
        case 5u:
          uint64_t v51 = 6;
          goto LABEL_13;
        case 6u:
          Hasher._combine(_:)(0);
          goto LABEL_14;
        default:
          uint64_t v51 = 1;
LABEL_13:
          Hasher._combine(_:)(v51);
          String.hash(into:)();
          uint64_t v14 = v133;
          swift_bridgeObjectRelease();
LABEL_14:
          unint64_t v60 = Hasher._finalize()();
          char v61 = v134;
          unint64_t v135 = ~(-1 << *(unsigned char *)(v134 + 32));
          uint64_t v62 = v60 & v135;
          uint64_t v63 = (v60 & (unint64_t)v135) >> 6;
          id v64 = *(void *)(v136 + 8 * v63);
          uint64_t v65 = 1 << (v60 & v135);
          if ((v65 & v64) == 0) {
            goto LABEL_53;
          }
          break;
      }
      while (2)
      {
        outlined init with copy of ImportSession.EvaluationFault(*(void *)(v61 + 48) + v62 * v137, (uint64_t)v42);
        unint64_t v66 = &v4[*(int *)(v2 + 48)];
        outlined init with copy of ImportSession.EvaluationFault((uint64_t)v42, (uint64_t)v4);
        outlined init with copy of ImportSession.EvaluationFault(v138, (uint64_t)v66);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v70 = v122;
            outlined init with copy of ImportSession.EvaluationFault((uint64_t)v4, (uint64_t)v122);
            unint64_t v69 = *v70;
            char v68 = v70[1];
            if (swift_getEnumCaseMultiPayload() != 1) {
              goto LABEL_21;
            }
            goto LABEL_24;
          case 2u:
            char v75 = (uint64_t)v131;
            outlined init with copy of ImportSession.EvaluationFault((uint64_t)v4, (uint64_t)v131);
            if (swift_getEnumCaseMultiPayload() != 2)
            {
              (*v126)((char *)v75, v133);
              goto LABEL_22;
            }
            (*v111)(v132, (uint64_t)v66, v133);
            __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
            __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
            lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, 255, MEMORY[0x263F161A8]);
            dispatch thunk of RawRepresentable.rawValue.getter();
            dispatch thunk of RawRepresentable.rawValue.getter();
            if (v141 == v139 && v142 == v140) {
              uint64_t v76 = 1;
            }
            else {
              uint64_t v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            char v80 = (uint64_t)v131;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v81 = *v110;
            uint64_t v82 = v127;
            (*v110)(v120, v127);
            v81(v119, v82);
            uint64_t v83 = *v117;
            int v84 = v133;
            (*v117)(v118, v80, v133);
            v83(v130, (uint64_t)v132, v84);
            if (v76)
            {
              uint64_t v85 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
              uint64_t v87 = v86;
              uint64_t v116 = v85 == __REAssetBundle.ExportOptions.DeploymentTarget.version.getter() && v87 == v88;
              int v84 = v133;
            }
            else
            {
              uint64_t v116 = 0;
            }
            uint64_t v89 = *v126;
            (*v126)(v130, v84);
            v89(v118, v84);
            uint64_t v90 = v115;
            v83(v115, v80, v84);
            uint64_t v91 = v109;
            v83(v109, (uint64_t)v132, v84);
            if (v116)
            {
              uint64_t v92 = v106;
              __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
              uint64_t v93 = v104;
              __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
              uint64_t v116 = static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)();
              uint64_t v94 = *v105;
              uint64_t v95 = v93;
              uint64_t v96 = v107;
              (*v105)(v95, v107);
              v94(v92, v96);
              v89(v91, v84);
              v89(v115, v84);
              v89(v132, v84);
              v89(v131, v84);
              uint64_t v42 = v103;
              uint64_t v2 = v108;
              char v61 = v134;
              if (v116) {
                goto LABEL_4;
              }
            }
            else
            {
              v89(v91, v84);
              v89(v90, v84);
              v89(v132, v84);
              v89(v131, v84);
              uint64_t v2 = v108;
              char v61 = v134;
            }
            goto LABEL_29;
          case 3u:
            id v77 = v123;
            outlined init with copy of ImportSession.EvaluationFault((uint64_t)v4, (uint64_t)v123);
            unint64_t v69 = *v77;
            char v68 = v77[1];
            if (swift_getEnumCaseMultiPayload() == 3) {
              goto LABEL_24;
            }
            goto LABEL_21;
          case 4u:
            uint64_t v78 = v124;
            outlined init with copy of ImportSession.EvaluationFault((uint64_t)v4, (uint64_t)v124);
            unint64_t v69 = *v78;
            char v68 = v78[1];
            if (swift_getEnumCaseMultiPayload() == 4) {
              goto LABEL_24;
            }
            goto LABEL_21;
          case 5u:
            uint64_t v79 = v125;
            outlined init with copy of ImportSession.EvaluationFault((uint64_t)v4, (uint64_t)v125);
            unint64_t v69 = *v79;
            char v68 = v79[1];
            if (swift_getEnumCaseMultiPayload() == 5) {
              goto LABEL_24;
            }
            goto LABEL_21;
          case 6u:
            if (swift_getEnumCaseMultiPayload() != 6) {
              goto LABEL_17;
            }
            goto LABEL_4;
          default:
            uint64_t v67 = v121;
            outlined init with copy of ImportSession.EvaluationFault((uint64_t)v4, (uint64_t)v121);
            unint64_t v69 = *v67;
            char v68 = v67[1];
            if (swift_getEnumCaseMultiPayload())
            {
LABEL_21:
              swift_bridgeObjectRelease();
LABEL_22:
              char v61 = v134;
LABEL_17:
              outlined destroy of (ImportSession.EvaluationFault, ImportSession.EvaluationFault)((uint64_t)v4);
LABEL_18:
              outlined destroy of ImportSession.EvaluationFault((uint64_t)v42);
              uint64_t v62 = (v62 + 1) & v135;
              uint64_t v63 = v62 >> 6;
              id v64 = *(void *)(v136 + 8 * (v62 >> 6));
              uint64_t v65 = 1 << v62;
              if ((v64 & (1 << v62)) == 0)
              {
                uint64_t v14 = v133;
LABEL_53:
                *(void *)(v136 + 8 * v63) = v65 | v64;
                outlined init with take of ImportSession.EvaluationFault(v138, *(void *)(v61 + 48) + v62 * v137);
                uint64_t v97 = *(void *)(v61 + 16);
                uint64_t v98 = __OFADD__(v97, 1);
                id v99 = v97 + 1;
                if (v98)
                {
                  __break(1u);
                  JUMPOUT(0x23A9DD104);
                }
                *(void *)(v61 + 16) = v99;
                goto LABEL_5;
              }
              continue;
            }
LABEL_24:
            BOOL v71 = *(void *)v66;
            uint64_t v72 = *((void *)v66 + 1);
            if (v69 != v71 || v68 != v72)
            {
              uint64_t v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v61 = v134;
              if (v74) {
                goto LABEL_4;
              }
LABEL_29:
              outlined destroy of ImportSession.EvaluationFault((uint64_t)v4);
              goto LABEL_18;
            }
            swift_bridgeObjectRelease_n();
LABEL_4:
            outlined destroy of ImportSession.EvaluationFault((uint64_t)v4);
            outlined destroy of ImportSession.EvaluationFault((uint64_t)v42);
            outlined destroy of ImportSession.EvaluationFault(v138);
            uint64_t v14 = v133;
LABEL_5:
            uint64_t v49 = v129;
            if (v129 == v113) {
              return v134;
            }
            break;
        }
        break;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t outlined destroy of (ImportSession.EvaluationFault, ImportSession.EvaluationFault)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type PropertyDirtyState and conformance PropertyDirtyState(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 48))(a1, 1, v11, v13) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for UUID?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v15, a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntityInteractionSpecification();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  double v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);

    return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v17;

    return swift_bridgeObjectRelease();
  }
}

id one-time initialization function for PreliminaryBehaviorPrimTypeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static BehaviorBuilder.PreliminaryBehaviorPrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for BehaviorPrimTypeName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static BehaviorBuilder.BehaviorPrimTypeName = (uint64_t)result;
  return result;
}

void one-time initialization function for TriggersPropertyName()
{
  static BehaviorBuilder.TriggersPropertyName = 0x7372656767697274;
  unk_268A582B0 = 0xE800000000000000;
}

void one-time initialization function for ActionsPropertyName()
{
  static BehaviorBuilder.ActionsPropertyName = 0x736E6F69746361;
  unk_268A582C0 = 0xE700000000000000;
}

void one-time initialization function for TriggersInputName()
{
  static BehaviorBuilder.TriggersInputName = 0x7372656767697274;
  unk_268A582D0 = 0xE800000000000000;
}

void one-time initialization function for ActionsInputName()
{
  static BehaviorBuilder.ActionsInputName = 0x736E6F69746361;
  unk_268A582E0 = 0xE700000000000000;
}

uint64_t BehaviorBuilder.inputDescriptors()()
{
  uint64_t v1 = *v0;
  uint64_t v7 = MEMORY[0x263F8EE88];
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = closure #1 in ActionBuilder.inputDescriptors();
  v2[3] = 0;
  v2[4] = v1;
  if (one-time initialization token for TriggersInputName != -1) {
    swift_once();
  }
  v15[0] = static BehaviorBuilder.TriggersInputName;
  v15[1] = unk_268A582D0;
  void v15[2] = 0xD000000000000020;
  v15[3] = 0x800000023AAAD9E0;
  v15[4] = partial apply for closure #2 in BehaviorBuilder.inputDescriptors();
  v15[5] = v2;
  char v16 = -127;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Set._Variant.insert(_:)((uint64_t)&v8, (uint64_t)v15);
  outlined consume of InputDescriptor(v8, v9, v10, v11, v12, (uint64_t)v13, v14);
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = closure #1 in ActionBuilder.inputDescriptors();
  v3[3] = 0;
  v3[4] = v1;
  if (one-time initialization token for ActionsInputName != -1) {
    swift_once();
  }
  uint64_t v8 = static BehaviorBuilder.ActionsInputName;
  uint64_t v9 = unk_268A582E0;
  uint64_t v10 = 0xD00000000000001FLL;
  uint64_t v11 = 0x800000023AAACEA0;
  uint64_t v12 = partial apply for closure #3 in BehaviorBuilder.inputDescriptors();
  double v13 = v3;
  unsigned __int8 v14 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)&v8);
  swift_release();
  outlined consume of InputDescriptor(v5[0], v5[1], v5[2], v5[3], (void *)v5[4], v5[5], v6);
  return v7;
}

uint64_t closure #2 in BehaviorBuilder.inputDescriptors()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, uint64_t), uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  if (!RIOPxrUsdStageHasPrimAtPrimPath()) {
    return MEMORY[0x263F8EE88];
  }
  id v12 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = PrimIfNeeded;

  if (*a6 != -1) {
    swift_once();
  }
  uint64_t v15 = a3(*a7, *a8, v14);
  swift_release();
  return v15;
}

uint64_t BehaviorBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v46 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for __RKEntityInteractionSpecification();
  uint64_t v45 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v50 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v48 = (char *)&v41 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  MEMORY[0x270FA5388](v14 - 8);
  char v16 = (uint64_t *)((char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for __RKEntityTriggerSpecification();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v41 - v22;
  BehaviorBuilder.buildTriggerSpecifications(inputs:)(v16);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1) {
    return outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  }
  (*(void (**)(char *, void *, uint64_t))(v18 + 32))(v23, v16, v17);
  BehaviorBuilder.buildActionSpecifications(inputs:)((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    return outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
  }
  uint64_t v44 = a1;
  uint64_t v25 = v48;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v48, v7, v8);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  uint64_t v43 = v23;
  v26(v20, v23, v17);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v25, v8);
  __RKEntityInteractionSpecification.init(trigger:action:)();
  swift_beginAccess();
  id v27 = objc_getAssociatedObject(v49, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (v27)
  {
    uint64_t v41 = v9;
    uint64_t v42 = v8;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v56, &aBlock);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    uint64_t v28 = (void *)v47;
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    uint64_t v29 = static BehaviorBuilder.OutputName;
    uint64_t v30 = unk_268A582F0;
    uint64_t v53 = v28;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&aBlock);
    uint64_t v32 = v45;
    uint64_t v33 = *(void (**)(uint64_t *, char *, void *))(v45 + 16);
    Swift::UInt32 v34 = v50;
    v33(boxed_opaque_existential_1, v50, v28);
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)&aBlock, v29, v30);
    swift_release();
    uint64_t v35 = v49[3];
    uint64_t v36 = (uint64_t)v46;
    v33((uint64_t *)v46, v34, v28);
    (*(void (**)(uint64_t, void, uint64_t, void *))(v32 + 56))(v36, 0, 1, v28);
    swift_retain();
    Inputs.prim.getter();
    Swift::Int v37 = (void *)RIOPxrUsdObjectCopyPath();
    uint64_t v38 = swift_release();
    uint64_t v49 = &v41;
    MEMORY[0x270FA5388](v38);
    *(&v41 - 4) = v35;
    *(&v41 - 3) = (uint64_t)v37;
    *(&v41 - 2) = v36;
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = closure #1 in BehaviorsCommitter.commit(_:at:inputs:)partial apply;
    *(void *)(v39 + 24) = &v41 - 6;
    BOOL v54 = thunk for @callee_guaranteed () -> ()partial apply;
    uint64_t v55 = v39;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v52 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v53 = &block_descriptor_30;
    unint64_t v40 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v40);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();

    swift_release();
    uint64_t result = swift_release();
    if ((v30 & 1) == 0)
    {
      outlined destroy of Any?(v36, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v50, v47);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v48, v42);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v43, v17);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BehaviorBuilder.clear(inputs:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v5 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v19, &aBlock);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1) {
      swift_once();
    }
    uint64_t v7 = static BehaviorBuilder.OutputName;
    uint64_t v8 = unk_268A582F0;
    long long aBlock = 0u;
    long long v16 = 0u;
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)&aBlock, v7, v8);
    swift_release();
    uint64_t v9 = v1[3];
    uint64_t v10 = type metadata accessor for __RKEntityInteractionSpecification();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
    swift_retain();
    Inputs.prim.getter();
    uint64_t v11 = (void *)RIOPxrUsdObjectCopyPath();
    uint64_t v12 = swift_release();
    MEMORY[0x270FA5388](v12);
    *((void *)&aBlock - 4) = v9;
    *((void *)&aBlock - 3) = v11;
    *((void *)&aBlock - 2) = v4;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = partial apply for closure #1 in BehaviorsCommitter.commit(_:at:inputs:);
    *(void *)(v13 + 24) = &aBlock - 3;
    uint64_t v17 = partial apply for thunk for @callee_guaranteed () -> ();
    uint64_t v18 = v13;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v16 = thunk for @escaping @callee_guaranteed () -> ();
    *((void *)&v16 + 1) = &block_descriptor_4;
    uint64_t v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v14);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();

    swift_release();
    uint64_t result = swift_release();
    if ((v7 & 1) == 0) {
      return outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BehaviorBuilder.buildTriggerSpecifications(inputs:)@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for TriggersInputName != -1) {
    swift_once();
  }
  uint64_t v2 = Inputs.accumulatedValues(forKey:)(static BehaviorBuilder.TriggersInputName, unk_268A582D0);
  uint64_t v3 = specialized _arrayConditionalCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v14 = type metadata accessor for __RKEntityTriggerSpecification();
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v13 = v14;
    uint64_t v11 = a1;
    uint64_t v12 = 1;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v7 = *(void *)(v3 + 8 * v5++ + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v7);
    swift_bridgeObjectRelease();
  }
  while (v4 != v5);
  swift_bridgeObjectRelease_n();
  if (*(void *)(v6 + 16))
  {
    *a1 = v6;
    uint64_t v8 = *MEMORY[0x263F163D0];
    uint64_t v9 = type metadata accessor for __RKEntityTriggerSpecification();
    uint64_t v17 = *(void *)(v9 - 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v17 + 104))(a1, v8, v9);
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v11 = a1;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
LABEL_11:
    return v10(v11, v12, 1, v13);
  }
  uint64_t v16 = type metadata accessor for __RKEntityTriggerSpecification();
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
  return swift_bridgeObjectRelease();
}

uint64_t BehaviorBuilder.buildActionSpecifications(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for __RKEntityGroupActionOrder();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for ActionsInputName != -1) {
    swift_once();
  }
  uint64_t v6 = Inputs.accumulatedValues(forKey:)(static BehaviorBuilder.ActionsInputName, unk_268A582E0);
  uint64_t v7 = specialized _arrayConditionalCast<A, B>(_:)(v6);
  swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      v22[0] = v3;
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v11 = *(void *)(v7 + 8 * v9++ + 32);
        uint64_t v23 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v11);
        swift_bridgeObjectRelease();
        uint64_t v10 = v23;
      }
      while (v8 != v9);
      swift_bridgeObjectRelease_n();
      if (v10[2])
      {
        Inputs.prim.getter();
        if (String.count.getter() < 1)
        {
          id v12 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          id v12 = (id)RIOPxrTfTokenCreateWithCString();
          swift_release();
        }
        uint64_t v17 = v22[0];
        specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v23);

        swift_release();
        uint64_t v18 = v23;
        if (v24)
        {
          v22[1] = v23;
          lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
          swift_willThrowTypedImpl();
          outlined consume of Result<Double, Object.Error>(v18, 1);
        }
        (*(void (**)(char *, void, uint64_t))(v17 + 104))(v5, *MEMORY[0x263F16318], v2);
        __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
        uint64_t v19 = *MEMORY[0x263F163A8];
        uint64_t v20 = type metadata accessor for __RKEntityActionSpecification();
        uint64_t v21 = *(void *)(v20 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 104))(a1, v19, v20);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(a1, 0, 1, v20);
      }
      else
      {
        uint64_t v16 = type metadata accessor for __RKEntityActionSpecification();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = type metadata accessor for __RKEntityActionSpecification();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  return v14(a1, 1, 1, v13);
}

uint64_t BehaviorBuilder.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BehaviorBuilder()
{
  return self;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance BehaviorBuilder()
{
  uint64_t v0 = specialized closure #1 in BehaviorBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v5 = inited;
  specialized Array._endMutation()();
  uint64_t v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance BehaviorBuilder()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = unk_268A582F0;
  *(void *)(inited + 32) = static BehaviorBuilder.OutputName;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 0xD000000000000021;
  *(void *)(inited + 56) = 0x800000023AAADEB0;
  *(unsigned char *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  Swift::Int v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t one-time initialization function for behaviorCommitter()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.behaviorCommitter = result;
  return result;
}

void closure #1 in BehaviorsCommitter.commit(_:at:inputs:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for __RKEntityInteractionSpecification();
  uint64_t v52 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v50 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)&v50 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v50 - v14;
  outlined init with copy of __RKEntityInteractionSpecification?(a3, (uint64_t)&v50 - v14);
  uint64_t v16 = (uint64_t *)(a1 + 24);
  swift_beginAccess();
  id v17 = a2;
  specialized Dictionary.subscript.setter((uint64_t)v15, v17);
  swift_endAccess();
  uint64_t v18 = a1 + 32;
  id v19 = v17;
  swift_beginAccess();
  for (uint64_t i = v19; ; uint64_t i = (void *)v24)
  {
    if (*(void *)(*(void *)v18 + 16))
    {
      id v21 = i;
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v21);
      char v23 = v22;

      swift_bridgeObjectRelease();
      if (v23) {
        break;
      }
    }
    if (RIOPxrSdfPathIsEmpty()) {
      break;
    }
    uint64_t v24 = RIOPxrSdfPathCopyParentPath();
  }
  if (!*(void *)(*(void *)v18 + 16)) {
    goto LABEL_12;
  }
  id v25 = i;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v25);
  if ((v26 & 1) == 0)
  {

    swift_bridgeObjectRelease();
LABEL_12:
    if (one-time initialization token for behaviorCommitter != -1) {
      swift_once();
    }
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_23AAB22A0;
    id v34 = v19;
    uint64_t v35 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    *(void *)(v33 + 56) = MEMORY[0x263F8D310];
    *(void *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v33 + 32) = v36;
    *(void *)(v33 + 40) = v38;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v39 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v39);
    swift_bridgeObjectRelease();
    Entity.__interactions.setter();
    swift_release();

    return;
  }

  swift_bridgeObjectRelease();
  uint64_t v27 = *v16;
  if (!*(void *)(*v16 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v12, 1, 1, v6);
LABEL_18:

    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
    return;
  }
  id v28 = v19;
  swift_bridgeObjectRetain();
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
  if (v30)
  {
    uint64_t v31 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v12, *(void *)(v27 + 56) + *(void *)(v52 + 72) * v29, v6);
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = 1;
    uint64_t v31 = v52;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v12, v32, 1, v6);

  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v12, 1, v6) == 1) {
    goto LABEL_18;
  }
  unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  uint64_t v41 = v51;
  v40(v51, v12, v6);
  type metadata accessor for Entity();
  static Entity.fromCore(_:ignoringEntityInfo:)();
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v50, v41, v6);
  uint64_t v42 = (void (*)(char *, void))Entity.__interactions.modify();
  uint64_t v44 = v43;
  unint64_t v45 = *v43;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v44 = v45;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v45 + 16) + 1, 1, v45);
    *uint64_t v44 = v45;
  }
  unint64_t v48 = *(void *)(v45 + 16);
  unint64_t v47 = *(void *)(v45 + 24);
  if (v48 >= v47 >> 1)
  {
    unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, v45);
    *uint64_t v44 = v45;
  }
  *(void *)(v45 + 16) = v48 + 1;
  uint64_t v49 = v52;
  v40((char *)(v45+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v52 + 72) * v48), v50, v6);
  v42(v53, 0);

  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v6);
}

uint64_t BehaviorsCommitter.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BehaviorsCommitter()
{
  return self;
}

void specialized Prim.attributeValueResult<A>(of:type:)(uint64_t a1@<X8>)
{
  if (!RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v7 = 0;
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  Swift::Int v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (uint64_t v4 = (void *)v3, Float = RIOPxrVtValueGetFloat(), v4, (Float & 1) == 0))
  {
    uint64_t v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  char v6 = 0;
  uint64_t v7 = 0;
LABEL_8:
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (RIOPxrUsdPrimHasAttribute())
  {
    Swift::Int v2 = (void *)RIOPxrUsdPrimCopyAttribute();
    uint64_t v3 = RIOPxrUsdAttributeCopyValue();
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      unint64_t v5 = RIOPxrVtValueCopyString();
      if (v5)
      {
        char v6 = (void *)v5;
        uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v9 = v8;

        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v9;
        *(unsigned char *)(a1 + 16) = 0;
        return;
      }
    }
    uint64_t v10 = RIOPxrUsdAttributeCopyTypeName();

    *(void *)a1 = v10;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  *(unsigned char *)(a1 + 16) = 1;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char Double;
  char v6;
  uint64_t v7;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v7 = 0;
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  Swift::Int v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (uint64_t v4 = (void *)v3, Double = RIOPxrVtValueGetDouble(), v4, (Double & 1) == 0))
  {
    uint64_t v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  char v6 = 0;
  uint64_t v7 = 0;
LABEL_8:
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char UInt32;
  char v6;
  uint64_t v7;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v7 = 0;
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  Swift::Int v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (uint64_t v4 = (void *)v3, UInt32 = RIOPxrVtValueGetUInt32(), v4, (UInt32 & 1) == 0))
  {
    uint64_t v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  char v6 = 0;
  uint64_t v7 = 0;
LABEL_8:
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char Bool;
  char v6;
  uint64_t v7;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v7 = 0;
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  Swift::Int v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (uint64_t v4 = (void *)v3, Bool = RIOPxrVtValueGetBool(), v4, (Bool & 1) == 0))
  {
    uint64_t v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  char v6 = 0;
  uint64_t v7 = 0;
LABEL_8:
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  int Double3;
  uint64_t v6;

  if (RIOPxrUsdPrimHasAttribute())
  {
    Swift::Int v2 = (void *)RIOPxrUsdPrimCopyAttribute();
    uint64_t v3 = RIOPxrUsdAttributeCopyValue();
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      Double3 = RIOPxrVtValueGetDouble3();

      if (Double3)
      {

        *(_OWORD *)a1 = 0u;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(unsigned char *)(a1 + 32) = 0;
        return;
      }
    }
    char v6 = RIOPxrUsdAttributeCopyTypeName();

    *(void *)a1 = v6;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  *(unsigned char *)(a1 + 32) = 1;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>);
  uint64_t v3 = *(void *)(type metadata accessor for __RKEntityInteractionSpecification() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  char v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
      if (v10 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *int64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *int64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v19;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for __RKEntityInteractionSpecification();
    uint64_t v18 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 32))(a2, v10 + *(void *)(v18 + 72) * v6, v11);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for __RKEntityInteractionSpecification();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }
  return v12(v13, v14, 1, v15);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *int64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *int64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for UUID() - 8) + 72);
        int64_t v16 = v15 * v3;
        double result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            Swift::Int v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      while (1)
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for RIOPxrSdfPathRef(0);
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef();
        id v11 = v10;
        _CFObject.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();

        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v9) {
          break;
        }
        if (v13 < v9) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (void *)(v14 + 8 * v3);
        int64_t v16 = (void *)(v14 + 8 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          void *v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for __RKEntityInteractionSpecification() - 8) + 72);
        int64_t v19 = v18 * v3;
        unint64_t v20 = v17 + v18 * v3;
        int64_t v21 = v18 * v6;
        unint64_t v22 = v17 + v18 * v6 + v18;
        if (v19 < v21 || v20 >= v22)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v19 == v21) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v13 < v9) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v13) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    BOOL v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *BOOL v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for RIOPxrSdfPathRef(0);
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef();
        id v11 = v10;
        _CFObject.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();

        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            void *v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          int64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v21 = *v20;
    unint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    unint64_t v22 = *v20;
    int64_t v21 = (-1 << a1) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t specialized _IteratorBox.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[2];
  int64_t v4 = v1[5];
  unint64_t v3 = v1[6];
  int64_t v5 = v4;
  if (v3)
  {
    uint64_t v6 = (v3 - 1) & v3;
    unint64_t v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    uint64_t v8 = (void *)(*(void *)(v2 + 48) + 16 * v7);
    uint64_t v9 = v8[1];
    unint64_t v10 = (_OWORD *)(*(void *)(v2 + 56) + 32 * v7);
    *(void *)a1 = *v8;
    *(void *)(a1 + 8) = v9;
    long long v11 = v10[1];
    *(_OWORD *)(a1 + 16) = *v10;
    *(_OWORD *)(a1 + 32) = v11;
    uint64_t result = swift_bridgeObjectRetain();
LABEL_23:
    v1[5] = v5;
    v1[6] = v6;
    return result;
  }
  int64_t v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    int64_t v14 = (unint64_t)(v1[4] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v1[3];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v6 = (v16 - 1) & v16;
        unint64_t v7 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v5 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v4 + 2;
      int64_t v5 = v4 + 1;
      if (v4 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v5 = v4 + 2;
        if (v4 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v4 + 3));
          if (v16)
          {
            int64_t v13 = v4 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v4 + 4;
          int64_t v5 = v4 + 3;
          if (v4 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v4 + 5;
            int64_t v5 = v4 + 4;
            if (v4 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v5 = v14 - 1;
              int64_t v18 = v4 + 6;
              while (v14 != v18)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v6 = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v9 = a4 + 64;
  uint64_t v10 = ~v8;
  uint64_t v11 = -v8;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  uint64_t v13 = v12 & *(void *)(a4 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : ImportSession.MeshAssetEstimate].Iterator>);
  uint64_t result = (void *)swift_allocObject();
  uint64_t v15 = result;
  uint64_t v16 = 0;
  result[2] = a4;
  result[3] = v9;
  result[4] = v10;
  result[5] = 0;
  result[6] = v13;
  if (!a2 || !a3)
  {
LABEL_14:
    *a1 = v15;
    return (void *)v16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    specialized _IteratorBox.next()((uint64_t)&v20);
    uint64_t v17 = v21;
    if (v21)
    {
      uint64_t v16 = 0;
      while (1)
      {
        long long v18 = v22;
        long long v19 = v23;
        *(void *)a2 = v20;
        *(void *)(a2 + 8) = v17;
        *(_OWORD *)(a2 + 16) = v18;
        *(_OWORD *)(a2 + 32) = v19;
        if (a3 - 1 == v16) {
          break;
        }
        specialized _IteratorBox.next()((uint64_t)&v20);
        uint64_t v17 = v21;
        a2 += 48;
        ++v16;
        if (!v21) {
          goto LABEL_14;
        }
      }
      uint64_t v16 = a3;
    }
    else
    {
      uint64_t v16 = 0;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for __RKEntityInteractionSpecification();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
LABEL_37:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 32);
  uint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  long long v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    BOOL v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v42, *(void *)(v43 + 56) + v29 * v24, v8, v12);
    char v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    v30(a2, v22, v8);
    if (v21 == v40) {
      goto LABEL_36;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_37;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_40:
  __break(1u);
}

uint64_t specialized closure #1 in BehaviorBuilder.stageSubscription.getter()
{
  if (one-time initialization token for PreliminaryBehaviorPrimTypeName != -1) {
    swift_once();
  }
  unint64_t v8 = static BehaviorBuilder.PreliminaryBehaviorPrimTypeName;
  id v0 = (id)static BehaviorBuilder.PreliminaryBehaviorPrimTypeName;
  unint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v8);
  uint64_t v2 = one-time initialization token for BehaviorPrimTypeName;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  unint64_t v8 = static BehaviorBuilder.BehaviorPrimTypeName;
  id v3 = (id)static BehaviorBuilder.BehaviorPrimTypeName;
  int64_t v4 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2570;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v4;
  unint64_t v8 = inited;
  specialized Array._endMutation()();
  uint64_t v6 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v8);
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

void partial apply for closure #1 in BehaviorsCommitter.commit(_:at:inputs:)()
{
  closure #1 in BehaviorsCommitter.commit(_:at:inputs:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_23A9E0F00()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t outlined init with copy of __RKEntityInteractionSpecification?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef()
{
  unint64_t result = lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef)
  {
    type metadata accessor for RIOPxrSdfPathRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef);
  }
  return result;
}

uint64_t sub_23A9E0FE8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23A9E0FF8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in BehaviorBuilder.inputDescriptors()(uint64_t a1, uint64_t a2)
{
  return closure #2 in BehaviorBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(void, void, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), &one-time initialization token for TriggersPropertyName, &static BehaviorBuilder.TriggersPropertyName, &qword_268A582B0);
}

uint64_t partial apply for closure #3 in BehaviorBuilder.inputDescriptors()(uint64_t a1, uint64_t a2)
{
  return closure #2 in BehaviorBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(void, void, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), &one-time initialization token for ActionsPropertyName, &static BehaviorBuilder.ActionsPropertyName, &qword_268A582C0);
}

uint64_t closure #1 in closure #1 in AudioFileBuilder.stageSubscription.getter()
{
  if (one-time initialization token for loadingStrategy != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AudioConstants.AudioFile.loadingStrategy;
  type metadata accessor for NamedPropertyDirtyState();
  unint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = v0;
  uint64_t v3 = MEMORY[0x263F8EE88];
  id v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x263F8EE88]);

  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = one-time initialization token for shouldLoop;
  uint64_t v49 = v1;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static AudioConstants.AudioFile.shouldLoop;
  unint64_t v7 = (void *)swift_allocObject();
  long long v7[4] = v6;
  id v8 = v6;
  id v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  v7[2] = v3;
  void v7[3] = v9;
  uint64_t v10 = one-time initialization token for randomizeStart;
  unint64_t v48 = v7;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)static AudioConstants.AudioFile.randomizeStart;
  __n128 v12 = (void *)swift_allocObject();
  v12[4] = v11;
  id v13 = v11;
  id v14 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v13, v3);

  v12[2] = v3;
  v12[3] = v14;
  uint64_t v15 = one-time initialization token for normalization;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = (void *)static AudioConstants.AudioFile.normalization;
  uint64_t v17 = (void *)swift_allocObject();
  v17[4] = v16;
  id v18 = v16;
  id v19 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v18, v3);

  v17[2] = v3;
  v17[3] = v19;
  swift_retain();
  if (String.count.getter() < 1) {
    id v20 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v20 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v21 = v20;
  long long v22 = (void *)swift_allocObject();
  long long v22[4] = v21;
  id v23 = v21;
  id v24 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v23, v3);

  void v22[2] = v3;
  void v22[3] = v24;
  swift_retain();
  if (String.count.getter() < 1) {
    id v25 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v25 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v26 = v25;
  int64_t v27 = (void *)swift_allocObject();
  v27[4] = v26;
  id v28 = v26;
  id v29 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v28, v3);

  v27[2] = v3;
  v27[3] = v29;
  uint64_t v30 = one-time initialization token for calibrationMode;
  swift_retain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = (void *)static AudioConstants.AudioFile.calibrationMode;
  uint64_t v32 = (void *)swift_allocObject();
  v32[4] = v31;
  id v33 = v31;
  id v34 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v33, v3);

  v32[2] = v3;
  v32[3] = v34;
  uint64_t v35 = one-time initialization token for assetPath;
  swift_retain();
  if (v35 != -1) {
    swift_once();
  }
  int64_t v36 = (void *)static AudioConstants.AudioFile.assetPath;
  uint64_t v37 = (void *)swift_allocObject();
  v37[4] = v36;
  id v38 = v36;
  id v39 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v38, v3);

  void v37[2] = v3;
  v37[3] = v39;
  uint64_t v40 = one-time initialization token for mixGroup;
  swift_retain();
  if (v40 != -1) {
    swift_once();
  }
  uint64_t v41 = (void *)static AudioConstants.AudioFile.mixGroup;
  uint64_t v42 = (void *)swift_allocObject();
  v42[4] = v41;
  id v43 = v41;
  id v44 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v43, v3);

  v42[2] = v3;
  v42[3] = v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB2EB0;
  *(void *)(inited + 32) = v49;
  *(void *)(inited + 40) = v48;
  *(void *)(inited + 48) = v12;
  *(void *)(inited + 56) = v17;
  *(void *)(inited + 64) = v22;
  *(void *)(inited + 72) = v27;
  *(void *)(inited + 80) = v32;
  *(void *)(inited + 88) = v37;
  *(void *)(inited + 96) = v42;
  unint64_t v50 = inited;
  specialized Array._endMutation()();
  uint64_t v46 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v50);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v46;
}

void AudioFileBuilder.run(inputs:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = Inputs.prim.getter();
  id v6 = (id)RIOBuilderInputsGetImportSession();
  if (!v6)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v7 = v6;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_32:
    __break(1u);
    return;
  }
  swift_retain();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  type metadata accessor for REAudioFileConfigurationWrapper();
  swift_allocObject();
  swift_retain();
  uint64_t v10 = specialized REAudioFileConfigurationWrapper.init(prim:)();
  swift_release();
  uint64_t v11 = MEMORY[0x23ECBB260](ServiceLocator);
  if (!v11)
  {
    if (one-time initialization token for rioAudio != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.rioAudio);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    uint64_t v21 = Logger.logObject.getter();
    if (os_log_type_enabled(v21, v20))
    {
      long long v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v22 = 0;
      _os_log_impl(&dword_23A99F000, v21, v20, "AudioFileBuilder could not get an AssetManager.", v22, 2u);
      MEMORY[0x23ECBE8B0](v22, -1, -1);
      swift_release();
      swift_release();
    }
    else
    {

      swift_release();
      swift_release();
    }
    goto LABEL_18;
  }
  uint64_t v12 = v11;
  if (one-time initialization token for assetPath != -1) {
    swift_once();
  }
  id v13 = (id)static AudioConstants.AudioFile.assetPath;
  if (!RIOPxrUsdPrimHasAttribute())
  {

    aBlock[0] = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return;
  }
  uint64_t v14 = RIOPxrUsdPrimCopyAttribute();

  type metadata accessor for AnyAttribute();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  uint64_t EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue) {
    uint64_t EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  }
  outlined consume of Result<AnyAttribute, Object.Error>(v15, 0);
  uint64_t v17 = (void *)RIOPxrVtValueCopyAssetPath();
  if (!v17)
  {
    swift_release();
    swift_release();

LABEL_18:
    swift_release();
    return;
  }
  uint64_t v38 = v4;
  id v39 = EmptyValue;
  uint64_t v40 = (uint64_t *)v10;
  aBlock[0] = v17;
  id v18 = v17;
  id v23 = SceneDescriptionFoundations.AssetPath.referencedData.getter();
  unint64_t v25 = v24;
  id v36 = v18;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v26 = outlined consume of Data._Representation((uint64_t)v23, v25);
  int64_t v27 = v40;
  if (!v2[4]) {
    goto LABEL_29;
  }
  id v28 = (id)v2[7];
  swift_bridgeObjectRetain();
  swift_retain();
  if (!specialized static REAudioFileConfigurationWrapper.== infix(_:_:)())
  {
    swift_release();
    uint64_t v26 = swift_bridgeObjectRelease();
LABEL_29:
    uint64_t v40 = &v35;
    MEMORY[0x270FA5388](v26);
    v34[2] = v2;
    void v34[3] = SwiftObject;
    id v31 = v36;
    v34[4] = v12;
    v34[5] = isa;
    v34[6] = v27;
    v34[7] = v5;
    v34[8] = v36;
    v34[9] = a1;
    v34[10] = v38;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = partial apply for closure #1 in AudioFileBuilder.run(inputs:);
    *(void *)(v32 + 24) = v34;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v32;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_5;
    id v33 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v33);
    LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    if ((v33 & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_31;
  }
  id v29 = [(objc_class *)isa hash];
  swift_release();
  uint64_t v26 = swift_bridgeObjectRelease();
  BOOL v30 = v29 == v28;
  int64_t v27 = v40;
  if (!v30) {
    goto LABEL_29;
  }
  swift_release();
  swift_release();
  swift_release();
}

void closure #1 in AudioFileBuilder.run(inputs:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v9 = a1 + 3;
  if (a1[4])
  {
    swift_bridgeObjectRetain();
    swift_retain();
    RERelease();
    uint64_t v11 = (void **)(a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    uint64_t v12 = a5;
    id v13 = *v11;
    String.utf8CString.getter();
    id v14 = v13;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_release();
    swift_bridgeObjectRelease();

    a5 = v12;
    swift_release();
    uint64_t v15 = a1[4];
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = a1[3];
  *(_OWORD *)id v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[4] = 0;
  outlined consume of AudioFileBuilder.Cache?(v16, v15);
  uint64_t v17 = REAudioFileAssetCreateWithMappedDataAndConfiguration();
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v51 = a5;
    swift_beginAccess();
    RIOImportSessionQueueAssetForLoad();
    uint64_t v19 = (void *)RIOPxrUsdObjectCopyPath();
    os_log_type_t v20 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    id v24 = (id)RIOBuilderInputsGetImportSession();
    if (v24)
    {
      unint64_t v25 = v24;
      uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

      if (SwiftObject)
      {
        int64_t v27 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
        swift_retain();
        swift_beginAccess();
        id v28 = *v27;
        id v29 = a7;
        id v30 = v28;
        id v31 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        RIOImportSessionRegisterAudioAsset();
        swift_release();

        swift_release();
        swift_release();
        swift_retain();
        uint64_t v32 = NSObject.hashValue.getter();
        uint64_t v34 = a1[3];
        uint64_t v33 = a1[4];
        a1[3] = v21;
        a1[4] = v23;
        a1[5] = v18;
        a1[6] = v51;
        a1[7] = v32;
        outlined consume of AudioFileBuilder.Cache?(v34, v33);
        swift_beginAccess();
        id v35 = objc_getAssociatedObject(a1, &static BuilderAssociatedKeys.OutputsReference);
        swift_endAccess();
        if (v35)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          outlined init with take of Any(&v54, v55);
          type metadata accessor for Outputs();
          swift_dynamicCast();
          uint64_t v56 = MEMORY[0x263F8DD08];
          v55[0] = v18;
          Outputs.subscript.setter((uint64_t)v55, 0xD00000000000001FLL, 0x800000023AAACC60);
          swift_release();
          return;
        }
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  if (one-time initialization token for rioAudio != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.rioAudio);
  os_log_type_t v37 = static os_log_type_t.error.getter();
  swift_retain_n();
  id v38 = a7;
  id v39 = Logger.logObject.getter();
  if (os_log_type_enabled(v39, v37))
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v55[0] = v53;
    *(_DWORD *)uint64_t v40 = 136315394;
    id v41 = (id)RIOPxrUsdObjectCopyPath();
    uint64_t v42 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    id v46 = v38;
    unint64_t v47 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v50 = v49;

    *(void *)&long long v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23A99F000, v39, v37, "AudioFileBuilder could not create an REAssetRef. Prim path: %s. Asset path: %s.", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECBE8B0](v53, -1, -1);
    MEMORY[0x23ECBE8B0](v40, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

void AudioFileBuilder.clear(inputs:)()
{
  id v1 = (id)RIOBuilderInputsGetImportSession();
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  id v2 = v1;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_8:
    __break(1u);
    return;
  }
  uint64_t v4 = *(void *)(v0 + 32);
  swift_retain();
  if (v4)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    RERelease();
    uint64_t v5 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    id v6 = *v5;
    String.utf8CString.getter();
    id v7 = v6;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t v8 = *(void *)(v0 + 32);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v0 + 24);
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(void *)(v0 + 56) = 0;
  outlined consume of AudioFileBuilder.Cache?(v9, v8);
  swift_release();
}

uint64_t AudioFileBuilder.__deallocating_deinit()
{
  outlined consume of AudioFileBuilder.Cache?(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioFileBuilder()
{
  return self;
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance AudioFileBuilder()
{
  uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of protocol witness for Builder.outputDescriptors() in conformance AudioFileBuilder);
  swift_arrayDestroy();
  return v0;
}

uint64_t Prim.attribute(_:)()
{
  if (RIOPxrUsdPrimHasAttribute())
  {
    uint64_t v0 = RIOPxrUsdPrimCopyAttribute();
    type metadata accessor for AnyAttribute();
    id v1 = (void *)swift_allocObject();
    v1[2] = v0;
    uint64_t EmptyValue = RIOPxrUsdAttributeCopyValue();
    if (!EmptyValue) {
      uint64_t EmptyValue = RIOPxrVtValueCreateEmptyValue();
    }
    outlined consume of Result<AnyAttribute, Object.Error>(v1, 0);
  }
  else
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  return EmptyValue;
}

uint64_t REAudioFileConfigurationWrapper.__deallocating_deinit()
{
  REAudioFileAssetConfigurationDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioFileConfigurationWrapper()
{
  return self;
}

uint64_t destroy for AudioFileBuilder.Cache()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void *initializeWithCopy for AudioFileBuilder.Cache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AudioFileBuilder.Cache(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AudioFileBuilder.Cache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioFileBuilder.Cache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioFileBuilder.Cache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for AudioFileBuilder.Cache()
{
  return &unk_26EE0BE08;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REAudioFileConfigurationWrapper()
{
  return specialized static REAudioFileConfigurationWrapper.== infix(_:_:)();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL specialized static REAudioFileConfigurationWrapper.== infix(_:_:)()
{
  int RandomizeStart = REAudioFileAssetConfigurationGetRandomizeStart();
  if (RandomizeStart != REAudioFileAssetConfigurationGetRandomizeStart()) {
    return 0;
  }
  int ShouldLoop = REAudioFileAssetConfigurationGetShouldLoop();
  if (ShouldLoop != REAudioFileAssetConfigurationGetShouldLoop()) {
    return 0;
  }
  id v2 = (id)REAudioFileAssetConfigurationGetMixGroupName();
  if (v2)
  {
    unint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = (id)REAudioFileAssetConfigurationGetMixGroupName();
  if (!v7)
  {
    if (!v6) {
      goto LABEL_17;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  int64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (!v6)
  {
    if (!v11) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (!v11) {
    goto LABEL_15;
  }
  if (v4 == v9 && v6 == v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v12 & 1) == 0) {
      return result;
    }
  }
LABEL_17:
  int Streaming = REAudioFileAssetConfigurationGetStreaming();
  if (Streaming == REAudioFileAssetConfigurationGetStreaming())
  {
    int NormalizationMode = REAudioFileAssetConfigurationGetNormalizationMode();
    if (NormalizationMode == REAudioFileAssetConfigurationGetNormalizationMode())
    {
      int CalibrationMode = REAudioFileAssetConfigurationGetCalibrationMode();
      if (CalibrationMode == REAudioFileAssetConfigurationGetCalibrationMode())
      {
        REAudioFileAssetConfigurationGetCalibrationLevel();
        double v18 = v17;
        REAudioFileAssetConfigurationGetCalibrationLevel();
        return v18 == v19;
      }
    }
  }
  return 0;
}

uint64_t specialized AudioFileBuilder.stageSubscription.getter()
{
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AudioConstants.AudioFile.primType;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22A0;
  *(void *)(inited + 32) = v0;
  id v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = closure #1 in closure #1 in AudioFileBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  uint64_t v6 = (void *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8EE88];
  id v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x263F8EE88]);
  swift_bridgeObjectRelease();
  _OWORD v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AAB22C0;
  *(void *)(v9 + 32) = v6;
  unint64_t v15 = v9;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v15);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v11 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v10, 0);
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AAB22C0;
  *(void *)(v12 + 32) = v11;
  unint64_t v16 = v12;
  specialized Array._endMutation()();
  uint64_t v13 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v16);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t outlined consume of AudioFileBuilder.Cache?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t specialized REAudioFileConfigurationWrapper.init(prim:)()
{
  uint64_t v1 = v0;
  v32[1] = *(id *)MEMORY[0x263EF8340];
  *(void *)(v0 + 16) = REAudioFileAssetConfigurationCreate();
  if (one-time initialization token for randomizeStart != -1) {
    swift_once();
  }
  v32[0] = (id)static AudioConstants.AudioFile.randomizeStart;
  id v2 = (id)static AudioConstants.AudioFile.randomizeStart;
  uint64_t v3 = (void *)Prim.attribute(_:)();

  if (v3)
  {
    LOBYTE(v32[0]) = 0;
    RIOPxrVtValueGetBool();
  }
  REAudioFileAssetConfigurationSetRandomizeStart();
  if (one-time initialization token for shouldLoop != -1) {
    swift_once();
  }
  v32[0] = (id)static AudioConstants.AudioFile.shouldLoop;
  id v4 = (id)static AudioConstants.AudioFile.shouldLoop;
  uint64_t v5 = (void *)Prim.attribute(_:)();

  if (v5)
  {
    LOBYTE(v32[0]) = 0;
    RIOPxrVtValueGetBool();
  }
  REAudioFileAssetConfigurationSetShouldLoop();
  if (one-time initialization token for mixGroup != -1) {
    swift_once();
  }
  id v6 = (id)static AudioConstants.AudioFile.mixGroup;
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v7 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    id v8 = (void *)swift_allocObject();
    void v8[2] = v7;
    uint64_t v9 = Relationship.targets.getter();
    if (*(void *)(v9 + 16))
    {
      id EmptyPath = *(id *)(v9 + 32);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
    }
    outlined consume of Result<AnyAttribute, Object.Error>(v8, 0);
    uint64_t v12 = (void *)RIOPxrSdfPathCopyName();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    uint64_t v11 = (void *)MEMORY[0x23ECB9F30](v13, v15);
    swift_bridgeObjectRelease();
  }
  else
  {

    v32[0] = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    uint64_t v11 = 0;
  }
  REAudioFileAssetConfigurationSetMixGroupName();

  if (one-time initialization token for loadingStrategy != -1) {
    swift_once();
  }
  v32[0] = (id)static AudioConstants.AudioFile.loadingStrategy;
  id v16 = (id)static AudioConstants.AudioFile.loadingStrategy;
  double v17 = (void *)Prim.attribute(_:)();

  if (v17)
  {
    double v18 = (void *)RIOPxrVtValueCopyString();
    if (v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::String v19 = String.lowercased()();
      if (v19._countAndFlagsBits == 0x6D6165727473 && v19._object == (void *)0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  REAudioFileAssetConfigurationSetStreaming();
  if (one-time initialization token for normalization != -1) {
    swift_once();
  }
  v32[0] = (id)static AudioConstants.AudioFile.normalization;
  id v20 = (id)static AudioConstants.AudioFile.normalization;
  uint64_t v21 = (void *)Prim.attribute(_:)();

  if (v21)
  {
    uint64_t v22 = (void *)RIOPxrVtValueCopyToken();

    if (v22)
    {
      v32[0] = v22;
      AudioConstants.AudioFile.Normalization.init(rawValue:)(v32, (char *)&v31);
    }
  }
  REAudioFileAssetConfigurationSetNormalizationMode();
  if (one-time initialization token for calibrationMode != -1) {
    swift_once();
  }
  v32[0] = (id)static AudioConstants.AudioFile.calibrationMode;
  id v23 = (id)static AudioConstants.AudioFile.calibrationMode;
  id v24 = (void *)Prim.attribute(_:)();

  if (v24
    && (unint64_t v25 = (void *)RIOPxrVtValueCopyToken(), v24, v25)
    && (v32[0] = v25, AudioConstants.AudioFile.CalibrationMode.init(rawValue:)(v32, (char *)&v31), v31 != 3)
    && v31 > 1u)
  {
    REAudioFileAssetConfigurationSetCalibrationMode();
    if (String.count.getter() <= 0) {
      id v30 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v30 = (id)RIOPxrTfTokenCreateWithCString();
    }
    int64_t v27 = v30;
  }
  else
  {
    REAudioFileAssetConfigurationSetCalibrationMode();
    if (String.count.getter() < 1) {
      id v26 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v26 = (id)RIOPxrTfTokenCreateWithCString();
    }
    int64_t v27 = v26;
  }
  v32[0] = v27;
  id v28 = (void *)Prim.attribute(_:)();

  if (v28)
  {
    v32[0] = 0;
    RIOPxrVtValueGetDouble();
  }
  REAudioFileAssetConfigurationSetCalibrationLevel();
  return v1;
}

void partial apply for closure #1 in AudioFileBuilder.run(inputs:)()
{
  closure #1 in AudioFileBuilder.run(inputs:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64));
}

uint64_t sub_23A9E3A70()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __RKEntityMoveSelection.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v15 = 0;
LABEL_13:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 1);
    goto LABEL_14;
  }
  uint64_t v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_12:
    uint64_t v15 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_13;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_12;
  }
  uint64_t v7 = (void *)v6;

  swift_release();
  id v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  Swift::Int v13 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveSelectionUSD.init(rawValue:), v12);
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_release();
    uint64_t v14 = (unsigned int *)MEMORY[0x263F162B8];
    goto LABEL_16;
  }
  if (v13 != 1)
  {
LABEL_14:
    lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  uint64_t v14 = (unsigned int *)MEMORY[0x263F162B0];
LABEL_16:
  uint64_t v17 = *v14;
  uint64_t v18 = type metadata accessor for __RKEntityMoveSelection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a1, v17, v18);
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityMoveSelection.MoveSelectionLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23A9E3E30);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  return &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    outlined init with copy of Any(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 8 * v6);
        swift_retain();
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v9;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

void *specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    char v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    unint64_t v6 = *(v4 - 2);
    id v8 = *(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    void *v11 = v5;
    v11[1] = v6;
    Swift::String v12 = (void *)(v2[7] + 16 * result);
    *Swift::String v12 = v8;
    v12[1] = v7;
    Swift::Int v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  char v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UUID));
  id v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    char v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  unint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  char v7 = (void *)v6;
  id v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  Swift::String v12 = a1 + v11;
  Swift::Int v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, UUID));
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    double result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if (v17) {
      break;
    }
    uint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    Swift::String v19 = (uint64_t *)(v7[6] + 16 * result);
    *Swift::String v19 = v14;
    v19[1] = v15;
    id v20 = v7[7];
    uint64_t v21 = type metadata accessor for UUID();
    double result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    id v23 = __OFADD__(v22, 1);
    id v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    char v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, OpaquePointer>);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    unint64_t v6 = (id)*(v4 - 1);
    double result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    Swift::String v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    id v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  char v2 = static _DictionaryStorage.allocate(capacity:)();
  id v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  unint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    char v7 = v15;
    id v8 = v16;
    double result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    void *v11 = v7;
    v11[1] = v8;
    double result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    Swift::String v12 = v3[2];
    Swift::Int v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  char v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
  id v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    char v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (URL, __REAsset)>);
  unint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  char v7 = (void *)v6;
  id v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  id v24 = a1;
  unint64_t v25 = v9;
  uint64_t v10 = v6 + 64;
  uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  Swift::String v12 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v11, (uint64_t)v5, &demangling cache variable for type metadata for (String, (URL, __REAsset)));
    Swift::Int v13 = *v5;
    uint64_t v14 = v5[1];
    double result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v14);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v18 = v13;
    v18[1] = v14;
    Swift::String v19 = v7[7];
    id v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
    double result = outlined init with take of (URL, __REAsset)(v25, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v17, &demangling cache variable for type metadata for (URL, __REAsset));
    uint64_t v21 = v7[2];
    uint64_t v22 = __OFADD__(v21, 1);
    id v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v11 += v12;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    char v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    unint64_t v6 = (id)*(v4 - 1);
    swift_retain();
    double result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    Swift::String v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    char v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    unint64_t v6 = *(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    double result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    void *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    Swift::String v12 = __OFADD__(v11, 1);
    Swift::Int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(void *)(a1 + 16))
  {
    char v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ImportSession.MeshAssetEstimate>);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 72);
  while (1)
  {
    uint64_t v5 = *(v4 - 5);
    unint64_t v6 = *(v4 - 4);
    char v7 = *(v4 - 3);
    id v8 = *(v4 - 2);
    uint64_t v9 = *(v4 - 1);
    uint64_t v10 = *v4;
    swift_bridgeObjectRetain();
    double result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    Swift::Int v13 = (uint64_t *)(v2[6] + 16 * result);
    *Swift::Int v13 = v5;
    v13[1] = v6;
    uint64_t v14 = (void *)(v2[7] + 32 * result);
    unsigned int *v14 = v7;
    v14[1] = v8;
    v14[2] = v9;
    v14[3] = v10;
    uint64_t v15 = v2[2];
    id v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v4 += 6;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [ImportSession.EvaluationFault]>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    char v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [ToolsFoundations.Token]>);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    unint64_t v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    double result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    Swift::String v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    char v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    unint64_t v6 = *(v4 - 2);
    id v8 = *(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    void *v11 = v5;
    v11[1] = v6;
    Swift::String v12 = (void *)(v2[7] + 16 * result);
    *Swift::String v12 = v8;
    v12[1] = v7;
    Swift::Int v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    id v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    long long v14 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    id v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    id v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    void *v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    long long v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t static CompileSession.CompilationOption_RequireIncludeMetadata.getter()
{
  return 0xD000000000000016;
}

uint64_t CompileSession.CompilationOption_RequireIncludeMetadata_Default.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 16) = 0;
  return result;
}

void one-time initialization function for CompilationOption_DumpDiagnosticsData()
{
  static CompileSession.CompilationOption_DumpDiagnosticsData = 0x67616944706D7544;
  unk_268A4A4E0 = 0xEF73636974736F6ELL;
}

uint64_t static CompileSession.CompilationOption_DumpDiagnosticsData.getter()
{
  if (one-time initialization token for CompilationOption_DumpDiagnosticsData != -1) {
    swift_once();
  }
  uint64_t v0 = static CompileSession.CompilationOption_DumpDiagnosticsData;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CompileSession.CompilationOption_DumpDiagnosticsData_Default.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 17);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 17) = 0;
  return result;
}

unint64_t static CompileSession.CompilationOption_DumpDiagnosticsDirectory.getter()
{
  return 0xD000000000000018;
}

uint64_t CompileSession.CompilationOption_DumpDiagnosticsDirectory_Default.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 32))
  {
    uint64_t v6 = *(void *)(v1 + 24);
  }
  else
  {
    id v7 = objc_msgSend(self, sel_defaultManager);
    id v8 = objc_msgSend(v7, sel_temporaryDirectory);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = URL.path.getter();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + 24) = v6;
    *(void *)(v1 + 32) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v6;
}

unint64_t static CompileSession.CompilationOption_ForceIncludeUnusedMaterials.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t CompileSession.CompilationOption_ForceIncludeUnusedMaterials_Default.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 40);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 1;
  *(unsigned char *)(v0 + 40) = 1;
  return result;
}

uint64_t CompileSession.sourcePaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CompileSession.exportOptions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for __REAssetBundle.ExportOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CompileSession.compilationOptions.getter()
{
  return CompileSession.compilationOptions.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CompileSession.basePath.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompileSession.deploymentTargets.getter()
{
  return CompileSession.compilationOptions.getter();
}

uint64_t CompileSession.deploymentTargets.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CompileSession.deploymentTargets.modify())()
{
  return CompileSession.deploymentTargets.modify;
}

uint64_t CompileSession.DeploymentTarget_Default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v17[-v11];
  uint64_t v13 = v1 + OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default;
  swift_beginAccess();
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v13, (uint64_t)v12, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  uint64_t v14 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))(a1, v12, v14);
  }
  outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F161A0], v3);
  __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v9, a1, v14);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
  swift_beginAccess();
  outlined assign with take of (URL, __REAsset)((uint64_t)v9, v13, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  return swift_endAccess();
}

uint64_t CompileSession.compatibilityFaultsByPrimPath.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CompileSession.compatibilityFaults.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v9 = 0;
  for (uint64_t i = MEMORY[0x263F8EE88]; ; uint64_t i = v13)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7) {
      goto LABEL_25;
    }
    uint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_25;
      }
      uint64_t v15 = *(void *)(v3 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_25;
        }
        uint64_t v15 = *(void *)(v3 + 8 * v9);
        if (!v15)
        {
          int64_t v9 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_25;
          }
          uint64_t v15 = *(void *)(v3 + 8 * v9);
          if (!v15)
          {
            int64_t v9 = v14 + 4;
            if (v14 + 4 >= v7) {
              goto LABEL_25;
            }
            uint64_t v15 = *(void *)(v3 + 8 * v9);
            if (!v15) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    uint64_t v6 = (v15 - 1) & v15;
LABEL_5:
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized Set.union<A>(_:)(v11, i);
    uint64_t v13 = v12;
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 5;
  if (v16 >= v7)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return i;
  }
  uint64_t v15 = *(void *)(v3 + 8 * v16);
  if (v15)
  {
    int64_t v9 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_25;
    }
    uint64_t v15 = *(void *)(v3 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  int64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v25 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v25 - v12;
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  v25[0] = a1 + 56;
  v25[1] = a2;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v19) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v25[0] + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v19) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v25[0] + 8 * v14);
      if (!v23)
      {
        int64_t v14 = v22 + 2;
        if (v22 + 2 >= v19) {
          goto LABEL_23;
        }
        unint64_t v23 = *(void *)(v25[0] + 8 * v14);
        if (!v23)
        {
          int64_t v14 = v22 + 3;
          if (v22 + 3 >= v19) {
            goto LABEL_23;
          }
          unint64_t v23 = *(void *)(v25[0] + 8 * v14);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_5:
    outlined init with copy of CompileSession.ImportSessionData(*(void *)(a1 + 48) + *(void *)(v5 + 72) * v21, (uint64_t)v13, type metadata accessor for ImportSession.EvaluationFault);
    outlined init with take of CompileSession.ImportSessionData((uint64_t)v13, (uint64_t)v7, type metadata accessor for ImportSession.EvaluationFault);
    specialized Set._Variant.insert(_:)((uint64_t)v10, (uint64_t)v7);
    outlined destroy of CompileSession.ImportSessionData((uint64_t)v10, type metadata accessor for ImportSession.EvaluationFault);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v19)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v23 = *(void *)(v25[0] + 8 * v24);
  if (v23)
  {
    int64_t v14 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v19) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v25[0] + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t CompileSession.includeUnusedMaterials.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials);
  swift_beginAccess();
  return *v1;
}

uint64_t CompileSession.includeUnusedMaterials.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*CompileSession.includeUnusedMaterials.modify())()
{
  return CompileSession.includeUnusedMaterials.modify;
}

unint64_t CompileSession.LoadError.errorDescription.getter(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    unint64_t v9 = 0xD00000000000001DLL;
    uint64_t v6 = a1;
    unint64_t v7 = (unint64_t)a2;
  }
  else
  {
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    unint64_t v9 = 0xD000000000000023;
    v5._countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    uint64_t v6 = 0x6E7562206E692022;
    unint64_t v7 = 0xEB00000000656C64;
  }
  String.append(_:)(*(Swift::String *)&v6);
  return v9;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance CompileSession.LoadError()
{
  return CompileSession.LoadError.errorDescription.getter(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance CompileSession.LoadError()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance CompileSession.LoadError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance CompileSession.LoadError()
{
  return MEMORY[0x270EEE920]();
}

uint64_t CompileSession.__allocating_init(sourcePaths:exportOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  CompileSession.init(sourcePaths:exportOptions:)(a1, a2);
  return v4;
}

uint64_t CompileSession.init(sourcePaths:exportOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v80 = a1;
  uint64_t v5 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v70 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for URL();
  uint64_t v79 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v89 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v90 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v84 = *(void *)(v11 - 8);
  unint64_t v85 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v83 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v77 = (uint64_t)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v78 = (char *)v69 - v16;
  MEMORY[0x270FA5388](v17);
  int64_t v19 = (char *)v69 - v18;
  double v21 = MEMORY[0x270FA5388](v20);
  unint64_t v23 = (char *)v69 - v22;
  *(_WORD *)(v2 + 16) = 514;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v6 + 56))(v2 + OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default, 1, 1, v5, v21);
  uint64_t v24 = OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults;
  *(void *)(v3 + v24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials) = 0;
  LODWORD(v86) = static os_log_type_t.info.getter();
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v25 = swift_allocObject();
  long long v88 = xmmword_23AAB22A0;
  *(_OWORD *)(v25 + 16) = xmmword_23AAB22A0;
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  id v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v24) = v26(v23, 1, v5);
  outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  char v75 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v26;
  uint64_t v76 = v6 + 48;
  if (v24 == 1)
  {
    unint64_t v27 = 0xE400000000000000;
    uint64_t v28 = 1701736302;
  }
  else
  {
    __REAssetBundle.ExportOptions.deploymentTarget.getter();
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v26)(v19, 1, v5);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    id v30 = v83;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
    uint64_t v28 = __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
    unint64_t v27 = v31;
    (*(void (**)(char *, unint64_t))(v84 + 8))(v30, v85);
  }
  uint64_t v71 = v6;
  uint64_t v72 = v5;
  uint64_t v73 = a2;
  uint64_t v74 = v3;
  *(void *)(v25 + 56) = MEMORY[0x263F8D310];
  unint64_t v86 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v25 + 64) = v86;
  *(void *)(v25 + 32) = v28;
  *(void *)(v25 + 40) = v27;
  unint64_t v85 = type metadata accessor for OS_os_log();
  uint64_t v32 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  uint64_t v33 = *(void *)(v80 + 16);
  if (v33)
  {
    uint64_t v34 = *(char **)(v79 + 16);
    uint64_t v35 = v80 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80));
    uint64_t v82 = *(void *)(v79 + 72);
    uint64_t v83 = v34;
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56);
    os_log_type_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
    id v81 = (void (**)(char *, char *, uint64_t))(v79 + 32);
    uint64_t v84 = v79 + 16;
    id v38 = (void (**)(char *, uint64_t))(v79 + 8);
    swift_bridgeObjectRetain();
    v69[1] = (unint64_t)v36 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v40 = v90;
    uint64_t v39 = v91;
    id v41 = v89;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v83)(v40, v35, v39);
      uint64_t v42 = *v36;
      (*v36)(v40, 0, 1, v39);
      if ((*v37)(v40, 1, v39) == 1) {
        break;
      }
      (*v81)(v41, v40, v39);
      static os_log_type_t.info.getter();
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = v88;
      uint64_t v44 = URL.path.getter();
      unint64_t v45 = v86;
      *(void *)(v43 + 56) = MEMORY[0x263F8D310];
      *(void *)(v43 + 64) = v45;
      *(void *)(v43 + 32) = v44;
      *(void *)(v43 + 40) = v46;
      unint64_t v47 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v40 = v90;
      swift_bridgeObjectRelease();

      uint64_t v39 = v91;
      (*v38)(v41, v91);
      v35 += v82;
      if (!--v33) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56);
    swift_bridgeObjectRetain();
    uint64_t v40 = v90;
    uint64_t v39 = v91;
LABEL_11:
    v42(v40, 1, 1, v39);
  }
  uint64_t v48 = v80;
  swift_bridgeObjectRelease();
  uint64_t v49 = v74;
  *(void *)(v74 + 48) = v48;
  uint64_t v50 = v49 + OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions;
  uint64_t v51 = type metadata accessor for __REAssetBundle.ExportOptions();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = v73;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v50, v73, v51);
  if (*(void *)(v48 + 16))
  {
    uint64_t v54 = v79;
    uint64_t v55 = (uint64_t)v89;
    uint64_t v56 = v91;
    (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(v89, v48 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)), v91);
    uint64_t v57 = specialized static CompileSession.findRKAssets(sourcePath:)(v55);
    unint64_t v59 = v58;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
  }
  else
  {
    uint64_t v57 = 0;
    unint64_t v59 = 0xE000000000000000;
  }
  uint64_t v60 = v72;
  uint64_t v61 = v71;
  uint64_t v62 = (uint64_t)v78;
  uint64_t v63 = (uint64_t *)(v49 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath);
  *uint64_t v63 = v57;
  v63[1] = v59;
  *(void *)(v49 + OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  uint64_t v64 = v77;
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v62, v77, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  if (v75(v64, 1, v60) == 1)
  {
    uint64_t v65 = MEMORY[0x263F8EE88];
  }
  else
  {
    unint64_t v66 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v70, v64, v60);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.ExportOptions.DeploymentTarget>);
    unint64_t v67 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
    uint64_t v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = v88;
    (*(void (**)(unint64_t, char *, uint64_t))(v61 + 16))(v68 + v67, v66, v60);
    uint64_t v65 = specialized Set.init(_nonEmptyArrayLiteral:)(v68);
    swift_setDeallocating();
    uint64_t v62 = (uint64_t)v78;
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v66, v60);
  }
  outlined destroy of Any?(v62, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v51);
  *(void *)(v49 + OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets) = v65;
  return v49;
}

uint64_t CompileSession.__allocating_init(sourcePaths:exportOptions:compilationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for __REAssetBundle.ExportOptions();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a2, v6, v8);
  type metadata accessor for CompileSession(0);
  uint64_t v11 = swift_allocObject();
  CompileSession.init(sourcePaths:exportOptions:)(a1, (uint64_t)v10);
  if (*(void *)(a3 + 16))
  {
    swift_retain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x800000023AAAE2B0);
    if (v13)
    {
      outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v12, (uint64_t)&v18);
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    swift_retain();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  if (!*((void *)&v19 + 1))
  {
    outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  if (!swift_dynamicCast())
  {
LABEL_10:
    char v14 = CompileSession.CompilationOption_ForceIncludeUnusedMaterials_Default.getter();
    goto LABEL_11;
  }
  char v14 = v17[15];
LABEL_11:
  uint64_t v15 = (unsigned char *)(v11 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials);
  swift_beginAccess();
  unsigned char *v15 = v14 & 1;
  swift_release();
  return v11;
}

uint64_t CompileSession.__allocating_init(basePath:sourcePaths:exportOptions:compilationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  CompileSession.init(basePath:sourcePaths:exportOptions:compilationOptions:)(a1, a2, a3, a4);
  return v8;
}

uint64_t CompileSession.init(basePath:sourcePaths:exportOptions:compilationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v88 = a4;
  uint64_t v91 = a1;
  uint64_t v92 = a2;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v93 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v102 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v80 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v104 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  unint64_t v99 = *(void *)(v14 - 8);
  unint64_t v100 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v97 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v85 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v89 = (char *)&v79 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v79 - v21;
  double v24 = MEMORY[0x270FA5388](v23);
  id v26 = (char *)&v79 - v25;
  *(_WORD *)(v5 + 16) = 514;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v10 + 56))(v5 + OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default, 1, 1, v9, v24);
  uint64_t v27 = OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults;
  *(void *)(v5 + v27) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
  uint64_t v87 = (unsigned char *)(v5 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials);
  *(unsigned char *)(v5 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials) = 0;
  LODWORD(v98) = static os_log_type_t.info.getter();
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v28 = swift_allocObject();
  long long v103 = xmmword_23AAB22A0;
  *(_OWORD *)(v28 + 16) = xmmword_23AAB22A0;
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  uint64_t v83 = v10;
  id v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  unsigned int v30 = v29(v26, 1, v9);
  outlined destroy of Any?((uint64_t)v26, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  uint64_t v90 = a3;
  uint64_t v86 = v9;
  uint64_t v84 = v10 + 48;
  if (v30 == 1)
  {
    unint64_t v31 = 0xE400000000000000;
    uint64_t v32 = 1701736302;
    goto LABEL_5;
  }
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v22, 1, v9);
  if (result != 1)
  {
    uint64_t v34 = v97;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v22, v9);
    uint64_t v32 = __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
    unint64_t v31 = v35;
    (*(void (**)(char *, unint64_t))(v99 + 8))(v34, v100);
LABEL_5:
    uint64_t v36 = v92;
    id v81 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v29;
    uint64_t v82 = v5;
    *(void *)(v28 + 56) = MEMORY[0x263F8D310];
    unint64_t v100 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v28 + 64) = v100;
    *(void *)(v28 + 32) = v32;
    *(void *)(v28 + 40) = v31;
    unint64_t v99 = type metadata accessor for OS_os_log();
    os_log_type_t v37 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    uint64_t v38 = *(void *)(v36 + 16);
    if (v38)
    {
      uint64_t v39 = *(char **)(v93 + 16);
      uint64_t v40 = v36 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
      uint64_t v96 = *(void *)(v93 + 72);
      uint64_t v97 = v39;
      id v41 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
      uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
      uint64_t v98 = v93 + 16;
      uint64_t v94 = (void (**)(char *, uint64_t))(v93 + 8);
      uint64_t v95 = (void (**)(char *, char *, uint64_t))(v93 + 32);
      swift_bridgeObjectRetain();
      unint64_t v79 = (unint64_t)v41 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v43 = v104;
      uint64_t v44 = v102;
      while (1)
      {
        ((void (*)(char *, uint64_t, uint64_t))v97)(v43, v40, v7);
        unint64_t v45 = *v41;
        (*v41)(v43, 0, 1, v7);
        if ((*v42)(v43, 1, v7) == 1) {
          break;
        }
        (*v95)(v44, v43, v7);
        static os_log_type_t.info.getter();
        uint64_t v46 = v7;
        uint64_t v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = v103;
        uint64_t v48 = URL.path.getter();
        unint64_t v49 = v100;
        *(void *)(v47 + 56) = MEMORY[0x263F8D310];
        *(void *)(v47 + 64) = v49;
        *(void *)(v47 + 32) = v48;
        *(void *)(v47 + 40) = v50;
        uint64_t v51 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        uint64_t v7 = v46;
        swift_bridgeObjectRelease();

        uint64_t v43 = v104;
        (*v94)(v44, v46);
        v40 += v96;
        if (!--v38) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
      swift_bridgeObjectRetain();
      uint64_t v43 = v104;
LABEL_11:
      v45(v43, 1, 1, v7);
    }
    uint64_t v52 = v92;
    swift_bridgeObjectRelease();
    uint64_t v53 = v82;
    *(void *)(v82 + 48) = v52;
    uint64_t v54 = v53 + OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions;
    uint64_t v55 = type metadata accessor for __REAssetBundle.ExportOptions();
    uint64_t v56 = *(void *)(v55 - 8);
    uint64_t v57 = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v54, v90, v55);
    uint64_t v58 = v91;
    uint64_t v59 = URL.path.getter();
    uint64_t v60 = (uint64_t *)(v53 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath);
    *uint64_t v60 = v59;
    v60[1] = v61;
    uint64_t v62 = v88;
    *(void *)(v53 + OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions) = v88;
    swift_bridgeObjectRetain();
    uint64_t v63 = (uint64_t)v89;
    __REAssetBundle.ExportOptions.deploymentTarget.getter();
    uint64_t v64 = v85;
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v63, v85, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    uint64_t v65 = v86;
    if (v81(v64, 1, v86) == 1)
    {
      uint64_t v66 = MEMORY[0x263F8EE88];
    }
    else
    {
      uint64_t v67 = v83;
      uint64_t v68 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v80, v64, v65);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.ExportOptions.DeploymentTarget>);
      uint64_t v69 = v65;
      unint64_t v70 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = v103;
      uint64_t v104 = (char *)v55;
      (*(void (**)(unint64_t, char *, uint64_t))(v67 + 16))(v71 + v70, v68, v69);
      uint64_t v66 = specialized Set.init(_nonEmptyArrayLiteral:)(v71);
      swift_setDeallocating();
      uint64_t v55 = (uint64_t)v104;
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v72 = v68;
      uint64_t v57 = v90;
      uint64_t v73 = v69;
      uint64_t v58 = v91;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v72, v73);
      uint64_t v63 = (uint64_t)v89;
    }
    outlined destroy of Any?(v63, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    *(void *)(v53 + OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets) = v66;
    if (*(void *)(v62 + 16)
      && (unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x800000023AAAE2B0),
          (v75 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v62 + 56) + 32 * v74, (uint64_t)&v106);
    }
    else
    {
      long long v106 = 0u;
      long long v107 = 0u;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v55);
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v58, v7);
    if (*((void *)&v107 + 1))
    {
      int v76 = swift_dynamicCast();
      uint64_t v77 = v87;
      if (v76)
      {
        char v78 = v105;
LABEL_24:
        swift_beginAccess();
        *uint64_t v77 = v78 & 1;
        return v53;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v106, &demangling cache variable for type metadata for Any?);
      uint64_t v77 = v87;
    }
    char v78 = CompileSession.CompilationOption_ForceIncludeUnusedMaterials_Default.getter();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static CompileSession.cartesianProduct(of:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23AAB22A0;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = v3;
  *a2 = v5;
  return swift_bridgeObjectRetain();
}

unint64_t CompileSession.postOperationsAndExtraAssets(for:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v160 = a2;
  uint64_t v154 = type metadata accessor for __AssetRef();
  uint64_t v3 = *(void *)(v154 - 8);
  MEMORY[0x270FA5388](v154);
  v153 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  MEMORY[0x270FA5388](v152);
  uint64_t v151 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v150 = (char *)&v138 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  char v146 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = (void (**)(char *, uint64_t))type metadata accessor for String.Encoding();
  uint64_t v145 = (uint64_t)*(v147 - 1);
  MEMORY[0x270FA5388](v147);
  uint64_t v144 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for Date();
  uint64_t v142 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  v141 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v140 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for URL();
  unint64_t v159 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155);
  uint64_t v148 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v149 = (uint64_t *)((char *)&v138 - v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v138 - v18;
  MEMORY[0x270FA5388](v20);
  char v156 = (void **)((char *)&v138 - v21);
  uint64_t v22 = type metadata accessor for Entity.ChildCollection();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v138 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = a1;
  uint64_t v26 = dispatch thunk of Entity.name.getter();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (!v29)
  {
    type metadata accessor for Entity();
    HasHierarchy.children.getter();
    lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, MEMORY[0x263F16548]);
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v30 = dispatch thunk of Collection.distance(from:to:)();
    unint64_t v31 = *(void (**)(char *, uint64_t))(v23 + 8);
    v31(v25, v22);
    if (v30 == 1)
    {
      HasHierarchy.children.getter();
      Entity.ChildCollection.subscript.getter();
      v31(v25, v22);
      dispatch thunk of Entity.name.getter();
      swift_release();
      dispatch thunk of Entity.name.setter();
    }
  }
  if (one-time initialization token for CompilationOption_DumpDiagnosticsData != -1) {
LABEL_53:
  }
    swift_once();
  uint64_t v33 = static CompileSession.CompilationOption_DumpDiagnosticsData;
  uint64_t v32 = unk_268A4A4E0;
  uint64_t v34 = v158;
  uint64_t v35 = v158 + OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions;
  swift_beginAccess();
  uint64_t v36 = *(void *)v35;
  if (*(void *)(*(void *)v35 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v32);
    if (v38)
    {
      outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v37, (uint64_t)&v165);
    }
    else
    {
      long long v166 = 0u;
      long long v165 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v166 = 0u;
    long long v165 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v166 + 1))
  {
    outlined destroy of Any?((uint64_t)&v165, &demangling cache variable for type metadata for Any?);
LABEL_18:
    if ((CompileSession.CompilationOption_DumpDiagnosticsData_Default.getter() & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_18;
  }
  if (v164 != 1) {
    goto LABEL_34;
  }
LABEL_19:
  swift_beginAccess();
  uint64_t v39 = *(void *)v35;
  if (*(void *)(*(void *)v35 + 16)
    && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x800000023AAAE290), (v41 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v40, (uint64_t)&v165);
  }
  else
  {
    long long v166 = 0u;
    long long v165 = 0u;
  }
  uint64_t v42 = v139;
  swift_endAccess();
  uint64_t v138 = v3;
  if (!*((void *)&v166 + 1))
  {
    outlined destroy of Any?((uint64_t)&v165, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  if (!swift_dynamicCast())
  {
LABEL_27:
    uint64_t v43 = v12;
    CompileSession.CompilationOption_DumpDiagnosticsDirectory_Default.getter();
    goto LABEL_28;
  }
  uint64_t v43 = v12;
LABEL_28:
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  URL.lastPathComponent.getter();
  uint64_t v44 = v156;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  unint64_t v45 = *(void (**)(char *, uint64_t))(v159 + 8);
  v45(v19, v155);
  uint64_t v46 = v140;
  UUID.init()();
  uint64_t v47 = UUID.uuidString.getter();
  uint64_t v49 = v48;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v46, v42);
  *(void *)&long long v165 = v47;
  *((void *)&v165 + 1) = v49;
  swift_bridgeObjectRetain();
  v50._countAndFlagsBits = 45;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = *((void *)&v165 + 1);
  uint64_t v140 = (char *)v165;
  uint64_t v52 = v141;
  Date.init()();
  id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  uint64_t v54 = (void *)MEMORY[0x23ECB9F30](0xD000000000000016, 0x800000023AAAE620);
  objc_msgSend(v53, sel_setDateFormat_, v54);

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v56 = objc_msgSend(v53, sel_stringFromDate_, isa);

  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;

  uint64_t v60 = v52;
  uint64_t v61 = v45;
  (*(void (**)(char *, uint64_t))(v142 + 8))(v60, v143);
  *(void *)&long long v165 = v140;
  *((void *)&v165 + 1) = v51;
  swift_bridgeObjectRetain();
  v62._countAndFlagsBits = v57;
  v62._object = v59;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v64 = *((void *)&v165 + 1);
  uint64_t v63 = v165;
  swift_bridgeObjectRetain();
  v65._countAndFlagsBits = 45;
  v65._object = (void *)0xE100000000000000;
  String.append(_:)(v65);
  long long v66 = v165;
  uint64_t v67 = v144;
  static String.Encoding.utf8.getter();
  uint64_t v68 = specialized static Utils.getDigest(of:salt:length:encoding:)(v63, v64, 0, (void *)0xE000000000000000, 2);
  unint64_t v70 = v69;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void))(v145 + 8))(v67, v147);
  if (v70)
  {
    uint64_t v71 = v70;
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v71 = (void *)0xE000000000000000;
  }
  long long v165 = v66;
  swift_bridgeObjectRetain();
  v72._countAndFlagsBits = v68;
  v72._object = v71;
  String.append(_:)(v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v73 = (Swift::String)v165;
  unint64_t v74 = v148;
  URL.deletingLastPathComponent()();
  *(void *)&long long v165 = URL.lastPathComponent.getter();
  *((void *)&v165 + 1) = v75;
  swift_bridgeObjectRetain();
  v76._countAndFlagsBits = 45;
  v76._object = (void *)0xE100000000000000;
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v77 = v149;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v78 = v155;
  v61(v74, v155);
  v61((char *)v44, v78);
  (*(void (**)(void **, void *, uint64_t))(v159 + 32))(v44, v77, v78);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_23AAB24E0;
  uint64_t v80 = URL.path.getter();
  uint64_t v82 = v81;
  uint64_t v83 = MEMORY[0x263F8D310];
  *(void *)(v79 + 56) = MEMORY[0x263F8D310];
  unint64_t v84 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v79 + 64) = v84;
  *(void *)(v79 + 32) = v80;
  *(void *)(v79 + 40) = v82;
  uint64_t v85 = URL.path.getter();
  *(void *)(v79 + 96) = v83;
  *(void *)(v79 + 104) = v84;
  *(void *)(v79 + 72) = v85;
  *(void *)(v79 + 80) = v86;
  type metadata accessor for OS_os_log();
  uint64_t v87 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  URL.path.getter();
  uint64_t v88 = (void **)(v157 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v89 = *v88;
  String.utf8CString.getter();
  id v90 = v89;
  LOBYTE(v88) = RIOImportSessionDumpDiagnostics();
  swift_bridgeObjectRelease();

  swift_release();
  if ((v88 & 1) == 0)
  {
    static os_log_type_t.info.getter();
    uint64_t v91 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
  v61((char *)v156, v155);
  uint64_t v3 = v138;
  uint64_t v34 = v158;
LABEL_34:
  swift_beginAccess();
  uint64_t v92 = swift_bridgeObjectRetain();
  uint64_t v93 = v157;
  uint64_t v94 = ImportSession.getCompatibilityFaultsByPrimPath(for:)(v92);
  swift_bridgeObjectRelease();
  uint64_t v95 = (uint64_t *)(v34 + OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v163 = *v95;
  *uint64_t v95 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v94, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v163);
  *uint64_t v95 = v163;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v97 = (void **)(v93 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  char v156 = v97;
  uint64_t v98 = (void *)RIOImportSessionCopyExtraAssetTags();
  *(void *)&long long v165 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if ((void)v165) {
    uint64_t v99 = v165;
  }
  else {
    uint64_t v99 = MEMORY[0x263F8EE78];
  }
  unint64_t v100 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v101 = *(void *)(v99 + 16);
  uint64_t v145 = v99;
  if (v101)
  {
    uint64_t v149 = (void *)(v34 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath);
    swift_beginAccess();
    uint64_t v148 = (char *)(v159 + 16);
    uint64_t v147 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v102 = (void **)(v99 + 40);
    uint64_t v3 = MEMORY[0x263F8D310];
    do
    {
      uint64_t v104 = (uint64_t)*(v102 - 1);
      long long v103 = *v102;
      char v105 = *v156;
      String.utf8CString.getter();
      swift_bridgeObjectRetain();
      id v106 = v105;
      uint64_t ExtraAssetWithTag = RIOImportSessionGetExtraAssetWithTag();

      swift_release();
      if (ExtraAssetWithTag)
      {
        uint64_t v157 = v104;
        uint64_t v158 = ExtraAssetWithTag;
        unint64_t v159 = v100;
        uint64_t v108 = *v149;
        uint64_t v109 = v149[1];
        swift_bridgeObjectRetain();
        uint64_t v12 = URL.path.getter();
        unint64_t v111 = v110;
        *(void *)&long long v165 = v12;
        *((void *)&v165 + 1) = v110;
        uint64_t v161 = v108;
        uint64_t v162 = v109;
        lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        if (BidirectionalCollection<>.starts<A>(with:)())
        {
          *(void *)&long long v165 = v12;
          *((void *)&v165 + 1) = v111;
          uint64_t v161 = v108;
          uint64_t v162 = v109;
          uint64_t v112 = type metadata accessor for Locale();
          uint64_t v113 = (uint64_t)v146;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v146, 1, 1, v112);
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.range<A>(of:options:range:locale:)();
          unint64_t v115 = v114;
          uint64_t v19 = v116;
          outlined destroy of Any?(v113, &demangling cache variable for type metadata for Locale?);
          if (v19) {
            unint64_t v115 = 15;
          }
          uint64_t v117 = HIBYTE(v111) & 0xF;
          if ((v111 & 0x2000000000000000) == 0) {
            uint64_t v117 = v12 & 0xFFFFFFFFFFFFLL;
          }
          if (4 * v117 < v115 >> 14)
          {
            __break(1u);
            goto LABEL_53;
          }
          swift_bridgeObjectRetain();
          uint64_t v118 = String.subscript.getter();
          uint64_t v120 = v119;
          uint64_t v122 = v121;
          uint64_t v124 = v123;
          swift_bridgeObjectRelease();
          uint64_t v12 = MEMORY[0x23ECB9FE0](v118, v120, v122, v124);
          unint64_t v126 = v125;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v111 = v126;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        *(void *)&long long v165 = v12;
        *((void *)&v165 + 1) = v111;
        swift_bridgeObjectRetain();
        v127._countAndFlagsBits = 58;
        v127._object = (void *)0xE100000000000000;
        String.append(_:)(v127);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v128._countAndFlagsBits = v157;
        v128._object = v103;
        String.append(_:)(v128);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v129 = v165;
        uint64_t v130 = *(int *)(v152 + 48);
        uint64_t v131 = (uint64_t)v150;
        (*(void (**)(char *, uint64_t, uint64_t))v148)(v150, v160, v155);
        type metadata accessor for __REAsset();
        *((void *)&v166 + 1) = MEMORY[0x263F8DD08];
        *(void *)&long long v165 = v158;
        char v132 = v153;
        static __AssetRef.__fromCore(_:)();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v165);
        uint64_t v133 = static __REAsset.__fromHandle(_:)();
        (*v147)(v132, v154);
        *(void *)(v131 + v130) = v133;
        uint64_t v134 = v151;
        outlined init with take of (URL, __REAsset)(v131, v151, &demangling cache variable for type metadata for (URL, __REAsset));
        unint64_t v135 = v159;
        char v136 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v165 = v135;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v134, v129, *((uint64_t *)&v129 + 1), v136);
        unint64_t v100 = v165;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = MEMORY[0x263F8D310];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v102 += 2;
      --v101;
    }
    while (v101);
  }
  swift_bridgeObjectRelease();
  return v100;
}

uint64_t CompileSession.compileSync(outputPath:)(unint64_t a1)
{
  uint64_t v2 = v1;
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23AAB22A0;
  uint64_t v5 = URL.path.getter();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = MEMORY[0x263F8D310];
  *(void *)(v4 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  type metadata accessor for OS_os_log();
  uint64_t v8 = static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  unint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v17 = MEMORY[0x263F8EE78];
  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for USDImportService();
  uint64_t inited = swift_initStackObject();
  static os_log_type_t.info.getter();
  uint64_t v10 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 47;
  v11._object = (void *)0xE100000000000000;
  LOBYTE(v8) = String.hasSuffix(_:)(v11);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    v12._countAndFlagsBits = 47;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    swift_endAccess();
  }
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
  uint64_t v14 = (unint64_t *)(v2 + OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults);
  swift_beginAccess();
  unint64_t *v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  closure #1 in CompileSession.compileSync(outputPath:)(v2, inited, (uint64_t)&v17, (uint64_t *)&v18, &v19, a1, &v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CompileSession.compileSync(outputPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, unint64_t a6, uint64_t *a7)
{
  v449 = a7;
  uint64_t v8 = v7;
  unint64_t v472 = a6;
  v473 = a5;
  v474 = a4;
  uint64_t v512 = a3;
  uint64_t v528 = *MEMORY[0x263EF8340];
  uint64_t v482 = type metadata accessor for __AssetRef();
  uint64_t v431 = *(void *)(v482 - 8);
  MEMORY[0x270FA5388](v482);
  v481 = (char *)&v426 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v428 = *(void *)(v11 - 8);
  uint64_t v429 = v11;
  MEMORY[0x270FA5388](v11);
  v427 = (char *)&v426 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v470 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v13 = *(void *)(v470 - 8);
  MEMORY[0x270FA5388](v470);
  v430 = (char *)&v426 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v505 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CompileSession.ImportSessionData));
  uint64_t v448 = *(void *)(v505 - 8);
  MEMORY[0x270FA5388](v505);
  v485 = (char *)&v426 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v466 = type metadata accessor for CompileSession.ImportSessionData(0);
  uint64_t v494 = *(void *)(v466 - 8);
  MEMORY[0x270FA5388](v466);
  uint64_t v501 = (uint64_t)&v426 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v457 = (uint64_t *)((char *)&v426 - v18);
  MEMORY[0x270FA5388](v19);
  v471 = (char **)((char *)&v426 - v20);
  uint64_t v480 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  uint64_t v518 = *(void *)(v480 - 8);
  MEMORY[0x270FA5388](v480);
  v479 = (char *)&v426 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v500 = (uint64_t)&v426 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v511 = (uint64_t)&v426 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v519 = (uint64_t)&v426 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
  MEMORY[0x270FA5388](v28 - 8);
  v484 = (char *)&v426 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  v483 = (uint64_t *)((char *)&v426 - v31);
  MEMORY[0x270FA5388](v32);
  v516 = (char *)&v426 - v33;
  MEMORY[0x270FA5388](v34);
  v509 = (char *)&v426 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset))?);
  MEMORY[0x270FA5388](v36 - 8);
  v515 = (char *)&v426 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x270FA5388](v38 - 8);
  v436 = (char *)&v426 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v446 = (uint64_t)&v426 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v445 = (uint64_t)&v426 - v43;
  MEMORY[0x270FA5388](v44);
  uint64_t v454 = (uint64_t)&v426 - v45;
  MEMORY[0x270FA5388](v46);
  uint64_t v453 = (uint64_t)&v426 - v47;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v48 - 8);
  v451 = (char *)&v426 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v456 = type metadata accessor for __EngineRef();
  uint64_t v50 = *(void *)(v456 - 8);
  MEMORY[0x270FA5388](v456);
  v455 = (char *)&v426 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = (void *)type metadata accessor for URL();
  uint64_t v53 = *(v52 - 1);
  MEMORY[0x270FA5388](v52);
  v435 = (char *)&v426 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v55);
  v426 = (char *)&v426 - v56;
  MEMORY[0x270FA5388](v57);
  v467 = (char *)&v426 - v58;
  MEMORY[0x270FA5388](v59);
  uint64_t v477 = (uint64_t)&v426 - v60;
  MEMORY[0x270FA5388](v61);
  v452 = (char *)&v426 - v62;
  MEMORY[0x270FA5388](v63);
  uint64_t v510 = (uint64_t)&v426 - v64;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CompileSession.ImportSessionData)?);
  MEMORY[0x270FA5388](v65 - 8);
  v514 = (unint64_t *)((char *)&v426 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v67);
  v502 = (uint64_t *)((char *)&v426 - v68);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v69 - 8);
  v492 = (char *)&v426 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v71 = *(void *)(a1 + 48);
  uint64_t v72 = *(void *)(v71 + 16);
  v506 = v52;
  uint64_t v491 = v53;
  uint64_t v475 = a1;
  uint64_t v487 = v72;
  uint64_t v437 = v13;
  if (!v72)
  {
    v295 = *(void (**)(char *, uint64_t, uint64_t, void *))(v53 + 56);
    swift_bridgeObjectRetain();
    v295(v492, 1, 1, v52);
    goto LABEL_200;
  }
  v447 = (uint64_t *)(a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions);
  uint64_t v73 = a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath;
  uint64_t v74 = a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials;
  uint64_t v75 = (uint64_t *)(a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets);
  uint64_t v489 = v71 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
  uint64_t v493 = v71;
  swift_bridgeObjectRetain();
  uint64_t v464 = v74;
  swift_beginAccess();
  v463 = v75;
  swift_beginAccess();
  uint64_t v465 = v73;
  swift_beginAccess();
  uint64_t v76 = v493;
  unint64_t v77 = 0;
  uint64_t v497 = v53 + 16;
  uint64_t v490 = v53 + 56;
  uint64_t v488 = v53 + 48;
  v486 = (void (**)(uint64_t, char *, void *))(v53 + 32);
  unint64_t v498 = v53 + 8;
  v450 = (void (**)(char *, uint64_t))(v50 + 8);
  v443 = (void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v461 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56);
  v462 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  unint64_t v442 = 0x800000023AAAE6F0;
  uint64_t v433 = 0x800000023AAAE270;
  uint64_t v434 = MEMORY[0x263F8EE58] + 8;
  while (1)
  {
    if (v77 >= *(void *)(v76 + 16)) {
      goto LABEL_293;
    }
    uint64_t v78 = v491;
    uint64_t v79 = *(void *)(v491 + 72);
    uint64_t v504 = v77;
    uint64_t v80 = v492;
    v495 = *(void (**)(char *, unint64_t, void *))(v491 + 16);
    v495(v492, v489 + v79 * v77, v52);
    v503 = *(char **)(v78 + 56);
    ((void (*)(char *, void, uint64_t, void *))v503)(v80, 0, 1, v52);
    if ((*(unsigned int (**)(char *, uint64_t, void *))(v78 + 48))(v80, 1, v52) == 1)
    {
LABEL_200:
      swift_bridgeObjectRelease();
      v523 = (void *)MEMORY[0x263F8EE78];
      type metadata accessor for __AssetLoadRequest();
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      unint64_t v521 = __AssetLoadRequest.__allocating_init(serviceLocator:)();
      unint64_t v296 = *v473;
      v297 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v448 + 56);
      v298 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v448 + 48);
      swift_bridgeObjectRetain();
      int v299 = 0;
      unint64_t v300 = 0;
      uint64_t v301 = v505;
      while (1)
      {
        unint64_t v302 = *(void *)(v296 + 16);
        v303 = v514;
        LODWORD(v522) = v299;
        if (v300 == v302)
        {
          uint64_t v304 = 1;
        }
        else
        {
          if (v300 >= v302) {
            goto LABEL_294;
          }
          uint64_t v305 = (uint64_t)&v485[*(int *)(v301 + 48)];
          outlined init with copy of CompileSession.ImportSessionData(v296+ ((*(unsigned __int8 *)(v494 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v494 + 80))+ *(void *)(v494 + 72) * v300, v305, type metadata accessor for CompileSession.ImportSessionData);
          uint64_t v306 = (uint64_t)v514 + *(int *)(v505 + 48);
          unint64_t *v514 = v300;
          uint64_t v301 = v505;
          outlined init with take of CompileSession.ImportSessionData(v305, v306, type metadata accessor for CompileSession.ImportSessionData);
          v303 = v514;
          uint64_t v304 = 0;
          ++v300;
        }
        uint64_t v307 = (uint64_t)v303;
        (*v297)(v303, v304, 1, v301);
        uint64_t v308 = v307;
        v309 = v502;
        outlined init with take of (URL, __REAsset)(v308, (uint64_t)v502, &demangling cache variable for type metadata for (offset: Int, element: CompileSession.ImportSessionData)?);
        if ((*v298)(v309, 1, v301) == 1) {
          break;
        }
        uint64_t v310 = *v309;
        uint64_t v311 = (uint64_t)v309 + *(int *)(v301 + 48);
        uint64_t v312 = v501;
        outlined init with take of CompileSession.ImportSessionData(v311, v501, type metadata accessor for CompileSession.ImportSessionData);
        int v313 = specialized CompileSession.handleLoad(of:with:assetLoadRequest:metadata:)(v312, v310, v521, &v523);
        if (v8)
        {
          swift_release();
          outlined destroy of CompileSession.ImportSessionData(v312, type metadata accessor for CompileSession.ImportSessionData);
          swift_bridgeObjectRelease();
          uint64_t v323 = v523[2];
          if (v323)
          {
            swift_bridgeObjectRetain();
            for (uint64_t i = 0; i != v323; ++i)
              RERelease();
            goto LABEL_284;
          }
LABEL_285:
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_286;
        }
        int v314 = v313;
        outlined destroy of CompileSession.ImportSessionData(v312, type metadata accessor for CompileSession.ImportSessionData);
        int v299 = v314 | v522;
      }
      swift_bridgeObjectRelease();
      uint64_t v315 = RERealityFileWritingParametersCreate();
      swift_beginAccess();
      v316 = v436;
      __REAssetBundle.ExportOptions.deploymentTarget.getter();
      uint64_t v317 = (uint64_t)v316;
      uint64_t v318 = v437;
      v319 = v316;
      uint64_t v320 = v470;
      int v321 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v437 + 48))(v319, 1, v470);
      uint64_t v499 = v8;
      int64_t v507 = v315;
      if (v321 == 1)
      {
        outlined destroy of Any?(v317, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
        swift_endAccess();
      }
      else
      {
        v325 = v430;
        (*(void (**)(char *, uint64_t, uint64_t))(v318 + 32))(v430, v317, v320);
        swift_endAccess();
        v326 = v427;
        __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
        __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
        (*(void (**)(char *, uint64_t))(v428 + 8))(v326, v429);
        LODWORD(v326) = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        uint64_t v327 = v318;
        unint64_t v328 = (unint64_t)__REAssetBundle.ExportOptions.DeploymentTarget.version.getter() >> 32;
        __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        v329.n128_u64[0] = __PAIR64__(v328, v326);
        v329.n128_u32[2] = v330;
        __n128 v520 = v329;
        uint64_t v331 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        MEMORY[0x23ECBB170](v331 + 32, v520);
        swift_release();
        RERealityFileWritingParametersSetMajorVersion();
        (*(void (**)(char *, uint64_t))(v327 + 8))(v325, v320);
      }
      v322 = v506;
      uint64_t v332 = RERealityFileWriterCreateWithParameters();
      RERealityFileWriterCertifyFreeOfChangeSceneActions();
      v527 = 0;
      URL.absoluteString.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int v333 = RERealityFileWriterOpen();
      swift_release();
      if (v333)
      {
        uint64_t v505 = v332;
        uint64_t v504 = RERealityFileAssetWriteReportCreate();
        uint64_t v334 = *v474;
        uint64_t v335 = *(void *)(*v474 + 64);
        uint64_t v508 = *v474 + 64;
        uint64_t v336 = 1 << *(unsigned char *)(v334 + 32);
        uint64_t v337 = -1;
        if (v336 < 64) {
          uint64_t v337 = ~(-1 << v336);
        }
        unint64_t v338 = v337 & v335;
        v514 = (unint64_t *)(v491 + 32);
        v515 = (char *)(v491 + 16);
        unint64_t v513 = v431 + 8;
        v516 = (char *)(v491 + 8);
        v509 = (char *)((unint64_t)(v336 + 63) >> 6);
        v503 = v509 - 1;
        uint64_t v510 = v334;
        swift_bridgeObjectRetain();
        uint64_t v339 = 0;
        v341 = v483;
        v340 = v484;
        if (!v338) {
          goto LABEL_221;
        }
LABEL_219:
        unint64_t v342 = __clz(__rbit64(v338));
        uint64_t v343 = (v338 - 1) & v338;
        unint64_t v344 = v342 | (v339 << 6);
LABEL_220:
        uint64_t v345 = *(void *)(v510 + 56);
        v346 = (void *)(*(void *)(v510 + 48) + 16 * v344);
        uint64_t v347 = v346[1];
        void *v340 = *v346;
        v340[1] = v347;
        uint64_t v348 = v345 + *(void *)(v518 + 72) * v344;
        uint64_t v349 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v348, (uint64_t)v340 + *(int *)(v349 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v349 - 8) + 56))(v340, 0, 1, v349);
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with take of (URL, __REAsset)((uint64_t)v340, (uint64_t)v341, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
          uint64_t v353 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v353 - 8) + 48))(v341, 1, v353) == 1)break; {
          v520.n128_u64[0] = v343;
          }
          uint64_t v522 = v339;
          uint64_t v519 = *v341;
          uint64_t v517 = v341[1];
          uint64_t v354 = *(int *)(v353 + 48);
          v356 = v479;
          uint64_t v355 = v480;
          uint64_t v357 = *(int *)(v480 + 48);
          uint64_t v358 = *(uint64_t *)((char *)v341 + v354 + v357);
          v359 = (void (*)(char *))*v514;
          v360 = v506;
          ((void (*)(char *))*v514)(v479);
          *(void *)&v356[v357] = v358;
          uint64_t v361 = *(int *)(v355 + 48);
          uint64_t v362 = v500;
          ((void (*)(uint64_t, char *, void *))v359)(v500, v356, v360);
          *(void *)(v362 + v361) = v358;
          uint64_t v363 = *(int *)(v355 + 48);
          uint64_t v364 = v511;
          (*(void (**)(uint64_t, uint64_t, void *))v515)(v511, v362, v360);
          *(void *)(v364 + v363) = v358;
          swift_retain();
          v365 = v481;
          dispatch thunk of __REAsset.__handle.getter();
          __AssetRef.__as<A>(_:)();
          (*(void (**)(char *, uint64_t))v513)(v365, v482);
          (*(void (**)(uint64_t, void *))v516)(v364, v360);
          uint64_t v366 = REAssetWithMetadataCreate();
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          REAssetWithMetadataSetLabel();
          swift_release();
          v367 = v523;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v367 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v367[2] + 1, 1, v367);
          }
          unint64_t v369 = v367[2];
          unint64_t v368 = v367[3];
          uint64_t v339 = v522;
          if (v369 >= v368 >> 1) {
            v367 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v368 > 1), v369 + 1, 1, v367);
          }
          v367[2] = v369 + 1;
          v367[v369 + 4] = v366;
          v523 = v367;
          __AssetLoadRequest.add(asset:)();
          swift_release();
          outlined destroy of Any?(v500, &demangling cache variable for type metadata for (URL, __REAsset));
          unint64_t v338 = v520.n128_u64[0];
          v341 = v483;
          v340 = v484;
          if (v520.n128_u64[0]) {
            goto LABEL_219;
          }
LABEL_221:
          uint64_t v350 = v339 + 1;
          if (__OFADD__(v339, 1)) {
            goto LABEL_296;
          }
          if (v350 < (uint64_t)v509)
          {
            unint64_t v351 = *(void *)(v508 + 8 * v350);
            if (v351) {
              goto LABEL_224;
            }
            v339 += 2;
            if (v350 + 1 >= (uint64_t)v509)
            {
              uint64_t v339 = v350;
            }
            else
            {
              unint64_t v351 = *(void *)(v508 + 8 * v339);
              if (v351)
              {
                ++v350;
LABEL_224:
                uint64_t v343 = (v351 - 1) & v351;
                unint64_t v344 = __clz(__rbit64(v351)) + (v350 << 6);
                uint64_t v339 = v350;
                goto LABEL_220;
              }
              if (v350 + 2 < (uint64_t)v509)
              {
                unint64_t v351 = *(void *)(v508 + 8 * (v350 + 2));
                if (v351)
                {
                  v350 += 2;
                  goto LABEL_224;
                }
                uint64_t v370 = v350 + 3;
                if (v350 + 3 >= (uint64_t)v509)
                {
                  uint64_t v339 = v350 + 2;
                }
                else
                {
                  unint64_t v351 = *(void *)(v508 + 8 * v370);
                  if (v351)
                  {
                    v350 += 3;
                    goto LABEL_224;
                  }
                  while (1)
                  {
                    uint64_t v350 = v370 + 1;
                    if (__OFADD__(v370, 1)) {
                      goto LABEL_299;
                    }
                    if (v350 >= (uint64_t)v509) {
                      break;
                    }
                    unint64_t v351 = *(void *)(v508 + 8 * v350);
                    ++v370;
                    if (v351) {
                      goto LABEL_224;
                    }
                  }
                  uint64_t v339 = (uint64_t)v503;
                }
              }
            }
          }
          uint64_t v352 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v352 - 8) + 56))(v340, 1, 1, v352);
          uint64_t v343 = 0;
        }
        swift_release();
        __AssetLoadRequest.waitForCompletion()();
        v374 = v523;
        if (RERealityFileWriterWriteAssetArrayAndDependencies())
        {
          if (*(void *)(*(void *)v512 + 16))
          {
            swift_bridgeObjectRetain();
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            RERealityFileWriterSetConfigurationSetNames();
          }
          if (RERealityFileWriterClose())
          {
            RERelease();
            RERelease();
            RERelease();
            swift_release();
            uint64_t v376 = v374[2];
            if (v376)
            {
              swift_bridgeObjectRetain();
              for (uint64_t j = 0; j != v376; ++j)
                RERelease();
              swift_bridgeObjectRelease();
            }
            return swift_bridgeObjectRelease();
          }
          v399 = v527;
          if (v527)
          {
            type metadata accessor for CFErrorRef(0);
            lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
            id v400 = v399;
            uint64_t v8 = swift_allocError();
            void *v401 = v400;
          }
          else
          {
            uint64_t v419 = type metadata accessor for __RealityFileError();
            lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, MEMORY[0x263F16110]);
            uint64_t v8 = swift_allocError();
            void *v420 = 0xD000000000000018;
            v420[1] = 0x800000023AAAE6D0;
            (*(void (**)(void *, void, uint64_t))(*(void *)(v419 - 8) + 104))(v420, *MEMORY[0x263F16108], v419);
          }
          swift_willThrow();
          RERelease();
          RERelease();
          RERelease();
          swift_release();
          uint64_t v421 = v523[2];
          if (!v421) {
            goto LABEL_285;
          }
          swift_bridgeObjectRetain();
          for (uint64_t k = 0; k != v421; ++k)
            RERelease();
        }
        else
        {
          id v379 = (id)RERealityFileAssetWriteReportGetError();
          if (v379)
          {
            id v380 = v379;
            type metadata accessor for CFErrorRef(0);
            lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
            uint64_t v8 = swift_allocError();
            void *v381 = v380;
          }
          else
          {
            uint64_t v8 = 0;
          }
          v402 = v506;
          v403 = v426;
          (*(void (**)(char *, unint64_t, void *))v515)(v426, v472, v506);
          if (!v8)
          {
            uint64_t v404 = type metadata accessor for __RealityFileError();
            lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, MEMORY[0x263F16110]);
            uint64_t v8 = swift_allocError();
            v406 = v405;
            *(void *)&long long v525 = 0;
            *((void *)&v525 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(41);
            swift_bridgeObjectRelease();
            *(void *)&long long v525 = 0xD000000000000026;
            *((void *)&v525 + 1) = 0x800000023AAAE6A0;
            v407._countAndFlagsBits = URL.absoluteString.getter();
            String.append(_:)(v407);
            v402 = v506;
            swift_bridgeObjectRelease();
            v408._countAndFlagsBits = 46;
            v408._object = (void *)0xE100000000000000;
            String.append(_:)(v408);
            v403 = v426;
            uint64_t v409 = *((void *)&v525 + 1);
            void *v406 = v525;
            v406[1] = v409;
            (*(void (**)(void *, void, uint64_t))(*(void *)(v404 - 8) + 104))(v406, *MEMORY[0x263F16108], v404);
          }
          (*(void (**)(char *, void *))v516)(v403, v402);
          swift_willThrow();
          RERelease();
          RERelease();
          RERelease();
          swift_release();
          uint64_t v410 = v523[2];
          if (!v410) {
            goto LABEL_285;
          }
          swift_bridgeObjectRetain();
          for (uint64_t m = 0; m != v410; ++m)
            RERelease();
        }
      }
      else
      {
        v371 = v527;
        if (v527)
        {
          type metadata accessor for CFErrorRef(0);
          lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
          id v372 = v371;
          uint64_t v8 = swift_allocError();
          void *v373 = v372;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v388 = v491;
        v389 = v435;
        (*(void (**)(char *, unint64_t, void *))(v491 + 16))(v435, v472, v322);
        if (!v8)
        {
          uint64_t v390 = type metadata accessor for __RealityFileError();
          lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, MEMORY[0x263F16110]);
          uint64_t v391 = swift_allocError();
          v393 = v392;
          *(void *)&long long v525 = 0;
          *((void *)&v525 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(41);
          swift_bridgeObjectRelease();
          *(void *)&long long v525 = 0xD000000000000026;
          *((void *)&v525 + 1) = 0x800000023AAAE6A0;
          v394._countAndFlagsBits = URL.absoluteString.getter();
          String.append(_:)(v394);
          uint64_t v8 = v391;
          v389 = v435;
          swift_bridgeObjectRelease();
          v395._countAndFlagsBits = 46;
          v395._object = (void *)0xE100000000000000;
          String.append(_:)(v395);
          uint64_t v388 = v491;
          uint64_t v396 = *((void *)&v525 + 1);
          void *v393 = v525;
          v393[1] = v396;
          (*(void (**)(void *, void, uint64_t))(*(void *)(v390 - 8) + 104))(v393, *MEMORY[0x263F16108], v390);
        }
        (*(void (**)(char *, void *))(v388 + 8))(v389, v322);
        swift_willThrow();
        RERelease();
        RERelease();
        swift_release();
        uint64_t v397 = v523[2];
        if (!v397) {
          goto LABEL_285;
        }
        swift_bridgeObjectRetain();
        for (uint64_t n = 0; n != v397; ++n)
          RERelease();
      }
LABEL_284:
      swift_bridgeObjectRelease();
      goto LABEL_285;
    }
    (*v486)(v510, v80, v52);
    if ((URL.isFileURL.getter() & 1) == 0) {
      goto LABEL_26;
    }
    uint64_t v499 = v8;
    if (one-time initialization token for supportedFilePathExtensions != -1) {
      swift_once();
    }
    uint64_t v81 = static USDImportService.supportedFilePathExtensions;
    uint64_t v82 = *(void *)(static USDImportService.supportedFilePathExtensions + 16);
    if (v82)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v83 = (uint64_t *)(v81 + 40);
      unint64_t v84 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v86 = *v83;
        if (*v83)
        {
          uint64_t v87 = *(v83 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84[2] + 1, 1, v84);
          }
          unint64_t v89 = v84[2];
          unint64_t v88 = v84[3];
          if (v89 >= v88 >> 1) {
            unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v88 > 1), v89 + 1, 1, v84);
          }
          v84[2] = v89 + 1;
          uint64_t v85 = &v84[2 * v89];
          v85[4] = v87;
          v85[5] = v86;
        }
        v83 += 2;
        --v82;
      }
      while (v82);
      swift_bridgeObjectRelease_n();
      uint64_t v52 = v506;
    }
    else
    {
      unint64_t v84 = (void *)MEMORY[0x263F8EE78];
    }
    URL.pathExtension.getter();
    Swift::String v90 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v91 = v84[2];
    if (!v91)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    if ((v84[4] != v90._countAndFlagsBits || (void *)v84[5] != v90._object)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v91 == 1) {
        goto LABEL_24;
      }
      uint64_t v92 = (void **)(v84 + 7);
      uint64_t v93 = 1;
      while (1)
      {
        uint64_t v94 = v93 + 1;
        if (__OFADD__(v93, 1)) {
          goto LABEL_295;
        }
        BOOL v95 = *(v92 - 1) == (void *)v90._countAndFlagsBits && *v92 == v90._object;
        if (v95 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v92 += 2;
        ++v93;
        if (v94 == v91)
        {
          swift_bridgeObjectRelease();
          uint64_t v52 = v506;
LABEL_25:
          swift_bridgeObjectRelease();
          uint64_t v8 = v499;
LABEL_26:
          (*(void (**)(uint64_t, void *))v498)(v510, v52);
          goto LABEL_27;
        }
      }
      uint64_t v52 = v506;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v96 = v510;
    URL._bridgeToObjectiveC()(v97);
    uint64_t v99 = v98;
    unint64_t v100 = (void *)RIOPxrUsdStageCreateWithFileURL();

    uint64_t v8 = v499;
    if (!v100)
    {
      (*(void (**)(uint64_t, void *))v498)(v96, v52);
      goto LABEL_27;
    }
    uint64_t v101 = v447;
    swift_beginAccess();
    uint64_t v102 = *v101;
    if (*(void *)(v102 + 16)
      && (unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, v433), (v104 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v102 + 56) + 32 * v103, (uint64_t)&v525);
    }
    else
    {
      long long v525 = 0u;
      long long v526 = 0u;
    }
    swift_endAccess();
    if (*((void *)&v526 + 1))
    {
      if (swift_dynamicCast())
      {
        if (v523 != 1) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v525, &demangling cache variable for type metadata for Any?);
    }
    if ((CompileSession.CompilationOption_RequireIncludeMetadata_Default.getter() & 1) == 0) {
      goto LABEL_52;
    }
LABEL_51:
    char v105 = (void *)RIOPxrTfTokenCreateWithCString();
    RealityKitOptionint Bool = RIOPxrUsdUtilsStageGetRealityKitOptionBool();

    if ((RealityKitOptionBool & 1) == 0)
    {
      (*(void (**)(uint64_t, void *))v498)(v510, v52);

      goto LABEL_27;
    }
LABEL_52:
    type metadata accessor for Stage();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v100;
    id v107 = v100;
    id v108 = String.count.getter() < 1
         ? (id)RIOPxrTfTokenEmpty()
         : (id)RIOPxrTfTokenCreateWithCString();
    uint64_t v109 = v108;
    unint64_t v110 = (void *)RIOPxrUsdStageCopyRootLayer();
    unint64_t v111 = (void *)RIOPxrSdfLayerCopyCustomLayerDataValue();

    if (v111)
    {
      LOBYTE(v525) = 0;
      int Bool = RIOPxrVtValueGetBool();
      char v113 = v525;
      if (!Bool) {
        char v113 = 2;
      }
      LOBYTE(v523) = v113;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
      if (swift_dynamicCast())
      {
        char v114 = v525;
      }
      else
      {
        char v114 = 2;
        LOBYTE(v525) = 2;
      }

      int v115 = v114 & 1;
    }
    else
    {

      int v115 = 0;
    }
    uint64_t v116 = (void *)RIOPxrUsdStageCopyDefaultPrim();
    unint64_t IsValid = RIOPxrUsdObjectIsValid();

    if (IsValid)
    {
      uint64_t v118 = (void *)RIOPxrUsdStageCopyDefaultPrim();
      unint64_t IsValid = RIOPxrUsdPrimCopyVariantSets();

      type metadata accessor for VariantSets();
      uint64_t v517 = swift_allocObject();
      *(void *)(v517 + 16) = IsValid;
      uint64_t v119 = RIOPxrUsdVariantSetsCopySetNames();
      if (!v119)
      {
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        __break(1u);
LABEL_306:
        __break(1u);
LABEL_307:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_308:
        *(void *)unint64_t IsValid = v525;
        uint64_t result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      unint64_t IsValid = v119;
      *(void *)&long long v525 = 0;
      static Array._forceBridgeFromObjectiveC(_:result:)();
      uint64_t v120 = v525;
      if (!(void)v525) {
        goto LABEL_304;
      }
    }
    else
    {
      uint64_t v517 = 0;
      uint64_t v120 = MEMORY[0x263F8EE78];
    }
    uint64_t v444 = v498 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v468 = v107;
    if (!v115 || !*(void *)(v120 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }
    if (*(void *)(*(void *)v512 + 16)) {
      goto LABEL_290;
    }
    id v107 = (id)v517;
    if (v517)
    {
      uint64_t v121 = RIOPxrUsdVariantSetsCopySetNames();
      if (!v121) {
        goto LABEL_305;
      }
      unint64_t IsValid = v121;
      *(void *)&long long v525 = 0;
      static Array._forceBridgeFromObjectiveC(_:result:)();
      uint64_t v122 = v525;
      if (!(void)v525) {
        goto LABEL_306;
      }
    }
    else
    {
      uint64_t v122 = MEMORY[0x263F8EE78];
    }
    uint64_t v168 = *(void *)(v122 + 16);
    uint64_t v522 = v122;
    if (v168)
    {
      uint64_t v169 = v122 + 40;
      char v170 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v107)
        {
          String.utf8CString.getter();
          swift_bridgeObjectRetain();
          swift_retain();
          v171 = (void *)RIOPxrUsdVariantSetsCopyVariantSet();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v172 = RIOPxrUsdVariantSetCopyVariantNames();
          if (!v172) {
            goto LABEL_301;
          }
          v173 = (void *)v172;
          *(void *)&long long v525 = 0;
          static Array._forceBridgeFromObjectiveC(_:result:)();
          uint64_t v174 = v525;
          if (!(void)v525) {
            goto LABEL_302;
          }

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v170 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v170[2] + 1, 1, v170);
          }
          unint64_t v176 = v170[2];
          unint64_t v175 = v170[3];
          if (v176 >= v175 >> 1) {
            char v170 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v175 > 1), v176 + 1, 1, v170);
          }
          v170[2] = v176 + 1;
          v170[v176 + 4] = v174;
          id v107 = (id)v517;
          swift_release();
        }
        v169 += 16;
        if (!--v168) {
          goto LABEL_107;
        }
      }
    }
    char v170 = (void *)MEMORY[0x263F8EE78];
LABEL_107:
    swift_bridgeObjectRelease();
    uint64_t v177 = specialized static CompileSession.cartesianProduct(of:)((uint64_t)v170);
    swift_bridgeObjectRelease();
    uint64_t v439 = *(void *)(v177 + 16);
    if (!v439) {
      break;
    }
    *(void *)uint64_t v512 = v120;
    swift_bridgeObjectRelease();
    uint64_t v440 = type metadata accessor for __ServiceLocator();
    uint64_t v441 = v177 + 32;
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    unint64_t v178 = 0;
    uint64_t v8 = v499;
    uint64_t v438 = v177;
    do
    {
      if (v178 >= *(void *)(v177 + 16)) {
        goto LABEL_297;
      }
      uint64_t v499 = v8;
      unint64_t v476 = v178;
      uint64_t v179 = *(void *)(v441 + 8 * v178);
      uint64_t v180 = *(void *)(v179 + 16);
      uint64_t v508 = v179;
      if (v180)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v181 = 0;
        char v182 = (void **)(v179 + 40);
        unint64_t v183 = 0xE000000000000000;
        do
        {
          uint64_t v184 = (uint64_t)*(v182 - 1);
          v185 = *v182;
          uint64_t v186 = HIBYTE(v183) & 0xF;
          if ((v183 & 0x2000000000000000) == 0) {
            uint64_t v186 = v181 & 0xFFFFFFFFFFFFLL;
          }
          if (v186) {
            uint64_t v187 = 95;
          }
          else {
            uint64_t v187 = 0;
          }
          if (v186) {
            char v188 = (void *)0xE100000000000000;
          }
          else {
            char v188 = (void *)0xE000000000000000;
          }
          *(void *)&long long v525 = v181;
          *((void *)&v525 + 1) = v183;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v189._countAndFlagsBits = v187;
          v189._object = v188;
          String.append(_:)(v189);
          swift_bridgeObjectRelease();
          id v107 = (id)*((void *)&v525 + 1);
          swift_bridgeObjectRetain();
          v190._countAndFlagsBits = v184;
          v190._object = v185;
          String.append(_:)(v190);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v183 = *((void *)&v525 + 1);
          uint64_t v181 = v525;
          v182 += 2;
          --v180;
        }
        while (v180);
        unint64_t v521 = v525;
        uint64_t v179 = v508;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v521 = 0;
        unint64_t v183 = 0xE000000000000000;
      }
      unint64_t v191 = *(void *)(*(void *)v512 + 16);
      uint64_t v192 = v517;
      if (v191)
      {
        if (v191 <= *(void *)(v179 + 16))
        {
          uint64_t v52 = 0;
          unint64_t v193 = 0;
          uint64_t v522 = *(void *)(*(void *)v512 + 16);
          while (v193 < *(void *)(*(void *)v512 + 16))
          {
            if (v192)
            {
              String.utf8CString.getter();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v107 = (id)RIOPxrUsdVariantSetsCopyVariantSet();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              String.utf8CString.getter();
              RIOPxrUsdVariantSetSetVariantSelection();

              uint64_t v192 = v517;
              swift_bridgeObjectRelease();
              swift_release();
              unint64_t v191 = v522;
            }
            ++v193;
            v52 += 2;
            if (v191 == v193) {
              goto LABEL_130;
            }
          }
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v423 = type metadata accessor for __RealityFileError();
          lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, MEMORY[0x263F16110]);
          uint64_t v8 = swift_allocError();
          void *v424 = 0xD000000000000053;
          v424[1] = 0x800000023AAAE710;
          (*(void (**)(void *, void, uint64_t))(*(void *)(v423 - 8) + 104))(v424, *MEMORY[0x263F16108], v423);
          swift_willThrow();
          uint64_t v425 = inited;
          swift_setDeallocating();

          swift_release();
          v417 = *(void (**)(uint64_t, void *))v498;
          uint64_t v418 = v510;
          goto LABEL_291;
        }
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
      }
LABEL_130:
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      char v194 = v455;
      dispatch thunk of __Engine.__coreEngine.getter();
      swift_release();
      __AssetRef.__as<A>(_:)();
      (*v450)(v194, v456);
      uint64_t v195 = RIOImportSessionCreateWithStage();
      if (!v195
        || (char v196 = (void *)v195,
            uint64_t v197 = type metadata accessor for Entity(),
            type metadata accessor for ImportSession(0),
            swift_allocObject(),
            (v478 = specialized ImportSession.init<A>(core:entityType:)(v196, v197)) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v382 = v510;
        uint64_t v383 = URL.path.getter();
        uint64_t v385 = v384;
        lazy protocol witness table accessor for type CompileSession.LoadError and conformance CompileSession.LoadError();
        uint64_t v8 = swift_allocError();
        *(void *)uint64_t v386 = v383;
        *(void *)(v386 + 8) = v385;
        *(unsigned char *)(v386 + 16) = 0;
        swift_willThrow();
        uint64_t v387 = inited;
        swift_setDeallocating();

        swift_release();
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))v498)(v382, v506);
        goto LABEL_286;
      }
      char v198 = v452;
      URL.deletingPathExtension()();
      uint64_t v199 = URL.lastPathComponent.getter();
      uint64_t v201 = v200;
      char v202 = *(void (**)(uint64_t, void *))v498;
      (*(void (**)(char *, void *))v498)(v198, v506);
      *(void *)&long long v525 = v199;
      *((void *)&v525 + 1) = v201;
      swift_bridgeObjectRetain();
      v203._countAndFlagsBits = 95;
      v203._object = (void *)0xE100000000000000;
      String.append(_:)(v203);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v204._countAndFlagsBits = v521;
      v204._object = (void *)v183;
      String.append(_:)(v204);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v205._countAndFlagsBits = 46;
      v205._object = (void *)0xE100000000000000;
      String.append(_:)(v205);
      swift_bridgeObjectRelease();
      long long v206 = v525;
      uint64_t v207 = URL.pathExtension.getter();
      v209 = v208;
      long long v525 = v206;
      swift_bridgeObjectRetain();
      v210._countAndFlagsBits = v207;
      v210._object = v209;
      String.append(_:)(v210);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v211 = v467;
      URL.deletingLastPathComponent()();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      v460 = v202;
      v202((uint64_t)v211, v506);
      v212 = *(void **)v465;
      uint64_t v213 = *(void *)(v465 + 8);
      swift_bridgeObjectRetain();
      uint64_t v214 = URL.path.getter();
      unint64_t v216 = v215;
      *(void *)&long long v525 = v214;
      *((void *)&v525 + 1) = v215;
      v523 = v212;
      uint64_t v524 = v213;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      if (BidirectionalCollection<>.starts<A>(with:)())
      {
        *(void *)&long long v525 = v214;
        *((void *)&v525 + 1) = v216;
        v523 = v212;
        uint64_t v524 = v213;
        uint64_t v217 = type metadata accessor for Locale();
        uint64_t v218 = (uint64_t)v451;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v217 - 8) + 56))(v451, 1, 1, v217);
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.range<A>(of:options:range:locale:)();
        unint64_t v220 = v219;
        char v222 = v221;
        outlined destroy of Any?(v218, &demangling cache variable for type metadata for Locale?);
        if (v222) {
          unint64_t v223 = 15;
        }
        else {
          unint64_t v223 = v220;
        }
        swift_bridgeObjectRetain();
        unint64_t v224 = specialized Collection.subscript.getter(v223, v214, v216);
        uint64_t v226 = v225;
        uint64_t v228 = v227;
        uint64_t v230 = v229;
        swift_bridgeObjectRelease();
        uint64_t v458 = MEMORY[0x23ECB9FE0](v224, v226, v228, v230);
        unint64_t v232 = v231;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v459 = v232;
      }
      else
      {
        uint64_t v458 = v214;
        unint64_t v459 = v216;
        swift_bridgeObjectRelease();
      }
      v233 = v474;
      uint64_t v52 = v509;
      RIOPxrUsdStageSetIncludeUnusedMaterials();
      uint64_t v234 = v454;
      specialized Collection.first.getter(*v463, v454);
      uint64_t v235 = v470;
      int v236 = (*v462)(v234, 1, v470);
      uint64_t v237 = v453;
      if (v236 == 1)
      {
        CompileSession.DeploymentTarget_Default.getter(v453);
        outlined destroy of Any?(v234, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
      }
      else
      {
        (*v443)(v453, v234, v235);
      }
      ++v476;
      (*v461)(v237, 0, 1, v235);
      uint64_t v238 = (uint64_t)v478;
      uint64_t v239 = (uint64_t)v478 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
      swift_beginAccess();
      outlined assign with take of (URL, __REAsset)(v237, v239, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
      swift_endAccess();
      swift_beginAccess();
      RIOImportSessionUpdateSynchronouslyOnEngineQueue();
      unint64_t v240 = CompileSession.postOperationsAndExtraAssets(for:with:)(v238, v477);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v242 = (void *)*v233;
      *(void *)&long long v525 = *v233;
      uint64_t *v233 = 0x8000000000000000;
      uint64_t v243 = *(void *)(v240 + 64);
      unint64_t v496 = v240 + 64;
      uint64_t v244 = 1 << *(unsigned char *)(v240 + 32);
      if (v244 < 64) {
        uint64_t v245 = ~(-1 << v244);
      }
      else {
        uint64_t v245 = -1;
      }
      unint64_t v246 = v245 & v243;
      int64_t v507 = (unint64_t)(v244 + 63) >> 6;
      int64_t v432 = v507 - 1;
      unint64_t v513 = v240;
      swift_bridgeObjectRetain();
      unint64_t v247 = 0;
      while (1)
      {
        uint64_t v250 = (uint64_t)v516;
        LODWORD(v522) = isUniquelyReferenced_nonNull_native;
        if (v246)
        {
          unint64_t v521 = (v246 - 1) & v246;
          v520.n128_u64[0] = v247;
          unint64_t v251 = __clz(__rbit64(v246)) | (v247 << 6);
LABEL_149:
          v252 = (uint64_t *)(*(void *)(v513 + 48) + 16 * v251);
          uint64_t v254 = *v252;
          uint64_t v253 = v252[1];
          uint64_t v255 = *(void *)(v513 + 56) + *(void *)(v518 + 72) * v251;
          uint64_t v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v255, (uint64_t)v52 + *(int *)(v256 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
          *uint64_t v52 = v254;
          v52[1] = v253;
          (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v256 - 8) + 56))(v52, 0, 1, v256);
          swift_bridgeObjectRetain();
          uint64_t v250 = (uint64_t)v516;
          goto LABEL_165;
        }
        int64_t v257 = v247 + 1;
        if (__OFADD__(v247, 1))
        {
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
          goto LABEL_298;
        }
        if (v257 < v507)
        {
          unint64_t v258 = *(void *)(v496 + 8 * v257);
          if (v258) {
            goto LABEL_153;
          }
          unint64_t v259 = v247 + 2;
          if ((uint64_t)(v247 + 2) >= v507) {
            goto LABEL_191;
          }
          unint64_t v258 = *(void *)(v496 + 8 * v259);
          if (v258) {
            goto LABEL_156;
          }
          v247 += 3;
          if (v257 + 2 >= v507) {
            goto LABEL_186;
          }
          unint64_t v258 = *(void *)(v496 + 8 * v247);
          if (v258) {
            goto LABEL_159;
          }
          if (v257 + 3 < v507)
          {
            unint64_t v258 = *(void *)(v496 + 8 * (v257 + 3));
            if (v258)
            {
              v257 += 3;
              goto LABEL_153;
            }
            unint64_t v259 = v257 + 4;
            if (v257 + 4 >= v507)
            {
              v520.n128_u64[0] = v257 + 3;
              goto LABEL_164;
            }
            unint64_t v258 = *(void *)(v496 + 8 * v259);
            if (v258)
            {
LABEL_156:
              int64_t v257 = v259;
              goto LABEL_153;
            }
            unint64_t v247 = v257 + 5;
            if (v257 + 5 < v507)
            {
              unint64_t v258 = *(void *)(v496 + 8 * v247);
              if (!v258)
              {
                while (1)
                {
                  int64_t v257 = v247 + 1;
                  if (__OFADD__(v247, 1)) {
                    goto LABEL_300;
                  }
                  if (v257 >= v507) {
                    break;
                  }
                  unint64_t v258 = *(void *)(v496 + 8 * v257);
                  ++v247;
                  if (v258) {
                    goto LABEL_153;
                  }
                }
                int64_t v257 = v432;
LABEL_191:
                v520.n128_u64[0] = v257;
                goto LABEL_164;
              }
LABEL_159:
              int64_t v257 = v247;
LABEL_153:
              unint64_t v521 = (v258 - 1) & v258;
              unint64_t v251 = __clz(__rbit64(v258)) + (v257 << 6);
              v520.n128_u64[0] = v257;
              goto LABEL_149;
            }
LABEL_186:
            v520.n128_u64[0] = v259;
            goto LABEL_164;
          }
        }
        v520.n128_u64[0] = v247;
LABEL_164:
        uint64_t v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v260 - 8) + 56))(v52, 1, 1, v260);
        unint64_t v521 = 0;
LABEL_165:
        outlined init with take of (URL, __REAsset)((uint64_t)v52, v250, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
        uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v261 - 8) + 48))(v250, 1, v261) == 1)
        {
          uint64_t v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
          v263 = (id *)v515;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v262 - 8) + 56))(v515, 1, 1, v262);
        }
        else
        {
          uint64_t v264 = v250 + *(int *)(v261 + 48);
          v265 = (void **)v250;
          uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
          v263 = (id *)v515;
          v268 = *v265;
          v267 = v265[1];
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v264, (uint64_t)&v515[*(int *)(v266 + 48)], &demangling cache variable for type metadata for (URL, __REAsset));
          id *v263 = v268;
          v263[1] = v267;
          swift_bridgeObjectRetain();
          outlined destroy of Any?((uint64_t)v265, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          v269 = *(void (**)(id *, void, uint64_t, uint64_t))(*(void *)(v266 - 8) + 56);
          uint64_t v270 = v266;
          uint64_t v52 = v509;
          v269(v263, 0, 1, v270);
        }
        uint64_t v271 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
        if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v271 - 8) + 48))(v263, 1, v271) == 1) {
          break;
        }
        id v107 = *v263;
        uint64_t v272 = (uint64_t)v263[1];
        outlined init with take of (URL, __REAsset)((uint64_t)v263 + *(int *)(v271 + 48), v519, &demangling cache variable for type metadata for (URL, __REAsset));
        unint64_t IsValid = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v107, v272);
        uint64_t v274 = v242[2];
        BOOL v275 = (v273 & 1) == 0;
        uint64_t v276 = v274 + v275;
        if (__OFADD__(v274, v275))
        {
          __break(1u);
          goto LABEL_288;
        }
        char v277 = v273;
        if (v242[3] >= v276)
        {
          if (v522)
          {
            v242 = (void *)v525;
            if (v273) {
              goto LABEL_145;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v242 = (void *)v525;
            if (v277) {
              goto LABEL_145;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v276, v522 & 1);
          unint64_t v278 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v107, v272);
          if ((v277 & 1) != (v279 & 1)) {
            goto LABEL_307;
          }
          unint64_t IsValid = v278;
          v242 = (void *)v525;
          if (v277)
          {
LABEL_145:
            unint64_t v248 = *(void *)(v518 + 72) * IsValid;
            uint64_t v249 = v511;
            outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v242[7] + v248, v511, &demangling cache variable for type metadata for (URL, __REAsset));
            outlined destroy of Any?(v519, &demangling cache variable for type metadata for (URL, __REAsset));
            swift_bridgeObjectRelease();
            outlined assign with take of (URL, __REAsset)(v249, v242[7] + v248, &demangling cache variable for type metadata for (URL, __REAsset));
            goto LABEL_146;
          }
        }
        v242[(IsValid >> 6) + 8] |= 1 << IsValid;
        v280 = (void *)(v242[6] + 16 * IsValid);
        void *v280 = v107;
        v280[1] = v272;
        outlined init with take of (URL, __REAsset)(v519, v242[7] + *(void *)(v518 + 72) * IsValid, &demangling cache variable for type metadata for (URL, __REAsset));
        uint64_t v281 = v242[2];
        BOOL v282 = __OFADD__(v281, 1);
        uint64_t v283 = v281 + 1;
        if (v282) {
          goto LABEL_289;
        }
        v242[2] = v283;
LABEL_146:
        int isUniquelyReferenced_nonNull_native = 1;
        unint64_t v247 = v520.n128_u64[0];
        unint64_t v246 = v521;
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t *v474 = (uint64_t)v242;
      swift_bridgeObjectRelease();
      uint64_t v284 = v466;
      v285 = v471;
      uint64_t v52 = v506;
      v286 = (void (*)(char *, uint64_t, void *))v495;
      v495((char *)v471 + *(int *)(v466 + 28), v472, v506);
      v286((char *)v285 + *(int *)(v284 + 32), v477, v52);
      uint64_t v287 = v458;
      char *v285 = v478;
      v285[1] = v287;
      uint64_t v288 = v508;
      v285[2] = v459;
      v285[3] = v288;
      v289 = v473;
      unint64_t v290 = *v473;
      swift_retain();
      char v291 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v289 = v290;
      if ((v291 & 1) == 0)
      {
        unint64_t v290 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v290 + 16) + 1, 1, v290);
        unint64_t *v473 = v290;
      }
      uint64_t v8 = v499;
      id v107 = v468;
      v167 = v460;
      unint64_t v293 = *(void *)(v290 + 16);
      unint64_t v292 = *(void *)(v290 + 24);
      if (v293 >= v292 >> 1)
      {
        unint64_t v290 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v292 > 1, v293 + 1, 1, v290);
        unint64_t *v473 = v290;
      }
      *(void *)(v290 + 16) = v293 + 1;
      outlined init with take of CompileSession.ImportSessionData((uint64_t)v471, v290+ ((*(unsigned __int8 *)(v494 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v494 + 80))+ *(void *)(v494 + 72) * v293, type metadata accessor for CompileSession.ImportSessionData);
      swift_release();
      v167(v477, v52);
      uint64_t v177 = v438;
      unint64_t v178 = v476;
    }
    while (v476 != v439);
    uint64_t v294 = inited;
    swift_setDeallocating();

    swift_bridgeObjectRelease();
    swift_release();
LABEL_93:
    v167(v510, v52);
LABEL_27:
    unint64_t v77 = v504 + 1;
    uint64_t v76 = v493;
    if (v504 + 1 == v487)
    {
      ((void (*)(char *, uint64_t, uint64_t, void *))v503)(v492, 1, 1, v52);
      goto LABEL_200;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v499;
  uint64_t v52 = v506;
  id v107 = v468;
LABEL_77:
  uint64_t v123 = v467;
  uint64_t v124 = v510;
  v495(v467, v510, v52);
  uint64_t v125 = type metadata accessor for Entity();
  unint64_t v126 = specialized ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:)(v123, 0, 0, v125);
  if (v126)
  {
    uint64_t v127 = (uint64_t)v126;
    RIOPxrUsdStageSetIncludeUnusedMaterials();
    uint64_t v128 = v446;
    specialized Collection.first.getter(*v463, v446);
    uint64_t v129 = v470;
    int v130 = (*v462)(v128, 1, v470);
    uint64_t v499 = v8;
    uint64_t v131 = v445;
    if (v130 == 1)
    {
      CompileSession.DeploymentTarget_Default.getter(v445);
      outlined destroy of Any?(v128, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    }
    else
    {
      (*v443)(v445, v128, v129);
    }
    (*v461)(v131, 0, 1, v129);
    uint64_t v132 = v127 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
    swift_beginAccess();
    outlined assign with take of (URL, __REAsset)(v131, v132, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_endAccess();
    uint64_t v133 = *(void **)v465;
    uint64_t v134 = *(void *)(v465 + 8);
    swift_bridgeObjectRetain();
    uint64_t v135 = URL.path.getter();
    unint64_t v137 = v136;
    *(void *)&long long v525 = v135;
    *((void *)&v525 + 1) = v136;
    v523 = v133;
    uint64_t v524 = v134;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    if (BidirectionalCollection<>.starts<A>(with:)())
    {
      *(void *)&long long v525 = v135;
      *((void *)&v525 + 1) = v137;
      v523 = v133;
      uint64_t v524 = v134;
      uint64_t v138 = type metadata accessor for Locale();
      uint64_t v139 = (uint64_t)v451;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v451, 1, 1, v138);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      unint64_t v141 = v140;
      char v143 = v142;
      outlined destroy of Any?(v139, &demangling cache variable for type metadata for Locale?);
      if (v143) {
        unint64_t v144 = 15;
      }
      else {
        unint64_t v144 = v141;
      }
      swift_bridgeObjectRetain();
      unint64_t v145 = specialized Collection.subscript.getter(v144, v135, v137);
      uint64_t v147 = v146;
      uint64_t v149 = v148;
      uint64_t v151 = v150;
      swift_bridgeObjectRelease();
      uint64_t v135 = MEMORY[0x23ECB9FE0](v145, v147, v149, v151);
      unint64_t v153 = v152;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v137 = v153;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v154 = v466;
    uint64_t v155 = v457;
    char v156 = v506;
    uint64_t v157 = (void (*)(char *, uint64_t, void *))v495;
    v495((char *)v457 + *(int *)(v466 + 28), v472, v506);
    v157((char *)v155 + *(int *)(v154 + 32), v510, v156);
    uint64_t *v155 = v127;
    v155[1] = v135;
    v155[2] = v137;
    v155[3] = MEMORY[0x263F8EE78];
    uint64_t v158 = v473;
    unint64_t v159 = *v473;
    swift_retain();
    char v160 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v158 = v159;
    uint64_t v161 = v499;
    if ((v160 & 1) == 0)
    {
      unint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v159 + 16) + 1, 1, v159);
      unint64_t *v473 = v159;
    }
    id v162 = v468;
    unint64_t v164 = *(void *)(v159 + 16);
    unint64_t v163 = *(void *)(v159 + 24);
    uint64_t v52 = v506;
    if (v164 >= v163 >> 1)
    {
      unint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v163 > 1, v164 + 1, 1, v159);
      unint64_t *v473 = v159;
    }
    *(void *)(v159 + 16) = v164 + 1;
    outlined init with take of CompileSession.ImportSessionData((uint64_t)v457, v159+ ((*(unsigned __int8 *)(v494 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v494 + 80))+ *(void *)(v494 + 72) * v164, type metadata accessor for CompileSession.ImportSessionData);
    swift_beginAccess();
    RIOImportSessionUpdateSynchronouslyOnEngineQueue();
    unint64_t v165 = CompileSession.postOperationsAndExtraAssets(for:with:)(v127, v510);
    unint64_t IsValid = (unint64_t)v474;
    char v166 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v525 = *(void *)IsValid;
    *(void *)unint64_t IsValid = 0x8000000000000000;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v165, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v166, (uint64_t)&v525);
    if (!v161)
    {
      uint64_t v8 = 0;
      *(void *)unint64_t IsValid = v525;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
      v167 = *(void (**)(uint64_t, void *))v498;
      goto LABEL_93;
    }
    goto LABEL_308;
  }
  swift_bridgeObjectRelease();
  uint64_t v412 = URL.path.getter();
  uint64_t v414 = v413;
  lazy protocol witness table accessor for type CompileSession.LoadError and conformance CompileSession.LoadError();
  uint64_t v8 = swift_allocError();
  *(void *)uint64_t v415 = v412;
  *(void *)(v415 + 8) = v414;
  *(unsigned char *)(v415 + 16) = 0;
  swift_willThrow();
  uint64_t v416 = inited;
  swift_setDeallocating();

  swift_release();
  v417 = *(void (**)(uint64_t, void *))v498;
  uint64_t v418 = v124;
LABEL_291:
  uint64_t result = ((uint64_t (*)(uint64_t, void *))v417)(v418, v52);
LABEL_286:
  uint64_t *v449 = v8;
  return result;
}

uint64_t CompileSession.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions;
  uint64_t v2 = type metadata accessor for __REAssetBundle.ExportOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CompileSession.__deallocating_deinit()
{
  CompileSession.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v57 = v9;
  uint64_t v12 = (void *)*a5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a4)
    {
      uint64_t v21 = (void *)*a5;
      if (v13) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v21 = (void *)*a5;
      if (v18) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    uint64_t v27 = (uint64_t *)(v21[6] + 16 * v14);
    uint64_t *v27 = v10;
    v27[1] = v11;
    *(void *)(v21[7] + 8 * v14) = v57;
    uint64_t v28 = v21[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v30;
LABEL_13:
    uint64_t v31 = specialized LazyMapSequence.Iterator.next()();
    if (v32)
    {
      uint64_t v34 = v31;
      uint64_t v35 = v32;
      uint64_t v36 = v33;
      do
      {
        uint64_t v44 = (void *)*a5;
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        uint64_t v47 = v44[2];
        BOOL v48 = (v46 & 1) == 0;
        BOOL v29 = __OFADD__(v47, v48);
        uint64_t v49 = v47 + v48;
        if (v29) {
          goto LABEL_24;
        }
        char v50 = v46;
        if (v44[3] < v49)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, 1);
          unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
          if ((v50 & 1) != (v51 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v52 = (void *)*a5;
        if (v50)
        {
          uint64_t v37 = 8 * v45;
          uint64_t v38 = *(void *)(v52[7] + 8 * v45);
          swift_bridgeObjectRetain();
          specialized Set.union<A>(_:)(v36, v38);
          uint64_t v40 = v39;
          swift_bridgeObjectRelease();
          uint64_t v41 = v52[7];
          swift_bridgeObjectRelease();
          *(void *)(v41 + v37) = v40;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          uint64_t v53 = (uint64_t *)(v52[6] + 16 * v45);
          *uint64_t v53 = v34;
          v53[1] = v35;
          *(void *)(v52[7] + 8 * v45) = v36;
          uint64_t v54 = v52[2];
          BOOL v29 = __OFADD__(v54, 1);
          uint64_t v55 = v54 + 1;
          if (v29) {
            goto LABEL_25;
          }
          v52[2] = v55;
        }
        uint64_t v34 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v35 = v42;
        uint64_t v36 = v43;
      }
      while (v42);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    uint64_t v21 = (void *)*a5;
    if ((v18 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v22 = 8 * v14;
    uint64_t v23 = *(void *)(v21[7] + 8 * v14);
    swift_bridgeObjectRetain();
    specialized Set.union<A>(_:)(v57, v23);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v26 = v21[7];
    swift_bridgeObjectRelease();
    *(void *)(v26 + v22) = v25;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  uint64_t v59 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v51 = (uint64_t)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (uint64_t)v49 - v13;
  MEMORY[0x270FA5388](v14);
  BOOL v16 = (char *)v49 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset))?);
  MEMORY[0x270FA5388](v17 - 8);
  unint64_t v19 = (void *)((char *)v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = ~v20;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = -v20;
  uint64_t v52 = a1;
  uint64_t v53 = a1 + 64;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  uint64_t v54 = v21;
  uint64_t v55 = 0;
  uint64_t v56 = v24 & v22;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  v49[1] = a1;
  swift_bridgeObjectRetain();
  v49[0] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
  for (int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v19, 1, v25);
        ;
        int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v19, 1, v25))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
      return swift_release();
    }
    uint64_t v32 = *v19;
    uint64_t v31 = v19[1];
    uint64_t v33 = (uint64_t)v16;
    outlined init with take of (URL, __REAsset)((uint64_t)v19 + *(int *)(v25 + 48), (uint64_t)v16, &demangling cache variable for type metadata for (URL, __REAsset));
    uint64_t v34 = *(void **)a5;
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
    uint64_t v37 = v34[2];
    BOOL v38 = (v35 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38)) {
      break;
    }
    char v40 = v35;
    if (v34[3] >= v39)
    {
      if (a4)
      {
        uint64_t v43 = *(void **)a5;
        if (v35) {
          goto LABEL_5;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v43 = *(void **)a5;
        if (v40) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, a4 & 1);
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_22;
      }
      unint64_t v36 = v41;
      uint64_t v43 = *(void **)a5;
      if (v40)
      {
LABEL_5:
        uint64_t v27 = v43[7];
        unint64_t v28 = *(void *)(v59 + 72) * v36;
        uint64_t v29 = v51;
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v27 + v28, v51, &demangling cache variable for type metadata for (URL, __REAsset));
        uint64_t v30 = v50;
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v29, v50, &demangling cache variable for type metadata for (URL, __REAsset));
        outlined destroy of Any?(v29, &demangling cache variable for type metadata for (URL, __REAsset));
        BOOL v16 = (char *)v33;
        outlined destroy of Any?(v33, &demangling cache variable for type metadata for (URL, __REAsset));
        swift_bridgeObjectRelease();
        outlined assign with take of (URL, __REAsset)(v30, *(void *)(*(void *)a5 + 56) + v28, &demangling cache variable for type metadata for (URL, __REAsset));
        goto LABEL_6;
      }
    }
    v43[(v36 >> 6) + 8] |= 1 << v36;
    uint64_t v44 = (uint64_t *)(v43[6] + 16 * v36);
    *uint64_t v44 = v32;
    v44[1] = v31;
    BOOL v16 = (char *)v33;
    outlined init with take of (URL, __REAsset)(v33, v43[7] + *(void *)(v59 + 72) * v36, &demangling cache variable for type metadata for (URL, __REAsset));
    uint64_t v45 = v43[2];
    BOOL v46 = __OFADD__(v45, 1);
    uint64_t v47 = v45 + 1;
    if (v46) {
      goto LABEL_21;
    }
    v43[2] = v47;
LABEL_6:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for UUID();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
      return outlined assign with take of (URL, __REAsset)(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, &demangling cache variable for type metadata for (URL, __REAsset));
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  uint64_t v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;
  return swift_bridgeObjectRetain();
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v13 & 1) == (v24 & 1))
    {
      unint64_t v9 = v23;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    uint64_t v16 = v15[7];
    uint64_t v17 = type metadata accessor for __RKEntityInteractionSpecification();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
    uint64_t v20 = v17;
    uint64_t v21 = v16 + *(void *)(v18 + 72) * v9;
    return (id)v19(v21, a1, v20);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
  return a2;
}

{
  void *v3;
  void *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_release();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    type metadata accessor for RIOPxrSdfLayerRef(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  uint64_t v22 = __OFADD__(v21, 1);
  unint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v23;
  return a2;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  char v8 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= result && (a7 & 1) != 0)
  {
LABEL_7:
    unint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      char v24 = (uint64_t *)(v23[7] + 32 * v17);
      *char v24 = a1;
      v24[1] = a2;
      v24[2] = a3;
      v24[3] = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= result && (a7 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a7 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  if ((v21 & 1) != (v25 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = result;
  unint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v17, a5, a6, a1, a2, a3, a4, v23);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  unint64_t v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    uint64_t v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  char v27 = (uint64_t *)(v22[6] + 16 * v16);
  uint64_t *v27 = a2;
  v27[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v28 = v22[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v30;
  return swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      BOOL v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3, void (*a4)(void), void (*a5)(void))
{
  char v8 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    a4();
LABEL_7:
    uint64_t v19 = (void *)*v8;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a5();
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_17:
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*v8;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v19[(v13 >> 6) + 8] |= 1 << v13;
  uint64_t v24 = 8 * v13;
  *(void *)(v19[6] + v24) = a2;
  *(void *)(v19[7] + v24) = a1;
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[2] = v27;
  return a2;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  char v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  char v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  uint64_t result = outlined init with take of (URL, __REAsset)(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, &demangling cache variable for type metadata for (URL, __REAsset));
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for __RKEntityInteractionSpecification();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = (void *)(a8[7] + 32 * result);
  *uint64_t v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v6 = (void *)(a5[6] + 16 * a1);
  *BOOL v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)))
              + 48);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v4, (uint64_t)a2 + *(int *)(v5 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
  *a2 = v7;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    BOOL v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  BOOL v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      BOOL v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      char v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          BOOL v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            BOOL v13 = v3 + 3;
            goto LABEL_7;
          }
          char v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            BOOL v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  BOOL v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v10);
  BOOL v13 = (uint64_t *)((char *)&v40 - v11);
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v17 = v1[2];
  int64_t v16 = v1[3];
  int64_t v18 = v16;
  unint64_t v19 = v1[4];
  unint64_t v41 = v6;
  uint64_t v47 = v17;
  if (v19)
  {
    uint64_t v45 = a1;
    int64_t v46 = v16;
    uint64_t v42 = v15;
    uint64_t v43 = v4;
    uint64_t v44 = v9;
    uint64_t v20 = v3;
    uint64_t v21 = (v19 - 1) & v19;
    unint64_t v22 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    uint64_t v23 = *(void *)(v14 + 56);
    uint64_t v24 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v22);
    uint64_t v25 = v14;
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v23
        + *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset))
                                - 8)
                    + 72)
        * v22;
    uint64_t v3 = v20;
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v28, (uint64_t)v13 + *(int *)(v20 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
    *BOOL v13 = v26;
    v13[1] = v27;
    uint64_t v14 = v25;
    uint64_t v4 = v43;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v13, 0, 1, v20);
    swift_bridgeObjectRetain();
    uint64_t v9 = v44;
    a1 = v45;
    uint64_t v15 = v42;
    goto LABEL_25;
  }
  int64_t v29 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v18 = v11;
    goto LABEL_24;
  }
  int64_t v30 = (unint64_t)(v17 + 64) >> 6;
  if (v29 < v30)
  {
    unint64_t v31 = *(void *)(v15 + 8 * v29);
    if (v31)
    {
LABEL_7:
      uint64_t v42 = v15;
      uint64_t v43 = v4;
      uint64_t v44 = v9;
      uint64_t v45 = a1;
      uint64_t v20 = v3;
      uint64_t v21 = (v31 - 1) & v31;
      unint64_t v22 = __clz(__rbit64(v31)) + (v29 << 6);
      int64_t v46 = v29;
      goto LABEL_3;
    }
    int64_t v32 = v16 + 2;
    int64_t v18 = v16 + 1;
    if (v16 + 2 < v30)
    {
      unint64_t v31 = *(void *)(v15 + 8 * v32);
      if (v31)
      {
LABEL_10:
        int64_t v29 = v32;
        goto LABEL_7;
      }
      int64_t v18 = v16 + 2;
      if (v16 + 3 < v30)
      {
        unint64_t v31 = *(void *)(v15 + 8 * (v16 + 3));
        if (v31)
        {
          int64_t v29 = v16 + 3;
          goto LABEL_7;
        }
        int64_t v32 = v16 + 4;
        int64_t v18 = v16 + 3;
        if (v16 + 4 < v30)
        {
          unint64_t v31 = *(void *)(v15 + 8 * v32);
          if (v31) {
            goto LABEL_10;
          }
          int64_t v29 = v16 + 5;
          int64_t v18 = v16 + 4;
          if (v16 + 5 < v30)
          {
            unint64_t v31 = *(void *)(v15 + 8 * v29);
            if (v31) {
              goto LABEL_7;
            }
            int64_t v11 = v30 - 1;
            uint64_t v33 = v16 + 6;
            while (v30 != v33)
            {
              unint64_t v31 = *(void *)(v15 + 8 * v33++);
              if (v31)
              {
                int64_t v29 = v33 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v46 = v18;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v13, 1, 1, v3, v12);
  uint64_t v21 = 0;
LABEL_25:
  uint64_t *v1 = v14;
  v1[1] = v15;
  int64_t v34 = v46;
  v1[2] = v47;
  v1[3] = v34;
  v1[4] = v21;
  char v35 = (void (*)(uint64_t))v1[5];
  outlined init with take of (URL, __REAsset)((uint64_t)v13, (uint64_t)v9, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(a1, 1, 1, v36);
  }
  else
  {
    uint64_t v38 = (uint64_t)v41;
    outlined init with take of (URL, __REAsset)((uint64_t)v9, (uint64_t)v41, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
    v35(v38);
    outlined destroy of Any?(v38, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a1, 0, 1, v39);
  }
}

uint64_t specialized static CompileSession.findRKAssets(sourcePath:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v21 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v21[1] = a1;
  v10((char *)v21 - v8, a1, v2, v7);
  URL.lastPathComponent.getter();
  v11._countAndFlagsBits = 0x7374657373616B72;
  v11._object = (void *)0xE800000000000000;
  Swift::Bool v12 = String.hasSuffix(_:)(v11);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    while (1)
    {
      v21[4] = URL.path.getter();
      v21[5] = v13;
      v21[2] = 0x7374657373616B72;
      v21[3] = 0xE800000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      char v14 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        break;
      }
      URL.deletingLastPathComponent()();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v9, v5, v2);
      if (!URL.lastPathComponent.getter() && v15 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        break;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        URL.lastPathComponent.getter();
        v17._countAndFlagsBits = 0x7374657373616B72;
        v17._object = (void *)0xE800000000000000;
        Swift::Bool v18 = String.hasSuffix(_:)(v17);
        swift_bridgeObjectRelease();
        if (!v18) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v19 = URL.path.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  return v19;
}

uint64_t type metadata accessor for CompileSession(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CompileSession);
}

uint64_t ObjC metadata update function for CompileSession()
{
  return type metadata accessor for CompileSession(0);
}

void type metadata completion function for CompileSession()
{
  type metadata accessor for __REAssetBundle.ExportOptions();
  if (v0 <= 0x3F)
  {
    type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for CompileSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CompileSession);
}

uint64_t dispatch thunk of CompileSession.__allocating_init(sourcePaths:exportOptions:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of CompileSession.__allocating_init(basePath:sourcePaths:exportOptions:compilationOptions:)()
{
  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t dispatch thunk of CompileSession.compileSync(outputPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

void type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget?()
{
  if (!lazy cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?)
  {
    type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    }
  }
}

uint64_t outlined assign with take of (URL, __REAsset)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t specialized static CompileSession.cartesianProduct(of:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  uint64_t v3 = a1 + 32;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v4 = Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  if (v2 == 1) {
    return v4;
  }
  uint64_t v7 = 1;
  uint64_t v21 = v2;
  uint64_t v22 = v3;
  while (1)
  {
    uint64_t v8 = *(void *)(v3 + 8 * v7);
    uint64_t v26 = *(void *)(v8 + 16);
    if (v26) {
      break;
    }
    uint64_t v5 = (void *)v4;
LABEL_8:
    if (++v7 == v2) {
      return (uint64_t)v5;
    }
  }
  uint64_t v23 = v7;
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v24 = v8 + 32;
  uint64_t result = swift_bridgeObjectRetain_n();
  unint64_t v10 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  uint64_t v25 = v8;
  while (v10 < *(void *)(v8 + 16))
  {
    if (v9)
    {
      Swift::String v11 = (uint64_t *)(v24 + 16 * v10);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v15 = *(void **)(v4 + 8 * i + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        }
        unint64_t v17 = v15[2];
        unint64_t v16 = v15[3];
        if (v17 >= v16 >> 1) {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
        }
        void v15[2] = v17 + 1;
        Swift::Bool v18 = &v15[2 * v17];
        v18[4] = v12;
        v18[5] = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v20 = v5[2];
        unint64_t v19 = v5[3];
        if (v20 >= v19 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v5);
        }
        uint64_t v5[2] = v20 + 1;
        v5[v20 + 4] = v15;
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v25;
    }
    if (++v10 == v26)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v4 = (uint64_t)v5;
      uint64_t v2 = v21;
      uint64_t v3 = v22;
      uint64_t v7 = v23;
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized CompileSession.handleLoad(of:with:assetLoadRequest:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v43 = a4;
  uint64_t v39 = a3;
  uint64_t v42 = a2;
  uint64_t v5 = type metadata accessor for __AssetRef();
  uint64_t v40 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::String v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  __swift_project_boxed_opaque_existential_1(&v48, v50);
  uint64_t v41 = dispatch thunk of __REAssetService.__handle.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v48);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = a1 + *(int *)(type metadata accessor for CompileSession.ImportSessionData(0) + 28);
  uint64_t v45 = v9;
  int64_t v46 = v11;
  char v14 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v47 = v8;
  v14(v11, v13, v8);
  String.utf8CString.getter();
  RESceneCreate();
  swift_release();
  Entity.coreEntity.getter();
  RESceneAddEntity();
  type metadata accessor for Scene();
  static Scene.fromCore(_:)();
  uint64_t v15 = v44;
  int v16 = dispatch thunk of Scene.containsChangeSceneActions()();
  if (v15)
  {
    swift_release();
    unint64_t v17 = v46;
LABEL_3:
    (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v17, v47);
    return v16 & 1;
  }
  uint64_t v37 = v12;
  uint64_t v38 = 0;
  uint64_t v18 = v40;
  uint64_t v44 = v5;
  swift_release();
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v48 = 0x523A79726F6D656DLL;
  unint64_t v49 = 0xEB00000000746F6FLL;
  uint64_t v51 = v42;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x656E65637365722ELL;
  v20._object = (void *)0xE800000000000000;
  String.append(_:)(v20);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v21 = REAssetManagerSceneAssetCreate();
  swift_release();
  if (!v21)
  {
    uint64_t v29 = type metadata accessor for __RealityFileError();
    lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, MEMORY[0x263F16110]);
    swift_allocError();
    unint64_t v31 = v30;
    uint64_t v48 = 0;
    unint64_t v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v32._object = (void *)0x800000023AAAE790;
    v32._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v32);
    unint64_t v17 = v46;
    v33._countAndFlagsBits = URL.absoluteString.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    unint64_t v34 = v49;
    *unint64_t v31 = v48;
    v31[1] = v34;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *MEMORY[0x263F16108], v29);
    swift_willThrow();
    goto LABEL_3;
  }
  uint64_t v50 = MEMORY[0x263F8DD08];
  uint64_t v48 = v21;
  static __AssetRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v48);
  __AssetLoadRequest.add(asset:)();
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v7, v44);
  uint64_t v22 = REAssetWithMetadataCreate();
  String.utf8CString.getter();
  REAssetWithMetadataSetLabel();
  swift_release();
  uint64_t v23 = *v43;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v36 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
  }
  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1) {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v23);
  }
  v23[2] = v26 + 1;
  v23[v26 + 4] = v22;
  *uint64_t v43 = v23;
  if (*(void *)(*(void *)(a1 + 24) + 16))
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    REAssetWithMetadataSetConfigurationNames();
  }
  RERelease();
  RERelease();
  (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v46, v47);
  LOBYTE(v16) = v36;
  return v16 & 1;
}

uint64_t type metadata accessor for CompileSession.ImportSessionData(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CompileSession.ImportSessionData);
}

uint64_t type metadata accessor for CompileSession(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *specialized ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:)(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v22 = a4;
  v21[3] = a3;
  uint64_t v5 = type metadata accessor for __EngineRef();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v13, a1, v9, v11);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  dispatch thunk of __Engine.__coreEngine.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (specialized static USDImportService.canLoad(url:)())
  {
    URL._bridgeToObjectiveC()(v14);
    int v16 = v15;
    unint64_t v17 = (void *)RIOImportSessionCreateWithURL();

    type metadata accessor for ImportSession(0);
    swift_allocObject();
    uint64_t v18 = specialized ImportSession.init<A>(core:entityType:)(v17, v22);
    Swift::String v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    swift_retain();
    v19(v13, v9);
    if (v18) {
      swift_release();
    }
  }
  else
  {
    Swift::String v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    v19(v13, v9);
    uint64_t v18 = 0;
  }
  v19(a1, v9);
  return v18;
}

unint64_t lazy protocol witness table accessor for type CompileSession.LoadError and conformance CompileSession.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type CompileSession.LoadError and conformance CompileSession.LoadError;
  if (!lazy protocol witness table cache variable for type CompileSession.LoadError and conformance CompileSession.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompileSession.LoadError and conformance CompileSession.LoadError);
  }
  return result;
}

uint64_t outlined init with take of (URL, __REAsset)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CompileSession.ImportSessionData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined copy of CompileSession.LoadError()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for CompileSession.LoadError()
{
  return outlined consume of CompileSession.LoadError();
}

uint64_t outlined consume of CompileSession.LoadError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for CompileSession.LoadError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of CompileSession.LoadError();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CompileSession.LoadError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of CompileSession.LoadError();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CompileSession.LoadError();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CompileSession.LoadError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CompileSession.LoadError();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompileSession.LoadError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompileSession.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CompileSession.LoadError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for CompileSession.LoadError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

void *type metadata accessor for CompileSession.LoadError()
{
  return &unk_26EE0BFC0;
}

char *initializeBufferWithCopyOfBuffer for CompileSession.ImportSessionData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (char *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (char *)a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    a1[3] = a2[3];
    uint64_t v9 = *(int *)(a3 + 28);
    char v14 = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v14, v10, v11);
    v12(&v7[*(int *)(a3 + 32)], (char *)a2 + *(int *)(a3 + 32), v11);
  }
  return v7;
}

uint64_t destroy for CompileSession.ImportSessionData(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  return v8(v6, v5);
}

char *initializeWithCopy for CompileSession.ImportSessionData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v7;
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v13 = &a1[v8];
  uint64_t v9 = &a2[v8];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v13, v9, v10);
  v11(&a1[*(int *)(a3 + 32)], &a2[*(int *)(a3 + 32)], v10);
  return a1;
}

char *assignWithCopy for CompileSession.ImportSessionData(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 32)], &a2[*(int *)(a3 + 32)], v9);
  return a1;
}

uint64_t initializeWithTake for CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32), v9);
  return a1;
}

char *assignWithTake for CompileSession.ImportSessionData(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v6 = *((void *)a2 + 2);
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a1 + 2) = v6;
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = *((void *)a2 + 3);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(&a1[*(int *)(a3 + 32)], &a2[*(int *)(a3 + 32)], v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23A9EF9B4);
}

uint64_t sub_23A9EF9B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23A9EFA78);
}

void *sub_23A9EFA78(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CompileSession.ImportSessionData()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #1 in closure #1 in EntityAnchoringBuilder.stageSubscription.getter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v1 = v0;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = v1;
  id v3 = v1;
  uint64_t v4 = MEMORY[0x263F8EE88];
  id v5 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v3, MEMORY[0x263F8EE88]);

  v2[2] = v4;
  v2[3] = v5;
  swift_retain();
  if (String.count.getter() < 1) {
    id v6 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v6 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v7 = v6;
  uint64_t v8 = (void *)swift_allocObject();
  v8[4] = v7;
  id v9 = v7;
  id v10 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v9, v4);

  void v8[2] = v4;
  v8[3] = v10;
  swift_retain();
  if (String.count.getter() < 1) {
    id v11 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v11 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v12 = v11;
  uint64_t v13 = (void *)swift_allocObject();
  v13[4] = v12;
  id v14 = v12;
  id v15 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v14, v4);

  v13[2] = v4;
  v13[3] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24D0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = v13;
  unint64_t v19 = inited;
  specialized Array._endMutation()();
  uint64_t v17 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v19);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v17;
}

uint64_t type metadata accessor for EntityAnchoringBuilder()
{
  return self;
}

uint64_t specialized EntityAnchoringBuilder.stageSubscription.getter()
{
  uint64_t v0 = closure #1 in closure #1 in EntityAnchoringBuilder.stageSubscription.getter();
  type metadata accessor for PrimDirtyState();
  swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE88];
  uint64_t v2 = PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(MEMORY[0x263F8EE88], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v2;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v1, v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v10 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v10);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Array.append(_:)(uint64_t a1, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = a2(0, *(void *)(v5 + 16) + 1, 1, v5);
    uint64_t v5 = result;
  }
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    uint64_t result = a2(v7 > 1, v8 + 1, 1, v5);
    uint64_t v5 = result;
  }
  *(void *)(v5 + 16) = v8 + 1;
  *(void *)(v5 + 8 * v8 + 32) = a1;
  *uint64_t v2 = v5;
  return result;
}

char *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v3 = (char *)MEMORY[0x263F8EE78];
    for (uint64_t i = 4; ; ++i)
    {
      id v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v6 = v5;
      uint64_t v7 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      char Int32 = RIOPxrVtValueGetInt32();

      if (Int32)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
        }
        unint64_t v10 = *((void *)v3 + 2);
        unint64_t v9 = *((void *)v3 + 3);
        if (v10 >= v9 >> 1) {
          id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v3);
        }
        *((void *)v3 + 2) = v10 + 1;
        *(_DWORD *)&v3[4 * v10 + 32] = 0;
      }
      if (v7 == v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D10VyAIGXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (char *)MEMORY[0x263F8EE78];
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v18 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v5 = v18;
  uint64_t v6 = (void *)(a1 + 32);
  do
  {
    *(void *)&long long v4 = *v6;
    long long v17 = v4;
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v2);
    unint64_t v9 = *((void *)v7 + 2);
    unint64_t v8 = *((void *)v7 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7);
      unint64_t v8 = *((void *)v7 + 3);
      int64_t v10 = v8 >> 1;
    }
    *((void *)v7 + 2) = v11;
    long long v4 = v17;
    *(_DWORD *)&v7[4 * v9 + 32] = v17;
    int64_t v12 = v9 + 2;
    if (v10 < v12)
    {
      id v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v12, 1, v7);
      long long v4 = v17;
      uint64_t v7 = v15;
    }
    *((void *)v7 + 2) = v12;
    *(_DWORD *)&v7[4 * v11 + 32] = DWORD1(v4);
    unint64_t v14 = *(void *)(v18 + 16);
    unint64_t v13 = *(void *)(v18 + 24);
    if (v14 >= v13 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    }
    *(void *)(v18 + 16) = v14 + 1;
    *(void *)(v18 + 8 * v14 + 32) = v7;
    ++v6;
    --v1;
  }
  while (v1);
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D11VyAIGXEfU0_Tf1cn_nTm(__n128 *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __n128))
{
  int64_t v3 = a1[1].n128_i64[0];
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v13;
    unint64_t v8 = a1 + 2;
    do
    {
      uint64_t v7 = a3(v7, *v8);
      uint64_t v9 = v7;
      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v13 + 16) = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v9;
      ++v8;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU2_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (char *)MEMORY[0x263F8EE78];
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v18 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v5 = v18;
  uint64_t v6 = (void *)(a1 + 32);
  do
  {
    *(void *)&long long v4 = *v6;
    long long v17 = v4;
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v2);
    unint64_t v9 = *((void *)v7 + 2);
    unint64_t v8 = *((void *)v7 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7);
      unint64_t v8 = *((void *)v7 + 3);
      int64_t v10 = v8 >> 1;
    }
    *((void *)v7 + 2) = v11;
    long long v4 = v17;
    *(_DWORD *)&v7[4 * v9 + 32] = v17;
    int64_t v12 = v9 + 2;
    if (v10 < v12)
    {
      id v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v12, 1, v7);
      long long v4 = v17;
      uint64_t v7 = v15;
    }
    *((void *)v7 + 2) = v12;
    *(_DWORD *)&v7[4 * v11 + 32] = DWORD1(v4);
    unint64_t v14 = *(void *)(v18 + 16);
    unint64_t v13 = *(void *)(v18 + 24);
    if (v14 >= v13 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    }
    *(void *)(v18 + 16) = v14 + 1;
    *(void *)(v18 + 8 * v14 + 32) = v7;
    ++v6;
    --v1;
  }
  while (v1);
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU3_Tf1cn_nTm(__n128 *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __n128))
{
  int64_t v3 = a1[1].n128_i64[0];
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v13;
    unint64_t v8 = a1 + 2;
    do
    {
      uint64_t v7 = a3(v7, *v8);
      uint64_t v9 = v7;
      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v13 + 16) = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v9;
      ++v8;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU5_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v18 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v4 = v18;
  uint64_t v5 = (long long *)(a1 + 32);
  do
  {
    long long v17 = *v5;
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v2);
    unint64_t v8 = v6[2];
    unint64_t v7 = v6[3];
    int64_t v9 = v7 >> 1;
    unint64_t v10 = v8 + 1;
    if (v7 >> 1 <= v8)
    {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
      unint64_t v7 = v6[3];
      int64_t v9 = v7 >> 1;
    }
    _OWORD v6[2] = v10;
    uint64_t v11 = *((void *)&v17 + 1);
    v6[v8 + 4] = v17;
    int64_t v12 = v8 + 2;
    if (v9 < v12)
    {
      id v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v12, 1, v6);
      uint64_t v11 = *((void *)&v17 + 1);
      uint64_t v6 = v15;
    }
    _OWORD v6[2] = v12;
    v6[v10 + 4] = v11;
    unint64_t v14 = *(void *)(v18 + 16);
    unint64_t v13 = *(void *)(v18 + 24);
    if (v14 >= v13 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    }
    *(void *)(v18 + 16) = v14 + 1;
    *(void *)(v18 + 8 * v14 + 32) = v6;
    ++v5;
    --v1;
  }
  while (v1);
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU6_Tf1cn_nTm(__n128 *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __n128, __n128))
{
  int64_t v3 = a1[1].n128_i64[0];
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v13;
    unint64_t v8 = a1 + 2;
    do
    {
      uint64_t v7 = a3(v7, *v8, v8[1]);
      uint64_t v9 = v7;
      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v13 + 16) = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v9;
      v8 += 2;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_SSs5NeverOTg503_s9d63IO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSSAA16fg2O5H7VXEfU8_Tf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v17;
    uint64_t v7 = (id *)(a1 + 32);
    do
    {
      id v8 = *v7;
      uint64_t v9 = (void *)a3();
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      unint64_t v14 = *(void *)(v17 + 16);
      unint64_t v13 = *(void *)(v17 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v17 + 16) = v14 + 1;
      uint64_t v15 = v17 + 16 * v14;
      *(void *)(v15 + 32) = v10;
      *(void *)(v15 + 40) = v12;
      ++v7;
      --v3;
    }
    while (v3);
  }
  return v4;
}

char *specialized SIMD.asScalarArray()(double a1)
{
  int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = *((void *)v1 + 2);
  unint64_t v2 = *((void *)v1 + 3);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = *((void *)v1 + 3);
    int64_t v4 = v2 >> 1;
  }
  *((void *)v1 + 2) = v5;
  int v6 = HIDWORD(a1);
  *(_DWORD *)&v1[4 * v3 + 32] = LODWORD(a1);
  int64_t v7 = v3 + 2;
  if (v4 < v7)
  {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v7, 1, v1);
    int v6 = HIDWORD(a1);
    int64_t v1 = v9;
  }
  *((void *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6;
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  int v6;
  int64_t v7;
  char *v9;

  int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = *((void *)v1 + 2);
  unint64_t v2 = *((void *)v1 + 3);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = *((void *)v1 + 3);
    int64_t v4 = v2 >> 1;
  }
  *((void *)v1 + 2) = v5;
  int v6 = HIDWORD(a1);
  *(_DWORD *)&v1[4 * v3 + 32] = LODWORD(a1);
  int64_t v7 = v3 + 2;
  if (v4 < v7)
  {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v7, 1, v1);
    int v6 = HIDWORD(a1);
    int64_t v1 = v9;
  }
  *((void *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6;
  return v1;
}

char *specialized SIMD.asScalarArray()(__n128 a1)
{
  int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = *((void *)v1 + 2);
  unint64_t v2 = *((void *)v1 + 3);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = *((void *)v1 + 3);
    int64_t v4 = v2 >> 1;
  }
  *((void *)v1 + 2) = v5;
  __n128 v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  unint64_t v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    __n128 v6 = a1;
    int64_t v1 = v10;
  }
  *((void *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  unint64_t v8 = *((void *)v1 + 3);
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u32[2] = a1.n128_u32[2];
    int64_t v1 = v11;
  }
  *((void *)v1 + 2) = v3 + 3;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  char *v13;
  char *v14;

  int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = *((void *)v1 + 2);
  unint64_t v2 = *((void *)v1 + 3);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = *((void *)v1 + 3);
    int64_t v4 = v2 >> 1;
  }
  *((void *)v1 + 2) = v5;
  __n128 v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  unint64_t v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    __n128 v6 = a1;
    int64_t v1 = v12;
  }
  *((void *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  unint64_t v8 = *((void *)v1 + 3);
  uint64_t v9 = v3 + 3;
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u64[1] = a1.n128_u64[1];
    int64_t v1 = v13;
  }
  *((void *)v1 + 2) = v9;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  uint64_t v10 = *((void *)v1 + 3);
  if ((uint64_t)(v3 + 4) > (uint64_t)(v10 >> 1))
  {
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v3 + 4, 1, v1);
    v6.n128_u32[3] = a1.n128_u32[3];
    int64_t v1 = v14;
  }
  *((void *)v1 + 2) = v3 + 4;
  *(_DWORD *)&v1[4 * v9 + 32] = v6.n128_u32[3];
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;

  int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = *((void *)v1 + 2);
  unint64_t v2 = *((void *)v1 + 3);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = *((void *)v1 + 3);
    int64_t v4 = v2 >> 1;
  }
  *((void *)v1 + 2) = v5;
  __n128 v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  unint64_t v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    __n128 v6 = a1;
    int64_t v1 = v10;
  }
  *((void *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  unint64_t v8 = *((void *)v1 + 3);
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u32[2] = a1.n128_u32[2];
    int64_t v1 = v11;
  }
  *((void *)v1 + 2) = v3 + 3;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  char *v13;
  char *v14;

  int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = *((void *)v1 + 2);
  unint64_t v2 = *((void *)v1 + 3);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = *((void *)v1 + 3);
    int64_t v4 = v2 >> 1;
  }
  *((void *)v1 + 2) = v5;
  __n128 v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  unint64_t v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    __n128 v6 = a1;
    int64_t v1 = v12;
  }
  *((void *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  unint64_t v8 = *((void *)v1 + 3);
  uint64_t v9 = v3 + 3;
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u64[1] = a1.n128_u64[1];
    int64_t v1 = v13;
  }
  *((void *)v1 + 2) = v9;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  uint64_t v10 = *((void *)v1 + 3);
  if ((uint64_t)(v3 + 4) > (uint64_t)(v10 >> 1))
  {
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v3 + 4, 1, v1);
    v6.n128_u32[3] = a1.n128_u32[3];
    int64_t v1 = v14;
  }
  *((void *)v1 + 2) = v3 + 4;
  *(_DWORD *)&v1[4 * v9 + 32] = v6.n128_u32[3];
  return v1;
}

void *specialized SIMD.asScalarArray()(__n128 a1)
{
  int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = v1[3];
    int64_t v4 = v2 >> 1;
  }
  v1[2] = v5;
  unint64_t v6 = a1.n128_u64[1];
  v1[v3 + 4] = a1.n128_u64[0];
  int64_t v7 = v3 + 2;
  if (v4 < v7)
  {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v7, 1, v1);
    unint64_t v6 = a1.n128_u64[1];
    int64_t v1 = v9;
  }
  v1[2] = v7;
  v1[v5 + 4] = v6;
  return v1;
}

void *specialized SIMD.asScalarArray()(__n128 a1, double a2)
{
  unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  int64_t v5 = v3 >> 1;
  unint64_t v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 1, 1, v2);
    unint64_t v3 = v2[3];
    int64_t v5 = v3 >> 1;
  }
  v2[2] = v6;
  unint64_t v7 = a1.n128_u64[1];
  v2[v4 + 4] = a1.n128_u64[0];
  unint64_t v8 = v4 + 2;
  if (v5 < (uint64_t)(v4 + 2))
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 2, 1, v2);
    unint64_t v7 = a1.n128_u64[1];
    unint64_t v2 = v11;
  }
  v2[2] = v8;
  v2[v6 + 4] = v7;
  unint64_t v9 = v2[3];
  if ((uint64_t)(v4 + 3) > (uint64_t)(v9 >> 1)) {
    unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v4 + 3, 1, v2);
  }
  v2[2] = v4 + 3;
  *(double *)&v2[v8 + 4] = a2;
  return v2;
}

void *specialized SIMD.asScalarArray()(__n128 a1, __n128 a2)
{
  unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  int64_t v5 = v3 >> 1;
  unint64_t v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 1, 1, v2);
    unint64_t v3 = v2[3];
    int64_t v5 = v3 >> 1;
  }
  v2[2] = v6;
  unint64_t v8 = a1.n128_u64[1];
  __n128 v7 = a2;
  v2[v4 + 4] = a1.n128_u64[0];
  unint64_t v9 = v4 + 2;
  if (v5 < (uint64_t)(v4 + 2))
  {
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 2, 1, v2);
    unint64_t v8 = a1.n128_u64[1];
    __n128 v7 = a2;
    unint64_t v2 = v14;
  }
  v2[2] = v9;
  v2[v6 + 4] = v8;
  unint64_t v10 = v2[3];
  unint64_t v11 = v4 + 3;
  if ((uint64_t)(v4 + 3) > (uint64_t)(v10 >> 1))
  {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v4 + 3, 1, v2);
    __n128 v7 = a2;
    unint64_t v2 = v15;
  }
  v2[2] = v11;
  v2[v9 + 4] = v7.n128_u64[0];
  unint64_t v12 = v2[3];
  if ((uint64_t)(v4 + 4) > (uint64_t)(v12 >> 1))
  {
    int v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v4 + 4, 1, v2);
    v7.n128_u64[1] = a2.n128_u64[1];
    unint64_t v2 = v16;
  }
  v2[2] = v4 + 4;
  v2[v11 + 4] = v7.n128_u64[1];
  return v2;
}

uint64_t componentPrimToDictionary(component:)()
{
  uint64_t v364 = *MEMORY[0x263EF8340];
  id v326 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  unint64_t v0 = Prim.attributes()();
  unint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_284;
  }
  uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
  {
LABEL_285:
    swift_bridgeObjectRelease();
    unint64_t v266 = Prim.children.getter();
    unint64_t v267 = v266;
    uint64_t v338 = MEMORY[0x263F8EE78];
    if (v266 >> 62) {
      goto LABEL_300;
    }
    uint64_t v268 = *(void *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v268)
    {
      while (1)
      {
        unint64_t v269 = 0;
        while ((v267 & 0xC000000000000001) != 0)
        {
          uint64_t v270 = MEMORY[0x23ECBA630](v269, v267);
          unint64_t v271 = v269 + 1;
          if (__OFADD__(v269, 1))
          {
LABEL_297:
            __break(1u);
LABEL_298:
            uint64_t v272 = v338;
            goto LABEL_302;
          }
LABEL_293:
          id v340 = (id)v270;
          if (closure #13 in componentPrimToDictionary(component:)())
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
          ++v269;
          if (v271 == v268) {
            goto LABEL_298;
          }
        }
        if (v269 < *(void *)((v267 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        __break(1u);
LABEL_300:
        uint64_t v268 = _CocoaArrayWrapper.endIndex.getter();
        if (!v268) {
          goto LABEL_301;
        }
      }
      uint64_t v270 = *(void *)(v267 + 8 * v269 + 32);
      swift_retain();
      unint64_t v271 = v269 + 1;
      if (__OFADD__(v269, 1)) {
        goto LABEL_297;
      }
      goto LABEL_293;
    }
LABEL_301:
    uint64_t v272 = MEMORY[0x263F8EE78];
LABEL_302:
    swift_bridgeObjectRelease();
    if (v272 < 0 || (v272 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v273 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v273) {
        goto LABEL_305;
      }
    }
    else
    {
      uint64_t v273 = *(void *)(v272 + 16);
      if (v273)
      {
LABEL_305:
        if (v273 < 1) {
          __break(1u);
        }
        uint64_t v274 = 0;
        do
        {
          if ((v272 & 0xC000000000000001) != 0)
          {
            uint64_t v275 = MEMORY[0x23ECBA630](v274, v272);
          }
          else
          {
            uint64_t v275 = *(void *)(v272 + 8 * v274 + 32);
            swift_retain();
          }
          ++v274;
          uint64_t v276 = (void *)RIOPxrUsdObjectCopyName();
          char v277 = (void *)RIOPxrTfTokenCopyString();
          uint64_t v278 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v280 = v279;

          uint64_t v281 = (void *)componentPrimToDictionary(component:)(v275);
          uint64_t v338 = v278;
          uint64_t v339 = v280;
          swift_bridgeObjectRetain();
          objc_msgSend(v326, sel___swift_setObject_forKeyedSubscript_, v281, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          swift_release();
        }
        while (v273 != v274);
      }
    }
    swift_release();
    return (uint64_t)v326;
  }
LABEL_3:
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = v1 & 0xC000000000000001;
  uint64_t v322 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v6 = MEMORY[0x263F8D4F8];
  unint64_t v323 = v1;
  unint64_t v315 = v1 & 0xC000000000000001;
  uint64_t v316 = v2;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        MEMORY[0x23ECBA630](v3, v323);
        BOOL v12 = __OFADD__(v3++, 1);
        if (v12) {
          goto LABEL_280;
        }
      }
      else
      {
        if (v3 >= *(void *)(v322 + 16)) {
          goto LABEL_282;
        }
        swift_retain();
        BOOL v12 = __OFADD__(v3++, 1);
        if (v12)
        {
LABEL_280:
          __break(1u);
          goto LABEL_281;
        }
      }
      unint64_t v13 = (void *)RIOPxrUsdObjectCopyName();
      unint64_t v14 = (void *)RIOPxrTfTokenCopyString();
      uint64_t v324 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v325 = v15;

      int v16 = (void *)RIOPxrUsdAttributeCopyTypeName();
      RIOPxrSdfValueTypeNameRef.type.getter();
      unint64_t v1 = v17;

      if (swift_dynamicCastMetatype())
      {
        uint64_t EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
        if (!EmptyValue) {
          uint64_t EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
        }
        LOBYTE(v338) = 0;
        char Bool = RIOPxrVtValueGetBool();

        if (Bool)
        {
          v20.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
LABEL_24:
          Class isa = v20.super.super.isa;
          goto LABEL_5;
        }
        goto LABEL_4;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]);
      if (!swift_dynamicCastMetatype()) {
        break;
      }
      uint64_t v21 = (void *)RIOPxrUsdAttributeCopyValue();
      if (!v21) {
        uint64_t v21 = (void *)RIOPxrVtValueCreateEmptyValue();
      }
      uint64_t v22 = RIOPxrVtValueCopyBoolArray();
      if (!v22)
      {

        v11.super.Class isa = 0;
        uint64_t v6 = MEMORY[0x263F8D4F8];
        goto LABEL_11;
      }
      uint64_t v23 = (void *)v22;
      uint64_t v338 = 0;
      type metadata accessor for RIOPxrVtValueRef(0);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      unint64_t v24 = v338;
      if (!v338) {
        unint64_t v24 = specialized static Array._allocateUninitialized(_:)(0);
      }
      uint64_t v338 = MEMORY[0x263F8EE78];
      if (v24 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v317 = v4;
        if (v9) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        uint64_t v317 = v4;
        if (v9)
        {
LABEL_33:
          if (v9 < 1) {
            goto LABEL_283;
          }
          unint64_t v10 = v3;
          char IsNativeType = specialized Array._hoistableIsNativeTypeChecked()(v24);
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (IsNativeType) {
              id v27 = *(id *)(v24 + 8 * i + 32);
            }
            else {
              id v27 = (id)MEMORY[0x23ECBA630](i, v24);
            }
            uint64_t v28 = v27;
            LOBYTE(v340) = 0;
            char v29 = RIOPxrVtValueGetBool();

            if (v29)
            {
              char v30 = (char)v340;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
              uint64_t v31 = *(void *)(v338 + 16);
              uint64_t v32 = specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
              uint64_t v33 = v338;
              *(void *)(v338 + 16) = v31 + 1;
              *(unsigned char *)(v33 + v31 + 32) = v30;
              destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v32);
            }
          }
          goto LABEL_10;
        }
      }
      unint64_t v10 = v3;
LABEL_10:
      swift_bridgeObjectRelease_n();

      uint64_t v6 = MEMORY[0x263F8D4F8];
      v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unint64_t v3 = v10;
      uint64_t v2 = v316;
      uint64_t v4 = v317;
      unint64_t v5 = v315;
LABEL_11:
      uint64_t v338 = v324;
      uint64_t v339 = v325;
      swift_bridgeObjectRetain();
      unint64_t v1 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      objc_msgSend(v326, sel___swift_setObject_forKeyedSubscript_, v11.super.isa, v1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
LABEL_12:
      if (v3 == v2) {
        goto LABEL_285;
      }
    }
    if (!swift_dynamicCastMetatype())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      if (swift_dynamicCastMetatype())
      {
        int v36 = (void *)RIOPxrUsdAttributeCopyValue();
        if (!v36) {
          int v36 = (void *)RIOPxrVtValueCreateEmptyValue();
        }
        v11.super.Class isa = (Class)RIOPxrVtValueCopyInt32Array();
        if (v11.super.isa)
        {
          uint64_t v338 = 0;
          type metadata accessor for RIOPxrVtValueRef(0);
          static Array._conditionallyBridgeFromObjectiveC(_:result:)();
          uint64_t v37 = v338;
          Class v301 = v11.super.isa;
          if (!v338) {
            uint64_t v37 = specialized static Array._allocateUninitialized(_:)(0);
          }
          unint64_t v308 = v3;
          uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
          unint64_t v38 = swift_bridgeObjectRetain();
          uint64_t v39 = specialized Array._getCount()(v38);
          if (v39)
          {
            uint64_t v40 = v39;
            char v41 = specialized Array._hoistableIsNativeTypeChecked()(v37);
            uint64_t v42 = 4;
            while (1)
            {
              id v43 = (v41 & 1) != 0 ? *(id *)(v37 + 8 * v42) : (id)MEMORY[0x23ECBA630](v42 - 4, v37);
              unint64_t v1 = (unint64_t)v43;
              uint64_t v44 = v42 - 3;
              if (__OFADD__(v42 - 4, 1)) {
                break;
              }
              id v340 = v43;
              closure #1 in closure #1 in RIOPxrVtValueRef.asInt32Array.getter((uint64_t)&v336);

              if ((v337 & 1) == 0)
              {
                int v45 = v336;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
                uint64_t v46 = *(void *)(v338 + 16);
                uint64_t v47 = specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
                uint64_t v48 = v338;
                *(void *)(v338 + 16) = v46 + 1;
                *(_DWORD *)(v48 + 4 * v46 + 32) = v45;
                destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v47);
              }
              ++v42;
              if (v44 == v40) {
                goto LABEL_62;
              }
            }
LABEL_281:
            __break(1u);
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            swift_bridgeObjectRetain();
            uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v2) {
              goto LABEL_285;
            }
            goto LABEL_3;
          }
LABEL_62:
          swift_bridgeObjectRelease_n();

          v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          unint64_t v5 = v315;
          uint64_t v2 = v316;
          unint64_t v3 = v308;
          uint64_t v6 = MEMORY[0x263F8D4F8];
        }
        else
        {
        }
        goto LABEL_11;
      }
      if (!swift_dynamicCastMetatype()) {
        break;
      }
    }
    unint64_t v34 = (void *)RIOPxrUsdAttributeCopyValue();
    if (!v34) {
      unint64_t v34 = (void *)RIOPxrVtValueCreateEmptyValue();
    }
    LODWORD(v338) = 0;
    char Int32 = RIOPxrVtValueGetInt32();

    if (Int32)
    {
      v20.super.super.Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_24;
    }
LABEL_4:
    Class isa = 0;
LABEL_5:
    uint64_t v338 = v324;
    uint64_t v339 = v325;
    swift_bridgeObjectRetain();
    uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
LABEL_6:
    unint64_t v1 = v8;
    objc_msgSend(v326, sel___swift_setObject_forKeyedSubscript_, isa, v8, v282.n128_u64[0]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    if (v3 == v2) {
      goto LABEL_285;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v49 = (void *)RIOPxrUsdAttributeCopyValue();
    if (!v49) {
      unint64_t v49 = (void *)RIOPxrVtValueCreateEmptyValue();
    }
    uint64_t v50 = RIOPxrVtValueCopyInt32Array();
    if (v50)
    {
      uint64_t v51 = (void *)v50;
      uint64_t v338 = 0;
      type metadata accessor for RIOPxrVtValueRef(0);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      unint64_t v52 = v338;
      if (!v338) {
        unint64_t v52 = specialized static Array._allocateUninitialized(_:)(0);
      }
      specialized Sequence.compactMap<A>(_:)(v52);

      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {

      Class isa = 0;
    }
    goto LABEL_5;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v53 = (void *)RIOPxrUsdAttributeCopyValue();
    if (!v53) {
      uint64_t v53 = (void *)RIOPxrVtValueCreateEmptyValue();
    }
    uint64_t v338 = 0;
    char Int64 = RIOPxrVtValueGetInt64();

    if (Int64)
    {
      v20.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_24;
    }
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v55 = (void *)RIOPxrUsdAttributeCopyValue();
    if (!v55) {
      uint64_t v55 = (void *)RIOPxrVtValueCreateEmptyValue();
    }
    uint64_t v56 = RIOPxrVtValueRef.asInt64Array.getter();

    if (v56)
    {
LABEL_82:
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      Class isa = 0;
    }
LABEL_96:
    uint64_t v8 = specialized _bridgeAnythingToObjectiveC<A>(_:)();
    goto LABEL_6;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v57 = (void *)AnyAttribute.value.getter();
    unint64_t v58 = RIOPxrVtValueRef.asUInt32.getter();

    if ((v58 & 0x100000000) == 0)
    {
      Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_96;
    }
LABEL_95:
    Class isa = 0;
    goto LABEL_96;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v59 = (void *)AnyAttribute.value.getter();
    uint64_t v60 = RIOPxrVtValueRef.asUInt32Array.getter();

    if (v60) {
      goto LABEL_82;
    }
    goto LABEL_95;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v61 = (void *)AnyAttribute.value.getter();
    __int16 v62 = RIOPxrVtValueRef.asUInt8.getter();

    if ((v62 & 0x100) == 0)
    {
      Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v63 = (void *)AnyAttribute.value.getter();
    uint64_t v64 = RIOPxrVtValueRef.asUInt8Array.getter();

    if (v64) {
      goto LABEL_82;
    }
    goto LABEL_95;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v65 = (void *)AnyAttribute.value.getter();
    unint64_t v66 = RIOPxrVtValueRef.asUInt32.getter();

    if ((v66 & 0x100000000) != 0) {
      v67.super.super.Class isa = 0;
    }
    else {
      v67.super.super.Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
    }
    unint64_t v1 = specialized _bridgeAnythingToObjectiveC<A>(_:)();
    objc_msgSend(v326, sel___swift_setObject_forKeyedSubscript_, v67.super.super.isa, v1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    unint64_t v5 = v315;
    uint64_t v2 = v316;
    goto LABEL_12;
  }
  uint64_t v68 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v69 = (void *)AnyAttribute.value.getter();
    uint64_t v70 = RIOPxrVtValueRef.asUInt32Array.getter();

    if (v70) {
      goto LABEL_102;
    }
LABEL_177:
    uint64_t v72 = 0;
LABEL_178:
    unint64_t v1 = specialized _bridgeAnythingToObjectiveC<A>(_:)();
    objc_msgSend(v326, sel___swift_setObject_forKeyedSubscript_, v72, v1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_179:
    swift_unknownObjectRelease();
    swift_release();
LABEL_180:
    unint64_t v5 = v315;
    uint64_t v2 = v316;
    uint64_t v6 = v68;
    goto LABEL_12;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v73 = (void *)AnyAttribute.value.getter();
    RIOPxrVtValueRef.asUInt64.getter();
    char v75 = v74;

    if (v75) {
      goto LABEL_177;
    }
    uint64_t v72 = (__n128 *)UInt64._bridgeToObjectiveC()().super.super.isa;
    goto LABEL_178;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v76 = (void *)AnyAttribute.value.getter();
    uint64_t v77 = RIOPxrVtValueRef.asUInt64Array.getter();

    if (!v77) {
      goto LABEL_177;
    }
    goto LABEL_102;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v78 = (void *)AnyAttribute.value.getter();
    unint64_t v79 = RIOPxrVtValueRef.asFloat.getter();

    if ((v79 & 0x100000000) != 0) {
      goto LABEL_177;
    }
    uint64_t v72 = (__n128 *)Float._bridgeToObjectiveC()().super.super.isa;
    goto LABEL_178;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v80 = (void *)AnyAttribute.value.getter();
    uint64_t v81 = RIOPxrVtValueRef.asFloatArray.getter();

    if (!v81) {
      goto LABEL_177;
    }
    goto LABEL_102;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v82 = (void *)AnyAttribute.value.getter();
    uint64_t v83 = RIOPxrVtValueRef.asDouble.getter();
    char v85 = v84;

    if (v85) {
      goto LABEL_177;
    }
    uint64_t v72 = (__n128 *)MEMORY[0x23ECBA1C0](*(double *)&v83);
    goto LABEL_178;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v86 = (void *)AnyAttribute.value.getter();
    uint64_t v87 = RIOPxrVtValueRef.asDoubleArray.getter();

    if (!v87) {
      goto LABEL_177;
    }
    goto LABEL_102;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Int32>);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v88 = (void *)AnyAttribute.value.getter();
    uint64_t v89 = RIOPxrVtValueRef.asInt2.getter();
    char v91 = v90;

    if (v91) {
      goto LABEL_177;
    }
    uint64_t v92 = specialized SIMD.asScalarArray()(*(double *)&v89);
LABEL_127:
    uint64_t v338 = (uint64_t)v92;
    uint64_t v72 = (__n128 *)_bridgeAnythingToObjectiveC<A>(_:)();
    outlined destroy of Any?((uint64_t)&v338, &demangling cache variable for type metadata for [Int32]);
    goto LABEL_178;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Int32>]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v93 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asInt2Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    uint64_t v94 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D10VyAIGXEfU_Tf1cn_n((uint64_t)v72);
LABEL_131:
    uint64_t v95 = v94;
    swift_bridgeObjectRelease();
    uint64_t v338 = v95;
    uint64_t v96 = (uint64_t *)&demangling cache variable for type metadata for [[Int32]];
LABEL_132:
    __swift_instantiateConcreteTypeFromMangledName(v96);
    uint64_t v72 = (__n128 *)_bridgeAnythingToObjectiveC<A>(_:)();
    outlined destroy of Any?((uint64_t)&v338, v96);
    goto LABEL_178;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Int32>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v97 = (void *)AnyAttribute.value.getter();
    uint64_t v98 = RIOPxrVtValueRef.asInt3.getter();
    unint64_t v100 = v99;
    char v102 = v101;

    if (v102) {
      goto LABEL_177;
    }
    v103.n128_u64[0] = v98;
    v103.n128_u64[1] = v100;
    uint64_t v92 = specialized SIMD.asScalarArray()(v103);
    goto LABEL_127;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Int32>]);
  if (swift_dynamicCastMetatype())
  {
    char v104 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asInt3Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    char v105 = specialized SIMD.asScalarArray();
    id v106 = &v327;
LABEL_139:
    uint64_t v94 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D11VyAIGXEfU0_Tf1cn_nTm(v72, (uint64_t)v106, (uint64_t (*)(uint64_t, __n128))v105);
    goto LABEL_131;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Int32>);
  if (swift_dynamicCastMetatype())
  {
    id v107 = (void *)AnyAttribute.value.getter();
    uint64_t v108 = RIOPxrVtValueRef.asInt4.getter();
    unint64_t v110 = v109;
    char v112 = v111;

    if (v112) {
      goto LABEL_177;
    }
    v113.n128_u64[0] = v108;
    v113.n128_u64[1] = v110;
    uint64_t v92 = specialized SIMD.asScalarArray()(v113);
    goto LABEL_127;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Int32>]);
  if (swift_dynamicCastMetatype())
  {
    char v114 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asInt4Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    char v105 = specialized SIMD.asScalarArray();
    id v106 = &v328;
    goto LABEL_139;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCastMetatype())
  {
    int v115 = (void *)AnyAttribute.value.getter();
    uint64_t v116 = RIOPxrVtValueRef.asFloat2.getter();
    char v118 = v117;

    if (v118) {
      goto LABEL_177;
    }
    uint64_t v119 = specialized SIMD.asScalarArray()(*(double *)&v116);
LABEL_149:
    uint64_t v338 = (uint64_t)v119;
    uint64_t v72 = (__n128 *)_bridgeAnythingToObjectiveC<A>(_:)();
    outlined destroy of Any?((uint64_t)&v338, &demangling cache variable for type metadata for [Float]);
    goto LABEL_178;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Float>]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v120 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asFloat2Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    uint64_t v121 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU2_Tf1cn_n((uint64_t)v72);
    goto LABEL_153;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v123 = (void *)AnyAttribute.value.getter();
    uint64_t v124 = RIOPxrVtValueRef.asFloat3.getter();
    unint64_t v126 = v125;
    char v128 = v127;

    if (v128) {
      goto LABEL_177;
    }
    v129.n128_u64[0] = v124;
    v129.n128_u64[1] = v126;
    uint64_t v119 = specialized SIMD.asScalarArray()(v129);
    goto LABEL_149;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    int v130 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asFloat3Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    uint64_t v131 = specialized SIMD.asScalarArray();
    uint64_t v132 = &v329;
LABEL_160:
    uint64_t v121 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU3_Tf1cn_nTm(v72, (uint64_t)v132, (uint64_t (*)(uint64_t, __n128))v131);
LABEL_153:
    uint64_t v122 = v121;
    swift_bridgeObjectRelease();
    uint64_t v338 = v122;
    uint64_t v96 = (uint64_t *)&demangling cache variable for type metadata for [[Float]];
    goto LABEL_132;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v133 = (void *)AnyAttribute.value.getter();
    uint64_t v134 = RIOPxrVtValueRef.asFloat4.getter();
    unint64_t v136 = v135;
    char v138 = v137;

    if (v138) {
      goto LABEL_177;
    }
    v139.n128_u64[0] = v134;
    v139.n128_u64[1] = v136;
    uint64_t v119 = specialized SIMD.asScalarArray()(v139);
    goto LABEL_149;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Float>]);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v140 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asFloat4Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    uint64_t v131 = specialized SIMD.asScalarArray();
    uint64_t v132 = &v330;
    goto LABEL_160;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v141 = (void *)AnyAttribute.value.getter();
    uint64_t v142 = RIOPxrVtValueRef.asDouble2.getter();
    unint64_t v144 = v143;
    char v146 = v145;

    if (v146) {
      goto LABEL_177;
    }
    v147.n128_u64[0] = v142;
    v147.n128_u64[1] = v144;
    uint64_t v148 = specialized SIMD.asScalarArray()(v147);
LABEL_170:
    uint64_t v338 = (uint64_t)v148;
    uint64_t v72 = (__n128 *)_bridgeAnythingToObjectiveC<A>(_:)();
    outlined destroy of Any?((uint64_t)&v338, &demangling cache variable for type metadata for [Double]);
    goto LABEL_178;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Double>]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v149 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asDouble2Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    uint64_t v150 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU5_Tf1cn_n((uint64_t)v72);
    goto LABEL_174;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v152 = (void *)AnyAttribute.value.getter();
    RIOPxrVtValueRef.asDouble3.getter((uint64_t)v341);

    outlined init with take of (URL, __REAsset)((uint64_t)v341, (uint64_t)&v347, &demangling cache variable for type metadata for SIMD3<Double>?);
    if (v349) {
      goto LABEL_177;
    }
    uint64_t v148 = specialized SIMD.asScalarArray()(v347, v348);
    goto LABEL_170;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v153 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asDouble3Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    uint64_t v154 = (uint64_t (*)(uint64_t, __n128, __n128))specialized SIMD.asScalarArray();
    uint64_t v155 = &v331;
LABEL_184:
    uint64_t v150 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU6_Tf1cn_nTm(v72, (uint64_t)v155, v154);
LABEL_174:
    uint64_t v151 = v150;
    swift_bridgeObjectRelease();
    uint64_t v338 = v151;
    uint64_t v96 = &demangling cache variable for type metadata for [[Double]];
    goto LABEL_132;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  if (swift_dynamicCastMetatype())
  {
    char v156 = (void *)AnyAttribute.value.getter();
    RIOPxrVtValueRef.asDouble4.getter((uint64_t)v342);

    outlined init with take of (URL, __REAsset)((uint64_t)v342, (uint64_t)v350, &demangling cache variable for type metadata for SIMD4<Double>?);
    if (v351) {
      goto LABEL_177;
    }
    uint64_t v148 = specialized SIMD.asScalarArray()(v350[0], v350[1]);
    goto LABEL_170;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Double>]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v157 = (void *)AnyAttribute.value.getter();
    uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asDouble4Array.getter();

    if (!v72) {
      goto LABEL_178;
    }
    uint64_t v154 = (uint64_t (*)(uint64_t, __n128, __n128))specialized SIMD.asScalarArray();
    uint64_t v155 = &v332;
    goto LABEL_184;
  }
  type metadata accessor for simd_quatf(0);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v158 = (void *)AnyAttribute.value.getter();
    uint64_t v159 = RIOPxrVtValueRef.asQuatf.getter();
    unint64_t v1 = v160;
    char v162 = v161;

    if ((v162 & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t v163 = swift_allocObject();
      uint64_t v164 = specialized static Array._adoptStorage(_:count:)(v163, 4);
      v165->i32[0] = vdupq_n_s64(v1).i32[3];
      v165->i32[1] = v159;
      v165[1] = vext_s8((int8x8_t)v159, (int8x8_t)v1, 4uLL);
      destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v164);
LABEL_195:
      unint64_t v1 = (unint64_t)Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v326, sel___swift_setObject_forKeyedSubscript_, v1, specialized _bridgeAnythingToObjectiveC<A>(_:)());
      swift_bridgeObjectRelease();

      goto LABEL_179;
    }
    goto LABEL_250;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatf]);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v1 = AnyAttribute.value.getter();
    uint64_t v166 = RIOPxrVtValueRef.asQuatfArray.getter();

    if (!v166) {
      goto LABEL_250;
    }
    uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v167 = *(void *)(v166 + 16);
    if (v167)
    {
      uint64_t v168 = 0;
      do
      {
        int8x16_t v318 = *(int8x16_t *)(v166 + 16 * v168++ + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
        uint64_t v169 = swift_allocObject();
        uint64_t v170 = specialized static Array._adoptStorage(_:count:)(v169, 4);
        int8x16_t *v171 = vextq_s8(v318, v318, 0xCuLL);
        uint64_t v172 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v170);
        specialized Array.append(_:)(v172, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      }
      while (v167 != v168);
    }
LABEL_205:
    swift_bridgeObjectRelease();
    v176.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
LABEL_206:
    unint64_t v1 = specialized _bridgeAnythingToObjectiveC<A>(_:)();
    objc_msgSend(v326, sel___swift_setObject_forKeyedSubscript_, v176.super.isa, v1);
    swift_bridgeObjectRelease();

    goto LABEL_179;
  }
  type metadata accessor for simd_quatd(0);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v1 = AnyAttribute.value.getter();
    RIOPxrVtValueRef.asQuatd.getter((uint64_t)v343);

    outlined init with take of (URL, __REAsset)((uint64_t)v343, (uint64_t)v352, &demangling cache variable for type metadata for simd_quatd?);
    if ((v353 & 1) == 0)
    {
      int8x16_t v302 = v352[0];
      int8x16_t v309 = v352[1];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v173 = swift_allocObject();
      uint64_t v174 = specialized static Array._adoptStorage(_:count:)(v173, 4);
      *unint64_t v175 = vextq_s8(v309, v302, 8uLL);
      v175[1] = vextq_s8(v302, v309, 8uLL);
      destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v174);
      goto LABEL_195;
    }
LABEL_250:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_180;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatd]);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v1 = AnyAttribute.value.getter();
    uint64_t v177 = RIOPxrVtValueRef.asQuatdArray.getter();

    if (!v177) {
      goto LABEL_250;
    }
    uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v178 = *(void *)(v177 + 16);
    if (v178)
    {
      uint64_t v179 = 0;
      do
      {
        uint64_t v180 = (int8x16_t *)(v177 + 32 * v179);
        int8x16_t v319 = v180[3];
        int8x16_t v310 = v180[2];
        ++v179;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
        uint64_t v181 = swift_allocObject();
        uint64_t v182 = specialized static Array._adoptStorage(_:count:)(v181, 4);
        *unint64_t v183 = vextq_s8(v319, v310, 8uLL);
        v183[1] = vextq_s8(v310, v319, 8uLL);
        uint64_t v184 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v182);
        specialized Array.append(_:)(v184, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      }
      while (v178 != v179);
    }
    goto LABEL_205;
  }
  type metadata accessor for simd_double2x2(0);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v1 = AnyAttribute.value.getter();
    RIOPxrVtValueRef.asMatrix2d.getter((uint64_t)v344);

    outlined init with take of (URL, __REAsset)((uint64_t)v344, (uint64_t)v354, &demangling cache variable for type metadata for simd_double2x2?);
    if (v355) {
      goto LABEL_250;
    }
    __n128 v303 = v354[0];
    __n128 v311 = v354[1];
    uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
    v185 = specialized SIMD.asScalarArray()(v303);
    specialized Array.append(_:)((uint64_t)v185, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v186 = specialized SIMD.asScalarArray()(v311);
LABEL_240:
    specialized Array.append(_:)((uint64_t)v186, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    goto LABEL_195;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double2x2]);
  if (!swift_dynamicCastMetatype())
  {
    type metadata accessor for simd_double3x3(0);
    if (swift_dynamicCastMetatype())
    {
      unint64_t v1 = AnyAttribute.value.getter();
      RIOPxrVtValueRef.asMatrix3d.getter((uint64_t)v345);

      outlined init with take of (URL, __REAsset)((uint64_t)v345, (uint64_t)&v356, &demangling cache variable for type metadata for simd_double3x3?);
      if (v362) {
        goto LABEL_250;
      }
      __n128 v285 = v356;
      double v289 = v357;
      __n128 v293 = v358;
      double v297 = v359;
      __n128 v304 = v360;
      double v313 = v361;
      uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
      uint64_t v201 = specialized SIMD.asScalarArray()(v285, v289);
      specialized Array.append(_:)((uint64_t)v201, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      char v202 = specialized SIMD.asScalarArray()(v293, v297);
      specialized Array.append(_:)((uint64_t)v202, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v186 = specialized SIMD.asScalarArray()(v304, v313);
      goto LABEL_240;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double3x3]);
    if (swift_dynamicCastMetatype())
    {
      unint64_t v1 = AnyAttribute.value.getter();
      uint64_t v203 = RIOPxrVtValueRef.asMatrix3dArray.getter();

      uint64_t v286 = v203;
      if (!v203) {
        goto LABEL_250;
      }
      uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
      uint64_t result = specialized Array.count.getter(v203);
      if (result < 0) {
        goto LABEL_316;
      }
      uint64_t v204 = result;
      if (result)
      {
        unint64_t v205 = 0;
        long long v206 = (__n128 *)(v203 + 96);
        while (*(void *)(v286 + 16) > v205)
        {
          ++v205;
          __n128 v290 = v206[-4];
          __n128 v294 = v206[-3];
          __n128 v207 = v206[-1];
          __n128 v298 = v206[-2];
          __n128 v320 = v206[1];
          __n128 v208 = *v206;
          v206 += 6;
          double v305 = v207.n128_f64[0];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
          uint64_t v209 = swift_allocObject();
          uint64_t v210 = specialized static Array._adoptStorage(_:count:)(v209, 1);
          void *v211 = specialized SIMD.asScalarArray()(v290, v294.n128_f64[0]);
          uint64_t v212 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v210);
          specialized Array.append(_:)(v212, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          uint64_t v213 = swift_allocObject();
          uint64_t v214 = specialized static Array._adoptStorage(_:count:)(v213, 1);
          *unint64_t v215 = specialized SIMD.asScalarArray()(v298, v305);
          uint64_t v216 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v214);
          specialized Array.append(_:)(v216, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          uint64_t v217 = swift_allocObject();
          uint64_t v218 = specialized static Array._adoptStorage(_:count:)(v217, 1);
          *unint64_t v219 = specialized SIMD.asScalarArray()(v208, v320.n128_f64[0]);
          uint64_t v220 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v218);
          uint64_t result = specialized Array.append(_:)(v220, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          if (v204 == v205) {
            goto LABEL_254;
          }
        }
        goto LABEL_317;
      }
      goto LABEL_254;
    }
    type metadata accessor for simd_double4x4(0);
    if (swift_dynamicCastMetatype())
    {
      unint64_t v1 = AnyAttribute.value.getter();
      RIOPxrVtValueRef.asMatrix4d.getter((uint64_t)v346);

      outlined init with take of (URL, __REAsset)((uint64_t)v346, (uint64_t)v363, &demangling cache variable for type metadata for simd_double4x4?);
      if (_sSo14simd_double4x4aSgWOg((uint64_t)v363) == 1) {
        goto LABEL_250;
      }
      __n128 v282 = v363[0];
      __n128 v283 = v363[1];
      __n128 v287 = v363[2];
      __n128 v291 = v363[3];
      __n128 v295 = v363[4];
      __n128 v299 = v363[5];
      __n128 v306 = v363[6];
      __n128 v314 = v363[7];
      uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
      char v221 = specialized SIMD.asScalarArray()(v282, v283);
      specialized Array.append(_:)((uint64_t)v221, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      char v222 = specialized SIMD.asScalarArray()(v287, v291);
      specialized Array.append(_:)((uint64_t)v222, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      unint64_t v223 = specialized SIMD.asScalarArray()(v295, v299);
      specialized Array.append(_:)((uint64_t)v223, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v186 = specialized SIMD.asScalarArray()(v306, v314);
      goto LABEL_240;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double4x4]);
    if (swift_dynamicCastMetatype())
    {
      unint64_t v1 = AnyAttribute.value.getter();
      uint64_t v224 = RIOPxrVtValueRef.asMatrix4dArray.getter();

      v282.n128_u64[0] = v224;
      if (!v224) {
        goto LABEL_250;
      }
      uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
      uint64_t result = specialized Array.count.getter(v224);
      if (result < 0) {
        goto LABEL_318;
      }
      uint64_t v225 = result;
      if (result)
      {
        unint64_t v226 = 0;
        uint64_t v227 = (__n128 *)(v224 + 128);
        while (*(void *)(v282.n128_u64[0] + 16) > v226)
        {
          ++v226;
          __n128 v284 = v227[-6];
          __n128 v288 = v227[-5];
          __n128 v292 = v227[-4];
          __n128 v296 = v227[-3];
          __n128 v228 = v227[-1];
          __n128 v300 = v227[-2];
          __n128 v321 = v227[1];
          __n128 v229 = *v227;
          v227 += 8;
          __n128 v307 = v228;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
          uint64_t v230 = swift_allocObject();
          uint64_t v231 = specialized static Array._adoptStorage(_:count:)(v230, 1);
          *unint64_t v232 = specialized SIMD.asScalarArray()(v284, v288);
          uint64_t v233 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v231);
          specialized Array.append(_:)(v233, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          uint64_t v234 = swift_allocObject();
          uint64_t v235 = specialized static Array._adoptStorage(_:count:)(v234, 1);
          *int v236 = specialized SIMD.asScalarArray()(v292, v296);
          uint64_t v237 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v235);
          specialized Array.append(_:)(v237, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          uint64_t v238 = swift_allocObject();
          uint64_t v239 = specialized static Array._adoptStorage(_:count:)(v238, 1);
          *unint64_t v240 = specialized SIMD.asScalarArray()(v300, v307);
          uint64_t v241 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v239);
          specialized Array.append(_:)(v241, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          uint64_t v242 = swift_allocObject();
          uint64_t v243 = specialized static Array._adoptStorage(_:count:)(v242, 1);
          *uint64_t v244 = specialized SIMD.asScalarArray()(v229, v321);
          uint64_t v245 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v243);
          uint64_t result = specialized Array.append(_:)(v245, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          if (v225 == v226) {
            goto LABEL_254;
          }
        }
        goto LABEL_319;
      }
      goto LABEL_254;
    }
    if (swift_dynamicCastMetatype())
    {
      unint64_t v246 = (void *)AnyAttribute.value.getter();
      uint64_t v247 = RIOPxrVtValueRef.asString.getter();
      uint64_t v249 = v248;

      if (!v249) {
        goto LABEL_177;
      }
      v71.super.Class isa = (Class)MEMORY[0x23ECB9F30](v247, v249);
      goto LABEL_103;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v250 = (void *)AnyAttribute.value.getter();
      uint64_t v251 = RIOPxrVtValueRef.asStringArray.getter();

      if (!v251) {
        goto LABEL_177;
      }
LABEL_102:
      v71.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
LABEL_103:
      uint64_t v72 = (__n128 *)v71.super.isa;
      swift_bridgeObjectRelease();
      goto LABEL_178;
    }
    if (swift_dynamicCastMetatype())
    {
      v252 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asToken.getter((uint64_t *)&v340);

      uint64_t v253 = v340;
      if (!v340) {
        goto LABEL_177;
      }
      uint64_t v338 = (uint64_t)v340;
      uint64_t v254 = ToolsFoundations.Token.stringValue.getter();
LABEL_273:
      uint64_t v262 = v254;
      uint64_t v263 = v255;

      uint64_t v338 = v262;
      uint64_t v339 = v263;
      uint64_t v72 = (__n128 *)_bridgeAnythingToObjectiveC<A>(_:)();
      outlined destroy of String((uint64_t)&v338);
      goto LABEL_178;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolsFoundations.Token]);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v256 = (void *)AnyAttribute.value.getter();
      uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asTokenArray.getter();

      if (!v72) {
        goto LABEL_178;
      }
      int64_t v257 = (uint64_t (*)(void))MEMORY[0x263F37940];
      unint64_t v258 = &v333;
    }
    else
    {
      if (swift_dynamicCastMetatype())
      {
        unint64_t v259 = (void *)AnyAttribute.value.getter();
        RIOPxrVtValueRef.asPath.getter((uint64_t *)&v340);

        uint64_t v253 = v340;
        if (!v340) {
          goto LABEL_177;
        }
        uint64_t v338 = (uint64_t)v340;
        uint64_t v254 = SceneDescriptionFoundations.Path.string.getter();
        goto LABEL_273;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.Path]);
      if (swift_dynamicCastMetatype())
      {
        uint64_t v260 = (void *)AnyAttribute.value.getter();
        uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asPathListOp.getter();

        if (!v72) {
          goto LABEL_178;
        }
        int64_t v257 = (uint64_t (*)(void))MEMORY[0x263F37820];
        unint64_t v258 = &v334;
      }
      else
      {
        if (swift_dynamicCastMetatype())
        {
          uint64_t v261 = (void *)AnyAttribute.value.getter();
          RIOPxrVtValueRef.asAssetPath.getter((uint64_t *)&v340);

          uint64_t v253 = v340;
          if (!v340) {
            goto LABEL_177;
          }
          uint64_t v338 = (uint64_t)v340;
          uint64_t v254 = SceneDescriptionFoundations.AssetPath.string.getter();
          goto LABEL_273;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath]);
        if (!swift_dynamicCastMetatype())
        {
          v176.super.Class isa = (Class)MEMORY[0x23ECB9F30](0xD00000000000003CLL, 0x800000023AAAE8D0);
          goto LABEL_206;
        }
        uint64_t v264 = (void *)AnyAttribute.value.getter();
        uint64_t v72 = (__n128 *)RIOPxrVtValueRef.asAssetPathArray.getter();

        if (!v72) {
          goto LABEL_178;
        }
        int64_t v257 = (uint64_t (*)(void))MEMORY[0x263F37760];
        unint64_t v258 = &v335;
      }
    }
    uint64_t v265 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_SSs5NeverOTg503_s9d63IO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSSAA16fg2O5H7VXEfU8_Tf1cn_nTm((uint64_t)v72, (uint64_t)v258, v257);
    swift_bridgeObjectRelease();
    uint64_t v338 = v265;
    uint64_t v72 = (__n128 *)_bridgeAnythingToObjectiveC<A>(_:)();
    outlined destroy of Any?((uint64_t)&v338, &demangling cache variable for type metadata for [String]);
    goto LABEL_178;
  }
  unint64_t v1 = AnyAttribute.value.getter();
  uint64_t v187 = RIOPxrVtValueRef.asMatrix2dArray.getter();

  if (!v187) {
    goto LABEL_250;
  }
  uint64_t v338 = specialized static Array._allocateUninitialized(_:)(0);
  uint64_t result = specialized Array._getCount()(v187);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_315;
  }
  uint64_t v189 = result;
  if (!result)
  {
LABEL_254:
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Double]]);
    goto LABEL_195;
  }
  unint64_t v190 = 0;
  unint64_t v191 = (__n128 *)(v187 + 48);
  while (*(void *)(v187 + 16) > v190)
  {
    ++v190;
    __n128 v312 = v191[-1];
    __n128 v192 = *v191;
    v191 += 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
    uint64_t v193 = swift_allocObject();
    uint64_t v194 = specialized static Array._adoptStorage(_:count:)(v193, 1);
    *uint64_t v195 = specialized SIMD.asScalarArray()(v312);
    uint64_t v196 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v194);
    specialized Array.append(_:)(v196, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v197 = swift_allocObject();
    uint64_t v198 = specialized static Array._adoptStorage(_:count:)(v197, 1);
    *uint64_t v199 = specialized SIMD.asScalarArray()(v192);
    uint64_t v200 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v198);
    uint64_t result = specialized Array.append(_:)(v200, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    if (v189 == v190) {
      goto LABEL_254;
    }
  }
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
  return result;
}

uint64_t specialized _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t closure #13 in componentPrimToDictionary(component:)()
{
  unint64_t v0 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (String.count.getter() < 1) {
    id v1 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v1 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v2 = v1;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  char v3 = static _CFObject.== infix(_:_:)();

  if (v3) {
    return 1;
  }
  uint64_t v4 = (void *)RIOPxrUsdPrimCopyTypeName();
  id v5 = String.count.getter() < 1
     ? (id)RIOPxrTfTokenEmpty()
     : (id)RIOPxrTfTokenCreateWithCString();
  uint64_t v6 = v5;
  char v7 = static _CFObject.== infix(_:_:)();

  if (v7) {
    return 1;
  }
  uint64_t v8 = (void *)RIOPxrUsdPrimCopyTypeName();
  id v9 = String.count.getter() < 1
     ? (id)RIOPxrTfTokenEmpty()
     : (id)RIOPxrTfTokenCreateWithCString();
  unint64_t v10 = v9;
  char v11 = static _CFObject.== infix(_:_:)();

  if (v11) {
    return 1;
  }
  unint64_t v13 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (String.count.getter() < 1) {
    id v14 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v14 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v15 = v14;
  char v16 = static _CFObject.== infix(_:_:)();

  return v16 & 1;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x270F9DBA0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(void *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

uint64_t _sSo14simd_double4x4aSgWOg(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t Stage.hasPrim(at:)()
{
  return RIOPxrUsdStageHasPrimAtPrimPath();
}

uint64_t Stage.prim(of:at:)()
{
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = PrimIfNeeded;
  return result;
}

void Stage.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)RIOPxrUsdStageCopyRootLayer();
  id v6 = (id)RIOPxrSdfLayerCopyCustomLayerDataValue();

  if (v6)
  {
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);
  }
  else
  {
    id v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    v5(a2, 1, 1, a1);
  }
}

uint64_t Stage.defaultPrim.getter()
{
  return Stage.defaultPrim.getter(MEMORY[0x263F37A98]);
}

void *Stage.createImportSession(engine:pipelineVersion:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __EngineRef();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__coreEngine.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t result = (void *)RIOImportSessionCreateWithStage();
  if (result)
  {
    char v7 = result;
    uint64_t v8 = type metadata accessor for Entity();
    type metadata accessor for ImportSession(0);
    swift_allocObject();
    return specialized ImportSession.init<A>(core:entityType:)(v7, v8);
  }
  return result;
}

uint64_t static Stage.LoadError.== infix(_:_:)()
{
  return 1;
}

void Stage.LoadError.hash(into:)()
{
}

Swift::Int Stage.LoadError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t Stage.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = RIOPxrUsdStageCreateInMemory();
  return v0;
}

uint64_t Stage.init()()
{
  *(void *)(v0 + 16) = RIOPxrUsdStageCreateInMemory();
  return v0;
}

uint64_t Stage.__allocating_init(identifier:buffer:length:)()
{
  uint64_t v0 = swift_allocObject();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v1 = RIOPxrUsdStageCreateWithInMemoryBuffer();
  swift_release();
  if (v1)
  {
    *(void *)(v0 + 16) = v1;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t Stage.init(identifier:buffer:length:)()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v1 = RIOPxrUsdStageCreateWithInMemoryBuffer();
  swift_release();
  if (v1)
  {
    *(void *)(v0 + 16) = v1;
  }
  else
  {
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t Stage.__allocating_init(identifier:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  Stage.init(identifier:data:)(a1, a2, a3, a4);
  return v8;
}

uint64_t Stage.init(identifier:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v8 = RIOPxrUsdStageCreateWithInMemoryDataBufferWithErrorReporting();

  swift_release();
  if (v8)
  {
    outlined consume of Data._Representation(a3, a4);
    *(void *)(v4 + 16) = v8;
  }
  else
  {
    lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError();
    swift_allocError();
    swift_willThrow();
    outlined consume of Data._Representation(a3, a4);
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
  }
  return v4;
}

uint64_t Stage.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Stage.init(from:)(a1);
  return v2;
}

uint64_t Stage.init(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()((NSURL *)*MEMORY[0x263EF8340]);
  id v5 = v4;
  uint64_t v6 = RIOPxrUsdStageCreateWithFileURLWithErrorReporting();

  if (v6)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
    *(void *)(v2 + 16) = v6;
  }
  else
  {
    lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError();
    swift_allocError();
    swift_willThrow();
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t Stage.__allocating_init(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  URL._bridgeToObjectiveC()(v3);
  id v5 = v4;
  uint64_t v6 = RIOPxrUsdStageCreateWithFileURL();

  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  if (v6)
  {
    *(void *)(v2 + 16) = v6;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t Stage.init(contentsOf:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  uint64_t v3 = v2;
  URL._bridgeToObjectiveC()(a2);
  uint64_t v6 = v5;
  uint64_t v7 = RIOPxrUsdStageCreateWithFileURL();

  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  if (v7)
  {
    *(void *)(v3 + 16) = v7;
  }
  else
  {
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t Stage.__allocating_init(from:)()
{
  uint64_t v0 = swift_allocObject();
  Stage.init(from:)();
  return v0;
}

uint64_t Stage.init(from:)()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v1 = RIOPxrUsdStageCreateWithFilePathWithErrorReporting();
  swift_release();
  if (v1)
  {
    *(void *)(v0 + 16) = v1;
  }
  else
  {
    lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError();
    swift_allocError();
    swift_willThrow();
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
  }
  return v0;
}

uint64_t Stage.__allocating_init(withFilePath:)(uint64_t a1, uint64_t a2)
{
  return Stage.__allocating_init(withFilePath:)(a1, a2, MEMORY[0x263F37AD0]);
}

uint64_t Stage.init(withFilePath:)(uint64_t a1, uint64_t a2)
{
  return Stage.init(withFilePath:)(a1, a2, MEMORY[0x263F37AD0]);
}

uint64_t Stage.__allocating_init(contents:)(uint64_t a1, uint64_t a2)
{
  return Stage.__allocating_init(withFilePath:)(a1, a2, MEMORY[0x263F37AD8]);
}

uint64_t Stage.__allocating_init(withFilePath:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3(v5 + 32);
  swift_release();
  if (v6)
  {
    *(void *)(v4 + 16) = v6;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v4;
}

uint64_t Stage.init(contents:)(uint64_t a1, uint64_t a2)
{
  return Stage.init(withFilePath:)(a1, a2, MEMORY[0x263F37AD8]);
}

uint64_t Stage.init(withFilePath:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3(v5 + 32);
  swift_release();
  if (v6)
  {
    *(void *)(v3 + 16) = v6;
  }
  else
  {
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t static Stage.isSupportedFile(_:)()
{
  URL.absoluteString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t IsSupportedFile = RIOPxrUsdStageIsSupportedFile();
  swift_release();
  return IsSupportedFile;
}

uint64_t Stage.deinit()
{
  return v0;
}

uint64_t Stage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static Stage.makeTopLevelEntityStage(from:)()
{
  uint64_t TopLevelEntityFromStage = RIOPxrUsdUtilsCreateTopLevelEntityFromStage();
  type metadata accessor for Stage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = TopLevelEntityFromStage;
  return result;
}

uint64_t Stage.description.getter()
{
  uint64_t v0 = (void *)RIOPxrUsdStageCopyUSDA();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

Swift::String __swiftcall Stage.toString()()
{
  uint64_t v0 = (void *)RIOPxrUsdStageCopyUSDA();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  uint64_t v4 = v1;
  uint64_t v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t Stage.debugDescription.getter()
{
  uint64_t v0 = (void *)RIOPxrUsdStageCopyUSDA();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0xA3E65676174533CLL;
}

uint64_t Stage.metersPerUnit.getter()
{
  return RIOPxrUsdStageGetMetersPerUnit();
}

uint64_t Stage.metersPerUnit.setter()
{
  return MEMORY[0x270F22E00](*(void *)(v0 + 16));
}

uint64_t (*Stage.metersPerUnit.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrUsdStageGetMetersPerUnit();
  *a1 = v3;
  return Stage.metersPerUnit.modify;
}

uint64_t Stage.metersPerUnit.modify(uint64_t a1)
{
  return MEMORY[0x270F22E00](*(void *)(a1 + 8));
}

uint64_t key path getter for Stage.defaultPrim : Stage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdStageCopyDefaultPrim();
  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *a1 = result;
  return result;
}

uint64_t key path setter for Stage.defaultPrim : Stage(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  uint64_t v2 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, type metadata accessor for RIOPxrUsdObjectRef);
  char v3 = static _CFObject.== infix(_:_:)();

  if (v3)
  {
    RIOPxrUsdStageClearDefaultPrim();
  }
  else
  {
    id v4 = *(id *)(v1 + 16);
    RIOPxrUsdStageSetDefaultPrim();
  }
  return swift_release();
}

uint64_t Stage.defaultPrim.setter(uint64_t a1)
{
  uint64_t v2 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, type metadata accessor for RIOPxrUsdObjectRef);
  char v3 = static _CFObject.== infix(_:_:)();

  if (v3)
  {
    RIOPxrUsdStageClearDefaultPrim();
  }
  else
  {
    id v4 = *(id *)(a1 + 16);
    RIOPxrUsdStageSetDefaultPrim();
  }
  return swift_release();
}

uint64_t Stage.pseudoRootPrim()()
{
  return Stage.defaultPrim.getter(MEMORY[0x263F37AA8]);
}

uint64_t Stage.defaultPrim.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(*(void *)(v1 + 16));
  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t (*Stage.defaultPrim.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = *(void *)(v1 + 16);
  uint64_t v3 = RIOPxrUsdStageCopyDefaultPrim();
  type metadata accessor for Prim();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *a1 = v4;
  return Stage.defaultPrim.modify;
}

uint64_t Stage.defaultPrim.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_retain();
    uint64_t v3 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
    type metadata accessor for RIOPxrUsdObjectRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, type metadata accessor for RIOPxrUsdObjectRef);
    char v4 = static _CFObject.== infix(_:_:)();

    if (v4)
    {
      RIOPxrUsdStageClearDefaultPrim();
    }
    else
    {
      id v7 = *(id *)(v2 + 16);
      RIOPxrUsdStageSetDefaultPrim();
    }
    swift_release();
  }
  else
  {
    uint64_t v5 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
    type metadata accessor for RIOPxrUsdObjectRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, type metadata accessor for RIOPxrUsdObjectRef);
    char v6 = static _CFObject.== infix(_:_:)();

    if (v6)
    {
      RIOPxrUsdStageClearDefaultPrim();
    }
    else
    {
      id v8 = *(id *)(v2 + 16);
      RIOPxrUsdStageSetDefaultPrim();
    }
  }
  return swift_release();
}

uint64_t Stage.addReference(of:at:from:)@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *a2;
  URL.absoluteString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int IsSupportedFile = RIOPxrUsdStageIsSupportedFile();
  uint64_t result = swift_release();
  if (IsSupportedFile)
  {
    uint64_t result = URL.isFileURL.getter();
    if (result)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
      if (v10)
      {
        unint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
        id v14 = v10;
        v13(v9, v6);
        id v22 = v14;
      }
      else
      {
        URL.lastPathComponent.getter();
        Stage.generatePrimPath(for:)((uint64_t *)&v22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        id v14 = v22;
      }
      id v17 = (id)RIOPxrTfTokenEmpty();
      uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
      type metadata accessor for Prim();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = PrimIfNeeded;

      URL.path.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int v19 = RIOPxrUsdPrimAddReference();
      uint64_t result = swift_release();
      if (v19)
      {
        char v16 = 0;
      }
      else
      {
        NSNumber v20 = (void *)RIOPxrUsdObjectCopyPath();
        RIOPxrUsdStageRemovePrim();

        uint64_t result = swift_release();
        char v16 = 1;
        uint64_t v15 = 2;
      }
    }
    else
    {
      uint64_t v15 = 1;
      char v16 = 1;
    }
  }
  else
  {
    uint64_t v15 = 0;
    char v16 = 1;
  }
  *(void *)a3 = v15;
  *(unsigned char *)(a3 + 8) = v16;
  return result;
}

uint64_t Stage.generatePrimPath(for:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)MEMORY[0x23ECB9F30]();
  id v3 = objc_msgSend(v2, sel_stringByDeletingPathExtension);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.utf8CString.getter();
  char v4 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  int HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

  if (HasPrimAtPrimPath)
  {
    uint64_t v6 = 1;
    while (1)
    {
      swift_bridgeObjectRetain();
      v7._countAndFlagsBits = 95;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v9 = (void *)RIOPxrSdfPathCreateFromCString();
      swift_release();
      int v10 = RIOPxrUsdStageHasPrimAtPrimPath();

      if (!v10) {
        break;
      }
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
        goto LABEL_7;
      }
    }
    v13._countAndFlagsBits = 95;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v12 = RIOPxrSdfPathCreateFromCString();
  }
  else
  {
LABEL_7:
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v12 = RIOPxrSdfPathCreateFromCString();
  }
  uint64_t result = swift_release();
  *a1 = v12;
  return result;
}

uint64_t Stage.removePrim(at:)()
{
  return RIOPxrUsdStageRemovePrim();
}

uint64_t Stage.addReference(identifier:at:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v6 = *a3;
  }
  else
  {
    Swift::String v7 = (void *)MEMORY[0x23ECB9F30](a1, a2);
    id v8 = objc_msgSend(v7, sel_stringByDeletingPathExtension);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Stage.generatePrimPath(for:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v6 = v16;
  }
  id v9 = v5;
  id v10 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = PrimIfNeeded;

  String.utf8CString.getter();
  int v13 = RIOPxrUsdPrimAddReference();
  uint64_t result = swift_release();
  if (!v13)
  {
    uint64_t v15 = (void *)RIOPxrUsdObjectCopyPath();
    RIOPxrUsdStageRemovePrim();

    uint64_t result = swift_release();
    uint64_t v12 = 2;
  }
  *(void *)a4 = v12;
  *(unsigned char *)(a4 + 8) = v13 ^ 1;
  return result;
}

uint64_t Stage.over(at:)(void *a1)
{
  return Stage.over(at:)(a1, MEMORY[0x263F37AC8]);
}

uint64_t Stage.copyPrim(at:to:includingDescendants:)()
{
  uint64_t v0 = (void *)RIOPxrUsdStageCopyRootLayer();
  uint64_t v1 = (void *)RIOPxrUsdStageCopyRootLayer();
  RIOPxrUsdUtilsSdfCopySpec();

  id v2 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = PrimIfNeeded;
  return result;
}

uint64_t Stage.rootLayer()()
{
  return Stage.rootLayer()(MEMORY[0x263F37AB0]);
}

uint64_t Stage.classPrim(at:)(void *a1)
{
  return Stage.over(at:)(a1, MEMORY[0x263F37AC0]);
}

uint64_t Stage.over(at:)(void *a1, uint64_t (*a2)(void, void))
{
  uint64_t v3 = a2(*(void *)(v2 + 16), *a1);
  type metadata accessor for Prim();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  return result;
}

uint64_t Stage.usedLayers()()
{
  uint64_t v0 = (void *)RIOPxrUsdStageCopyUsedLayers();
  if (v0)
  {
    type metadata accessor for RIOPxrSdfLayerRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = MEMORY[0x263F8EE78];
  if (!(MEMORY[0x263F8EE78] >> 62))
  {
    uint64_t v2 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_5;
    }
LABEL_14:
    swift_bridgeObjectRelease();

    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4 + 1;
        uint64_t v6 = MEMORY[0x23ECBA630]();
        type metadata accessor for SceneDescriptionFoundations.Layer();
        *(void *)(swift_allocObject() + 16) = v6;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v4 = v5;
      }
      while (v2 != v5);
    }
    else
    {
      Swift::String v7 = (void **)(v1 + 32);
      type metadata accessor for SceneDescriptionFoundations.Layer();
      do
      {
        id v8 = *v7++;
        *(void *)(swift_allocObject() + 16) = v8;
        id v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v2;
      }
      while (v2);
    }
    uint64_t v10 = v11;
    swift_bridgeObjectRelease();

    return v10;
  }
  __break(1u);
  return result;
}

uint64_t Stage.sessionLayer()()
{
  return Stage.rootLayer()(MEMORY[0x263F37AB8]);
}

uint64_t Stage.editTarget()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageCopyEditTarget();
  *a1 = result;
  return result;
}

uint64_t Stage.setEditTarget(to:)()
{
  return RIOPxrUsdStageSetEditTarget();
}

void Stage.setEditTarget(on:)()
{
  uint64_t v0 = (void *)RIOPxrUsdEditTargetCreateWithLayer();
  RIOPxrUsdStageSetEditTarget();
}

Swift::String __swiftcall Stage.toFlattenedString(addSourceFileComment:)(Swift::Bool addSourceFileComment)
{
  uint64_t v1 = (void *)RIOPxrUsdStageCopyFlattenedUSDA();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::Void __swiftcall Stage.reload()()
{
  MEMORY[0x270F22DA0](*(void *)(v0 + 16));
}

void Stage.loadThenUnload(loads:unloads:includeDescendants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    unint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v6 = specialized Set.startIndex.getter(a1);
    int v8 = v7;
    char v10 = v9 & 1;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(a1 + 56 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(a1 + 36) != v8) {
        goto LABEL_22;
      }
      id v11 = *(id *)(*(void *)(a1 + 48) + 8 * v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v12 = specialized _NativeSet.index(after:)(v6, v8, v10 & 1, a1);
      int64_t v6 = v12;
      int v8 = v13;
      char v10 = v14 & 1;
      if (!--v3)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v12, v13, v14 & 1);
        unint64_t v4 = v28;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
LABEL_9:
    specialized Set.init<A>(_:)(v4);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
    v15.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(a2 + 16);
    unint64_t v17 = MEMORY[0x263F8EE78];
    if (!v16)
    {
LABEL_17:
      specialized Set.init<A>(_:)(v17);
      swift_bridgeObjectRelease();
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      RIOPxrUsdStageLoadThenUnload();

      return;
    }
    unint64_t v29 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v18 = specialized Set.startIndex.getter(a2);
    int v20 = v19;
    char v22 = v21 & 1;
    while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(unsigned char *)(a2 + 32))
    {
      if (((*(void *)(a2 + 56 + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(a2 + 36) != v20) {
        goto LABEL_25;
      }
      id v23 = *(id *)(*(void *)(a2 + 48) + 8 * v18);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v24 = specialized _NativeSet.index(after:)(v18, v20, v22 & 1, a2);
      int64_t v18 = v24;
      int v20 = v25;
      char v22 = v26 & 1;
      if (!--v16)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v24, v25, v26 & 1);
        unint64_t v17 = v29;
        goto LABEL_17;
      }
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

Swift::Void __swiftcall Stage.save()()
{
  MEMORY[0x270F22DB0](*(void *)(v0 + 16));
}

uint64_t Stage.export(to:sourceFileComment:fileFormatArguments:)@<X0>(uint64_t a1@<X2>, NSURL *a2@<X8>)
{
  URL._bridgeToObjectiveC()(a2);
  unint64_t v4 = v3;
  if (a1) {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v5.super.Class isa = 0;
  }
  uint64_t v6 = RIOPxrUsdStageExportWithFileURL();

  return v6;
}

uint64_t Stage.flatten()()
{
  return Stage.rootLayer()(MEMORY[0x263F37AA0]);
}

uint64_t Stage.rootLayer()(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(*(void *)(v1 + 16));
  type metadata accessor for SceneDescriptionFoundations.Layer();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  return result;
}

void key path getter for Stage.subscript<A>(customLayerDataKey:) : <A>StageA(id *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 16);
  id v5 = *a1;
  Stage.subscript.getter(v4, a3);
}

uint64_t key path setter for Stage.subscript<A>(customLayerDataKey:) : <A>StageA(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v7 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v16 - v10;
  int64_t v12 = *a3;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v16 - v10, a1, v9);
  unint64_t v17 = v12;
  id v14 = v12;
  return Stage.subscript.setter((uint64_t)v11, &v17, v6, v7);
}

uint64_t Stage.subscript.setter(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    int64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    int v19 = (void *)RIOPxrUsdStageCopyRootLayer();
    RIOPxrSdfLayerClearCustomLayerData();

    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    char v21 = (void *)RIOPxrUsdStageCopyRootLayer();
    char v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrSdfLayerSetCustomLayerData();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

void (*Stage.subscript.modify(void *a1, void **a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  double v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  id v15 = v14;
  Stage.subscript.getter(a3, (uint64_t)v13);
  return Stage.subscript.modify;
}

void Stage.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (*a1)[7];
  id v5 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v6 = v2[3];
    uint64_t v7 = v2[4];
    uint64_t v8 = v2[1];
    uint64_t v9 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[5], v3, v6);
    uint64_t v12 = v4;
    Stage.subscript.setter((uint64_t)v5, (void **)&v12, v9, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  }
  else
  {
    uint64_t v10 = v2[1];
    uint64_t v11 = *v2;
    uint64_t v12 = (*a1)[7];
    Stage.subscript.setter((uint64_t)v3, (void **)&v12, v11, v10);
  }
  free(v3);
  free(v5);
  free(v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Stage()
{
  uint64_t v0 = (void *)RIOPxrUsdStageCopyUSDA();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Stage()
{
  return Stage.debugDescription.getter();
}

uint64_t static Stage.== infix(_:_:)()
{
  return RIOPxrUsdStageEqual();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Stage()
{
  return RIOPxrUsdStageEqual();
}

uint64_t static Stage.resetDefaultArResolver()()
{
  return MEMORY[0x270F22ED0]();
}

id Stage.USDError.getter()
{
  id result = (id)RIOPxrUsdStageGetUsdError();
  if (result)
  {
    id v1 = result;
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
    id result = (id)swift_allocError();
    *uint64_t v2 = v1;
  }
  return result;
}

uint64_t Stage.USDErrors.getter()
{
  id v0 = (id)RIOPxrUsdStageGetUsdErrors();
  if (v0)
  {
    id v1 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

Swift::Void __swiftcall Stage.clearUSDError()()
{
  MEMORY[0x270F22C88](*(void *)(v0 + 16));
}

uint64_t closure #1 in Stage.getUSDMessages(isWarning:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 16);
  uint64_t v4 = String.init(cString:)();
  uint64_t v6 = v5;
  swift_beginAccess();
  uint64_t v7 = *(void **)(a2 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 16) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *uint64_t v3 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v3 = v7;
  }
  v7[2] = v10 + 1;
  uint64_t v11 = &v7[2 * v10];
  v11[4] = v4;
  void v11[5] = v6;
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t Stage.USDWarnings.getter()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  id v1 = (uint64_t *)(v0 + 16);
  long long v5[4] = partial apply for closure #1 in Stage.getUSDMessages(isWarning:);
  v5[5] = v0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  uint64_t v5[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  v5[3] = &block_descriptor_6;
  uint64_t v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  RIOPxrUsdStageGatherDiagnostics();
  _Block_release(v2);
  swift_beginAccess();
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

uint64_t Stage.USDStatusMessages.getter()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  id v1 = (uint64_t *)(v0 + 16);
  long long v5[4] = partial apply for closure #1 in Stage.getUSDMessages(isWarning:);
  v5[5] = v0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  uint64_t v5[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  v5[3] = &block_descriptor_5;
  uint64_t v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  RIOPxrUsdStageGatherDiagnostics();
  _Block_release(v2);
  swift_beginAccess();
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

Swift::Void __swiftcall Stage.clearUSDWarnings()()
{
  MEMORY[0x270F22C80](*(void *)(v0 + 16), 1, 0);
}

Swift::Void __swiftcall Stage.clearUSDStatusMessages()()
{
  MEMORY[0x270F22C80](*(void *)(v0 + 16), 0, 1);
}

void Stage.setDiagnosticNotification(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a1;
  v3[5] = a2;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 1107296256;
  v3[2] = thunk for @escaping @callee_guaranteed () -> ();
  v3[3] = &block_descriptor_8;
  uint64_t v2 = _Block_copy(v3);
  swift_retain();
  swift_release();
  RIOPxrUsdStageSetDiagnosticChangeNotification();
  _Block_release(v2);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

BOOL static Stage.MissingReferenceType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Stage.MissingReferenceType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Stage.Error.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Stage.MissingReferenceType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance Stage.MissingReferenceType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Stage.Error()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Stage.MissingReference.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Stage.MissingReference.assetPath.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.primPath.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.referencedPrimPath.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.sourceFile.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.sourcePrimPath.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall Stage.MissingReference.init(type:assetPath:primPath:referencedPrimPath:sourceFile:sourcePrimPath:)(RealityIO::Stage::MissingReference *__return_ptr retstr, RealityIO::Stage::MissingReferenceType type, Swift::String assetPath, Swift::String_optional primPath, Swift::String_optional referencedPrimPath, Swift::String_optional sourceFile, Swift::String_optional sourcePrimPath)
{
  retstr->os_log_type_t type = *(unsigned char *)type;
  retstr->assetPath = assetPath;
  retstr->primPath = primPath;
  retstr->referencedPrimPath = referencedPrimPath;
  retstr->sourceFile.value._countAndFlagsBits = sourceFile.value._countAndFlagsBits;
  *(Swift::String_optional *)&retstr->sourceFile.value._object = *(Swift::String_optional *)&sourceFile.value._object;
  retstr->sourcePrimPath.value._object = sourcePrimPath.value._object;
}

void Stage.MissingReference.hash(into:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[10];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_4;
      }
LABEL_10:
      Hasher._combine(_:)(0);
      if (v4) {
        goto LABEL_5;
      }
LABEL_11:
      Hasher._combine(_:)(0);
      return;
    }
  }
  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_10;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_11;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
}

Swift::Int Stage.MissingReference.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Stage.MissingReference()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Stage.MissingReference()
{
  return Hasher._finalize()();
}

uint64_t static Stage.messageToErrorResult(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v100 = a2;
  uint64_t v101 = a1;
  uint64_t v95 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>.Match?);
  MEMORY[0x270FA5388](v3 - 8);
  char v90 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>.Match);
  uint64_t v89 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v87 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>.Match?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>.Match);
  uint64_t v92 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  unint64_t v88 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>);
  uint64_t v96 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  int64_t v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>);
  uint64_t v97 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  int v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  uint64_t v98 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring));
  Regex.init(_regexString:version:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring, Substring, Substring, Substring));
  __n128 v103 = v20;
  Regex.init(_regexString:version:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring, Substring, Substring, Substring, Substring));
  int64_t v24 = v18;
  Regex.init(_regexString:version:)();
  uint64_t v99 = v21;
  uint64_t v94 = v23;
  Regex.firstMatch(in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?);
    uint64_t v25 = v104;
    char v26 = v103;
    Regex.firstMatch(in:)();
    uint64_t v27 = v92;
    uint64_t v28 = v93;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v8, 1, v93) == 1)
    {
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>.Match?);
      uint64_t v29 = (uint64_t)v90;
      uint64_t v30 = v102;
      Regex.firstMatch(in:)();
      uint64_t v31 = v89;
      uint64_t v32 = v91;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v29, 1, v91) == 1)
      {
        (*(void (**)(char *, uint64_t))(v96 + 8))(v24, v30);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v26, v25);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v94, v99);
        uint64_t result = outlined destroy of Any?(v29, &demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>.Match?);
        unint64_t v34 = v95;
        *uint64_t v95 = 0u;
        v34[1] = 0u;
        v34[2] = 0u;
        void v34[3] = 0u;
        v34[4] = 0u;
        *((void *)v34 + 10) = 0;
      }
      else
      {
        unint64_t v58 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v87, v29, v32);
        Regex.Match.output.getter();
        swift_bridgeObjectRelease();
        uint64_t v59 = v110;
        uint64_t v93 = v109;
        uint64_t v60 = v111;
        uint64_t v61 = v112;
        uint64_t v82 = v117;
        uint64_t v81 = v118;
        uint64_t v62 = v120;
        uint64_t v80 = v119;
        uint64_t v85 = v121;
        char v84 = v122;
        uint64_t v63 = v124;
        uint64_t v83 = v123;
        char v90 = v125;
        unint64_t v88 = v126;
        uint64_t v64 = v128;
        uint64_t v86 = v127;
        uint64_t v101 = MEMORY[0x23ECB9FE0](v113, v114, v115, v116);
        uint64_t v100 = v65;
        swift_bridgeObjectRelease();
        uint64_t v93 = MEMORY[0x23ECB9FE0](v93, v59, v60, v61);
        uint64_t v92 = v66;
        swift_bridgeObjectRelease();
        uint64_t v67 = MEMORY[0x23ECB9FE0](v82, v81, v80, v62);
        uint64_t v69 = v68;
        swift_bridgeObjectRelease();
        uint64_t v70 = MEMORY[0x23ECB9FE0](v85, v84, v83, v63);
        uint64_t v72 = v71;
        swift_bridgeObjectRelease();
        uint64_t v73 = MEMORY[0x23ECB9FE0](v90, v88, v86, v64);
        uint64_t v75 = v74;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v58, v91);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v24, v102);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v103, v104);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v94, v99);
        uint64_t v76 = v95;
        *(void *)uint64_t v95 = 2;
        uint64_t v77 = v100;
        v76[1] = v101;
        v76[2] = v77;
        uint64_t v78 = v92;
        v76[3] = v93;
        v76[4] = v78;
        v76[5] = v67;
        v76[6] = v69;
        v76[7] = v70;
        v76[8] = v72;
        v76[9] = v73;
        v76[10] = v75;
      }
    }
    else
    {
      uint64_t v39 = v88;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v88, v8, v28);
      Regex.Match.output.getter();
      swift_bridgeObjectRelease();
      uint64_t v40 = v109;
      uint64_t v41 = v110;
      uint64_t v42 = v111;
      uint64_t v43 = v112;
      uint64_t v87 = v117;
      uint64_t v86 = v118;
      uint64_t v44 = v120;
      uint64_t v85 = v119;
      uint64_t v91 = v121;
      char v90 = v122;
      uint64_t v45 = v124;
      uint64_t v89 = v123;
      uint64_t v101 = MEMORY[0x23ECB9FE0](v113, v114, v115, v116);
      uint64_t v100 = v46;
      swift_bridgeObjectRelease();
      uint64_t v47 = MEMORY[0x23ECB9FE0](v40, v41, v42, v43);
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      uint64_t v50 = MEMORY[0x23ECB9FE0](v87, v86, v85, v44);
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      uint64_t v53 = MEMORY[0x23ECB9FE0](v91, v90, v89, v45);
      uint64_t v55 = v54;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v39, v93);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v24, v102);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v103, v104);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v94, v99);
      uint64_t v56 = v95;
      *(void *)uint64_t v95 = 1;
      uint64_t v57 = v100;
      v56[1] = v101;
      v56[2] = v57;
      v56[3] = v47;
      v56[4] = v49;
      v56[5] = 0;
      v56[6] = 0;
      v56[7] = v50;
      v56[8] = v52;
      v56[9] = v53;
      v56[10] = v55;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    uint64_t v35 = MEMORY[0x23ECB9FE0](v105, v106, v107, v108);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v18, v102);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v103, v104);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v94, v99);
    unint64_t v38 = v95;
    *(void *)uint64_t v95 = 0;
    *((void *)v38 + 1) = v35;
    *((void *)v38 + 2) = v37;
    *(_OWORD *)((char *)v38 + 24) = 0u;
    *(_OWORD *)((char *)v38 + 40) = 0u;
    *(_OWORD *)((char *)v38 + 56) = 0u;
    *(_OWORD *)((char *)v38 + 72) = 0u;
  }
  return result;
}

uint64_t Stage.missingReferences.getter()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  uint64_t v2 = (uint64_t *)(v0 + 16);
  *((void *)&v23 + 1) = partial apply for closure #1 in Stage.getUSDMessages(isWarning:);
  *(void *)&long long v24 = v0;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  *(void *)&long long v23 = &block_descriptor_13;
  uint64_t v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOPxrUsdStageGatherDiagnostics();
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    type metadata accessor for Stage();
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(v4 + 40);
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v9 = *v6;
      swift_bridgeObjectRetain();
      static Stage.messageToErrorResult(_:)(v8, v9, &aBlock);
      swift_bridgeObjectRelease();
      uint64_t v10 = v22;
      if (v22)
      {
        char v11 = aBlock;
        uint64_t v12 = *((void *)&aBlock + 1);
        long long v19 = v24;
        long long v20 = v23;
        long long v17 = v26;
        long long v18 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
        }
        unint64_t v14 = v1[2];
        unint64_t v13 = v1[3];
        if (v14 >= v13 >> 1) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v1);
        }
        v1[2] = v14 + 1;
        uint64_t v7 = &v1[11 * v14];
        *((unsigned char *)v7 + 32) = v11;
        v7[5] = v12;
        v7[6] = v10;
        *(_OWORD *)(v7 + 7) = v20;
        *(_OWORD *)(v7 + 9) = v19;
        *(_OWORD *)(v7 + 11) = v18;
        *(_OWORD *)(v7 + 13) = v17;
      }
      v6 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = specialized Set.init<A>(_:)((uint64_t)v1);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t Stage.upAxis.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageCopyUpAxis();
  *a1 = result;
  return result;
}

void Stage.upAxis.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdStageSetUpAxis();
}

void (*Stage.upAxis.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrUsdStageCopyUpAxis();
  return Stage.upAxis.modify;
}

void Stage.upAxis.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdStageSetUpAxis();
}

uint64_t Stage.colorConfiguration.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageCopyColorConfiguration();
  *a1 = result;
  return result;
}

void Stage.colorConfiguration.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdStageSetColorConfiguration();
}

void (*Stage.colorConfiguration.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrUsdStageCopyColorConfiguration();
  return Stage.colorConfiguration.modify;
}

void Stage.colorConfiguration.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdStageSetColorConfiguration();
}

uint64_t Stage.colorManagementSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageCopyColorManagementSystem();
  *a1 = result;
  return result;
}

void Stage.colorManagementSystem.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdStageSetColorManagementSystem();
}

void (*Stage.colorManagementSystem.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrUsdStageCopyColorManagementSystem();
  return Stage.colorManagementSystem.modify;
}

void Stage.colorManagementSystem.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrUsdStageSetColorManagementSystem();
}

uint64_t Stage.startTimeCode.getter()
{
  return RIOPxrUsdStageGetStartTimeCode();
}

uint64_t Stage.startTimeCode.setter()
{
  return MEMORY[0x270F22E08](*(void *)(v0 + 16));
}

uint64_t (*Stage.startTimeCode.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrUsdStageGetStartTimeCode();
  *a1 = v3;
  return Stage.startTimeCode.modify;
}

uint64_t Stage.startTimeCode.modify(uint64_t a1)
{
  return MEMORY[0x270F22E08](*(void *)(a1 + 8));
}

uint64_t Stage.endTimeCode.getter()
{
  return RIOPxrUsdStageGetEndTimeCode();
}

uint64_t Stage.endTimeCode.setter()
{
  return MEMORY[0x270F22DE0](*(void *)(v0 + 16));
}

uint64_t (*Stage.endTimeCode.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrUsdStageGetEndTimeCode();
  *a1 = v3;
  return Stage.endTimeCode.modify;
}

uint64_t Stage.endTimeCode.modify(uint64_t a1)
{
  return MEMORY[0x270F22DE0](*(void *)(a1 + 8));
}

Swift::Bool __swiftcall Stage.hasAuthoredTimeCodeRange()()
{
  return RIOPxrUsdStageHasAuthoredTimeCodeRange();
}

uint64_t Stage.timeCodesPerSecond.getter()
{
  return RIOPxrUsdStageGetTimeCodesPerSecond();
}

uint64_t Stage.timeCodesPerSecond.setter()
{
  return MEMORY[0x270F22E10](*(void *)(v0 + 16));
}

uint64_t (*Stage.timeCodesPerSecond.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrUsdStageGetTimeCodesPerSecond();
  *a1 = v3;
  return Stage.timeCodesPerSecond.modify;
}

uint64_t Stage.timeCodesPerSecond.modify(uint64_t a1)
{
  return MEMORY[0x270F22E10](*(void *)(a1 + 8));
}

uint64_t Stage.framesPerSecond.getter()
{
  return RIOPxrUsdStageGetFramesPerSecond();
}

uint64_t Stage.framesPerSecond.setter()
{
  return MEMORY[0x270F22DF0](*(void *)(v0 + 16));
}

uint64_t (*Stage.framesPerSecond.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrUsdStageGetFramesPerSecond();
  *a1 = v3;
  return Stage.framesPerSecond.modify;
}

uint64_t Stage.framesPerSecond.modify(uint64_t a1)
{
  return MEMORY[0x270F22DF0](*(void *)(a1 + 8));
}

Swift::Bool __swiftcall Stage.hasCustomMetadata()()
{
  uint64_t v0 = (void *)RIOPxrUsdStageCopyRootLayer();
  char HasCustomLayerMetaData = RIOPxrSdfLayerHasCustomLayerMetaData();

  return HasCustomLayerMetaData;
}

Swift::Void __swiftcall Stage.clearAllCustomMetadata()()
{
  id v0 = (id)RIOPxrUsdStageCopyRootLayer();
  RIOPxrSdfLayerClearAllCustomLayerMetaData();
}

void *specialized ImportSession.init<A>(core:entityType:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v37[1] = a2;
  uint64_t v5 = type metadata accessor for __EntityRef();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  uint64_t v10 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)((char *)v3 + v11) = v12;
  *(void *)(v12 + 24) = v13;
  unint64_t v14 = (void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  void *v14 = 0;
  v14[1] = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x263F8EE80];
  if (a1)
  {
    *(void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
    id v15 = a1;
    uint64_t EngineRef = RIOImportSessionGetEngineRef();
    if (EngineRef
      && (v3[4] = EngineRef, (id v17 = (id)RIOImportSessionGetStage()) != 0))
    {
      long long v18 = v17;
      v37[0] = v6;
      type metadata accessor for Stage();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v18;
      v3[2] = v19;
      id v20 = v18;
      uint64_t RootEntity = RIOImportSessionGetRootEntity();
      if (RootEntity)
      {
        uint64_t v22 = RootEntity;
        long long v23 = v20;
        type metadata accessor for AnchorEntity();
        uint64_t v24 = swift_dynamicCastMetatype();
        REAnchorComponentGetComponentType();
        REEntityRemoveComponentByClass();
        REAnchoringComponentGetComponentType();
        uint64_t ComponentByClass = REEntityGetComponentByClass();
        if (v24)
        {
          if (!ComponentByClass)
          {
            REAnchoringComponentGetComponentType();
            REEntityAddComponentByClass();
          }
        }
        else if (ComponentByClass)
        {
          REAnchoringComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        type metadata accessor for ModelEntity();
        if (swift_dynamicCastMetatype())
        {
          uint64_t v41 = (void *)MEMORY[0x263F8DD08];
          uint64_t aBlock = v22;
          static __EntityRef.__fromCore(_:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
          swift_allocObject();
          uint64_t v27 = MEMORY[0x23ECB8920](v8);
        }
        else
        {
          type metadata accessor for BodyTrackedEntity();
          if (swift_dynamicCastMetatype())
          {
            uint64_t v41 = (void *)MEMORY[0x263F8DD08];
            uint64_t aBlock = v22;
            static __EntityRef.__fromCore(_:)();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
            swift_allocObject();
            uint64_t v27 = MEMORY[0x23ECB8BB0](v8);
          }
          else
          {
            if (!swift_dynamicCastMetatype())
            {
              type metadata accessor for Entity();
              uint64_t v41 = (void *)MEMORY[0x263F8DD08];
              uint64_t aBlock = v22;
              static __EntityRef.__fromCore(_:)();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
              uint64_t v28 = static Entity.__fromCore(_:)();
              (*(void (**)(char *, uint64_t))(v37[0] + 8))(v8, v5);
              goto LABEL_23;
            }
            uint64_t v41 = (void *)MEMORY[0x263F8DD08];
            uint64_t aBlock = v22;
            static __EntityRef.__fromCore(_:)();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
            swift_allocObject();
            uint64_t v27 = MEMORY[0x23ECB89B0](v8);
          }
        }
        uint64_t v28 = v27;
LABEL_23:
        uint64_t v29 = MEMORY[0x263F8EE80];
        v3[3] = v28;
        type metadata accessor for BehaviorsCommitter();
        uint64_t v30 = (void *)swift_allocObject();
        v30[3] = v29;
        swift_retain();
        v30[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        char v30[2] = v28;
        *(void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v30;
        uint64_t v31 = swift_allocObject();
        swift_weakInit();
        uint64_t v42 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
        uint64_t v43 = v31;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v39 = 1107296256;
        uint64_t v40 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
        uint64_t v41 = &block_descriptor_97;
        uint64_t v32 = _Block_copy(&aBlock);
        swift_release();
        uint64_t v33 = v3[3];
        uint64_t v34 = swift_allocObject();
        swift_weakInit();
        swift_unownedRetainStrong();
        swift_unownedRetain();
        swift_release();
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v33;
        *(void *)(v35 + 24) = v34;
        uint64_t v42 = (uint64_t (*)(void *, uint64_t, uint64_t))closure #2 in ImportSession.init<A>(core:entityType:)partial apply;
        uint64_t v43 = v35;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v39 = 1107296256;
        uint64_t v40 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
        uint64_t v41 = &block_descriptor_105;
        uint64_t v36 = _Block_copy(&aBlock);
        swift_release();
        RIOImportSessionSetRegistrationForScenes();
        _Block_release(v36);
        _Block_release(v32);
        RIOImportSessionSetSwiftObject();
        ImportSession.registerDefaultSwiftBuilders()();

        return v3;
      }

      swift_release();
    }
    else
    {
    }
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
  }
  else
  {
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)((char *)v3
                                                                         + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
  swift_bridgeObjectRelease();
  type metadata accessor for ImportSession(0);
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t type metadata accessor for Stage()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError;
  if (!lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError;
  if (!lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError);
  }
  return result;
}

void *specialized ImportSession.init<A>(core:entityType:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __EntityRef();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  uint64_t v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)((char *)v2 + v9) = v10;
  *(void *)(v10 + 24) = v11;
  uint64_t v12 = (void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *uint64_t v12 = 0;
  v12[1] = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x263F8EE80];
  if (!a1)
  {
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
    goto LABEL_11;
  }
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
  id v13 = a1;
  uint64_t EngineRef = RIOImportSessionGetEngineRef();
  if (!EngineRef
    || (v2[4] = EngineRef, (id v15 = (id)RIOImportSessionGetStage()) == 0))
  {

LABEL_9:
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

LABEL_11:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)((char *)v2
                                                                           + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
    swift_bridgeObjectRelease();
    type metadata accessor for ImportSession(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v16 = v15;
  type metadata accessor for Stage();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  v2[2] = v17;
  id v18 = v16;
  uint64_t RootEntity = RIOImportSessionGetRootEntity();
  if (!RootEntity)
  {

    swift_release();
    goto LABEL_9;
  }
  uint64_t v20 = RootEntity;
  REAnchorComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REAnchoringComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    REAnchoringComponentGetComponentType();
    REEntityAddComponentByClass();
  }
  uint64_t v33 = (void *)MEMORY[0x263F8DD08];
  uint64_t aBlock = v20;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  uint64_t v21 = MEMORY[0x23ECB89B0](v6);
  v2[3] = v21;
  type metadata accessor for BehaviorsCommitter();
  uint64_t v22 = (void *)swift_allocObject();
  void v22[3] = MEMORY[0x263F8EE80];
  swift_retain();
  long long v22[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  void v22[2] = v21;
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v22;
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v34 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
  uint64_t v35 = v23;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v31 = 1107296256;
  uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  uint64_t v33 = &block_descriptor_84;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v25 = v2[3];
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v25;
  *(void *)(v27 + 24) = v26;
  uint64_t v34 = (uint64_t (*)(void *, uint64_t, uint64_t))closure #2 in ImportSession.init<A>(core:entityType:)partial apply;
  uint64_t v35 = v27;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v31 = 1107296256;
  uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  uint64_t v33 = &block_descriptor_92;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_release();
  RIOImportSessionSetRegistrationForScenes();
  _Block_release(v28);
  _Block_release(v24);
  RIOImportSessionSetSwiftObject();
  ImportSession.registerDefaultSwiftBuilders()();

  return v2;
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t EngineRef;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t RootEntity;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t aBlock;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __EntityRef();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  uint64_t v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)((char *)v2 + v9) = v10;
  *(void *)(v10 + 24) = v11;
  uint64_t v12 = (void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *uint64_t v12 = 0;
  v12[1] = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x263F8EE80];
  if (!a1)
  {
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
LABEL_12:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)((char *)v2
                                                                           + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
    swift_bridgeObjectRelease();
    type metadata accessor for ImportSession(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
  id v13 = a1;
  uint64_t EngineRef = RIOImportSessionGetEngineRef();
  if (!EngineRef
    || (v2[4] = EngineRef, (id v15 = (id)RIOImportSessionGetStage()) == 0))
  {

LABEL_11:
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

    goto LABEL_12;
  }
  uint64_t v16 = v15;
  type metadata accessor for Stage();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  v2[2] = v17;
  id v18 = v16;
  uint64_t RootEntity = RIOImportSessionGetRootEntity();
  if (!RootEntity)
  {

    swift_release();
    goto LABEL_11;
  }
  uint64_t v20 = RootEntity;
  REAnchorComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REAnchoringComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAnchoringComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
  uint64_t v33 = (void *)MEMORY[0x263F8DD08];
  uint64_t aBlock = v20;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  uint64_t v21 = MEMORY[0x23ECB8920](v6);
  v2[3] = v21;
  type metadata accessor for BehaviorsCommitter();
  uint64_t v22 = (void *)swift_allocObject();
  void v22[3] = MEMORY[0x263F8EE80];
  swift_retain();
  long long v22[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  void v22[2] = v21;
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v22;
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v34 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
  uint64_t v35 = v23;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v31 = 1107296256;
  uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  uint64_t v33 = &block_descriptor_59;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v25 = v2[3];
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v25;
  *(void *)(v27 + 24) = v26;
  uint64_t v34 = partial apply for closure #2 in ImportSession.init<A>(core:entityType:);
  uint64_t v35 = v27;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v31 = 1107296256;
  uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  uint64_t v33 = &block_descriptor_66;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_release();
  RIOImportSessionSetRegistrationForScenes();
  _Block_release(v28);
  _Block_release(v24);
  RIOImportSessionSetSwiftObject();
  ImportSession.registerDefaultSwiftBuilders()();

  return v2;
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t EngineRef;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t RootEntity;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t aBlock;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  uint64_t v35;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __EntityRef();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  uint64_t v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)((char *)v2 + v9) = v10;
  *(void *)(v10 + 24) = v11;
  uint64_t v12 = (void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *uint64_t v12 = 0;
  v12[1] = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x263F8EE80];
  if (!a1)
  {
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
LABEL_12:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)((char *)v2
                                                                           + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
    swift_bridgeObjectRelease();
    type metadata accessor for ImportSession(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
  id v13 = a1;
  uint64_t EngineRef = RIOImportSessionGetEngineRef();
  if (!EngineRef
    || (v2[4] = EngineRef, (id v15 = (id)RIOImportSessionGetStage()) == 0))
  {

LABEL_11:
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

    goto LABEL_12;
  }
  uint64_t v16 = v15;
  type metadata accessor for Stage();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  v2[2] = v17;
  id v18 = v16;
  uint64_t RootEntity = RIOImportSessionGetRootEntity();
  if (!RootEntity)
  {

    swift_release();
    goto LABEL_11;
  }
  uint64_t v20 = RootEntity;
  REAnchorComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REAnchoringComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAnchoringComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
  uint64_t v33 = (void *)MEMORY[0x263F8DD08];
  uint64_t aBlock = v20;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  type metadata accessor for BodyTrackedEntity();
  swift_allocObject();
  uint64_t v21 = MEMORY[0x23ECB8BB0](v6);
  v2[3] = v21;
  type metadata accessor for BehaviorsCommitter();
  uint64_t v22 = (void *)swift_allocObject();
  void v22[3] = MEMORY[0x263F8EE80];
  swift_retain();
  long long v22[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  void v22[2] = v21;
  *(void *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v22;
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v34 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
  uint64_t v35 = v23;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v31 = 1107296256;
  uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  uint64_t v33 = &block_descriptor_71;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v25 = v2[3];
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v25;
  *(void *)(v27 + 24) = v26;
  uint64_t v34 = (uint64_t (*)(void *, uint64_t, uint64_t))closure #2 in ImportSession.init<A>(core:entityType:)partial apply;
  uint64_t v35 = v27;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v31 = 1107296256;
  uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  uint64_t v33 = &block_descriptor_79;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_release();
  RIOImportSessionSetRegistrationForScenes();
  _Block_release(v28);
  _Block_release(v24);
  RIOImportSessionSetSwiftObject();
  ImportSession.registerDefaultSwiftBuilders()();

  return v2;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(animResource: AnimationResource, trackNumber: Int)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Stage.MissingReference>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Int32>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Double>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatd>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_double2x2>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_double3x3>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_double4x4>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Builder>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<LazySequence<String>>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>, MEMORY[0x263F163C8], MEMORY[0x263F163C8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>, MEMORY[0x263F16400], MEMORY[0x263F16400]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>, MEMORY[0x263F16408], MEMORY[0x263F16408]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CompileSession.ImportSessionData>, type metadata accessor for CompileSession.ImportSessionData, type metadata accessor for CompileSession.ImportSessionData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.__ImportedScene>, MEMORY[0x263F16290], MEMORY[0x263F16290]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>, type metadata accessor for ImportSession.EvaluationFault, type metadata accessor for ImportSession.EvaluationFault);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508], MEMORY[0x263F07508]);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[AnimationResource]>, &demangling cache variable for type metadata for [AnimationResource]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[[Double]]>, &demangling cache variable for type metadata for [[Double]]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Int32>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Int32>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Half>>, &demangling cache variable for type metadata for SIMD2<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord2<Half>>, &demangling cache variable for type metadata for TexCoord2<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Half>>, &demangling cache variable for type metadata for SIMD3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color3<Half>>, &demangling cache variable for type metadata for Color3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Point3<Half>>, &demangling cache variable for type metadata for Point3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Normal3<Half>>, &demangling cache variable for type metadata for Normal3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Vector3<Half>>, &demangling cache variable for type metadata for Vector3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord3<Half>>, &demangling cache variable for type metadata for TexCoord3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Half>>, &demangling cache variable for type metadata for SIMD4<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color4<Half>>, &demangling cache variable for type metadata for Color4<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord2<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Point3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Normal3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Vector3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color4<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord2<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Point3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Normal3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Vector3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color4<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.AssetPath>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>, &demangling cache variable for type metadata for [String : Any]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    id v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  id v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 4]) {
          memmove(v14, a4 + 4, 32 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (char *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 2);
      int64_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
      int64_t v14 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32]) {
          memmove(v14, a4 + 32, 4 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Builder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<LazySequence<String>>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Stage.MissingReference.== infix(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[8];
  uint64_t v20 = a1[10];
  uint64_t v8 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v11 = a2[8];
  uint64_t v21 = a2[7];
  uint64_t v22 = a1[7];
  uint64_t v17 = a2[9];
  uint64_t v18 = a1[9];
  uint64_t v19 = a2[10];
  if (a1[1] == a2[1] && a1[2] == a2[2]
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (v3)
    {
      if (!v7) {
        return 0;
      }
      if (v2 != v8 || v3 != v7)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v5)
    {
      if (!v9) {
        return 0;
      }
      if (v4 != v10 || v5 != v9)
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v15 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (v6)
    {
      if (!v11) {
        return 0;
      }
      if (v22 != v21 || v6 != v11)
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v16 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v11)
    {
      return 0;
    }
    if (v20)
    {
      if (v19 && (v18 == v17 && v20 == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v19)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type InputDescriptor and conformance InputDescriptor();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with take of InputDescriptor(v4, (uint64_t)v8);
      outlined retain of InputDescriptor((uint64_t)v8);
      specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)v8);
      outlined consume of InputDescriptor(v5[0], v5[1], v5[2], v5[3], (void *)v5[4], v5[5], v6);
      v4 += 56;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned int *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path, (uint64_t)&type metadata for SceneDescriptionFoundations.Path, (void (*)(id *, void *))specialized Set._Variant.insert(_:));
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token, (uint64_t)&type metadata for ToolsFoundations.Token, (void (*)(id *, void *))specialized Set._Variant.insert(_:));
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned char v5[8];
  uint64_t v6;
  unsigned char v7[40];

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type OutputDescriptor and conformance OutputDescriptor();
  uint64_t result = Set.init(minimumCapacity:)();
  unsigned __int8 v6 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with take of OutputDescriptor(v4, (uint64_t)v7);
      outlined retain of OutputDescriptor((uint64_t)v7);
      specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 40;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Stage.MissingReference and conformance Stage.MissingReference();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = *(_OWORD *)(v4 + 48);
      v9[2] = *(_OWORD *)(v4 + 32);
      v9[3] = v5;
      v9[4] = *(_OWORD *)(v4 + 64);
      uint64_t v10 = *(void *)(v4 + 80);
      unsigned __int8 v6 = *(_OWORD *)(v4 + 16);
      v9[0] = *(_OWORD *)v4;
      v9[1] = v6;
      outlined retain of Stage.MissingReference((uint64_t)v9);
      specialized Set._Variant.insert(_:)((uint64_t)&v7, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 88;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9[3];
  uint64_t v10;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 48);
    do
    {
      unsigned __int8 v6 = (uint64_t)*(v4 - 2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v7 = *v4;
      v4 += 3;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(v9, v6, v5, v7);
      uint64_t v8 = (void *)v9[1];

      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for PrimDirtyState();
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, (void (*)(uint64_t))type metadata accessor for PrimDirtyState);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x23ECBA630](i, a1);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      specialized Set._Variant.insert(_:)(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for PropertyDirtyState();
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, (void (*)(uint64_t))type metadata accessor for PropertyDirtyState);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x23ECBA630](i, a1);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      specialized Set._Variant.insert(_:)(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, type metadata accessor for RIOPxrSdfPathRef);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        unsigned __int8 v6 = (void *)MEMORY[0x23ECBA630](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for StageDirtyState();
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type StageDirtyState and conformance StageDirtyState, (void (*)(uint64_t))type metadata accessor for StageDirtyState);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x23ECBA630](i, a1);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      specialized Set._Variant.insert(_:)(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(id *, void *))
{
  uint64_t v6 = *(void *)(a1 + 16);
  a2();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  if (v6)
  {
    uint64_t v8 = (void **)(a1 + 32);
    do
    {
      uint64_t v9 = *v8++;
      a4(&v10, v9);

      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t sub_23A9FC798()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in Stage.getUSDMessages(isWarning:)(uint64_t a1)
{
  return closure #1 in Stage.getUSDMessages(isWarning:)(a1, v1);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Stage.Error and conformance Stage.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Stage.Error and conformance Stage.Error;
  if (!lazy protocol witness table cache variable for type Stage.Error and conformance Stage.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.Error and conformance Stage.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType()
{
  unint64_t result = lazy protocol witness table cache variable for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType;
  if (!lazy protocol witness table cache variable for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Stage.MissingReference and conformance Stage.MissingReference()
{
  unint64_t result = lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference;
  if (!lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference;
  if (!lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference);
  }
  return result;
}

uint64_t sub_23A9FCA38@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageGetMetersPerUnit();
  *a1 = v3;
  return result;
}

uint64_t sub_23A9FCA68(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F22E00](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23A9FCA88()
{
  return 16;
}

__n128 sub_23A9FCA94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23A9FCAA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageCopyUpAxis();
  *a1 = result;
  return result;
}

uint64_t sub_23A9FCAD0()
{
  return RIOPxrUsdStageSetUpAxis();
}

uint64_t sub_23A9FCAE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageCopyColorConfiguration();
  *a1 = result;
  return result;
}

uint64_t sub_23A9FCB14()
{
  return RIOPxrUsdStageSetColorConfiguration();
}

uint64_t sub_23A9FCB28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageCopyColorManagementSystem();
  *a1 = result;
  return result;
}

uint64_t sub_23A9FCB58()
{
  return RIOPxrUsdStageSetColorManagementSystem();
}

uint64_t sub_23A9FCB6C@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageGetStartTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_23A9FCB9C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F22E08](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23A9FCBAC@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageGetEndTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_23A9FCBDC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F22DE0](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23A9FCBEC@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageGetTimeCodesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_23A9FCC1C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F22E10](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23A9FCC2C@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrUsdStageGetFramesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_23A9FCC5C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F22DF0](*(void *)(*(void *)a2 + 16));
}

uint64_t method lookup function for Stage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Stage);
}

uint64_t dispatch thunk of Stage.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of Stage.__allocating_init(identifier:buffer:length:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of Stage.__allocating_init(identifier:data:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of Stage.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of Stage.__allocating_init(contentsOf:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of Stage.__allocating_init(withFilePath:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Stage.__allocating_init(contents:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

unsigned char *storeEnumTagSinglePayload for Stage.LoadError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23A9FCDFCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Stage.LoadError()
{
  return &type metadata for Stage.LoadError;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Stage.Error()
{
  return &type metadata for Stage.Error;
}

uint64_t getEnumTagSinglePayload for Stage.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Stage.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23A9FCFB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for Stage.MissingReferenceType(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for Stage.MissingReferenceType(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Stage.MissingReferenceType()
{
  return &type metadata for Stage.MissingReferenceType;
}

uint64_t destroy for Stage.MissingReference()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Stage.MissingReference(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Stage.MissingReference(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Stage.MissingReference(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Stage.MissingReference(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Stage.MissingReference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Stage.MissingReference()
{
  return &type metadata for Stage.MissingReference;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + (a1 << 7) + 32);
    size_t v6 = v4 << 7;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 96 * a1 + 32);
    size_t v6 = 96 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type OutputDescriptor and conformance OutputDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor;
  if (!lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor;
  if (!lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InputDescriptor and conformance InputDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor;
  if (!lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor;
  if (!lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor);
  }
  return result;
}

uint64_t outlined retain of InputDescriptor(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_23A9FE58C()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ImportSession.init<A>(core:entityType:)(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in ImportSession.init<A>(core:entityType:)(a1, a2, a3);
}

void partial apply for closure #2 in ImportSession.init<A>(core:entityType:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  closure #2 in ImportSession.init<A>(core:entityType:)(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void *)(v5 + 24));
}

unint64_t lazy protocol witness table accessor for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta()
{
  unint64_t result = lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta;
  if (!lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta;
  if (!lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta);
  }
  return result;
}

uint64_t objectdestroy_62Tm()
{
  swift_unownedRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t one-time initialization function for customComponents()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.customComponents = result;
  return result;
}

uint64_t removeCustomComponentProxy(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  REComponentGetEntity();
  String.utf8CString.getter();
  uint64_t v5 = REComponentClassFromName();
  swift_release();
  if (v5)
  {
    uint64_t result = REEntityGetCustomComponent();
    if (result)
    {
      if (one-time initialization token for customComponents != -1) {
        swift_once();
      }
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_23AAB22A0;
      _StringGuts.grow(_:)(26);
      v8._countAndFlagsBits = 0x676E69766F6D6552;
      v8._object = (void *)0xE900000000000020;
      String.append(_:)(v8);
      v9._countAndFlagsBits = a2;
      v9._object = a3;
      String.append(_:)(v9);
      v10._countAndFlagsBits = 0x6E65206D6F726620;
      v10._object = (void *)0xED00002079746974;
      String.append(_:)(v10);
      REEntityGetName();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<Int8>);
      _print_unlocked<A, B>(_:_:)();
      *(void *)(v7 + 56) = MEMORY[0x263F8D310];
      *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 40) = 0xE000000000000000;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      return REEntityRemoveComponentByClass();
    }
  }
  else
  {
    if (one-time initialization token for customComponents != -1) {
      swift_once();
    }
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_23AAB22A0;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = a2;
    v12._object = a3;
    String.append(_:)(v12);
    *(void *)(v11 + 56) = MEMORY[0x263F8D310];
    *(void *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v11 + 32) = 0xD00000000000002FLL;
    *(void *)(v11 + 40) = 0x800000023AAAECA0;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in CustomComponentBuilder.stageSubscription.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24E0;
  if (String.count.getter() < 1) {
    id v1 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v1 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(inited + 32) = v1;
  if (String.count.getter() < 1) {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(inited + 40) = v2;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (String.count.getter() < 1) {
    id v5 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v5 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v6 = v5;
  type metadata accessor for NamedPropertyDirtyState();
  uint64_t v7 = (void *)swift_allocObject();
  long long v7[4] = v6;
  id v8 = v6;
  uint64_t v9 = MEMORY[0x263F8EE88];
  id v10 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, MEMORY[0x263F8EE88]);

  v7[2] = v9;
  void v7[3] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AAB22C0;
  *(void *)(v11 + 32) = v7;
  unint64_t v26 = v11;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v12 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v26);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for TypeNamePrimDirtyState();
  unint64_t v13 = (void *)swift_allocObject();
  v13[5] = v4;
  swift_bridgeObjectRetain();
  id v14 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v12, v9);
  swift_bridgeObjectRelease();
  v13[2] = v9;
  v13[3] = v12;
  v13[4] = v14;
  swift_retain();
  if (String.count.getter() < 1) {
    id v15 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v15 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v26 = (unint64_t)v15;
  char v16 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  swift_retain();
  if (String.count.getter() < 1) {
    id v17 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v17 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v26 = (unint64_t)v17;
  uint64_t v18 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  swift_retain();
  if (String.count.getter() < 1) {
    id v19 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v19 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v26 = (unint64_t)v19;
  uint64_t v20 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  swift_retain();
  if (String.count.getter() < 1) {
    id v21 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v21 = (id)RIOPxrTfTokenCreateWithCString();
  }
  unint64_t v26 = (unint64_t)v21;
  uint64_t v22 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_23AAB3560;
  *(void *)(v23 + 32) = v13;
  *(void *)(v23 + 40) = v16;
  *(void *)(v23 + 48) = v18;
  *(void *)(v23 + 56) = v20;
  *(void *)(v23 + 64) = v22;
  unint64_t v26 = v23;
  specialized Array._endMutation()();
  uint64_t v24 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v26);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v24;
}

void CustomComponentBuilder.run(inputs:)()
{
  uint64_t v1 = v0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v2 = (id)RIOBuilderInputsGetImportSession();
  if (!v2)
  {
    __break(1u);
LABEL_50:
    __break(1u);
  }
  uint64_t v3 = v2;
  uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject) {
    goto LABEL_50;
  }
  swift_retain();
  swift_weakAssign();
  swift_release();
  Inputs.prim.getter();
  id v5 = *(id *)(v1 + 40);
  if (!RIOPxrUsdPrimHasAttribute())
  {
    unint64_t v6 = v5;
LABEL_23:

    goto LABEL_24;
  }
  unint64_t v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v7 = RIOPxrUsdAttributeCopyValue();
  if (!v7)
  {

    goto LABEL_23;
  }
  id v8 = (void *)v7;
  uint64_t v9 = (void *)RIOPxrVtValueCopyToken();

  if (!v9)
  {
LABEL_24:
    specialized CustomComponentBuilder.clear(inputs:)();
    swift_release();
    return;
  }
  id v10 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      uint64_t v61 = v13;
      uint64_t v24 = v11;
      if (one-time initialization token for customComponents != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_23AAB24E0;
      unint64_t v26 = (void *)RIOPxrUsdObjectCopyPath();
      uint64_t v27 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      uint64_t v31 = MEMORY[0x263F8D310];
      *(void *)(v25 + 56) = MEMORY[0x263F8D310];
      unint64_t v32 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v25 + 32) = v28;
      *(void *)(v25 + 40) = v30;
      *(void *)(v25 + 96) = v31;
      *(void *)(v25 + 104) = v32;
      *(void *)(v25 + 64) = v32;
      *(void *)(v25 + 72) = v24;
      *(void *)(v25 + 80) = v61;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v14 = static EntityBuilder.OutputName;
  uint64_t v15 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v14, v15, &v63);
  if (!v64)
  {
    outlined destroy of Any?((uint64_t)&v63);
    goto LABEL_33;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    if (one-time initialization token for customComponents != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_23AAB22A0;
    *(void *)(v33 + 56) = MEMORY[0x263F8D310];
    *(void *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v33 + 32) = v11;
    *(void *)(v33 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    swift_release();
    goto LABEL_36;
  }
  uint64_t v16 = v62;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v1 + 24);
  if (v17)
  {
    uint64_t v18 = *(void *)(v1 + 16);
    if ((v18 != v11 || v17 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      CustomComponentBuilder.removeProxyComponent()();
      if (v19)
      {
        uint64_t v59 = v11;
        if (one-time initialization token for customComponents != -1) {
          swift_once();
        }
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_23AAB24E0;
        *(void *)(v20 + 56) = MEMORY[0x263F8D310];
        unint64_t v21 = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v20 + 64) = v21;
        *(void *)(v20 + 32) = v18;
        *(void *)(v20 + 40) = v17;
        swift_getErrorValue();
        uint64_t v22 = Error.localizedDescription.getter();
        *(void *)(v20 + 96) = MEMORY[0x263F8D310];
        *(void *)(v20 + 104) = v21;
        *(void *)(v20 + 72) = v22;
        *(void *)(v20 + 80) = v23;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        uint64_t v11 = v59;
        uint64_t v16 = v62;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  *(void *)(v1 + 16) = v11;
  *(void *)(v1 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (RIOPxrUsdPrimIsActive())
  {
    uint64_t v60 = v11;
    uint64_t v34 = (void *)componentPrimToDictionary(component:)();
    uint64_t v35 = self;
    *(void *)&long long v63 = 0;
    id v36 = objc_msgSend(v35, sel_dataWithJSONObject_options_error_, v34, 0, &v63);
    id v37 = (id)v63;
    if (v36)
    {
      uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      outlined copy of Data._Representation(v38, v40);
      CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(v16, v38, v40);
      outlined consume of Data._Representation(v38, v40);

      swift_release();
      outlined consume of Data._Representation(v38, v40);
      swift_release();
LABEL_36:
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v52 = v37;
    uint64_t v53 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for customComponents != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_23AAB24E0;
    uint64_t v55 = MEMORY[0x263F8D310];
    *(void *)(v54 + 56) = MEMORY[0x263F8D310];
    unint64_t v56 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v54 + 64) = v56;
    *(void *)(v54 + 32) = v60;
    *(void *)(v54 + 40) = v13;
    swift_getErrorValue();
    uint64_t v57 = Error.localizedDescription.getter();
    *(void *)(v54 + 96) = v55;
    *(void *)(v54 + 104) = v56;
    *(void *)(v54 + 72) = v57;
    *(void *)(v54 + 80) = v58;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
  }
  else
  {
    CustomComponentBuilder.removeProxyComponent()();
    if (v41)
    {
      if (one-time initialization token for customComponents != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_23AAB2680;
      uint64_t v43 = MEMORY[0x263F8D310];
      *(void *)(v42 + 56) = MEMORY[0x263F8D310];
      unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v42 + 64) = v44;
      *(void *)(v42 + 32) = v11;
      *(void *)(v42 + 40) = v13;
      uint64_t v45 = (void *)RIOPxrUsdObjectCopyPath();
      uint64_t v46 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;

      *(void *)(v42 + 96) = v43;
      *(void *)(v42 + 104) = v44;
      *(void *)(v42 + 72) = v47;
      *(void *)(v42 + 80) = v49;
      swift_getErrorValue();
      uint64_t v50 = Error.localizedDescription.getter();
      *(void *)(v42 + 136) = v43;
      *(void *)(v42 + 144) = v44;
      *(void *)(v42 + 112) = v50;
      *(void *)(v42 + 120) = v51;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
}

void CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v20 = a1;
  uint64_t v7 = type metadata accessor for CustomComponentProxy();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v3[3];
  if (v11)
  {
    uint64_t v21 = v3[2];
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v18[2] = Strong;
      uint64_t v19 = v8;
      v18[0] = v4;
      v18[1] = v18;
      MEMORY[0x270FA5388](Strong);
      v18[-2] = v21;
      v18[-1] = v11;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = partial apply for closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:);
      *(void *)(v13 + 24) = &v18[-4];
      aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_7;
      uint64_t v14 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      RIOBuilderInputsPerformBlockSyncOnEngineQueue();
      _Block_release(v14);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
      }
      else
      {
        outlined copy of Data._Representation(a2, a3);
        CustomComponentProxy.init(with:)();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = REComponentClassFromName();
        swift_release();
        if (v16)
        {
          uint64_t v17 = specialized setCustomComponentProxy(_:_:_:)(v20, v16, (uint64_t)v10);
          swift_release();
          (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v7);
          v3[4] = v17;
        }
        else
        {
          lazy protocol witness table accessor for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError();
          swift_allocError();
          swift_willThrow();
          swift_release();
          (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v7);
        }
      }
    }
  }
}

uint64_t closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(uint64_t a1, uint64_t a2)
{
  String.utf8CString.getter();
  uint64_t v4 = REComponentClassFromName();
  uint64_t result = swift_release();
  if (!v4)
  {
    type metadata accessor for CustomComponentProxy();
    uint64_t result = static Component.registerComponentProxy(componentName:)();
    if (!result)
    {
      if (one-time initialization token for customComponents != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_23AAB22A0;
      *(void *)(v6 + 56) = MEMORY[0x263F8D310];
      *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v6 + 32) = a1;
      *(void *)(v6 + 40) = a2;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:type:_:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CustomComponentBuilder.removeProxyComponent()()
{
  uint64_t v1 = (void *)v0[3];
  if (v1 && (uint64_t v2 = v0[4]) != 0)
  {
    uint64_t v3 = v0[2];
    uint64_t v4 = one-time initialization token for customComponents;
    swift_bridgeObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_23AAB22A0;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = v3;
    v6._object = v1;
    String.append(_:)(v6);
    *(void *)(v5 + 56) = MEMORY[0x263F8D310];
    *(void *)(v5 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v5 + 32) = 0xD000000000000027;
    *(void *)(v5 + 40) = 0x800000023AAAEC70;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    removeCustomComponentProxy(_:_:)(v2, v3, v1);
    swift_bridgeObjectRelease();
    v0[4] = 0;
  }
  else
  {
    lazy protocol witness table accessor for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t CustomComponentBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustomComponentBuilder()
{
  return self;
}

uint64_t CustomComponentBuilder.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  if (String.count.getter() < 1) {
    id v1 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v1 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(v0 + 40) = v1;
  *(unsigned char *)(v0 + 48) = 2;
  swift_weakInit();
  return v0;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance CustomComponentBuilder()
{
  uint64_t v0 = closure #1 in CustomComponentBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v5 = inited;
  specialized Array._endMutation()();
  uint64_t v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

void protocol witness for Builder.buildOrder.getter in conformance CustomComponentBuilder(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 48);
}

uint64_t protocol witness for Builder.inputDescriptors() in conformance CustomComponentBuilder()
{
  uint64_t v6 = MEMORY[0x263F8EE88];
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v1 = static EntityBuilder.OutputName;
  uint64_t v0 = *(void *)algn_268A4BAA8;
  uint64_t v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  v7[0] = v1;
  v7[1] = v0;
  v7[2] = static EntityBuilder.OutputIdentifier;
  void v7[3] = qword_268A584E0;
  long long v7[4] = 0;
  v7[5] = 0;
  char v8 = 112;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)v7);
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t specialized setCustomComponentProxy(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for CustomComponentProxy();
  uint64_t v15 = v4;
  uint64_t v16 = MEMORY[0x263F167A0];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, a3, v4);
  __AssetRef.__as<A>(_:)();
  uint64_t CustomComponent = REEntityGetCustomComponent();
  uint64_t v7 = MEMORY[0x263F8D310];
  if (CustomComponent) {
    goto LABEL_5;
  }
  if (one-time initialization token for customComponents != -1) {
    swift_once();
  }
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23AAB22A0;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v14, v15);
  swift_getDynamicType();
  v9._countAndFlagsBits = dispatch thunk of static Component.componentName.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x20656874206F7420;
  v10._object = (void *)0xEF20797469746E65;
  String.append(_:)(v10);
  __AssetRef.__as<A>(_:)();
  REEntityGetName();
  v11._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  *(void *)(v8 + 56) = v7;
  *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v8 + 32) = 0xD00000000000001CLL;
  *(void *)(v8 + 40) = 0x800000023AAAECD0;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t CustomComponent = REEntityAddComponentByClass();
  if (CustomComponent)
  {
LABEL_5:
    if (one-time initialization token for customComponents != -1) {
      swift_once();
    }
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_23AAB22A0;
    *(void *)(v12 + 56) = v7;
    *(void *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v12 + 32) = 0xD00000000000003BLL;
    *(void *)(v12 + 40) = 0x800000023AAAECF0;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if (RECustomComponentGetObject()) {
      static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)();
    }
    RENetworkMarkComponentDirty();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  return CustomComponent;
}

void specialized CustomComponentBuilder.clear(inputs:)()
{
  if (one-time initialization token for customComponents != -1) {
    swift_once();
  }
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23AAB22A0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = MEMORY[0x263F8D310];
  *(void *)(v0 + 56) = MEMORY[0x263F8D310];
  unint64_t v3 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 32) = 0x7261656C63206E49;
  *(void *)(v0 + 40) = 0xEA0000000000203ALL;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  CustomComponentBuilder.removeProxyComponent()();
  if (v4)
  {
    static os_log_type_t.error.getter();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_23AAB22A0;
    _StringGuts.grow(_:)(59);
    v6._object = (void *)0x800000023AAAEBE0;
    v6._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v6);
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 8238;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v5 + 56) = v2;
    *(void *)(v5 + 64) = v3;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0xE000000000000000;
    type metadata accessor for OS_os_log();
    Swift::String v9 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError;
  if (!lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError;
  if (!lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError);
  }
  return result;
}

uint64_t partial apply for closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:)()
{
  return closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_23AA007F8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for CustomComponentBuilder.ComponentRegistryError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA008BCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomComponentBuilder.ComponentRegistryError()
{
  return &type metadata for CustomComponentBuilder.ComponentRegistryError;
}

uint64_t ModelSortGroupBuilder.run(inputs:)()
{
  uint64_t v1 = *v0;
  Swift::String v7 = v0;
  uint64_t v8 = v1;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in ModelSortGroupBuilder.run(inputs:);
  *(void *)(v2 + 24) = &v6;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8;
  int v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v3);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ModelSortGroupBuilder.run(inputs:)(void *a1)
{
  uint64_t v2 = type metadata accessor for ModelSortGroup();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  Swift::String v9 = (char *)&v41 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v3 + 56);
  v17((char *)&v41 - v15, 1, 1, v2, v14);
  uint64_t v18 = (uint64_t)a1 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup;
  swift_beginAccess();
  outlined assign with take of ModelSortGroup?((uint64_t)v16, v18);
  swift_endAccess();
  specialized Builder.prim.getter();
  uint64_t v19 = String.count.getter();
  uint64_t v43 = v3;
  unint64_t v44 = v17;
  uint64_t v45 = v12;
  id v46 = a1;
  if (v19 < 1) {
    id v20 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v20 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v21 = v20;
  uint64_t v22 = specialized Prim.attributeValue<A>(of:type:)();
  unint64_t v24 = v23;

  swift_release();
  if (v24)
  {
    uint64_t v25 = (uint64_t)v42;
    if (v22 == 0x73736150657270 && v24 == 0xE700000000000000) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v24 = 0xE400000000000000;
    uint64_t v22 = 1701736270;
    uint64_t v25 = (uint64_t)v42;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v26 = *MEMORY[0x263F16670];
    uint64_t v27 = type metadata accessor for ModelSortGroup.DepthPass();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v9, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v9, 0, 1, v27);
    uint64_t v29 = v43;
    goto LABEL_17;
  }
  if (v22 == 0x7373615074736F70 && v24 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = v43;
LABEL_15:
    uint64_t v31 = *MEMORY[0x263F16678];
    uint64_t v32 = type metadata accessor for ModelSortGroup.DepthPass();
    uint64_t v33 = *(void *)(v32 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 104))(v9, v31, v32);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v9, 0, 1, v32);
    goto LABEL_17;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v43;
  if (v30) {
    goto LABEL_15;
  }
  uint64_t v34 = type metadata accessor for ModelSortGroup.DepthPass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v9, 1, 1, v34);
LABEL_17:
  outlined init with copy of ModelSortGroup.DepthPass?((uint64_t)v9, v25);
  uint64_t v35 = v47;
  ModelSortGroup.init(depthPass:)();
  id v36 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v36(v16, v35, v2);
  ((void (*)(char *, void, uint64_t, uint64_t))v44)(v16, 0, 1, v2);
  uint64_t v37 = (uint64_t)v45;
  outlined init with take of ModelSortGroup?((uint64_t)v16, (uint64_t)v45);
  swift_beginAccess();
  outlined assign with take of ModelSortGroup?(v37, v18);
  swift_endAccess();
  swift_beginAccess();
  id v38 = objc_getAssociatedObject(v46, &static BuilderAssociatedKeys.OutputsReference);
  uint64_t result = swift_endAccess();
  if (v38)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v48, &v49);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    uint64_t v50 = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
    v36((char *)boxed_opaque_existential_1, v35, v2);
    Outputs.subscript.setter((uint64_t)&v49, 0xD000000000000014, 0x800000023AAACC80);
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v2);
    return outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Builder.prim.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.CoreReference);
  uint64_t result = swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v5, &v6);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    uint64_t v3 = RIOBuilderCopyPrim();

    type metadata accessor for Prim();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ModelSortGroupBuilder.__deallocating_deinit()
{
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup, &demangling cache variable for type metadata for ModelSortGroup?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupBuilder()
{
  uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupBuilder);
  swift_arrayDestroy();
  return v0;
}

uint64_t protocol witness for Builder.clear(inputs:) in conformance ModelSortGroupBuilder()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ModelSortGroup();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup;
  swift_beginAccess();
  outlined assign with take of ModelSortGroup?((uint64_t)v3, v5);
  return swift_endAccess();
}

id static MeshSortingConstants.MeshSortingGroup.primType.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static MeshSortingConstants.MeshSortingGroup.primType;
  *a1 = static MeshSortingConstants.MeshSortingGroup.primType;
  return v2;
}

uint64_t ObjC metadata update function for ModelSortGroupBuilder()
{
  return type metadata accessor for ModelSortGroupBuilder();
}

uint64_t type metadata accessor for ModelSortGroupBuilder()
{
  uint64_t result = type metadata singleton initialization cache for ModelSortGroupBuilder;
  if (!type metadata singleton initialization cache for ModelSortGroupBuilder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ModelSortGroupBuilder()
{
  type metadata accessor for ModelSortGroup?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for ModelSortGroup?()
{
  if (!lazy cache variable for type metadata for ModelSortGroup?)
  {
    type metadata accessor for ModelSortGroup();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModelSortGroup?);
    }
  }
}

ValueMetadata *type metadata accessor for MeshSortingConstants()
{
  return &type metadata for MeshSortingConstants;
}

ValueMetadata *type metadata accessor for MeshSortingConstants.MeshSortingGroup()
{
  return &type metadata for MeshSortingConstants.MeshSortingGroup;
}

uint64_t outlined assign with take of ModelSortGroup?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized ModelSortGroupBuilder.stageSubscription.getter()
{
  if (one-time initialization token for primType != -1) {
    swift_once();
  }
  unint64_t v9 = static MeshSortingConstants.MeshSortingGroup.primType;
  id v0 = (id)static MeshSortingConstants.MeshSortingGroup.primType;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v9;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v9 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t partial apply for closure #1 in ModelSortGroupBuilder.run(inputs:)()
{
  return closure #1 in ModelSortGroupBuilder.run(inputs:)(*(void **)(v0 + 16));
}

uint64_t sub_23AA01748()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t outlined init with copy of ModelSortGroup.DepthPass?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModelSortGroup?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t one-time initialization function for iblComponents()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.iblComponents = result;
  return result;
}

id one-time initialization function for entityRelationshipName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ImageBasedLightReceiverBuilder.entityRelationshipName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static ModelSortGroupComponentBuilder.entityRelationshipName = (uint64_t)result;
  return result;
}

uint64_t ImageBasedLightReceiverBuilder.inputDescriptors()()
{
  uint64_t v1 = *v0;
  uint64_t v6 = MEMORY[0x263F8EE88];
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = specialized closure #2 in ImageBasedLightReceiverBuilder.inputDescriptors();
  v2[3] = 0;
  v2[4] = closure #1 in ImageBasedLightReceiverBuilder.inputDescriptors();
  void v2[5] = 0;
  v2[6] = v1;
  if (one-time initialization token for OutputIdentifier != -1) {
    swift_once();
  }
  v14[0] = 0xD000000000000010;
  v14[1] = 0x800000023AAAD1A0;
  v14[2] = static EntityBuilder.OutputIdentifier;
  uint64_t v14[3] = qword_268A584E0;
  v14[4] = partial apply for closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors();
  v14[5] = v2;
  char v15 = -127;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Set._Variant.insert(_:)((uint64_t)&v7, (uint64_t)v14);
  outlined consume of InputDescriptor(v7, v8, v9, v10, v11, v12, v13);
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v7 = static EntityBuilder.OutputName;
  uint64_t v8 = *(void *)algn_268A4BAA8;
  uint64_t v9 = static EntityBuilder.OutputIdentifier;
  uint64_t v10 = qword_268A584E0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned __int8 v13 = 112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)&v7);
  swift_release();
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t closure #1 in ImageBasedLightReceiverBuilder.inputDescriptors()()
{
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v0 = RIOPxrUsdPrimCopyRelationship();
    type metadata accessor for Relationship();
    uint64_t v1 = (void *)swift_allocObject();
    v1[2] = v0;
    uint64_t v2 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v1, 0);
    uint64_t v3 = specialized Set.init<A>(_:)(v2);
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x263F8EE88];
  }
}

uint64_t closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t))
{
  uint64_t v11 = *a2;
  uint64_t v6 = a3(a1, &v11);
  if (!v6) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (one-time initialization token for entityRelationshipName != -1) {
    swift_once();
  }
  uint64_t v11 = static ImageBasedLightReceiverBuilder.entityRelationshipName;
  id v8 = (id)static ImageBasedLightReceiverBuilder.entityRelationshipName;
  uint64_t v9 = a5(&v11, v7);

  swift_release();
  return v9;
}

uint64_t ImageBasedLightReceiverBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  v7[2] = a1;
  id v8 = v1;
  uint64_t v9 = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in ImageBasedLightReceiverBuilder.run(inputs:);
  *(void *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_9;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void closure #1 in ImageBasedLightReceiverBuilder.run(inputs:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = type metadata accessor for __EntityRef();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  uint64_t v7 = (void *)RIOPxrUsdObjectCopyName();
  id v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v12 = (id)static ImageBasedLightReceiverBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

    goto LABEL_23;
  }
  uint64_t v63 = v9;
  unsigned __int8 v13 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v14 = RIOPxrUsdAttributeCopyValue();
  if (!v14)
  {
    swift_bridgeObjectRelease();

    goto LABEL_23;
  }
  char v15 = (void *)v14;
  uint64_t v61 = v4;
  uint64_t v16 = RIOPxrVtValueCopyToken();
  if (!v16)
  {
    swift_bridgeObjectRelease();

    goto LABEL_23;
  }
  uint64_t v17 = (void *)v16;
  uint64_t v62 = a2;

  uint64_t v18 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  if (v19 != 0xD000000000000022 || v21 != 0x800000023AAAF060)
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = v63;
    if (v23) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
LABEL_23:
    ImageBasedLightReceiverBuilder.clear(inputs:)();
    swift_release();
    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = v63;
LABEL_13:
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for iblComponents != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_23AAB24E0;
      uint64_t v28 = (void *)RIOPxrUsdObjectCopyPath();
      uint64_t v29 = (void *)RIOPxrSdfPathCopyString();
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      uint64_t v33 = MEMORY[0x263F8D310];
      *(void *)(v27 + 56) = MEMORY[0x263F8D310];
      unint64_t v34 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v27 + 32) = v30;
      *(void *)(v27 + 40) = v32;
      *(void *)(v27 + 96) = v33;
      *(void *)(v27 + 104) = v34;
      uint64_t v35 = v63;
      *(void *)(v27 + 64) = v34;
      *(void *)(v27 + 72) = v35;
      *(void *)(v27 + 80) = v11;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v24 = static EntityBuilder.OutputName;
  uint64_t v25 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v24, v25, &v66);
  if (v67)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast())
    {
      uint64_t v26 = v65;
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0
        || (uint64_t v37 = specialized Inputs.pathsForRelationship(named:requestContext:)(),
            swift_bridgeObjectRelease(),
            !*(void *)(v37 + 16)))
      {
        swift_bridgeObjectRelease();
        ImageBasedLightReceiverBuilder.clear(inputs:)();
        swift_release();
        swift_release();
        return;
      }
      uint64_t v63 = v26;
      id v38 = *(id *)(v37 + 32);
      swift_bridgeObjectRelease();
      id v39 = v38;
      id v40 = (id)RIOBuilderInputsGetImportSession();
      if (v40)
      {
        uint64_t v41 = v40;
        uint64_t SwiftObject = RIOImportSessionGetSwiftObject();

        if (SwiftObject)
        {
          swift_retain();
          swift_beginAccess();
          id v43 = v39;
          uint64_t EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
          if (!EntityAtPrimPath)
          {

            swift_release();
            if (one-time initialization token for iblComponents != -1) {
              swift_once();
            }
            uint64_t v61 = static OS_os_log.iblComponents;
            LODWORD(v60) = static os_log_type_t.debug.getter();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            uint64_t v50 = swift_allocObject();
            *(_OWORD *)(v50 + 16) = xmmword_23AAB24E0;
            __AssetRef.__as<A>(_:)();
            REEntityGetName();
            uint64_t v51 = String.init(cString:)();
            uint64_t v53 = v52;
            uint64_t v54 = MEMORY[0x263F8D310];
            *(void *)(v50 + 56) = MEMORY[0x263F8D310];
            unint64_t v55 = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v50 + 64) = v55;
            *(void *)(v50 + 32) = v51;
            *(void *)(v50 + 40) = v53;
            unint64_t v56 = (void *)RIOPxrSdfPathCopyString();
            uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v59 = v58;

            *(void *)(v50 + 96) = v54;
            *(void *)(v50 + 104) = v55;
            *(void *)(v50 + 72) = v57;
            *(void *)(v50 + 80) = v59;
            os_log(_:dso:log:type:_:)();
            swift_bridgeObjectRelease();
            ImageBasedLightReceiverBuilder.clear(inputs:)();
            goto LABEL_47;
          }
          uint64_t v45 = EntityAtPrimPath;
          type metadata accessor for Entity();
          uint64_t v67 = MEMORY[0x263F8DD08];
          *(void *)&long long v66 = v45;
          static __EntityRef.__fromCore(_:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v66);
          uint64_t v60 = static Entity.__fromCore(_:)();
          uint64_t v61 = *(void *)(v61 + 8);
          ((void (*)(char *, uint64_t))v61)(v6, v3);

          swift_release();
          id v46 = v62;
          __AssetRef.__as<A>(_:)();
          REImageBasedLightReceiverComponentGetComponentType();
          uint64_t v47 = REEntityGetOrAddComponentByClass();
          swift_beginAccess();
          id v48 = objc_getAssociatedObject(v46, &static BuilderAssociatedKeys.CoreReference);
          swift_endAccess();
          if (v48)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            outlined init with take of Any(&v65, &v66);
            type metadata accessor for RIOBuilderRef(0);
            swift_dynamicCast();
            long long v49 = v64;
            RIOBuilderAddComponent();

            dispatch thunk of Entity.__coreEntity.getter();
            __AssetRef.__as<A>(_:)();
            ((void (*)(char *, uint64_t))v61)(v6, v3);
            v46[17] = 1;
            REImageBasedLightReceiverComponentSetIBLEntity();
            MEMORY[0x23ECBAEA0](v47);
            swift_release();
LABEL_47:
            swift_release();
            swift_release();

            return;
          }
          goto LABEL_50;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_50:
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
    uint64_t v22 = v63;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v66);
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for iblComponents != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_23AAB22A0;
  *(void *)(v36 + 56) = MEMORY[0x263F8D310];
  *(void *)(v36 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v36 + 32) = v22;
  *(void *)(v36 + 40) = v11;
  os_log(_:dso:log:type:_:)();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t ImageBasedLightReceiverBuilder.clear(inputs:)()
{
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v1, &v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 17) & 1) == 0) {
    return swift_release();
  }
  __AssetRef.__as<A>(_:)();
  REImageBasedLightReceiverComponentGetComponentType();
  REEntityRemoveComponentByClass();
  uint64_t result = swift_release();
  *(unsigned char *)(v0 + 17) = 0;
  return result;
}

uint64_t type metadata accessor for ImageBasedLightReceiverBuilder()
{
  return self;
}

uint64_t specialized closure #2 in ImageBasedLightReceiverBuilder.inputDescriptors()()
{
  if (!RIOPxrUsdStageHasPrimAtPrimPath()) {
    return 0;
  }
  id v0 = (id)RIOPxrTfTokenEmpty();
  uint64_t PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = PrimIfNeeded;
  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v3 = (id)static ImageBasedLightReceiverBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  long long v4 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v5 = RIOPxrUsdAttributeCopyValue();
  if (!v5)
  {
    swift_release();

    return 0;
  }
  uint64_t v6 = (void *)v5;
  uint64_t v7 = RIOPxrVtValueCopyToken();
  if (!v7)
  {
    swift_release();

    return 0;
  }
  id v8 = (void *)v7;

  id v9 = v8;
  uint64_t v10 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized ImageBasedLightReceiverBuilder.stageSubscription.getter()
{
  if (one-time initialization token for realityKitComponentTypeName != -1) {
    swift_once();
  }
  unint64_t v9 = static ImageBasedLightReceiverBuilder.realityKitComponentTypeName;
  id v0 = (id)static ImageBasedLightReceiverBuilder.realityKitComponentTypeName;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v9;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v9 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

void partial apply for closure #1 in ImageBasedLightReceiverBuilder.run(inputs:)()
{
  closure #1 in ImageBasedLightReceiverBuilder.run(inputs:)(*(void *)(v0 + 16), *(unsigned char **)(v0 + 24));
}

uint64_t sub_23AA02DA0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_23AA02DC8()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2)
{
  return closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 32));
}

uint64_t Inputs.identifierForEntity(withInputKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Inputs.subscript.getter(a1, a2, &v7);
  if (v8)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast())
    {
      __EntityRef.__validInteractionIdentifier.getter();
      swift_release();
      uint64_t v4 = type metadata accessor for UUID();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a3, 0, 1, v4);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v7);
  }
  uint64_t v6 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a3, 1, 1, v6);
}

uint64_t closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(unint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3)
{
  v13[1] = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_3;
    }
LABEL_11:
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v9 >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = MEMORY[0x23ECBA630](v11, a1);
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      ++v11;
      __EntityRef.__validInteractionIdentifier.getter();
      a2(v12, v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_release();
    }
    while (v9 != v11);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized Inputs.pathsForRelationship(named:requestContext:)()
{
  Inputs.prim.getter();
  swift_bridgeObjectRetain();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (RIOPxrUsdPrimHasRelationship())
  {
    uint64_t v1 = RIOPxrUsdPrimCopyRelationship();

    swift_release();
    type metadata accessor for Relationship();
    uint64_t v2 = (void *)swift_allocObject();
    v2[2] = v1;
    uint64_t v3 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
    return v3;
  }
  else
  {

    swift_release();
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_allocError();
    *uint64_t v5 = 0;
    return swift_willThrow();
  }
}

uint64_t specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = Inputs.accumulatedValues(forKey:)(a1, a2);
  uint64_t v7 = specialized _arrayConditionalCast<A, B>(_:)(v6);
  uint64_t v8 = swift_bridgeObjectRelease();
  if (v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = MEMORY[0x263F8EE78];
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_6:
      MEMORY[0x270FA5388](v8);
      void v15[2] = v9;
      v15[3] = a3;
      v15[4] = a4;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = partial apply for closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:);
      *(void *)(v10 + 24) = v15;
      aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
      aBlock[5] = v10;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_10;
      uint64_t v11 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      RIOBuilderInputsPerformBlockSyncOnEngineQueue();
      _Block_release(v11);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
      return result;
    }
  }
  else if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)()
{
  return closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(*(void *)(v0 + 16), *(void (**)(uint64_t, char *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_23AA03470()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t __RKEntityHideActionBuildOutAnimationType.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    char v15 = 0;
LABEL_12:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 1);
    goto LABEL_13;
  }
  uint64_t v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_11:
    char v15 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_11;
  }
  uint64_t v7 = (void *)v6;

  swift_release();
  uint64_t v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v16._countAndFlagsBits = v9;
  v16._object = v11;
  char v12 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v16);
  if (v12 != 10)
  {
    char v13 = v12;
    swift_release();
    return __RKEntityHideActionBuildOutAnimationType.init(from:)(v13, a1);
  }
LABEL_13:
  lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError();
  swift_allocError();
  swift_willThrow();
  return swift_release();
}

uint64_t __RKEntityHideActionBuildOutAnimationType.init(from:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16478];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F164A0];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16498];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16480];
      break;
    case 5:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16488];
      break;
    case 6:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16490];
      break;
    case 7:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F164A8];
      break;
    case 8:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F164C0];
      break;
    case 9:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F164B8];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F164B0];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t __RKEntityShowActionBuildInAnimationType.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    id v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    id v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    uint64_t v14 = 0;
LABEL_12:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v14, 1);
    uint64_t v15 = *MEMORY[0x263F16460];
    uint64_t v16 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(a1, v15, v16);
  }
  uint64_t v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_11:
    uint64_t v14 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_11;
  }
  uint64_t v7 = (void *)v6;

  swift_release();
  uint64_t v8 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v18._countAndFlagsBits = v9;
  v18._object = v11;
  char v12 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v18);
  if (v12 == 10)
  {
    lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  else
  {
    char v17 = v12;
    swift_release();
    return __RKEntityShowActionBuildInAnimationType.init(from:)(v17, a1);
  }
}

uint64_t __RKEntityShowActionBuildInAnimationType.init(from:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16428];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16450];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16448];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16430];
      break;
    case 5:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16438];
      break;
    case 6:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16440];
      break;
    case 7:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16458];
      break;
    case 8:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16470];
      break;
    case 9:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16468];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F16460];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t __RKEntityActionVisibilityTypeUSD.rawValue.getter(char a1)
{
  return *(void *)&aNone_2[8 * a1];
}

unint64_t specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionVisibilityTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

uint64_t specialized __RKEntityActionVisibilityTypeUSD.init(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == *MEMORY[0x263F164B0])
  {
    uint64_t v8 = 0;
LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return v8;
  }
  if (v7 == *MEMORY[0x263F16478])
  {
    uint64_t v8 = 1;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F164A0])
  {
    uint64_t v8 = 2;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16498])
  {
    uint64_t v8 = 3;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16480])
  {
    uint64_t v8 = 4;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16488])
  {
    uint64_t v8 = 5;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16490])
  {
    uint64_t v8 = 6;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F164A8])
  {
    uint64_t v8 = 7;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F164B8])
  {
    uint64_t v8 = 9;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F164C0])
  {
    uint64_t v8 = 8;
    goto LABEL_21;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  uint64_t v2 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == *MEMORY[0x263F16460])
  {
    uint64_t v8 = 0;
LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return v8;
  }
  if (v7 == *MEMORY[0x263F16428])
  {
    uint64_t v8 = 1;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16450])
  {
    uint64_t v8 = 2;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16448])
  {
    uint64_t v8 = 3;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16430])
  {
    uint64_t v8 = 4;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16438])
  {
    uint64_t v8 = 5;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16440])
  {
    uint64_t v8 = 6;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16458])
  {
    uint64_t v8 = 7;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16468])
  {
    uint64_t v8 = 9;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x263F16470])
  {
    uint64_t v8 = 8;
    goto LABEL_21;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23AA0415CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy9RealityIO16ToolsFoundationsO5TokenVSo16RIOPxrVtValueRefaG_So0i2TfhL0a_ALts5NeverOTg503_s9d4IO16fg2O5h5VSo16ijk48RefaSo0f2TfeI0aAGIgngoo_AE3key_AG5valuetAI_AGts5n46OIegnrzr_TR05_sSD9a6IOAA16cd2O5e8VRszSo16fgH46s16Rs_rlE02vtH0AGvgtuV25_AGtAE_AGtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return (id)v2;
  }
  uint64_t v3 = a1;
  uint64_t v31 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v31;
  id result = (id)specialized Dictionary.startIndex.getter(v3);
  uint64_t v6 = (uint64_t)result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v25 = v3 + 80;
  int64_t v26 = v1;
  int v27 = v5;
  uint64_t v28 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v29 = v7;
    char v12 = *(void **)(*(void *)(v3 + 48) + 8 * v6);
    char v13 = *(void **)(*(void *)(v3 + 56) + 8 * v6);
    uint64_t v14 = v3;
    unint64_t v15 = *(void *)(v31 + 16);
    unint64_t v16 = *(void *)(v31 + 24);
    int64_t v30 = v15 + 1;
    id v17 = v12;
    id result = v13;
    id v18 = result;
    if (v15 >= v16 >> 1) {
      id result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v30, 1);
    }
    *(void *)(v31 + 16) = v30;
    uint64_t v19 = v31 + 16 * v15;
    *(void *)(v19 + 32) = v17;
    *(void *)(v19 + 40) = v18;
    int64_t v9 = 1 << *(unsigned char *)(v14 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v28;
    uint64_t v20 = *(void *)(v28 + 8 * v11);
    if ((v20 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v14;
    int v5 = v27;
    if (*(_DWORD *)(v14 + 36) != v27) {
      goto LABEL_27;
    }
    unint64_t v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      int64_t v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v26;
    }
    else
    {
      unint64_t v22 = v11 + 1;
      unint64_t v23 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v26;
      if (v11 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            unint64_t v24 = *(void *)(v25 + 8 * v11++);
            if (v24)
            {
              unint64_t v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v29 + 1;
    uint64_t v6 = v9;
    if (v29 + 1 == v10) {
      return (id)v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    unsigned int v4 = (void **)(a1 + 32);
    do
    {
      int v5 = *v4++;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a5;
  uint64_t v31 = a8;
  id v40 = a1;
  uint64_t v41 = a2;
  uint64_t v29 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v42 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v12 = (char *)&v28 - v11;
  uint64_t v13 = a4;
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v17 - 8);
  uint64_t v33 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v45 = MEMORY[0x23ECBA6E0](v13);
  uint64_t v34 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v38 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v36 = (void (**)(char *))(v35 + 2);
    uint64_t v37 = v16;
    ++v35;
    while (1)
    {
      unint64_t v23 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      unint64_t v24 = v12;
      uint64_t v25 = v12;
      uint64_t v26 = AssociatedTypeWitness;
      (*v36)(v24);
      v23(v44, 0);
      uint64_t v27 = v43;
      v40(v25, v42);
      if (v27) {
        break;
      }
      uint64_t v43 = 0;
      (*v35)(v25, v26);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v21;
      char v12 = v25;
      if (!v21)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v45;
      }
    }
    (*v35)(v25, v26);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v42, v30);
  }
  return result;
}

unint64_t RIOPxrVtValueRef.asFloat.getter()
{
  return (unint64_t)(RIOPxrVtValueGetFloat() ^ 1u) << 32;
}

uint64_t RIOPxrVtValueRef.asBool.getter()
{
  if (RIOPxrVtValueGetBool()) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t RIOPxrVtValueRef.asString.getter()
{
  uint64_t v0 = RIOPxrVtValueCopyString();
  if (!v0) {
    return 0;
  }
  int64_t v1 = (void *)v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t RIOPxrVtValueRef.asAssetPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrVtValueCopyAssetPath();
  *a1 = result;
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  char v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t RIOPxrVtValueRef.asToken.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrVtValueCopyToken();
  *a1 = result;
  return result;
}

uint64_t RIOPxrVtValueRef.asDouble.getter()
{
  return 0;
}

uint64_t RIOPxrVtValueRef.asBoolArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B60], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asBoolArray.getter);
}

unint64_t RIOPxrVtValueRef.asInt32.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D18];
  return RIOPxrVtValueRef.asInt32.getter(v0);
}

uint64_t RIOPxrVtValueRef.asInt32Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37BD0], MEMORY[0x263F37D18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t RIOPxrVtValueRef.asAssetPathArray.getter(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result = a1(v4);
  if (result)
  {
    uint64_t v7 = (void *)result;
    uint64_t v9 = result;
    a4(&v8, &v9);

    return v8;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asInt64.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D28];
  return RIOPxrVtValueRef.asInt64.getter(v0);
}

uint64_t RIOPxrVtValueRef.asInt64Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37BE8], MEMORY[0x263F37D28], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

unint64_t RIOPxrVtValueRef.asUInt32.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D30];
  return RIOPxrVtValueRef.asInt32.getter(v0);
}

unint64_t RIOPxrVtValueRef.asInt32.getter(uint64_t (*a1)(uint64_t, unsigned int *))
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unsigned int v5 = 0;
  int v2 = a1(v1, &v5);
  uint64_t v3 = v5;
  if (!v2) {
    uint64_t v3 = 0;
  }
  return v3 | ((unint64_t)(v2 ^ 1u) << 32);
}

uint64_t RIOPxrVtValueRef.asUInt32Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37C30], MEMORY[0x263F37D30], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t RIOPxrVtValueRef.asUInt8.getter()
{
  return (RIOPxrVtValueGetUInt8() ^ 1) << 8;
}

uint64_t RIOPxrVtValueRef.asUInt8Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37C40], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUInt8Array.getter);
}

uint64_t RIOPxrVtValueRef.asBoolArray.getter(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result = a1(v2);
  if (result)
  {
    unsigned int v5 = (void *)result;
    uint64_t v7 = result;
    a2(&v6, &v7);

    return v6;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asUInt64.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D38];
  return RIOPxrVtValueRef.asInt64.getter(v0);
}

uint64_t RIOPxrVtValueRef.asInt64.getter(uint64_t (*a1)(uint64_t, void *))
{
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  int v2 = a1(v1, v5);
  uint64_t v3 = v5[0];
  if (!v2) {
    return 0;
  }
  return v3;
}

uint64_t RIOPxrVtValueRef.asUInt64Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37C38], MEMORY[0x263F37D38], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloatArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BA0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloatArray.getter);
}

uint64_t RIOPxrVtValueRef.asDoubleArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B80], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDoubleArray.getter);
}

uint64_t RIOPxrVtValueRef.asInt2.getter()
{
  return 0;
}

uint64_t RIOPxrVtValueRef.asInt2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BC8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt2Array.getter);
}

uint64_t RIOPxrVtValueRef.asInt3.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D10];
  return RIOPxrVtValueRef.asInt3.getter(v0);
}

uint64_t RIOPxrVtValueRef.asInt3Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37BD8], MEMORY[0x263F37D10], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t RIOPxrVtValueRef.asInt4.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D20];
  return RIOPxrVtValueRef.asInt3.getter(v0);
}

uint64_t RIOPxrVtValueRef.asInt3.getter(uint64_t (*a1)(uint64_t, void *))
{
  v5[3] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  v5[1] = 0;
  int v2 = a1(v1, v5);
  uint64_t v3 = v5[0];
  if (!v2) {
    return 0;
  }
  return v3;
}

uint64_t RIOPxrVtValueRef.asInt4Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37BE0], MEMORY[0x263F37D20], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloat2.getter()
{
  return 0;
}

uint64_t RIOPxrVtValueRef.asFloat2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B88], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat2Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloat3.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37CF8];
  return RIOPxrVtValueRef.asFloat3.getter(v0);
}

uint64_t RIOPxrVtValueRef.asFloat3Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37B90], MEMORY[0x263F37CF8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat3Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloat4.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D00];
  return RIOPxrVtValueRef.asFloat3.getter(v0);
}

uint64_t RIOPxrVtValueRef.asFloat3.getter(uint64_t (*a1)(uint64_t, void *))
{
  v5[3] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  v5[1] = 0;
  int v2 = a1(v1, v5);
  uint64_t v3 = v5[0];
  if (!v2) {
    return 0;
  }
  return v3;
}

uint64_t RIOPxrVtValueRef.asFloat4Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37B98], MEMORY[0x263F37D00], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat3Array.getter);
}

uint64_t RIOPxrVtValueRef.asDouble2.getter()
{
  return 0;
}

uint64_t RIOPxrVtValueRef.asDouble2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B68], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble2Array.getter);
}

uint64_t RIOPxrVtValueRef.asDouble3.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CE8];
  return RIOPxrVtValueRef.asDouble3.getter(v1, a1);
}

uint64_t RIOPxrVtValueRef.asDouble3Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37B70], MEMORY[0x263F37CE8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t RIOPxrVtValueRef.asDouble4.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CF0];
  return RIOPxrVtValueRef.asDouble3.getter(v1, a1);
}

uint64_t RIOPxrVtValueRef.asDouble3.getter@<X0>(uint64_t (*a1)(uint64_t, long long *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t result = a1(v2, &v9);
  if (result)
  {
    uint64_t v6 = *((void *)&v9 + 1);
    uint64_t v5 = v9;
    uint64_t v8 = *((void *)&v10 + 1);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asDouble4Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37B78], MEMORY[0x263F37CF0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t RIOPxrVtValueRef.asQuatf.getter()
{
  return 0;
}

uint64_t RIOPxrVtValueRef.asQuatfArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37C18], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatfArray.getter);
}

uint64_t RIOPxrVtValueRef.asQuatd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetQuatd();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asQuatdArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37C10], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatdArray.getter);
}

uint64_t RIOPxrVtValueRef.asMatrix2d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetMatrix2d();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asMatrix2dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BF0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter);
}

uint64_t RIOPxrVtValueRef.asMatrix3d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetMatrix3d();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asMatrix3dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BF8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asMatrix4d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (RIOPxrVtValueGetMatrix4d())
  {
    memset(v3, 0, 128);
    _s9RealityIO7Frame4DVSgWOi_((uint64_t)v3);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v3);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v3, (uint64_t)v4, &demangling cache variable for type metadata for simd_double4x4?);
  return outlined init with take of (URL, __REAsset)((uint64_t)v4, a1, &demangling cache variable for type metadata for simd_double4x4?);
}

uint64_t RIOPxrVtValueRef.asMatrix4dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37C00], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter);
}

uint64_t RIOPxrVtValueRef.asStringArray.getter()
{
  uint64_t result = RIOPxrVtValueCopyStringArray();
  if (result)
  {
    uint64_t v1 = (void *)result;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asTokenArray.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37C28], (uint64_t)type metadata accessor for RIOPxrTfTokenRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t RIOPxrVtValueRef.asPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrVtValueCopyPath();
  *a1 = result;
  return result;
}

uint64_t RIOPxrVtValueRef.asPathListOp.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37C08], (uint64_t)type metadata accessor for RIOPxrSdfPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t RIOPxrVtValueRef.asAssetPathArray.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x263F37B58], (uint64_t)type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t RIOPxrVtValueRef.mapUSDValue<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (swift_dynamicCastMetatype())
  {
    int Bool = RIOPxrVtValueGetBool();
    char v5 = 0;
    if (!Bool) {
      char v5 = 2;
    }
    v89.i8[0] = v5;
    uint64_t v6 = &demangling cache variable for type metadata for Bool?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    v89.i32[0] = 0;
    v89.i8[4] = RIOPxrVtValueGetInt32() ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Int32?;
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(v6);
LABEL_10:
    int v7 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v7 ^ 1u, 1, a1);
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asInt.getter();
    v89.i8[8] = v9 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Int?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asInt64.getter();
    v89.i8[8] = v10 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Int64?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i16[0] = RIOPxrVtValueRef.asUInt8.getter() & 0x1FF;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for UInt8?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    unint64_t v11 = RIOPxrVtValueRef.asUInt32.getter();
    v89.i32[0] = v11;
    v89.i8[4] = BYTE4(v11) & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for UInt32?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asUInt.getter();
    v89.i8[8] = v12 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for UInt?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asUInt64.getter();
    v89.i8[8] = v13 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for UInt64?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asInt2.getter();
    v89.i8[8] = v14 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Int32>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asInt3.getter();
    v89.i64[1] = v15;
    LOBYTE(v90) = v16 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Int32>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asInt4.getter();
    v89.i64[1] = v17;
    LOBYTE(v90) = v18 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Int32>?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i32[0] = 0;
    v89.i8[4] = RIOPxrVtValueGetFloat() ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Half?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asHalf2.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord2<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asTexCoord2h.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asHalf3.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asTexCoord3h.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Color3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Point3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asNormal3h.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Point3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Normal3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asNormal3h.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Vector3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asNormal3h.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asTexCoord3h.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asHalf4.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color4<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asColor4h.getter(v89.i64);
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Color4<Half>?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    unint64_t v19 = RIOPxrVtValueRef.asFloat.getter();
    v89.i32[0] = v19;
    v89.i8[4] = BYTE4(v19) & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Float?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asFloat2.getter();
    v89.i8[8] = v20 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asFloat3.getter();
    v89.i64[1] = v21;
    LOBYTE(v90) = v22 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asFloat4.getter();
    v89.i64[1] = v23;
    LOBYTE(v90) = v24 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color3<Float>);
  if (swift_dynamicCastMetatype())
  {
    int Float3 = RIOPxrVtValueGetFloat3();
    int8x16_t v26 = 0uLL;
    v26.i32[3] = 0;
    if (Float3) {
      unint64_t v27 = -1;
    }
    else {
      unint64_t v27 = 0;
    }
    int8x16_t v89 = vandq_s8(v26, (int8x16_t)vdupq_n_s64(v27));
    LOBYTE(v90) = Float3 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Color3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color4<Float>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0uLL;
    LOBYTE(v90) = RIOPxrVtValueGetFloat4() ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Color4<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Point3<Float>);
  if (swift_dynamicCastMetatype())
  {
    int v28 = RIOPxrVtValueGetFloat3();
    int8x16_t v29 = 0uLL;
    v29.i32[3] = 0;
    if (v28) {
      unint64_t v30 = -1;
    }
    else {
      unint64_t v30 = 0;
    }
    int8x16_t v89 = vandq_s8(v29, (int8x16_t)vdupq_n_s64(v30));
    LOBYTE(v90) = v28 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Point3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Normal3<Float>);
  if (swift_dynamicCastMetatype())
  {
    int v31 = RIOPxrVtValueGetFloat3();
    int8x16_t v32 = 0uLL;
    v32.i32[3] = 0;
    if (v31) {
      unint64_t v33 = -1;
    }
    else {
      unint64_t v33 = 0;
    }
    int8x16_t v89 = vandq_s8(v32, (int8x16_t)vdupq_n_s64(v33));
    LOBYTE(v90) = v31 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Vector3<Float>);
  if (swift_dynamicCastMetatype())
  {
    int v34 = RIOPxrVtValueGetFloat3();
    int8x16_t v35 = 0uLL;
    v35.i32[3] = 0;
    if (v34) {
      unint64_t v36 = -1;
    }
    else {
      unint64_t v36 = 0;
    }
    int8x16_t v89 = vandq_s8(v35, (int8x16_t)vdupq_n_s64(v36));
    LOBYTE(v90) = v34 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord3<Float>);
  if (swift_dynamicCastMetatype())
  {
    int v37 = RIOPxrVtValueGetFloat3();
    int8x16_t v38 = 0uLL;
    v38.i32[3] = 0;
    if (v37) {
      unint64_t v39 = -1;
    }
    else {
      unint64_t v39 = 0;
    }
    int8x16_t v89 = vandq_s8(v38, (int8x16_t)vdupq_n_s64(v39));
    LOBYTE(v90) = v37 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Float>?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asDouble.getter();
    v89.i8[8] = v40 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Double?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asDouble2.getter();
    v89.i64[1] = v41;
    LOBYTE(v90) = v42 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int Double3 = RIOPxrVtValueGetDouble3();
    if (Double3)
    {
      uint64_t v45 = v89.i64[1];
      uint64_t v44 = v89.i64[0];
      uint64_t v47 = *((void *)&v90 + 1);
      uint64_t v46 = v90;
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    v89.i64[0] = v44;
    v89.i64[1] = v45;
    *(void *)&long long v90 = v46;
    *((void *)&v90 + 1) = v47;
    char v91 = Double3 ^ 1;
    uint64_t v50 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Double>?;
    goto LABEL_99;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color3<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int8x16_t v83 = 0u;
    int v48 = RIOPxrVtValueGetDouble3();
    if (v48)
    {
      int8x16_t v83 = v89;
      unint64_t v49 = v90;
    }
    else
    {
      unint64_t v49 = 0;
    }
    int8x16_t v89 = v83;
    long long v90 = v49;
    char v91 = v48 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Color3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Point3<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int8x16_t v84 = 0u;
    int v51 = RIOPxrVtValueGetDouble3();
    if (v51)
    {
      int8x16_t v84 = v89;
      unint64_t v52 = v90;
    }
    else
    {
      unint64_t v52 = 0;
    }
    int8x16_t v89 = v84;
    long long v90 = v52;
    char v91 = v51 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Point3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Normal3<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int8x16_t v85 = 0u;
    int v53 = RIOPxrVtValueGetDouble3();
    if (v53)
    {
      int8x16_t v85 = v89;
      unint64_t v54 = v90;
    }
    else
    {
      unint64_t v54 = 0;
    }
    int8x16_t v89 = v85;
    long long v90 = v54;
    char v91 = v53 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Vector3<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int8x16_t v86 = 0u;
    int v55 = RIOPxrVtValueGetDouble3();
    if (v55)
    {
      int8x16_t v86 = v89;
      unint64_t v56 = v90;
    }
    else
    {
      unint64_t v56 = 0;
    }
    int8x16_t v89 = v86;
    long long v90 = v56;
    char v91 = v55 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord3<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int8x16_t v87 = 0u;
    int v57 = RIOPxrVtValueGetDouble3();
    if (v57)
    {
      int8x16_t v87 = v89;
      unint64_t v58 = v90;
    }
    else
    {
      unint64_t v58 = 0;
    }
    int8x16_t v89 = v87;
    long long v90 = v58;
    char v91 = v57 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int Double4 = RIOPxrVtValueGetDouble4();
    if (Double4)
    {
      uint64_t v61 = v89.i64[1];
      uint64_t v60 = v89.i64[0];
      uint64_t v63 = *((void *)&v90 + 1);
      uint64_t v62 = v90;
    }
    else
    {
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
    }
    v89.i64[0] = v60;
    v89.i64[1] = v61;
    *(void *)&long long v90 = v62;
    *((void *)&v90 + 1) = v63;
    char v91 = Double4 ^ 1;
    uint64_t v50 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Double>?;
    goto LABEL_99;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color4<Double>);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int v64 = RIOPxrVtValueGetDouble4();
    if (v64)
    {
      uint64_t v66 = v89.i64[1];
      uint64_t v65 = v89.i64[0];
      uint64_t v68 = *((void *)&v90 + 1);
      uint64_t v67 = v90;
    }
    else
    {
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
    }
    v89.i64[0] = v65;
    v89.i64[1] = v66;
    *(void *)&long long v90 = v67;
    *((void *)&v90 + 1) = v68;
    char v91 = v64 ^ 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for Color4<Double>?;
    goto LABEL_9;
  }
  type metadata accessor for simd_quatf(0);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asQuatf.getter();
    v89.i64[1] = v69;
    LOBYTE(v90) = v70 & 1;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for simd_quatf?;
    goto LABEL_9;
  }
  type metadata accessor for simd_quatd(0);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int Quatd = RIOPxrVtValueGetQuatd();
    if (Quatd)
    {
      uint64_t v73 = v89.i64[1];
      uint64_t v72 = v89.i64[0];
      uint64_t v75 = *((void *)&v90 + 1);
      uint64_t v74 = v90;
    }
    else
    {
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
    }
    v89.i64[0] = v72;
    v89.i64[1] = v73;
    *(void *)&long long v90 = v74;
    *((void *)&v90 + 1) = v75;
    char v91 = Quatd ^ 1;
    uint64_t v50 = (uint64_t *)&demangling cache variable for type metadata for simd_quatd?;
    goto LABEL_99;
  }
  type metadata accessor for simd_double2x2(0);
  if (swift_dynamicCastMetatype())
  {
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int Matrix2d = RIOPxrVtValueGetMatrix2d();
    if (Matrix2d)
    {
      uint64_t v78 = v89.i64[1];
      uint64_t v77 = v89.i64[0];
      uint64_t v80 = *((void *)&v90 + 1);
      uint64_t v79 = v90;
    }
    else
    {
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
    }
    v89.i64[0] = v77;
    v89.i64[1] = v78;
    *(void *)&long long v90 = v79;
    *((void *)&v90 + 1) = v80;
    char v91 = Matrix2d ^ 1;
    uint64_t v50 = (uint64_t *)&demangling cache variable for type metadata for simd_double2x2?;
    goto LABEL_99;
  }
  type metadata accessor for simd_double3x3(0);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asMatrix3d.getter((uint64_t)&v89);
    uint64_t v50 = (uint64_t *)&demangling cache variable for type metadata for simd_double3x3?;
LABEL_99:
    outlined init with take of (URL, __REAsset)((uint64_t)&v89, (uint64_t)v88, v50);
    __swift_instantiateConcreteTypeFromMangledName(v50);
    goto LABEL_10;
  }
  type metadata accessor for simd_double4x4(0);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asMatrix4d.getter((uint64_t)&v89);
    uint64_t v50 = &demangling cache variable for type metadata for simd_double4x4?;
    goto LABEL_99;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asString.getter();
    v89.i64[1] = v81;
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for String?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueCopyToken();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for ToolsFoundations.Token?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueCopyPath();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SceneDescriptionFoundations.Path?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueCopyAssetPath();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for SceneDescriptionFoundations.AssetPath?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asBoolArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Bool]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int8]);
  if (swift_dynamicCastMetatype()
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]),
        swift_dynamicCastMetatype())
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]),
        swift_dynamicCastMetatype()))
  {
    v89.i64[0] = RIOPxrVtValueRef.asInt32Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Int32]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asIntArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Int]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asInt64Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Int64]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asUIntArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asUInt8Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt8]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]);
  if (swift_dynamicCastMetatype()
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]),
        swift_dynamicCastMetatype()))
  {
    v89.i64[0] = RIOPxrVtValueRef.asUInt32Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt32]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asUInt64Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt64]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Half]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asHalfArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Half]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asHalf2Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord2<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asTexCoord2hArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asHalf3Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asColor3hArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Point3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asPoint3hArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Normal3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asNormal3hArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Vector3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asVector3hArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asTexCoord3hArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asHalf4Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color4<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asColor4hArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asFloatArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Float]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asFloat2Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord2<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asTexCoord2fArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asFloat3Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asColor3fArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Point3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asPoint3fArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Normal3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asNormal3fArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Vector3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asVector3fArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asTexCoord3fArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asFloat4Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color4<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asColor4fArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asDoubleArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Double]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asDouble2Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord2<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asTexCoord2dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asDouble3Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asColor3dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Point3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asPoint3dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Normal3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asNormal3dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Vector3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asVector3dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asTexCoord3dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asDouble4Array.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color4<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asColor4dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatf]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asQuatfArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatf]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatd]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asQuatdArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatd]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double2x2]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asMatrix2dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_double2x2]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double3x3]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asMatrix3dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_double3x3]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double4x4]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asMatrix4dArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_double4x4]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asStringArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [String]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolsFoundations.Token]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asTokenArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [ToolsFoundations.Token]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.Path]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asPathListOp.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SceneDescriptionFoundations.Path]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asAssetPathArray.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolsFoundations.Token : RIOPxrVtValueRef]);
  if (swift_dynamicCastMetatype())
  {
    v89.i64[0] = RIOPxrVtValueRef.asDictionary.getter();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for [ToolsFoundations.Token : RIOPxrVtValueRef]?;
    goto LABEL_9;
  }
  uint64_t v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  return v82(a2, 1, 1, a1);
}

uint64_t static UsdAttributeValue.setValue(_:to:time:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)(*a2 + 104) + 8))(a1, a2[2], *(void *)(*a2 + 96));
}

uint64_t static UsdAttributeValue.getValue(from:time:)(void *a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(*a1 + 104) + 24))(a1[2], *(void *)(*a1 + 96));
}

uint64_t static UsdAttributeValueArrayElement.getValueArray(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a3 + 16))();
  if (!result) {
    return static Array._allocateUninitialized(_:)();
  }
  return result;
}

uint64_t static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a3 + 24))();
  if (!result)
  {
    type metadata accessor for SIMD2();
    return static Array._allocateUninitialized(_:)();
  }
  return result;
}

uint64_t static UsdAttributeValueSIMD3ArrayElement.getValue3Array(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a3 + 24))();
  if (!result)
  {
    type metadata accessor for SIMD3();
    return static Array._allocateUninitialized(_:)();
  }
  return result;
}

uint64_t static UsdAttributeValueSIMD4ArrayElement.getValue4Array(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a3 + 24))();
  if (!result)
  {
    type metadata accessor for SIMD4();
    return static Array._allocateUninitialized(_:)();
  }
  return result;
}

uint64_t Bool.vtValue.getter()
{
  return RIOPxrVtValueCreateWithBool();
}

uint64_t static Bool.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateBool();
  *a1 = result;
  return result;
}

uint64_t static Bool.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithBool();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Bool.getValueOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  uint64_t v1 = 2;
  if (v0)
  {
    uint64_t v2 = (void *)v0;
    int Bool = RIOPxrVtValueGetBool();

    if (Bool) {
      return 0;
    }
    else {
      return 2;
    }
  }
  return v1;
}

uint64_t static Bool.getValue(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetBool();

    return 0;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Bool()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithBool();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Bool(char *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  char v3 = 2;
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    int Bool = RIOPxrVtValueGetBool();

    if (Bool) {
      char v3 = 0;
    }
    else {
      char v3 = 2;
    }
  }
  *a1 = v3;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Bool(unsigned char *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    char v3 = (void *)v2;
    RIOPxrVtValueGetBool();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Bool@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateBool();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Bool()
{
  return RIOPxrVtValueCreateWithBool();
}

uint64_t Int8.vtValue.getter()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t static Int8.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt32();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int8.getValueOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  int v3 = 1;
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    char Int32 = RIOPxrVtValueGetInt32();

    if (Int32) {
      int v3 = 0;
    }
  }
  return (v3 << 8);
}

uint64_t static Int8.getValue(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetInt32();

    return 0;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int8()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt32();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int8(unsigned char *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  BOOL v5 = 1;
  if (v2)
  {
    int v3 = (void *)v2;
    int Int32 = RIOPxrVtValueGetInt32();

    if (Int32) {
      BOOL v5 = 0;
    }
  }
  *a1 = 0;
  a1[1] = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int8(unsigned char *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    int v3 = (void *)v2;
    RIOPxrVtValueGetInt32();
  }
  *a1 = 0;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int8()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t Int16.vtValue.getter()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t static Int16.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt32();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int16.getValueOpt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D18];
  return static Int16.getValueOpt(from:time:)(a1, v1);
}

uint64_t static Int16.getValue(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D18];
  return static Int16.getValue(from:time:)(a1, v1);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int16()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt32();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D18];
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16(_WORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D18];
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16(v1, a1);
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int16()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t static Int32.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, MEMORY[0x263F37C80]);
}

unint64_t static Int32.getValueOpt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D18];
  return static Int32.getValueOpt(from:time:)(a1, v1);
}

uint64_t static Int32.getValue(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D18];
  return static Int16.getValue(from:time:)(a1, v1);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37C80]);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D18];
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32(_DWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D18];
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32(v1, a1);
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t Int.vtValue.getter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return RIOPxrVtValueCreateWithInt32();
  }
  __break(1u);
  return result;
}

uint64_t static Int.setValue(_:to:time:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    uint64_t v1 = (void *)RIOPxrVtValueCreateWithInt32();
    uint64_t v2 = RIOPxrUsdAttributeSetValue();

    return v2;
  }
  __break(1u);
  return result;
}

uint64_t static Int.getValueOpt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetInt32();

    return 0;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asInt.getter()
{
  return 0;
}

uint64_t static Int.getValue(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetInt32();

    return 0;
  }
  return result;
}

uint64_t static Int.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    uint64_t v2 = (void *)RIOPxrVtValueCreateWithInt32();
    uint64_t v3 = RIOPxrUsdAttributeSetValue();

    return v3;
  }
  __break(1u);
  return result;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Int32 = RIOPxrVtValueGetInt32();

    char v5 = Int32 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int(void *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    RIOPxrVtValueGetInt32();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int()
{
  uint64_t result = *v0;
  if (*v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return RIOPxrVtValueCreateWithInt32();
  }
  __break(1u);
  return result;
}

uint64_t Int64.vtValue.getter()
{
  return MEMORY[0x270F230C0]();
}

uint64_t static Int64.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int64.setValue(_:to:time:)(a1, a2, MEMORY[0x263F37CA8]);
}

uint64_t static Int64.getValueOpt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D28];
  return static Int64.getValueOpt(from:time:)(a1, v1);
}

uint64_t static Int64.getValue(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D28];
  return static Int64.getValue(from:time:)(a1, v1);
}

uint64_t static Int64.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt64();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(a1, a2, a3, a4, MEMORY[0x263F37CA8]);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D28];
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64(void *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D28];
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64(v1, a1);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Int64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt64();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int64()
{
  return MEMORY[0x270F230C0](*v0);
}

uint64_t UInt.vtValue.getter(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return RIOPxrVtValueCreateWithUInt32();
  }
  return result;
}

uint64_t static UInt.setValue(_:to:time:)(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = (void *)RIOPxrVtValueCreateWithUInt32();
    uint64_t v2 = RIOPxrUsdAttributeSetValue();

    return v2;
  }
  return result;
}

uint64_t static UInt.getValueOpt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetUInt32();

    return 0;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asUInt.getter()
{
  return 0;
}

uint64_t static UInt.getValue(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetUInt32();

    return 0;
  }
  return result;
}

uint64_t static UInt.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt(void *a1)
{
  if (HIDWORD(*a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = (void *)RIOPxrVtValueCreateWithUInt32();
    uint64_t v2 = RIOPxrUsdAttributeSetValue();

    return v2;
  }
  return result;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    Uchar Int32 = RIOPxrVtValueGetUInt32();

    char v5 = UInt32 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt(void *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    RIOPxrVtValueGetUInt32();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance UInt@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt()
{
  if (HIDWORD(*v0))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return RIOPxrVtValueCreateWithUInt32();
  }
  return result;
}

uint64_t UInt8.vtValue.getter()
{
  return RIOPxrVtValueCreateWithUInt8();
}

uint64_t static UInt8.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithUInt8();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static UInt8.getValueOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    int UInt8 = RIOPxrVtValueGetUInt8();

    int v3 = UInt8 ^ 1;
  }
  else
  {
    int v3 = 1;
  }
  return (v3 << 8);
}

uint64_t static UInt8.getValue(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetUInt8();

    return 0;
  }
  return result;
}

uint64_t static UInt8.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt8();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt8()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithUInt8();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt8(unsigned char *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    int v3 = (void *)v2;
    char UInt8 = RIOPxrVtValueGetUInt8();

    char v5 = UInt8 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *a1 = 0;
  a1[1] = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt8(unsigned char *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    int v3 = (void *)v2;
    RIOPxrVtValueGetUInt8();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance UInt8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt8();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt8()
{
  return RIOPxrVtValueCreateWithUInt8();
}

uint64_t UInt16.vtValue.getter()
{
  return RIOPxrVtValueCreateWithUInt32();
}

uint64_t static UInt16.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithUInt32();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static UInt16.getValueOpt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D30];
  return static Int16.getValueOpt(from:time:)(a1, v1);
}

uint64_t static Int16.getValueOpt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, int *))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (v3 && (uint64_t v4 = (void *)v3, v9 = 0, v5 = a2(v3, &v9), v4, (v5 & 1) != 0))
  {
    int v6 = 0;
    int v7 = (unsigned __int16)v9;
  }
  else
  {
    int v7 = 0;
    int v6 = 1;
  }
  return v7 | (v6 << 16);
}

uint64_t static UInt16.getValue(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D30];
  return static Int16.getValue(from:time:)(a1, v1);
}

uint64_t static Int16.getValue(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, unsigned int *))
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v4 = (void *)result;
    unsigned int v6 = 0;
    char v5 = a2(result, &v6);

    if (v5) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt16()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithUInt32();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt16(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D30];
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16(uint64_t (*a1)(uint64_t, int *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (char v5 = (void *)v4, v9 = 0, v6 = a1(v4, &v9), v5, v6))
  {
    char v7 = 0;
    __int16 v8 = v9;
  }
  else
  {
    __int16 v8 = 0;
    char v7 = 1;
  }
  *(_WORD *)a2 = v8;
  *(unsigned char *)(a2 + 2) = v7;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt16(_WORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D30];
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16(uint64_t (*a1)(uint64_t, int *)@<X3>, _WORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (char v5 = (void *)v4, v8 = 0, v6 = a1(v4, &v8), v5, v6)) {
    __int16 v7 = v8;
  }
  else {
    __int16 v7 = 0;
  }
  *a2 = v7;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt16()
{
  return RIOPxrVtValueCreateWithUInt32();
}

uint64_t static UInt32.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, MEMORY[0x263F37CC8]);
}

uint64_t static Int32.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = (void *)a3();
  uint64_t v4 = RIOPxrUsdAttributeSetValue();

  return v4;
}

unint64_t static UInt32.getValueOpt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D30];
  return static Int32.getValueOpt(from:time:)(a1, v1);
}

unint64_t static Int32.getValueOpt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, unsigned int *))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    unsigned int v9 = 0;
    int v5 = a2(v3, &v9);

    uint64_t v6 = v9;
    unsigned __int8 v7 = v5 ^ 1;
    if (!v5) {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unsigned __int8 v7 = 1;
  }
  return v6 | ((unint64_t)v7 << 32);
}

uint64_t static UInt32.getValue(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x263F37D30];
  return static Int16.getValue(from:time:)(a1, v1);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt32(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37CC8]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  int v5 = (void *)a5(*a1);
  uint64_t v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt32(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D30];
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32(uint64_t (*a1)(uint64_t, int *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    int v5 = (void *)v4;
    int v9 = 0;
    int v6 = a1(v4, &v9);

    int v7 = v9;
    if (!v6) {
      int v7 = 0;
    }
    char v8 = v6 ^ 1;
  }
  else
  {
    int v7 = 0;
    char v8 = 1;
  }
  *(_DWORD *)a2 = v7;
  *(unsigned char *)(a2 + 4) = v8;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt32(_DWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F37D30];
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32(uint64_t (*a1)(uint64_t, int *)@<X3>, _DWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (int v5 = (void *)v4, v8 = 0, v6 = a1(v4, &v8), v5, v6)) {
    int v7 = v8;
  }
  else {
    int v7 = 0;
  }
  *a2 = v7;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt32()
{
  return RIOPxrVtValueCreateWithUInt32();
}

uint64_t UInt64.vtValue.getter()
{
  return MEMORY[0x270F23158]();
}

uint64_t static UInt64.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt64();
  *a1 = result;
  return result;
}

uint64_t static UInt64.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int64.setValue(_:to:time:)(a1, a2, MEMORY[0x263F37CD8]);
}

uint64_t static Int64.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = (void *)a3();
  uint64_t v4 = RIOPxrUsdAttributeSetValue();

  return v4;
}

uint64_t static UInt64.getValueOpt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D38];
  return static Int64.getValueOpt(from:time:)(a1, v1);
}

uint64_t static Int64.getValueOpt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, void *))
{
  v6[1] = *MEMORY[0x263EF8340];
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v4 = (void *)result;
    v6[0] = 0;
    int v5 = a2(result, v6);

    if (v5) {
      return v6[0];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t static UInt64.getValue(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D38];
  return static Int64.getValue(from:time:)(a1, v1);
}

uint64_t static Int64.getValue(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, void *))
{
  v6[1] = *MEMORY[0x263EF8340];
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v4 = (void *)result;
    v6[0] = 0;
    char v5 = a2(result, v6);

    if (v5) {
      return v6[0];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(a1, a2, a3, a4, MEMORY[0x263F37CD8]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  char v5 = (void *)a5(*a1);
  uint64_t v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt64(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D38];
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64(uint64_t (*a1)(uint64_t, void *)@<X3>, uint64_t a2@<X8>)
{
  v9[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    char v5 = (void *)v4;
    v9[0] = 0;
    int v6 = a1(v4, v9);

    uint64_t v7 = v9[0];
    if (!v6) {
      uint64_t v7 = 0;
    }
    char v8 = v6 ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 1;
  }
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v8;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt64(void *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D38];
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64(v1, a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64(uint64_t (*a1)(uint64_t, void *)@<X3>, void *a2@<X8>)
{
  v8[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (char v5 = (void *)v4, v8[0] = 0, v6 = a1(v4, v8), v5, v6)) {
    uint64_t v7 = v8[0];
  }
  else {
    uint64_t v7 = 0;
  }
  *a2 = v7;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance UInt64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt64();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt64()
{
  return MEMORY[0x270F23158](*v0);
}

uint64_t Half.vtValue.getter()
{
  return RIOPxrVtValueCreateWithHalf();
}

uint64_t static Half.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf();
  *a1 = result;
  return result;
}

uint64_t static Half.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithHalf();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void static Half.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Float = RIOPxrVtValueGetFloat();

    *(_DWORD *)a1 = 0;
    char v5 = Float ^ 1;
  }
  else
  {
    *(_DWORD *)a1 = 0;
    char v5 = 1;
  }
  *(unsigned char *)(a1 + 4) = v5;
}

uint64_t RIOPxrVtValueRef.asHalf.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetFloat();
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = result ^ 1;
  return result;
}

void static Half.getValue(from:time:)(_DWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    RIOPxrVtValueGetFloat();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Half()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithHalf();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Half(_DWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    RIOPxrVtValueGetFloat();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Half()
{
  return RIOPxrVtValueCreateWithHalf();
}

uint64_t static Float.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

unint64_t static Float.getValueOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    char Float = RIOPxrVtValueGetFloat();

    unsigned __int8 v3 = Float ^ 1;
  }
  else
  {
    unsigned __int8 v3 = 1;
  }
  return (unint64_t)v3 << 32;
}

float static Float.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    RIOPxrVtValueGetFloat();
  }
  return 0.0;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Float()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    unsigned __int8 v3 = (void *)v2;
    char Float = RIOPxrVtValueGetFloat();

    char v5 = Float ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = v5;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat();
}

uint64_t static Double.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithDouble();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Double.getValueOpt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetDouble();

    return 0;
  }
  return result;
}

double static Double.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    RIOPxrVtValueGetDouble();
  }
  return 0.0;
}

uint64_t static Double.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Double()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithDouble();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    unsigned __int8 v3 = (void *)v2;
    char Double = RIOPxrVtValueGetDouble();

    char v5 = Double ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Double(void *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    unsigned __int8 v3 = (void *)v2;
    RIOPxrVtValueGetDouble();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble();
}

uint64_t static simd_quatf.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithQuatf();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_quatf.getValueOpt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetQuatf();

    return 0;
  }
  return result;
}

double static simd_quatf.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  double result = 0.0;
  if (v0)
  {
    uint64_t v2 = (void *)v0;
    RIOPxrVtValueGetQuatf();

    return 0.0;
  }
  return result;
}

uint64_t static simd_quatf.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatf();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_quatf()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithQuatf();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_quatf(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    unsigned __int8 v3 = (void *)v2;
    char Quatf = RIOPxrVtValueGetQuatf();

    char v5 = Quatf ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_quatf(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  long long v3 = 0uLL;
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    RIOPxrVtValueGetQuatf();

    long long v3 = 0uLL;
  }
  *a1 = v3;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_quatf@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatf();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_quatf()
{
  return RIOPxrVtValueCreateWithQuatf();
}

uint64_t simd_quatd.vtValue.getter()
{
  return RIOPxrVtValueCreateWithQuatd();
}

uint64_t static simd_quatd.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithQuatd();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void static simd_quatd.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    char Quatd = RIOPxrVtValueGetQuatd();

    char v5 = Quatd ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = v5;
}

double static simd_quatd.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    RIOPxrVtValueGetQuatd();
  }
  return 0.0;
}

uint64_t static simd_quatd.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatd();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_quatd()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithQuatd();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_quatd(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    char Quatd = RIOPxrVtValueGetQuatd();

    char v5 = Quatd ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_quatd(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    int Quatd = RIOPxrVtValueGetQuatd();

    if (Quatd)
    {
      long long v6 = 0u;
      long long v5 = 0u;
    }
    else
    {
      long long v5 = 0uLL;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v6 = 0uLL;
    long long v5 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_quatd@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatd();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_quatd()
{
  return RIOPxrVtValueCreateWithQuatd();
}

uint64_t static simd_float2x2.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix2f();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_float2x2.getValueOpt(from:time:)()
{
  return specialized static simd_float2x2.getValueOpt(from:time:)();
}

uint64_t static simd_float2x2.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix2d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_float2x2()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix2f();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_float2x2@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized static simd_float2x2.getValueOpt(from:time:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_float2x2(uint64_t a1@<X8>)
{
  *(double *)a1 = specialized static simd_float2x2.getValue(from:time:)();
  *(void *)(a1 + 8) = v2;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_float2x2@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix2d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_float2x2()
{
  return RIOPxrVtValueCreateWithMatrix2f();
}

uint64_t static simd_double2x2.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix2d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void static simd_double2x2.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Matrix2d = RIOPxrVtValueGetMatrix2d();

    char v5 = Matrix2d ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = v5;
}

double static simd_double2x2.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    RIOPxrVtValueGetMatrix2d();
  }
  return 0.0;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_double2x2()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix2d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_double2x2(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Matrix2d = RIOPxrVtValueGetMatrix2d();

    char v5 = Matrix2d ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_double2x2(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    int Matrix2d = RIOPxrVtValueGetMatrix2d();

    if (Matrix2d)
    {
      long long v6 = 0u;
      long long v5 = 0u;
    }
    else
    {
      long long v5 = 0uLL;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v6 = 0uLL;
    long long v5 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_double2x2()
{
  return RIOPxrVtValueCreateWithMatrix2d();
}

uint64_t simd_float3x3.vtValue.getter()
{
  return RIOPxrVtValueCreateWithMatrix3f();
}

uint64_t static simd_float3x3.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix3f();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_float3x3.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  specialized static simd_float3x3.getValueOpt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float3x3?);
}

double static simd_float3x3.getValue(from:time:)@<D0>(_OWORD *a1@<X8>)
{
  specialized static simd_float3x3.getValue(from:time:)(v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t static simd_float3x3.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix3d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_float3x3()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix3f();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_float3x3@<X0>(uint64_t a1@<X8>)
{
  specialized static simd_float3x3.getValueOpt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float3x3?);
}

double protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_float3x3@<D0>(_OWORD *a1@<X8>)
{
  specialized static simd_float3x3.getValue(from:time:)(v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_float3x3@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix3d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_float3x3()
{
  return RIOPxrVtValueCreateWithMatrix3f();
}

uint64_t simd_double3x3.vtValue.getter()
{
  return RIOPxrVtValueCreateWithMatrix3d();
}

uint64_t static simd_double3x3.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix3d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_double3x3.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v3 = (void *)result;
    char Matrix3d = RIOPxrVtValueGetMatrix3d();

    uint64_t result = 0;
    char v5 = Matrix3d ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = result;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = v5;
  return result;
}

void static simd_double3x3.getValue(from:time:)(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Matrix3d = RIOPxrVtValueGetMatrix3d();

    if (Matrix3d)
    {
      long long v6 = 0u;
      long long v5 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
    }
    else
    {
      long long v5 = 0uLL;
      long long v7 = 0uLL;
      long long v8 = 0uLL;
      long long v9 = 0uLL;
      long long v10 = 0uLL;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v6 = 0uLL;
    long long v5 = 0uLL;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
    long long v9 = 0uLL;
    long long v10 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_double3x3()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix3d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_double3x3@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v3 = (void *)result;
    char Matrix3d = RIOPxrVtValueGetMatrix3d();

    uint64_t result = 0;
    char v5 = Matrix3d ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = result;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = v5;
  return result;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_double3x3(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    int Matrix3d = RIOPxrVtValueGetMatrix3d();

    if (Matrix3d)
    {
      long long v6 = 0u;
      long long v5 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
    }
    else
    {
      long long v5 = 0uLL;
      long long v7 = 0uLL;
      long long v8 = 0uLL;
      long long v9 = 0uLL;
      long long v10 = 0uLL;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v6 = 0uLL;
    long long v5 = 0uLL;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
    long long v9 = 0uLL;
    long long v10 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_double3x3()
{
  return RIOPxrVtValueCreateWithMatrix3d();
}

uint64_t static simd_float4x4.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix4f();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_float4x4.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  specialized static simd_float4x4.getValueOpt(from:time:)(v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float4x4?);
}

uint64_t static simd_float4x4.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_float4x4()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix4f();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_float4x4@<X0>(uint64_t a1@<X8>)
{
  specialized static simd_float4x4.getValueOpt(from:time:)(v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float4x4?);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_float4x4(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = specialized static simd_float4x4.getValue(from:time:)();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_float4x4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_float4x4()
{
  return RIOPxrVtValueCreateWithMatrix4f();
}

uint64_t simd_double4x4.vtValue.getter()
{
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t static simd_double4x4.setValue(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_double4x4.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    int Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      memset(v7, 0, sizeof(v7));
      _s9RealityIO7Frame4DVSgWOi_((uint64_t)v7);
    }
    else
    {
      _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v7);
    }
    outlined init with take of (URL, __REAsset)((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for simd_double4x4?);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for simd_double4x4?);
  return outlined init with take of (URL, __REAsset)((uint64_t)v7, a1, &demangling cache variable for type metadata for simd_double4x4?);
}

void static simd_double4x4.getValue(from:time:)(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    char Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      long long v6 = 0u;
      long long v5 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
    }
    else
    {
      long long v5 = 0uLL;
      long long v7 = 0uLL;
      long long v8 = 0uLL;
      long long v9 = 0uLL;
      long long v10 = 0uLL;
      long long v11 = 0uLL;
      long long v12 = 0uLL;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v6 = 0uLL;
    long long v5 = 0uLL;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
    long long v9 = 0uLL;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v12;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_double4x4()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_double4x4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    char Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      memset(v7, 0, sizeof(v7));
      _s9RealityIO7Frame4DVSgWOi_((uint64_t)v7);
    }
    else
    {
      _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v7);
    }
    outlined init with take of (URL, __REAsset)((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for simd_double4x4?);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for simd_double4x4?);
  return outlined init with take of (URL, __REAsset)((uint64_t)v7, a1, &demangling cache variable for type metadata for simd_double4x4?);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_double4x4(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    int Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      long long v6 = 0u;
      long long v5 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
    }
    else
    {
      long long v5 = 0uLL;
      long long v7 = 0uLL;
      long long v8 = 0uLL;
      long long v9 = 0uLL;
      long long v10 = 0uLL;
      long long v11 = 0uLL;
      long long v12 = 0uLL;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v6 = 0uLL;
    long long v5 = 0uLL;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
    long long v9 = 0uLL;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v12;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_double4x4()
{
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t Frame4D.vtValue.getter()
{
  Frame4D.asDouble4x4()(&v1);
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t static Frame4D.setValue(_:to:time:)()
{
  Frame4D.asDouble4x4()(&v3);
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Frame4D.getValueOpt(from:time:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2 && (simd_double4x4 v3 = (void *)v2, Matrix4d = RIOPxrVtValueGetMatrix4d(), v3, (Matrix4d & 1) != 0))
  {
    memset(v6, 0, sizeof(v6));
    Frame4D.init(_:)((uint64_t)v6, a1);
    return _s9RealityIO7Frame4DVSgWOi_((uint64_t)a1);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
    return outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)a1, &demangling cache variable for type metadata for Frame4D?);
  }
}

double static Frame4D.getValue(from:time:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2 && (simd_double4x4 v3 = (void *)v2, Matrix4d = RIOPxrVtValueGetMatrix4d(), v3, (Matrix4d & 1) != 0))
  {
    memset(v6, 0, sizeof(v6));
    Frame4D.init(_:)((uint64_t)v6, a1);
  }
  else
  {
    double result = 0.0;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t static Frame4D.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFrame4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Frame4D()
{
  Frame4D.asDouble4x4()(&v3);
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

double protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Frame4D@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2 && (simd_double4x4 v3 = (void *)v2, Matrix4d = RIOPxrVtValueGetMatrix4d(), v3, Matrix4d))
  {
    memset(v6, 0, sizeof(v6));
    Frame4D.init(_:)((uint64_t)v6, a1);
  }
  else
  {
    double result = 0.0;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Frame4D@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFrame4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Frame4D()
{
  Frame4D.asDouble4x4()(&v1);
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t String.vtValue.getter()
{
  String.utf8CString.getter();
  uint64_t v0 = RIOPxrVtValueCreateWithCString();
  swift_release();
  return v0;
}

uint64_t static String.setValue(_:to:time:)()
{
  String.utf8CString.getter();
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithCString();
  swift_release();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static String.getValueOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyString();
  if (!v2)
  {

    return 0;
  }
  simd_double4x4 v3 = (void *)v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t static String.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyString();
  if (!v2)
  {

    return 0;
  }
  simd_double4x4 v3 = (void *)v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t static String.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateString();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance String()
{
  String.utf8CString.getter();
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithCString();
  swift_release();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance String(uint64_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2) {
    goto LABEL_5;
  }
  simd_double4x4 v3 = (void *)v2;
  uint64_t v4 = RIOPxrVtValueCopyString();
  if (!v4)
  {

LABEL_5:
    uint64_t v6 = 0;
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  long long v5 = (void *)v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

LABEL_6:
  *a1 = v6;
  a1[1] = v8;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance String(uint64_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2) {
    goto LABEL_5;
  }
  simd_double4x4 v3 = (void *)v2;
  uint64_t v4 = RIOPxrVtValueCopyString();
  if (!v4)
  {

LABEL_5:
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
    goto LABEL_6;
  }
  long long v5 = (void *)v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

LABEL_6:
  *a1 = v6;
  a1[1] = v8;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateString();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance String()
{
  String.utf8CString.getter();
  uint64_t v0 = RIOPxrVtValueCreateWithCString();
  swift_release();
  return v0;
}

uint64_t ToolsFoundations.Token.vtValue.getter()
{
  return RIOPxrVtValueCreateWithToken();
}

uint64_t static ToolsFoundations.Token.setValue(_:to:time:)(void *a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValue(_:to:time:)(a1, a2, MEMORY[0x263F37CB8]);
}

void static ToolsFoundations.Token.getValueOpt(from:time:)(uint64_t *a1@<X8>)
{
}

void static ToolsFoundations.Token.getValue(from:time:)(void *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (simd_double4x4 v3 = (void *)v2, v4 = (id)RIOPxrVtValueCopyToken(), v3, !v4)) {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  *a1 = v4;
}

uint64_t static ToolsFoundations.Token.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateToken();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance ToolsFoundations.Token(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance ToolsFoundations.Token(a1, a2, a3, a4, MEMORY[0x263F37CB8]);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ToolsFoundations.Token(uint64_t *a1@<X8>)
{
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance ToolsFoundations.Token(void *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (simd_double4x4 v3 = (void *)v2, v4 = (id)RIOPxrVtValueCopyToken(), v3, !v4)) {
    id v4 = (id)RIOPxrTfTokenEmpty();
  }
  *a1 = v4;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance ToolsFoundations.Token@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateToken();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance ToolsFoundations.Token()
{
  return RIOPxrVtValueCreateWithToken();
}

uint64_t SceneDescriptionFoundations.AssetPath.vtValue.getter()
{
  return RIOPxrVtValueCreateWithAssetPath();
}

uint64_t static SceneDescriptionFoundations.AssetPath.setValue(_:to:time:)(void *a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValue(_:to:time:)(a1, a2, MEMORY[0x263F37C48]);
}

uint64_t static ToolsFoundations.Token.setValue(_:to:time:)(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  simd_double4x4 v3 = (void *)a3(*a1);
  uint64_t v4 = RIOPxrUsdAttributeSetValue();

  return v4;
}

void static SceneDescriptionFoundations.AssetPath.getValueOpt(from:time:)(uint64_t *a1@<X8>)
{
}

void static ToolsFoundations.Token.getValueOpt(from:time:)(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    long long v5 = (void *)v4;
    uint64_t v6 = a1();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a2 = v6;
}

void static SceneDescriptionFoundations.AssetPath.getValue(from:time:)(uint64_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (simd_double4x4 v3 = (void *)v2, EmptyPath = RIOPxrVtValueCopyAssetPath(), v3, !EmptyPath)) {
    uint64_t EmptyPath = RIOPxrSdfAssetPathCreateEmptyPath();
  }
  *a1 = EmptyPath;
}

uint64_t static SceneDescriptionFoundations.AssetPath.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateAssetPath();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance SceneDescriptionFoundations.AssetPath(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance ToolsFoundations.Token(a1, a2, a3, a4, MEMORY[0x263F37C48]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance ToolsFoundations.Token(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  long long v5 = (void *)a5(*a1);
  uint64_t v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t *a1@<X8>)
{
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ToolsFoundations.Token(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    long long v5 = (void *)v4;
    uint64_t v6 = a1();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a2 = v6;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (simd_double4x4 v3 = (void *)v2, EmptyPath = RIOPxrVtValueCopyAssetPath(), v3, !EmptyPath)) {
    uint64_t EmptyPath = RIOPxrSdfAssetPathCreateEmptyPath();
  }
  *a1 = EmptyPath;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance SceneDescriptionFoundations.AssetPath@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateAssetPath();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrVtValueCreateWithAssetPath();
}

uint64_t static SIMD2<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD2<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t static SIMD2<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD2<>.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD2<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD2<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t static SIMD3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t static SIMD3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD3<>.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD3<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD3<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD3<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD3<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t static SIMD4<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD4<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t static SIMD4<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD4<>.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD4<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD4<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD4<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD4<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t static TexCoord2<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  type metadata accessor for SIMD2();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = &v17[-v12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a3 + 24))(a1, a2, a3, a5);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v14 = type metadata accessor for TexCoord2();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static TexCoord2<>.getValueOpt(from:time:), (uint64_t)v17, MEMORY[0x263F8E628], v14, v15, a4);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t specialized TexCoord2.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = 4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 32);
    if (v5 != 1)
    {
      uint64_t v6 = result;
      *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = v6;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static TexCoord2<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = type metadata accessor for SIMD2();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a3 + 32))(a1, a2, a3, a4);
  return TexCoord2.init(_:)((uint64_t)v10);
}

uint64_t static TexCoord2<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v20 = a2;
  uint64_t v9 = type metadata accessor for TexCoord2();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = type metadata accessor for SIMD2();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, v9, v15);
  SIMD2.init(_:)((uint64_t)v12, a3);
  LOBYTE(a4) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, double))(a4 + 16))(v17, v20, a3, a4, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return a4 & 1;
}

uint64_t static TexCoord2<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2d();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2f();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    }
    uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2h();
  }
  *a3 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord2<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> TexCoord2<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord2<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord2<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> TexCoord2<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t TexCoord2<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = type metadata accessor for SIMD2();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v2, a1, v12);
  SIMD2.init(_:)((uint64_t)v7, v9);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 16))(v14, v9, a2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2)
{
  return TexCoord2<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t static TexCoord3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord3<>.getValueOpt(from:time:)(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TexCoord3, (void (*)(char *, char *))partial apply for closure #1 in static TexCoord3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static TexCoord3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord3<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))TexCoord3.init(_:), a4);
}

uint64_t static TexCoord3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord3<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TexCoord3, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static TexCoord3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueTypeName.getter(a1, a2, MEMORY[0x263F378A8], MEMORY[0x263F378B8], MEMORY[0x263F378C8], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord3<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> TexCoord3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord3<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord3<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> TexCoord3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t TexCoord3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord3<>.vtValue.getter(a1, a2, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2)
{
  return TexCoord3<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t static Color3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  type metadata accessor for SIMD3();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v19[-v14];
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 24))(a1, a2, a4, a6);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v16 = type metadata accessor for Color3();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Color3<>.getValueOpt(from:time:), (uint64_t)v19, MEMORY[0x263F8E628], v16, v17, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t static Color3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for SIMD3();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a5 + 32))(a1, a2, a5, a3);
  return Color3.init(_:)((uint64_t)v11);
}

uint64_t static Color3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v9 = type metadata accessor for Color3();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = type metadata accessor for SIMD3();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v19, v9, v15);
  SIMD3<>.init(_:)((uint64_t)v12, a3);
  LOBYTE(a6) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, double))(a6 + 16))(v17, v20, a3, a6, a4);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return a6 & 1;
}

uint64_t static Color3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor3d();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor3f();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    }
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor3h();
  }
  *a3 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Color3<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), a5, *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Color3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Color3<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Color3<>.getValue(from:time:)(a1, *(void *)(a2 + 16), a4, *(void *)(a2 + 24), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Color3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t Color3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = type metadata accessor for SIMD3();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v2, a1, v12);
  SIMD3<>.init(_:)((uint64_t)v7, v9);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 16))(v14, v9, a2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Color3<A>(uint64_t a1, uint64_t a2)
{
  return Color3<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t static Point3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord3<>.getValueOpt(from:time:)(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Point3, (void (*)(char *, char *))partial apply for closure #1 in static Point3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static Point3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord3<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))Point3.init(_:), a4);
}

uint64_t static Point3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord3<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Point3, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static Point3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueTypeName.getter(a1, a2, MEMORY[0x263F37878], MEMORY[0x263F37888], MEMORY[0x263F37898], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Point3<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Point3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Point3<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Point3<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Point3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Point3<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t Point3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord3<>.vtValue.getter(a1, a2, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Point3<A>(uint64_t a1, uint64_t a2)
{
  return Point3<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t static Vector3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord3<>.getValueOpt(from:time:)(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Vector3, (void (*)(char *, char *))partial apply for closure #1 in static Vector3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static Vector3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord3<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))Vector3.init(_:), a4);
}

uint64_t static Vector3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord3<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Vector3, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static Vector3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueTypeName.getter(a1, a2, MEMORY[0x263F378D8], MEMORY[0x263F378E8], MEMORY[0x263F378F8], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Vector3<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Vector3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Vector3<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Vector3<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Vector3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Vector3<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t Vector3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord3<>.vtValue.getter(a1, a2, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Vector3<A>(uint64_t a1, uint64_t a2)
{
  return Vector3<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t static Normal3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord3<>.getValueOpt(from:time:)(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Normal3, (void (*)(char *, char *))partial apply for closure #1 in static Normal3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static TexCoord3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, void (*a5)(char *, char *)@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v14 = *(void *)(a3 + 8);
  type metadata accessor for SIMD3();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = &v22[-v17];
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a3 + 24))(a1, a2, a3, a7);
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v19 = a4(0, a2, v14);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a5, (uint64_t)v22, MEMORY[0x263F8E628], v19, v20, a6);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t closure #1 in static TexCoord2<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = a5(0, a2, v9);
  MEMORY[0x270FA5388](v10);
  double v12 = (char *)v15 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)v15 - v11, a1);
  return a6(v12, a2, v9);
}

uint64_t specialized TexCoord3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = 4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 32);
  if (v5 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
  if (v5 >= 3)
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)(a1 + 40);
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static Normal3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord3<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))Normal3.init(_:), a4);
}

uint64_t static TexCoord3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t), double a5)
{
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = type metadata accessor for SIMD3();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a3 + 32))(a1, a2, a3, a5);
  return a4(v13, a2, v10);
}

uint64_t static Normal3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord3<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Normal3, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static TexCoord3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), void (*a6)(char *, uint64_t, uint64_t), double a7)
{
  uint64_t v22 = a6;
  uint64_t v23 = a2;
  uint64_t v7 = a4;
  uint64_t v11 = *(void *)(a4 + 8);
  uint64_t v12 = a5(0, a3, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = type metadata accessor for SIMD3();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, v12, v18);
  v22(v15, a3, v11);
  LOBYTE(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, double))(v7 + 16))(v20, v23, a3, v7, a7);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  return v7 & 1;
}

uint64_t static Normal3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueTypeName.getter(a1, a2, MEMORY[0x263F37848], MEMORY[0x263F37858], MEMORY[0x263F37868], a3);
}

uint64_t static TexCoord3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = a3();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = a4();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    }
    uint64_t result = a5();
  }
  *a6 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Normal3<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Normal3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Normal3<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Normal3<>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Normal3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t Normal3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord3<>.vtValue.getter(a1, a2, (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t TexCoord3<>.vtValue.getter(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t))
{
  uint64_t v21 = a3;
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v13 = type metadata accessor for SIMD3();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v3, a1, v15);
  v21(v8, v10, v12);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 16))(v17, v10, a2);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return v18;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Normal3<A>(uint64_t a1, uint64_t a2)
{
  return Normal3<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t static Color4<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  type metadata accessor for SIMD4();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = &v19[-v14];
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 24))(a1, a2, a4, a6);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v16 = type metadata accessor for Color4();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Color4<>.getValueOpt(from:time:), (uint64_t)v19, MEMORY[0x263F8E628], v16, v17, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t closure #1 in static Color3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t), uint64_t (*a7)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = *(void *)(a4 + 8);
  uint64_t v12 = a6(0, a2, v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v17 - v13, a1);
  return a7(v14, a2, a3, v11);
}

uint64_t specialized Color4.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = 4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 32);
  if (v5 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v6 = result;
  *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
  if (v5 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(a1 + 40);
  if (v5 != 3)
  {
    *(_DWORD *)(result + 44) = *(_DWORD *)(a1 + 44);
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t static Color4<>.getValue(from:time:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for SIMD4();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a5 + 32))(a1, a2, a5, a3);
  return Color4.init(_:)((uint64_t)v11);
}

uint64_t static Color4<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v9 = type metadata accessor for Color4();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = type metadata accessor for SIMD4();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v19, v9, v15);
  SIMD4<>.init(_:)((uint64_t)v12, a3, (uint64_t)v17);
  LOBYTE(a6) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, double))(a6 + 16))(v17, v20, a3, a6, a4);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return a6 & 1;
}

uint64_t static Color4<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor4d();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor4f();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    }
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor4h();
  }
  *a3 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Color4<>.setValue(_:to:time:)(a1, a2, *(void *)(a3 + 16), a5, *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Color4<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Color4<>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Color4<>.getValue(from:time:)(a1, *(void *)(a2 + 16), a4, *(void *)(a2 + 24), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Color4<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color4<>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t Color4<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = type metadata accessor for SIMD4();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v2, a1, v12);
  SIMD4<>.init(_:)((uint64_t)v7, v9, (uint64_t)v14);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 16))(v14, v9, a2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Color4<A>(uint64_t a1, uint64_t a2)
{
  return Color4<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t static ManagedColor.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v25 = a4;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v25 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a3 + 16))(a1, a2, a3, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v20 = type metadata accessor for ManagedColor();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v25, 1, 1, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v12, a2);
    uint64_t v22 = RIOPxrUsdObjectCopyColorSpace();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, a2);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, a2);
    uint64_t v26 = v22;
    uint64_t v23 = v25;
    ManagedColor.init(color:space:)((uint64_t)v16, &v26, a2, v25);
    uint64_t v24 = type metadata accessor for ManagedColor();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  }
}

uint64_t static ManagedColor.getValue(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ManagedColor();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v22 - v17;
  static ManagedColor.getValueOpt(from:time:)(a1, a2, a4, (uint64_t)&v22 - v17, a6);
  uint64_t v19 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v18, v14);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  uint64_t v20 = (_OWORD *)swift_allocObject();
  v20[1] = xmmword_23AAB2690;
  v20[2] = 0u;
  v20[3] = 0u;
  (*(void (**)(void))(a3 + 8))();
  uint64_t v23 = 0;
  ManagedColor.init(color:space:)((uint64_t)v13, &v23, a2, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t static ManagedColor.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)(a1 + *(int *)(type metadata accessor for ManagedColor() + 44))) {
    RIOPxrUsdObjectSetColorSpace();
  }
  else {
    RIOPxrUsdObjectClearColorSpace();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(a6 + 8))(a1, a2, a3, a6, a4) & 1;
}

uint64_t static ManagedColor.valueTypeName.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance ManagedColor<A>(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  return static ManagedColor.setValue(_:to:time:)(a1, a2, a3[2], a4, a3[3], a3[4]);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ManagedColor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return static ManagedColor.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 32), a3, a4);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance ManagedColor<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return static ManagedColor.getValue(from:time:)(a1, a2[2], a2[3], a2[4], a3, a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance ManagedColor<A>(uint64_t a1, uint64_t a2)
{
  return static ManagedColor.valueTypeName.getter(*(void *)(a1 + 16), a2, *(void *)(a1 + 32));
}

uint64_t static Half.vtValue(from:)(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)result + 16);
  if (v1)
  {
    if (v1 != 1) {
      return RIOPxrVtValueCreateWithHalf2();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void static Half.getValue2Opt(from:time:)(uint64_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (RIOPxrVtValueGetHalf2())
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = 2;
      *(void *)(v4 + 32) = 0;
    }
    else
    {
      uint64_t v4 = 0;
    }
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
  }
}

uint64_t RIOPxrVtValueRef.asHalf2.getter@<X0>(uint64_t *a1@<X8>)
{
  if (RIOPxrVtValueGetHalf2())
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = 2;
    *(void *)(result + 32) = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

void static Half.getValue2(from:time:)(uint64_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2) {
    goto LABEL_5;
  }
  uint64_t v3 = (void *)v2;
  if (!RIOPxrVtValueGetHalf2())
  {

LABEL_5:
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = 2;
    *(void *)(v4 + 32) = 0;
    goto LABEL_6;
  }
  uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v4 + 16) = 2;
  *(void *)(v4 + 32) = 0;

LABEL_6:
  *a1 = v4;
}

uint64_t SIMD2<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(v2);
}

uint64_t static Half.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf2();
  *a1 = result;
  return result;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Half(void *a1@<X8>)
{
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Half(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)result + 16);
  if (v1)
  {
    if (v1 != 1) {
      return RIOPxrVtValueCreateWithHalf2();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void static Half.getValue3Opt(from:time:)(void *a1@<X8>)
{
}

uint64_t RIOPxrVtValueRef.asHalf3.getter@<X0>(uint64_t *a1@<X8>)
{
  if (RIOPxrVtValueGetHalf3())
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = 4;
    *(_DWORD *)(result + 44) = 0;
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

void static Half.getValue3(from:time:)(void *a1@<X8>)
{
  static Half.getValue3(from:time:)((void (*)(void **__return_ptr))RIOPxrVtValueRef.asHalf3.getter, a1);
}

uint64_t SIMD3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(v2);
}

uint64_t static Half.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf3();
  *a1 = result;
  return result;
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Half(void *a1@<X8>)
{
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf3();
  *a1 = result;
  return result;
}

void static Half.getValue4Opt(from:time:)(void *a1@<X8>)
{
}

void static Half.getValue3Opt(from:time:)(void (*a1)(void)@<X1>, void *a2@<X8>)
{
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    id v5 = (id)v4;
    a1();
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t RIOPxrVtValueRef.asHalf4.getter@<X0>(uint64_t *a1@<X8>)
{
  if (RIOPxrVtValueGetHalf4())
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = 4;
    *(_OWORD *)(result + 32) = 0uLL;
  }
  else
  {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

void static Half.getValue4(from:time:)(void *a1@<X8>)
{
  static Half.getValue3(from:time:)((void (*)(void **__return_ptr))RIOPxrVtValueRef.asHalf4.getter, a1);
}

void static Half.getValue3(from:time:)(void (*a1)(void **__return_ptr)@<X1>, void *a2@<X8>)
{
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4 || (id v5 = (void *)v4, a1(&v7), v5, (v6 = v7) == 0))
  {
    uint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    void v6[2] = 4;
    v6[4] = 0;
    v6[5] = 0;
    swift_bridgeObjectRelease();
  }
  *a2 = v6;
}

uint64_t static Half.setValue4(_:to:time:)(uint64_t *a1)
{
  uint64_t v4 = *a1;
  uint64_t v1 = (void *)specialized static Half.vtValue(from:)((uint64_t)&v4);
  uint64_t v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

uint64_t SIMD4<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(v2);
}

uint64_t static Half.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Half(uint64_t *a1)
{
  uint64_t v4 = *a1;
  uint64_t v1 = (void *)specialized static Half.vtValue(from:)((uint64_t)&v4);
  uint64_t v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Half(void *a1@<X8>)
{
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Half(void (*a1)(void)@<X3>, void *a2@<X8>)
{
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    id v5 = (id)v4;
    a1();
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf4();
  *a1 = result;
  return result;
}

uint64_t static Float.getValue2Opt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetFloat2();

    return 0;
  }
  return result;
}

double static Float.getValue2(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    RIOPxrVtValueGetFloat2();
  }
  return 0.0;
}

uint64_t static Float.setValue2(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat2();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Float.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Float()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat2();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Float2 = RIOPxrVtValueGetFloat2();

    char v5 = Float2 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Float(void *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    RIOPxrVtValueGetFloat2();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat2();
}

uint64_t static Float.getValue3Opt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37CF8];
  return static Float.getValue3Opt(from:time:)(a1, v1);
}

double static Float.getValue3(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37CF8];
  return static Float.getValue3(from:time:)(a1, v1);
}

uint64_t static Float.setValue3(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat3();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Float.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Float()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat3();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37CF8];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float(_OWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37CF8];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float(v1, a1);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat3();
}

uint64_t static Float.getValue4Opt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D00];
  return static Float.getValue3Opt(from:time:)(a1, v1);
}

uint64_t static Float.getValue3Opt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, void *))
{
  v6[3] = *MEMORY[0x263EF8340];
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v4 = (void *)result;
    v6[0] = 0;
    v6[1] = 0;
    int v5 = a2(result, v6);

    if (v5) {
      return v6[0];
    }
    else {
      return 0;
    }
  }
  return result;
}

double static Float.getValue4(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37D00];
  return static Float.getValue3(from:time:)(a1, v1);
}

double static Float.getValue3(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, long long *, __n128))
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  long long v4 = 0uLL;
  if (v3)
  {
    int v5 = (void *)v3;
    long long v8 = 0uLL;
    char v6 = a2(v3, &v8, (__n128)0);

    if (v6) {
      *(void *)&long long v4 = v8;
    }
    else {
      *(void *)&long long v4 = 0;
    }
  }
  return *(double *)&v4;
}

uint64_t static Float.setValue4(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat4();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Float.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Float()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithFloat4();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37D00];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float(uint64_t (*a1)(uint64_t, uint64_t *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    int v5 = (void *)v4;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v6 = a1(v4, &v10);

    uint64_t v7 = v10;
    uint64_t v8 = v11;
    if (!v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    char v9 = v6 ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    char v9 = 1;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = v9;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Float(_OWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37D00];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float(uint64_t (*a1)(uint64_t, long long *, __n128)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  long long v5 = 0uLL;
  if (v4)
  {
    int v6 = (void *)v4;
    long long v8 = 0uLL;
    int v7 = a1(v4, &v8, (__n128)0);

    if (v7) {
      long long v5 = v8;
    }
    else {
      long long v5 = 0uLL;
    }
  }
  *a2 = v5;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat4();
}

uint64_t static Double.getValue2Opt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetDouble2();

    return 0;
  }
  return result;
}

double static Double.getValue2(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  double result = 0.0;
  if (v0)
  {
    uint64_t v2 = (void *)v0;
    RIOPxrVtValueGetDouble2();

    return 0.0;
  }
  return result;
}

uint64_t static Double.setValue2(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithDouble2();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Double.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Double()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithDouble2();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Double2 = RIOPxrVtValueGetDouble2();

    char v5 = Double2 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = v5;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Double(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  long long v3 = 0uLL;
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    RIOPxrVtValueGetDouble2();

    long long v3 = 0uLL;
  }
  *a1 = v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble2();
}

uint64_t static Double.vtValue(from:)(__n128 a1, __n128 a2)
{
  return static Double.vtValue(from:)(MEMORY[0x263F37C58], a1, a2);
}

{
  return static Double.vtValue(from:)(MEMORY[0x263F37C68], a1, a2);
}

void static Double.getValue3Opt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CE8];
  static Double.getValue3Opt(from:time:)(v1, a1);
}

double static Double.getValue3(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, _OWORD *))MEMORY[0x263F37CE8];
  return static Double.getValue3(from:time:)(a1, v1);
}

uint64_t static Double.setValue3(_:to:time:)(uint64_t a1, __n128 a2, __n128 a3)
{
  return static Double.setValue3(_:to:time:)(a2, a3, a1, MEMORY[0x263F37C58]);
}

uint64_t static Double.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(a1, a2, a3, a4, MEMORY[0x263F37C58]);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CE8];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double(_OWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CE8];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double(v1, a1);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble3();
}

uint64_t static Double.vtValue(from:)(uint64_t (*a1)(_OWORD *), __n128 a2, __n128 a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return a1(v4);
}

void static Double.getValue4Opt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CF0];
  static Double.getValue3Opt(from:time:)(v1, a1);
}

void static Double.getValue3Opt(from:time:)(uint64_t (*a1)(uint64_t, long long *)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    char v5 = (void *)v4;
    long long v12 = 0u;
    long long v13 = 0u;
    int v6 = a1(v4, &v12);

    if (v6)
    {
      uint64_t v8 = *((void *)&v12 + 1);
      uint64_t v7 = v12;
      uint64_t v10 = *((void *)&v13 + 1);
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    char v11 = v6 ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = 1;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v10;
  *(unsigned char *)(a2 + 32) = v11;
}

double static Double.getValue4(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, _OWORD *))MEMORY[0x263F37CF0];
  return static Double.getValue3(from:time:)(a1, v1);
}

double static Double.getValue3(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *))
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3) {
    return 0.0;
  }
  uint64_t v4 = (void *)v3;
  memset(v7, 0, sizeof(v7));
  char v5 = a2(v3, v7);

  if (v5) {
    return *(double *)v7;
  }
  else {
    return 0.0;
  }
}

uint64_t static Double.setValue4(_:to:time:)(uint64_t a1, __n128 a2, __n128 a3)
{
  return static Double.setValue3(_:to:time:)(a2, a3, a1, MEMORY[0x263F37C68]);
}

uint64_t static Double.setValue3(_:to:time:)(__n128 a1, __n128 a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v4 = (void *)a4(v7);
  uint64_t v5 = RIOPxrUsdAttributeSetValue();

  return v5;
}

uint64_t static Double.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Double(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(a1, a2, a3, a4, MEMORY[0x263F37C68]);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_OWORD *))
{
  long long v5 = a1[1];
  v9[0] = *a1;
  v9[1] = v5;
  int v6 = (void *)a5(v9);
  uint64_t v7 = RIOPxrUsdAttributeSetValue();

  return v7;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CF0];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double(uint64_t (*a1)(uint64_t, long long *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    long long v5 = (void *)v4;
    long long v12 = 0u;
    long long v13 = 0u;
    int v6 = a1(v4, &v12);

    if (v6)
    {
      uint64_t v8 = *((void *)&v12 + 1);
      uint64_t v7 = v12;
      uint64_t v10 = *((void *)&v13 + 1);
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    char v11 = v6 ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = 1;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v10;
  *(unsigned char *)(a2 + 32) = v11;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Double(_OWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *))MEMORY[0x263F37CF0];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double(uint64_t (*a1)(uint64_t, long long *)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    long long v5 = (void *)v4;
    long long v9 = 0u;
    long long v10 = 0u;
    int v6 = a1(v4, &v9);

    if (v6)
    {
      long long v8 = v9;
      long long v7 = v10;
    }
    else
    {
      long long v7 = 0uLL;
      long long v8 = 0uLL;
    }
  }
  else
  {
    long long v8 = 0uLL;
    long long v7 = 0uLL;
  }
  *a2 = v8;
  a2[1] = v7;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble4();
}

uint64_t static Int.vtValue(from:)()
{
  return RIOPxrVtValueCreateWithInt2();
}

{
  return RIOPxrVtValueCreateWithInt3();
}

{
  return RIOPxrVtValueCreateWithInt4();
}

double static Int.getValue2Opt(from:time:)()
{
  return specialized static Int.getValue2Opt(from:time:)();
}

uint64_t static Int.setValue2(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt2();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Int(const float *a1)
{
  vld2_f32(a1);
  uint64_t v1 = (void *)RIOPxrVtValueCreateWithInt2();
  uint64_t v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Int(uint64_t a1@<X8>)
{
  specialized static Int.getValue2Opt(from:time:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Int(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = specialized static Int.getValue2(from:time:)();
  *a1 = v2;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Int(const float *a1)
{
  return RIOPxrVtValueCreateWithInt2();
}

uint64_t static Int32.getValue2Opt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    uint64_t v1 = (void *)result;
    RIOPxrVtValueGetInt2();

    return 0;
  }
  return result;
}

double static Int32.getValue2(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (uint64_t v1 = (void *)v0, Int2 = RIOPxrVtValueGetInt2(), v1, (Int2 & 1) != 0)) {
    return 0.0;
  }
  else {
    return 0.0;
  }
}

uint64_t static Int32.setValue2(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt2();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Int32()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt2();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Int2 = RIOPxrVtValueGetInt2();

    char v5 = Int2 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Int32(void *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    RIOPxrVtValueGetInt2();
  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt2();
}

uint64_t static Int32.getValue3Opt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D10];
  return static Int32.getValue3Opt(from:time:)(a1, v1);
}

double static Int32.getValue3(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37D10];
  return static Int32.getValue3(from:time:)(a1, v1);
}

uint64_t static Int32.setValue3(_:to:time:)(uint64_t a1)
{
  return static Int32.setValue3(_:to:time:)(a1, MEMORY[0x263F37C78]);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37C78]);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37D10];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Int32(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Int32(_OWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37D10];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Int32(v1, a1);
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt3();
}

uint64_t static Int.getValue3Opt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  specialized static Int.getValue3Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD3<Int>?);
}

uint64_t static Int.setValue3(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt3();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt3();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Int@<X0>(uint64_t a1@<X8>)
{
  specialized static Int.getValue3Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD3<Int>?);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Int(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = specialized static Int.getValue3(from:time:)();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Int()
{
  return RIOPxrVtValueCreateWithInt3();
}

uint64_t static Int32.getValue4Opt(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F37D20];
  return static Int32.getValue3Opt(from:time:)(a1, v1);
}

uint64_t static Int32.getValue3Opt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, void *))
{
  v6[3] = *MEMORY[0x263EF8340];
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    char v4 = (void *)result;
    v6[0] = 0;
    v6[1] = 0;
    int v5 = a2(result, v6);

    if (v5) {
      return v6[0];
    }
    else {
      return 0;
    }
  }
  return result;
}

double static Int32.getValue4(from:time:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37D20];
  return static Int32.getValue3(from:time:)(a1, v1);
}

double static Int32.getValue3(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, long long *, __n128))
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = RIOPxrUsdAttributeCopyValue();
  long long v4 = 0uLL;
  if (v3)
  {
    int v5 = (void *)v3;
    long long v8 = 0uLL;
    char v6 = a2(v3, &v8, (__n128)0);

    if (v6) {
      *(void *)&long long v4 = v8;
    }
    else {
      *(void *)&long long v4 = 0;
    }
  }
  return *(double *)&v4;
}

uint64_t static Int32.setValue4(_:to:time:)(uint64_t a1)
{
  return static Int32.setValue3(_:to:time:)(a1, MEMORY[0x263F37C98]);
}

uint64_t static Int32.setValue3(_:to:time:)(uint64_t a1, uint64_t (*a2)(void))
{
  long long v2 = (void *)a2();
  uint64_t v3 = RIOPxrUsdAttributeSetValue();

  return v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Int32(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37C98]);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128))
{
  int v5 = (void *)a5(*a1);
  uint64_t v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37D20];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Int32(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Int32(uint64_t (*a1)(uint64_t, uint64_t *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    int v5 = (void *)v4;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v6 = a1(v4, &v10);

    uint64_t v7 = v10;
    uint64_t v8 = v11;
    if (!v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    char v9 = v6 ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    char v9 = 1;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = v9;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Int32(_OWORD *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, long long *, __n128))MEMORY[0x263F37D20];
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Int32(v1, a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Int32(uint64_t (*a1)(uint64_t, long long *, __n128)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = RIOPxrUsdAttributeCopyValue();
  long long v5 = 0uLL;
  if (v4)
  {
    int v6 = (void *)v4;
    long long v8 = 0uLL;
    int v7 = a1(v4, &v8, (__n128)0);

    if (v7) {
      long long v5 = v8;
    }
    else {
      long long v5 = 0uLL;
    }
  }
  *a2 = v5;
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt4();
}

uint64_t static Int.getValue4Opt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  specialized static Int.getValue4Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD4<Int>?);
}

uint64_t static Int.setValue4(_:to:time:)()
{
  uint64_t v0 = (void *)RIOPxrVtValueCreateWithInt4();
  uint64_t v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Int(const float *a1)
{
  vld2q_f32(a1);
  uint64_t v1 = (void *)RIOPxrVtValueCreateWithInt4();
  uint64_t v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Int@<X0>(uint64_t a1@<X8>)
{
  specialized static Int.getValue4Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD4<Int>?);
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Int(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = specialized static Int.getValue4(from:time:)();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Int(const float *a1)
{
  return RIOPxrVtValueCreateWithInt4();
}

uint64_t static Array<A>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t static Array<A>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a3 + 16))();
  if (!result) {
    return static Array._allocateUninitialized(_:)();
  }
  return result;
}

uint64_t static Array<A>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))() & 1;
}

uint64_t static Array<A>.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <A> [A](uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.setValue(_:to:time:)(*a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = static Array<A>.getValueOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = static Array<A>.getValue(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  return static Array<A>.valueTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t static Bool.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Bool.vtValue(from:));
}

uint64_t static Bool.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B60], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asBoolArray.getter);
}

uint64_t static Bool.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateBoolArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Bool.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Bool(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B60], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asBoolArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Bool@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateBoolArray();
  *a1 = result;
  return result;
}

uint64_t static Int8.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int8.vtValue(from:));
}

uint64_t static Bool.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  long long v3 = (void *)a3();
  uint64_t v4 = RIOPxrUsdAttributeSetValue();

  return v4;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int8.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  long long v5 = (void *)a5();
  uint64_t v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

uint64_t static Int16.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int16.vtValue(from:));
}

uint64_t static Int16.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD0], MEMORY[0x263F37D18], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int16.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int16(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD0], MEMORY[0x263F37D18], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t static Int32.vtValue(from:)(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37C88], MEMORY[0x263F37C80]);
}

uint64_t static Int32.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37C88], MEMORY[0x263F37C80], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  long long v5 = (void *)a5(a1, a3, a4);
  uint64_t v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

uint64_t static Int32.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD0], MEMORY[0x263F37D18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37C88], MEMORY[0x263F37C80], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t))
{
  int v7 = (void *)a7(a1, a5, a6);
  uint64_t v8 = RIOPxrUsdAttributeSetValue();

  return v8;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD0], MEMORY[0x263F37D18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance Int32(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37C88], MEMORY[0x263F37C80]);
}

uint64_t static Int.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asIntArray.getter);
}

uint64_t RIOPxrVtValueRef.asIntArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BD0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asIntArray.getter);
}

uint64_t static Int.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt32Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asIntArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt32Array();
  *a1 = result;
  return result;
}

uint64_t static Int64.vtValue(from:)(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x263F37CB0], MEMORY[0x263F37CA8]);
}

uint64_t static Int64.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37CB0], MEMORY[0x263F37CA8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t static Int64.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BE8], MEMORY[0x263F37D28], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t static Int64.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37CB0], MEMORY[0x263F37CA8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int64(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BE8], MEMORY[0x263F37D28], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Int64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance Int64(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x263F37CB0], MEMORY[0x263F37CA8]);
}

uint64_t static UInt.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static UInt.vtValue(from:));
}

uint64_t static UInt.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C30], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUIntArray.getter);
}

uint64_t RIOPxrVtValueRef.asUIntArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37C30], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUIntArray.getter);
}

uint64_t static UInt.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt32Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static UInt.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C30], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUIntArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance UInt@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt32Array();
  *a1 = result;
  return result;
}

uint64_t static UInt8.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static UInt8.vtValue(from:));
}

uint64_t static UInt8.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C40], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUInt8Array.getter);
}

uint64_t static UInt8.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt8Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static UInt8.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt8(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C40], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUInt8Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance UInt8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt8Array();
  *a1 = result;
  return result;
}

uint64_t static UInt16.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static UInt16.vtValue(from:));
}

uint64_t static UInt16.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C30], MEMORY[0x263F37D30], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static UInt16.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt16(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C30], MEMORY[0x263F37D30], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t static UInt32.vtValue(from:)(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37CD0], MEMORY[0x263F37CC8]);
}

uint64_t static UInt32.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37CD0], MEMORY[0x263F37CC8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static UInt32.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C30], MEMORY[0x263F37D30], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37CD0], MEMORY[0x263F37CC8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C30], MEMORY[0x263F37D30], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance UInt32(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37CD0], MEMORY[0x263F37CC8]);
}

uint64_t static UInt64.vtValue(from:)(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x263F37CE0], MEMORY[0x263F37CD8]);
}

uint64_t static UInt64.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37CE0], MEMORY[0x263F37CD8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t static UInt64.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C38], MEMORY[0x263F37D38], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t static UInt64.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37CE0], MEMORY[0x263F37CD8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt64(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C38], MEMORY[0x263F37D38], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance UInt64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateUInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance UInt64(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x263F37CE0], MEMORY[0x263F37CD8]);
}

uint64_t static Half.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BC0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalfArray.getter);
}

uint64_t RIOPxrVtValueRef.asHalfArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BC0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalfArray.getter);
}

uint64_t static Half.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalfArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BC0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalfArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalfArray();
  *a1 = result;
  return result;
}

uint64_t static Float.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BA0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloatArray.getter);
}

uint64_t static Float.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloatArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BA0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloatArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloatArray();
  *a1 = result;
  return result;
}

uint64_t static Double.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B80], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDoubleArray.getter);
}

uint64_t static Double.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDoubleArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B80], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDoubleArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDoubleArray();
  *a1 = result;
  return result;
}

uint64_t static simd_quatf.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_quatf.vtValue(from:));
}

uint64_t static simd_quatf.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C18], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatfArray.getter);
}

uint64_t static simd_quatf.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatfArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_quatf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_quatf.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_quatf(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C18], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatfArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_quatf@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatfArray();
  *a1 = result;
  return result;
}

uint64_t static simd_quatd.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_quatd.vtValue(from:));
}

uint64_t static simd_quatd.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C10], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatdArray.getter);
}

uint64_t static simd_quatd.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatdArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_quatd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_quatd.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_quatd(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C10], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatdArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_quatd@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateQuatdArray();
  *a1 = result;
  return result;
}

uint64_t static simd_float2x2.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_float2x2.vtValue(from:));
}

uint64_t static simd_float2x2.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix2dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_float2x2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_float2x2.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_float2x2@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix2dArray();
  *a1 = result;
  return result;
}

uint64_t static simd_float3x3.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_float3x3.vtValue(from:));
}

uint64_t static simd_float3x3.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix3dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_float3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_float3x3.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_float3x3@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix3dArray();
  *a1 = result;
  return result;
}

uint64_t static simd_float4x4.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_float4x4.vtValue(from:));
}

uint64_t static simd_float4x4.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix4dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_float4x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_float4x4.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_float4x4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateMatrix4dArray();
  *a1 = result;
  return result;
}

uint64_t static simd_double2x2.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_double2x2.vtValue(from:));
}

uint64_t static simd_double2x2.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BF0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_double2x2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_double2x2.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_double2x2(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BF0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter);
}

uint64_t static simd_double3x3.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_double3x3.vtValue(from:));
}

uint64_t static simd_double3x3.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BF8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_double3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_double3x3.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_double3x3(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BF8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter);
}

uint64_t static simd_double4x4.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_double4x4.vtValue(from:));
}

uint64_t static simd_double4x4.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C00], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_double4x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_double4x4.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_double4x4(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C00], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter);
}

uint64_t static Frame4D.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Frame4D.vtValue(from:));
}

uint64_t static Frame4D.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFrame4dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Frame4D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Frame4D.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Frame4D@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFrame4dArray();
  *a1 = result;
  return result;
}

uint64_t static Normal3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, void, double))type metadata accessor for Normal3, (void (*)(char *, char *))partial apply for closure #1 in static Normal3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static Normal3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static Normal3<>.vtValue(from:));
}

uint64_t static Normal3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Normal3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, static Normal3<>.vtValue(from:));
}

uint64_t static Normal3<>.getValueArrayOpt(from:time:)()
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t v6 = RIOPxrUsdAttributeCopyValue();
    if (v6)
    {
      long long v2 = (void *)v6;
      uint64_t v7 = RIOPxrVtValueCopyDouble3Array();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v15 = v7;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        long long v5 = &demangling cache variable for type metadata for Normal3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
        return 0;
      }
      uint64_t v1 = RIOPxrUsdAttributeCopyValue();
      if (!v1) {
        return 0;
      }
      long long v2 = (void *)v1;
      uint64_t v3 = RIOPxrVtValueCopyHalf3Array();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        uint64_t v15 = v3;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        long long v5 = &demangling cache variable for type metadata for Normal3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v5);
        type metadata accessor for Normal3();
        uint64_t v12 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v12;
      }
      goto LABEL_14;
    }
    uint64_t v9 = RIOPxrUsdAttributeCopyValue();
    if (v9)
    {
      long long v2 = (void *)v9;
      uint64_t v10 = RIOPxrVtValueCopyFloat3Array();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v15 = v10;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        long long v5 = &demangling cache variable for type metadata for Normal3<Float>;
        goto LABEL_13;
      }
LABEL_14:
    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asNormal3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord3hArray.getter(uint64_t (*a1)(uint64_t), uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result = a1(v3);
  if (result)
  {
    uint64_t v6 = (void *)result;
    uint64_t v8 = result;
    a3(&v7, &v8);

    return v7;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asNormal3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B90], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asNormal3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37BB0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Normal3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x263F37850], MEMORY[0x263F37860], MEMORY[0x263F37870], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Normal3<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Normal3<A>()
{
  return static Normal3<>.getValueArrayOpt(from:time:)();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Normal3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t static Color3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v9)
  {
    uint64_t v35 = a1;
    MEMORY[0x270FA5388](v9);
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    type metadata accessor for Color3();
    uint64_t v13 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v15 = v14;
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Color3<>.vtValue(from:), (uint64_t)v31, v13, v15, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v17);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v19 = RIOPxrVtValueCreateWithDouble3Array();
LABEL_10:
    uint64_t v30 = v19;

    return v30;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
  if (MetatypeMetadata == v10)
  {
    uint64_t v35 = a1;
    MEMORY[0x270FA5388](v10);
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    type metadata accessor for Color3();
    uint64_t v20 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v22 = v21;
    uint64_t v23 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static Color3<>.vtValue(from:), (uint64_t)v31, v20, v22, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v19 = RIOPxrVtValueCreateWithFloat3Array();
    goto LABEL_10;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
  if (MetatypeMetadata == v11)
  {
    uint64_t v35 = a1;
    MEMORY[0x270FA5388](v11);
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    type metadata accessor for Color3();
    uint64_t v25 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v27 = v26;
    uint64_t v28 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in static Color3<>.vtValue(from:), (uint64_t)v31, v25, v27, MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v29);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v19 = RIOPxrVtValueCreateWithHalf3Array();
    goto LABEL_10;
  }
  return RIOPxrVtValueCreateEmptyValue();
}

uint64_t closure #1 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v3);
  MEMORY[0x270FA5388](v4);
  type metadata accessor for Color3();
  Color3.red.getter();
  swift_dynamicCast();
  Color3.green.getter();
  swift_dynamicCast();
  Color3.blue.getter();
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithDouble3();
  *a2 = result;
  return result;
}

uint64_t closure #2 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v3);
  MEMORY[0x270FA5388](v4);
  type metadata accessor for Color3();
  Color3.red.getter();
  swift_dynamicCast();
  Color3.green.getter();
  swift_dynamicCast();
  Color3.blue.getter();
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithFloat3();
  *a2 = result;
  return result;
}

uint64_t closure #3 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  type metadata accessor for Color3();
  Color3.red.getter();
  uint64_t v3 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v3);
  Color3.green.getter();
  uint64_t v4 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v4);
  Color3.blue.getter();
  uint64_t v5 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v5);
  uint64_t result = RIOPxrVtValueCreateWithHalf3();
  *a2 = result;
  return result;
}

uint64_t static Color3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Color3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, a5, static Color3<>.vtValue(from:));
}

uint64_t static Color3<>.getValueArrayOpt(from:time:)()
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t v6 = RIOPxrUsdAttributeCopyValue();
    if (v6)
    {
      long long v2 = (void *)v6;
      uint64_t v7 = RIOPxrVtValueCopyDouble3Array();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v15 = v7;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Color3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
        return 0;
      }
      uint64_t v1 = RIOPxrUsdAttributeCopyValue();
      if (!v1) {
        return 0;
      }
      long long v2 = (void *)v1;
      uint64_t v3 = RIOPxrVtValueCopyHalf3Array();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        uint64_t v15 = v3;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Color3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v5);
        type metadata accessor for Color3();
        uint64_t v12 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v12;
      }
      goto LABEL_14;
    }
    uint64_t v9 = RIOPxrUsdAttributeCopyValue();
    if (v9)
    {
      long long v2 = (void *)v9;
      uint64_t v10 = RIOPxrVtValueCopyFloat3Array();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v15 = v10;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Color3<Float>;
        goto LABEL_13;
      }
LABEL_14:
    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asColor3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B90], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37BB0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Color3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor3dArray();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor3fArray();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    }
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor3hArray();
  }
  *a3 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Color3<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Color3<A>()
{
  return static Color3<>.getValueArrayOpt(from:time:)();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Color3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Color3<>.vtValue(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8));
}

uint64_t static Color4<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v9)
  {
    uint64_t v35 = a1;
    MEMORY[0x270FA5388](v9);
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    type metadata accessor for Color4();
    uint64_t v13 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v15 = v14;
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Color4<>.vtValue(from:), (uint64_t)v31, v13, v15, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v17);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v19 = RIOPxrVtValueCreateWithDouble4Array();
LABEL_10:
    uint64_t v30 = v19;

    return v30;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
  if (MetatypeMetadata == v10)
  {
    uint64_t v35 = a1;
    MEMORY[0x270FA5388](v10);
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    type metadata accessor for Color4();
    uint64_t v20 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v22 = v21;
    uint64_t v23 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static Color4<>.vtValue(from:), (uint64_t)v31, v20, v22, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v19 = RIOPxrVtValueCreateWithFloat4Array();
    goto LABEL_10;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
  if (MetatypeMetadata == v11)
  {
    uint64_t v35 = a1;
    MEMORY[0x270FA5388](v11);
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    type metadata accessor for Color4();
    uint64_t v25 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v27 = v26;
    uint64_t v28 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in static Color4<>.vtValue(from:), (uint64_t)v31, v25, v27, MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v29);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v19 = RIOPxrVtValueCreateWithHalf4Array();
    goto LABEL_10;
  }
  return RIOPxrVtValueCreateEmptyValue();
}

uint64_t closure #1 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v3);
  MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  type metadata accessor for Color4();
  Color4.red.getter();
  swift_dynamicCast();
  Color4.green.getter();
  swift_dynamicCast();
  Color4.blue.getter();
  swift_dynamicCast();
  Color4.alpha.getter();
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithDouble4();
  *a2 = result;
  return result;
}

uint64_t closure #2 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v3);
  MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  type metadata accessor for Color4();
  Color4.red.getter();
  swift_dynamicCast();
  Color4.green.getter();
  swift_dynamicCast();
  Color4.blue.getter();
  swift_dynamicCast();
  Color4.alpha.getter();
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithFloat4();
  *a2 = result;
  return result;
}

uint64_t closure #3 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  type metadata accessor for Color4();
  Color4.red.getter();
  uint64_t v3 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v3);
  Color4.green.getter();
  uint64_t v4 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v4);
  Color4.blue.getter();
  uint64_t v5 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v5);
  Color4.alpha.getter();
  uint64_t v6 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v6);
  uint64_t result = RIOPxrVtValueCreateWithHalf4();
  *a2 = result;
  return result;
}

uint64_t static Color4<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Color3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, a5, static Color4<>.vtValue(from:));
}

uint64_t static Color3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = (void *)a6(a1, a3, a4, a5);
  uint64_t v7 = RIOPxrUsdAttributeSetValue();

  return v7;
}

uint64_t static Color4<>.getValueArrayOpt(from:time:)()
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t v6 = RIOPxrUsdAttributeCopyValue();
    if (v6)
    {
      long long v2 = (void *)v6;
      uint64_t v7 = RIOPxrVtValueCopyDouble4Array();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v15 = v7;
        closure #1 in RIOPxrVtValueRef.asColor4dArray.getter(&v14);

        uint64_t v5 = &demangling cache variable for type metadata for Color4<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
        return 0;
      }
      uint64_t v1 = RIOPxrUsdAttributeCopyValue();
      if (!v1) {
        return 0;
      }
      long long v2 = (void *)v1;
      uint64_t v3 = RIOPxrVtValueCopyHalf4Array();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        uint64_t v15 = v3;
        closure #1 in RIOPxrVtValueRef.asColor4hArray.getter(&v14);

        uint64_t v5 = &demangling cache variable for type metadata for Color4<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v5);
        type metadata accessor for Color4();
        uint64_t v12 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v12;
      }
      goto LABEL_14;
    }
    uint64_t v9 = RIOPxrUsdAttributeCopyValue();
    if (v9)
    {
      long long v2 = (void *)v9;
      uint64_t v10 = RIOPxrVtValueCopyFloat4Array();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v15 = v10;
        closure #1 in RIOPxrVtValueRef.asColor4fArray.getter(&v14);

        uint64_t v5 = &demangling cache variable for type metadata for Color4<Float>;
        goto LABEL_13;
      }
LABEL_14:
    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asColor4dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B78], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor4dArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor4fArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B98], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor4fArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor4hArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BB8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor4hArray.getter);
}

uint64_t static Color4<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor4dArray();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor4fArray();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    }
    uint64_t result = RIOPxrSdfValueTypeNameCreateColor4hArray();
  }
  *a3 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Color4<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Color4<A>()
{
  return static Color4<>.getValueArrayOpt(from:time:)();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Color4<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color4<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Color4<>.vtValue(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8));
}

uint64_t static Vector3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, void, double))type metadata accessor for Vector3, (void (*)(char *, char *))partial apply for closure #1 in static Vector3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static Vector3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static Vector3<>.vtValue(from:));
}

uint64_t static Vector3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Normal3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, static Vector3<>.vtValue(from:));
}

uint64_t static Normal3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = (void *)a5(a1, a3, a4);
  uint64_t v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

uint64_t static Vector3<>.getValueArrayOpt(from:time:)()
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t v6 = RIOPxrUsdAttributeCopyValue();
    if (v6)
    {
      long long v2 = (void *)v6;
      uint64_t v7 = RIOPxrVtValueCopyDouble3Array();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v15 = v7;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Vector3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
        return 0;
      }
      uint64_t v1 = RIOPxrUsdAttributeCopyValue();
      if (!v1) {
        return 0;
      }
      long long v2 = (void *)v1;
      uint64_t v3 = RIOPxrVtValueCopyHalf3Array();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        uint64_t v15 = v3;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Vector3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v5);
        type metadata accessor for Vector3();
        uint64_t v12 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v12;
      }
      goto LABEL_14;
    }
    uint64_t v9 = RIOPxrUsdAttributeCopyValue();
    if (v9)
    {
      long long v2 = (void *)v9;
      uint64_t v10 = RIOPxrVtValueCopyFloat3Array();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v15 = v10;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Vector3<Float>;
        goto LABEL_13;
      }
LABEL_14:
    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asVector3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asVector3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B90], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asVector3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37BB0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Vector3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x263F378E0], MEMORY[0x263F378F0], MEMORY[0x263F37900], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Vector3<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Vector3<A>()
{
  return static Vector3<>.getValueArrayOpt(from:time:)();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Vector3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Vector3<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Vector3<>.vtValue(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t static Point3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, void, double))type metadata accessor for Point3, (void (*)(char *, char *))partial apply for closure #1 in static Point3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static Point3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static Point3<>.vtValue(from:));
}

uint64_t static Point3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Normal3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, static Point3<>.vtValue(from:));
}

uint64_t static Point3<>.getValueArrayOpt(from:time:)()
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t v6 = RIOPxrUsdAttributeCopyValue();
    if (v6)
    {
      long long v2 = (void *)v6;
      uint64_t v7 = RIOPxrVtValueCopyDouble3Array();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v15 = v7;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Point3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
        return 0;
      }
      uint64_t v1 = RIOPxrUsdAttributeCopyValue();
      if (!v1) {
        return 0;
      }
      long long v2 = (void *)v1;
      uint64_t v3 = RIOPxrVtValueCopyHalf3Array();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        uint64_t v15 = v3;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Point3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v5);
        type metadata accessor for Point3();
        uint64_t v12 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v12;
      }
      goto LABEL_14;
    }
    uint64_t v9 = RIOPxrUsdAttributeCopyValue();
    if (v9)
    {
      long long v2 = (void *)v9;
      uint64_t v10 = RIOPxrVtValueCopyFloat3Array();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v15 = v10;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for Point3<Float>;
        goto LABEL_13;
      }
LABEL_14:
    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asPoint3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asPoint3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B90], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asPoint3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37BB0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Point3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x263F37880], MEMORY[0x263F37890], MEMORY[0x263F378A0], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Point3<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Point3<A>()
{
  return static Point3<>.getValueArrayOpt(from:time:)();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Point3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Point3<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Point3<>.vtValue(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t static TexCoord2<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v7)
  {
    uint64_t v32 = a1;
    MEMORY[0x270FA5388](v7);
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    type metadata accessor for TexCoord2();
    uint64_t v11 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v13 = v12;
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static TexCoord2<>.vtValue(from:), (uint64_t)v29, v11, v13, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v15);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v17 = RIOPxrVtValueCreateWithDouble2Array();
LABEL_10:
    uint64_t v28 = v17;

    return v28;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
  if (MetatypeMetadata == v8)
  {
    uint64_t v32 = a1;
    MEMORY[0x270FA5388](v8);
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    type metadata accessor for TexCoord2();
    uint64_t v18 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v20 = v19;
    uint64_t v21 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static TexCoord2<>.vtValue(from:), (uint64_t)v29, v18, v20, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v17 = RIOPxrVtValueCreateWithFloat2Array();
    goto LABEL_10;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
  if (MetatypeMetadata == v9)
  {
    uint64_t v32 = a1;
    MEMORY[0x270FA5388](v9);
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    type metadata accessor for TexCoord2();
    uint64_t v23 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v25 = v24;
    uint64_t v26 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in static TexCoord2<>.vtValue(from:), (uint64_t)v29, v23, v25, MEMORY[0x263F8E628], v26, MEMORY[0x263F8E658], v27);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v17 = RIOPxrVtValueCreateWithHalf2Array();
    goto LABEL_10;
  }
  return RIOPxrVtValueCreateEmptyValue();
}

uint64_t closure #1 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v3);
  type metadata accessor for TexCoord2();
  TexCoord2.x.getter();
  swift_dynamicCast();
  TexCoord2.y.getter();
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithDouble2();
  *a2 = result;
  return result;
}

uint64_t closure #2 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v3);
  type metadata accessor for TexCoord2();
  TexCoord2.x.getter();
  swift_dynamicCast();
  TexCoord2.y.getter();
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithFloat2();
  *a2 = result;
  return result;
}

uint64_t closure #3 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  type metadata accessor for TexCoord2();
  TexCoord2.x.getter();
  uint64_t v3 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v3);
  TexCoord2.y.getter();
  uint64_t v4 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v4);
  uint64_t result = RIOPxrVtValueCreateWithHalf2();
  *a2 = result;
  return result;
}

uint64_t static TexCoord2<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Normal3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, static TexCoord2<>.vtValue(from:));
}

uint64_t static TexCoord2<>.getValueArrayOpt(from:time:)()
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t v6 = RIOPxrUsdAttributeCopyValue();
    if (v6)
    {
      long long v2 = (void *)v6;
      uint64_t v7 = RIOPxrVtValueCopyDouble2Array();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v15 = v7;
        closure #1 in RIOPxrVtValueRef.asTexCoord2dArray.getter(&v14);

        uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
        return 0;
      }
      uint64_t v1 = RIOPxrUsdAttributeCopyValue();
      if (!v1) {
        return 0;
      }
      long long v2 = (void *)v1;
      uint64_t v3 = RIOPxrVtValueCopyHalf2Array();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        uint64_t v15 = v3;
        closure #1 in RIOPxrVtValueRef.asTexCoord2hArray.getter(&v14);

        uint64_t v5 = &demangling cache variable for type metadata for TexCoord2<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v5);
        type metadata accessor for TexCoord2();
        uint64_t v12 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v12;
      }
      goto LABEL_14;
    }
    uint64_t v9 = RIOPxrUsdAttributeCopyValue();
    if (v9)
    {
      long long v2 = (void *)v9;
      uint64_t v10 = RIOPxrVtValueCopyFloat2Array();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v15 = v10;
        closure #1 in RIOPxrVtValueRef.asTexCoord2fArray.getter(&v14);

        uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Float>;
        goto LABEL_13;
      }
LABEL_14:
    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asTexCoord2dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B68], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTexCoord2dArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord2fArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37B88], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTexCoord2fArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord2hArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BA8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTexCoord2hArray.getter);
}

uint64_t static TexCoord2<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2dArray();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2fArray();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    }
    uint64_t result = RIOPxrSdfValueTypeNameCreateTexCoord2hArray();
  }
  *a3 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TexCoord2<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> TexCoord2<A>()
{
  return static TexCoord2<>.getValueArrayOpt(from:time:)();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> TexCoord2<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TexCoord2<>.vtValue(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t static TexCoord3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, void, double))type metadata accessor for TexCoord3, (void (*)(char *, char *))partial apply for closure #1 in static TexCoord3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static TexCoord3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static TexCoord3<>.vtValue(from:));
}

uint64_t static Normal3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, void, double), void (*a5)(char *, char *), void (*a6)(char *, char *), void (*a7)(char *, char *))
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v15)
  {
    uint64_t v43 = a1;
    double v19 = MEMORY[0x270FA5388](v15);
    uint64_t v41 = a2;
    uint64_t v42 = a3;
    a4(255, a2, *(void *)(a3 + 8), v19);
    uint64_t v20 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v22 = v21;
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a5, (uint64_t)v40, v20, v22, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v24);
    v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v26 = RIOPxrVtValueCreateWithDouble3Array();
LABEL_10:
    uint64_t v39 = v26;

    return v39;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
  if (MetatypeMetadata == v16)
  {
    uint64_t v43 = a1;
    double v27 = MEMORY[0x270FA5388](v16);
    uint64_t v41 = a2;
    uint64_t v42 = a3;
    a4(255, a2, *(void *)(a3 + 8), v27);
    uint64_t v28 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v30 = v29;
    uint64_t v31 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a6, (uint64_t)v40, v28, v30, MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v32);
    v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v26 = RIOPxrVtValueCreateWithFloat3Array();
    goto LABEL_10;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
  if (MetatypeMetadata == v17)
  {
    uint64_t v43 = a1;
    double v33 = MEMORY[0x270FA5388](v17);
    uint64_t v41 = a2;
    uint64_t v42 = a3;
    a4(255, a2, *(void *)(a3 + 8), v33);
    uint64_t v34 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    uint64_t v36 = v35;
    uint64_t v37 = swift_getWitnessTable();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a7, (uint64_t)v40, v34, v36, MEMORY[0x263F8E628], v37, MEMORY[0x263F8E658], v38);
    v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v26 = RIOPxrVtValueCreateWithHalf3Array();
    goto LABEL_10;
  }
  return RIOPxrVtValueCreateEmptyValue();
}

uint64_t closure #1 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X5>, void (*a3)(uint64_t)@<X6>, void (*a4)(uint64_t)@<X7>, uint64_t *a5@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v8);
  double v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = v11(0, v10);
  a2();
  swift_dynamicCast();
  a3(v12);
  swift_dynamicCast();
  a4(v12);
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithDouble3();
  *a5 = result;
  return result;
}

uint64_t closure #2 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X5>, void (*a3)(uint64_t)@<X6>, void (*a4)(uint64_t)@<X7>, uint64_t *a5@<X8>)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v8);
  double v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = v11(0, v10);
  a2();
  swift_dynamicCast();
  a3(v12);
  swift_dynamicCast();
  a4(v12);
  swift_dynamicCast();
  uint64_t result = RIOPxrVtValueCreateWithFloat3();
  *a5 = result;
  return result;
}

uint64_t closure #3 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X5>, void (*a3)(uint64_t)@<X6>, void (*a4)(uint64_t)@<X7>, uint64_t *a5@<X8>)
{
  double v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = v10(0, v9);
  a2();
  uint64_t v12 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v12);
  a3(v11);
  uint64_t v13 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v13);
  a4(v11);
  uint64_t v14 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v14);
  uint64_t result = RIOPxrVtValueCreateWithHalf3();
  *a5 = result;
  return result;
}

uint64_t static TexCoord3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Normal3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, static TexCoord3<>.vtValue(from:));
}

uint64_t static TexCoord3<>.getValueArrayOpt(from:time:)()
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t v6 = RIOPxrUsdAttributeCopyValue();
    if (v6)
    {
      long long v2 = (void *)v6;
      uint64_t v7 = RIOPxrVtValueCopyDouble3Array();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v15 = v7;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for TexCoord3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
        return 0;
      }
      uint64_t v1 = RIOPxrUsdAttributeCopyValue();
      if (!v1) {
        return 0;
      }
      long long v2 = (void *)v1;
      uint64_t v3 = RIOPxrVtValueCopyHalf3Array();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        uint64_t v15 = v3;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for TexCoord3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v5);
        type metadata accessor for TexCoord3();
        uint64_t v12 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v12;
      }
      goto LABEL_14;
    }
    uint64_t v9 = RIOPxrUsdAttributeCopyValue();
    if (v9)
    {
      long long v2 = (void *)v9;
      uint64_t v10 = RIOPxrVtValueCopyFloat3Array();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v15 = v10;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

        uint64_t v5 = &demangling cache variable for type metadata for TexCoord3<Float>;
        goto LABEL_13;
      }
LABEL_14:
    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asTexCoord3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37B90], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter(MEMORY[0x263F37BB0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static TexCoord3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x263F378B0], MEMORY[0x263F378C0], MEMORY[0x263F378D0], a3);
}

uint64_t static Normal3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    uint64_t result = a3();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    uint64_t result = a4();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    }
    uint64_t result = a5();
  }
  *a6 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TexCoord3<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> TexCoord3<A>()
{
  return static TexCoord3<>.getValueArrayOpt(from:time:)();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> TexCoord3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TexCoord3<>.vtValue(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t static String.vtValue(from:)()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v1 = RIOPxrVtValueCreateWithStringArray();

  return v1;
}

uint64_t static String.setValueArray(_:to:time:)()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v1 = (void *)RIOPxrVtValueCreateWithStringArray();

  uint64_t v2 = RIOPxrUsdAttributeSetValue();
  return v2;
}

uint64_t static String.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateStringArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance String()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v1 = (void *)RIOPxrVtValueCreateWithStringArray();

  uint64_t v2 = RIOPxrUsdAttributeSetValue();
  return v2;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateStringArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance String()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v1 = RIOPxrVtValueCreateWithStringArray();

  return v1;
}

uint64_t static ToolsFoundations.Token.vtValue(from:)(uint64_t a1)
{
  return static ToolsFoundations.Token.vtValue(from:)(a1, type metadata accessor for RIOPxrTfTokenRef, MEMORY[0x263F37CC0]);
}

uint64_t static ToolsFoundations.Token.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValueArray(_:to:time:)(a1, a2, type metadata accessor for RIOPxrTfTokenRef, MEMORY[0x263F37CC0]);
}

uint64_t static ToolsFoundations.Token.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C28], (uint64_t)type metadata accessor for RIOPxrTfTokenRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t static ToolsFoundations.Token.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTokenArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(a1, a2, a3, a4, type metadata accessor for RIOPxrTfTokenRef, MEMORY[0x263F37CC0]);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance ToolsFoundations.Token(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37C28], (uint64_t)type metadata accessor for RIOPxrTfTokenRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance ToolsFoundations.Token@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateTokenArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(a1, a2, a3, type metadata accessor for RIOPxrTfTokenRef, MEMORY[0x263F37CC0]);
}

uint64_t static SceneDescriptionFoundations.AssetPath.vtValue(from:)(uint64_t a1)
{
  return static ToolsFoundations.Token.vtValue(from:)(a1, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x263F37C50]);
}

uint64_t static ToolsFoundations.Token.vtValue(from:)(uint64_t a1, void (*a2)(void), uint64_t (*a3)(Class))
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a2(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3(isa);

  return v6;
}

uint64_t static SceneDescriptionFoundations.AssetPath.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValueArray(_:to:time:)(a1, a2, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x263F37C50]);
}

uint64_t static ToolsFoundations.Token.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(Class))
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a3(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a4(isa);

  uint64_t v8 = RIOPxrUsdAttributeSetValue();
  return v8;
}

uint64_t static SceneDescriptionFoundations.AssetPath.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B58], (uint64_t)type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t static SceneDescriptionFoundations.AssetPath.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateAssetPathArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(a1, a2, a3, a4, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x263F37C50]);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(Class))
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a5(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)a6(isa);

  uint64_t v10 = RIOPxrUsdAttributeSetValue();
  return v10;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B58], (uint64_t)type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance SceneDescriptionFoundations.AssetPath@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateAssetPathArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(a1, a2, a3, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x263F37C50]);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(Class))
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a4(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = a5(isa);

  return v8;
}

uint64_t static SIMD2<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t static SIMD2<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD2<>.getValueArray(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(a1, a2, a3);
}

uint64_t static SIMD2<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD2<>.valueArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD2<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.getValueArrayOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD2<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.vtValue(from:)(a1, *(void *)(a2 + 16), a3, *(void *)(a3 - 16));
}

uint64_t static SIMD3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t static SIMD3<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD3<>.valueArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD3<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD3<>.getValueArrayOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD3<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD3<>.vtValue(from:)(a1, *(void *)(a2 + 16), a3, *(void *)(a3 - 16));
}

uint64_t static SIMD4<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t static SIMD4<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD4<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD4<>.valueArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD4<>.setValueArray(_:to:time:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD4<>.getValueArrayOpt(from:time:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD4<>.valueArrayTypeName.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD4<>.vtValue(from:)(a1, *(void *)(a2 + 16), a3, *(void *)(a3 - 16));
}

uint64_t static Half.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BA8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf2Array.getter);
}

uint64_t RIOPxrVtValueRef.asHalf2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BA8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf2Array.getter);
}

uint64_t static Half.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BA8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf2Array();
  *a1 = result;
  return result;
}

uint64_t static Half.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BB0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf3Array.getter);
}

uint64_t RIOPxrVtValueRef.asHalf3Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BB0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf3Array.getter);
}

uint64_t static Half.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BB0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf3Array();
  *a1 = result;
  return result;
}

uint64_t static Half.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BB8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf4Array.getter);
}

uint64_t RIOPxrVtValueRef.asHalf4Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x263F37BB8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf4Array.getter);
}

uint64_t static Half.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BB8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf4Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateHalf4Array();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B88], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat2Array.getter);
}

uint64_t static Float.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B88], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat2Array();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B90], MEMORY[0x263F37CF8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat3Array.getter);
}

uint64_t static Float.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B90], MEMORY[0x263F37CF8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat3Array();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B98], MEMORY[0x263F37D00], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat3Array.getter);
}

uint64_t static Float.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B98], MEMORY[0x263F37D00], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateFloat4Array();
  *a1 = result;
  return result;
}

uint64_t static Double.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B68], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble2Array.getter);
}

uint64_t static Double.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B68], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble2Array();
  *a1 = result;
  return result;
}

uint64_t static Double.vtValue(from:)(uint64_t a1)
{
  return specialized static Double.vtValue(from:)(a1, MEMORY[0x263F37C60], MEMORY[0x263F37C58]);
}

{
  return specialized static Double.vtValue(from:)(a1, MEMORY[0x263F37C70], MEMORY[0x263F37C68]);
}

uint64_t static Double.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37C60], MEMORY[0x263F37C58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B70], MEMORY[0x263F37CE8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t static Double.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37C60], MEMORY[0x263F37C58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B70], MEMORY[0x263F37CE8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3ArrayElement.vtValue(from:) in conformance Double(uint64_t a1)
{
  return specialized static Double.vtValue(from:)(a1, MEMORY[0x263F37C60], MEMORY[0x263F37C58]);
}

uint64_t static Double.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37C70], MEMORY[0x263F37C68], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B78], MEMORY[0x263F37CF0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t static Double.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37C70], MEMORY[0x263F37C68], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37B78], MEMORY[0x263F37CF0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateDouble4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4ArrayElement.vtValue(from:) in conformance Double(uint64_t a1)
{
  return specialized static Double.vtValue(from:)(a1, MEMORY[0x263F37C70], MEMORY[0x263F37C68]);
}

uint64_t static Int32.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BC8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BC8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt2Array.getter);
}

uint64_t static Int32.vtValue(from:)(__n128 *a1)
{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37C90], MEMORY[0x263F37C78]);
}

{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37CA0], MEMORY[0x263F37C98]);
}

uint64_t static Int32.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37C90], MEMORY[0x263F37C78], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD8], MEMORY[0x263F37D10], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37C90], MEMORY[0x263F37C78], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BD8], MEMORY[0x263F37D10], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdVtValueSIMD3ArrayElement.vtValue(from:) in conformance Int32(__n128 *a1)
{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37C90], MEMORY[0x263F37C78]);
}

uint64_t static Int32.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x263F37CA0], MEMORY[0x263F37C98], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BE0], MEMORY[0x263F37D20], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x263F37CA0], MEMORY[0x263F37C98], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x263F37BE0], MEMORY[0x263F37D20], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdVtValueSIMD4ArrayElement.vtValue(from:) in conformance Int32(__n128 *a1)
{
  return specialized static Int32.vtValue(from:)(a1, MEMORY[0x263F37CA0], MEMORY[0x263F37C98]);
}

uint64_t static Int.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt2Array();
  *a1 = result;
  return result;
}

uint64_t static Int.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt3Array();
  *a1 = result;
  return result;
}

uint64_t static Int.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Bool.setValueArray(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfValueTypeNameCreateInt4Array();
  *a1 = result;
  return result;
}

uint64_t Dictionary<>.vtValue.getter(uint64_t a1)
{
  if (*((void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy9RealityIO16ToolsFoundationsO5TokenVSo16RIOPxrVtValueRefaG_So0i2TfhL0a_ALts5NeverOTg503_s9d4IO16fg2O5h5VSo16ijk48RefaSo0f2TfeI0aAGIgngoo_AE3key_AG5valuetAI_AGts5n46OIegnrzr_TR05_sSD9a6IOAA16cd2O5e8VRszSo16fgH46s16Rs_rlE02vtH0AGvgtuV25_AGtAE_AGtXEfU_Tf3nnnpf_nTf1cn_n(a1)
       + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrTfTokenRef, RIOPxrVtValueRef>);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v6 = v1;
  uint64_t v2 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, 1, &v6);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  type metadata accessor for RIOPxrVtValueRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v4 = RIOPxrVtValueCreateWithDictionary();

  return v4;
}

uint64_t Array<A>.vtValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  return Array<A>.vtValue.getter(*v2, *(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2)
{
  return SIMD2<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> SIMD3<A>(uint64_t a1, uint64_t a2)
{
  return SIMD3<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> SIMD4<A>(uint64_t a1, uint64_t a2)
{
  return SIMD4<>.vtValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t RIOPxrVtValueRef.isEmpty.getter()
{
  return RIOPxrVtValueIsEmpty();
}

uint64_t RIOPxrVtValueRef.asTexCoord2h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t result = RIOPxrVtValueGetHalf2();
  if (result)
  {
    uint64_t v3 = v7;
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = 2;
    *(void *)(v4 + 32) = v3;
    uint64_t result = specialized TexCoord2.init(_:)(v4, &v6);
    uint64_t v5 = v6;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  return result;
}

int8x16_t RIOPxrVtValueRef.asTexCoord2f.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int Float2 = RIOPxrVtValueGetFloat2();
  v3.i64[0] = 0;
  if (Float2) {
    unint64_t v4 = -1;
  }
  else {
    unint64_t v4 = 0;
  }
  int8x16_t result = vandq_s8(v3, (int8x16_t)vdupq_n_s64(v4));
  *a1 = result;
  a1[1].i8[0] = Float2 ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asColor3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37CF8];
  return RIOPxrVtValueRef.asColor3h.getter(v1, a1);
}

uint64_t RIOPxrVtValueRef.asPoint3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37D08];
  return RIOPxrVtValueRef.asColor3h.getter(v1, a1);
}

uint64_t RIOPxrVtValueRef.asColor3h.getter@<X0>(uint64_t (*a1)(uint64_t, uint64_t *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t result = a1(v2, &v10);
  if (result)
  {
    int v5 = v11;
    uint64_t v6 = v10;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = 4;
    *(_DWORD *)(v7 + 44) = 0;
    *(void *)(v7 + 32) = v6;
    *(_DWORD *)(v7 + 40) = v5;
    uint64_t result = specialized TexCoord3.init(_:)(v7, &v9);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t RIOPxrVtValueRef.asNormal3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37D08];
  return RIOPxrVtValueRef.asColor3h.getter(v1, a1);
}

uint64_t RIOPxrVtValueRef.asVector3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37D08];
  return RIOPxrVtValueRef.asColor3h.getter(v1, a1);
}

uint64_t RIOPxrVtValueRef.asTexCoord3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x263F37CF8];
  return RIOPxrVtValueRef.asColor3h.getter(v1, a1);
}

uint64_t RIOPxrVtValueRef.asColor4h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v7 = 0uLL;
  uint64_t result = RIOPxrVtValueGetFloat4();
  if (result)
  {
    long long v5 = v7;
    uint64_t v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v3 + 16) = 4;
    *(_OWORD *)(v3 + 32) = v5;
    uint64_t result = specialized Color4.init(_:)(v3, &v6);
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a1 = v4;
  return result;
}

double RIOPxrVtValueRef.asColor3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  *(void *)&double result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asPoint3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  *(void *)&double result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asNormal3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  *(void *)&double result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asVector3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  *(void *)&double result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asTexCoord3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  *(void *)&double result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

int8x16_t RIOPxrVtValueRef.asColor3f.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int Float3 = RIOPxrVtValueGetFloat3();
  int8x16_t v3 = 0uLL;
  v3.i32[3] = 0;
  if (Float3) {
    unint64_t v4 = -1;
  }
  else {
    unint64_t v4 = 0;
  }
  int8x16_t result = vandq_s8(v3, (int8x16_t)vdupq_n_s64(v4));
  *a1 = result;
  a1[1].i8[0] = Float3 ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asColor4f.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetFloat4();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asTexCoord2d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetDouble2();
  long long v3 = 0uLL;
  if (result) {
    long long v3 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asColor3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

{
  uint64_t result;
  long long v3;

  uint64_t result = RIOPxrVtValueGetDouble3();
  if (result) {
    long long v3 = 0u;
  }
  else {
    long long v3 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asPoint3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asNormal3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asVector3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asTexCoord3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asColor4d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetDouble4();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asBoolArray.getter@<X0>(char **a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    long long v5 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  long long v5 = (char *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    long long v7 = v6;
    char Bool = RIOPxrVtValueGetBool();

    if (Bool)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v10 = *((void *)v5 + 2);
      unint64_t v9 = *((void *)v5 + 3);
      if (v10 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v10 + 1;
      v5[v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asIntArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    long long v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  long long v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    long long v7 = v6;
    char Int32 = RIOPxrVtValueGetInt32();

    if (Int32)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v12 = v5;
  return result;
}

uint64_t closure #1 in closure #1 in RIOPxrVtValueRef.asInt32Array.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RIOPxrVtValueGetInt32();
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = result ^ 1;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asUIntArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    long long v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  long long v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    long long v7 = v6;
    Uchar Int32 = RIOPxrVtValueGetUInt32();

    if (UInt32)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asUInt8Array.getter@<X0>(char **a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    long long v5 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  long long v5 = (char *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    long long v7 = v6;
    char UInt8 = RIOPxrVtValueGetUInt8();

    if (UInt8)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v10 = *((void *)v5 + 2);
      unint64_t v9 = *((void *)v5 + 3);
      if (v10 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v10 + 1;
      v5[v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt32Array.getter@<X0>(uint64_t (*a1)(id, void *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  v19[1] = *MEMORY[0x263EF8340];
  v19[0] = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v18 = a3;
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v18 = a3;
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  if (v7 < 1) {
    __break(1u);
  }
  uint64_t v17 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v10 = (id)MEMORY[0x23ECBA630](v8, v6);
    }
    else {
      id v10 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v11 = v10;
    LODWORD(v19[0]) = 0;
    char v12 = a1(v10, v19);

    if (v12)
    {
      int v13 = v19[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = v17(0, *(void *)(v9 + 16) + 1, 1, v9);
      }
      unint64_t v15 = *(void *)(v9 + 16);
      unint64_t v14 = *(void *)(v9 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t v9 = v17(v14 > 1, v15 + 1, 1, v9);
      }
      *(void *)(v9 + 16) = v15 + 1;
      *(_DWORD *)(v9 + 4 * v15 + 32) = v13;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v18 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt64Array.getter@<X0>(uint64_t (*a1)(id, void *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  v19[1] = *MEMORY[0x263EF8340];
  v19[0] = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v18 = a3;
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v18 = a3;
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  if (v7 < 1) {
    __break(1u);
  }
  uint64_t v17 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v10 = (id)MEMORY[0x23ECBA630](v8, v6);
    }
    else {
      id v10 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v11 = v10;
    v19[0] = 0;
    char v12 = a1(v10, v19);

    if (v12)
    {
      uint64_t v13 = v19[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = v17(0, *(void *)(v9 + 16) + 1, 1, v9);
      }
      unint64_t v15 = *(void *)(v9 + 16);
      unint64_t v14 = *(void *)(v9 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t v9 = v17(v14 > 1, v15 + 1, 1, v9);
      }
      *(void *)(v9 + 16) = v15 + 1;
      *(void *)(v9 + 8 * v15 + 32) = v13;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v18 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt2Array.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    long long v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  long long v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    char Int2 = RIOPxrVtValueGetInt2();

    if (Int2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt3Array.getter@<X0>(uint64_t (*a1)(id, long long *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)&long long v19 = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v17 = a3;
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v17 = a3;
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  if (v7 < 1) {
    __break(1u);
  }
  uint64_t v16 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v10 = (id)MEMORY[0x23ECBA630](v8, v6);
    }
    else {
      id v10 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v11 = v10;
    long long v19 = 0uLL;
    char v12 = a1(v10, &v19);

    if (v12)
    {
      long long v18 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = v16(0, *(void *)(v9 + 16) + 1, 1, v9);
      }
      unint64_t v14 = *(void *)(v9 + 16);
      unint64_t v13 = *(void *)(v9 + 24);
      if (v14 >= v13 >> 1) {
        uint64_t v9 = v16(v13 > 1, v14 + 1, 1, v9);
      }
      *(void *)(v9 + 16) = v14 + 1;
      *(_OWORD *)(v9 + 16 * v14 + 32) = v18;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v17 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalfArray.getter@<X0>(char **a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    long long v5 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  long long v5 = (char *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    char Float = RIOPxrVtValueGetFloat();

    if (Float)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v10 = *((void *)v5 + 2);
      unint64_t v9 = *((void *)v5 + 3);
      if (v10 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v10 + 1;
      *(_DWORD *)&v5[4 * v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalf2Array.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    char v12 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_17:
    long long v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  char v12 = a1;
  if (!v3) {
    goto LABEL_17;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  long long v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    if (RIOPxrVtValueGetHalf2())
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = 2;
      *(void *)(v8 + 32) = 0;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    else
    {
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *char v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTexCoord2hArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v1 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_21;
  }
  uint64_t v2 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    if (!v2) {
      break;
    }
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v4 - 4, v1) : *(id *)(v1 + 8 * v4);
      id v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = v2;
      if ((RIOPxrVtValueGetHalf2() & 1) == 0) {
        __break(1u);
      }
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v9 + 16) = 2;
      *(void *)(v9 + 32) = 0;
      uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v10 + 16) = 4;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 40) = 0;
      uint64_t v11 = *(void *)(v9 + 16);
      if (!v11) {
        goto LABEL_19;
      }
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(v9 + 32);
      if (v11 == 1) {
        goto LABEL_20;
      }
      uint64_t v12 = v10;
      *(_DWORD *)(v10 + 36) = *(_DWORD *)(v9 + 36);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      }
      unint64_t v14 = v3[2];
      unint64_t v13 = v3[3];
      if (v14 >= v13 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v3);
      }
      v3[2] = v14 + 1;
      v3[v14 + 4] = v12;
      ++v4;
      uint64_t v2 = v8;
      if (v7 == v8) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain_n();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v3;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalf3Array.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_17:
    id v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  if (!v3) {
    goto LABEL_17;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  id v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    if (RIOPxrVtValueGetHalf3())
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = 4;
      *(_DWORD *)(v8 + 44) = 0;
      *(void *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 0;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    else
    {
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor3hArray.getter@<X0>(uint64_t (*a1)(BOOL, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t *a2@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_22;
  }
  uint64_t v4 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v4)
  {
    uint64_t v17 = a1;
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (v3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      a1 = (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))v4;
      if (!RIOPxrVtValueGetHalf3()) {
        __break(1u);
      }
      uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v10 + 16) = 4;
      *(_DWORD *)(v10 + 44) = 0;
      *(void *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 0;
      uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v11 + 16) = 4;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = 0;
      unint64_t v12 = *(void *)(v10 + 16);
      if (!v12) {
        goto LABEL_19;
      }
      *(_DWORD *)(v11 + 32) = *(_DWORD *)(v10 + 32);
      if (v12 == 1) {
        goto LABEL_20;
      }
      uint64_t v13 = v11;
      *(_DWORD *)(v11 + 36) = *(_DWORD *)(v10 + 36);
      if (v12 < 3) {
        goto LABEL_21;
      }
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = v17(0, *(void *)(v5 + 16) + 1, 1, v5);
      }
      unint64_t v15 = *(void *)(v5 + 16);
      unint64_t v14 = *(void *)(v5 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t v5 = v17(v14 > 1, v15 + 1, 1, v5);
      }
      *(void *)(v5 + 16) = v15 + 1;
      *(void *)(v5 + 8 * v15 + 32) = v13;
      ++v6;
      uint64_t v4 = (uint64_t)a1;
      if ((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))v9 == a1) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_24:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalf4Array.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v12 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unint64_t v12 = a1;
  if (!v3) {
    goto LABEL_17;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    id v7 = v6;
    if (RIOPxrVtValueGetHalf4())
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = 4;
      *(_OWORD *)(v8 + 32) = 0uLL;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    else
    {
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *unint64_t v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor4hArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v1 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v4 - 4, v1) : *(id *)(v1 + 8 * v4);
      id v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      if ((RIOPxrVtValueGetHalf4() & 1) == 0) {
        __break(1u);
      }
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = 4;
      *(_OWORD *)(v8 + 32) = 0uLL;
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v9 + 16) = 4;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      unint64_t v10 = *(void *)(v8 + 16);
      if (!v10) {
        goto LABEL_20;
      }
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v8 + 32);
      if (v10 == 1) {
        goto LABEL_21;
      }
      uint64_t v11 = v9;
      *(_DWORD *)(v9 + 36) = *(_DWORD *)(v8 + 36);
      if (v10 < 3) {
        goto LABEL_22;
      }
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(v8 + 40);
      if (v10 == 3) {
        goto LABEL_23;
      }
      *(_DWORD *)(v9 + 44) = *(_DWORD *)(v8 + 44);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      }
      unint64_t v13 = v3[2];
      unint64_t v12 = v3[3];
      if (v13 >= v12 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v3);
      }
      v3[2] = v13 + 1;
      v3[v13 + 4] = v11;
      ++v4;
      if (v7 == v2) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
  }
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
LABEL_26:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v3;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asFloatArray.getter@<X0>(char **a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    id v5 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  id v5 = (char *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    char Float = RIOPxrVtValueGetFloat();

    if (Float)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v10 = *((void *)v5 + 2);
      unint64_t v9 = *((void *)v5 + 3);
      if (v10 >= v9 >> 1) {
        id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v10 + 1;
      *(_DWORD *)&v5[4 * v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asFloat2Array.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    id v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  id v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    char Float2 = RIOPxrVtValueGetFloat2();

    if (Float2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTexCoord2fArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if ((RIOPxrVtValueGetFloat2() & 1) == 0) {
        __break(1u);
      }

      *(void *)&long long v9 = 0;
      long long v13 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v11 = v4[2];
      unint64_t v10 = v4[3];
      if (v11 >= v10 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v4);
      }
      _OWORD v4[2] = v11 + 1;
      *(_OWORD *)&v4[2 * v11 + 4] = v13;
      ++v5;
      if (v8 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor3fArray.getter@<X0>(unint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v5)
  {
    unint64_t v14 = (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))a1;
    uint64_t v6 = MEMORY[0x263F8EE78];
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (v4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v7 - 4, v4) : *(id *)(v4 + 8 * v7);
      long long v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if ((RIOPxrVtValueGetFloat3() & 1) == 0) {
        __break(1u);
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = v14(0, *(void *)(v6 + 16) + 1, 1, v6);
      }
      a1 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (a1 >= v11 >> 1) {
        uint64_t v6 = v14(v11 > 1, a1 + 1, 1, v6);
      }
      long long v12 = 0uLL;
      HIDWORD(v12) = 0;
      *(void *)(v6 + 16) = a1 + 1;
      *(_OWORD *)(v6 + 16 * a1 + 32) = v12;
      ++v7;
      if (v10 == v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = v6;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asFloat3Array.getter@<X0>(uint64_t (*a1)(id, long long *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)&long long v19 = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v17 = a3;
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v17 = a3;
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  if (v7 < 1) {
    __break(1u);
  }
  uint64_t v16 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v10 = (id)MEMORY[0x23ECBA630](v8, v6);
    }
    else {
      id v10 = *(id *)(v6 + 8 * v8 + 32);
    }
    unint64_t v11 = v10;
    long long v19 = 0uLL;
    char v12 = a1(v10, &v19);

    if (v12)
    {
      long long v18 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = v16(0, *(void *)(v9 + 16) + 1, 1, v9);
      }
      unint64_t v14 = *(void *)(v9 + 16);
      unint64_t v13 = *(void *)(v9 + 24);
      if (v14 >= v13 >> 1) {
        uint64_t v9 = v16(v13 > 1, v14 + 1, 1, v9);
      }
      *(void *)(v9 + 16) = v14 + 1;
      *(_OWORD *)(v9 + 16 * v14 + 32) = v18;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *uint64_t v17 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor4fArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if ((RIOPxrVtValueGetFloat4() & 1) == 0) {
        __break(1u);
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v10 = v4[2];
      unint64_t v9 = v4[3];
      if (v10 >= v9 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v4);
      }
      _OWORD v4[2] = v10 + 1;
      *(_OWORD *)&v4[2 * v10 + 4] = 0uLL;
      ++v5;
      if (v8 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asDoubleArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    char Double = RIOPxrVtValueGetDouble();

    if (Double)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asDouble2Array.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    char Double2 = RIOPxrVtValueGetDouble2();

    if (Double2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      *(_OWORD *)&v5[2 * v10 + 4] = 0uLL;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTexCoord2dArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if ((RIOPxrVtValueGetDouble2() & 1) == 0) {
        __break(1u);
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v10 = v4[2];
      unint64_t v9 = v4[3];
      if (v10 >= v9 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v4);
      }
      _OWORD v4[2] = v10 + 1;
      unint64_t v11 = &v4[4 * v10];
      *((_OWORD *)v11 + 2) = 0uLL;
      *((_OWORD *)v11 + 3) = 0u;
      ++v5;
      if (v8 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor3dArray.getter@<X0>(unint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v5)
  {
    unint64_t v14 = (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))a1;
    uint64_t v6 = MEMORY[0x263F8EE78];
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (v4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v7 - 4, v4) : *(id *)(v4 + 8 * v7);
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if ((RIOPxrVtValueGetDouble3() & 1) == 0) {
        __break(1u);
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = v14(0, *(void *)(v6 + 16) + 1, 1, v6);
      }
      a1 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (a1 >= v11 >> 1) {
        uint64_t v6 = v14(v11 > 1, a1 + 1, 1, v6);
      }
      *(void *)(v6 + 16) = a1 + 1;
      uint64_t v12 = v6 + 32 * a1;
      *(_OWORD *)(v12 + 48) = 0uLL;
      *(_OWORD *)(v12 + 32) = 0u;
      ++v7;
      if (v10 == v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = v6;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asDouble3Array.getter@<X0>(uint64_t (*a1)(id, long long *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)&long long v21 = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    long long v18 = a3;
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  long long v18 = a3;
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  if (v7 < 1) {
    __break(1u);
  }
  uint64_t v17 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v11 = (id)MEMORY[0x23ECBA630](v8, v6);
    }
    else {
      id v11 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v12 = v11;
    long long v21 = 0u;
    long long v22 = 0u;
    char v13 = a1(v11, &v21);

    if (v13)
    {
      long long v19 = v22;
      long long v20 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = v17(0, *(void *)(v9 + 16) + 1, 1, v9);
      }
      unint64_t v15 = *(void *)(v9 + 16);
      unint64_t v14 = *(void *)(v9 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t v9 = v17(v14 > 1, v15 + 1, 1, v9);
      }
      *(void *)(v9 + 16) = v15 + 1;
      uint64_t v10 = v9 + 32 * v15;
      *(_OWORD *)(v10 + 32) = v20;
      *(_OWORD *)(v10 + 48) = v19;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *long long v18 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor4dArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECBA630](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if ((RIOPxrVtValueGetDouble4() & 1) == 0) {
        __break(1u);
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v10 = v4[2];
      unint64_t v9 = v4[3];
      if (v10 >= v9 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v4);
      }
      _OWORD v4[2] = v10 + 1;
      id v11 = &v4[4 * v10];
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      ++v5;
      if (v8 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asQuatfArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    char Quatf = RIOPxrVtValueGetQuatf();

    if (Quatf)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      void v5[2] = v10 + 1;
      *(_OWORD *)&v5[2 * v10 + 4] = 0uLL;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asQuatdArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v7 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v8 = v7;
    char Quatd = RIOPxrVtValueGetQuatd();

    if (Quatd)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
      }
      void v5[2] = v11 + 1;
      id v6 = &v5[4 * v11];
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v7 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v8 = v7;
    char Matrix2d = RIOPxrVtValueGetMatrix2d();

    if (Matrix2d)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
      }
      void v5[2] = v11 + 1;
      id v6 = &v5[4 * v11];
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    char v13 = a1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  char v13 = a1;
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v7 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v8 = v7;
    char Matrix3d = RIOPxrVtValueGetMatrix3d();

    if (Matrix3d)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
      }
      void v5[2] = v11 + 1;
      id v6 = &v5[12 * v11];
      void v6[2] = 0u;
      v6[3] = 0u;
      void v6[4] = 0u;
      v6[5] = 0u;
      v6[6] = 0u;
      v6[7] = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *char v13 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (MEMORY[0x263F8EE78] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 < 1) {
    __break(1u);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x23ECBA630](v4, v2);
    }
    else {
      id v7 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v8 = v7;
    char Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
      }
      void v5[2] = v11 + 1;
      id v6 = &v5[16 * v11];
      void v6[2] = 0u;
      v6[3] = 0u;
      void v6[4] = 0u;
      v6[5] = 0u;
      v6[6] = 0u;
      v6[7] = 0u;
      _OWORD v6[8] = 0u;
      v6[9] = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTokenArray.getter@<X0>(void (*a1)(void)@<X2>, void (*a2)(BOOL, unint64_t, uint64_t)@<X3>, void *a3@<X8>)
{
  a1(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v18) {
    unint64_t v6 = v18;
  }
  else {
    unint64_t v6 = MEMORY[0x263F8EE78];
  }
  if (!(v6 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_6;
    }
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v5;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_19;
  }
LABEL_6:
  uint64_t result = ((uint64_t (*)(void, uint64_t, void))a2)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = a2;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        uint64_t v10 = MEMORY[0x23ECBA630](i, v6);
        unint64_t v12 = *(void *)(v5 + 16);
        unint64_t v11 = *(void *)(v5 + 24);
        if (v12 >= v11 >> 1) {
          v17(v11 > 1, v12 + 1, 1);
        }
        *(void *)(v5 + 16) = v12 + 1;
        *(void *)(v5 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (uint64_t j = 0; j != v7; ++j)
      {
        unint64_t v15 = *(void *)(v5 + 16);
        unint64_t v14 = *(void *)(v5 + 24);
        id v16 = *(id *)(v6 + 8 * j + 32);
        if (v15 >= v14 >> 1) {
          v17(v14 > 1, v15 + 1, 1);
        }
        *(void *)(v5 + 16) = v15 + 1;
        *(void *)(v5 + 8 * v15 + 32) = v16;
      }
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t RIOPxrVtValueRef.asDictionary.getter()
{
  uint64_t v0 = RIOPxrVtValueCopyDictionary();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    type metadata accessor for RIOPxrTfTokenRef(0);
    type metadata accessor for RIOPxrVtValueRef(0);
    lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  return 0;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a1;
  uint64_t v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    unint64_t v5 = 0;
    __int32 v6 = a2.i32[0];
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  __int32 v6 = a2.i32[0];
  int32x4_t v7 = vdupq_lane_s32(a2, 0);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    int32x4_t *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  int32x4_t v7 = (void *)a1[4];
  uint64_t v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)*a3;
  id v10 = v7;
  id v11 = v8;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  uint64_t v14 = v9[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15)) {
    goto LABEL_23;
  }
  char v17 = v12;
  if (v9[3] >= v16)
  {
    if (a2)
    {
      if (v12) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v17) {
        goto LABEL_10;
      }
    }
LABEL_13:
    long long v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    uint64_t v23 = 8 * v13;
    *(void *)(v22[6] + v23) = v10;
    *(void *)(v22[7] + v23) = v11;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v22[2] = v26;
    uint64_t v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v28 = (void **)(a1 + 7);
    while (1)
    {
      uint64_t v29 = *v28;
      uint64_t v30 = (void *)*a3;
      id v10 = *(v28 - 1);
      id v11 = v29;
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v25 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v25) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      uint64_t v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      uint64_t v39 = 8 * v31;
      *(void *)(v38[6] + v39) = v10;
      *(void *)(v38[7] + v39) = v11;
      uint64_t v40 = v38[2];
      BOOL v25 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v25) {
        goto LABEL_24;
      }
      v38[2] = v41;
      v28 += 2;
      if (!--v27) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a2 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v13 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    long long v20 = (void *)swift_allocError();
    swift_willThrow();
    id v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for RIOPxrTfTokenRef(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x800000023AAAD4D0;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  type metadata accessor for RIOPxrTfTokenRef(0);
  _print_unlocked<A, B>(_:_:)();
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void specialized static Int.getValue3Opt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  long long v3 = 0uLL;
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    char Int3 = RIOPxrVtValueGetInt3();

    BOOL v6 = (Int3 & 1) == 0;
    long long v3 = 0uLL;
  }
  else
  {
    BOOL v6 = 1;
  }
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = v6;
}

void specialized static Int.getValue4Opt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  long long v3 = 0uLL;
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    char Int4 = RIOPxrVtValueGetInt4();

    if (Int4)
    {
      char v6 = 0;
      long long v3 = 0uLL;
      *(void *)&long long v7 = 0;
      *((void *)&v7 + 1) = (unsigned __int128)0 >> 96;
      long long v8 = v7;
    }
    else
    {
      char v6 = 1;
      long long v8 = 0uLL;
      long long v3 = 0uLL;
    }
  }
  else
  {
    char v6 = 1;
    long long v8 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v6;
}

double specialized static Int.getValue2Opt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  double result = 0.0;
  if (v0)
  {
    uint64_t v2 = (void *)v0;
    RIOPxrVtValueGetInt2();

    return 0.0;
  }
  return result;
}

uint64_t specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    long long v8 = (void *)result;
    uint64_t v9 = a2();
    if (v9)
    {
      unint64_t v10 = (void *)v9;
      uint64_t v12 = v9;
      a5(&v11, &v12);

      return v11;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t specialized static UInt8.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    char v6 = (void *)result;
    uint64_t v7 = a2();
    if (v7)
    {
      long long v8 = (void *)v7;
      uint64_t v10 = v7;
      a3(&v9, &v10);

      return v9;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t specialized static Frame4D.getValueArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyMatrix4dArray();
  long long v3 = (void *)v2;
  if (v2)
  {
    int v51 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter(&v50);

    uint64_t v4 = v50;
    int64_t v5 = *(void *)(v50 + 16);
    if (v5)
    {
      int v51 = (void *)MEMORY[0x263F8EE78];
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      uint64_t v7 = 0;
      long long v3 = v51;
      do
      {
        unint64_t v8 = 0;
        uint64_t v9 = (long long *)(v4 + 32 + (v7 << 7));
        long long v11 = *v9;
        long long v10 = v9[1];
        long long v13 = v9[2];
        long long v12 = v9[3];
        long long v15 = v9[4];
        long long v14 = v9[5];
        long long v17 = v9[6];
        long long v16 = v9[7];
        long long v18 = 0uLL;
        long long v19 = 0uLL;
        long long v20 = 0uLL;
        long long v21 = 0uLL;
        long long v22 = 0uLL;
        long long v23 = 0uLL;
        long long v24 = 0uLL;
        long long v25 = 0uLL;
        do
        {
          unint64_t v27 = v8 >> 2;
          long long v28 = v15;
          long long v29 = v14;
          if (v8 >> 2 != 2)
          {
            long long v28 = v13;
            long long v29 = v12;
            if (v27 != 1)
            {
              long long v28 = v11;
              long long v29 = v10;
              if (v27)
              {
                long long v28 = v17;
                long long v29 = v16;
                if ((v8 & 0x7FFFFFFFFFFFFFFCLL) != 0xC)
                {
                  __break(1u);
                  return result;
                }
              }
            }
          }
          v49[0] = v28;
          v49[1] = v29;
          uint64_t v26 = *((void *)v49 + (v8 & 3));
          long long v41 = v18;
          long long v42 = v19;
          long long v43 = v20;
          long long v44 = v21;
          long long v45 = v22;
          long long v46 = v23;
          long long v47 = v24;
          long long v48 = v25;
          *((void *)&v41 + (v8 & 0xF)) = v26;
          long long v24 = v47;
          long long v25 = v48;
          long long v22 = v45;
          long long v23 = v46;
          long long v20 = v43;
          long long v21 = v44;
          ++v8;
          long long v18 = v41;
          long long v19 = v42;
        }
        while (v8 != 16);
        int v51 = v3;
        unint64_t v31 = v3[2];
        unint64_t v30 = v3[3];
        if (v31 >= v30 >> 1)
        {
          long long v39 = v47;
          long long v40 = v48;
          long long v37 = v41;
          long long v38 = v46;
          long long v35 = v44;
          long long v36 = v45;
          long long v33 = v42;
          long long v34 = v43;
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          long long v19 = v33;
          long long v20 = v34;
          long long v21 = v35;
          long long v22 = v36;
          long long v18 = v37;
          long long v23 = v38;
          long long v24 = v39;
          long long v25 = v40;
          long long v3 = v51;
        }
        ++v7;
        v3[2] = v31 + 1;
        char v32 = &v3[16 * v31];
        id v32[2] = v18;
        v32[3] = v19;
        v32[4] = v20;
        v32[5] = v21;
        v32[6] = v22;
        v32[7] = v23;
        v32[8] = v24;
        v32[9] = v25;
      }
      while (v7 != v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return (uint64_t)v3;
}

void *specialized static simd_float2x2.getValueArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyMatrix2dArray();
  long long v3 = (void *)v2;
  if (v2)
  {
    long long v18 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter(&v17);

    uint64_t v4 = (float64x2_t *)v17;
    int64_t v5 = *(void *)(v17 + 16);
    if (v5)
    {
      long long v18 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      long long v3 = v18;
      unint64_t v6 = v18[2];
      uint64_t v7 = 2 * v6;
      unint64_t v8 = v4 + 3;
      do
      {
        float64x2_t v9 = v8[-1];
        float64x2_t v10 = *v8;
        long long v18 = v3;
        unint64_t v11 = v3[3];
        unint64_t v12 = v6 + 1;
        if (v6 >= v11 >> 1)
        {
          float64x2_t v15 = v10;
          float64x2_t v16 = v9;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v6 + 1, 1);
          float64x2_t v10 = v15;
          float64x2_t v9 = v16;
          long long v3 = v18;
        }
        v3[2] = v12;
        long long v13 = (float32x2_t *)&v3[v7];
        v13[4] = vcvt_f32_f64(v9);
        v13[5] = vcvt_f32_f64(v10);
        v7 += 2;
        v8 += 2;
        unint64_t v6 = v12;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return v3;
}

void *specialized static simd_float3x3.getValueArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyMatrix3dArray();
  long long v3 = (void *)v2;
  if (v2)
  {
    char v32 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter(&v31);

    uint64_t v4 = (float64x2_t *)v31;
    int64_t v5 = *(void *)(v31 + 16);
    if (v5)
    {
      char v32 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      long long v3 = v32;
      unint64_t v6 = v32[2];
      uint64_t v7 = 6 * v6;
      unint64_t v8 = v4 + 6;
      do
      {
        float64x2_t v9 = v8[-4];
        float64x2_t v10 = v8[-3];
        float64x2_t v12 = v8[-2];
        float64x2_t v11 = v8[-1];
        float64x2_t v14 = *v8;
        float64x2_t v13 = v8[1];
        char v32 = v3;
        unint64_t v15 = v3[3];
        unint64_t v16 = v6 + 1;
        if (v6 >= v15 >> 1)
        {
          float64x2_t v29 = v14;
          float64_t v30 = v13.f64[0];
          float64x2_t v27 = v12;
          float64_t v28 = v11.f64[0];
          float64x2_t v25 = v9;
          float64_t v26 = v10.f64[0];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v6 + 1, 1);
          float64x2_t v9 = v25;
          v10.f64[0] = v26;
          float64x2_t v12 = v27;
          v11.f64[0] = v28;
          float64x2_t v14 = v29;
          v13.f64[0] = v30;
          long long v3 = v32;
        }
        *(float32x2_t *)&long long v17 = vcvt_f32_f64(v9);
        *(float *)&unsigned int v18 = v10.f64[0];
        *((void *)&v17 + 1) = v18;
        *(float32x2_t *)&long long v19 = vcvt_f32_f64(v12);
        *(float *)&unsigned int v20 = v11.f64[0];
        *((void *)&v19 + 1) = v20;
        *(float32x2_t *)&long long v21 = vcvt_f32_f64(v14);
        *(float *)&unsigned int v22 = v13.f64[0];
        *((void *)&v21 + 1) = v22;
        v3[2] = v16;
        long long v23 = &v3[v7];
        v23[2] = v17;
        v23[3] = v19;
        long long v23[4] = v21;
        v7 += 6;
        v8 += 6;
        unint64_t v6 = v16;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return v3;
}

void *specialized static simd_float4x4.getValueArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyMatrix4dArray();
  long long v3 = (void *)v2;
  if (v2)
  {
    float64_t v30 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter(&v29);

    uint64_t v4 = (float64x2_t *)v29;
    int64_t v5 = *(void *)(v29 + 16);
    if (v5)
    {
      float64_t v30 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      long long v3 = v30;
      unint64_t v6 = v30[2];
      uint64_t v7 = (v6 << 6) | 0x30;
      unint64_t v8 = v4 + 8;
      do
      {
        float64x2_t v9 = v8[-6];
        float64x2_t v10 = v8[-5];
        float64x2_t v12 = v8[-4];
        float64x2_t v11 = v8[-3];
        float64x2_t v14 = v8[-2];
        float64x2_t v13 = v8[-1];
        float64x2_t v16 = *v8;
        float64x2_t v15 = v8[1];
        float64_t v30 = v3;
        unint64_t v17 = v3[3];
        unint64_t v18 = v6 + 1;
        if (v6 >= v17 >> 1)
        {
          float64x2_t v28 = v15;
          float64x2_t v26 = v11;
          float64x2_t v27 = v13;
          float64x2_t v24 = v10;
          float64x2_t v25 = v16;
          float64x2_t v22 = v12;
          float64x2_t v23 = v14;
          float64x2_t v21 = v9;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v6 + 1, 1);
          float64x2_t v9 = v21;
          float64x2_t v12 = v22;
          float64x2_t v14 = v23;
          float64x2_t v10 = v24;
          float64x2_t v16 = v25;
          float64x2_t v11 = v26;
          float64x2_t v13 = v27;
          float64x2_t v15 = v28;
          long long v3 = v30;
        }
        v3[2] = v18;
        long long v19 = (float32x4_t *)((char *)v3 + v7);
        v19[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
        *long long v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
        v19[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v13);
        void v19[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v15);
        v7 += 64;
        v8 += 8;
        unint64_t v6 = v18;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return v3;
}

void *specialized static Int8.getValueArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyInt32Array();
  long long v3 = (void *)v2;
  if (v2)
  {
    float64x2_t v12 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asInt32Array.getter(MEMORY[0x263F37D18], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v11);

    uint64_t v4 = v11;
    int64_t v5 = *(void *)(v11 + 16);
    if (v5)
    {
      float64x2_t v12 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      uint64_t v6 = 0;
      long long v3 = v12;
      uint64_t v7 = v12[2];
      do
      {
        int v8 = *(_DWORD *)(v4 + 4 * v6 + 32);
        float64x2_t v12 = v3;
        unint64_t v9 = v3[3];
        if (v7 + v6 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + v6 + 1, 1);
          long long v3 = v12;
        }
        v3[2] = v7 + v6 + 1;
        *((unsigned char *)v3 + v7 + v6++ + 32) = v8;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return v3;
}

void *specialized static Int.getValue2ArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyInt2Array();
  long long v3 = (void *)v2;
  if (v2)
  {
    float64x2_t v13 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asInt2Array.getter(&v12);

    uint64_t v4 = v12;
    int64_t v5 = *(void *)(v12 + 16);
    if (v5)
    {
      float64x2_t v13 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      uint64_t v6 = 0;
      long long v3 = v13;
      unint64_t v7 = v13[2];
      do
      {
        uint64_t v8 = *(void *)(v4 + 8 * v6 + 32);
        float64x2_t v13 = v3;
        unint64_t v9 = v3[3];
        if (v7 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + 1, 1);
          long long v3 = v13;
        }
        ++v6;
        *(void *)&long long v10 = (int)v8;
        *((void *)&v10 + 1) = SHIDWORD(v8);
        v3[2] = v7 + 1;
        *(_OWORD *)&v3[2 * v7++ + 4] = v10;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return v3;
}

void *specialized static Int.getValue3ArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyInt3Array();
  long long v3 = (void *)v2;
  if (v2)
  {
    float64x2_t v15 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asInt3Array.getter(MEMORY[0x263F37D10], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

    uint64_t v4 = v14;
    int64_t v5 = *(void *)(v14 + 16);
    if (v5)
    {
      float64x2_t v15 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      uint64_t v6 = 0;
      long long v3 = v15;
      int64_t v7 = v15[2] + 1;
      do
      {
        long long v8 = *(_OWORD *)(v4 + 16 * v6 + 32);
        float64x2_t v15 = v3;
        unint64_t v9 = v3[3];
        if (v7 - 1 >= v9 >> 1)
        {
          long long v13 = v8;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7, 1);
          long long v8 = v13;
          long long v3 = v15;
        }
        ++v6;
        *(void *)&long long v10 = (int)v8;
        *((void *)&v10 + 1) = SDWORD1(v8);
        v3[2] = v7;
        uint64_t v11 = &v3[4 * v7];
        _OWORD *v11 = v10;
        v11[1] = (unint64_t)SDWORD2(v8);
        ++v7;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return v3;
}

void *specialized static Int.getValue4ArrayOpt(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = RIOPxrVtValueCopyInt4Array();
  long long v3 = (void *)v2;
  if (v2)
  {
    float64x2_t v16 = (void *)v2;
    closure #1 in RIOPxrVtValueRef.asInt3Array.getter(MEMORY[0x263F37D20], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v15);

    uint64_t v4 = v15;
    int64_t v5 = *(void *)(v15 + 16);
    if (v5)
    {
      float64x2_t v16 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      uint64_t v6 = 0;
      long long v3 = v16;
      int64_t v7 = v16[2] + 1;
      do
      {
        long long v8 = *(_OWORD *)(v4 + 16 * v6 + 32);
        float64x2_t v16 = v3;
        unint64_t v9 = v3[3];
        if (v7 - 1 >= v9 >> 1)
        {
          long long v14 = v8;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7, 1);
          long long v8 = v14;
          long long v3 = v16;
        }
        ++v6;
        *(void *)&long long v10 = (int)v8;
        *((void *)&v10 + 1) = SDWORD1(v8);
        long long v11 = v10;
        *(void *)&long long v10 = SDWORD2(v8);
        *((void *)&v10 + 1) = SHIDWORD(v8);
        v3[2] = v7;
        uint64_t v12 = &v3[4 * v7];
        *uint64_t v12 = v11;
        v12[1] = v10;
        ++v7;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
  }
  return v3;
}

uint64_t specialized static Int16.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(id, void *), uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v9 = RIOPxrUsdAttributeCopyValue();
  if (!v9) {
    return 0;
  }
  long long v10 = (void *)v9;
  uint64_t v11 = a2();
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    uint64_t v22 = v11;
    closure #1 in RIOPxrVtValueRef.asInt32Array.getter(a3, a4, &v21);

    uint64_t v13 = v21;
    uint64_t v14 = *(void *)(v21 + 16);
    if (v14)
    {
      uint64_t v22 = MEMORY[0x263F8EE78];
      a5(0, v14, 0);
      uint64_t v15 = 0;
      uint64_t v16 = v22;
      unint64_t v17 = *(void *)(v22 + 16);
      do
      {
        int v18 = *(_DWORD *)(v13 + 4 * v15 + 32);
        uint64_t v22 = v16;
        unint64_t v19 = *(void *)(v16 + 24);
        if (v17 >= v19 >> 1)
        {
          a5(v19 > 1, v17 + 1, 1);
          uint64_t v16 = v22;
        }
        ++v15;
        *(void *)(v16 + 16) = v17 + 1;
        *(_WORD *)(v16 + 2 * v17++ + 32) = v18;
      }
      while (v14 != v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {

    return 0;
  }
  return v16;
}

uint64_t specialized static simd_float2x2.getValueOpt(from:time:)()
{
  uint64_t result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    unint64_t v1 = (void *)result;
    char Matrix2d = RIOPxrVtValueGetMatrix2d();

    if (Matrix2d) {
      return (uint64_t)vcvt_f32_f64((float64x2_t)0);
    }
    else {
      return 0;
    }
  }
  return result;
}

void specialized static simd_float3x3.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    char Matrix3d = RIOPxrVtValueGetMatrix3d();

    if (Matrix3d)
    {
      char v5 = 0;
      *(float32x2_t *)&long long v6 = vcvt_f32_f64((float64x2_t)0);
      *((float *)&v6 + 2) = 0.0;
      HIDWORD(v6) = 0;
      *(void *)&long long v7 = v6;
      *((float *)&v7 + 2) = 0.0;
      HIDWORD(v7) = 0;
      *(void *)&long long v8 = v6;
      *((float *)&v8 + 2) = 0.0;
      HIDWORD(v8) = 0;
    }
    else
    {
      char v5 = 1;
      long long v7 = 0uLL;
      long long v8 = 0uLL;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v6 = 0uLL;
    char v5 = 1;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
  }
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 48) = v5;
}

void specialized static simd_float4x4.getValueOpt(from:time:)(float32x4_t *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    long long v3 = (void *)v2;
    char Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      char v5 = 0;
      float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), (float64x2_t)0);
      float32x4_t v7 = v6;
      float32x4_t v8 = v6;
      float32x4_t v9 = v6;
    }
    else
    {
      char v5 = 1;
      float32x4_t v7 = 0uLL;
      float32x4_t v8 = 0uLL;
      float32x4_t v9 = 0uLL;
      float32x4_t v6 = 0uLL;
    }
  }
  else
  {
    float32x4_t v6 = 0uLL;
    char v5 = 1;
    float32x4_t v7 = 0uLL;
    float32x4_t v8 = 0uLL;
    float32x4_t v9 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4].i8[0] = v5;
}

uint64_t specialized static Half.vtValue(from:)(uint64_t result)
{
  unint64_t v1 = *(void *)(*(void *)result + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >= 3) {
    return RIOPxrVtValueCreateWithHalf3();
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  unint64_t v1;

  unint64_t v1 = *(void *)(*(void *)result + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v1 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 != 3) {
    return RIOPxrVtValueCreateWithHalf4();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized static Half.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 4;
      RIOPxrVtValueCreateWithHalf();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithHalfArray();

  return v5;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    while (1)
    {
      uint64_t v5 = *(void *)(*(void *)v4 + 16);
      if (!v5) {
        break;
      }
      if (v5 == 1) {
        goto LABEL_8;
      }
      RIOPxrVtValueCreateWithHalf2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      v4 += 8;
      if (!--v1) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
  else
  {
LABEL_6:
    type metadata accessor for RIOPxrVtValueRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    float32x4_t v7 = RIOPxrVtValueCreateWithHalf2Array();

    return v7;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    while (1)
    {
      uint64_t v5 = *(void *)(*(void *)v4 + 16);
      if (!v5) {
        break;
      }
      if (v5 == 1) {
        goto LABEL_9;
      }
      if (v5 < 3) {
        goto LABEL_10;
      }
      RIOPxrVtValueCreateWithHalf3();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      v4 += 8;
      if (!--v1) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_7:
    type metadata accessor for RIOPxrVtValueRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    float32x4_t v7 = RIOPxrVtValueCreateWithHalf3Array();

    return v7;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    while (1)
    {
      uint64_t v5 = *(void *)(*(void *)v4 + 16);
      if (!v5) {
        break;
      }
      if (v5 == 1) {
        goto LABEL_10;
      }
      if (v5 < 3) {
        goto LABEL_11;
      }
      if (v5 == 3) {
        goto LABEL_12;
      }
      RIOPxrVtValueCreateWithHalf4();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      v4 += 8;
      if (!--v1) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_8:
    type metadata accessor for RIOPxrVtValueRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    float32x4_t v7 = RIOPxrVtValueCreateWithHalf4Array();

    return v7;
  }
  return result;
}

uint64_t specialized static Frame4D.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 128;
      RIOPxrVtValueCreateWithMatrix4d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithMatrix4dArray();

  return v5;
}

uint64_t specialized static Bool.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      ++v3;
      RIOPxrVtValueCreateWithBool();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithBoolArray();

  return v5;
}

uint64_t specialized static Double.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      RIOPxrVtValueCreateWithDouble();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithDoubleArray();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithDouble2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithDouble2Array();

  return v5;
}

uint64_t specialized static Float.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 4;
      RIOPxrVtValueCreateWithFloat();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithFloatArray();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      RIOPxrVtValueCreateWithFloat2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithFloat2Array();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithFloat3();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithFloat3Array();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithFloat4();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithFloat4Array();

  return v5;
}

uint64_t specialized static Int.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (int64_t *)(a1 + 32);
    while (1)
    {
      int64_t v5 = *v3++;
      uint64_t result = v5;
      if (v5 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (result > 0x7FFFFFFF) {
        goto LABEL_8;
      }
      RIOPxrVtValueCreateWithInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v1) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
  else
  {
LABEL_6:
    type metadata accessor for RIOPxrVtValueRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = RIOPxrVtValueCreateWithInt32Array();

    return v7;
  }
  return result;
}

{
  uint64_t v1;
  const float *v3;
  Class isa;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (const float *)(a1 + 32);
    do
    {
      vld2_f32(v3);
      v3 += 4;
      RIOPxrVtValueCreateWithInt2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  int64_t v5 = RIOPxrVtValueCreateWithInt2Array();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 32;
      RIOPxrVtValueCreateWithInt3();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  int64_t v5 = RIOPxrVtValueCreateWithInt3Array();

  return v5;
}

{
  uint64_t v1;
  const float *v3;
  Class isa;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (const float *)(a1 + 32);
    do
    {
      vld2q_f32(v3);
      v3 += 8;
      RIOPxrVtValueCreateWithInt4();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  int64_t v5 = RIOPxrVtValueCreateWithInt4Array();

  return v5;
}

uint64_t specialized static simd_quatd.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 32;
      RIOPxrVtValueCreateWithQuatd();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithQuatdArray();

  return v5;
}

uint64_t specialized static simd_quatf.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithQuatf();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithQuatfArray();

  return v5;
}

uint64_t specialized static simd_float2x2.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 40;
    do
    {
      RIOPxrVtValueCreateWithMatrix2f();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 16;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithMatrix2dArray();

  return v5;
}

uint64_t specialized static simd_float3x3.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 64;
    do
    {
      RIOPxrVtValueCreateWithMatrix3f();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 48;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithMatrix3dArray();

  return v5;
}

uint64_t specialized static simd_float4x4.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 80;
    do
    {
      RIOPxrVtValueCreateWithMatrix4f();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 64;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithMatrix4dArray();

  return v5;
}

uint64_t specialized static simd_double2x2.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 48;
    do
    {
      RIOPxrVtValueCreateWithMatrix2d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithMatrix2dArray();

  return v5;
}

uint64_t specialized static simd_double3x3.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 96;
    do
    {
      v3 += 96;
      RIOPxrVtValueCreateWithMatrix3d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithMatrix3dArray();

  return v5;
}

uint64_t specialized static simd_double4x4.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 128;
    do
    {
      v3 += 128;
      RIOPxrVtValueCreateWithMatrix4d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithMatrix4dArray();

  return v5;
}

uint64_t specialized static UInt.vtValue(from:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    goto LABEL_7;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!HIDWORD(a1[4]))
  {
    RIOPxrVtValueCreateWithUInt32();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v3 = v1 - 1;
    if (v1 != 1)
    {
      uint64_t v4 = a1 + 5;
      do
      {
        unint64_t v5 = *v4++;
        if (HIDWORD(v5)) {
          goto LABEL_8;
        }
        RIOPxrVtValueCreateWithUInt32();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (--v3);
    }
LABEL_7:
    type metadata accessor for RIOPxrVtValueRef(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = RIOPxrVtValueCreateWithUInt32Array();

    return v7;
  }
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Int8.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      ++v3;
      RIOPxrVtValueCreateWithInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithInt32Array();

  return v5;
}

uint64_t specialized static Int16.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 2;
      RIOPxrVtValueCreateWithInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithInt32Array();

  return v5;
}

uint64_t specialized static Int32.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      RIOPxrVtValueCreateWithInt2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithInt2Array();

  return v5;
}

uint64_t specialized static Double.vtValue(from:)(uint64_t a1, uint64_t (*a2)(Class), void (*a3)(_OWORD *))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v7 = (long long *)(a1 + 32);
    do
    {
      long long v8 = *v7;
      long long v9 = v7[1];
      v7 += 2;
      v13[0] = v8;
      v13[1] = v9;
      a3(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2(isa);

  return v11;
}

uint64_t specialized static Int32.vtValue(from:)(__n128 *a1, uint64_t (*a2)(Class), void (*a3)(uint64_t, __n128))
{
  uint64_t v4 = a1[1].n128_i64[0];
  if (v4)
  {
    uint64_t v7 = specialized ContiguousArray.reserveCapacity(_:)();
    long long v8 = a1 + 2;
    do
    {
      __n128 v9 = *v8++;
      a3(v7, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v7 = specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2(isa);

  return v11;
}

uint64_t specialized static UInt8.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      ++v3;
      RIOPxrVtValueCreateWithUInt8();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithUInt8Array();

  return v5;
}

uint64_t specialized static UInt16.vtValue(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 2;
      RIOPxrVtValueCreateWithUInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = RIOPxrVtValueCreateWithUInt32Array();

  return v5;
}

uint64_t specialized static Int32.vtValue(from:)(uint64_t a1, uint64_t (*a2)(Class), void (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v7 = (unsigned int *)(a1 + 32);
    do
    {
      unsigned int v8 = *v7++;
      a3(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2(isa);

  return v10;
}

uint64_t specialized static Int64.vtValue(from:)(uint64_t a1, uint64_t (*a2)(Class), void (*a3)(uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v7 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v8 = *v7++;
      a3(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2(isa);

  return v10;
}

uint64_t specialized static Half.setValue3(_:to:time:)(uint64_t result)
{
  unint64_t v1 = *(void *)(*(void *)result + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >= 3)
  {
    uint64_t v2 = (void *)RIOPxrVtValueCreateWithHalf3();
    uint64_t v3 = RIOPxrUsdAttributeSetValue();

    return v3;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized static Half.setValue2(_:to:time:)(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)result + 16);
  if (v1)
  {
    if (v1 != 1)
    {
      uint64_t v2 = (void *)RIOPxrVtValueCreateWithHalf2();
      uint64_t v3 = RIOPxrUsdAttributeSetValue();

      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double specialized static Int.getValue3(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (uint64_t v1 = (void *)v0, Int3 = RIOPxrVtValueGetInt3(), v1, (Int3 & 1) != 0)) {
    return 0.0;
  }
  else {
    return 0.0;
  }
}

double specialized static Int.getValue4(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (uint64_t v1 = (void *)v0, Int4 = RIOPxrVtValueGetInt4(), v1, (Int4 & 1) != 0)) {
    return 0.0;
  }
  else {
    return 0.0;
  }
}

double specialized static Int.getValue2(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  double result = 0.0;
  if (v0)
  {
    uint64_t v2 = (void *)v0;
    RIOPxrVtValueGetInt2();

    return 0.0;
  }
  return result;
}

double specialized static simd_float2x2.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  double v1 = 0.0;
  if (v0)
  {
    uint64_t v2 = (void *)v0;
    char Matrix2d = RIOPxrVtValueGetMatrix2d();

    if (Matrix2d) {
      return COERCE_DOUBLE(vcvt_f32_f64((float64x2_t)0));
    }
  }
  return v1;
}

void specialized static simd_float3x3.getValue(from:time:)(_OWORD *a1@<X8>)
{
  uint64_t v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    char Matrix3d = RIOPxrVtValueGetMatrix3d();

    if (Matrix3d)
    {
      *(float32x2_t *)&long long v5 = vcvt_f32_f64((float64x2_t)0);
      *((float *)&v5 + 2) = 0.0;
      HIDWORD(v5) = 0;
      *(void *)&long long v6 = v5;
      *((float *)&v6 + 2) = 0.0;
      HIDWORD(v6) = 0;
      *(void *)&long long v7 = v5;
      *((float *)&v7 + 2) = 0.0;
      HIDWORD(v7) = 0;
    }
    else
    {
      long long v6 = 0uLL;
      long long v7 = 0uLL;
      long long v5 = 0uLL;
    }
  }
  else
  {
    long long v5 = 0uLL;
    long long v6 = 0uLL;
    long long v7 = 0uLL;
  }
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
}

double specialized static simd_float4x4.getValue(from:time:)()
{
  uint64_t v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0) {
    return 0.0;
  }
  double v1 = (void *)v0;
  char Matrix4d = RIOPxrVtValueGetMatrix4d();

  if ((Matrix4d & 1) == 0) {
    return 0.0;
  }
  *(void *)&double result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), (float64x2_t)0).u64[0];
  return result;
}

double _s9RealityIO7Frame4DVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t _s9RealityIO7Frame4DVSgWOi_(uint64_t result)
{
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t partial apply for closure #1 in static TexCoord2<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2, MEMORY[0x263F8E670], (uint64_t (*)(char *, uint64_t, uint64_t))TexCoord2.init(_:));
}

uint64_t partial apply for closure #1 in static TexCoord3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2, MEMORY[0x263F8E698], (uint64_t (*)(char *, uint64_t, uint64_t))TexCoord3.init(_:));
}

uint64_t partial apply for closure #1 in static Color3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static Color3<>.getValueOpt(from:time:)(a1, v2[2], v2[3], v2[4], a2, MEMORY[0x263F8E698], (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))Color3.init(_:));
}

uint64_t partial apply for closure #1 in static Point3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2, MEMORY[0x263F8E698], (uint64_t (*)(char *, uint64_t, uint64_t))Point3.init(_:));
}

uint64_t partial apply for closure #1 in static Vector3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2, MEMORY[0x263F8E698], (uint64_t (*)(char *, uint64_t, uint64_t))Vector3.init(_:));
}

uint64_t partial apply for closure #1 in static Normal3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2, MEMORY[0x263F8E698], (uint64_t (*)(char *, uint64_t, uint64_t))Normal3.init(_:));
}

uint64_t partial apply for closure #1 in static Color4<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static Color3<>.getValueOpt(from:time:)(a1, v2[2], v2[3], v2[4], a2, MEMORY[0x263F8E6F0], (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))Color4.init(_:));
}

uint64_t partial apply for closure #3 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Normal3.x.getter, (void (*)(uint64_t))Normal3.y.getter, (void (*)(uint64_t))Normal3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Normal3.x.getter, (void (*)(uint64_t))Normal3.y.getter, (void (*)(uint64_t))Normal3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Normal3.x.getter, (void (*)(uint64_t))Normal3.y.getter, (void (*)(uint64_t))Normal3.z.getter, a2);
}

uint64_t partial apply for closure #3 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Color3<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #2 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Color3<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #1 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Color3<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #3 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Color4<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #2 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Color4<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #1 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Color4<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #3 in static Vector3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Vector3.x.getter, (void (*)(uint64_t))Vector3.y.getter, (void (*)(uint64_t))Vector3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static Vector3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Vector3.x.getter, (void (*)(uint64_t))Vector3.y.getter, (void (*)(uint64_t))Vector3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static Vector3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Vector3.x.getter, (void (*)(uint64_t))Vector3.y.getter, (void (*)(uint64_t))Vector3.z.getter, a2);
}

uint64_t partial apply for closure #3 in static Point3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Point3.x.getter, (void (*)(uint64_t))Point3.y.getter, (void (*)(uint64_t))Point3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static Point3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Point3.x.getter, (void (*)(uint64_t))Point3.y.getter, (void (*)(uint64_t))Point3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static Point3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Point3.x.getter, (void (*)(uint64_t))Point3.y.getter, (void (*)(uint64_t))Point3.z.getter, a2);
}

uint64_t partial apply for closure #3 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static TexCoord2<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #2 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static TexCoord2<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #1 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static TexCoord2<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #3 in static TexCoord3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))TexCoord3.x.getter, (void (*)(uint64_t))TexCoord3.y.getter, (void (*)(uint64_t))TexCoord3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static TexCoord3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))TexCoord3.x.getter, (void (*)(uint64_t))TexCoord3.y.getter, (void (*)(uint64_t))TexCoord3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static TexCoord3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))TexCoord3.x.getter, (void (*)(uint64_t))TexCoord3.y.getter, (void (*)(uint64_t))TexCoord3.z.getter, a2);
}

unint64_t lazy protocol witness table accessor for type Half and conformance Half()
{
  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Half(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Half and conformance Half();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Float(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Float and conformance Float();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Double(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Double and conformance Double();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Int(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Int and conformance Int();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Int32(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Int32 and conformance Int32();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static UsdAttributeValue.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static UsdAttributeValue.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValue.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValue.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueArrayElement.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueArrayElement.valueArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2Element.setValue2(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2Element.getValue2(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2Element.value2TypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD3Element.setValue3(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD3Element.getValue3(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD3Element.value3TypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD4Element.setValue4(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD4Element.getValue4(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD4Element.value4TypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of UsdVtValue.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static UsdVtValueArrayElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static UsdVtValueSIMD2Element.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdVtValueSIMD3Element.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdVtValueSIMD4Element.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdVtValueSIMD2ArrayElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdVtValueSIMD3ArrayElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdVtValueSIMD4ArrayElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdVtValueQuatElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = type metadata accessor for __RKEntityTriggerSpecification();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  __n128 v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a2, v10);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F163F8], v6);
  unint64_t v11 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, v11);
    *a3 = v11;
  }
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v11);
    *a3 = v11;
  }
  *(void *)(v11 + 16) = v14 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v14, v9, v6);
  Inputs.performBlockLaterWithEntity(_:_:)(a1, (uint64_t)closure #1 in closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:), 0);
}

void closure #1 in closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionComponent?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Entity.ComponentSet();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.components.getter();
  uint64_t v7 = type metadata accessor for CollisionComponent();
  Entity.ComponentSet.subscript.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v2, 1, v7);
  outlined destroy of CollisionComponent?((uint64_t)v2);
  if (v8 == 1) {
    Entity.generateCollisionShapes(recursive:)(1);
  }
}

uint64_t outlined destroy of CollisionComponent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t one-time initialization function for anchoringComponent()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.anchoringComponent = result;
  return result;
}

id one-time initialization function for alignmentPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.alignmentPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for boundsPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.boundsPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for classificationPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.classificationPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for resourcePathPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.resourcePathPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for physicalWidthPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.physicalWidthPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for transformPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.transformPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for typePropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.typePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for isRequiredPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.isRequiredPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for scaleFactorPropertyName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.scaleFactorPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for descriptorName()
{
  if (String.count.getter() < 1) {
    id result = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id result = (id)RIOPxrTfTokenCreateWithCString();
  }
  static AnchoringComponentBuilder.descriptorName = (uint64_t)result;
  return result;
}

uint64_t AnchoringComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  _OWORD v7[2] = a1;
  int v8 = v1;
  uint64_t v9 = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in AnchoringComponentBuilder.run(inputs:);
  *(void *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_11;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in AnchoringComponentBuilder.run(inputs:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  uint64_t v3 = Inputs.prim.getter();
  uint64_t v4 = (void *)RIOPxrUsdObjectCopyName();
  uint64_t v5 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v134 = v6;

  unint64_t v7 = Prim.children.getter();
  unint64_t v8 = v7;
  if (v7 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      int v130 = a2;
      uint64_t v132 = v3;
      type metadata accessor for RIOPxrTfTokenRef(0);
      a2 = (unsigned char *)(v8 & 0xC000000000000001);
      uint64_t v3 = 4;
      while (1)
      {
        uint64_t v10 = v3 - 4;
        if (a2)
        {
          uint64_t v11 = MEMORY[0x23ECBA630](v3 - 4, v8);
          uint64_t v12 = v3 - 3;
          if (__OFADD__(v10, 1)) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v11 = swift_retain();
          uint64_t v12 = v3 - 3;
          if (__OFADD__(v10, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        uint64_t v13 = v11;
        unint64_t v14 = (void *)RIOPxrUsdObjectCopyName();
        if (one-time initialization token for descriptorName != -1) {
          swift_once();
        }
        uint64_t v15 = (void *)static AnchoringComponentBuilder.descriptorName;
        lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
        id v16 = v15;
        char v17 = static _CFObject.== infix(_:_:)();

        if (v17)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v3 = v132;
          uint64_t v18 = v13;
          a2 = v130;
          goto LABEL_18;
        }
        swift_release();
        ++v3;
        if (v12 == v9)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v18 = 0;
          uint64_t v3 = v132;
          a2 = v130;
          goto LABEL_18;
        }
      }
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v18 = 0;
LABEL_18:
  if (one-time initialization token for infoID != -1) {
    swift_once();
  }
  id v19 = (id)static AnchoringComponentBuilder.infoID;
  if ((RIOPxrUsdPrimHasAttribute() & 1) == 0)
  {
    swift_bridgeObjectRelease();

LABEL_45:
    AnchoringComponentBuilder.clear(inputs:)();
    swift_release();
LABEL_46:
    return swift_release();
  }
  unsigned int v20 = (void *)RIOPxrUsdPrimCopyAttribute();
  uint64_t v21 = RIOPxrUsdAttributeCopyValue();
  if (!v21)
  {
    swift_bridgeObjectRelease();

    goto LABEL_45;
  }
  uint64_t v22 = (void *)v21;
  uint64_t v23 = RIOPxrVtValueCopyToken();
  if (!v23)
  {
    swift_bridgeObjectRelease();

    goto LABEL_45;
  }
  float64x2_t v24 = (void *)v23;

  float64x2_t v25 = (void *)RIOPxrTfTokenCopyString();
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (v26 == 0xD000000000000014 && v28 == 0x800000023AAAF250)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
LABEL_30:
  if (!Prim.parent.getter()) {
    goto LABEL_33;
  }
  if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
  {
    if (one-time initialization token for anchoringComponent != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_23AAB24E0;
    long long v38 = (void *)RIOPxrUsdObjectCopyPath();
    long long v39 = (void *)RIOPxrSdfPathCopyString();
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    uint64_t v43 = MEMORY[0x263F8D310];
    *(void *)(v37 + 56) = MEMORY[0x263F8D310];
    unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v37 + 32) = v40;
    *(void *)(v37 + 40) = v42;
    *(void *)(v37 + 96) = v43;
    *(void *)(v37 + 104) = v44;
    *(void *)(v37 + 64) = v44;
    *(void *)(v37 + 72) = v129;
    *(void *)(v37 + 80) = v134;
    os_log(_:dso:log:type:_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  swift_release();
LABEL_33:
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v30 = static EntityBuilder.OutputName;
  uint64_t v31 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v30, v31, &v136);
  if (!*((void *)&v137 + 1))
  {
    outlined destroy of Any?((uint64_t)&v136);
    goto LABEL_53;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    if (one-time initialization token for anchoringComponent != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_23AAB22A0;
    *(void *)(v45 + 56) = MEMORY[0x263F8D310];
    *(void *)(v45 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v45 + 32) = v129;
    *(void *)(v45 + 40) = v134;
    os_log(_:dso:log:type:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((RIOPxrUsdPrimIsActive() & 1) == 0)
  {
    AnchoringComponentBuilder.clear(inputs:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  if (one-time initialization token for typePropertyName != -1) {
    swift_once();
  }
  *(void *)&long long v136 = static AnchoringComponentBuilder.typePropertyName;
  id v32 = (id)static AnchoringComponentBuilder.typePropertyName;
  long long v33 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v18);

  if (!v33 || (long long v34 = (void *)RIOPxrVtValueCopyToken(), v33, !v34))
  {
    if (String.count.getter() < 1) {
      id v35 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v35 = (id)RIOPxrTfTokenCreateWithCString();
    }
    long long v34 = v35;
  }
  uint64_t v133 = v3;
  __AssetRef.__as<A>(_:)();
  REAnchoringComponentGetComponentType();
  uint64_t v46 = REEntityGetOrAddComponentByClass();
  swift_beginAccess();
  id v47 = objc_getAssociatedObject(a2, &static BuilderAssociatedKeys.CoreReference);
  uint64_t result = swift_endAccess();
  if (v47)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v144, &v136);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    RIOBuilderAddComponent();

    if (one-time initialization token for isRequiredPropertyName != -1) {
      swift_once();
    }
    long long v48 = (void *)static AnchoringComponentBuilder.isRequiredPropertyName;
    *(void *)&long long v136 = static AnchoringComponentBuilder.isRequiredPropertyName;
    swift_retain();
    id v49 = v48;
    uint64_t v50 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v133);

    swift_release();
    if (v50)
    {
      LOBYTE(v136) = 0;
      char Bool = RIOPxrVtValueGetBool();

      if (Bool) {
        REAnchoringComponentSetIsRequired();
      }
    }
    if (one-time initialization token for scaleFactorPropertyName != -1) {
      swift_once();
    }
    unint64_t v52 = (void *)static AnchoringComponentBuilder.scaleFactorPropertyName;
    *(void *)&long long v136 = static AnchoringComponentBuilder.scaleFactorPropertyName;
    swift_retain();
    id v53 = v52;
    unint64_t v54 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v133);

    swift_release();
    if (v54)
    {
      LODWORD(v136) = 0;
      char Float = RIOPxrVtValueGetFloat();

      if (Float) {
        REAnchoringComponentSetScaleFactor();
      }
    }
    id v56 = v34;
    if (String.count.getter() < 1) {
      id v57 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v57 = (id)RIOPxrTfTokenCreateWithCString();
    }
    unint64_t v58 = v57;
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
    char v59 = static _CFObject.== infix(_:_:)();

    if (v59) {
      goto LABEL_75;
    }
    if (String.count.getter() < 1) {
      id v60 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v60 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v61 = v60;
    char v62 = static _CFObject.== infix(_:_:)();

    if (v62)
    {

      if (one-time initialization token for transformPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long v136 = static AnchoringComponentBuilder.transformPropertyName;
      id v63 = (id)static AnchoringComponentBuilder.transformPropertyName;
      int v64 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v18);

      if (v64)
      {
        long long v142 = 0u;
        long long v143 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        RIOPxrVtValueGetMatrix4d();
      }
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorTransform();
      goto LABEL_176;
    }
    if (String.count.getter() < 1) {
      id v65 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v65 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v66 = v65;
    char v67 = static _CFObject.== infix(_:_:)();

    if (v67)
    {

      if (one-time initialization token for alignmentPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long v136 = static AnchoringComponentBuilder.alignmentPropertyName;
      id v68 = (id)static AnchoringComponentBuilder.alignmentPropertyName;
      uint64_t v69 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v18);

      if (!v69 || (char v70 = (void *)RIOPxrVtValueCopyToken(), v69, !v70))
      {
        if (String.count.getter() < 1) {
          id v71 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v71 = (id)RIOPxrTfTokenCreateWithCString();
        }
        char v70 = v71;
      }
      id v79 = v70;
      if (String.count.getter() < 1) {
        id v80 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v80 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v81 = v80;
      char v82 = static _CFObject.== infix(_:_:)();

      if (v82)
      {
      }
      else
      {
        if (String.count.getter() < 1) {
          id v83 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v83 = (id)RIOPxrTfTokenCreateWithCString();
        }
        uint64_t v96 = v83;
        static _CFObject.== infix(_:_:)();
      }
      uint64_t v131 = a2;
      if (one-time initialization token for classificationPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long v136 = static AnchoringComponentBuilder.classificationPropertyName;
      id v97 = (id)static AnchoringComponentBuilder.classificationPropertyName;
      uint64_t v98 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v18);

      if (!v98 || (uint64_t v99 = (void *)RIOPxrVtValueCopyToken(), v98, !v99))
      {
        if (String.count.getter() < 1) {
          id v100 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v100 = (id)RIOPxrTfTokenCreateWithCString();
        }
        uint64_t v99 = v100;
      }
      id v101 = v99;
      if (String.count.getter() < 1) {
        id v102 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v102 = (id)RIOPxrTfTokenCreateWithCString();
      }
      __n128 v103 = v102;
      char v104 = static _CFObject.== infix(_:_:)();

      if (v104) {
        goto LABEL_164;
      }
      id v105 = String.count.getter() < 1
           ? (id)RIOPxrTfTokenEmpty()
           : (id)RIOPxrTfTokenCreateWithCString();
      uint64_t v106 = v105;
      char v107 = static _CFObject.== infix(_:_:)();

      if (v107) {
        goto LABEL_164;
      }
      id v108 = String.count.getter() < 1
           ? (id)RIOPxrTfTokenEmpty()
           : (id)RIOPxrTfTokenCreateWithCString();
      uint64_t v111 = v108;
      char v112 = static _CFObject.== infix(_:_:)();

      if ((v112 & 1) != 0
        || (String.count.getter() < 1
          ? (id v113 = (id)RIOPxrTfTokenEmpty())
          : (id v113 = (id)RIOPxrTfTokenCreateWithCString()),
            uint64_t v121 = v113,
            char v122 = static _CFObject.== infix(_:_:)(),
            v121,
            (v122 & 1) != 0))
      {
LABEL_164:
      }
      else
      {
        if (String.count.getter() < 1) {
          id v123 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v123 = (id)RIOPxrTfTokenCreateWithCString();
        }
        uint64_t v124 = v123;
        static _CFObject.== infix(_:_:)();
      }
      if (one-time initialization token for boundsPropertyName != -1) {
        swift_once();
      }
      *(void *)&long long v136 = static AnchoringComponentBuilder.boundsPropertyName;
      id v125 = (id)static AnchoringComponentBuilder.boundsPropertyName;
      unint64_t v126 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v18);

      if (v126)
      {
        *(void *)&long long v136 = 0;
        RIOPxrVtValueGetFloat2();
      }
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorAlignment();
      REAnchoringComponentSetDescriptorClassification();
      REAnchoringComponentSetDescriptorBounds();

      goto LABEL_174;
    }
    if (String.count.getter() < 1) {
      id v72 = (id)RIOPxrTfTokenEmpty();
    }
    else {
      id v72 = (id)RIOPxrTfTokenCreateWithCString();
    }
    uint64_t v73 = v72;
    char v74 = static _CFObject.== infix(_:_:)();

    if ((v74 & 1) == 0)
    {
      if (String.count.getter() < 1) {
        id v78 = (id)RIOPxrTfTokenEmpty();
      }
      else {
        id v78 = (id)RIOPxrTfTokenCreateWithCString();
      }
      uint64_t v93 = v78;
      char v94 = static _CFObject.== infix(_:_:)();

      if ((v94 & 1) == 0)
      {
        if (String.count.getter() < 1) {
          id v95 = (id)RIOPxrTfTokenEmpty();
        }
        else {
          id v95 = (id)RIOPxrTfTokenCreateWithCString();
        }
        uint64_t v109 = v95;
        char v110 = static _CFObject.== infix(_:_:)();

        if ((v110 & 1) == 0) {
          goto LABEL_177;
        }
        goto LABEL_76;
      }
LABEL_75:

LABEL_76:
      REAnchoringComponentSetDescriptorType();
LABEL_176:
      MEMORY[0x23ECBAEA0](v46);
LABEL_177:

      swift_release();
      swift_release();
      uint64_t result = swift_release();
      a2[17] = 1;
      return result;
    }

    if (one-time initialization token for resourcePathPropertyName != -1) {
      swift_once();
    }
    *(void *)&long long v136 = static AnchoringComponentBuilder.resourcePathPropertyName;
    id v75 = (id)static AnchoringComponentBuilder.resourcePathPropertyName;
    uint64_t v76 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v18);

    if (v76)
    {
      uint64_t v77 = (void *)RIOPxrVtValueCopyAssetPath();
    }
    else
    {
      uint64_t v77 = 0;
    }
    if (one-time initialization token for physicalWidthPropertyName != -1) {
      swift_once();
    }
    *(void *)&long long v136 = static AnchoringComponentBuilder.physicalWidthPropertyName;
    id v84 = (id)static AnchoringComponentBuilder.physicalWidthPropertyName;
    int8x16_t v85 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v18);

    if (v85)
    {
      LODWORD(v136) = 0;
      RIOPxrVtValueGetFloat();
    }
    REAnchoringComponentSetDescriptorType();
    if (!v77) {
      goto LABEL_176;
    }
    uint64_t v131 = a2;
    id v79 = v77;
    int8x16_t v86 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v89 = v88;

    String.utf8CString.getter();
    long long v90 = (void *)RIOPxrArAssetCreate();
    swift_release();
    if (!v90)
    {
      swift_bridgeObjectRelease();

LABEL_174:
      goto LABEL_175;
    }
    uint64_t CFDataNoCopy = RIOPxrArAssetCreateCFDataNoCopy();
    if (!CFDataNoCopy
      || (uint64_t v92 = (void *)CFDataNoCopy,
          long long v136 = xmmword_23AAB5010,
          static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
          v92,
          *((void *)&v136 + 1) >> 60 == 15))
    {

      swift_bridgeObjectRelease();
LABEL_175:
      a2 = v131;
      goto LABEL_176;
    }
    long long v114 = v136;
    CGImageRef v128 = specialized static CGImageRef.image(with:)(v136, *((unint64_t *)&v136 + 1));
    if (!v128)
    {
      swift_bridgeObjectRelease();

      outlined consume of Data?(v114, *((unint64_t *)&v114 + 1));
      goto LABEL_175;
    }
    uint64_t v127 = v90;
    type metadata accessor for __USDARReferenceProvidingPlugin();
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.assetService.getter();
    swift_release();
    static __USDARReferenceProvidingPlugin.instance(for:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v136);
    *(void *)&long long v136 = v87;
    *((void *)&v136 + 1) = v89;
    *(void *)&long long v144 = 91;
    *((void *)&v144 + 1) = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v115 = (void *)StringProtocol.components<A>(separatedBy:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v115[2])
    {
      uint64_t v117 = v115[4];
      uint64_t v116 = v115[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v136 = v117;
      *((void *)&v136 + 1) = v116;
      *(void *)&long long v144 = 47;
      *((void *)&v144 + 1) = 0xE100000000000000;
      uint64_t v118 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      if (*(void *)(v118 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        dispatch thunk of __USDARReferenceProvidingPlugin.createSchemePrefix(with:)();
        swift_bridgeObjectRelease();
        id v119 = v79;
        uint64_t v120 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REAnchoringComponentSetDescriptorResourceGroup();
        swift_release();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REAnchoringComponentSetDescriptorResourceName();
        swift_release();
        swift_release();

        outlined consume of Data?(v114, *((unint64_t *)&v114 + 1));
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();

        outlined consume of Data?(v114, *((unint64_t *)&v114 + 1));
      }

      goto LABEL_175;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnchoringComponentBuilder.clear(inputs:)()
{
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v1, &v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 17) & 1) == 0) {
    return swift_release();
  }
  __AssetRef.__as<A>(_:)();
  REAnchoringComponentGetComponentType();
  REEntityRemoveComponentByClass();
  uint64_t result = swift_release();
  *(unsigned char *)(v0 + 17) = 0;
  return result;
}

uint64_t AnchoringComponentBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnchoringComponentBuilder()
{
  return self;
}

uint64_t specialized AnchoringComponentBuilder.stageSubscription.getter()
{
  if (one-time initialization token for realityKitComponentTypeName != -1) {
    swift_once();
  }
  unint64_t v9 = static AnchoringComponentBuilder.realityKitComponentTypeName;
  id v0 = (id)static AnchoringComponentBuilder.realityKitComponentTypeName;
  uint64_t v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB22C0;
  *(void *)(inited + 32) = v1;
  unint64_t v9 = inited;
  specialized Array._endMutation()();
  unint64_t v3 = v9;
  swift_retain();
  uint64_t v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  uint64_t v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x263F8EE88], v4, 0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_23AAB22C0;
  *(void *)(v6 + 32) = v5;
  unint64_t v9 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int specialized AnchoringComponentBuilder.inputDescriptors()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23AAB24E0;
  if (one-time initialization token for OutputName != -1) {
    swift_once();
  }
  uint64_t v2 = static EntityBuilder.OutputName;
  uint64_t v1 = *(void *)algn_268A4BAA8;
  uint64_t v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = static EntityBuilder.OutputIdentifier;
  uint64_t v4 = qword_268A584E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(unsigned char *)(inited + 80) = 112;
  swift_bridgeObjectRetain();
  if (String.count.getter() < 1) {
    id v6 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v6 = (id)RIOPxrTfTokenCreateWithCString();
  }
  *(void *)(inited + 88) = 0xD000000000000010;
  *(void *)(inited + 96) = 0x800000023AAAF230;
  *(void *)(inited + 104) = 0xD000000000000020;
  *(void *)(inited + 112) = 0x800000023AAACFC0;
  *(void *)(inited + 120) = v6;
  *(void *)(inited + 128) = 1;
  *(unsigned char *)(inited + 136) = 32;
  Swift::Int v7 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v7;
}

uint64_t partial apply for closure #1 in AnchoringComponentBuilder.run(inputs:)()
{
  return closure #1 in AnchoringComponentBuilder.run(inputs:)(*(void *)(v0 + 16), *(unsigned char **)(v0 + 24));
}

uint64_t sub_23AA26744()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  uint64_t v2 = RIOPxrUsdPrimCopyAttribute();
  type metadata accessor for AnyAttribute();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = v2;
  uint64_t EmptyValue = RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue) {
    uint64_t EmptyValue = RIOPxrVtValueCreateEmptyValue();
  }
  outlined consume of Result<AnyAttribute, Object.Error>(v3, 0);
  return EmptyValue;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.AtEnd.getter()
{
  return 0xFFFFFFFFLL;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.Same.getter()
{
  return 4294967294;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.description.getter()
{
  id v0 = (id)RIOPxrSdfNamespaceEditCopyCurrentPath();
  uint64_t v1 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = v2;
  v3._countAndFlagsBits = 540945696;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  id v4 = (id)RIOPxrSdfNamespaceEditCopyNewPath();
  uint64_t v5 = (void *)RIOPxrSdfPathCopyString();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  RIOPxrSdfNamespaceEditGetIndex();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t SceneDescriptionFoundations.NamespaceEdit.debugDescription.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = SceneDescriptionFoundations.NamespaceEdit.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000010;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.currentPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCopyCurrentPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.newPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCopyNewPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.index.getter()
{
  return RIOPxrSdfNamespaceEditGetIndex();
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCreateEmpty();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.NamespaceEdit.init(currentPath:newPath:index:)(void **a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  id v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = RIOPxrSdfNamespaceEditCreateFromPaths();

  *a3 = v6;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.remove(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCreateRemove();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.rename(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCreateRename();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.reorder(from:at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCreateReorder();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.reparent(from:to:at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCreateReparent();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.reparentAndRename(from:to:with:at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfNamespaceEditCreateReparentAndRename();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Layer.__allocating_init(tag:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_allocObject();
  if (a2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t Anonymous = RIOPxrSdfLayerCreateAnonymous();
  swift_unknownObjectRelease();
  *(void *)(v3 + 16) = Anonymous;
  return v3;
}

uint64_t SceneDescriptionFoundations.Layer.init(tag:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t Anonymous = RIOPxrSdfLayerCreateAnonymous();
  swift_unknownObjectRelease();
  *(void *)(v2 + 16) = Anonymous;
  return v2;
}

uint64_t SceneDescriptionFoundations.Layer.__allocating_init(relativeTo:identifier:)(uint64_t a1)
{
  return SceneDescriptionFoundations.Layer.init(relativeTo:identifier:)(a1);
}

uint64_t SceneDescriptionFoundations.Layer.init(relativeTo:identifier:)(uint64_t a1)
{
  if (a1) {
    id v2 = *(id *)(a1 + 16);
  }
  else {
    id v2 = 0;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t RelativeToLayer = RIOPxrSdfLayerCreateOrFindRelativeToLayer();

  swift_release();
  swift_release();
  if (RelativeToLayer)
  {
    *(void *)(v1 + 16) = RelativeToLayer;
  }
  else
  {
    type metadata accessor for SceneDescriptionFoundations.Layer();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

uint64_t SceneDescriptionFoundations.Layer.deinit()
{
  return v0;
}

uint64_t SceneDescriptionFoundations.Layer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.Layer()
{
  uint64_t v0 = (void *)RIOPxrSdfLayerCopyIdentifier();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t SceneDescriptionFoundations.Layer.description.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfLayerCopyIdentifier();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SceneDescriptionFoundations.Layer()
{
  return SceneDescriptionFoundations.Layer.debugDescription.getter();
}

uint64_t SceneDescriptionFoundations.Layer.debugDescription.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfLayerCopyIdentifier();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x203A726579614C3CLL;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.identifier()()
{
  uint64_t v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x263F377A8]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t SceneDescriptionFoundations.Layer.defaultPrim.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerCopyDefaultPrim();
  *a1 = result;
  return result;
}

void key path setter for SceneDescriptionFoundations.Layer.defaultPrim : SceneDescriptionFoundations.Layer(id *a1)
{
  id v1 = *a1;
  if (RIOPxrTfTokenIsEmpty())
  {

    RIOPxrSdfLayerClearDefaultPrim();
  }
  else
  {
    RIOPxrSdfLayerSetDefaultPrim();
  }
}

void SceneDescriptionFoundations.Layer.defaultPrim.setter(id *a1)
{
  id v1 = *a1;
  if (RIOPxrTfTokenIsEmpty())
  {

    RIOPxrSdfLayerClearDefaultPrim();
  }
  else
  {
    RIOPxrSdfLayerSetDefaultPrim();
  }
}

void (*SceneDescriptionFoundations.Layer.defaultPrim.modify(uint64_t *a1))(void **a1, char a2)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrSdfLayerCopyDefaultPrim();
  return SceneDescriptionFoundations.Layer.defaultPrim.modify;
}

void SceneDescriptionFoundations.Layer.defaultPrim.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    if (RIOPxrTfTokenIsEmpty())
    {

      RIOPxrSdfLayerClearDefaultPrim();
    }
    else
    {
      RIOPxrSdfLayerSetDefaultPrim();
    }
LABEL_10:

    return;
  }
  id v3 = v2;
  if (!RIOPxrTfTokenIsEmpty())
  {
    RIOPxrSdfLayerSetDefaultPrim();
    goto LABEL_10;
  }

  RIOPxrSdfLayerClearDefaultPrim();
}

uint64_t SceneDescriptionFoundations.Layer.autoPlay.getter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  id v2 = (id)RIOPxrSdfLayerGetMetadata();

  if (v2 && (char Bool = RIOPxrVtValueGetBool(), v2, (Bool & 1) != 0)) {
    return 0;
  }
  else {
    return 0;
  }
}

void SceneDescriptionFoundations.Layer.autoPlay.setter()
{
  if (String.count.getter() < 1) {
    id v0 = (id)RIOPxrTfTokenEmpty();
  }
  else {
    id v0 = (id)RIOPxrTfTokenCreateWithCString();
  }
  uint64_t v1 = v0;
  id v2 = (id)RIOPxrVtValueCreateWithBool();
  RIOPxrSdfLayerSetMetadata();
}

void (*SceneDescriptionFoundations.Layer.autoPlay.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = SceneDescriptionFoundations.Layer.autoPlay.getter() & 1;
  return SceneDescriptionFoundations.Layer.autoPlay.modify;
}

void SceneDescriptionFoundations.Layer.autoPlay.modify(uint64_t a1, char a2)
{
  uint64_t v3 = String.count.getter();
  if (a2)
  {
    if (v3 < 1) {
      goto LABEL_6;
    }
LABEL_5:
    id v4 = (id)RIOPxrTfTokenCreateWithCString();
    goto LABEL_7;
  }
  if (v3 >= 1) {
    goto LABEL_5;
  }
LABEL_6:
  id v4 = (id)RIOPxrTfTokenEmpty();
LABEL_7:
  id v6 = v4;
  Swift::String v5 = (void *)RIOPxrVtValueCreateWithBool();
  RIOPxrSdfLayerSetMetadata();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.isEmpty()()
{
  return RIOPxrSdfLayerIsEmpty();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.isAnonymous()()
{
  return RIOPxrSdfLayerIsAnonymous();
}

uint64_t SceneDescriptionFoundations.Layer.transferContent(from:)(uint64_t a1)
{
  return MEMORY[0x270F22220](*(void *)(a1 + 16), *(void *)(v1 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.transferContent(to:)(uint64_t a1)
{
  return MEMORY[0x270F22220](*(void *)(v1 + 16), *(void *)(a1 + 16));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.reload(force:)(Swift::Bool force)
{
  return RIOPxrSdfLayerReload();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.save(force:)(Swift::Bool force)
{
  return RIOPxrSdfLayerSave();
}

uint64_t SceneDescriptionFoundations.Layer.export(to:comment:fileFormatArguments:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, NSURL *a3@<X8>)
{
  URL._bridgeToObjectiveC()(a3);
  id v6 = v5;
  if (!a2)
  {
    v7.super.Class isa = 0;
    if (!a1) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a1) {
LABEL_3:
  }
    String.utf8CString.getter();
LABEL_5:
  uint64_t v8 = RIOPxrSdfLayerExportWithURL();

  swift_unknownObjectRelease();
  return v8;
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.export(to:comment:fileFormatArguments:)(Swift::String to, Swift::String_optional comment, Swift::OpaquePointer_optional fileFormatArguments)
{
  object = comment.value._object;
  if (fileFormatArguments.value._rawValue) {
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v4.super.Class isa = 0;
  }
  String.utf8CString.getter();
  if (object) {
    String.utf8CString.getter();
  }
  char v5 = RIOPxrSdfLayerExportWithFilePath();

  swift_release();
  swift_unknownObjectRelease();
  return v5;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.toString()()
{
  uint64_t v0 = RIOPxrSdfLayerCopyExportString();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  uint64_t v5 = v2;
  id v6 = (void *)v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clear()()
{
  MEMORY[0x270F22008](*(void *)(v0 + 16));
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.comment()()
{
  uint64_t v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x263F37788]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.setComment(to:)(Swift::String to)
{
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.setIdentifier(_:)(Swift::String a1)
{
}

uint64_t SceneDescriptionFoundations.Layer.setComment(to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = String.utf8CString.getter();
  a3(v5, v6 + 32);
  return swift_release();
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.displayName()()
{
  uint64_t v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x263F37790]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.assetName()()
{
  uint64_t v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x263F37780]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.fileExtension()()
{
  uint64_t v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x263F377A0]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.repositoryPath()()
{
  uint64_t v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x263F377C0]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static SceneDescriptionFoundations.Layer.createIdentifier(with:options:)()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  Identifier = (void *)RIOPxrSdfLayerCreateIdentifier();

  swift_release();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.absolutePath(relativeTo:)(Swift::String relativeTo)
{
  String.utf8CString.getter();
  uint64_t v1 = (void *)RIOPxrSdfLayerCopyAbsolutePath();
  swift_release();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.realPath()()
{
  uint64_t v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x263F377B8]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t SceneDescriptionFoundations.Layer.identifier()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)a1(*(void *)(v1 + 16));
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void SceneDescriptionFoundations.Layer.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = RIOPxrSdfLayerCopyCustomLayerDataValue();
  if (v4)
  {
    id v6 = (id)v4;
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    v5(a2, 1, 1, a1);
  }
}

void key path getter for SceneDescriptionFoundations.Layer.subscript<A>(customLayerDataKey:) : <A>SceneDescriptionFoundations.LayerA(id *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 16);
  id v5 = *a1;
  SceneDescriptionFoundations.Layer.subscript.getter(v4, a3);
}

uint64_t key path setter for SceneDescriptionFoundations.Layer.subscript<A>(customLayerDataKey:) : <A>SceneDescriptionFoundations.LayerA(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v7 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x270FA5388](v8);
  Swift::String v11 = (char *)&v16 - v10;
  uint64_t v12 = *a3;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v16 - v10, a1, v9);
  char v17 = v12;
  id v14 = v12;
  return SceneDescriptionFoundations.Layer.subscript.setter((uint64_t)v11, &v17, v6, v7);
}

uint64_t SceneDescriptionFoundations.Layer.subscript.setter(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::String v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    RIOPxrSdfLayerClearCustomLayerData();

    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    unsigned int v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrSdfLayerSetCustomLayerData();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

void (*SceneDescriptionFoundations.Layer.subscript.modify(void *a1, void **a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  _OWORD v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  double v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  id v15 = v14;
  SceneDescriptionFoundations.Layer.subscript.getter(a3, (uint64_t)v13);
  return SceneDescriptionFoundations.Layer.subscript.modify;
}

void SceneDescriptionFoundations.Layer.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (*a1)[7];
  id v5 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v6 = v2[3];
    uint64_t v7 = v2[4];
    uint64_t v8 = v2[1];
    uint64_t v9 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[5], v3, v6);
    uint64_t v12 = v4;
    SceneDescriptionFoundations.Layer.subscript.setter((uint64_t)v5, (void **)&v12, v9, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  }
  else
  {
    uint64_t v10 = v2[1];
    uint64_t v11 = *v2;
    uint64_t v12 = (*a1)[7];
    SceneDescriptionFoundations.Layer.subscript.setter((uint64_t)v3, (void **)&v12, v11, v10);
  }
  free(v3);
  free(v5);
  free(v2);
}

uint64_t SceneDescriptionFoundations.Layer.subLayerPaths()()
{
  uint64_t v0 = (void *)RIOPxrSdfLayerCopySubLayerPaths();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE78];
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.setSubLayerPaths(paths:)(Swift::OpaquePointer paths)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  RIOPxrSdfLayerSetSubLayerPathsWithStrings();
}

Swift::Int __swiftcall SceneDescriptionFoundations.Layer.numSubLayerPaths()()
{
  return MEMORY[0x270F22120](*(void *)(v0 + 16));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.canApplyEdits(with:)(Swift::OpaquePointer with)
{
  return SceneDescriptionFoundations.Layer.canApplyEdits(with:)((uint64_t)with._rawValue, MEMORY[0x263F37778]);
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.applyEdits(with:)(Swift::OpaquePointer with)
{
  return SceneDescriptionFoundations.Layer.canApplyEdits(with:)((uint64_t)with._rawValue, MEMORY[0x263F37770]);
}

uint64_t SceneDescriptionFoundations.Layer.canApplyEdits(with:)(uint64_t a1, uint64_t (*a2)(uint64_t, Class))
{
  uint64_t v4 = *(void *)(v2 + 16);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for RIOPxrSdfNamespaceEditRef(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2(v4, isa);

  return v6;
}

uint64_t SceneDescriptionFoundations.Layer.flattenSubGraphInPlace(subGraph:)()
{
  return RIOPxrSdfLayerFlattenSubGraphInPlace();
}

uint64_t SceneDescriptionFoundations.Layer.copyPathToLayer(from:to:on:)()
{
  return RIOPxrUsdUtilsSdfCopySpec();
}

uint64_t SceneDescriptionFoundations.Layer.copyPathToLayer(from:to:on:includingDescendants:)()
{
  return RIOPxrUsdUtilsSdfCopySpec();
}

unint64_t one-time initialization function for replicationMessagePublishers()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static SceneDescriptionFoundations.Layer.replicationMessagePublishers = result;
  return result;
}

uint64_t @objc closure #1 in SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.init(layerBase:)(unsigned char *a1, uint64_t a2)
{
  swift_retain();
  uint64_t v4 = specialized Data.init(bytes:count:)(a1, a2);
  unint64_t v6 = v5;
  PassthroughSubject.send(_:)();
  swift_release();
  return outlined consume of Data._Representation(v4, v6);
}

uint64_t SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.deinit()
{
  RIOPxrSdfLayerReplicationStopSending();
  swift_release();

  return v0;
}

uint64_t SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.__deallocating_deinit()
{
  RIOPxrSdfLayerReplicationStopSending();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.receive<A>(subscriber:)(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  swift_retain();
  PassthroughSubject.receive<A>(subscriber:)();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance SceneDescriptionFoundations.Layer.ReplicationMessagePublisher(uint64_t a1)
{
  return SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.receive<A>(subscriber:)(a1);
}

uint64_t SceneDescriptionFoundations.Layer.replicationMessagePublisher.getter()
{
  if (one-time initialization token for replicationMessagePublishers != -1) {
    swift_once();
  }
  double v1 = *(void **)(v0 + 16);
  swift_beginAccess();
  uint64_t v2 = static SceneDescriptionFoundations.Layer.replicationMessagePublishers;
  id v3 = v1;
  uint64_t v4 = specialized Dictionary.subscript.getter(v3, v2);

  swift_endAccess();
  if (!v4)
  {
    type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher();
    uint64_t v4 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Data, Never>);
    swift_allocObject();
    id v5 = v3;
    *(void *)(v4 + 16) = PassthroughSubject.init()();
    *(void *)(v4 + 24) = v5;
    RIOPxrSdfLayerReplicationStartSending();
    swift_beginAccess();
    id v6 = v5;
    uint64_t v7 = swift_retain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v7, v6);
    swift_endAccess();
  }
  return v4;
}

uint64_t SceneDescriptionFoundations.Layer.receiveReplicationMessage(_:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32);
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v5, v6);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = RIOPxrSdfLayerReplicationReceive();
      break;
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(a1, a2, a3, MEMORY[0x263F37B08]);
}

uint64_t SceneDescriptionFoundations.Layer.exportToARKitUSDZ(at:firstLayerName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(a1, a2, a3, MEMORY[0x263F37B00]);
}

uint64_t SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void))
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  double v14 = (char *)&v27 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v27 - v13, a1, v7, v12);
  if (a3)
  {
    id v15 = *(void (**)(char *, uint64_t))(v8 + 8);
    swift_bridgeObjectRetain();
    v15(v14, v7);
  }
  else
  {
    URL.deletingPathExtension()();
    uint64_t v16 = URL.lastPathComponent.getter();
    uint64_t v18 = v17;
    uint64_t v28 = a4;
    id v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v10, v7);
    uint64_t v29 = v16;
    uint64_t v30 = v18;
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = 0x636473752ELL;
    v20._object = (void *)0xE500000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v19(v14, v7);
    a4 = v28;
  }
  uint64_t v21 = (void *)RIOPxrSdfLayerCopyIdentifier();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)RIOPxrSdfAssetPathCreateFromCString();
  swift_release();
  URL.path.getter();
  uint64_t v23 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v24 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v25 = a4(v22, v23 + 32, v24 + 32);

  swift_release();
  swift_release();
  return v25;
}

uint64_t SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:);
  *(void *)(v5 + 24) = v4;
  v8[4] = partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
  v8[5] = v5;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  void v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
  v8[3] = &block_descriptor_12;
  uint64_t v6 = _Block_copy(v8);
  swift_retain();
  swift_release();
  RIOPxrUsdUtilsModifyAssetPaths();
  _Block_release(v6);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = MEMORY[0x23ECB9F30](v4, v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  uint64_t v4 = v2();

  return v4;
}

uint64_t SceneDescriptionFoundations.Layer.colorConfiguration.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerCopyColorConfiguration();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Layer.colorConfiguration.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrSdfLayerSetColorConfiguration();
}

void (*SceneDescriptionFoundations.Layer.colorConfiguration.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrSdfLayerCopyColorConfiguration();
  return SceneDescriptionFoundations.Layer.colorConfiguration.modify;
}

void SceneDescriptionFoundations.Layer.colorConfiguration.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrSdfLayerSetColorConfiguration();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasColorConfiguration()()
{
  return RIOPxrSdfLayerHasColorConfiguration();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearColorConfiguration()()
{
  MEMORY[0x270F22018](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.colorManagementSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerCopyColorManagementSystem();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Layer.colorManagementSystem.setter(id *a1)
{
  id v1 = *a1;
  RIOPxrSdfLayerSetColorManagementSystem();
}

void (*SceneDescriptionFoundations.Layer.colorManagementSystem.modify(uint64_t *a1))(id *a1)
{
  a1[1] = *(void *)(v1 + 16);
  *a1 = RIOPxrSdfLayerCopyColorManagementSystem();
  return SceneDescriptionFoundations.Layer.colorManagementSystem.modify;
}

void SceneDescriptionFoundations.Layer.colorManagementSystem.modify(id *a1)
{
  id v1 = *a1;
  RIOPxrSdfLayerSetColorManagementSystem();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasColorManagementSystem()()
{
  return RIOPxrSdfLayerHasColorManagementSystem();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearColorManagementSystem()()
{
  MEMORY[0x270F22020](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.documentation.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfLayerCopyDocumentation();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t SceneDescriptionFoundations.Layer.documentation.setter(uint64_t a1, uint64_t a2)
{
  return SceneDescriptionFoundations.Layer.documentation.setter(a1, a2, MEMORY[0x263F377D8]);
}

uint64_t (*SceneDescriptionFoundations.Layer.documentation.modify(Swift::String *a1))(uint64_t a1, char a2)
{
  a1[1]._countAndFlagsBits = *(void *)(v1 + 16);
  id v3 = (void *)RIOPxrSdfLayerCopyDocumentation();
  *a1 = String.init(_:)(v3);
  return SceneDescriptionFoundations.Layer.documentation.modify;
}

uint64_t SceneDescriptionFoundations.Layer.documentation.modify(uint64_t a1, char a2)
{
  return SceneDescriptionFoundations.Layer.documentation.modify(a1, a2, MEMORY[0x263F377D8]);
}

uint64_t SceneDescriptionFoundations.Layer.startTimeCode.getter()
{
  return RIOPxrSdfLayerGetStartTimeCode();
}

uint64_t SceneDescriptionFoundations.Layer.startTimeCode.setter()
{
  return MEMORY[0x270F22208](*(void *)(v0 + 16));
}

uint64_t (*SceneDescriptionFoundations.Layer.startTimeCode.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrSdfLayerGetStartTimeCode();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.startTimeCode.modify;
}

uint64_t SceneDescriptionFoundations.Layer.startTimeCode.modify(uint64_t a1)
{
  return MEMORY[0x270F22208](*(void *)(a1 + 8));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasStartTimeCode()()
{
  return RIOPxrSdfLayerHasStartTimeCode();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearStartTimeCode()()
{
  MEMORY[0x270F22060](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.endTimeCode.getter()
{
  return RIOPxrSdfLayerGetEndTimeCode();
}

uint64_t SceneDescriptionFoundations.Layer.endTimeCode.setter()
{
  return MEMORY[0x270F221E0](*(void *)(v0 + 16));
}

uint64_t (*SceneDescriptionFoundations.Layer.endTimeCode.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrSdfLayerGetEndTimeCode();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.endTimeCode.modify;
}

uint64_t SceneDescriptionFoundations.Layer.endTimeCode.modify(uint64_t a1)
{
  return MEMORY[0x270F221E0](*(void *)(a1 + 8));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasEndTimeCode()()
{
  return RIOPxrSdfLayerHasEndTimeCode();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearEndTimeCode()()
{
  MEMORY[0x270F22038](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.timeCodesPerSecond.getter()
{
  return RIOPxrSdfLayerGetTimeCodesPerSecond();
}

uint64_t SceneDescriptionFoundations.Layer.timeCodesPerSecond.setter()
{
  return MEMORY[0x270F22218](*(void *)(v0 + 16));
}

uint64_t (*SceneDescriptionFoundations.Layer.timeCodesPerSecond.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrSdfLayerGetTimeCodesPerSecond();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.timeCodesPerSecond.modify;
}

uint64_t SceneDescriptionFoundations.Layer.timeCodesPerSecond.modify(uint64_t a1)
{
  return MEMORY[0x270F22218](*(void *)(a1 + 8));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasTimeCodesPerSecond()()
{
  return RIOPxrSdfLayerHasTimeCodesPerSecond();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearTimeCodesPerSecond()()
{
  MEMORY[0x270F22068](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.framesPerSecond.getter()
{
  return RIOPxrSdfLayerGetFramesPerSecond();
}

uint64_t SceneDescriptionFoundations.Layer.framesPerSecond.setter()
{
  return MEMORY[0x270F221F0](*(void *)(v0 + 16));
}

uint64_t (*SceneDescriptionFoundations.Layer.framesPerSecond.modify(void *a1))(uint64_t a1)
{
  a1[1] = *(void *)(v1 + 16);
  RIOPxrSdfLayerGetFramesPerSecond();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.framesPerSecond.modify;
}

uint64_t SceneDescriptionFoundations.Layer.framesPerSecond.modify(uint64_t a1)
{
  return MEMORY[0x270F221F0](*(void *)(a1 + 8));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasFramesPerSecond()()
{
  return RIOPxrSdfLayerHasFramesPerSecond();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearFramesPerSecond()()
{
  MEMORY[0x270F22048](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.framePrecision.getter()
{
  return RIOPxrSdfLayerGetFramePrecision();
}

uint64_t SceneDescriptionFoundations.Layer.framePrecision.setter(uint64_t a1)
{
  return MEMORY[0x270F221E8](*(void *)(v1 + 16), a1);
}

uint64_t (*SceneDescriptionFoundations.Layer.framePrecision.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(_DWORD *)(a1 + 8) = RIOPxrSdfLayerGetFramePrecision();
  return SceneDescriptionFoundations.Layer.framePrecision.modify;
}

uint64_t SceneDescriptionFoundations.Layer.framePrecision.modify(uint64_t a1)
{
  return MEMORY[0x270F221E8](*(void *)a1, *(unsigned int *)(a1 + 8));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasFramePrecision()()
{
  return RIOPxrSdfLayerHasFramePrecision();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearFramePrecision()()
{
  MEMORY[0x270F22040](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.owner.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfLayerCopyOwner();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t SceneDescriptionFoundations.Layer.owner.setter(uint64_t a1, uint64_t a2)
{
  return SceneDescriptionFoundations.Layer.documentation.setter(a1, a2, MEMORY[0x263F377E8]);
}

uint64_t (*SceneDescriptionFoundations.Layer.owner.modify(Swift::String *a1))(uint64_t a1, char a2)
{
  a1[1]._countAndFlagsBits = *(void *)(v1 + 16);
  uint64_t v3 = (void *)RIOPxrSdfLayerCopyOwner();
  *a1 = String.init(_:)(v3);
  return SceneDescriptionFoundations.Layer.owner.modify;
}

uint64_t SceneDescriptionFoundations.Layer.owner.modify(uint64_t a1, char a2)
{
  return SceneDescriptionFoundations.Layer.documentation.modify(a1, a2, MEMORY[0x263F377E8]);
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasOwner()()
{
  return RIOPxrSdfLayerHasOwner();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearOwner()()
{
  MEMORY[0x270F22050](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.sessionOwner.getter()
{
  uint64_t v0 = (void *)RIOPxrSdfLayerCopySessionOwner();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(*(void *)a2 + 16);
  uint64_t v7 = String.utf8CString.getter();
  a5(v6, v7 + 32);
  return swift_release();
}

uint64_t SceneDescriptionFoundations.Layer.sessionOwner.setter(uint64_t a1, uint64_t a2)
{
  return SceneDescriptionFoundations.Layer.documentation.setter(a1, a2, MEMORY[0x263F377F0]);
}

uint64_t SceneDescriptionFoundations.Layer.documentation.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  a3(v5, v6 + 32);
  return swift_release();
}

uint64_t (*SceneDescriptionFoundations.Layer.sessionOwner.modify(Swift::String *a1))(uint64_t a1, char a2)
{
  a1[1]._countAndFlagsBits = *(void *)(v1 + 16);
  uint64_t v3 = (void *)RIOPxrSdfLayerCopySessionOwner();
  *a1 = String.init(_:)(v3);
  return SceneDescriptionFoundations.Layer.sessionOwner.modify;
}

uint64_t SceneDescriptionFoundations.Layer.sessionOwner.modify(uint64_t a1, char a2)
{
  return SceneDescriptionFoundations.Layer.documentation.modify(a1, a2, MEMORY[0x263F377F0]);
}

uint64_t SceneDescriptionFoundations.Layer.documentation.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = String.utf8CString.getter();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (a2)
  {
    a3(v8, v6 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    a3(v8, v7 + 32);
  }
  return swift_release();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasSessionOwner()()
{
  return RIOPxrSdfLayerHasSessionOwner();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearSessionOwner()()
{
  MEMORY[0x270F22058](*(void *)(v0 + 16));
}

uint64_t SceneDescriptionFoundations.Layer.hasOwnedSubLayers.getter()
{
  return RIOPxrSdfLayerGetHasOwnedSubLayers();
}

uint64_t SceneDescriptionFoundations.Layer.hasOwnedSubLayers.setter(char a1)
{
  return MEMORY[0x270F221F8](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*SceneDescriptionFoundations.Layer.hasOwnedSubLayers.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = RIOPxrSdfLayerGetHasOwnedSubLayers();
  return SceneDescriptionFoundations.Layer.hasOwnedSubLayers.modify;
}

uint64_t SceneDescriptionFoundations.Layer.hasOwnedSubLayers.modify(uint64_t a1)
{
  return MEMORY[0x270F221F8](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasCustomMetadata()()
{
  return RIOPxrSdfLayerHasCustomLayerMetaData();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearAllCustomMetadata()()
{
}

uint64_t type metadata accessor for SceneDescriptionFoundations.Layer()
{
  return self;
}

uint64_t type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher()
{
  return self;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;
  return swift_bridgeObjectRelease();
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v17 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for RIOPxrSdfLayerRef(0);
      do
      {
        swift_dynamicCast();
        type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher();
        swift_dynamicCast();
        uint64_t v2 = v17;
        unint64_t v10 = *(void *)(v17 + 16);
        if (*(void *)(v17 + 24) <= v10)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v10 + 1, 1);
          uint64_t v2 = v17;
        }
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef();
        _CFObject.hash(into:)();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 64;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 64 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 64 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v11 = 0;
          unint64_t v12 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v13 = v7 == v12;
            if (v7 == v12) {
              unint64_t v7 = 0;
            }
            v11 |= v13;
            uint64_t v14 = *(void *)(v4 + 8 * v7);
          }
          while (v14 == -1);
          unint64_t v8 = __clz(__rbit64(~v14)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        uint64_t v9 = 8 * v8;
        *(void *)(*(void *)(v2 + 48) + v9) = v16;
        *(void *)(*(void *)(v2 + 56) + v9) = v15;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaDictionary.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  return v2;
}

uint64_t sub_23AA2991C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(uint64_t a1)
{
  return closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_23AA29934()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in SceneDescriptionFoundations.Layer.ReplicationMessagePublisher()
{
  return MEMORY[0x263F8E658];
}

uint64_t sub_23AA29990@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerCopyDefaultPrim();
  *a1 = result;
  return result;
}

uint64_t sub_23AA299C4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SceneDescriptionFoundations.Layer.autoPlay.getter();
  *a1 = result & 1;
  return result;
}

void sub_23AA299F4()
{
}

uint64_t sub_23AA29A24()
{
  return 16;
}

__n128 sub_23AA29A30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23AA29A3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerCopyColorConfiguration();
  *a1 = result;
  return result;
}

uint64_t sub_23AA29A6C()
{
  return RIOPxrSdfLayerSetColorConfiguration();
}

uint64_t sub_23AA29A80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerCopyColorManagementSystem();
  *a1 = result;
  return result;
}

uint64_t sub_23AA29AB0()
{
  return RIOPxrSdfLayerSetColorManagementSystem();
}

uint64_t sub_23AA29AC4@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return keypath_get_19Tm(a1, MEMORY[0x263F37798], a2);
}

uint64_t sub_23AA29ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(a1, a2, a3, a4, MEMORY[0x263F377D8]);
}

uint64_t sub_23AA29B08@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerGetStartTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_23AA29B38(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F22208](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23AA29B48@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerGetEndTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_23AA29B78(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F221E0](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23AA29B88@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerGetTimeCodesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_23AA29BB8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F22218](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23AA29BC8@<X0>(void *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerGetFramesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_23AA29BF8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F221F0](*(void *)(*(void *)a2 + 16));
}

uint64_t sub_23AA29C08@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerGetFramePrecision();
  *a1 = result;
  return result;
}

uint64_t sub_23AA29C38(unsigned int *a1, uint64_t a2)
{
  return MEMORY[0x270F221E8](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_23AA29C4C@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return keypath_get_19Tm(a1, MEMORY[0x263F377B0], a2);
}

uint64_t sub_23AA29C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(a1, a2, a3, a4, MEMORY[0x263F377E8]);
}

uint64_t sub_23AA29C90@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return keypath_get_19Tm(a1, MEMORY[0x263F377C8], a2);
}

uint64_t keypath_get_19Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, Swift::String *a3@<X8>)
{
  uint64_t v4 = (void *)a2(*(void *)(*(void *)a1 + 16));
  Swift::String v6 = String.init(_:)(v4);
  uint64_t result = v6._countAndFlagsBits;
  *a3 = v6;
  return result;
}

uint64_t sub_23AA29CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(a1, a2, a3, a4, MEMORY[0x263F377F0]);
}

uint64_t sub_23AA29D0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RIOPxrSdfLayerGetHasOwnedSubLayers();
  *a1 = result;
  return result;
}

uint64_t sub_23AA29D3C(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F221F8](*(void *)(*(void *)a2 + 16), *a1);
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.NamespaceEdit()
{
  return &type metadata for SceneDescriptionFoundations.NamespaceEdit;
}

uint64_t method lookup function for SceneDescriptionFoundations.Layer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SceneDescriptionFoundations.Layer);
}

uint64_t dispatch thunk of SceneDescriptionFoundations.Layer.__allocating_init(tag:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SceneDescriptionFoundations.Layer.__allocating_init(relativeTo:identifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher);
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef()
{
  unint64_t result = lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef)
  {
    type metadata accessor for RIOPxrSdfLayerRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef);
  }
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.init(bytes:count:)(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t ImportSession.getExtraAssetForTag(tag:)()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  unint64_t v2 = *v1;
  String.utf8CString.getter();
  id v3 = v2;
  uint64_t ExtraAssetWithTag = RIOImportSessionGetExtraAssetWithTag();

  swift_release();
  return ExtraAssetWithTag;
}

Swift::Bool __swiftcall ImportSession.setExtraAssetForTag(tag:assetRef:)(Swift::String tag, Swift::OpaquePointer assetRef)
{
  id v3 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v4 = *v3;
  String.utf8CString.getter();
  id v5 = v4;
  char v6 = RIOImportSessionSetExtraAssetWithTag();

  swift_release();
  return v6;
}

Swift::Void __swiftcall ImportSession.removeExtraAssetForTag(tag:)(Swift::String tag)
{
  uint64_t v2 = (void **)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  id v3 = *v2;
  String.utf8CString.getter();
  id v4 = v3;
  RIOImportSessionRemoveExtraAssetWithTag();

  swift_release();
}

uint64_t static ImportSession.instanceCount.getter()
{
  return MEMORY[0x270F21ED0]();
}

uint64_t ImportSession.entity(at:)()
{
  uint64_t v0 = type metadata accessor for __EntityRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v7[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
  if (EntityAtPrimPath)
  {
    type metadata accessor for Entity();
    void v7[3] = MEMORY[0x263F8DD08];
    v7[0] = EntityAtPrimPath;
    static __EntityRef.__fromCore(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
    uint64_t EntityAtPrimPath = static Entity.__fromCore(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return EntityAtPrimPath;
}

Swift::Void __swiftcall ImportSession.queueAssetForLoad(_:)(Swift::OpaquePointer a1)
{
}

uint64_t ImportSession.registerAudioAsset(path:tag:asset:)(void **a1)
{
  uint64_t v2 = *a1;
  id v3 = (id *)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  id v4 = *v3;
  id v5 = v2;
  char v6 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  RIOImportSessionRegisterAudioAsset();

  swift_release();
  return swift_release();
}

Swift::Bool __swiftcall ImportSession.dumpDiagnostics(_:)(Swift::String a1)
{
  return ImportSession.dumpDiagnostics(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x263F37718]);
}

uint64_t ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v43 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x270FA5388](v43);
  uint64_t v42 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  uint64_t v5 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  id v53 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v51 = (char *)&v41 - v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v55 = v13;
  *(void *)(v13 + 16) = MEMORY[0x263F8EE80];
  uint64_t v41 = v13 + 16;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v46 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v18 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  uint64_t v56 = a1;
  swift_bridgeObjectRetain();
  uint64_t v45 = v18;
  uint64_t result = swift_beginAccess();
  int64_t v20 = 0;
  int64_t v47 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v50 = v8 + 32;
  id v49 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v44 = v60;
  uint64_t v52 = v8;
  long long v48 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
  while (1)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v58 = v20;
      unint64_t v25 = v24 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v26 >= v47) {
      goto LABEL_24;
    }
    unint64_t v27 = *(void *)(v46 + 8 * v26);
    int64_t v28 = v20 + 1;
    if (!v27)
    {
      int64_t v28 = v20 + 2;
      if (v20 + 2 >= v47) {
        goto LABEL_24;
      }
      unint64_t v27 = *(void *)(v46 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v20 + 3;
        if (v20 + 3 >= v47) {
          goto LABEL_24;
        }
        unint64_t v27 = *(void *)(v46 + 8 * v28);
        if (!v27) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    int64_t v58 = v28;
    unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_22:
    uint64_t v31 = v51;
    uint64_t v30 = v52;
    id v32 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
    v32(v51, *(void *)(v56 + 48) + *(void *)(v52 + 72) * v25, v7);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v10, v31, v7);
    long long v33 = v53;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
    (*v49)(v33, v54);
    LODWORD(v33) = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    unint64_t v34 = (unint64_t)__REAssetBundle.ExportOptions.DeploymentTarget.version.getter() >> 32;
    __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    v35.n128_u64[0] = __PAIR64__(v34, v33);
    v35.n128_u64[1] = v36;
    __n128 v57 = v35;
    uint64_t v37 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x23ECBB170](v37 + 32, v57);
    swift_release();
    if (v38)
    {
      uint64_t v21 = *v45;
      _DWORD v60[2] = partial apply for closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:);
      v60[3] = v55;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      v60[0] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned RIOImportSessionFaultType, @unowned UnsafePointer<Int8>) -> ();
      v60[1] = &block_descriptor_13;
      uint64_t v22 = _Block_copy(aBlock);
      id v23 = v21;
      swift_retain();
      swift_release();
      RIOImportSessionGatherFaultRecords();
      _Block_release(v22);
    }
    else
    {
      uint64_t v39 = (uint64_t)v42;
      v32(v42, (unint64_t)v10, v7);
      swift_storeEnumTagMultiPayload();
      addFault #1 (_:_:) in ImportSession.getCompatibilityFaultsByPrimPath(for:)(47, 0xE100000000000000, v39, v55);
      outlined destroy of ImportSession.EvaluationFault(v39);
    }
    uint64_t result = (*v48)(v10, v7);
    int64_t v20 = v58;
  }
  uint64_t v29 = v20 + 4;
  if (v20 + 4 >= v47)
  {
LABEL_24:
    swift_release();
    swift_beginAccess();
    uint64_t v40 = *(void *)(v55 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    return v40;
  }
  unint64_t v27 = *(void *)(v46 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v20 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v47) {
      goto LABEL_24;
    }
    unint64_t v27 = *(void *)(v46 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ImportSession.EvaluationFault(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for ImportSession.EvaluationFault);
}

uint64_t sub_23AA2AA10()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t ImportSession.getAllExtraAssetTags()()
{
  swift_beginAccess();
  uint64_t v0 = (void *)RIOImportSessionCopyExtraAssetTags();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x263F8EE78];
}

uint64_t ImportSession.includeUnusedMaterials.setter()
{
  return RIOPxrUsdStageSetIncludeUnusedMaterials();
}

Swift::Void __swiftcall ImportSession.requestUpdateSynchronouslyOnEngineQueue()()
{
}

void *ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v10);
  uint64_t v13 = ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v12, 0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v13;
}

void *ImportSession.__allocating_init<A>(core:entityType:)(void *a1, uint64_t a2)
{
  return ImportSession.init<A>(core:entityType:)(a1, a2);
}

uint64_t ImportSession.stage.getter()
{
  return swift_retain();
}

uint64_t ImportSession.rootEntity.getter()
{
  return swift_retain();
}

uint64_t ImportSession.engineRef.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t key path setter for ImportSession.deploymentTarget : ImportSession(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v6, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  uint64_t v7 = *a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  outlined assign with take of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t ImportSession.deploymentTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  return outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v3, a1, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
}

uint64_t ImportSession.deploymentTarget.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  outlined assign with take of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, v3);
  return swift_endAccess();
}

uint64_t (*ImportSession.deploymentTarget.modify())()
{
  return CompileSession.deploymentTargets.modify;
}

void ImportSession.register(builderGenerator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  aBlock[4] = partial apply for closure #1 in ImportSession.register(builderGenerator:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  void aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  aBlock[3] = &block_descriptor_9;
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = v6;
  swift_retain();
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v9);
}

uint64_t closure #1 in ImportSession.register(builderGenerator:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v6 = Strong;
  type metadata accessor for Prim();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  id v8 = a1;
  uint64_t v9 = a3(v7);
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    uint64_t ObjectType = swift_getObjectType();
    Builder.generateCore(primRef:)((uint64_t)v8, ObjectType, v12);
    Builder.generateOutputs()();
    uint64_t v14 = (void *)RIOPxrUsdObjectCopyPath();
    uint64_t v15 = v6 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath;
    swift_beginAccess();
    if (*(void *)(*(void *)v15 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v14), (v16 & 1) != 0))
    {
      swift_endAccess();
    }
    else
    {

      swift_endAccess();
      uint64_t v18 = (void *)RIOPxrUsdObjectCopyPath();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = *(void *)v15;
      *(void *)uint64_t v15 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(MEMORY[0x263F8EE78], v18, isUniquelyReferenced_nonNull_native);
      *(void *)uint64_t v15 = v36;

      swift_bridgeObjectRelease();
      swift_endAccess();
    }
    int64_t v20 = (void *)RIOPxrUsdObjectCopyPath();
    swift_beginAccess();
    uint64_t v22 = specialized Dictionary.subscript.modify(v35, v20);
    id v23 = *v21;
    if (*v21)
    {
      unint64_t v24 = v21;
      swift_unknownObjectRetain();
      char v25 = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v24 = v23;
      if ((v25 & 1) == 0)
      {
        id v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        *unint64_t v24 = v23;
      }
      unint64_t v26 = v23[2];
      unint64_t v27 = v23[3];
      unint64_t v28 = v26 + 1;
      if (v26 >= v27 >> 1)
      {
        unint64_t v34 = v26 + 1;
        uint64_t v31 = v23;
        unint64_t v32 = v23[2];
        long long v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v26 + 1, 1, v31);
        unint64_t v26 = v32;
        unint64_t v28 = v34;
        id v23 = v33;
        *unint64_t v24 = v33;
      }
      v23[2] = v28;
      uint64_t v29 = &v23[2 * v26];
      v29[4] = v11;
      v29[5] = v12;
      ((void (*)(void *, void))v22)(v35, 0);
    }
    else
    {
      ((void (*)(void *, void))v22)(v35, 0);
    }
    swift_endAccess();

    uint64_t v17 = Builder.core.getter(ObjectType, v12);
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v17;
}

void (*specialized Dictionary.subscript.modify(void *a1, void *a2))(void *a1)
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  long long v4[4] = a2;
  v4[5] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = v3();
  swift_release();

  return v5;
}

id ImportSession.core.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

uint64_t ImportSession.sceneUpdatePassCompletion.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1);
  return v2;
}

uint64_t key path getter for ImportSession.sceneUpdatePassCompletion : ImportSession@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for ImportSession.sceneUpdatePassCompletion : ImportSession(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
  ImportSession.sceneUpdatePassCompletion.didset();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);
}

uint64_t ImportSession.sceneUpdatePassCompletion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
  ImportSession.sceneUpdatePassCompletion.didset();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
}

uint64_t ImportSession.sceneUpdatePassCompletion.didset()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = v1[1];
    uint64_t v4 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    uint64_t v5 = *v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(void *)(v6 + 24) = v3;
    long long v10[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v10[5] = v6;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = &block_descriptor_276;
    uint64_t v7 = _Block_copy(v10);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v2);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v2);
    id v8 = v5;
    swift_release();
    RIOImportSessionSetSceneUpdatePassCompletion();
    _Block_release(v7);

    return outlined consume of (@escaping @callee_guaranteed () -> ())?(v2);
  }
  else
  {
    swift_beginAccess();
    return RIOImportSessionSetSceneUpdatePassCompletion();
  }
}

uint64_t (*ImportSession.sceneUpdatePassCompletion.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ImportSession.sceneUpdatePassCompletion.modify;
}

uint64_t ImportSession.sceneUpdatePassCompletion.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return ImportSession.sceneUpdatePassCompletion.didset();
  }
  return result;
}

void *ImportSession.__allocating_init(pipelineVersion:)()
{
  uint64_t v0 = type metadata accessor for __EngineRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  dispatch thunk of __Engine.__coreEngine.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = (void *)RIOImportSessionCreateWithEngine();
  uint64_t v5 = type metadata accessor for Entity();
  type metadata accessor for ImportSession(0);
  swift_allocObject();
  return specialized ImportSession.init<A>(core:entityType:)(v4, v5);
}

void *ImportSession.__allocating_init(serviceLocator:pipelineVersion:)(uint64_t a1)
{
  getEngine(_:)(a1);
  uint64_t v1 = (void *)RIOImportSessionCreateWithEngine();
  uint64_t v2 = type metadata accessor for Entity();
  type metadata accessor for ImportSession(0);
  swift_allocObject();
  uint64_t v3 = specialized ImportSession.init<A>(core:entityType:)(v1, v2);
  swift_release();
  return v3;
}

uint64_t getEngine(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __EngineRef();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
  }
  swift_retain();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  dispatch thunk of __Engine.__coreEngine.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7[1];
}

BOOL static ImportSession.LoadError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ImportSession.LoadError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ImportSession.LoadError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *ImportSession.__allocating_init<A>(from:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v10);
  uint64_t v13 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v12, 0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v13;
}

void *ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  getEngine(_:)(a2);
  if (specialized static USDImportService.canLoad(url:)())
  {
    uint64_t v18 = a5;
    URL._bridgeToObjectiveC()(v8);
    double v10 = v9;
    uint64_t v5 = (void *)RIOImportSessionCreateWithURLWithErrorReporting();

    if (v5)
    {
      swift_allocObject();
      id v11 = v5;
      uint64_t v5 = ImportSession.init<A>(core:entityType:)(v5, v18);
      swift_release();
      swift_retain();

      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
      swift_allocError();
      unsigned char *v15 = 1;
      swift_willThrow();
      swift_release();
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
    }
  }
  else
  {
    lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
    swift_allocError();
    *uint64_t v13 = 0;
    swift_willThrow();
    swift_release();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  return v5;
}

void *ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  getEngine(_:)(a2);
  if (specialized static USDImportService.canLoad(url:)())
  {
    URL._bridgeToObjectiveC()(v7);
    uint64_t v9 = v8;
    double v10 = (void *)RIOImportSessionCreateWithURL();

    swift_allocObject();
    id v11 = ImportSession.init<A>(core:entityType:)(v10, a5);
    swift_release();
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
    swift_retain();
    v13(a1, v12);
    if (v11) {
      swift_release();
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
    return 0;
  }
  return v11;
}

void *ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a1, v10, v12);
  uint64_t v15 = ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)((uint64_t)v14, 0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v15;
}

void *ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  getEngine(_:)(a2);
  if (specialized static USDImportService.canLoad(url:)())
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v11 = v10;
    if (a6) {
      uint64_t SingleUseImporterWithURL = RIOImportSessionCreateSingleUseImporterWithURL();
    }
    else {
      uint64_t SingleUseImporterWithURL = RIOImportSessionCreateWithURL();
    }
    uint64_t v15 = (void *)SingleUseImporterWithURL;

    swift_allocObject();
    uint64_t v14 = ImportSession.init<A>(core:entityType:)(v15, a5);
    swift_release();
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
    swift_retain();
    v17(a1, v16);
    if (v14) {
      swift_release();
    }
  }
  else
  {
    swift_release();
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
    return 0;
  }
  return v14;
}

void *ImportSession.__allocating_init<A>(named:in:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  return ImportSession.__allocating_init<A>(named:in:serviceLocator:pipelineVersion:threading:entityType:)(a1, a2, a3, 0, a4, a5, a6, a7);
}

void *ImportSession.__allocating_init<A>(named:in:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a8;
  uint64_t v28 = a7;
  unsigned int v27 = a6;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (void **)&v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  id v19 = &v26[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = &v26[-v21];
  type metadata accessor for USDImportService();
  static USDImportService.urlForUSD(named:in:)(a1, a2, (uint64_t)a3, v15);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {

    swift_release();
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
    return 0;
  }
  else
  {
    (*(void (**)(unsigned char *, void **, uint64_t))(v17 + 32))(v22, v15, v16);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 16))(v19, v22, v16);
    id v23 = ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v19, a4, a5, v27, v28);

    unint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v17 + 8);
    swift_retain();
    v24(v22, v16);
    if (v23) {
      swift_release();
    }
  }
  return v23;
}

uint64_t ImportSession.__allocating_init<A>(withName:in:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  return ImportSession.__allocating_init<A>(withName:in:serviceLocator:pipelineVersion:threading:entityType:)(a1, a2, a3, 0, a4, a5, a6, a7);
}

uint64_t ImportSession.__allocating_init<A>(withName:in:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a8;
  uint64_t v28 = a7;
  unsigned int v26 = a5;
  unsigned int v27 = a6;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (void **)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v26 - v20;
  type metadata accessor for USDImportService();
  static USDImportService.urlForUSD(named:in:)(a1, a2, (uint64_t)a3, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
    swift_allocError();
    *uint64_t v22 = 2;
    swift_willThrow();

    swift_release();
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v16 + 32))(v21, v14, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v15);
    uint64_t v23 = v30;
    unint64_t v24 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v18, a4, v26, v27, v28);
    if (!v23) {
      a4 = (uint64_t)v24;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  return a4;
}

void *ImportSession.__allocating_init<A>(stage:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(a1, 0, a2, a3, a4);
  swift_release();
  return v4;
}

void *ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

void *ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  getEngine(_:)(a2);
  if (a6) {
    uint64_t SingleUseImporterWithStage = RIOImportSessionCreateSingleUseImporterWithStage();
  }
  else {
    uint64_t SingleUseImporterWithStage = RIOImportSessionCreateWithStage();
  }
  uint64_t v9 = (void *)SingleUseImporterWithStage;
  swift_allocObject();
  uint64_t v10 = ImportSession.init<A>(core:entityType:)(v9, a5);
  swift_release();
  swift_release();
  return v10;
}

void *ImportSession.init<A>(core:entityType:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v38[1] = a2;
  uint64_t v5 = type metadata accessor for __EntityRef();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  uint64_t v10 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)((char *)v3 + v11) = v12;
  *(void *)(v12 + 24) = v13;
  uint64_t v14 = (void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  void *v14 = 0;
  v14[1] = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x263F8EE80];
  if (a1)
  {
    uint64_t v15 = &unk_268A58000;
    *(void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
    id v16 = a1;
    uint64_t EngineRef = RIOImportSessionGetEngineRef();
    if (EngineRef
      && (v3[4] = EngineRef, (id v18 = (id)RIOImportSessionGetStage()) != 0))
    {
      uint64_t v19 = v18;
      v38[0] = v6;
      type metadata accessor for Stage();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v19;
      v3[2] = v20;
      id v21 = v19;
      uint64_t RootEntity = RIOImportSessionGetRootEntity();
      if (RootEntity)
      {
        uint64_t v23 = RootEntity;
        unint64_t v24 = v21;
        type metadata accessor for AnchorEntity();
        uint64_t v25 = swift_dynamicCastMetatype();
        REAnchorComponentGetComponentType();
        REEntityRemoveComponentByClass();
        REAnchoringComponentGetComponentType();
        uint64_t ComponentByClass = REEntityGetComponentByClass();
        if (v25)
        {
          if (!ComponentByClass)
          {
            REAnchoringComponentGetComponentType();
            REEntityAddComponentByClass();
          }
        }
        else if (ComponentByClass)
        {
          REAnchoringComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        type metadata accessor for ModelEntity();
        if (swift_dynamicCastMetatype())
        {
          uint64_t v42 = (void *)MEMORY[0x263F8DD08];
          uint64_t aBlock = v23;
          static __EntityRef.__fromCore(_:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
          swift_allocObject();
          uint64_t v28 = MEMORY[0x23ECB8920](v8);
        }
        else
        {
          type metadata accessor for BodyTrackedEntity();
          if (swift_dynamicCastMetatype())
          {
            uint64_t v42 = (void *)MEMORY[0x263F8DD08];
            uint64_t aBlock = v23;
            static __EntityRef.__fromCore(_:)();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
            swift_allocObject();
            uint64_t v28 = MEMORY[0x23ECB8BB0](v8);
          }
          else
          {
            if (!swift_dynamicCastMetatype())
            {
              type metadata accessor for Entity();
              uint64_t v42 = (void *)MEMORY[0x263F8DD08];
              uint64_t aBlock = v23;
              static __EntityRef.__fromCore(_:)();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
              uint64_t v29 = static Entity.__fromCore(_:)();
              (*(void (**)(char *, uint64_t))(v38[0] + 8))(v8, v5);
              v3[3] = v29;
              goto LABEL_23;
            }
            uint64_t v42 = (void *)MEMORY[0x263F8DD08];
            uint64_t aBlock = v23;
            static __EntityRef.__fromCore(_:)();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
            swift_allocObject();
            uint64_t v28 = MEMORY[0x23ECB89B0](v8);
          }
        }
        uint64_t v29 = v28;
        v3[3] = v28;
LABEL_23:
        uint64_t v30 = MEMORY[0x263F8EE80];
        type metadata accessor for BehaviorsCommitter();
        uint64_t v31 = (void *)swift_allocObject();
        v31[3] = v30;
        swift_retain();
        v31[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        v31[2] = v29;
        *(void *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v31;
        uint64_t v32 = swift_allocObject();
        swift_weakInit();
        uint64_t v43 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
        uint64_t v44 = v32;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v40 = 1107296256;
        uint64_t v41 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
        uint64_t v42 = &block_descriptor_13_0;
        long long v33 = _Block_copy(&aBlock);
        swift_release();
        uint64_t v34 = v3[3];
        uint64_t v35 = swift_allocObject();
        swift_weakInit();
        swift_unownedRetainStrong();
        swift_unownedRetain();
        swift_release();
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = v34;
        *(void *)(v36 + 24) = v35;
        uint64_t v43 = partial apply for closure #2 in ImportSession.init<A>(core:entityType:);
        uint64_t v44 = v36;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v40 = 1107296256;
        uint64_t v41 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
        uint64_t v42 = &block_descriptor_20;
        uint64_t v37 = _Block_copy(&aBlock);
        swift_release();
        RIOImportSessionSetRegistrationForScenes();
        _Block_release(v37);
        _Block_release(v33);
        RIOImportSessionSetSwiftObject();
        ImportSession.registerDefaultSwiftBuilders()();

        return v3;
      }

      swift_release();
      uint64_t v15 = (void *)&unk_268A58000;
    }
    else
    {
    }
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
  }
  else
  {
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)((char *)v3
                                                                         + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
  swift_bridgeObjectRelease();
  type metadata accessor for ImportSession(0);
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t closure #1 in ImportSession.init<A>(core:entityType:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v101 = a3;
  id v97 = a1;
  uint64_t v98 = a2;
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v99);
  id v95 = &v76[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  uint64_t v88 = &v76[-v5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v76[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v89 = &v76[-v10];
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = &v76[-v12];
  MEMORY[0x270FA5388](v14);
  id v83 = &v76[-v15];
  MEMORY[0x270FA5388](v16);
  id v18 = &v76[-v17];
  MEMORY[0x270FA5388](v19);
  uint64_t v87 = &v76[-v20];
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = &v76[-v22];
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v102 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  id v100 = &v76[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v26);
  id v84 = &v76[-v27];
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = &v76[-v29];
  uint64_t v31 = type metadata accessor for __SceneRef();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = &v76[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int8x16_t v86 = v13;
    id v79 = v8;
    uint64_t v36 = result;
    type metadata accessor for Scene();
    v104[3] = MEMORY[0x263F8DD08];
    v104[0] = v97;
    static __SceneRef.__fromCore(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v104);
    uint64_t v37 = static Scene.__fromCore(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v32 + 8))(v34, v31);
    uint64_t v38 = String.init(cString:)();
    uint64_t v40 = v39;
    uint64_t v98 = v36;
    uint64_t v80 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
    swift_retain();
    Scene.__sceneIdentifier.getter();
    uint64_t v96 = v38;
    id v97 = v40;
    SafeSceneUUIDTable.getOrAssign(to:forScene:fallback:)(v38, v40, 1, (uint64_t)v23, (uint64_t)v30);
    swift_release();
    char v94 = v23;
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
    uint64_t v41 = (uint64_t)v87;
    uint64_t v92 = v37;
    Scene.__sceneIdentifier.getter();
    uint64_t v42 = v102;
    uint64_t v43 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v102 + 16);
    uint64_t v91 = v102 + 16;
    uint64_t v93 = v30;
    v43(v18, v30, v24);
    uint64_t v44 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56);
    uint64_t v90 = v42 + 56;
    v44((uint64_t)v18, 0, 1, v24);
    uint64_t v45 = v88;
    uint64_t v46 = (uint64_t)&v88[*(int *)(v99 + 48)];
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v41, (uint64_t)v88, &demangling cache variable for type metadata for UUID?);
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v18, v46, &demangling cache variable for type metadata for UUID?);
    int64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    unsigned int v48 = v47((uint64_t)v45, 1, v24);
    int8x16_t v85 = v44;
    uint64_t v82 = v42 + 48;
    uint64_t v81 = v47;
    if (v48 == 1)
    {
      outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?(v41, &demangling cache variable for type metadata for UUID?);
      unsigned int v49 = v47(v46, 1, v24);
      uint64_t v50 = (uint64_t)v94;
      uint64_t v51 = v24;
      if (v49 == 1)
      {
        outlined destroy of Any?((uint64_t)v45, &demangling cache variable for type metadata for UUID?);
        uint64_t v52 = v85;
        goto LABEL_10;
      }
    }
    else
    {
      id v78 = v18;
      id v53 = v83;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v45, (uint64_t)v83, &demangling cache variable for type metadata for UUID?);
      if (v47(v46, 1, v24) != 1)
      {
        uint64_t v54 = v102;
        uint64_t v55 = v84;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v102 + 32))(v84, v46, v24);
        _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        int v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v56 = *(void (**)(unsigned char *, uint64_t))(v54 + 8);
        v56(v55, v24);
        outlined destroy of Any?((uint64_t)v78, &demangling cache variable for type metadata for UUID?);
        outlined destroy of Any?(v41, &demangling cache variable for type metadata for UUID?);
        v56(v53, v24);
        outlined destroy of Any?((uint64_t)v45, &demangling cache variable for type metadata for UUID?);
        uint64_t v50 = (uint64_t)v94;
        uint64_t v52 = v44;
        uint64_t v51 = v24;
        if (v77) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      outlined destroy of Any?((uint64_t)v78, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?(v41, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(unsigned char *, uint64_t))(v102 + 8))(v53, v24);
      uint64_t v50 = (uint64_t)v94;
      uint64_t v51 = v24;
    }
    outlined destroy of Any?((uint64_t)v45, &demangling cache variable for type metadata for (UUID?, UUID?));
    uint64_t v52 = v85;
LABEL_9:
    v43((unsigned char *)v50, v93, v51);
    v52(v50, 0, 1, v51);
    Scene.__sceneIdentifier.setter();
LABEL_10:
    type metadata accessor for Entity();
    __n128 v57 = (unsigned char *)static Entity.fromCore(_:ignoringEntityInfo:)();
    swift_retain();
    Entity.__interactionIdentifier.getter();
    int64_t v58 = v100;
    SafeSceneUUIDTable.getOrAssign(to:forScene:fallback:)(v96, v97, 0, v50, (uint64_t)v100);
    swift_release();
    outlined destroy of Any?(v50, &demangling cache variable for type metadata for UUID?);
    uint64_t v59 = (uint64_t)v86;
    uint64_t v88 = v57;
    Entity.__interactionIdentifier.getter();
    uint64_t v60 = (uint64_t)v89;
    v43(v89, v58, v51);
    v52(v60, 0, 1, v51);
    uint64_t v61 = v95;
    uint64_t v62 = (uint64_t)&v95[*(int *)(v99 + 48)];
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v59, (uint64_t)v95, &demangling cache variable for type metadata for UUID?);
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v60, v62, &demangling cache variable for type metadata for UUID?);
    id v63 = v81;
    if (v81((uint64_t)v61, 1, v51) == 1)
    {
      outlined destroy of Any?(v60, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?(v59, &demangling cache variable for type metadata for UUID?);
      int v64 = v63(v62, 1, v51);
      uint64_t v65 = v102;
      uint64_t v66 = v100;
      if (v64 == 1)
      {
        outlined destroy of Any?((uint64_t)v61, &demangling cache variable for type metadata for UUID?);
LABEL_18:
        uint64_t v72 = *(void *)(v98 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter);
        String.utf8CString.getter();
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v73 = (void *)RIOPxrSdfPathCreateFromCString();
        swift_release();
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v103 = *(void *)(v72 + 32);
        *(void *)(v72 + 32) = 0x8000000000000000;
        specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v101, v73, isUniquelyReferenced_nonNull_native);
        *(void *)(v72 + 32) = v103;
        swift_bridgeObjectRelease();
        swift_endAccess();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        id v75 = *(void (**)(unsigned char *, uint64_t))(v65 + 8);
        v75(v66, v51);
        return ((uint64_t (*)(unsigned char *, uint64_t))v75)(v93, v51);
      }
    }
    else
    {
      uint64_t v67 = (uint64_t)v79;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v61, (uint64_t)v79, &demangling cache variable for type metadata for UUID?);
      if (v63(v62, 1, v51) != 1)
      {
        uint64_t v65 = v102;
        uint64_t v69 = v84;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v102 + 32))(v84, v62, v51);
        _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v71 = *(void (**)(unsigned char *, uint64_t))(v65 + 8);
        v71(v69, v51);
        outlined destroy of Any?(v60, &demangling cache variable for type metadata for UUID?);
        outlined destroy of Any?((uint64_t)v86, &demangling cache variable for type metadata for UUID?);
        v71((unsigned char *)v67, v51);
        outlined destroy of Any?((uint64_t)v95, &demangling cache variable for type metadata for UUID?);
        uint64_t v66 = v100;
        id v68 = v94;
        if (v70) {
          goto LABEL_18;
        }
LABEL_17:
        v43(v68, v66, v51);
        v85((uint64_t)v68, 0, 1, v51);
        Entity.__interactionIdentifier.setter();
        goto LABEL_18;
      }
      outlined destroy of Any?(v60, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?((uint64_t)v86, &demangling cache variable for type metadata for UUID?);
      uint64_t v65 = v102;
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v67, v51);
      uint64_t v66 = v100;
    }
    outlined destroy of Any?((uint64_t)v61, &demangling cache variable for type metadata for (UUID?, UUID?));
    id v68 = v94;
    goto LABEL_17;
  }
  return result;
}