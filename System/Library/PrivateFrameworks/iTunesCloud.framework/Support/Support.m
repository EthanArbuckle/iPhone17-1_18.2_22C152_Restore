void sub_1000058C8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000084B4;
  v3[3] = &unk_1001BD7E0;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "_onQueue_sendRequest:withInternalResponseHandler:", v2, v3);
}

void sub_100005A44(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100005DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100005EF8(uint64_t a1)
{
  v2 = *(void **)(*(void *)(a1 + 32) + 72);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100006424;
  v5[3] = &unk_1001BB248;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_1000060C0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 responseCode] == (id)200) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 databaseRevision];
  }
  id v3 = [v4 error];
  [*(id *)(a1 + 32) setError:v3];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100006424(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v10 = a2;
  if ([*(id *)(a1 + 32) isEqual:a3])
  {
    id v7 = [v10 copy];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    *a4 = 1;
  }
}

void sub_100006690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006880(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138543362;
      *(void *)v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not get ICML state reason, error=%{public}@", (uint8_t *)&v17, 0xCu);
    }
LABEL_17:

    goto LABEL_18;
  }
  if (v5)
  {
    id v7 = [v5 objectForKey:@"AutoEnableCloudLibraryFailureReasonKey"];
    unsigned int v8 = [v7 intValue];
    unsigned int v9 = [v7 intValue];
    unsigned int v10 = v9;
    if (v8 == -101 || v9 == -102)
    {
      v13 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 67109376;
        *(_DWORD *)v18 = v8 == -101;
        *(_WORD *)&v18[4] = 1024;
        *(_DWORD *)&v18[6] = v10 == -102;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Not allowing automatic enabling of iCML notEnabledInBackup=%{BOOL}u, unsupportedDisposition=%{BOOL}u", (uint8_t *)&v17, 0xEu);
      }
    }
    else
    {
      [*(id *)(a1 + 32) setSupportsAutomaticEnablingiCloudMusicLibrary:1];
    }
    v14 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100006F5C(*(void **)(a1 + 40));
      unsigned int v16 = [*(id *)(a1 + 32) supportsAutomaticEnablingiCloudMusicLibrary];
      int v17 = 67109634;
      *(_DWORD *)v18 = v15;
      *(_WORD *)&v18[4] = 2114;
      *(void *)&v18[6] = v5;
      __int16 v19 = 1024;
      unsigned int v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "isEnablingICMLDestructive=%{BOOL}u, cloudLibraryStateReason=%{public}@, supportsAutomaticEnablingiCloudMusicLibrary=%d", (uint8_t *)&v17, 0x18u);
    }

    goto LABEL_17;
  }
  v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = sub_100006F5C(*(void **)(a1 + 40));
    int v17 = 67109120;
    *(_DWORD *)v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Allowing automatic enabling of iCML, isEnablingICMLDestructive=%{BOOL}u", (uint8_t *)&v17, 8u);
  }

  [*(id *)(a1 + 32) setSupportsAutomaticEnablingiCloudMusicLibrary:1];
LABEL_18:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_100006F5C(void *a1)
{
  id v1 = a1;
  if (MSVDeviceSupportsMultipleLibraries())
  {
    id v2 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int v10 = &v9;
    uint64_t v11 = 0x2050000000;
    id v3 = (void *)qword_1001F3970;
    uint64_t v12 = qword_1001F3970;
    if (!qword_1001F3970)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000D7198;
      v8[3] = &unk_1001BE9E8;
      v8[4] = &v9;
      sub_1000D7198((uint64_t)v8);
      id v3 = (void *)v10[3];
    }
    id v4 = v3;
    _Block_object_dispose(&v9, 8);
    id v5 = [v1 userIdentity];
    id v6 = [v4 controllerWithUserIdentity:v5];
    id v2 = [v6 isEnablingCloudLibraryDestructive];
  }
  return v2;
}

void sub_100007070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100007158(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v3 = @"Unknown";
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4 == 1) {
      CFStringRef v3 = @"Saga";
    }
    BOOL v5 = v4 == 0;
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    if (v5) {
      CFStringRef v3 = @"Jalisco";
    }
    uint64_t v38 = v6;
    __int16 v39 = 2114;
    CFStringRef v40 = v3;
    __int16 v41 = 2114;
    uint64_t v42 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ finished update operation for %{public}@ library, response=%{public}@", buf, 0x20u);
  }

  unsigned int v8 = *(void **)(*(void *)(a1 + 32) + 152);
  uint64_t v9 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
  [v8 removeObjectForKey:v9];

  unsigned int v10 = [*(id *)(a1 + 40) objectForKey:@"ICDCloudMusicLibraryProgressUpdateOperationStatusKey"];
  id v11 = [v10 integerValue];

  if (*(void *)(a1 + 48) == 1)
  {
    uint64_t v12 = [*(id *)(a1 + 40) objectForKey:@"ICDCloudMusicLibraryProgressRequestReasonKey"];
    id v13 = [v12 integerValue];

    if (v11 == (id)5)
    {
      unsigned int v15 = [*(id *)(a1 + 40) objectForKey:@"ICDCloudMusicLibraryProgressTemporaryFialureTypeKey"];
      unsigned int v16 = v15;
      if (v15)
      {
        id v17 = [v15 integerValue];
        id v18 = [*(id *)(a1 + 32) configuration];
        __int16 v19 = +[NSNumber numberWithInteger:v17];
        sub_1000D62EC(v18, v19, 1, 0);
      }
    }
    else
    {
      if (v11 == (id)3)
      {
        *(unsigned char *)(*(void *)(a1 + 32) + 144) = 0;
        v22 = [*(id *)(a1 + 40) objectForKey:@"ICDCloudMusicLibraryProgressWasExplicitUserActionKey"];
        unsigned __int8 v23 = [v22 BOOLValue];

        v24 = [*(id *)(a1 + 40) objectForKey:@"ICDCloudMusicLibraryProgressWasInitialImportKey"];
        unsigned __int8 v25 = [v24 BOOLValue];

        v26 = [*(id *)(a1 + 40) objectForKey:@"ICDCloudMusicLibraryProgressPermanentFailureTypeKey"];
        id v27 = [v26 integerValue];

        v28 = *(void **)(a1 + 32);
        v29 = [v28 configuration];
        v30 = [v29 clientIdentity];
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_10001FE40;
        v34[3] = &unk_1001B9DE0;
        unsigned __int8 v35 = v23;
        unsigned __int8 v36 = v25;
        v34[4] = *(void *)(a1 + 32);
        v34[5] = v27;
        [v28 disableCloudLibraryWithClientIdentity:v30 reason:v27 completionHandler:v34];

        return [*(id *)(a1 + 32) _postLibraryUpdateProgressChangedForLibraryType:*(void *)(a1 + 48)];
      }
      if (v11 == (id)1)
      {
        *(_DWORD *)(*(void *)(a1 + 32) + 132) = 0;
        uint64_t v14 = *(void *)(a1 + 32);
LABEL_16:
        *(unsigned char *)(v14 + 144) = 0;
        return [*(id *)(a1 + 32) _postLibraryUpdateProgressChangedForLibraryType:*(void *)(a1 + 48)];
      }
    }
    unsigned int v20 = [*(id *)(a1 + 32) musicLibrary];
    id v21 = [v20 sagaOnDiskDatabaseRevision];

    uint64_t v14 = *(void *)(a1 + 32);
    if (v21) {
      goto LABEL_16;
    }
    ++*(_DWORD *)(v14 + 132);
    v31 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v38 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%{public}@ - scheduling initial cloud library update", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _enqueueCloudUpdateLibraryOperationForReason:v13];
  }
  return [*(id *)(a1 + 32) _postLibraryUpdateProgressChangedForLibraryType:*(void *)(a1 + 48)];
}

void sub_100007570(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) underlyingConnection];
  if ([v2 connectionState] == (id)2)
  {
LABEL_7:

    goto LABEL_8;
  }
  unsigned __int8 v3 = [*(id *)(a1 + 32) loginRequestInFlight];

  if ((v3 & 1) == 0)
  {
    uint64_t v4 = [*(id *)(a1 + 32) connectionGroup];
    dispatch_group_enter(v4);

    [*(id *)(a1 + 32) setLoginRequestInFlight:1];
    id v2 = +[NSString stringWithFormat:@"%@ Ensure Connection", objc_opt_class()];
    id v5 = [objc_alloc((Class)MSVXPCTransaction) initWithName:v2];
    [v5 beginTransaction];
    objc_initWeak(&location, *(id *)(a1 + 32));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10008182C;
    v14[3] = &unk_1001BBB78;
    objc_copyWeak(&v16, &location);
    v14[4] = *(void *)(a1 + 32);
    id v6 = v5;
    id v15 = v6;
    uint64_t v7 = objc_retainBlock(v14);
    unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 32) baseURL];

    uint64_t v9 = *(void **)(a1 + 32);
    if (v8) {
      [v9 _continueConnectingToLibraryWithCompletionHandler:v7];
    }
    else {
      [v9 _connectToLibraryWithCompletionHandler:v7 allowRetry:1 forceBagReload:0];
    }

    objc_destroyWeak(&v16);
    objc_destroyWeak(&location);

    goto LABEL_7;
  }
LABEL_8:
  unsigned int v10 = [*(id *)(a1 + 32) connectionGroup];
  id v11 = [*(id *)(a1 + 32) connectionQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100010D24;
  block[3] = &unk_1001BEC70;
  id v13 = *(id *)(a1 + 40);
  dispatch_group_notify(v10, v11, block);
}

void sub_1000077B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10000781C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained status] == (id)1)
    {
      uint64_t v7 = [(id)objc_opt_class() logCategory];
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_10:

        goto LABEL_11;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      int v20 = 134218498;
      uint64_t v21 = v8;
      __int16 v22 = 2114;
      id v23 = (id)objc_opt_class();
      __int16 v24 = 2048;
      unsigned __int8 v25 = v6;
      id v9 = v23;
      unsigned int v10 = "CloudLibrary %p - Operation of type %{public}@ %p completed with status CloudLibraryOperationStatusSuccess.";
    }
    else
    {
      if ([v6 status] == (id)2)
      {
        id v11 = [(id)objc_opt_class() logCategory];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 32);
          int v20 = 134218498;
          uint64_t v21 = v12;
          __int16 v22 = 2114;
          id v23 = (id)objc_opt_class();
          __int16 v24 = 2048;
          unsigned __int8 v25 = v6;
          id v13 = v23;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CloudLibrary %p - Operation of type %{public}@ %p completed with status CloudLibraryOperationStatusFailed.", (uint8_t *)&v20, 0x20u);
        }
        [*(id *)(a1 + 32) _enqueueFailedOperation:v6];
        uint64_t v7 = [*(id *)(a1 + 32) underlyingConnection];
        [v7 disconnect];
        goto LABEL_10;
      }
      if ([v6 status] == (id)3)
      {
        uint64_t v7 = [(id)objc_opt_class() logCategory];
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_10;
        }
        uint64_t v15 = *(void *)(a1 + 32);
        int v20 = 134218498;
        uint64_t v21 = v15;
        __int16 v22 = 2114;
        id v23 = (id)objc_opt_class();
        __int16 v24 = 2048;
        unsigned __int8 v25 = v6;
        id v9 = v23;
        unsigned int v10 = "CloudLibrary %p - Operation of type %{public}@ %p completed with status CloudLibraryOperationStatusPermanentlyFailed.";
      }
      else
      {
        id v16 = [v6 status];
        uint64_t v7 = [(id)objc_opt_class() logCategory];
        BOOL v17 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        if (v16 == (id)4)
        {
          if (!v17) {
            goto LABEL_10;
          }
          uint64_t v18 = *(void *)(a1 + 32);
          int v20 = 134218498;
          uint64_t v21 = v18;
          __int16 v22 = 2114;
          id v23 = (id)objc_opt_class();
          __int16 v24 = 2048;
          unsigned __int8 v25 = v6;
          id v9 = v23;
          unsigned int v10 = "CloudLibrary %p - Operation of type %{public}@ %p completed with status CloudLibraryOperationStatusCancelled.";
        }
        else
        {
          if (!v17) {
            goto LABEL_10;
          }
          uint64_t v19 = *(void *)(a1 + 32);
          int v20 = 134218498;
          uint64_t v21 = v19;
          __int16 v22 = 2114;
          id v23 = (id)objc_opt_class();
          __int16 v24 = 2048;
          unsigned __int8 v25 = v6;
          id v9 = v23;
          unsigned int v10 = "CloudLibrary %p - OPERATION FAILED TO SET STATUS %{public}@ %p";
        }
      }
    }
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v20, 0x20u);

    goto LABEL_10;
  }
LABEL_11:
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16))(v14, v3, v4, v5);
  }
}

void sub_10000803C(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v3 = @"Unknown";
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5 == 1) {
      CFStringRef v3 = @"Saga";
    }
    int v6 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    if (!v5) {
      CFStringRef v3 = @"Jalisco";
    }
    uint64_t v12 = v4;
    __int16 v13 = 2114;
    CFStringRef v14 = v3;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ starting update operation for %{public}@ library, initialImport=%{BOOL}u", buf, 0x1Cu);
  }

  uint64_t v7 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  uint64_t v8 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v7, @"ICDCloudLibraryIsInitialImportKey", 0];

  id v9 = *(void **)(*(void *)(a1 + 32) + 152);
  unsigned int v10 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  [v9 setObject:v8 forKey:v10];

  [*(id *)(a1 + 32) _postLibraryUpdateProgressChangedForLibraryType:*(void *)(a1 + 40)];
}

uint64_t sub_1000083C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v11 = 134218496;
    uint64_t v12 = v9;
    __int16 v13 = 1024;
    int v14 = a5;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadIsJaliscoUpdateInProgressForConfiguration: - Jalisco initial import: %{BOOL}u. Update in progress: %{BOOL}u", (uint8_t *)&v11, 0x18u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a4, a5);
  }
  return result;
}

void sub_1000084B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100010D0C;
    block[3] = &unk_1001BEC98;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

void sub_10000872C(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) failedToConnect];
  CFStringRef v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    _[v3 _enqueuePendingOperation:v4];
  }
  else
  {
    id v5 = [v3 underlyingConnection];
    [*(id *)(a1 + 40) setConnection:v5];

    id v6 = [*(id *)(a1 + 40) completionBlock];
    objc_initWeak(&location, *(id *)(a1 + 40));
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    id v11 = sub_10000781C;
    id v12 = &unk_1001BCD88;
    objc_copyWeak(&v15, &location);
    uint64_t v13 = *(void *)(a1 + 32);
    id v7 = v6;
    id v14 = v7;
    [*(id *)(a1 + 40) setCompletionBlock:&v9];
    uint64_t v8 = +[ICDServer server];
    [v8 addOperation:*(void *)(a1 + 40) priority:*(unsigned int *)(a1 + 48)];

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

void sub_100008884(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100008DF4(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(void **)(a1 + 32);
  id v11 = a2;
  uint64_t v4 = [v3 configuration];
  id v5 = [v4 userIdentity];
  [v11 setIdentity:v5];

  id v6 = [*(id *)(a1 + 32) configuration];
  id v7 = [v6 userIdentityStore];
  [v11 setIdentityStore:v7];

  uint64_t v8 = +[ICClientInfo defaultInfo];
  [v11 setClientInfo:v8];

  id v9 = objc_msgSend(objc_alloc((Class)ICStoreURLResponseAuthenticationProvider), "initWithUserInteractionLevel:", objc_msgSend(*(id *)(a1 + 40), "verificationInteractionLevel"));
  [v11 setAuthenticationProvider:v9];

  id v10 = objc_alloc_init((Class)ICStoreDialogResponseHandler);
  [v11 setStoreDialogResponseHandler:v10];

  objc_msgSend(v11, "setPersonalizationStyle:", objc_msgSend(*(id *)(a1 + 40), "requestPersonalizationStyle"));
}

void sub_1000095D8(uint64_t a1)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = (void (*)(uint64_t, const __CFString *, uint64_t))off_1001F38B8;
  id v9 = off_1001F38B8;
  if (!off_1001F38B8)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100079AEC;
    v5[3] = &unk_1001BE9E8;
    void v5[4] = &v6;
    sub_100079AEC(v5);
    uint64_t v2 = (void (*)(uint64_t, const __CFString *, uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1, @"com.apple.Music", 1000);
  }
  else
  {
    CFStringRef v3 = +[NSAssertionHandler currentHandler];
    uint64_t v4 = +[NSString stringWithUTF8String:"void soft_SBSSetStatusBarShowsActivityForApplication(Boolean, CFStringRef, unsigned int)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ICDServerOperationsManager.m", 20, @"%s", dlerror());

    __break(1u);
  }
}

void sub_100009708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000097E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009898(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) musicLibrary];
  CFStringRef v3 = [v2 valueForDatabaseProperty:@"MLArtistHeroImageImportDate"];
  [v3 doubleValue];
  uint64_t v4 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");

  id v5 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    [v4 timeIntervalSince1970];
    int v27 = 134217984;
    uint64_t v28 = (uint64_t)v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Last artist update time: %{time_t}zd", (uint8_t *)&v27, 0xCu);
  }

  if (!v4) {
    goto LABEL_7;
  }
  id v7 = +[NSDate date];
  [v7 timeIntervalSinceDate:v4];
  double v9 = v8;

  id v10 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = (double)*(uint64_t *)(a1 + 48);
    int v27 = 134218240;
    uint64_t v28 = *(void *)&v9;
    __int16 v29 = 2048;
    double v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Elapsed time since last artist hero image update: %g, minimum: %g", (uint8_t *)&v27, 0x16u);
  }

  if (v9 < (double)*(uint64_t *)(a1 + 48))
  {
    uint64_t v19 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v27) = 0;
      int v20 = "Skipping update, not enough time has passed since last update.";
      goto LABEL_14;
    }
  }
  else
  {
LABEL_7:
    id v12 = [*(id *)(a1 + 32) currentUpdateOperation];

    if (v12)
    {
      uint64_t v13 = [*(id *)(a1 + 32) followupUpdateOpertion];

      if (!v13)
      {
        id v14 = [DetermineArtistStoreIDLookupTypeOperation alloc];
        id v15 = [*(id *)(a1 + 32) artworkImporter];
        uint64_t v16 = *(void *)(a1 + 40);
        BOOL v17 = [*(id *)(a1 + 32) operationQueue];
        uint64_t v18 = [(QueueAwareOperation *)v14 initWithArtworkImporter:v15 clientIdentity:v16 operationQueue:v17 artistPersistentIDsToUpdate:0 albumArtistPersistentIDsToUpdate:0];
        [*(id *)(a1 + 32) setFollowupUpdateOpertion:v18];
      }
      uint64_t v19 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v27) = 0;
        int v20 = "Artist hero image update already in progress: scheduling a maximum of one additional update.";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v27, 2u);
      }
    }
    else
    {
      uint64_t v21 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v27) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updating all artist hero images...", (uint8_t *)&v27, 2u);
      }

      __int16 v22 = [DetermineArtistStoreIDLookupTypeOperation alloc];
      id v23 = [*(id *)(a1 + 32) artworkImporter];
      uint64_t v24 = *(void *)(a1 + 40);
      unsigned __int8 v25 = [*(id *)(a1 + 32) operationQueue];
      uint64_t v19 = [(QueueAwareOperation *)v22 initWithArtworkImporter:v23 clientIdentity:v24 operationQueue:v25 artistPersistentIDsToUpdate:0 albumArtistPersistentIDsToUpdate:0];

      v26 = [*(id *)(a1 + 32) operationQueue];
      [v26 addOperation:v19];

      [*(id *)(a1 + 32) setCurrentUpdateOperation:v19];
    }
  }
}

void sub_100009F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009F5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  CFStringRef v3 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v20 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - Library update finished.", buf, 0xCu);
  }

  id v4 = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = [WeakRetained updateLibraryQueue];
    double v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    uint64_t v13 = sub_10000A3A0;
    id v14 = &unk_1001BC218;
    id v15 = v4;
    id v6 = WeakRetained;
    uint64_t v7 = *(void *)(a1 + 56);
    id v16 = v6;
    uint64_t v17 = v7;
    char v18 = *(unsigned char *)(a1 + 64);
    dispatch_async(v5, &v11);

    if (*(unsigned char *)(a1 + 65))
    {
      double v8 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        id v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - Importing artwork and screenshots if relevant [post library update]", buf, 0xCu);
      }

      double v9 = objc_msgSend(v6, "artworkImporter", v11, v12, v13, v14, v15);
      [v9 importAllItemArtworkAndScreenshotsWithClientIdentity:*(void *)(a1 + 32)];
    }
  }
  notify_post("com.apple.itunescloudd.jaliscoUpdateInProgressChanged");
  id v10 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v20 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ - Posting Jalisco update in progress notification", buf, 0xCu);
  }
}

void sub_10000A1BC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [v4 userIdentityStore];
  id v6 = [v4 userIdentity];

  id v18 = 0;
  uint64_t v7 = [v5 getPropertiesForUserIdentity:v6 error:&v18];
  id v8 = v18;
  if (!v8 && v7)
  {
    id v9 = [v7 cloudLibraryStateReason];
    if (v3)
    {
      id v10 = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100010CF4;
      block[3] = &unk_1001BEC48;
      id v14 = v3;
      id v9 = v9;
      id v13 = v9;
      dispatch_async(v10, block);
    }
    goto LABEL_7;
  }
  if (v3)
  {
    double v11 = dispatch_get_global_queue(0, 0);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000D7180;
    v15[3] = &unk_1001BEC48;
    id v17 = v3;
    id v16 = v8;
    dispatch_async(v11, v15);

    id v9 = v17;
LABEL_7:
  }
}

void sub_10000A3A0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) status];
  id v3 = [*(id *)(a1 + 40) updateLibraryOperation];
  id v4 = [v3 error];
  id v5 = [v4 copy];

  [*(id *)(a1 + 40) setUpdateLibraryOperation:0];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = [*(id *)(a1 + 40) updateLibraryCompletionHandlers];
  id v7 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v22;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v22 != v9) {
          objc_enumerationMutation(v6);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v21 + 1) + 8 * (void)v10) + 16))();
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }
    while (v8);
  }

  double v11 = [*(id *)(a1 + 40) updateLibraryCompletionHandlers];
  [v11 removeAllObjects];

  uint64_t v12 = *(void **)(*(void *)(a1 + 40) + 40);
  id v13 = +[NSNumber numberWithInteger:v2];
  id v14 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
  id v15 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
  id v16 = +[NSDictionary dictionaryWithObjectsAndKeys:v13, @"ICDCloudMusicLibraryProgressUpdateOperationStatusKey", v14, @"ICDCloudMusicLibraryProgressRequestReasonKey", v15, @"ICDCloudMusicLibraryProgressWasInitialImportKey", 0];
  [v12 finishedUpdateOperationForLibraryType:0 withResponse:v16];

  id v17 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543362;
    uint64_t v26 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@ - Update Jalisco library completed", buf, 0xCu);
  }

  uint64_t v19 = *(void *)(a1 + 40);
  id v20 = *(void **)(v19 + 64);
  *(void *)(v19 + 64) = 0;
}

void sub_10000A628(uint64_t a1, void *a2, void *a3)
{
  id v79 = a2;
  id v78 = a3;
  if (v78)
  {
    id v5 = os_log_create("com.apple.amp.itunescloudd", "Connections");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      unint64_t v86 = v6;
      __int16 v87 = 2114;
      id v88 = v78;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to send request to %{public}@. err=%{public}@", buf, 0x16u);
    }
LABEL_16:

    goto LABEL_17;
  }
  if (*(void *)(a1 + 40))
  {
    id v5 = +[NSFileManager defaultManager];
    id v7 = [*(id *)(a1 + 40) path];
    id v8 = [v7 stringByDeletingLastPathComponent];
    id v82 = 0;
    [v5 createDirectoryAtPath:v8 withIntermediateDirectories:1 attributes:0 error:&v82];
    id v78 = v82;
    [v5 removeItemAtPath:v7 error:0];
    uint64_t v9 = [v79 bodyDataURL];
    if (!v9) {
      goto LABEL_8;
    }
    id v10 = (void *)v9;
    double v11 = [v79 bodyDataURL];
    uint64_t v12 = [v11 absoluteString];
    unsigned int v13 = [v5 fileExistsAtPath:v12];

    if (v13)
    {
      id v14 = [v79 bodyDataURL];
      uint64_t v15 = *(void *)(a1 + 40);
      id v81 = v78;
      [v5 linkItemAtURL:v14 toURL:v15 error:&v81];
      id v16 = v81;

      id v17 = [v79 bodyDataURL];
      [v5 removeItemAtURL:v17 error:0];
    }
    else
    {
LABEL_8:
      uint64_t v18 = [v79 bodyData];

      if (!v18)
      {
LABEL_11:
        if (v78)
        {
          uint64_t v19 = os_log_create("com.apple.amp.itunescloudd", "Connections");
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v20 = *(void *)(a1 + 40);
            *(_DWORD *)buf = 138543618;
            unint64_t v86 = v20;
            __int16 v87 = 2114;
            id v88 = v78;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Failed to write response data to %{public}@. err=%{public}@", buf, 0x16u);
          }
        }
        goto LABEL_16;
      }
      id v17 = [v79 bodyData];
      id v80 = v78;
      [v17 writeToFile:v7 options:1 error:&v80];
      id v16 = v80;
    }
    id v78 = v16;

    goto LABEL_11;
  }
  id v78 = 0;
LABEL_17:
  if (v79)
  {
    long long v21 = [v79 urlResponse];
    long long v22 = [v21 allHeaderFields];
    unint64_t v23 = (unint64_t)[v21 statusCode];
    long long v24 = [v79 bodyData];
    unsigned __int8 v25 = [v21 MIMEType];
    uint64_t v26 = +[ICDResponse responseWithCode:v23 headerFields:v22 data:v24 MIMEType:v25 error:0];
    if (v23 - 200 <= 6 && ((1 << (v23 + 56)) & 0x51) != 0)
    {
      int v27 = [*(id *)(a1 + 48) canonicalResponseForResponse:v26];
      uint64_t v28 = os_log_create("com.apple.amp.itunescloudd", "Connections");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v29 = v21;
        double v30 = v22;
        unint64_t v31 = *(void *)(a1 + 48);
        uint64_t v32 = (objc_class *)objc_opt_class();
        NSStringFromClass(v32);
        v33 = v76 = v25;
        v34 = v26;
        id v35 = [v27 responseCode];
        [v27 responseData];
        uint64_t v74 = a1;
        v37 = unsigned __int8 v36 = v24;
        id v38 = [v37 length];
        *(_DWORD *)buf = 134219010;
        unint64_t v86 = v31;
        long long v22 = v30;
        long long v21 = v29;
        __int16 v87 = 2114;
        id v88 = v33;
        __int16 v89 = 2048;
        v90 = v27;
        __int16 v91 = 2048;
        id v92 = v35;
        uint64_t v26 = v34;
        __int16 v93 = 2048;
        id v94 = v38;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received request %p response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x34u);

        long long v24 = v36;
        a1 = v74;

        unsigned __int8 v25 = v76;
      }

      if (*(void *)(a1 + 40)) {
        objc_msgSend(v27, "setResponseDataFileURL:");
      }
      __int16 v39 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    }
    else
    {
      if (v23 == 401)
      {
        v43 = os_log_create("com.apple.amp.itunescloudd", "Connections");
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Response: (HTTP 401) - Not Authenticated", buf, 2u);
        }
      }
      else
      {
        if ((v23 & 0xFFFFFFFFFFFFFFFBLL) != 0x190)
        {
          v45 = +[ICDResponseDataParser parseErrorInResponseData:v24];
          int v27 = v45;
          if (v23 == 403)
          {
            if (v45)
            {
              v75 = v24;
              v77 = v26;
              v46 = v25;
              v47 = [v45 objectForKey:&off_1001CC2F0];
              id v48 = [v47 unsignedIntegerValue];

              CFStringRef v83 = @"CloudLibraryConnectionRequestForbiddenAdditonalErrorCodeKey";
              v49 = +[NSNumber numberWithUnsignedInteger:v48];
              v84 = v49;
              v50 = +[NSDictionary dictionaryWithObjects:&v84 forKeys:&v83 count:1];
              v51 = +[NSError ic_cloudClientErrorWithCode:2019 userInfo:v50];

              unsigned __int8 v25 = v46;
              uint64_t v26 = v77;
              switch((unint64_t)v48)
              {
                case 0x3B6uLL:
                  v64 = sub_1000EFD44();
                  if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_83;
                  }
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v86) = 950;
                  v65 = "Response: (HTTP 403, DMAP %d) - Cloud DAAP Subscription Lapsed.";
                  goto LABEL_81;
                case 0x3B7uLL:
                  v64 = sub_1000EFD44();
                  if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_83;
                  }
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v86) = 951;
                  v65 = "Response: (HTTP 403, DMAP %d) - Cloud DAAP Client Expired (client DAAP version is less than the "
                        "minimum version supported by the server).";
                  goto LABEL_81;
                case 0x3B8uLL:
                  v69 = sub_1000EFD44();
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109120;
                    LODWORD(v86) = 952;
                    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "Response: (HTTP 403, DMAP %d) - Cloud DAAP Temporary Disconnect Requested.", buf, 8u);
                  }

                  v70 = [v27 objectForKey:&off_1001CC308];
                  id v71 = [v70 unsignedIntegerValue];

                  if (v71) {
                    uint64_t v72 = (uint64_t)v71;
                  }
                  else {
                    uint64_t v72 = 300;
                  }
                  v73 = sub_1000EFD44();
                  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 134217984;
                    unint64_t v86 = v72;
                    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Will retry request in %lu seconds", buf, 0xCu);
                  }

                  sleep(v72);
                  objc_msgSend(*(id *)(a1 + 56), "_onQueue_sendRequest:withInternalResponseHandler:", *(void *)(a1 + 48), *(void *)(a1 + 64));
                  long long v24 = v75;
                  uint64_t v26 = v77;
                  break;
                case 0x3B9uLL:
                case 0x3BBuLL:
                case 0x3BCuLL:
                case 0x3BDuLL:
                  goto LABEL_64;
                case 0x3BAuLL:
                  v64 = sub_1000EFD44();
                  if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_83;
                  }
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v86) = 954;
                  v65 = "Response: (HTTP 403, DMAP %d) - Cloud DAAP Item Limit Exceeded (no additional items may be added"
                        " to the library).";
LABEL_81:
                  v66 = v64;
                  uint32_t v67 = 8;
                  goto LABEL_82;
                case 0x3BEuLL:
                case 0x3BFuLL:
                  v52 = sub_1000EFD44();
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134217984;
                    unint64_t v86 = (unint64_t)v48;
                    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Response: (HTTP 403, DMAP %lu) - Collaboration limit exceeded.", buf, 0xCu);
                  }

                  v53 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
                  goto LABEL_85;
                default:
                  unsigned __int8 v25 = v46;
                  uint64_t v26 = v77;
                  if (v48 == (id)403)
                  {
                    v64 = sub_1000EFD44();
                    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      v65 = "Response: (HTTP 403, DMAP 403) - Request forbidden.";
                      v66 = v64;
                      uint32_t v67 = 2;
LABEL_82:
                      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, v65, buf, v67);
                    }
LABEL_83:
                  }
                  else
                  {
LABEL_64:
                    v68 = sub_1000EFD44();
                    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134217984;
                      unint64_t v86 = (unint64_t)v48;
                      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "Response: (HTTP 403, DMAP %lu) - Unknown code.", buf, 0xCu);
                    }
                  }
                  v53 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
LABEL_85:
                  v53();
                  long long v24 = v75;
                  break;
              }
            }
            else
            {
              v57 = sub_1000EFD44();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Response: (HTTP 403) - Response Missing DMAP Status Code", buf, 2u);
              }

              uint64_t v58 = *(void *)(a1 + 64);
              v51 = +[NSError ic_cloudClientErrorWithCode:2019 userInfo:0];
              (*(void (**)(uint64_t, void, void *))(v58 + 16))(v58, 0, v51);
            }
          }
          else
          {
            v54 = os_log_create("com.apple.amp.itunescloudd", "Connections");
            BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
            v56 = v26;
            if (v27)
            {
              if (v55)
              {
                *(_DWORD *)buf = 134218242;
                unint64_t v86 = v23;
                __int16 v87 = 2114;
                id v88 = v27;
                _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Unhandled Response: (HTTP %lu)\nParsed response data as DMAP error: %{public}@", buf, 0x16u);
              }
            }
            else if (v55)
            {
              id v59 = [objc_alloc((Class)NSString) initWithData:v24 encoding:4];
              v60 = v59;
              if (v59) {
                id v61 = v59;
              }
              else {
                id v61 = v24;
              }
              *(_DWORD *)buf = 134218242;
              unint64_t v86 = v23;
              __int16 v87 = 2114;
              id v88 = v61;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Unhandled Response: (HTTP %lu)\nRaw response data: %{public}@", buf, 0x16u);
            }
            uint64_t v62 = *(void *)(a1 + 64);
            v63 = +[NSError ic_cloudClientErrorWithCode:2018 userInfo:0];
            (*(void (**)(uint64_t, void, void *))(v62 + 16))(v62, 0, v63);

            uint64_t v26 = v56;
          }
          goto LABEL_40;
        }
        v43 = os_log_create("com.apple.amp.itunescloudd", "Connections");
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          unint64_t v86 = v23;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Response: (HTTP %lu) - Bad Request/No Found", buf, 0xCu);
        }
      }

      uint64_t v44 = *(void *)(a1 + 64);
      int v27 = +[NSError ic_cloudClientErrorWithCode:2017 userInfo:0];
      __int16 v39 = *(void (**)(void))(v44 + 16);
    }
    v39();
LABEL_40:

    goto LABEL_41;
  }
  CFStringRef v40 = os_log_create("com.apple.amp.itunescloudd", "Connections");
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    unint64_t v41 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 134218242;
    unint64_t v86 = v41;
    __int16 v87 = 2114;
    id v88 = v78;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Received no response for request %p, error %{public}@", buf, 0x16u);
  }

  uint64_t v42 = *(void *)(a1 + 64);
  if (!v78)
  {
    long long v21 = +[NSError ic_cloudClientErrorWithCode:2018 userInfo:0];
    (*(void (**)(uint64_t, void, void *))(v42 + 16))(v42, 0, v21);
LABEL_41:

    goto LABEL_42;
  }
  (*(void (**)(uint64_t, void, id))(v42 + 16))(v42, 0, v78);
LABEL_42:
}

void sub_10000B574(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to load subscription status. error=%{public}@", buf, 0xCu);
    }
    LOBYTE(v8) = 0;
    LOBYTE(v9) = 0;
  }
  else
  {
    unsigned int v9 = [v5 hasCapability:1];
    unsigned int v8 = [v5 isMatchEnabled];
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) userIdentity];
      *(_DWORD *)buf = 138543874;
      id v19 = v10;
      __int16 v20 = 1024;
      unsigned int v21 = v9;
      __int16 v22 = 1024;
      unsigned int v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ has AM subscription enabled=%{BOOL}u, Match subscription enabled=%{BOOL}u", buf, 0x18u);
    }
  }

  double v11 = *(void **)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100010C04;
    block[3] = &unk_1001BD2D0;
    id v15 = v11;
    char v16 = v9;
    char v17 = v8;
    id v14 = v6;
    dispatch_async(v12, block);
  }
}

void sub_10000B79C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) setClientIdentity:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 16) setJaliscoAccountID:*(void *)(a1 + 48)];
  id v2 = [*(id *)(a1 + 56) storefrontIdentifier];
  if (v2)
  {
    id v3 = [*(id *)(a1 + 56) storefrontIdentifier];
    [*(id *)(*(void *)(a1 + 32) + 16) setStorefrontIdentifier:v3];
  }
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 72);
  if (v4[8])
  {
    if (v5)
    {
      id v6 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v40 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - Update library operation in progress, attaching completion handler.", buf, 0xCu);
      }

      unsigned int v8 = [*(id *)(a1 + 32) updateLibraryCompletionHandlers];
      id v9 = [*(id *)(a1 + 72) copy];
      [v8 addObject:v9];
    }
  }
  else
  {
    if (v5)
    {
      id v10 = [v4 updateLibraryCompletionHandlers];
      id v11 = [*(id *)(a1 + 72) copy];
      [v10 addObject:v11];
    }
    uint64_t v12 = [[JaliscoMediaUpdateOperation alloc] initWithConfiguration:*(void *)(*(void *)(a1 + 32) + 8) reason:*(void *)(a1 + 80) supportedMediaKindsHandler:*(void *)(*(void *)(a1 + 32) + 40) clientIdentity:*(void *)(a1 + 40)];
    unsigned int v13 = *(void **)(*(void *)(a1 + 32) + 64);
    *(void *)(*(void *)(a1 + 32) + 64) = v12;

    id v14 = +[ICDServer server];
    id v15 = [v14 daemonOptionsForConfiguration:*(void *)(*(void *)(a1 + 32) + 8)];
    unsigned __int8 v16 = [v15 prohibitArtworkPrefetch];

    char v17 = *(NSObject **)(a1 + 80);
    id v18 = [*(id *)(*(void *)(a1 + 32) + 16) jaliscoOnDiskDatabaseRevision];
    BOOL v19 = v18 == 0;
    if (v16)
    {
      LODWORD(v17) = 0;
    }
    else if (v17 != 1)
    {
      LODWORD(v17) = [*(id *)(*(void *)(a1 + 32) + 16) jaliscoNeedsUpdateForTokens];
    }
    __int16 v20 = +[ICDeviceInfo currentDeviceInfo];
    if ([v20 isWatch])
    {
      unsigned int v21 = +[ICEnvironmentMonitor sharedMonitor];
      unsigned __int8 v22 = [v21 isCharging];

      if ((v22 & 1) == 0)
      {
        char v17 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Not performing artwork update because power is required", buf, 2u);
        }

        LODWORD(v17) = 0;
      }
    }
    else
    {
    }
    unsigned int v23 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v24 = v18 == 0;
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = ICCloudClientGetStringForRequestReason();
      uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 64);
      *(_DWORD *)buf = 138544386;
      uint64_t v40 = v25;
      __int16 v41 = 2114;
      uint64_t v42 = v26;
      __int16 v43 = 1024;
      BOOL v44 = v24;
      __int16 v45 = 1024;
      int v46 = (int)v17;
      __int16 v47 = 2048;
      uint64_t v48 = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@ - Updating media purchase history - Reason=%{public}@ - isInitialImport=%{BOOL}u - prefetchArtwork=%{BOOL}u, _updateLibraryOperation=%p", buf, 0x2Cu);
    }
    [*(id *)(*(void *)(a1 + 32) + 40) startingUpdateOperationForLibraryType:0 isInitialImport:*(void *)(a1 + 80) == 1];
    objc_initWeak(&location, *(id *)(a1 + 32));
    objc_initWeak(&from, *(id *)(*(void *)(a1 + 32) + 64));
    uint64_t v28 = *(void **)(*(void *)(a1 + 32) + 64);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100009F5C;
    v31[3] = &unk_1001BC240;
    objc_copyWeak(&v33, &location);
    objc_copyWeak(v34, &from);
    v34[1] = *(id *)(a1 + 80);
    BOOL v35 = v19;
    char v36 = (char)v17;
    id v32 = *(id *)(a1 + 40);
    [v28 setCompletionBlock:v31];
    if ([*(id *)(*(void *)(a1 + 32) + 64) isInitialImport]) {
      [*(id *)(a1 + 32) cancelPendingChanges];
    }
    [*(id *)(*(void *)(a1 + 32) + 64) setName:@"com.apple.itunescloudd.JaliscoRequestHandler.updateLibraryOperation"];
    [*(id *)(a1 + 64) addOperation:*(void *)(*(void *)(a1 + 32) + 64) priority:2];
    notify_post("com.apple.itunescloudd.jaliscoUpdateInProgressChanged");
    __int16 v29 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v40 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@ - Posting Jalisco update in progress notification", buf, 0xCu);
    }

    objc_destroyWeak(v34);
    objc_destroyWeak(&v33);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);
  }
}

void sub_10000BCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, id a20)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_10000D110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_10000DAD4(uint64_t a1)
{
  id v2 = ICCloudServerSupportedServiceGetName();
  id v3 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v17 = 134218242;
      uint64_t v18 = v5;
      __int16 v19 = 2114;
      __int16 v20 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Looking up XPC Listener [%{public}@]", (uint8_t *)&v17, 0x16u);
    }

    id v6 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v2];

    if (!v6)
    {
      switch(*(void *)(a1 + 48))
      {
        case 0:
          uint64_t v7 = +[NSAssertionHandler currentHandler];
          [v7 handleFailureInMethod:*(void *)(a1 + 56) object:*(void *)(a1 + 32) file:@"ICDServer.m" lineNumber:445 description:@"We should never get here"];

          goto LABEL_7;
        case 1:
          id v10 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.itunescloudd.xpc"];
          goto LABEL_13;
        case 2:
          unsigned int v8 = +[NSXPCListener anonymousListener];
          uint64_t v11 = [*(id *)(a1 + 32) networkAvailabilityService];
          goto LABEL_18;
        case 3:
          id v10 = +[NSXPCListener anonymousListener];
LABEL_13:
          unsigned int v8 = v10;
          [v10 setDelegate:*(void *)(a1 + 32)];
          break;
        case 4:
          unsigned int v8 = +[NSXPCListener anonymousListener];
          uint64_t v11 = [*(id *)(a1 + 32) cloudServiceStatusMonitor];
          goto LABEL_18;
        case 5:
          unsigned int v8 = +[NSXPCListener anonymousListener];
          uint64_t v11 = [*(id *)(a1 + 32) mediaUserStateCenterServer];
          goto LABEL_18;
        case 6:
          unsigned int v8 = +[NSXPCListener anonymousListener];
          uint64_t v11 = [*(id *)(a1 + 32) playbackPositionService];
          goto LABEL_18;
        case 7:
          unsigned int v8 = +[NSXPCListener anonymousListener];
          uint64_t v11 = [*(id *)(a1 + 32) cloudBadgingService];
LABEL_18:
          uint64_t v12 = (void *)v11;
          [v8 setDelegate:v11];

          break;
        default:
LABEL_7:
          unsigned int v8 = 0;
          break;
      }
      [*(id *)(*(void *)(a1 + 32) + 72) setObject:v8 forKeyedSubscript:v2];
      [v8 resume];
    }
    unsigned int v13 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 134218242;
      uint64_t v18 = v14;
      __int16 v19 = 2114;
      __int16 v20 = v2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Retrieved XPC Listener [%{public}@]", (uint8_t *)&v17, 0x16u);
    }

    uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v2];
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    id v4 = *(NSObject **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v17 = 134217984;
    uint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ICDServer %p - No XPC listener [unknown service]", (uint8_t *)&v17, 0xCu);
  }
}

void sub_10000DE40(uint64_t a1)
{
  id v11 = [(id)objc_opt_class() handlers];
  id v2 = [*(id *)(a1 + 32) userIdentity];
  id v3 = [v2 accountDSID];

  if (v3)
  {
    id v4 = [v11 objectForKeyedSubscript:v3];

    if (!v4)
    {
      id v5 = [objc_alloc((Class)objc_opt_class()) initWithConfiguration:*(void *)(a1 + 32)];
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;

      [v11 setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKeyedSubscript:v3];
    }
    uint64_t v8 = [v11 objectForKeyedSubscript:v3];
  }
  else
  {
    if (![(id)objc_opt_class() supportsAccountlessHandling]) {
      goto LABEL_8;
    }
    uint64_t v8 = [(id)objc_opt_class() accountlessHandler];
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

LABEL_8:
}

void sub_10000DFB8(uint64_t a1, void *a2)
{
  id v3 = [a2 dictionaryForBagKey:ICURLBagKeyPurchaseDAAP];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_23;
  }
  id v4 = ICGetCloudDAAPClientPrefix();
  id v5 = [v4 stringByAppendingString:@"update-on-app-focus-enabled"];
  uint64_t v6 = [v3 objectForKey:v5];
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [v3 objectForKey:@"update-on-app-focus-enabled"];
  }
  uint64_t v9 = v8;

  unsigned int v10 = (objc_opt_respondsToSelector() & 1) != 0 ? [v9 BOOLValue] : 0;
  id v11 = ICGetCloudDAAPClientPrefix();
  uint64_t v12 = [v11 stringByAppendingString:@"update-polling-frequency-secs"];
  unsigned int v13 = [v3 objectForKey:v12];
  uint64_t v14 = v13;
  if (v13)
  {
    id v15 = v13;
  }
  else
  {
    id v15 = [v3 objectForKey:@"update-polling-frequency-secs"];
  }
  uint64_t v16 = v15;

  double v17 = (objc_opt_respondsToSelector() & 1) != 0 ? (double)(int)[v16 intValue] : 900.0;
  if (!v10)
  {
LABEL_23:
    uint64_t v26 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Jalisco] Periodic update on app focus disabled via bag.", buf, 2u);
    }
    goto LABEL_29;
  }
  if (![*(id *)(a1 + 32) jaliscoOnDiskDatabaseRevision])
  {
LABEL_26:
    uint64_t v27 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Jalisco] Updating jalisco library...", buf, 2u);
    }

    uint64_t v28 = *(void **)(a1 + 40);
    uint64_t v29 = *(void *)(a1 + 48);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100096F14;
    v30[3] = &unk_1001BE408;
    unint64_t v31 = *(id *)(a1 + 32);
    [v28 updateJaliscoLibraryWithReason:7 forConfiguration:v29 completion:v30];
    uint64_t v26 = v31;
LABEL_29:

    goto LABEL_30;
  }
  uint64_t v18 = [*(id *)(a1 + 32) jaliscoLastLibraryUpdateTime];
  [v18 timeIntervalSinceReferenceDate];
  if (v19 <= 0.0)
  {

    goto LABEL_26;
  }
  __int16 v20 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    [v18 timeIntervalSince1970];
    *(_DWORD *)buf = 134217984;
    uint64_t v33 = (uint64_t)v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Jalisco] Last library update time: %{time_t}zd", buf, 0xCu);
  }

  unsigned __int8 v22 = +[NSDate date];
  [v22 timeIntervalSinceDate:v18];
  double v24 = v23;

  uint64_t v25 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v33 = *(void *)&v24;
    __int16 v34 = 2048;
    double v35 = v17;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Jalisco] Elapsed time since last library update: %g, minimum: %g", buf, 0x16u);
  }

  if (v24 >= v17) {
    goto LABEL_26;
  }
LABEL_30:
}

void sub_10000E3D0(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 152) objectForKey:&off_1001CBAE0];
  id v4 = [*((id *)*v2 + 19) objectForKey:&off_1001CBAF8];
  uint64_t v38 = 0;
  __int16 v39 = &v38;
  uint64_t v40 = 0x2020000000;
  char v41 = 0;
  uint64_t v34 = 0;
  double v35 = &v34;
  uint64_t v36 = 0x2020000000;
  char v37 = 0;
  id v5 = [*v2 musicLibrary];
  if ([v5 jaliscoOnDiskDatabaseRevision]) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  int v7 = !v6;

  id v8 = *(void **)(a1 + 32);
  if ((v8[10] | 2) == 2)
  {
    uint64_t v9 = [v8 userIdentityStore];
    unsigned int v10 = [*(id *)(a1 + 32) userIdentity];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10002D200;
    v27[3] = &unk_1001B9B60;
    uint64_t v30 = &v34;
    BOOL v32 = v4 != 0;
    id v11 = v3;
    uint64_t v12 = *(void *)(a1 + 32);
    unsigned int v13 = *(void **)(a1 + 40);
    v28[0] = v11;
    v28[1] = v12;
    unint64_t v31 = &v38;
    char v33 = v7;
    id v29 = v13;
    [v9 getPropertiesForUserIdentity:v10 completionHandler:v27];

    uint64_t v14 = (id *)v28;
LABEL_13:

    goto LABEL_14;
  }
  id v15 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    int v17 = *((unsigned __int8 *)v35 + 24);
    int v18 = *(unsigned __int8 *)(v16 + 144);
    uint64_t v19 = *(void *)(v16 + 80);
    int v20 = *((unsigned __int8 *)v39 + 24);
    *(_DWORD *)buf = 138544898;
    uint64_t v43 = v16;
    __int16 v44 = 1024;
    int v45 = v17;
    __int16 v46 = 1024;
    int v47 = v20;
    __int16 v48 = 1024;
    BOOL v49 = v4 != 0;
    __int16 v50 = 1024;
    int v51 = v7;
    __int16 v52 = 1024;
    int v53 = v18;
    __int16 v54 = 1024;
    int v55 = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ - isUpdatingCloudLibraryWithCompletion sagaUpdateInProgress=%{BOOL}u, sagaInitialImport=%{BOOL}u, jaliscoUpdateInProgress=%{BOOL}u, jaliscoInitialImport=%{BOOL}u, havePendingSagaUpdate=%{BOOL}u, musicSubscriptionCheckStatus=%d", buf, 0x30u);
  }

  double v21 = *(void **)(a1 + 40);
  if (v21)
  {
    unsigned __int8 v22 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100010C20;
    v23[3] = &unk_1001B9B38;
    uint64_t v14 = (id *)v24;
    v24[0] = v21;
    v24[1] = &v34;
    v24[2] = &v38;
    BOOL v25 = v4 != 0;
    char v26 = v7;
    dispatch_async(v22, v23);
    goto LABEL_13;
  }
LABEL_14:
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
}

void sub_10000E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_10000E748(uint64_t a1, char a2, int a3, void *a4)
{
  id v7 = a4;
  id v8 = v7;
  if ((a2 & 1) != 0 || a3)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      int v23 = 138543618;
      uint64_t v24 = v15;
      __int16 v25 = 1024;
      LODWORD(v26) = v16;
      uint64_t v12 = "%{public}@ - user is a subscriber and locker bit is set. includeMediaKindSong=%{BOOL}u";
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      uint64_t v17 = *(void *)(a1 + 32);
      int v18 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      int v23 = 138543618;
      uint64_t v24 = v17;
      __int16 v25 = 1024;
      LODWORD(v26) = v18;
      uint64_t v12 = "%{public}@ - user is a subscriber and locker bit is NOT set. includeMediaKindSong=%{BOOL}u";
    }
    goto LABEL_15;
  }
  if (!v7)
  {
    if (MSVDeviceSupportsSideLoadedMediaContent())
    {
      uint64_t v19 = [*(id *)(a1 + 32) musicLibrary];
      int v20 = [v19 jaliscoLastExcludedMediaKinds];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v20 containsObject:&off_1001CBB10] ^ 1;
    }
    uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    uint64_t v21 = *(void *)(a1 + 32);
    int v22 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v23 = 138543618;
    uint64_t v24 = v21;
    __int16 v25 = 1024;
    LODWORD(v26) = v22;
    uint64_t v12 = "%{public}@ - user is a NOT a subscriber. includeMediaKindSong=%{BOOL}u";
LABEL_15:
    unsigned int v13 = v9;
    uint32_t v14 = 18;
    goto LABEL_16;
  }
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v23 = 138543874;
    uint64_t v24 = v10;
    __int16 v25 = 2114;
    char v26 = v8;
    __int16 v27 = 1024;
    int v28 = v11;
    uint64_t v12 = "%{public}@ Error %{public}@ loading subscription status. includeMediaKindSong=%{BOOL}u";
    unsigned int v13 = v9;
    uint32_t v14 = 28;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v23, v14);
  }
LABEL_17:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10000F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000F4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000FE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000FFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010558(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || ([v5 isActiveLocker] & 1) == 0)
  {
    notify_post("com.apple.itunescloudd.jaliscoUpdateInProgressChanged");
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      CFStringRef v15 = @"Unknown";
      if (v14 == 1) {
        CFStringRef v15 = @"Saga";
      }
      if (v14) {
        CFStringRef v16 = v15;
      }
      else {
        CFStringRef v16 = @"Jalisco";
      }
      int v17 = 138543618;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      CFStringRef v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ - Posting JALISCO_UPDATE_IN_PROGRESS_CHANGED for libraryType=%{public}@", (uint8_t *)&v17, 0x16u);
    }
  }
  else
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      CFStringRef v10 = @"Unknown";
      if (v9 == 1) {
        CFStringRef v10 = @"Saga";
      }
      if (v9) {
        CFStringRef v11 = v10;
      }
      else {
        CFStringRef v11 = @"Jalisco";
      }
      int v17 = 138543618;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      CFStringRef v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Posting SAGA_UPDATE_IN_PROGRESS_CHANGED for libraryType=%{public}@", (uint8_t *)&v17, 0x16u);
    }

    notify_post("com.apple.itunescloudd.sagaUpdateInProgressChanged");
  }
}

id sub_100010724()
{
  v0 = +[ICDeviceInfo currentDeviceInfo];
  if ([v0 isWatch])
  {
    id v1 = +[ICNanoPairedDeviceStatusMonitor sharedMonitor];
    id v2 = [v1 isMediaSyncingSupported];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_100010794(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 userIdentity];
  id v6 = +[ICPrivacyInfo sharedPrivacyInfoForUserIdentity:v5];
  if (![v6 privacyAcknowledgementRequiredForMusic])
  {
    CFStringRef v10 = +[ICMusicSubscriptionStatusController sharedStatusController];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10000B574;
    v11[3] = &unk_1001BD2F8;
    uint64_t v9 = &v12;
    id v12 = v3;
    uint64_t v13 = v4;
    [v10 getSubscriptionStatusForUserIdentity:v5 bypassingCache:0 withCompletionHandler:v11];

    uint64_t v8 = v13;
    goto LABEL_7;
  }
  id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Cant load subscription status because privacy acknowledgement is required for identity %{[ublic}@", buf, 0xCu);
  }

  if (v4)
  {
    uint64_t v8 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D773C;
    block[3] = &unk_1001BEC70;
    uint64_t v9 = &v15;
    id v15 = v4;
    dispatch_async(v8, block);
LABEL_7:
  }
}

void sub_100010AA4(uint64_t a1)
{
  id v6 = [*(id *)(*(void *)(a1 + 32) + 24) supportedConfigurations];
  id v2 = [v6 allObjects];
  id v3 = [v2 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_100010C04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(void *)(a1 + 32));
}

uint64_t sub_100010C20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

uint64_t sub_100010C50(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 8) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_100010C60(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

uint64_t sub_100010CF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_100010D0C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_100010D24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100010D34(uint64_t a1, void *a2)
{
  return [a2 writeUInt32:*(unsigned int *)(a1 + 32) withCode:1836413810];
}

void sub_100010D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  +[NSString stringWithFormat:@"%@=%@", a2, a3];
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 addObject:v4];
}

uint64_t sub_100010DB0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_100010DC4(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 64);
  if (v3)
  {
    if (*(unsigned char *)(v2 + 148))
    {
      uint64_t v5 = a1[6];
      uint64_t v4 = a1[7];
      uint64_t v6 = a1[5];
      [v3 updateLibraryWithClientIdentity:v6 reason:v4 completionHandler:v5];
      return;
    }
    id v12 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ - Deferring jalisco library update as the handler has not finished initial setup", buf, 0xCu);
    }

    dispatch_time_t v14 = dispatch_time(0x8000000000000000, 60000000000);
    uint64_t v15 = a1[4];
    CFStringRef v16 = *(NSObject **)(v15 + 88);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10002C9D0;
    v20[3] = &unk_1001B9CF0;
    uint64_t v17 = a1[7];
    v20[4] = v15;
    uint64_t v23 = v17;
    id v21 = (id)a1[5];
    id v22 = (id)a1[6];
    dispatch_after(v14, v16, v20);

    CFStringRef v11 = v21;
LABEL_13:

    return;
  }
  id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[4];
    *(_DWORD *)buf = 138543362;
    uint64_t v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Not updating jalisco library as the handler is nil", buf, 0xCu);
  }

  uint64_t v9 = (void *)a1[6];
  if (v9)
  {
    CFStringRef v10 = *(NSObject **)(a1[4] + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002CAB8;
    block[3] = &unk_1001BEC70;
    id v19 = v9;
    dispatch_async(v10, block);
    CFStringRef v11 = v19;
    goto LABEL_13;
  }
}

void sub_100011B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100011B80(uint64_t a1)
{
  uint64_t v2 = sub_100011BD0();
  uint64_t result = dlsym(v2, "PLShouldLogRegisteredEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1001F3750 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100011BD0()
{
  v4[0] = 0;
  if (!qword_1001F3758)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = sub_100011D74;
    v4[4] = &unk_1001BEA20;
    v4[5] = v4;
    long long v5 = off_1001B99E8;
    uint64_t v6 = 0;
    qword_1001F3758 = _sl_dlopen();
  }
  v0 = (void *)qword_1001F3758;
  if (!qword_1001F3758)
  {
    v0 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"void *PowerLogLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDPowerEventLogger.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *sub_100011D24(uint64_t a1)
{
  uint64_t v2 = sub_100011BD0();
  uint64_t result = dlsym(v2, "PLLogRegisteredEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1001F3760 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100011D74()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3758 = result;
  return result;
}

id sub_1000120F8(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(dispatch_source_t **)(a1 + 32);
  if (v2[2])
  {
    dispatch_source_cancel(v2[2]);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = 0;

    uint64_t v2 = *(dispatch_source_t **)(a1 + 32);
  }

  return [(dispatch_source_t *)v2 _onQueue_flushSyncBlocks];
}

void sub_1000124EC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) library];
  uint64_t v3 = [v2 libraryUID];
  uint64_t v4 = [*(id *)(a1 + 32) playbackPositionDomain];
  long long v5 = +[NSString stringWithFormat:@"%@-%@", v3, v4];

  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001260C;
  v9[3] = &unk_1001BDFE8;
  v9[4] = v6;
  id v10 = v5;
  id v11 = *(id *)(a1 + 32);
  id v8 = v5;
  objc_msgSend(v6, "_onQueue_scheduleBlockWithIdentifier:isCheckpoint:block:", v8, v7, v9);
}

void sub_10001260C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  if ([*(id *)(*(void *)(a1 + 32) + 32) containsObject:*(void *)(a1 + 40)])
  {
    uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v16 = v3;
      __int16 v17 = 2114;
      uint64_t v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Sync in-progress for identifier=%{public}@. Scheduling follow-up sync.", buf, 0x16u);
    }

    [*(id *)(a1 + 32) scheduleSyncForContext:*(void *)(a1 + 48) isCheckpoint:1];
  }
  else
  {
    [*(id *)(*(void *)(a1 + 32) + 32) addObject:*(void *)(a1 + 40)];
    long long v5 = [ICDPlaybackPositionRequestOperationSynchronize alloc];
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    id v11 = sub_1000127A8;
    id v12 = &unk_1001BD5A8;
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = v6;
    id v8 = [(ICDPlaybackPositionRequestOperationSynchronize *)v5 initWithContext:v7 completionHandler:&v9];
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "addOperation:", v8, v9, v10, v11, v12, v13);
  }
}

void sub_1000127A8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  uint64_t v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = objc_msgSend(v5, "msv_description");
      *(_DWORD *)buf = 138544130;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 1024;
      int v22 = a2;
      __int16 v23 = 2114;
      uint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Sync finished for library %{public}@ success=%{BOOL}u error=%{public}@", buf, 0x26u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    uint64_t v18 = v11;
    __int16 v19 = 2114;
    uint64_t v20 = v12;
    __int16 v21 = 1024;
    int v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Sync finished for library %{public}@ success=%{BOOL}u", buf, 0x1Cu);
  }

  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(NSObject **)(v13 + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10001298C;
  v15[3] = &unk_1001BECC0;
  void v15[4] = v13;
  id v16 = *(id *)(a1 + 40);
  dispatch_async(v14, v15);
}

id sub_10001298C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
}

void sub_100012B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 writeUInt32:*(unsigned int *)(*(void *)(a1 + 32) + 104) withCode:1835624804];
  [v3 writeUInt32:*(unsigned int *)(*(void *)(a1 + 32) + 112) withCode:1836413810];
  id v4 = v3;
  ICDAAPUtilitiesWriteContainer();
}

void sub_100012C78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(a1 + 32) + 120) count])
  {
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    uint64_t v11 = sub_100012D98;
    uint64_t v12 = &unk_1001BF148;
    uint64_t v13 = *(void *)(a1 + 32);
    ICDAAPUtilitiesWriteContainer();
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 128);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100012E70;
  v7[3] = &unk_1001B9A30;
  v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  [v5 enumerateObjectsUsingBlock:v7];
}

void sub_100012D98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[ICDAAPPropertyInfo sharedContainerPropertyInfo];
  id v5 = *(void **)(*(void *)(a1 + 32) + 120);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100013740;
  v8[3] = &unk_1001BDA60;
  id v9 = v4;
  id v10 = v3;
  id v6 = v3;
  id v7 = v4;
  [v5 enumerateKeysAndObjectsUsingBlock:v8];
}

void sub_100012E70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 itemAdamID];
  id v5 = [v3 itemUUID];
  id v6 = [v3 itemPositionUUID];
  id v7 = [v3 referencePositionUUID];
  id v8 = [v3 reactionString];
  switch((unint64_t)[v3 type])
  {
    case 0uLL:
      id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v10;
      __int16 v29 = 2114;
      id v30 = v3;
      uint64_t v11 = "%{public}@ ignoring track edit of unknown type: %{public}@";
      goto LABEL_29;
    case 1uLL:
      if (v4 && v5 && v6)
      {
        __int16 v23 = v5;
        id v24 = v6;
        id v25 = v7;
        id v26 = v3;
        ICDAAPUtilitiesWriteContainer();

        id v9 = v23;
        goto LABEL_30;
      }
      id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      goto LABEL_30;
    case 2uLL:
      if (v5)
      {
        int v22 = v5;
        ICDAAPUtilitiesWriteContainer();
        id v9 = v22;
        goto LABEL_30;
      }
      id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      goto LABEL_30;
    case 3uLL:
      if (v5 && v6)
      {
        uint64_t v18 = v5;
        id v19 = v6;
        id v20 = v7;
        id v21 = v3;
        ICDAAPUtilitiesWriteContainer();

        id v9 = v18;
        goto LABEL_30;
      }
      id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      goto LABEL_30;
    case 4uLL:
      if (v5 && v8)
      {
        uint64_t v15 = v5;
        id v16 = v8;
        id v17 = v3;
        ICDAAPUtilitiesWriteContainer();

        id v9 = v15;
        goto LABEL_30;
      }
      id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      goto LABEL_30;
    case 5uLL:
      if (v5 && v8)
      {
        uint64_t v13 = v5;
        id v14 = v8;
        ICDAAPUtilitiesWriteContainer();

        id v9 = v13;
      }
      else
      {
        id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
LABEL_28:
          uint64_t v12 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543618;
          uint64_t v28 = v12;
          __int16 v29 = 2114;
          id v30 = v3;
          uint64_t v11 = "%{public}@ ignoring track edit with incomplete params: %{public}@";
LABEL_29:
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
        }
      }
LABEL_30:

LABEL_31:
      return;
    default:
      goto LABEL_31;
  }
}

void sub_1000134A4(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 writeUInt64:*(unsigned int *)(a1 + 64) withCode:1634025833];
  [v4 writeString:*(void *)(a1 + 32) withCode:1634354005];
  [v4 writeString:*(void *)(a1 + 40) withCode:1634357365];
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    [v4 writeString:v3 withCode:1634357865];
  }
  else {
    objc_msgSend(v4, "writeUInt32:withCode:", objc_msgSend(*(id *)(a1 + 56), "positionType"), 1634357364);
  }
}

id sub_100013554(uint64_t a1, void *a2)
{
  return [a2 writeString:*(void *)(a1 + 32) withCode:1634354005];
}

void sub_100013568(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 writeString:*(void *)(a1 + 32) withCode:1634354005];
  [v4 writeString:*(void *)(a1 + 40) withCode:1634357365];
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    [v4 writeString:v3 withCode:1634357865];
  }
  else {
    objc_msgSend(v4, "writeUInt32:withCode:", objc_msgSend(*(id *)(a1 + 56), "positionType"), 1634357364);
  }
}

void sub_100013604(uint64_t a1, void *a2)
{
  id v8 = a2;
  [v8 writeString:*(void *)(a1 + 32) withCode:1634354005];
  [v8 writeString:*(void *)(a1 + 40) withCode:1634357845];
  uint64_t v3 = [*(id *)(a1 + 48) timestamp];
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = +[NSDate now];
  }
  id v6 = v5;

  [v6 timeIntervalSince1970];
  [v8 writeUInt64:(unint64_t)v7 withCode:1634357828];
}

void sub_1000136C8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 writeString:v3 withCode:1634354005];
  [v4 writeString:*(void *)(a1 + 40) withCode:1634357845];
}

void sub_100013740(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasInfoForProperty:v5])
  {
    [*(id *)(a1 + 32) elementCodeForProperty:v5];
    [*(id *)(a1 + 32) valueTypeForProperty:v5];
    ICDAAPUtilitiesWriteProperty();
  }
  else
  {
    double v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No DAAP code found for container property: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_100014090(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2114;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ Automatic download media kind update task completed with error=%{public}@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100014164(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2114;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ Automatic download media kind update task completed with error=%{public}@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1000146B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1000146E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

uint64_t sub_100014764(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100014774(uint64_t a1)
{
}

void sub_10001477C(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(unsigned char *)(*(void *)(a1 + 32) + 145) = 0;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    int v7 = *(unsigned __int8 *)(v5 + 145);
    *(_DWORD *)buf = 138544386;
    uint64_t v16 = v5;
    __int16 v17 = 1024;
    int v18 = 1;
    __int16 v19 = 1024;
    int v20 = v6;
    __int16 v21 = 2114;
    id v22 = v3;
    __int16 v23 = 1024;
    int v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history by adding kind=%d for reason=%d with error=%{public}@, _didManuallyReloadCloudLibrary=%{BOOL}u", buf, 0x28u);
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v3;
  id v10 = v3;

  uint64_t v11 = +[CloudContentTasteUpdateRequestListener sharedContentTasteRequestListener];
  uint64_t v12 = [*(id *)(a1 + 32) configuration];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100015100;
  v13[3] = &unk_1001BE408;
  id v14 = *(id *)(a1 + 40);
  [v11 updateContentTasteForConnectionConfiguration:v12 invalidateLocalCache:1 withCompletionHandler:v13];
}

void sub_10001493C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    uint64_t v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 2114;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v3;
  id v9 = v3;

  id v10 = +[CloudContentTasteUpdateRequestListener sharedContentTasteRequestListener];
  uint64_t v11 = [*(id *)(a1 + 32) configuration];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000150F8;
  v12[3] = &unk_1001BE408;
  id v13 = *(id *)(a1 + 40);
  [v10 updateContentTasteForConnectionConfiguration:v11 invalidateLocalCache:1 withCompletionHandler:v12];
}

void sub_100014AD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2 == 3)
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 96);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100014EE8;
    v23[3] = &unk_1001BF2B0;
    id v12 = *(id *)(a1 + 56);
    void v23[4] = *(void *)(a1 + 32);
    id v24 = v12;
    [v9 disableCloudLibraryWithClientIdentity:v10 reason:v11 completionHandler:v23];
    uint64_t v8 = v24;
    goto LABEL_9;
  }
  if (v2 == 1)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 104);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100014D64;
    v25[3] = &unk_1001BA150;
    uint64_t v6 = *(void *)(a1 + 88);
    v25[4] = v3;
    uint64_t v28 = v6;
    long long v19 = *(_OWORD *)(a1 + 56);
    id v7 = (id)v19;
    long long v26 = v19;
    uint64_t v27 = *(void *)(a1 + 72);
    [v3 _performInitialSagaImportWithClientIdentity:v4 allowingNoisyAuthPrompt:v5 completionHandler:v25];
    uint64_t v8 = (void *)v26;
LABEL_9:

    return;
  }
  id v13 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v16 = *(void *)(a1 + 96);
    *(_DWORD *)buf = 138543874;
    uint64_t v30 = v14;
    __int16 v31 = 1024;
    int v32 = v15;
    __int16 v33 = 1024;
    int v34 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ - Will schedule a retry for status=%d, failureCode=%d", buf, 0x18u);
  }

  int v17 = *(void **)(a1 + 56);
  if (v17)
  {
    __int16 v18 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100014FA4;
    block[3] = &unk_1001BEC48;
    id v22 = v17;
    id v21 = *(id *)(a1 + 48);
    dispatch_async(v18, block);

    uint64_t v8 = v22;
    goto LABEL_9;
  }
}

void sub_100014D64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 64);
    *(_DWORD *)buf = 138543874;
    uint64_t v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    __int16 v19 = 2114;
    id v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading saga library for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v3;
  id v9 = v3;

  uint64_t v10 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100014FD4;
  v12[3] = &unk_1001BA128;
  id v11 = *(id *)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v11;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
  dispatch_async(v10, v12);
}

void sub_100014EE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100014FBC;
    v6[3] = &unk_1001BEC48;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100014FA4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 1);
}

uint64_t sub_100014FBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100014FD4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100015080;
    v5[3] = &unk_1001BA128;
    id v4 = v1;
    void v5[4] = *(void *)(a1 + 32);
    id v6 = v4;
    long long v7 = *(_OWORD *)(a1 + 48);
    dispatch_async(v3, v5);
  }
}

void sub_100015080(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _prepareLibraryLoadErrorWithJaliscoError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) sagaError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_1000150F8(uint64_t a1)
{
}

void sub_100015100(uint64_t a1)
{
}

uint64_t sub_1000155B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001574C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100015B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id sub_100015BA4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 longLongValue];
  if (a4)
  {
    if (result == (id)1)
    {
      *a4 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
  return result;
}

void sub_100015BF0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    ICSiriPostDynamiteClientStateChangedNotification();
  }
  id v3 = +[CloudContentTasteUpdateRequestListener sharedContentTasteRequestListener];
  id v4 = [*(id *)(a1 + 32) configuration];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100015E7C;
  v6[3] = &unk_1001BF2B0;
  id v5 = *(id *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v3 updateContentTasteForConnectionConfiguration:v4 invalidateLocalCache:1 withCompletionHandler:v6];
}

void sub_100015CC4(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    ICSiriPostDynamiteClientStateChangedNotification();
  }
  id v3 = +[CloudContentTasteUpdateRequestListener sharedContentTasteRequestListener];
  id v4 = [*(id *)(a1 + 32) configuration];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100015DAC;
  v6[3] = &unk_1001BF2B0;
  id v5 = *(id *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v3 updateContentTasteForConnectionConfiguration:v4 invalidateLocalCache:1 withCompletionHandler:v6];
}

uint64_t sub_100015D98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100015DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100015E68;
    v6[3] = &unk_1001BEC48;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100015E68(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100015E7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100015F38;
    v6[3] = &unk_1001BEC48;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100015F38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000160FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56);
  if (*(unsigned char *)(a1 + 40))
  {
    if (v2) {
      return;
    }
    id v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v13 = 138543362;
      uint64_t v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - locker bit is set on the account, creating SagaRequestHandler", (uint8_t *)&v13, 0xCu);
    }

    id v5 = [SagaRequestHandler alloc];
    id v6 = [*(id *)(a1 + 32) configuration];
    id v7 = [(SagaRequestHandler *)v5 initWithConfiguration:v6 progressObserver:*(void *)(a1 + 32)];
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 56);
    *(void *)(v8 + 56) = v7;
  }
  else
  {
    if (!v2) {
      return;
    }
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v13 = 138543362;
      uint64_t v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ - locker bit is not set on the account and we have a valid SagaRequestHandler. Removing it now ....", (uint8_t *)&v13, 0xCu);
    }

    uint64_t v12 = *(void *)(a1 + 32);
    id v6 = *(void **)(v12 + 56);
    *(void *)(v12 + 56) = 0;
  }
}

void sub_10001683C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_100016864(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, 2, v2);
  }
}

void sub_1000168F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472;
  uint64_t v8 = sub_100016B8C;
  id v9 = &unk_1001BCD88;
  objc_copyWeak(&v12, &location);
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = v4;
  [*(id *)(a1 + 32) setCompletionBlock:&v6];
  objc_msgSend(*(id *)(a1 + 32), "setName:", @"com.apple.itunescloudd.ICDCloudMusicLibraryRequestHandler.sagaDeauthenticateOperation", v6, v7, v8, v9, v10);
  id v5 = +[ICDServer server];
  [v5 addOperation:*(void *)(a1 + 32) priority:2];

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_1000169F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100016A18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100016AE0;
  block[3] = &unk_1001BEC98;
  void block[4] = v3;
  id v5 = *(id *)(a1 + 40);
  id v8 = WeakRetained;
  id v9 = v5;
  id v6 = WeakRetained;
  dispatch_async(v4, block);
}

void sub_100016AE0(uint64_t a1)
{
  --*(_DWORD *)(*(void *)(a1 + 32) + 136);
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 40) status];
    id v4 = [*(id *)(a1 + 40) error];
    (*(void (**)(uint64_t, id, id))(v1 + 16))(v1, v3, v4);
  }
}

void sub_100016B8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100016C54;
  block[3] = &unk_1001BEC98;
  void block[4] = v3;
  id v5 = *(id *)(a1 + 40);
  id v8 = WeakRetained;
  id v9 = v5;
  id v6 = WeakRetained;
  dispatch_async(v4, block);
}

void sub_100016C54(uint64_t a1)
{
  --*(_DWORD *)(*(void *)(a1 + 32) + 136);
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 40) status];
    id v4 = [*(id *)(a1 + 40) error];
    (*(void (**)(uint64_t, id, id))(v1 + 16))(v1, v3, v4);
  }
}

void sub_100017018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100017040(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unint64_t v3 = (unint64_t)[WeakRetained status];
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [v5 configuration];
    uint64_t v7 = [v6 userIdentity];
    id v8 = [WeakRetained error];
    unsigned int v9 = [WeakRetained status];
    uint64_t v10 = [WeakRetained authenticateFailureCode];
    *(_DWORD *)buf = 138544386;
    uint64_t v27 = (unsigned __int8 *)v5;
    __int16 v28 = 2114;
    __int16 v29 = v7;
    __int16 v30 = 2114;
    __int16 v31 = v8;
    __int16 v32 = 1024;
    unsigned int v33 = v9;
    __int16 v34 = 2114;
    double v35 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Authentication finished for %{public}@ with error=%{public}@, status=%d, authFailureCode=%{public}@", buf, 0x30u);
  }
  if ((v3 & 0xFFFFFFFFFFFFFFFDLL) == 1)
  {
    if (WeakRetained) {
      goto LABEL_8;
    }
  }
  else
  {
    __int16 v19 = +[NSAssertionHandler currentHandler];
    [v19 handleFailureInMethod:*(void *)(a1 + 56) object:*(void *)(a1 + 32) file:@"ICDCloudMusicLibraryRequestHandler.m" lineNumber:2912 description:@"SagaAuthenticateOperation can only return CloudLibraryOperationStatusSuccess OR CloudLibraryOperationStatusPermanentlyFailed"];

    if (WeakRetained) {
      goto LABEL_8;
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 146) = 0;
  id v11 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    id v12 = *(unsigned __int8 **)(a1 + 32);
    int v13 = v12[146];
    *(_DWORD *)buf = 138543618;
    uint64_t v27 = v12;
    __int16 v28 = 1024;
    LODWORD(v29) = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ - CloudAuthenticateOperation is nil. Resetting _isPendingAuthentication=%{BOOL}u", buf, 0x12u);
  }

LABEL_8:
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(NSObject **)(v14 + 88);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100017324;
  v20[3] = &unk_1001B9D18;
  v20[4] = v14;
  id v21 = WeakRetained;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  unint64_t v23 = v3;
  uint64_t v24 = v16;
  uint64_t v25 = v17;
  id v22 = *(id *)(a1 + 40);
  id v18 = WeakRetained;
  dispatch_async(v15, v20);
}

uint64_t sub_100017310(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100017324(uint64_t a1)
{
  if (*(void *)(a1 + 56) == 1)
  {
    if (*(void *)(*(void *)(a1 + 32) + 56))
    {
      dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
      uint64_t v3 = MSVAutoBugCaptureDomainiTunesCloud;
      uint64_t v4 = *(void *)(a1 + 40);
      v25[1] = @"enableReason";
      v26[0] = v4;
      v25[0] = @"strongAuthenticateOperation";
      id v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
      v26[1] = v5;
      id v6 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:2];
      uint64_t v27 = v6;
      uint64_t v7 = +[NSArray arrayWithObjects:&v27 count:1];
      id v18 = _NSConcreteStackBlock;
      uint64_t v19 = 3221225472;
      id v20 = sub_1000175FC;
      id v21 = &unk_1001BEC20;
      dispatch_semaphore_t v22 = v2;
      id v8 = v2;
      +[MSVAutoBugCapture snapshotWithDomain:v3 type:@"Bug" subType:@"SagaAuthenticationBug" context:@"DuplicateSagaAuthentication" triggerThresholdValues:0 events:v7 completion:&v18];

      dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
      if (*(void *)(*(void *)(a1 + 32) + 56))
      {
        uint64_t v17 = +[NSAssertionHandler currentHandler];
        objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", *(void *)(a1 + 72), *(void *)(a1 + 32), @"ICDCloudMusicLibraryRequestHandler.m", 2927, @"Invalid State - We already have a valid SagaRequestHandler (enableReason=%d)", *(void *)(a1 + 64), v18, v19, v20, v21);
      }
    }
    unsigned int v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - Initializing SagaRequestHander ....", buf, 0xCu);
    }

    id v11 = [SagaRequestHandler alloc];
    id v12 = [*(id *)(a1 + 32) configuration];
    int v13 = [(SagaRequestHandler *)v11 initWithConfiguration:v12 progressObserver:*(void *)(a1 + 32)];
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 56);
    *(void *)(v14 + 56) = v13;
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

intptr_t sub_1000175FC(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000176D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) userIdentityStore];
  id v5 = [*(id *)(a1 + 32) userIdentity];
  id v128 = 0;
  id v6 = [v4 getPropertiesForUserIdentity:v5 error:&v128];
  id v7 = v128;

  id v8 = +[ICDServer server];
  unsigned int v9 = [*(id *)(a1 + 32) configuration];
  uint64_t v10 = [v8 daemonOptionsForConfiguration:v9];

  unsigned int v11 = [v10 supportsAutomaticEnablingiCloudMusicLibrary];
  id v12 = [*(id *)(a1 + 32) _getCurrentSubscriptionStatusForReason:*(void *)(a1 + 48)];
  int v13 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138544130;
    uint64_t v130 = v14;
    __int16 v131 = 1024;
    *(_DWORD *)v132 = v15;
    *(_WORD *)&v132[4] = 1024;
    *(_DWORD *)&v132[6] = v11;
    __int16 v133 = 1024;
    int v134 = (int)v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ - Trying to enable cloud library for reason=%d, supportsAutoEnablingLibrary=%{BOOL}u, subscriptionStatus=%d", buf, 0x1Eu);
  }

  if (!v6)
  {
    uint64_t v24 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v130 = v25;
      __int16 v131 = 2114;
      *(void *)v132 = v7;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@ - Error %{public}@ loading user identity properties.", buf, 0x16u);
    }

    if (v11) {
      [*(id *)(a1 + 32) _retryEnablingCloudMusicLibraryForReason:*(void *)(a1 + 48)];
    }
    long long v26 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000190B0;
    block[3] = &unk_1001BEC48;
    id v84 = *(id *)(a1 + 40);
    id v83 = v7;
    dispatch_async(v26, block);
    [v3 finish];

    unint64_t v23 = v84;
    goto LABEL_28;
  }
  unsigned int v16 = [v6 isActiveLocker];
  if (([*(id *)(a1 + 32) _isNativeMusicAppInstalled] & 1) == 0)
  {
    uint64_t v27 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v130 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@ - Native music app is NOT installed. Not enabling Cloud Music Library", buf, 0xCu);
    }

    __int16 v29 = *(void **)(a1 + 32);
    __int16 v30 = [v29 configuration];
    __int16 v31 = [v30 clientIdentity];
    if (v16)
    {
      v125[0] = _NSConcreteStackBlock;
      v125[1] = 3221225472;
      v125[2] = sub_1000185E4;
      v125[3] = &unk_1001BA088;
      __int16 v32 = *(void **)(a1 + 40);
      v125[4] = *(void *)(a1 + 32);
      id v127 = v32;
      id v126 = v3;
      [v29 disableCloudLibraryWithClientIdentity:v31 reason:-5 completionHandler:v125];

      unint64_t v23 = v127;
    }
    else
    {
      v121[0] = _NSConcreteStackBlock;
      v121[1] = 3221225472;
      v121[2] = sub_1000186AC;
      v121[3] = &unk_1001BBDB8;
      uint64_t v36 = *(void **)(a1 + 40);
      uint64_t v35 = *(void *)(a1 + 48);
      v121[4] = *(void *)(a1 + 32);
      uint64_t v124 = v35;
      id v123 = v36;
      id v122 = v3;
      [v29 _performInitialJaliscoImportWithClientIdentity:v31 completion:v121];

      unint64_t v23 = v123;
    }
    goto LABEL_28;
  }
  if (v16)
  {
    if (v12 == (id)3)
    {
      uint64_t v17 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        uint64_t v130 = v18;
        __int16 v131 = 1024;
        *(_DWORD *)v132 = 1;
        *(_WORD *)&v132[4] = 1024;
        *(_DWORD *)&v132[6] = 3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@ - isActiveLockerAccount=%{BOOL}u, subscriptionStatus=%d. Disabling CloudLibrary as the user is no longer a subscriber", buf, 0x18u);
      }

      uint64_t v19 = *(void **)(a1 + 32);
      id v20 = [v19 configuration];
      id v21 = [v20 clientIdentity];
      v118[0] = _NSConcreteStackBlock;
      v118[1] = 3221225472;
      v118[2] = sub_10001881C;
      v118[3] = &unk_1001BA088;
      dispatch_semaphore_t v22 = *(void **)(a1 + 40);
      v118[4] = *(void *)(a1 + 32);
      id v120 = v22;
      id v119 = v3;
      [v19 disableCloudLibraryWithClientIdentity:v21 reason:-4 completionHandler:v118];

      unint64_t v23 = v120;
    }
    else
    {
      uint64_t v42 = *(void **)(a1 + 32);
      v115[0] = _NSConcreteStackBlock;
      v115[1] = 3221225472;
      v115[2] = sub_1000188E4;
      v115[3] = &unk_1001BEC98;
      v115[4] = v42;
      uint64_t v43 = *(void *)(a1 + 48);
      id v117 = *(id *)(a1 + 40);
      id v116 = v3;
      [v42 _registerDeviceAndPerformInitialImportWithUserIdentityProperties:v6 cloudLibraryEnableReason:v43 completionHandler:v115];

      unint64_t v23 = v117;
    }
    goto LABEL_28;
  }
  if (!v12 || v12 == (id)3 || ([v10 supportsAutomaticEnablingiCloudMusicLibrary] & 1) == 0)
  {
    char v37 = *(void **)(a1 + 32);
    uint64_t v38 = [v37 configuration];
    __int16 v39 = [v38 clientIdentity];
    v111[0] = _NSConcreteStackBlock;
    v111[1] = 3221225472;
    v111[2] = sub_100018988;
    v111[3] = &unk_1001BBDB8;
    char v41 = *(void **)(a1 + 40);
    uint64_t v40 = *(void *)(a1 + 48);
    v111[4] = *(void *)(a1 + 32);
    uint64_t v114 = v40;
    id v113 = v41;
    id v112 = v3;
    [v37 _performInitialJaliscoImportWithClientIdentity:v39 completion:v111];

    unint64_t v23 = v113;
LABEL_28:

    goto LABEL_29;
  }
  if (v12 != (id)2)
  {
    if (v12 == (id)1)
    {
      unsigned int v33 = *(void **)(a1 + 32);
      v109[0] = _NSConcreteStackBlock;
      v109[1] = 3221225472;
      v109[2] = sub_100018AF8;
      v109[3] = &unk_1001BEC48;
      v109[4] = v33;
      uint64_t v34 = *(void *)(a1 + 48);
      id v110 = *(id *)(a1 + 40);
      [v33 _reloadSubscriptionStatusAndEnableCloudMusicLibraryWithReason:v34 completionHandler:v109];
      [v3 finish];
      unint64_t v23 = v110;
    }
    else
    {
      int v55 = sub_1000EFE94();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        uint64_t v56 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        uint64_t v130 = v56;
        __int16 v131 = 1024;
        *(_DWORD *)v132 = v12;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%{public}@ - Unhandled subscription status=%d when trying to enable cloud library", buf, 0x12u);
      }

      v57 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      v85[0] = _NSConcreteStackBlock;
      v85[1] = 3221225472;
      v85[2] = sub_100019024;
      v85[3] = &unk_1001BEC70;
      id v86 = *(id *)(a1 + 40);
      dispatch_async(v57, v85);
      [v3 finish];
      unint64_t v23 = v86;
    }
    goto LABEL_28;
  }
  if (!v11)
  {
    uint64_t v58 = sub_1000EFE94();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v59 = *(void *)(a1 + 32);
      v60 = +[ICDeviceInfo currentDeviceInfo];
      *(_DWORD *)buf = 138543618;
      uint64_t v130 = v59;
      __int16 v131 = 2114;
      *(void *)v132 = v60;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%{public}@ - Platform %{public}@ doesn't support automatically enabling cloud library", buf, 0x16u);
    }
    id v61 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v87[0] = _NSConcreteStackBlock;
    v87[1] = 3221225472;
    v87[2] = sub_100019008;
    v87[3] = &unk_1001BEC70;
    id v88 = *(id *)(a1 + 40);
    dispatch_async(v61, v87);
    [v3 finish];
    unint64_t v23 = v88;
    goto LABEL_28;
  }
  __int16 v44 = [*(id *)(a1 + 32) userIdentity];
  int v45 = +[ML3MusicLibrary musicLibraryForUserAccount:v44];

  __int16 v46 = [v45 sagaAccountID];

  if (!v46)
  {
    int v47 = sub_1000EFE94();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v130 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%{public}@ - New account [enabling iCML if possible]", buf, 0xCu);
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 120) = 0;
    *(_DWORD *)(*(void *)(a1 + 32) + 128) = 0;
  }
  BOOL v49 = sub_1000EFE94();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v50 = *(void *)(a1 + 32);
    uint64_t v51 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    uint64_t v130 = v50;
    __int16 v131 = 1024;
    *(_DWORD *)v132 = v51;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "%{public}@ - Preparing to enable Cloud Music Library for reason=%d", buf, 0x12u);
  }

  if (MSVDeviceSupportsMultipleLibraries())
  {
    __int16 v52 = *(void **)(a1 + 32);
    uint64_t v53 = *(void *)(a1 + 48);
    v105[0] = _NSConcreteStackBlock;
    v105[1] = 3221225472;
    v105[2] = sub_100018B90;
    v105[3] = &unk_1001BA010;
    v105[4] = v52;
    uint64_t v108 = v53;
    id v107 = *(id *)(a1 + 40);
    id v106 = v3;
    [v52 _authenticateAndStartInitialImportWithMergePreference:0 userIdentityProperties:v6 enableReason:v53 withCompletionHandler:v105];

    __int16 v54 = v107;
  }
  else
  {
    uint64_t v62 = +[ICDeviceInfo currentDeviceInfo];
    unsigned int v63 = [v62 supportsSideLoadedMediaContent];

    if (v63)
    {
      v64 = *(void **)(a1 + 32);
      uint64_t v65 = *(void *)(a1 + 48);
      v101[0] = _NSConcreteStackBlock;
      v101[1] = 3221225472;
      v101[2] = sub_100018CA0;
      v101[3] = &unk_1001BA010;
      v101[4] = v64;
      uint64_t v104 = v65;
      id v103 = *(id *)(a1 + 40);
      id v102 = v3;
      [v64 _tryEnablingICMLOnDevicesSupportingSideLoadedContentWithProperties:v6 reason:v65 withCompletionHandler:v101];

      __int16 v54 = v103;
    }
    else
    {
      v66 = +[ICDeviceInfo currentDeviceInfo];
      unsigned int v67 = [v66 isWatch];

      if (v67)
      {
        if (sub_100010724())
        {
          v68 = sub_1000EFE94();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v69 = *(void *)(a1 + 32);
            uint64_t v70 = *(void *)(a1 + 48);
            *(_DWORD *)buf = 138543618;
            uint64_t v130 = v69;
            __int16 v131 = 1024;
            *(_DWORD *)v132 = v70;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "%{public}@ - Skipping initial import on non standalone watch for reason=%d", buf, 0x12u);
          }

          id v71 = *(NSObject **)(*(void *)(a1 + 32) + 96);
          v99[0] = _NSConcreteStackBlock;
          v99[1] = 3221225472;
          v99[2] = sub_100018FEC;
          v99[3] = &unk_1001BEC70;
          id v100 = *(id *)(a1 + 40);
          dispatch_async(v71, v99);
          [v3 finish];
          __int16 v54 = v100;
        }
        else
        {
          v76 = *(void **)(a1 + 32);
          uint64_t v77 = *(void *)(a1 + 48);
          v95[0] = _NSConcreteStackBlock;
          v95[1] = 3221225472;
          v95[2] = sub_100018DB0;
          v95[3] = &unk_1001BA010;
          v95[4] = v76;
          uint64_t v98 = v77;
          id v97 = *(id *)(a1 + 40);
          id v96 = v3;
          [v76 _authenticateAndStartInitialImportWithMergePreference:0 userIdentityProperties:v6 enableReason:v77 withCompletionHandler:v95];

          __int16 v54 = v97;
        }
      }
      else
      {
        uint64_t v72 = +[ICDeviceInfo currentDeviceInfo];
        unsigned int v73 = [v72 isROSDevice];

        if (v73)
        {
          uint64_t v74 = *(void **)(a1 + 32);
          uint64_t v75 = *(void *)(a1 + 48);
          v91[0] = _NSConcreteStackBlock;
          v91[1] = 3221225472;
          v91[2] = sub_100018EC0;
          v91[3] = &unk_1001BA010;
          v91[4] = v74;
          uint64_t v94 = v75;
          id v93 = *(id *)(a1 + 40);
          id v92 = v3;
          [v74 _authenticateAndStartInitialImportWithMergePreference:0 userIdentityProperties:v6 enableReason:v75 withCompletionHandler:v91];

          __int16 v54 = v93;
        }
        else
        {
          id v78 = sub_1000EFE94();
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v81 = *(void *)(a1 + 32);
            id v79 = +[ICDeviceInfo currentDeviceInfo];
            *(_DWORD *)buf = 138543618;
            uint64_t v130 = v81;
            __int16 v131 = 2114;
            *(void *)v132 = v79;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%{public}@ - Not enabling iCML on unsupported platform %{public}@", buf, 0x16u);
          }
          id v80 = *(NSObject **)(*(void *)(a1 + 32) + 96);
          v89[0] = _NSConcreteStackBlock;
          v89[1] = 3221225472;
          v89[2] = sub_100018FD0;
          v89[3] = &unk_1001BEC70;
          id v90 = *(id *)(a1 + 40);
          dispatch_async(v80, v89);
          [v3 finish];
          __int16 v54 = v90;
        }
      }
    }
  }

LABEL_29:
}

void sub_1000185E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  id v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  unsigned int v9 = sub_100019208;
  uint64_t v10 = &unk_1001BEC48;
  id v5 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = v5;
  id v6 = v3;
  dispatch_async(v4, &v7);
  objc_msgSend(*(id *)(a1 + 40), "finish", v7, v8, v9, v10);
}

void sub_1000186AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    uint64_t v17 = v5;
    __int16 v18 = 1024;
    int v19 = v6;
    __int16 v20 = 2114;
    id v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  id v12 = sub_1000191E8;
  int v13 = &unk_1001BEC48;
  id v8 = *(id *)(a1 + 48);
  id v14 = v3;
  id v15 = v8;
  id v9 = v3;
  dispatch_async(v7, &v10);
  objc_msgSend(*(id *)(a1 + 40), "finish", v10, v11, v12, v13);
}

void sub_10001881C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  id v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  id v9 = sub_1000191C8;
  uint64_t v10 = &unk_1001BEC48;
  id v5 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = v5;
  id v6 = v3;
  dispatch_async(v4, &v7);
  objc_msgSend(*(id *)(a1 + 40), "finish", v7, v8, v9, v10);
}

void sub_1000188E4(uint64_t a1)
{
  dispatch_semaphore_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000191AC;
  block[3] = &unk_1001BEC70;
  id v4 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
  [*(id *)(a1 + 40) finish];
}

void sub_100018988(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    uint64_t v17 = v5;
    __int16 v18 = 1024;
    int v19 = v6;
    __int16 v20 = 2114;
    id v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  id v12 = sub_10001918C;
  int v13 = &unk_1001BEC48;
  id v8 = *(id *)(a1 + 48);
  id v14 = v3;
  id v15 = v8;
  id v9 = v3;
  dispatch_async(v7, &v10);
  objc_msgSend(*(id *)(a1 + 40), "finish", v10, v11, v12, v13);
}

void sub_100018AF8(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100019170;
  block[3] = &unk_1001BEC70;
  id v3 = *(id *)(a1 + 40);
  dispatch_async(v1, block);
}

void sub_100018B90(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019148;
    block[3] = &unk_1001BCD38;
    uint64_t v5 = *(void *)(a1 + 56);
    void block[4] = v3;
    void block[5] = v5;
    dispatch_async(v4, block);
  }
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100019154;
  v7[3] = &unk_1001BEC70;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v6, v7);
  [*(id *)(a1 + 40) finish];
}

void sub_100018CA0(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019120;
    block[3] = &unk_1001BCD38;
    uint64_t v5 = *(void *)(a1 + 56);
    void block[4] = v3;
    void block[5] = v5;
    dispatch_async(v4, block);
  }
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001912C;
  v7[3] = &unk_1001BEC70;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v6, v7);
  [*(id *)(a1 + 40) finish];
}

void sub_100018DB0(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000190F8;
    block[3] = &unk_1001BCD38;
    uint64_t v5 = *(void *)(a1 + 56);
    void block[4] = v3;
    void block[5] = v5;
    dispatch_async(v4, block);
  }
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100019104;
  v7[3] = &unk_1001BEC70;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v6, v7);
  [*(id *)(a1 + 40) finish];
}

void sub_100018EC0(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000190D0;
    block[3] = &unk_1001BCD38;
    uint64_t v5 = *(void *)(a1 + 56);
    void block[4] = v3;
    void block[5] = v5;
    dispatch_async(v4, block);
  }
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000190DC;
  v7[3] = &unk_1001BEC70;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v6, v7);
  [*(id *)(a1 + 40) finish];
}

uint64_t sub_100018FD0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_100018FEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_100019008(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100019024(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_1000190B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

id sub_1000190D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _retryEnablingCloudMusicLibraryForReason:*(void *)(a1 + 40)];
}

uint64_t sub_1000190DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

id sub_1000190F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _retryEnablingCloudMusicLibraryForReason:*(void *)(a1 + 40)];
}

uint64_t sub_100019104(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

id sub_100019120(uint64_t a1)
{
  return [*(id *)(a1 + 32) _retryEnablingCloudMusicLibraryForReason:*(void *)(a1 + 40)];
}

uint64_t sub_10001912C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

id sub_100019148(uint64_t a1)
{
  return [*(id *)(a1 + 32) _retryEnablingCloudMusicLibraryForReason:*(void *)(a1 + 40)];
}

uint64_t sub_100019154(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_100019170(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_10001918C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1000191AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_1000191C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1000191E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_100019208(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1000196D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000196EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    uint64_t v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 2114;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100019850;
    v9[3] = &unk_1001BC2B8;
    id v10 = v7;
    char v11 = *(unsigned char *)(a1 + 56);
    dispatch_async(v8, v9);
  }
}

uint64_t sub_100019850(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10001995C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100019A0C;
  v7[3] = &unk_1001B9F98;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v5 _handleSagaAuthentication:a2 finishedForReason:v4 explicitUserAction:0 shouldStartInitialImport:1 completionHandler:v7];
}

void sub_100019A0C(uint64_t a1, uint64_t a2, char a3)
{
  id v3 = *(void **)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100019AB0;
    v6[3] = &unk_1001BC2B8;
    id v7 = v3;
    char v8 = a3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100019AB0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10001A094(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [v2 configuration];
  uint64_t v4 = [v3 clientIdentity];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001A7C4;
  v6[3] = &unk_1001B9B10;
  id v5 = *(id *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v2 _removeCloudSourcesForReason:-10 withClientIdentity:v4 byDisablingActiveLockerAccount:0 completionHandler:v6];
}

void sub_10001A160(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 2114;
    id v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(NSObject **)(v7 + 88);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001A594;
  v9[3] = &unk_1001BEC48;
  void v9[4] = v7;
  id v10 = *(id *)(a1 + 40);
  dispatch_async(v8, v9);
}

void sub_10001A2BC(void *a1)
{
  uint64_t v1 = a1[4];
  id v2 = *(NSObject **)(v1 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001A35C;
  block[3] = &unk_1001B9C00;
  uint64_t v4 = (void *)a1[5];
  uint64_t v3 = a1[6];
  void block[4] = v1;
  uint64_t v7 = v3;
  id v6 = v4;
  dispatch_async(v2, block);
}

void sub_10001A35C(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = [v2 configuration];
  uint64_t v4 = [v3 clientIdentity];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001A428;
  v7[3] = &unk_1001B9ED0;
  id v6 = (void *)a1[5];
  uint64_t v5 = a1[6];
  void v7[4] = a1[4];
  uint64_t v9 = v5;
  id v8 = v6;
  [v2 _performInitialJaliscoImportWithClientIdentity:v4 completion:v7];
}

void sub_10001A428(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[6];
    *(_DWORD *)buf = 138543874;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 2114;
    id v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  uint64_t v7 = (void *)a1[5];
  if (v7)
  {
    id v8 = *(NSObject **)(a1[4] + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001A584;
    block[3] = &unk_1001BEC70;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t sub_10001A584(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001A594(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [v2 configuration];
  uint64_t v4 = [v3 clientIdentity];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001A65C;
  v6[3] = &unk_1001BF2B0;
  uint64_t v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v2 _performInitialSagaImportWithClientIdentity:v4 allowingNoisyAuthPrompt:0 completionHandler:v6];
}

void sub_10001A65C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 88);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10001A6F8;
  v3[3] = &unk_1001BEC48;
  v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_10001A6F8(uint64_t a1)
{
  if (MSVDeviceSupportsMultipleLibraries()) {
    [*(id *)(*(void *)(a1 + 32) + 56) increasePriorityForAllOperations];
  }
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001A7B4;
    block[3] = &unk_1001BEC70;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_10001A7B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001A7C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v2 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001A860;
    block[3] = &unk_1001BEC70;
    id v4 = v1;
    dispatch_async(v2, block);
  }
}

uint64_t sub_10001A860(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001B458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001B4A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [v5 objectForKey:@"CloudLibraryStateReasonKey"];
    id v8 = [v5 objectForKey:@"AutoEnableCloudLibraryFailureReasonKey"];
    BOOL v9 = [v7 intValue] == -101;
    unsigned int v10 = [v8 intValue];
    BOOL v11 = v10 == -1;
    char v12 = v10 == -1 || v9;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v12 ^ 1;
  }
  else
  {
    BOOL v9 = 0;
    BOOL v11 = 0;
  }
  __int16 v13 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v16 = 138544386;
    uint64_t v17 = v14;
    __int16 v18 = 1024;
    BOOL v19 = v9;
    __int16 v20 = 1024;
    BOOL v21 = v11;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 2114;
    id v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ - ICML (notEnabledInBackup=%{BOOL}u, manuallyDisabled=%{BOOL}u), shouldHandle=%{BOOL}u, cloudLibraryStateReason=%{public}@", (uint8_t *)&v16, 0x28u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10001BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_10001BC84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    id v7 = v5;
    id v8 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v7;
  }
  else
  {
    id v8 = [a2 objectForKey:@"CloudLibraryStateReasonKey"];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 intValue] == -1;
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_10001BD2C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10001BF50(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 141) = 0;
  unsigned int v2 = [*(id *)(a1 + 32) isActive];
  id v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - Starting retry operation to enable ICML.", buf, 0xCu);
    }

    id v6 = objc_alloc((Class)ICAsyncBlockOperation);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10001C0F8;
    v10[3] = &unk_1001B9E80;
    uint64_t v7 = *(void *)(a1 + 40);
    v10[4] = *(void *)(a1 + 32);
    v10[5] = v7;
    id v3 = [v6 initWithStartHandler:v10];
    [*(id *)(*(void *)(a1 + 32) + 112) addOperation:v3];
  }
  else if (v4)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v12 = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - NOT retrying to enable cloud library for reason=%d as the handler is not active", buf, 0x12u);
  }
}

void sub_10001C0F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [*(id *)(a1 + 32) userIdentityStore];
  uint64_t v5 = [*(id *)(a1 + 32) userIdentity];
  id v15 = 0;
  id v6 = [v4 getPropertiesForUserIdentity:v5 error:&v15];
  id v7 = v15;

  if (v7 || !v6)
  {
    ++*(_DWORD *)(*(void *)(a1 + 32) + 120);
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(int *)(v9 + 120);
      *(_DWORD *)buf = 138543874;
      uint64_t v17 = v9;
      __int16 v18 = 2114;
      id v19 = v7;
      __int16 v20 = 2048;
      uint64_t v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - Could not get properties for current user identity - error=%{public}@., _autoEnableFailureCount=%ld", buf, 0x20u);
    }

    [*(id *)(a1 + 32) _retryEnablingCloudMusicLibraryForReason:*(void *)(a1 + 40)];
    id v11 = v7;
  }
  else
  {
    if (MSVDeviceSupportsMultipleLibraries() || [v6 isActive])
    {
      [*(id *)(a1 + 32) _tryEnablingCloudMusicLibraryForReason:*(void *)(a1 + 40) completionHandler:0];
    }
    else
    {
      uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        unsigned int v14 = [v6 isActive];
        *(_DWORD *)buf = 138543874;
        uint64_t v17 = v13;
        __int16 v18 = 2114;
        id v19 = 0;
        __int16 v20 = 1024;
        LODWORD(v21) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished loading user identity properties with error=%{public}@. account is active=%{BOOL}u. Not loading iCML", buf, 0x1Cu);
      }
    }
    id v11 = 0;
  }
  [v3 finishWithError:v11];
}

void sub_10001C584(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 80) = 3;
  uint64_t v2 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001D328;
  v5[3] = &unk_1001BF2B0;
  id v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 _tryEnablingCloudMusicLibraryForReason:v2 completionHandler:v5];
}

void sub_10001C638(void *a1, char a2, char a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = a1[4];
  uint64_t v9 = *(NSObject **)(v8 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001C718;
  block[3] = &unk_1001B9B88;
  uint64_t v10 = (void *)a1[5];
  uint64_t v15 = a1[6];
  char v16 = a2;
  char v17 = a3;
  void block[4] = v8;
  id v13 = v7;
  id v14 = v10;
  id v11 = v7;
  dispatch_async(v9, block);
}

void sub_10001C718(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    int v4 = *(unsigned __int8 *)(a1 + 64);
    int v5 = *(unsigned __int8 *)(a1 + 65);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(_DWORD *)(v6 + 124);
    *(_DWORD *)buf = 138544642;
    uint64_t v73 = v6;
    __int16 v74 = 1024;
    int v75 = v3;
    __int16 v76 = 1024;
    int v77 = v4;
    __int16 v78 = 1024;
    int v79 = v5;
    __int16 v80 = 2114;
    uint64_t v81 = v7;
    __int16 v82 = 1024;
    int v83 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - finished reloading subscription status for reason=%d, AM=%{BOOL}u, Match=%{BOOL}u, error=%{public}@, subscriptionStatusFailureCount=%d", buf, 0x2Eu);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 80);
    uint64_t v10 = +[ICDefaults standardDefaults];
    if ([v10 shouldTreatSubscriptionStatusCheckAsIncomplete])
    {
      int v11 = MSVDeviceOSIsInternalInstall();

      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v13 = *(_DWORD *)(v12 + 124);
        *(void *)(v12 + 80) = 0;
        ++*(_DWORD *)(*(void *)(a1 + 32) + 124);
        id v14 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          uint64_t v73 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ - shouldTreatSubscriptionStatusCheckAsIncomplete is set. Will treat subscription status check as incomplete", buf, 0xCu);
        }

        [*(id *)(a1 + 32) _enqueueSubscriptionStatusCheckForReason:*(void *)(a1 + 56)];
        if (v13)
        {
          char v16 = *(void **)(a1 + 48);
          if (!v16) {
            return;
          }
          char v17 = *(NSObject **)(*(void *)(a1 + 32) + 96);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10001D0B4;
          block[3] = &unk_1001BEC70;
          id v68 = v16;
          dispatch_async(v17, block);
          __int16 v18 = v68;
        }
        else
        {
          __int16 v32 = *(void **)(a1 + 32);
          unsigned int v33 = [v32 configuration];
          uint64_t v34 = [v33 clientIdentity];
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472;
          v69[2] = sub_10001CF58;
          v69[3] = &unk_1001B9ED0;
          uint64_t v36 = *(void **)(a1 + 48);
          uint64_t v35 = *(void *)(a1 + 56);
          v69[4] = *(void *)(a1 + 32);
          uint64_t v71 = v35;
          id v70 = v36;
          [v32 _performInitialJaliscoImportWithClientIdentity:v34 completion:v69];

          __int16 v18 = v70;
        }
        goto LABEL_38;
      }
    }
    else
    {
    }
    if (*(unsigned char *)(a1 + 64) || *(unsigned char *)(a1 + 65))
    {
      *(void *)(*(void *)(a1 + 32) + 80) = 2;
      if (*(unsigned char *)(a1 + 64)
        && MSVDeviceSupportsSideLoadedMediaContent()
        && CFPreferencesGetAppBooleanValue(@"UserRequestedSubscriptionHidden", @"com.apple.mobileipod", 0))
      {
        int v23 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)(a1 + 32);
          uint64_t v25 = *(void *)(v24 + 80);
          int v26 = *(unsigned __int8 *)(a1 + 64);
          int v27 = *(unsigned __int8 *)(a1 + 65);
          *(_DWORD *)buf = 138544130;
          uint64_t v73 = v24;
          __int16 v74 = 1024;
          int v75 = v25;
          __int16 v76 = 1024;
          int v77 = v26;
          __int16 v78 = 1024;
          int v79 = v27;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@ - _musicSubscriptionCheckStatus=%d, subscribedToAppleMusic=%{BOOL}u, subscribedToiTunesMatch=%{BOOL}u, setting userRequestedSubscriptionHidden to 0", buf, 0x1Eu);
        }

        CFPreferencesSetAppValue(@"UserRequestedSubscriptionHidden", &__kCFBooleanFalse, @"com.apple.mobileipod");
        CFPreferencesAppSynchronize(@"com.apple.mobileipod");
      }
LABEL_30:
      *(_DWORD *)(*(void *)(a1 + 32) + 124) = 0;
      uint64_t v37 = *(void *)(*(void *)(a1 + 32) + 80);
      uint64_t v38 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      if (v9 != v37)
      {
        if (v39)
        {
          uint64_t v44 = *(void *)(a1 + 32);
          uint64_t v45 = *(void *)(v44 + 80);
          *(_DWORD *)buf = 138543874;
          uint64_t v73 = v44;
          __int16 v74 = 1024;
          int v75 = v9;
          __int16 v76 = 1024;
          int v77 = v45;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%{public}@ - subscription status has changed (old=%d, new=%d)", buf, 0x18u);
        }

        __int16 v46 = *(void **)(a1 + 32);
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472;
        v60[2] = sub_10001D23C;
        v60[3] = &unk_1001BF2B0;
        uint64_t v47 = *(void *)(a1 + 56);
        id v48 = *(id *)(a1 + 48);
        v60[4] = *(void *)(a1 + 32);
        id v61 = v48;
        [v46 _tryEnablingCloudMusicLibraryForReason:v47 completionHandler:v60];
        __int16 v18 = v61;
        goto LABEL_38;
      }
      if (v39)
      {
        uint64_t v40 = *(void *)(a1 + 32);
        uint64_t v41 = *(void *)(v40 + 80);
        *(_DWORD *)buf = 138543618;
        uint64_t v73 = v40;
        __int16 v74 = 1024;
        int v75 = v41;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%{public}@ - subscription status has not changed (status=%d)", buf, 0x12u);
      }

      uint64_t v42 = *(void **)(a1 + 48);
      if (v42)
      {
        uint64_t v43 = *(NSObject **)(*(void *)(a1 + 32) + 96);
        v58[0] = _NSConcreteStackBlock;
        v58[1] = 3221225472;
        v58[2] = sub_10001D2D8;
        v58[3] = &unk_1001BEC70;
        id v59 = v42;
        dispatch_async(v43, v58);
        __int16 v18 = v59;
        goto LABEL_38;
      }
      return;
    }
    uint64_t v28 = *(void *)(a1 + 32);
    if (!*(void *)(a1 + 40))
    {
      *(void *)(v28 + 80) = 3;
      goto LABEL_30;
    }
    int v29 = *(_DWORD *)(v28 + 124);
    *(_DWORD *)(v28 + 124) = v29 + 1;
    __int16 v30 = [*(id *)(a1 + 40) domain];
    if ([v30 isEqualToString:ICErrorDomain])
    {
      id v31 = [*(id *)(a1 + 40) code];

      if (v31 == (id)-7007) {
        goto LABEL_42;
      }
    }
    else
    {
    }
    if (!v29)
    {
      uint64_t v51 = *(void **)(a1 + 32);
      __int16 v52 = [v51 configuration];
      uint64_t v53 = [v52 clientIdentity];
      v64[0] = _NSConcreteStackBlock;
      v64[1] = 3221225472;
      v64[2] = sub_10001D0C4;
      v64[3] = &unk_1001B9ED0;
      int v55 = *(void **)(a1 + 48);
      uint64_t v54 = *(void *)(a1 + 56);
      v64[4] = *(void *)(a1 + 32);
      uint64_t v66 = v54;
      id v65 = v55;
      [v51 _performInitialJaliscoImportWithClientIdentity:v53 completion:v64];

      __int16 v18 = v65;
      goto LABEL_38;
    }
LABEL_42:
    [*(id *)(a1 + 32) _enqueueSubscriptionStatusCheckForReason:*(void *)(a1 + 56)];
    BOOL v49 = *(void **)(a1 + 48);
    if (v49)
    {
      uint64_t v50 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      v62[0] = _NSConcreteStackBlock;
      v62[1] = 3221225472;
      v62[2] = sub_10001D22C;
      v62[3] = &unk_1001BEC70;
      id v63 = v49;
      dispatch_async(v50, v62);
      __int16 v18 = v63;
      goto LABEL_38;
    }
    return;
  }
  id v19 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v73 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring subscription status change as the handler is not active", buf, 0xCu);
  }

  uint64_t v21 = *(void **)(a1 + 48);
  if (v21)
  {
    __int16 v22 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472;
    v56[2] = sub_10001D2E8;
    v56[3] = &unk_1001BEC70;
    id v57 = v21;
    dispatch_async(v22, v56);
    __int16 v18 = v57;
LABEL_38:
  }
}

void sub_10001CF58(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[6];
    *(_DWORD *)buf = 138543874;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 2114;
    id v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  uint64_t v7 = (void *)a1[5];
  if (v7)
  {
    int v8 = *(NSObject **)(a1[4] + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001D318;
    block[3] = &unk_1001BEC70;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t sub_10001D0B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001D0C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 2114;
    id v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished reloading media purchase history for reason=%d with error=%{public}@", buf, 0x1Cu);
  }

  [*(id *)(a1 + 32) _enqueueSubscriptionStatusCheckForReason:*(void *)(a1 + 48)];
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    int v8 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001D308;
    block[3] = &unk_1001BEC70;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t sub_10001D22C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001D23C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001D2F8;
    block[3] = &unk_1001BEC70;
    id v4 = v1;
    dispatch_async(v2, block);
  }
}

uint64_t sub_10001D2D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001D2E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001D2F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001D308(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001D318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001D328(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001D3C4;
    block[3] = &unk_1001BEC70;
    id v4 = v1;
    dispatch_async(v2, block);
  }
}

uint64_t sub_10001D3C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001D4E0(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = 115200;
  id v6 = a2;
  id v7 = a3;
  int v8 = v7;
  int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 132);
  if (v9 >= 10) {
    int v9 = 10;
  }
  unint64_t v10 = 600 * (v9 ^ 2);
  if (!v7)
  {
    int v11 = [v6 libraryDAAPConfiguration];
    if ([v11 maxSyncRetryIntervalSeconds])
    {
      unint64_t v5 = (unint64_t)[v11 maxSyncRetryIntervalSeconds];
      uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        uint64_t v26 = v13;
        __int16 v27 = 2048;
        unint64_t v28 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ maxRetryDelaySeconds=%lu", buf, 0x16u);
      }
    }
  }
  if (v5 >= v10) {
    unint64_t v14 = v10;
  }
  else {
    unint64_t v14 = v5;
  }
  double v15 = (double)v14;
  id v16 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    __int16 v18 = +[NSDate dateWithTimeIntervalSinceNow:v15];
    uint64_t v19 = *(int *)(*(void *)(a1 + 32) + 132);
    *(_DWORD *)buf = 138544130;
    uint64_t v26 = v17;
    __int16 v27 = 2114;
    unint64_t v28 = (unint64_t)v18;
    __int16 v29 = 2048;
    uint64_t v30 = v19;
    __int16 v31 = 2048;
    unint64_t v32 = v10;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ - Scheduling retry to update cloud libary on %{public}@ (failureCount=%lu, retryDelaySeconds=%lu)", buf, 0x2Au);
  }
  dispatch_time_t v20 = dispatch_time(0x8000000000000000, (uint64_t)(v15 * 1000000000.0));
  uint64_t v21 = *(void *)(a1 + 32);
  __int16 v22 = *(NSObject **)(v21 + 88);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10001D768;
  void v24[3] = &unk_1001BCD38;
  uint64_t v23 = *(void *)(a1 + 40);
  v24[4] = v21;
  v24[5] = v23;
  dispatch_after(v20, v22, v24);
}

void sub_10001D768(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 142) = 0;
  unsigned int v2 = [*(id *)(a1 + 32) isActive];
  id v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v10 = 138543618;
      uint64_t v11 = v5;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - retrying to enable cloud library for reason=%d", (uint8_t *)&v10, 0x12u);
    }

    if (*(void *)(a1 + 40) == 1) {
      uint64_t v7 = 4;
    }
    else {
      uint64_t v7 = 5;
    }
    [*(id *)(a1 + 32) _tryEnablingCloudMusicLibraryForReason:v7 completionHandler:0];
  }
  else
  {
    if (v4)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138543618;
      uint64_t v11 = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - NOT retrying to update cloud library for reason=%d as the handler is not active", (uint8_t *)&v10, 0x12u);
    }
  }
}

void sub_10001DB68(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 140) = 0;
  if ([*(id *)(a1 + 32) isActive])
  {
    unsigned int v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    _[v2 _runSubscriptionStatusCheckOperationWithReason:v3 completionHandler:0];
  }
  else
  {
    BOOL v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Not reloading subscription status as the handler is not active.", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10001DD1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Starting operation to refresh subscription status.", buf, 0xCu);
  }

  int v6 = [*(id *)(a1 + 32) userIdentityStore];
  uint64_t v7 = [*(id *)(a1 + 32) userIdentity];
  id v22 = 0;
  uint64_t v8 = [v6 getPropertiesForUserIdentity:v7 error:&v22];
  id v9 = v22;

  int v10 = MSVDeviceSupportsMultipleLibraries();
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v8 == 0;
  }
  int v12 = !v11;
  if (v10)
  {
    if (!v12 || ([v8 isActiveLocker] & 1) != 0)
    {
      int v13 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        unsigned int v15 = [v8 isActiveLocker];
        *(_DWORD *)buf = 138543874;
        uint64_t v24 = v14;
        __int16 v25 = 1024;
        unsigned int v26 = v15;
        __int16 v27 = 2114;
        v28[0] = v9;
        id v16 = "%{public}@ - Not refreshing subscription status. isActiveLocker=%{BOOL}u, loading user identity properties"
              " finished with error=%{public}@";
        uint64_t v17 = v13;
        uint32_t v18 = 28;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
        goto LABEL_21;
      }
      goto LABEL_21;
    }
  }
  else if (!v12 {
         || ([v8 isActiveLocker] & 1) != 0
  }
         || ![v8 isActive])
  {
    int v13 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      unsigned int v20 = [v8 isActive];
      unsigned int v21 = [v8 isActiveLocker];
      *(_DWORD *)buf = 138544130;
      uint64_t v24 = v19;
      __int16 v25 = 1024;
      unsigned int v26 = v20;
      __int16 v27 = 1024;
      LODWORD(v28[0]) = v21;
      WORD2(v28[0]) = 2114;
      *(void *)((char *)v28 + 6) = v9;
      id v16 = "%{public}@ - Not refreshing subscription status. isActiveAccount=%{BOOL}u, isActiveLocker=%{BOOL}u, loading "
            "user identity properties finished with error=%{public}@";
      uint64_t v17 = v13;
      uint32_t v18 = 34;
      goto LABEL_20;
    }
LABEL_21:

    goto LABEL_22;
  }
  [*(id *)(a1 + 32) _reloadSubscriptionStatusAndEnableCloudMusicLibraryWithReason:*(void *)(a1 + 40) completionHandler:0];
LABEL_22:
  [v3 finishWithError:v9];
}

void sub_10001E5F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 67109378;
    int v22 = v5;
    __int16 v23 = 2114;
    uint64_t v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished updating Jalisco Library with reason=%d, error=%{public}@", buf, 0x12u);
  }

  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 67109120;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating Saga Library with reason=%d", buf, 8u);
    }

    id v9 = *(void **)(a1 + 40);
    int v10 = [v9 configuration];
    BOOL v11 = [v10 clientIdentity];
    uint64_t v12 = *(void *)(a1 + 56);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10001E888;
    v15[3] = &unk_1001B9E30;
    uint64_t v20 = v12;
    id v16 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 40);
    id v19 = v13;
    uint64_t v17 = v14;
    id v18 = v3;
    [v9 updateSagaLibraryWithClientIdentity:v11 forReason:v12 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:v15];
  }
}

void sub_10001E810(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10001E888(void *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[8];
    uint64_t v6 = a1[4];
    *(_DWORD *)buf = 67109378;
    int v17 = v5;
    __int16 v18 = 2114;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished updating Saga Library with reason=%d, error=%{public}@", buf, 0x12u);
  }

  uint64_t v7 = (void *)a1[7];
  if (v7)
  {
    uint64_t v8 = *(NSObject **)(a1[5] + 96);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10001EA00;
    v12[3] = &unk_1001BEDD8;
    id v9 = v7;
    uint64_t v10 = a1[5];
    BOOL v11 = (void *)a1[6];
    id v15 = v9;
    void v12[4] = v10;
    id v13 = v11;
    id v14 = v3;
    dispatch_async(v8, v12);
  }
}

void sub_10001EA00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  id v2 = [*(id *)(a1 + 32) _prepareLibraryLoadErrorWithJaliscoError:*(void *)(a1 + 40) sagaError:*(void *)(a1 + 48)];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10001EB14(uint64_t a1)
{
  [*(id *)(a1 + 32) setActive:*(unsigned char *)(a1 + 48) == 0];
  id v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = [v3 isActive];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - becomeInactiveWithDeauthentication, deauthentication=%{BOOL}u, active=%{BOOL}u", buf, 0x18u);
  }

  if (*(unsigned char *)(a1 + 48) || (MSVDeviceSupportsMultipleLibraries() & 1) == 0)
  {
    uint64_t v7 = +[ICEnvironmentMonitor sharedMonitor];
    [v7 unregisterObserver:*(void *)(a1 + 32)];

    uint64_t v8 = +[NSNotificationCenter defaultCenter];
    [v8 removeObserver:*(void *)(a1 + 32)];

    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v53 = sub_100014764;
    uint64_t v54 = sub_100014774;
    id v55 = *(id *)(*(void *)(a1 + 32) + 64);
    v44[0] = 0;
    v44[1] = v44;
    v44[2] = 0x3032000000;
    v44[3] = sub_100014764;
    v44[4] = sub_100014774;
    id v45 = *(id *)(*(void *)(a1 + 32) + 72);
    id v9 = *(void **)(*(void *)(a1 + 32) + 72);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10001F1FC;
    v43[3] = &unk_1001BBC68;
    v43[4] = buf;
    [v9 cancelOperationsWithCompletionHandler:v43];
    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 64);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_10001F210;
    v42[3] = &unk_1001BBC68;
    v42[4] = v44;
    [v10 cancelOperationsWithCompletionHandler:v42];
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 72);
    *(void *)(v11 + 72) = 0;

    id v13 = *(void **)(*(void *)(a1 + 32) + 64);
    *(void *)(*(void *)(a1 + 32) + 64) = 0;

    id v14 = +[CloudContentTasteUpdateRequestListener sharedContentTasteRequestListener];
    id v15 = [*(id *)(a1 + 32) configuration];
    [v14 removeContentTasteOperationsForConnectionConfiguration:v15];

    id v16 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)__int16 v46 = 138543362;
      uint64_t v47 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished removing content taste items", v46, 0xCu);
    }

    __int16 v18 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      *(_DWORD *)__int16 v46 = 138543362;
      uint64_t v47 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ - Removing allArtistImagesMapCacheFile due to account change", v46, 0xCu);
    }

    uint64_t v20 = +[NSFileManager defaultManager];
    unsigned int v21 = +[CloudArtistHeroImageImporter allArtistImagesMapCacheFilePathURL];
    [v20 removeItemAtURL:v21 error:0];

    if (!MSVDeviceSupportsSideLoadedMediaContent()) {
      goto LABEL_21;
    }
    int v22 = [*(id *)(a1 + 32) userIdentity];
    __int16 v23 = +[ML3MusicLibrary musicLibraryForUserAccount:v22];

    uint64_t v24 = [v23 sagaAccountID];
    __int16 v25 = [v23 sagaLastKnownActiveLockerAccountDSID];
    if ([v24 longLongValue])
    {
      unsigned int v26 = v25;
      __int16 v27 = v24;
      unint64_t v28 = v27;
      if (v26 == v27)
      {

LABEL_19:
        goto LABEL_20;
      }
      unsigned __int8 v29 = [v26 isEqual:v27];

      if ((v29 & 1) == 0)
      {
        [v23 setSagaLastKnownActiveLockerAccountDSID:v28];
        uint64_t v30 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(void *)(a1 + 32);
          id v32 = [v26 longLongValue];
          id v33 = [v28 longLongValue];
          *(_DWORD *)__int16 v46 = 138543874;
          uint64_t v47 = v31;
          __int16 v48 = 2048;
          id v49 = v32;
          __int16 v50 = 2048;
          id v51 = v33;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}@ - Updating last known active locker account from %lld to %lld", v46, 0x20u);
        }
        unint64_t v28 = v30;
        goto LABEL_19;
      }
    }
LABEL_20:

LABEL_21:
    uint64_t v34 = *(void **)(a1 + 32);
    uint64_t v35 = [v34 configuration];
    uint64_t v36 = [v35 clientIdentity];
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_10001F224;
    v40[3] = &unk_1001B9B10;
    id v37 = *(id *)(a1 + 40);
    v40[4] = *(void *)(a1 + 32);
    id v41 = v37;
    [v34 _removeCloudSourcesForReason:-11 withClientIdentity:v36 byDisablingActiveLockerAccount:0 completionHandler:v40];

    _Block_object_dispose(v44, 8);
    _Block_object_dispose(buf, 8);

    return;
  }
  [*(id *)(*(void *)(a1 + 32) + 64) decreasePriorityForAllOperations];
  [*(id *)(*(void *)(a1 + 32) + 56) decreasePriorityForAllOperations];
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001F2E0;
    block[3] = &unk_1001BEC70;
    id v39 = v5;
    dispatch_async(v6, block);
  }
}

void sub_10001F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10001F1FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_10001F210(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_10001F224(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10001F2F4;
    v7[3] = &unk_1001BEC48;
    id v9 = v5;
    id v8 = v4;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_10001F2E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001F2F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10001F384(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v39 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - becomeActive", buf, 0xCu);
  }

  [*(id *)(a1 + 32) setActive:1];
  if (MSVDeviceSupportsMultipleLibraries())
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 64);
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v39 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - we have a valid JaliscoRequestHandler.", buf, 0xCu);
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v39 = v22;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - initializing JaliscoRequestHandler", buf, 0xCu);
      }

      __int16 v23 = [JaliscoRequestHandler alloc];
      uint64_t v5 = [*(id *)(a1 + 32) configuration];
      uint64_t v24 = [(JaliscoRequestHandler *)v23 initWithConfiguration:v5 updateTaskHelper:*(void *)(a1 + 32)];
      uint64_t v25 = *(void *)(a1 + 32);
      unsigned int v26 = *(void **)(v25 + 64);
      *(void *)(v25 + 64) = v24;
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 72);
    __int16 v18 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    BOOL v28 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      if (v28)
      {
        uint64_t v29 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v39 = v29;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ - we have a valid SubscriptionRequestHandler.", buf, 0xCu);
      }
    }
    else
    {
      if (v28)
      {
        uint64_t v30 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v39 = v30;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ - initializing SubscriptionRequestHandler", buf, 0xCu);
      }

      uint64_t v31 = [SubscriptionRequestHandler alloc];
      __int16 v18 = [*(id *)(a1 + 32) configuration];
      id v32 = [(SubscriptionRequestHandler *)v31 initWithConfiguration:v18];
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void **)(v33 + 72);
      *(void *)(v33 + 72) = v32;
    }
  }
  else
  {
    id v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v39 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - initializing JaliscoRequestHandler", buf, 0xCu);
    }

    uint64_t v10 = [JaliscoRequestHandler alloc];
    uint64_t v11 = [*(id *)(a1 + 32) configuration];
    uint64_t v12 = [(JaliscoRequestHandler *)v10 initWithConfiguration:v11 updateTaskHelper:*(void *)(a1 + 32)];
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void **)(v13 + 64);
    *(void *)(v13 + 64) = v12;

    id v15 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v39 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ - initializing SubscriptionRequestHandler", buf, 0xCu);
    }

    uint64_t v17 = [SubscriptionRequestHandler alloc];
    __int16 v18 = [*(id *)(a1 + 32) configuration];
    uint64_t v19 = [(SubscriptionRequestHandler *)v17 initWithConfiguration:v18];
    uint64_t v20 = *(void *)(a1 + 32);
    unsigned int v21 = *(void **)(v20 + 72);
    *(void *)(v20 + 72) = v19;
  }
  uint64_t v35 = *(void **)(a1 + 32);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10001F7DC;
  v37[3] = &unk_1001BEC20;
  v37[4] = v35;
  return [v35 _reloadSubscriptionStatusAndEnableCloudMusicLibraryWithReason:1 completionHandler:v37];
}

void sub_10001F7DC(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - Start observing subscription status changed notification", buf, 0xCu);
  }

  uint64_t v4 = +[NSNotificationCenter defaultCenter];
  [v4 addObserver:*(void *)(a1 + 32) selector:"_handleMusicSubscriptionStatusDidChangeNotification:" name:ICMusicSubscriptionStatusDidChangeNotification object:0];

  *(unsigned char *)(*(void *)(a1 + 32) + 148) = 1;
  dispatch_time_t v5 = dispatch_time(0x8000000000000000, 120000000000);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001F950;
  block[3] = &unk_1001BEC20;
  void block[4] = v6;
  dispatch_after(v5, v7, block);
}

void sub_10001F950(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 146)
    || *(int *)(v2 + 136) > 0
    || ![(id)v2 isActive]
    || *(void *)(*(void *)(a1 + 32) + 80) == 1)
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(unsigned __int8 **)(a1 + 32);
      int v5 = v4[146];
      unsigned int v6 = [v4 isActive];
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(v7 + 80);
      LODWORD(v7) = *(_DWORD *)(v7 + 136);
      *(_DWORD *)buf = 138544386;
      id v14 = v4;
      __int16 v15 = 1024;
      int v16 = v5;
      __int16 v17 = 1024;
      unsigned int v18 = v6;
      __int16 v19 = 1024;
      int v20 = v8;
      __int16 v21 = 1024;
      int v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - skipping additional subscription status check isPendingAuthentication=%{BOOL}u, isHandlerActive=%{BOOL}u, musicSubscriptionCheckStatus=%d, deauthOperationCount=%d ", buf, 0x24u);
    }
  }
  else
  {
    uint64_t v9 = +[ICUserIdentityStore defaultIdentityStore];
    uint64_t v10 = [*(id *)(a1 + 32) userIdentity];
    id v12 = 0;
    uint64_t v11 = [v9 getPropertiesForUserIdentity:v10 error:&v12];
    uint64_t v3 = v12;

    if (!v3 && v11 && [v11 isActive]) {
      [*(id *)(a1 + 32) _updateAutomaticDownloadsPreference];
    }
    [*(id *)(a1 + 32) _reloadSubscriptionStatusAndEnableCloudMusicLibraryWithReason:5 completionHandler:0];
  }
}

void sub_10001FD18(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 152);
  uint64_t v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  id v9 = [v2 objectForKey:v3];

  LODWORD(v4) = *(_DWORD *)(a1 + 48);
  int v5 = +[NSNumber numberWithFloat:v4];
  if (v9)
  {
    [v9 setObject:v5 forKey:@"ICDCloudLibrarySyncProgressKey"];
  }
  else
  {
    id v9 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v5, @"ICDCloudLibrarySyncProgressKey", 0];
  }

  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 152);
  uint64_t v8 = +[NSNumber numberWithInteger:v6];
  [v7 setObject:v9 forKey:v8];
}

void sub_10001FE40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 48)
    && *(unsigned char *)(a1 + 49)
    && MSVDeviceSupportsSideLoadedMediaContent()
    && *(void *)(a1 + 40) == -2)
  {
    double v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v19 = 138543618;
      uint64_t v20 = v5;
      __int16 v21 = 1024;
      int v22 = -2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Showing system dialog for enable cloud library error code=%d", (uint8_t *)&v19, 0x12u);
    }

    int v6 = MGGetSInt32Answer();
    uint64_t v7 = +[NSBundle mediaPlayerBundle];
    uint64_t v8 = [v7 localizedStringForKey:@"ENABLE_SYNC_LIBRARY_FAILED_TOO_MANY_ITEMS_TITLE" value:&stru_1001BF9F0 table:@"MediaPlayer"];

    if (v6 == 2)
    {
      id v9 = +[NSBundle mediaPlayerBundle];
      uint64_t v10 = v9;
      CFStringRef v11 = @"ENABLE_SYNC_LIBRARY_FAILED_TOO_MANY_ITEMS_MESSAGE_IPOD";
    }
    else
    {
      id v9 = +[NSBundle mediaPlayerBundle];
      uint64_t v10 = v9;
      if (v6 == 3) {
        CFStringRef v11 = @"ENABLE_SYNC_LIBRARY_FAILED_TOO_MANY_ITEMS_MESSAGE_IPAD";
      }
      else {
        CFStringRef v11 = @"ENABLE_SYNC_LIBRARY_FAILED_TOO_MANY_ITEMS_MESSAGE_IPHONE";
      }
    }
    id v12 = [v9 localizedStringForKey:v11 value:&stru_1001BF9F0 table:@"MediaPlayer"];

    if (![v8 length] && !objc_msgSend(v12, "length"))
    {
      __int16 v17 = +[NSAssertionHandler currentHandler];
      unsigned int v18 = +[NSString stringWithUTF8String:"void CloudLibraryUtilitiesShowFailedToEnableCloudLibrarySystemDialog(ICCloudLibraryUtilitiesDisableICMLReason)"];
      [v17 handleFailureInFunction:v18 file:@"CloudLibraryUtilities.m" lineNumber:105 description:@"Either alertHeader or alertMessage is required."];
    }
    id v13 = objc_alloc_init((Class)MSVSystemDialogOptions);
    [v13 setAlertHeader:v8];
    [v13 setAlertMessage:v12];
    id v14 = +[NSBundle mediaPlayerBundle];
    __int16 v15 = [v14 localizedStringForKey:@"OK" value:&stru_1001BF9F0 table:@"MediaPlayer"];
    [v13 setDefaultButtonTitle:v15];

    [v13 setForceModalAlertAppearance:1];
    id v16 = [objc_alloc((Class)MSVSystemDialog) initWithOptions:v13];
    [v16 presentWithCompletion:0];
  }
}

void sub_10002021C(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 72);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadScreenshotInfoForSubscriptionPersistentIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadScreenshotInfoForSubscriptionPersistentIDs as we don't have a valid SubscriptionRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      id v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002039C;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002039C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100020504(void *a1)
{
  id v2 = *(void **)(a1[4] + 72);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadArtworkInfoForSubscriptionContainerPersistentIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadArtworkInfoForSubscriptionContainerPersistentIDs as we don't have a valid SubscriptionRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      id v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100020684;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100020684(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000207EC(void *a1)
{
  id v2 = *(void **)(a1[4] + 72);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadArtworkInfoForSubscriptionItemPersistentIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadArtworkInfoForSubscriptionItemPersistentIDs as we don't have a valid SubscriptionRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      id v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002096C;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002096C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100020A64(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeSubscriptionContainerArtworkForPersistentID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeSubscriptionContainerArtworkForPersistentID as we don't have a valid SubscriptionRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_100020BE4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeSubscriptionScreenshotForPersistentID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeSubscriptionScreenshotForPersistentID as we don't have a valid SubscriptionRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_100020D64(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeSubscriptionItemArtworkForPersistentID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeSubscriptionItemArtworkForPersistentID as we don't have a valid SubscriptionRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_100020F38(void *a1)
{
  id v2 = *(void **)(a1[4] + 72);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importContainerArtworkForPersistentID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importContainerArtworkForPersistentID as we don't have a valid SubscriptionRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      id v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000210B8;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000210B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100021200(void *a1)
{
  id v2 = *(void **)(a1[4] + 72);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importScreenshotForPersistentID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importScreenshotForPersistentID as we don't have a valid SubscriptionRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      id v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100021380;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100021380(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000214C8(void *a1)
{
  id v2 = *(void **)(a1[4] + 72);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importItemArtworkForPersistentID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importItemArtworkForPersistentID as we don't have a valid SubscriptionRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      id v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100021648;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100021648(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000217AC(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 hideItemsWithPurchaseHistoryIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring hideItemsWithPurchaseHistoryIDs as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      id v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002192C;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002192C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100021A44(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 64);
  if (v2)
  {
    [v2 loadMissingArtworkWithClientIdentity:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v8 = 138543362;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadMissingArtwork as we don't have a valid JaliscoRequestHandler", (uint8_t *)&v8, 0xCu);
    }
  }
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 72);
  if (v5)
  {
    [v5 loadMissingArtworkWithClientIdentity:*(void *)(a1 + 40)];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543362;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadMissingArtwork as we don't have a valid SubscriptionRequestHandler", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_100021C84(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadBooksForStoreIDs:v3 clientIdentity:v4 withCompletionHandler:v5];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadBooksForStoreIDs as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    int v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100021E04;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100021E04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100021F50(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    _[v2 isMediaKindDisabledForJaliscoLibrary:v3 withClientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring isMediaKindDisabledForJaliscoLibrary as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    int v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000220D0;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000220D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100022238(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadScreenshotInfoForPurchaseHistoryIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadScreenshotInfoForPurchaseHistoryIDs as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    int v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000223B8;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000223B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100022520(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadArtworkInfoForPurchaseHistoryIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadArtworkInfoForPurchaseHistoryIDs as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    int v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000226A0;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000226A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100022818(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v5 = a1[8];
    [v2 setItemProperties:v3 forPurchaseHistoryID:v5 clientIdentity:v4 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setItemProperties as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[7];
    if (v9)
    {
      uint64_t v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100022998;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100022998(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100022ADC(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    [v2 removeLibraryWithClientIdentity:v3 completion:v4];
  }
  else
  {
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring removeLibraryWithCompletion as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    uint64_t v7 = (void *)a1[6];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100022C58;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_100022C58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100022D4C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeScreenshotForPurchaseHistoryID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeScreenshotForPurchaseHistoryID as we don't have a valid JaliscoRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_100022ECC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeItemArtworkForPurchaseHistoryID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeItemArtworkForPurchaseHistoryID as we don't have a valid JaliscoRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1000230A0(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importScreenshotForPurchaseHistoryID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importScreenshotForPurchaseHistoryID as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100023220;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100023220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100023368(void *a1)
{
  id v2 = *(void **)(a1[4] + 64);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importItemArtworkForPurchaseHistoryID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importItemArtworkForPurchaseHistoryID as we don't have a valid JaliscoRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000234E8;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000234E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100023610(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[5];
    uint64_t v3 = a1[6];
    [v2 resetInvitationURLForCollaborationWithPersistentID:v3 completion:v4];
  }
  else
  {
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring request to remove a collaborator, as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v7 = (void *)a1[5];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002378C;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_10002378C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000238D8(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 removeCollaborators:v5 fromCollaborationWithPersistentID:v3 completion:v4];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring request to remove a collaborator, as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100023A58;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100023A58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100023BB0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 40);
    [v2 respondToPendingCollaborator:v6 onCollaborationWithPersistentID:v3 withApproval:v5 completion:v4];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring request to respond to a collaborator, as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = *(void **)(a1 + 48);
    if (v9)
    {
      id v10 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100023D34;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100023D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100023E98(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 joinCollaborationWithGlobalPlaylistID:v3 invitationURL:v4 completion:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring join collaboration request, as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100024018;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100024018(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100024190(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v5 = a1[8];
    [v2 editCollaborationWithPersistentID:v5 properties:v3 trackEdits:v4 completion:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring edit collaboration request, as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[7];
    if (v9)
    {
      id v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100024310;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100024310(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100024438(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[5];
    uint64_t v3 = a1[6];
    [v2 endCollaborationWithPersistentID:v3 completion:v4];
  }
  else
  {
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring end collaboration request, as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v7 = (void *)a1[5];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000245B4;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_1000245B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000246E4(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = a1[7];
    uint64_t v5 = a1[5];
    [v2 beginCollaborationUsingPlaylistWithPersistentID:v3 sharingMode:v4 completion:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring start collaboration request, as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[5];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100024864;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100024864(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000249C4(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2 && a1[7] && a1[8])
  {
    objc_msgSend(v2, "favoriteEntityWithPersistentID:sagaID:entityType:time:completionHandler:");
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = NSStringFromICFavoriteMediaEntityType();
      uint64_t v6 = a1[7];
      uint64_t v7 = a1[8];
      *(_DWORD *)buf = 138544130;
      uint64_t v13 = v4;
      __int16 v14 = 2114;
      __int16 v15 = v5;
      __int16 v16 = 2048;
      uint64_t v17 = v6;
      __int16 v18 = 2048;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignore favoriting entityType=%{public}@ with sagaID=%lld, persistentID=%lld as we don't have a valid SagaRequestHandler OR the identifiers are invalid", buf, 0x2Au);
    }
    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100024B98;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100024B98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100024D0C(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2 && a1[5] && a1[8])
  {
    objc_msgSend(v2, "favoriteArtistWithPersistentID:cloudLibraryID:time:completionHandler:");
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = a1[5];
      uint64_t v6 = a1[8];
      *(_DWORD *)buf = 138543874;
      uint64_t v12 = v4;
      __int16 v13 = 2114;
      uint64_t v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignore favoriting artist with cloudLibraryID=%{public}@, persistentID=%lld  as we don't have a valid SagaRequestHandler OR the identifiers are invalid", buf, 0x20u);
    }

    uint64_t v7 = (void *)a1[7];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100024EB4;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_100024EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100025028(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2 && a1[5] && a1[8])
  {
    objc_msgSend(v2, "favoriteAlbumWithPersistentID:cloudLibraryID:time:completionHandler:");
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = a1[5];
      uint64_t v6 = a1[8];
      *(_DWORD *)buf = 138543874;
      uint64_t v12 = v4;
      __int16 v13 = 2114;
      uint64_t v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignore favoriting album with cloudLibraryID=%{public}@, persistentID=%lld as we don't have a valid SagaRequestHandler OR the identifiers are invalid", buf, 0x20u);
    }

    uint64_t v7 = (void *)a1[7];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000251D0;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_1000251D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100025344(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2 && a1[8] && a1[5])
  {
    objc_msgSend(v2, "favoritePlaylistWithPersistentID:globalID:time:completionHandler:");
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = a1[5];
      uint64_t v6 = a1[8];
      *(_DWORD *)buf = 138543874;
      uint64_t v12 = v4;
      __int16 v13 = 2114;
      uint64_t v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignore favoriting playlist with globalID=%{public}@, persistentID=%lld as we don't have a valid SagaRequestHandler OR the identifiers are invalid", buf, 0x20u);
    }

    uint64_t v7 = (void *)a1[7];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000254EC;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_1000254EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100025648(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2 && a1[7] && a1[8])
  {
    objc_msgSend(v2, "favoriteEntityWithPersistentID:storeID:entityType:time:completionHandler:");
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = NSStringFromICFavoriteMediaEntityType();
      uint64_t v7 = a1[7];
      uint64_t v6 = a1[8];
      *(_DWORD *)buf = 138544130;
      uint64_t v13 = v4;
      __int16 v14 = 2114;
      __int16 v15 = v5;
      __int16 v16 = 2048;
      uint64_t v17 = v6;
      __int16 v18 = 2048;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignore favoriting entityType=%{public}@ with storeID=%lld, persistentID=%lld as we don't have a valid SagaRequestHandler OR the identifiers are invalid", buf, 0x2Au);
    }
    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002581C;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002581C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100025C6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_100025C84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_100025C9C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100025DA0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadScreenshotInfoForSagaIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadScreenshotInfoForSagaIDs as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100025F20;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100025F20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100026088(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadArtworkInfoForContainerSagaIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadArtworkInfoForContainerSagaIDs as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100026208;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100026208(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100026370(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 loadArtworkInfoForSagaIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadArtworkInfoForSagaIDs as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000264F0;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000264F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10002663C(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 loadGeniusItemsForSagaID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring loadGeniusItemsForSagaID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000267BC;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000267BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10002694C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 73);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    [v2 updateSubscribedPlaylistsWithSagaIDs:v5 ignoreMinRefreshInterval:v3 requestReason:v7 pinnedOnly:v4 clientIdentity:v6 completionHandler:v8];
  }
  else
  {
    uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring updateSubscribedPlaylistsWithSagaIDs as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    id v11 = *(void **)(a1 + 56);
    if (v11)
    {
      uint64_t v12 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100026AD4;
      block[3] = &unk_1001BEC70;
      id v14 = v11;
      dispatch_async(v12, block);
    }
  }
}

void sub_100026AD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100026C18(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    [v2 updatePlaylistPlayDataWithClientIdentity:v3 completionHandler:v4];
  }
  else
  {
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring updatePlaylistPlayDataWithCompletionHandler as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v7 = (void *)a1[6];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100026D94;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_100026D94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100026ED8(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    [v2 updateItemPlayDataWithClientIdentity:v3 completionHandler:v4];
  }
  else
  {
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring updateItemPlayDataWithCompletionHandler as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v7 = (void *)a1[6];
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100027054;
      block[3] = &unk_1001BEC70;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_100027054(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000271C8(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v5 = a1[8];
    [v2 setAlbumArtistProperties:v3 withArtistPersistentID:v5 clientIdentity:v4 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setAlbumArtistProperties as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[7];
    if (v9)
    {
      id v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100027348;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100027348(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000274BC(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v5 = a1[8];
    [v2 setAlbumEntityProperties:v3 withAlbumPersistentID:v5 clientIdentity:v4 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setAlbumProperties as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[7];
    if (v9)
    {
      id v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002763C;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_10002763C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000277B0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v5 = a1[8];
    [v2 setAlbumProperties:v3 forItemsWithAlbumPersistentID:v5 clientIdentity:v4 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setAlbumItemProperties as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[7];
    if (v9)
    {
      id v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100027930;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100027930(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100027AA4(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v5 = a1[8];
    [v2 setItemProperties:v3 forSagaID:v5 clientIdentity:v4 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setItemProperties as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[7];
    if (v9)
    {
      id v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100027C24;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100027C24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100027D78(void *a1)
{
  if (!*(void *)(a1[4] + 56))
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setCloudFavoriteSongAddToLibraryBehavior as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v5 = (void *)a1[6];
    if (!v5) {
      return;
    }
    uint64_t v6 = *(NSObject **)(a1[4] + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100028218;
    block[3] = &unk_1001BEC70;
    id v19 = v5;
    dispatch_async(v6, block);
    uint64_t v7 = v19;
LABEL_19:

    return;
  }
  if (!_os_feature_enabled_impl())
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      id v10 = ICCloudClientGetStringForAddToLibraryBehavior();
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v9;
      __int16 v26 = 2114;
      uint64_t v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setCloudFavoriteSongAddToLibraryBehavior as %{public}@ feature is not enabled", buf, 0x16u);
    }
    id v11 = (void *)a1[6];
    if (!v11) {
      return;
    }
    id v12 = *(NSObject **)(a1[4] + 96);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000281A0;
    v20[3] = &unk_1001BEC70;
    id v21 = v11;
    dispatch_async(v12, v20);
    uint64_t v7 = v21;
    goto LABEL_19;
  }
  if (a1[7])
  {
    id v2 = *(void **)(a1[4] + 56);
    objc_msgSend(v2, "setCloudFavoriteSongAddToLibraryBehavior:clientIdentity:completionHandler:");
    return;
  }
  uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = a1[4];
    __int16 v15 = ICCloudClientGetStringForAddToLibraryBehavior();
    *(_DWORD *)buf = 138543618;
    uint64_t v25 = v14;
    __int16 v26 = 2114;
    uint64_t v27 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setCloudFavoriteSongAddToLibraryBehavior as %{public}@ is not a valid behavior", buf, 0x16u);
  }
  uint64_t v16 = (void *)a1[6];
  if (v16)
  {
    uint64_t v17 = *(NSObject **)(a1[4] + 96);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100028128;
    v22[3] = &unk_1001BEC70;
    id v23 = v16;
    dispatch_async(v17, v22);
    uint64_t v7 = v23;
    goto LABEL_19;
  }
}

void sub_100028128(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000281A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100028218(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100028360(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 setCloudAddToPlaylistBehavior:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setCloudAddToPlaylistBehavior as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000284E0;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_1000284E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000286A0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    uint64_t v6 = a1[8];
    uint64_t v8 = a1[9];
    uint64_t v7 = a1[10];
    [v2 setPlaylistProperties:v3 trackList:v4 forPlaylistPersistentID:v7 clientIdentity:v5 requestingBundleID:v6 completionHandler:v8];
  }
  else
  {
    uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setPlaylistProperties with bundleID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    id v11 = (void *)a1[9];
    if (v11)
    {
      id v12 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100028824;
      block[3] = &unk_1001BEC70;
      id v14 = v11;
      dispatch_async(v12, block);
    }
  }
}

void sub_100028824(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000289B8(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[8];
    uint64_t v5 = a1[9];
    uint64_t v7 = a1[7];
    [v2 setPlaylistProperties:v3 trackList:v4 forPlaylistPersistentID:v5 clientIdentity:v7 completionHandler:v6];
  }
  else
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring setPlaylistProperties as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v10 = (void *)a1[8];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100028B3C;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_100028B3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100028CA0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 addStorePlaylistWithGlobalID:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addStorePlaylistWithGlobalID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100028E20;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_100028E20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100028FB4(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    uint64_t v6 = a1[8];
    [v2 addStoreItemWithOpaqueID:v3 requestingBundleID:v4 clientIdentity:v5 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addStoreItemWithOpaqueID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[8];
    if (v9)
    {
      uint64_t v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100029134;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100029134(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000292AC(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v5 = a1[8];
    [v2 addStoreItemWithAdamID:v5 referral:v3 clientIdentity:v4 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addStoreItemWithAdamID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[7];
    if (v9)
    {
      uint64_t v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002942C;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_10002942C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000295A8(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[8];
    uint64_t v4 = a1[9];
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v7 = a1[7];
    [v2 addItemWithSagaID:v3 toPlaylistWithPersistentID:v4 requestingBundleID:v5 clientIdentity:v6 completionHandler:v7];
  }
  else
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addItemWithSagaID with bundleID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v10 = (void *)a1[7];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002972C;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_10002972C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000298C0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[8];
    uint64_t v3 = a1[9];
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v7 = a1[7];
    [v2 addStoreItemWithOpaqueID:v5 toPlaylistWithPersistentID:v3 requestingBundleID:v6 clientIdentity:v7 completionHandler:v4];
  }
  else
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addStoreItemWithOpaqueID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v10 = (void *)a1[8];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100029A44;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_100029A44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100029BA0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = a1[8];
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    [v2 addItemWithSagaID:v3 toPlaylistWithPersistentID:v4 clientIdentity:v5 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addItemWithSagaID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v9 = (void *)a1[6];
    if (v9)
    {
      uint64_t v10 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100029D20;
      block[3] = &unk_1001BEC70;
      id v12 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100029D20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100029E98(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[8];
    uint64_t v4 = a1[9];
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v7 = a1[7];
    [v2 addStoreItemWithAdamID:v3 referral:v5 toPlaylistWithPersistentID:v4 clientIdentity:v6 completionHandler:v7];
  }
  else
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addStoreItemWithAdamID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v10 = (void *)a1[7];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002A01C;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_10002A01C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002A1DC(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    uint64_t v6 = a1[8];
    uint64_t v8 = a1[9];
    uint64_t v7 = a1[10];
    [v2 addGeniusPlaylistWithPersistentID:v7 name:v3 seedItemIDs:v4 itemIDs:v5 clientIdentity:v6 completionHandler:v8];
  }
  else
  {
    uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring addGeniusPlaylistWithPersistentID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    id v11 = (void *)a1[9];
    if (v11)
    {
      id v12 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002A360;
      block[3] = &unk_1001BEC70;
      id v14 = v11;
      dispatch_async(v12, block);
    }
  }
}

void sub_10002A360(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10002A4AC(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 uploadArtworkForPlaylistWithPersistentID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring uploadArtworkForPlaylistWithPersistentID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002A62C;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002A62C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002A790(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 removePlaylistsWithSagaIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring removePlaylistsWithSagaIDs as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002A910;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002A910(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002AA74(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    [v2 removeItemsWithSagaIDs:v3 clientIdentity:v4 completionHandler:v5];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring removeItemsWithSagaIDs as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[7];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002ABF4;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002ABF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002AD3C(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 publishPlaylistWithSagaID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring publishPlaylistWithSagaID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002AEBC;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002AEBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

void sub_10002B084(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    uint64_t v6 = a1[8];
    uint64_t v8 = a1[9];
    uint64_t v7 = a1[10];
    [v2 createPlaylistWithPersistentID:v7 properties:v3 trackList:v4 requestingBundleID:v5 clientIdentity:v6 completionHandler:v8];
  }
  else
  {
    uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring createPlaylistWithPersistentID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    id v11 = (void *)a1[9];
    if (v11)
    {
      id v12 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002B208;
      block[3] = &unk_1001BEC70;
      id v14 = v11;
      dispatch_async(v12, block);
    }
  }
}

void sub_10002B208(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10002B3A0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[8];
    uint64_t v3 = a1[9];
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v7 = a1[7];
    [v2 createPlaylistWithPersistentID:v3 properties:v5 trackList:v6 clientIdentity:v7 completionHandler:v4];
  }
  else
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring createPlaylistWithPersistentID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v10 = (void *)a1[8];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002B524;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_10002B524(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10002B61C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeContainerArtworkForSagaID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeContainerArtworkForSagaID as we don't have a valid SagaRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10002B79C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeScreenshotForSagaID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeScreenshotForSagaID as we don't have a valid SagaRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10002B91C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [v2 deprioritizeItemArtworkForSagaID:v3];
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring deprioritizeItemArtworkForSagaID as we don't have a valid SagaRequestHandler", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10002BAF0(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importContainerArtworkForSagaID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importContainerArtworkForSagaID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002BC70;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002BC70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002BDB8(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importScreenshotForSagaID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importScreenshotForSagaID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002BF38;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002BF38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002C080(void *a1)
{
  id v2 = *(void **)(a1[4] + 56);
  if (v2)
  {
    uint64_t v4 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v5 = a1[5];
    [v2 importItemArtworkForSagaID:v3 clientIdentity:v5 completionHandler:v4];
  }
  else
  {
    int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - ignoring importItemArtworkForSagaID as we don't have a valid SagaRequestHandler", buf, 0xCu);
    }

    uint64_t v8 = (void *)a1[6];
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1[4] + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002C200;
      block[3] = &unk_1001BEC70;
      id v11 = v8;
      dispatch_async(v9, block);
    }
  }
}

void sub_10002C200(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002C328(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) updateProgress];
  float v3 = v2;
  if (*(void *)(a1 + 48))
  {
    float v4 = v2 + 0.0;
    uint64_t v5 = [*(id *)(a1 + 32) musicLibrary];
    uint64_t v6 = (uint64_t)[v5 jaliscoOnDiskDatabaseRevision];

    [*(id *)(*(void *)(a1 + 32) + 56) updateProgress];
    float v8 = v7;
    uint64_t v9 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v9 + 144))
    {
      if (v4 == 0.0)
      {
        if (v6 >= 1 && !*(unsigned char *)(v9 + 145)) {
          float v4 = 0.25;
        }
      }
      else if (v4 > 0.25)
      {
        float v4 = 0.25;
      }
    }
    float v15 = v4 + (float)(v7 * 0.75);
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 48);
      CFStringRef v18 = @"Unknown";
      int v19 = *(unsigned __int8 *)(v16 + 144);
      if (v17 == 1) {
        CFStringRef v18 = @"Saga";
      }
      int v20 = *(unsigned __int8 *)(v16 + 145);
      *(_DWORD *)buf = 138545154;
      if (v17) {
        CFStringRef v21 = v18;
      }
      else {
        CFStringRef v21 = @"Jalisco";
      }
      uint64_t v28 = v16;
      __int16 v29 = 2114;
      CFStringRef v30 = v21;
      __int16 v31 = 1024;
      *(_DWORD *)id v32 = v6;
      *(_WORD *)&v32[4] = 1024;
      *(_DWORD *)&v32[6] = v19;
      __int16 v33 = 1024;
      int v34 = v20;
      __int16 v35 = 2048;
      double v36 = v8;
      __int16 v37 = 2048;
      double v38 = v3;
      __int16 v39 = 2048;
      double v40 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ - updateProgressForLibraryType for libraryType=%{public}@, jaliscoDatabaseVersion=%d, havePendingSagaUpdate=%{BOOL}u, _didManuallyReloadCloudLibrary=%{BOOL}u, sagaUpdateProgress=%f, jaliscoUpdateProgress=%f, progress=%f", buf, 0x46u);
    }
    float v3 = v15;
  }
  else
  {
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      CFStringRef v12 = @"Unknown";
      if (v11 == 1) {
        CFStringRef v12 = @"Saga";
      }
      uint64_t v13 = *(void *)(a1 + 32);
      if (v11) {
        CFStringRef v14 = v12;
      }
      else {
        CFStringRef v14 = @"Jalisco";
      }
      *(_DWORD *)buf = 138543874;
      uint64_t v28 = v13;
      __int16 v29 = 2114;
      CFStringRef v30 = v14;
      __int16 v31 = 2048;
      *(double *)id v32 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ - updateProgressForLibraryType for libraryType=%{public}@, progress=%f", buf, 0x20u);
    }
  }

  int v22 = *(void **)(a1 + 40);
  if (v22)
  {
    id v23 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10002C65C;
    void v24[3] = &unk_1001B9BD8;
    id v25 = v22;
    float v26 = v3;
    dispatch_async(v23, v24);
  }
}

uint64_t sub_10002C65C(uint64_t a1)
{
  return (*(uint64_t (**)(void, float))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(float *)(a1 + 40));
}

id sub_10002C6F0(uint64_t a1)
{
  if (*(void *)(a1 + 40) == 1) {
    uint64_t v1 = &OBJC_IVAR___ICDCloudMusicLibraryRequestHandler__sagaRequestHandler;
  }
  else {
    uint64_t v1 = &OBJC_IVAR___ICDCloudMusicLibraryRequestHandler__jaliscoRequestHandler;
  }
  return [*(id *)(*(void *)(a1 + 32) + *v1) cancelPendingChanges];
}

void sub_10002C7D0(uint64_t a1)
{
  if (*(void *)(a1 + 48) == 1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    float v3 = *(void **)(*(void *)(a1 + 32) + 56);
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    [v3 addBackgroundOperation:v2 priority:v4];
  }
  else
  {
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - Unsupported request to add background operation (%p) for Jalisco library", (uint8_t *)&v8, 0x16u);
    }
  }
}

id sub_10002C9A0(uint64_t a1)
{
  if (*(void *)(a1 + 48) == 1) {
    uint64_t v1 = &OBJC_IVAR___ICDCloudMusicLibraryRequestHandler__sagaRequestHandler;
  }
  else {
    uint64_t v1 = &OBJC_IVAR___ICDCloudMusicLibraryRequestHandler__jaliscoRequestHandler;
  }
  return [*(id *)(*(void *)(a1 + 32) + *v1) addOperation:*(void *)(a1 + 40) priority:*(unsigned int *)(a1 + 56)];
}

id sub_10002C9D0(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = ICCloudClientGetStringForRequestReason();
    int v6 = 138543618;
    uint64_t v7 = v3;
    __int16 v8 = 2114;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - Starting to update jalisco library for reason=%{public}@", (uint8_t *)&v6, 0x16u);
  }
  return [*(id *)(a1 + 32) updateJaliscoLibraryWithClientIdentity:*(void *)(a1 + 40) forReason:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
}

void sub_10002CAB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002CC24(uint64_t a1)
{
  if (*(void *)(a1 + 56) == 4
    && ([*(id *)(a1 + 32) musicLibrary],
        id v2 = objc_claimAutoreleasedReturnValue(),
        [v2 sagaAccountID],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        id v4 = [v3 longLongValue],
        v3,
        v2,
        !v4))
  {
    id v23 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v37 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@ - Ignoring request for periodic poll because ICML is not enabled", buf, 0xCu);
    }

    id v25 = *(void **)(a1 + 48);
    if (v25)
    {
      float v26 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      id v34[2] = sub_10002D004;
      v34[3] = &unk_1001BEC70;
      id v35 = v25;
      dispatch_async(v26, v34);
      uint64_t v16 = v35;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(void **)(v5 + 56);
    if (v6)
    {
      if (*(unsigned char *)(v5 + 148))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        uint64_t v7 = *(void *)(a1 + 56);
        uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
        uint64_t v10 = *(unsigned __int8 *)(a1 + 65);
        uint64_t v11 = *(void *)(a1 + 40);
        [v6 updateLibraryWithClientIdentity:v11 reason:v7 allowNoisyAuthPrompt:v9 isExplicitUserAction:v10 completionHandler:v8];
        return;
      }
      uint64_t v17 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@ - Deferring saga library update as the handler has not finished initial setup", buf, 0xCu);
      }

      dispatch_time_t v19 = dispatch_time(0x8000000000000000, 60000000000);
      uint64_t v20 = *(void *)(a1 + 32);
      CFStringRef v21 = *(NSObject **)(v20 + 88);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10002D07C;
      v29[3] = &unk_1001B9B88;
      uint64_t v22 = *(void *)(a1 + 56);
      v29[4] = v20;
      uint64_t v32 = v22;
      id v30 = *(id *)(a1 + 40);
      __int16 v33 = *(_WORD *)(a1 + 64);
      id v31 = *(id *)(a1 + 48);
      dispatch_after(v19, v21, v29);

      uint64_t v16 = v30;
LABEL_19:

      return;
    }
    CFStringRef v12 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v37 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ - Not updating saga library as the handler is nil", buf, 0xCu);
    }

    CFStringRef v14 = *(void **)(a1 + 48);
    if (v14)
    {
      float v15 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002D16C;
      block[3] = &unk_1001BEC70;
      id v28 = v14;
      dispatch_async(v15, block);
      uint64_t v16 = v28;
      goto LABEL_19;
    }
  }
}

void sub_10002D004(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_10002D07C(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = ICCloudClientGetStringForRequestReason();
    int v6 = 138543618;
    uint64_t v7 = v3;
    __int16 v8 = 2114;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - Starting to update saga library for reason=%{public}@", (uint8_t *)&v6, 0x16u);
  }
  return [*(id *)(a1 + 32) updateSagaLibraryWithClientIdentity:*(void *)(a1 + 40) forReason:*(void *)(a1 + 56) allowNoisyAuthPrompt:*(unsigned __int8 *)(a1 + 64) isExplicitUserAction:*(unsigned __int8 *)(a1 + 65) completionHandler:*(void *)(a1 + 48)];
}

void sub_10002D16C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002D200(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v5 = a3;
  if (!v5 && [v19 isActiveLocker])
  {
    BOOL v6 = *(unsigned char *)(a1 + 72) || *(void *)(a1 + 32) || *(unsigned char *)(*(void *)(a1 + 40) + 144) != 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v6;
    uint64_t v7 = [*(id *)(a1 + 40) musicLibrary];
    if ([v7 sagaOnDiskDatabaseRevision])
    {
      BOOL v8 = 0;
    }
    else if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      BOOL v8 = 1;
    }
    else
    {
      BOOL v8 = *(unsigned char *)(*(void *)(a1 + 40) + 144) != 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v8;
  }
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    int v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    int v13 = *(unsigned __int8 *)(a1 + 72);
    int v14 = *(unsigned __int8 *)(a1 + 73);
    int v15 = *(unsigned __int8 *)(v10 + 144);
    uint64_t v16 = *(void *)(v10 + 80);
    *(_DWORD *)buf = 138545410;
    uint64_t v25 = v10;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = v13;
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 1024;
    int v35 = v15;
    __int16 v36 = 1024;
    int v37 = v16;
    __int16 v38 = 2114;
    id v39 = v5;
    __int16 v40 = 1024;
    unsigned int v41 = [v19 isActiveLocker];
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - isUpdatingCloudLibraryWithCompletion sagaUpdateInProgress=%{BOOL}u, sagaInitialImport=%{BOOL}u, jaliscoUpdateInProgress=%{BOOL}u, jaliscoInitialImport=%{BOOL}u, havePendingSagaUpdate=%{BOOL}u, musicSubscriptionCheckStatus=%d, error=%{public}@, properties.isActiveLocker-%{BOOL}u", buf, 0x40u);
  }

  uint64_t v17 = *(void **)(a1 + 48);
  if (v17)
  {
    uint64_t v18 = *(NSObject **)(*(void *)(a1 + 40) + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002D4AC;
    block[3] = &unk_1001B9B38;
    id v21 = v17;
    long long v22 = *(_OWORD *)(a1 + 56);
    __int16 v23 = *(_WORD *)(a1 + 72);
    dispatch_async(v18, block);
  }
}

uint64_t sub_10002D4AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

id sub_10002D590(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 152) count];
  if (result) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned char *)(*(void *)(a1 + 32) + 144) != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

void sub_10002E07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_10002E0A0(uint64_t a1, void *a2)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 userIdentity];
  [v4 setIdentity:v5];

  id v6 = [*(id *)(a1 + 32) userIdentityStore];
  [v4 setIdentityStore:v6];
}

void sub_10002E130(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(NSObject **)(v2 + 88);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10002E3A0;
  v5[3] = &unk_1001B9CF0;
  uint64_t v4 = *(void *)(a1 + 56);
  void v5[4] = v2;
  uint64_t v8 = v4;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v3, v5);
}

void sub_10002E1EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10002E38C;
    v6[3] = &unk_1001BEC48;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10002E2A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10002E378;
    v6[3] = &unk_1001BEC48;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10002E364(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002E378(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10002E38C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10002E3A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10002E448;
  v6[3] = &unk_1001B9B10;
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v2 _removeCloudSourcesForReason:v4 withClientIdentity:v3 byDisablingActiveLockerAccount:1 completionHandler:v6];
}

void sub_10002E448(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10002E504;
    v7[3] = &unk_1001BEC48;
    id v9 = v5;
    id v8 = v4;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_10002E504(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10002E518(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "Default");
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id v5 = [(NSError *)v2 msv_description];
      int v6 = 138543362;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Automatic download media kind update task completed error=%{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Automatic download media kind update task completed", (uint8_t *)&v6, 2u);
  }
}

void sub_10002E800(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) musicLibrary];
  [v4 setClientIdentity:*(void *)(a1 + 40)];

  id v5 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    int v8 = *(unsigned __int8 *)(a1 + 64);
    int v9 = *(unsigned __int8 *)(a1 + 65);
    *(_DWORD *)buf = 138544130;
    uint64_t v22 = v6;
    __int16 v23 = 1024;
    int v24 = v7;
    __int16 v25 = 1024;
    int v26 = v8;
    __int16 v27 = 1024;
    int v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - Starting to run a subscription status check to enable cloud library with policy=%d startInitialImport=%{BOOL}u, isExplicitUserAction=%{BOOL}u", buf, 0x1Eu);
  }

  uint64_t v10 = [*(id *)(a1 + 32) configuration];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10002E9C8;
  v14[3] = &unk_1001B9AC8;
  int v12 = *(void **)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v14[4] = *(void *)(a1 + 32);
  uint64_t v18 = v11;
  id v17 = v12;
  id v15 = v3;
  char v19 = *(unsigned char *)(a1 + 65);
  id v16 = *(id *)(a1 + 40);
  char v20 = *(unsigned char *)(a1 + 64);
  id v13 = v3;
  sub_100010794(v10, v14);
}

void sub_10002E9C8(uint64_t a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  if (!v7)
  {
    uint64_t v8 = 2;
    if (!(a2 | a3)) {
      uint64_t v8 = 3;
    }
    *(void *)(*(void *)(a1 + 32) + 80) = v8;
    [*(id *)(a1 + 32) _updateAutomaticDownloadsPreference];
  }
  if ((unint64_t)(*(void *)(a1 + 64) - 1) > 1)
  {
    if (!*(unsigned char *)(a1 + 72) && !*(unsigned char *)(a1 + 73))
    {
      __int16 v52 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v53 = *(unsigned __int8 **)(a1 + 32);
        uint64_t v54 = *(void *)(a1 + 64);
        int v55 = v53[146];
        *(_DWORD *)buf = 138543874;
        uint64_t v94 = v53;
        __int16 v95 = 1024;
        *(_DWORD *)id v96 = v54;
        *(_WORD *)&v96[4] = 1024;
        *(_DWORD *)&v96[6] = v55;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%{public}@ - enableCloudLibraryWithClientIdentity called with nothing to enable. enableCloudLibraryPolicy=%d, isPendingAuthentication=%{BOOL}u", buf, 0x18u);
      }

      uint64_t v56 = *(void **)(a1 + 56);
      if (!v56) {
        goto LABEL_12;
      }
      id v57 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      id v68 = _NSConcreteStackBlock;
      uint64_t v69 = 3221225472;
      id v70 = sub_10002F684;
      uint64_t v71 = &unk_1001BEC70;
      id v72 = v56;
      dispatch_async(v57, &v68);
      int v14 = v72;
      goto LABEL_11;
    }
    id v15 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = *(unsigned __int8 **)(a1 + 32);
      int v17 = *(unsigned __int8 *)(a1 + 73);
      uint64_t v18 = *(void *)(a1 + 64);
      int v19 = *(unsigned __int8 *)(a1 + 72);
      int v20 = v16[146];
      *(_DWORD *)buf = 138544386;
      uint64_t v94 = v16;
      __int16 v95 = 1024;
      *(_DWORD *)id v96 = v17;
      *(_WORD *)&v96[4] = 1024;
      *(_DWORD *)&v96[6] = v18;
      LOWORD(v97) = 1024;
      *(_DWORD *)((char *)&v97 + 2) = v19;
      HIWORD(v97) = 1024;
      int v98 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ - User is not subscriber, performing Jalisco import. shouldStartInitialImport=%{BOOL}u, enableCloudLibraryPolicy=%d, isExplicitUserAction=%{BOOL}u, isPendingAuthentication=%{BOOL}u", buf, 0x24u);
    }

    id v21 = *(void **)(a1 + 32);
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472;
    v73[2] = sub_10002F4B4;
    v73[3] = &unk_1001BA088;
    v73[4] = v21;
    uint64_t v22 = *(void *)(a1 + 48);
    id v75 = *(id *)(a1 + 56);
    id v74 = *(id *)(a1 + 40);
    [v21 _performJaliscoImportWithClientIdentity:v22 byAddingMediaKind:1 completionHandler:v73];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v9 + 146))
    {
      uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(unsigned __int8 **)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v94 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ - We have a pending saga authenticate operation. Will not try to enable cloud library", buf, 0xCu);
      }

      int v12 = *(void **)(a1 + 56);
      if (!v12) {
        goto LABEL_12;
      }
      id v13 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002F390;
      block[3] = &unk_1001BEC70;
      id v92 = v12;
      dispatch_async(v13, block);
      int v14 = v92;
LABEL_11:

LABEL_12:
      objc_msgSend(*(id *)(a1 + 40), "finishWithError:", 0, v68, v69, v70, v71);
      goto LABEL_40;
    }
    if (!v7 && *(void *)(v9 + 80) == 2)
    {
      if (*(unsigned char *)(a1 + 72))
      {
        __int16 v23 = [(id)v9 musicLibrary];
        int v24 = [v23 sagaLastKnownActiveLockerAccountDSID];
        id v25 = [v24 longLongValue];

        int v26 = [*(id *)(a1 + 32) userIdentity];
        __int16 v27 = [v26 accountDSID];
        id v28 = [v27 longLongValue];

        if (v28 == v25)
        {
          int v29 = [*(id *)(a1 + 32) musicLibrary];
          [v29 setSagaLastKnownActiveLockerAccountDSID:0];

          __int16 v30 = sub_1000EFE94();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            int v31 = *(unsigned __int8 **)(a1 + 32);
            *(_DWORD *)buf = 138543362;
            uint64_t v94 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}@ - Clearing last known locker account", buf, 0xCu);
          }
        }
        BOOL v32 = *(void *)(a1 + 64) == 1;
        int v33 = [*(id *)(a1 + 32) musicLibrary];
        [v33 setSagaPrefersToMergeWithCloudLibrary:v32];

        uint64_t v9 = *(void *)(a1 + 32);
      }
      __int16 v34 = [(id)v9 userIdentityStore];
      int v35 = [*(id *)(a1 + 32) userIdentity];
      id v90 = 0;
      __int16 v36 = [v34 getPropertiesForUserIdentity:v35 error:&v90];
      id v37 = v90;

      if (*(unsigned char *)(a1 + 72)) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = 5;
      }
      if (v36)
      {
        unsigned __int8 v39 = [v36 isActiveLocker];
        __int16 v40 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
        BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
        if ((v39 & 1) == 0)
        {
          if (v41)
          {
            id v63 = *(unsigned __int8 **)(a1 + 32);
            *(_DWORD *)buf = 138543618;
            uint64_t v94 = v63;
            __int16 v95 = 1024;
            *(_DWORD *)id v96 = v38;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%{public}@ - performing SagaAuthenticationOperation enableICMLReason=%d", buf, 0x12u);
          }

          v64 = *(void **)(a1 + 32);
          uint64_t v65 = *(void *)(a1 + 48);
          uint64_t v66 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
          uint64_t v67 = *(unsigned __int8 *)(a1 + 72);
          v84[0] = _NSConcreteStackBlock;
          v84[1] = 3221225472;
          v84[2] = sub_10002F3A4;
          v84[3] = &unk_1001B9AA0;
          v84[4] = *(void *)(a1 + 32);
          uint64_t v87 = v38;
          char v88 = v67;
          char v89 = *(unsigned char *)(a1 + 73);
          id v86 = *(id *)(a1 + 56);
          id v85 = *(id *)(a1 + 40);
          [v64 _runSagaAuthenticateOperationWithClientIdentity:v65 mergePreference:v66 allowNoisyPrompt:v67 cloudLibraryEnableReason:v38 completionHandler:v84];

          goto LABEL_54;
        }
        if (v41)
        {
          uint64_t v42 = *(unsigned __int8 **)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          uint64_t v94 = v42;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%{public}@ - ICML is already enabled", buf, 0xCu);
        }

        uint64_t v43 = *(void **)(a1 + 56);
        if (!v43)
        {
LABEL_50:
          [*(id *)(a1 + 40) finishWithError:0];
LABEL_54:

          goto LABEL_40;
        }
        uint64_t v44 = *(NSObject **)(*(void *)(a1 + 32) + 96);
        v82[0] = _NSConcreteStackBlock;
        v82[1] = 3221225472;
        v82[2] = sub_10002F478;
        v82[3] = &unk_1001BEC70;
        id v83 = v43;
        dispatch_async(v44, v82);
        id v45 = v83;
      }
      else
      {
        uint64_t v58 = sub_1000EFE94();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          id v59 = *(void **)(a1 + 32);
          v60 = [v59 userIdentity];
          *(_DWORD *)buf = 138543874;
          uint64_t v94 = (unsigned __int8 *)v59;
          __int16 v95 = 2114;
          *(void *)id v96 = v60;
          *(_WORD *)&v96[8] = 2114;
          id v97 = v37;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%{public}@ - Not enabling cloud library. Could not get properties of %{public}@, error=%{public}@", buf, 0x20u);
        }
        id v61 = *(void **)(a1 + 56);
        if (!v61) {
          goto LABEL_50;
        }
        uint64_t v62 = *(NSObject **)(*(void *)(a1 + 32) + 96);
        v79[0] = _NSConcreteStackBlock;
        v79[1] = 3221225472;
        v79[2] = sub_10002F48C;
        v79[3] = &unk_1001BEC48;
        id v81 = v61;
        id v80 = v37;
        dispatch_async(v62, v79);

        id v45 = v81;
      }

      goto LABEL_50;
    }
    __int16 v46 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v48 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 134218498;
      uint64_t v94 = v47;
      __int16 v95 = 2114;
      *(void *)id v96 = v7;
      *(_WORD *)&v96[8] = 1024;
      LODWORD(v97) = v48;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "CloudService %p - loading subscription status finished with error=%{public}@, not enabling iCML with policy=%d ", buf, 0x1Cu);
    }

    id v49 = +[NSError errorWithDomain:ICErrorDomain code:2003 userInfo:0];
    __int16 v50 = *(void **)(a1 + 56);
    if (v50)
    {
      id v51 = *(NSObject **)(*(void *)(a1 + 32) + 96);
      v76[0] = _NSConcreteStackBlock;
      v76[1] = 3221225472;
      v76[2] = sub_10002F4A0;
      v76[3] = &unk_1001BEC48;
      id v78 = v50;
      id v77 = v49;
      dispatch_async(v51, v76);
    }
    [*(id *)(a1 + 40) finishWithError:v7];
  }
LABEL_40:
}

uint64_t sub_10002F390(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002F3A4(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 65);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002F6AC;
  v8[3] = &unk_1001B9A78;
  void v8[4] = v4;
  uint64_t v7 = *(void *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  [v4 _handleSagaAuthentication:a2 finishedForReason:v7 explicitUserAction:v5 shouldStartInitialImport:v6 completionHandler:v8];
}

uint64_t sub_10002F478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002F48C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10002F4A0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10002F4B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = objc_msgSend(v3, "msv_description");
      *(_DWORD *)buf = 138543618;
      uint64_t v18 = v6;
      __int16 v19 = 2114;
      int v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ - Jalisco import complete. error=%{public}@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - Jalisco import complete.", buf, 0xCu);
  }

  id v9 = *(void **)(a1 + 48);
  if (v9)
  {
    id v10 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_10002F698;
    int v14 = &unk_1001BEC48;
    id v16 = v9;
    id v15 = v3;
    dispatch_async(v10, &v11);
  }
  objc_msgSend(*(id *)(a1 + 40), "finishWithError:", v3, v11, v12, v13, v14);
}

uint64_t sub_10002F684(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002F698(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10002F6AC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  uint64_t v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = objc_msgSend(v5, "msv_description");
      *(_DWORD *)buf = 138543874;
      uint64_t v20 = v8;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 2114;
      int v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ - SagaAuthentication complete. shouldRetry=%{BOOL}u error=%{public}@", buf, 0x1Cu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    uint64_t v20 = v10;
    __int16 v21 = 1024;
    int v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - SagaAuthentication complete. shouldRetry=%{BOOL}u", buf, 0x12u);
  }

  uint64_t v11 = *(void **)(a1 + 48);
  if (v11)
  {
    uint64_t v12 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    id v15 = sub_10002F898;
    id v16 = &unk_1001BEC48;
    id v18 = v11;
    id v17 = v5;
    dispatch_async(v12, &v13);
  }
  objc_msgSend(*(id *)(a1 + 40), "finishWithError:", v5, v13, v14, v15, v16);
}

uint64_t sub_10002F898(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10002F928(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v9 = 138543362;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - Handling music app install", (uint8_t *)&v9, 0xCu);
  }

  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)v4[8];
  uint64_t v6 = [v4 configuration];
  uint64_t v7 = [v6 clientIdentity];
  [v5 updateLibraryWithClientIdentity:v7 reason:6 completionHandler:0];

  return [*(id *)(a1 + 32) _tryEnablingCloudMusicLibraryForReason:6 completionHandler:0];
}

void sub_10002FE68(id a1)
{
  qword_1001F3768 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);

  _objc_release_x1();
}

void sub_100030514(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    int v9 = v21 = v6;
    uint64_t v10 = *(void **)(a1 + 32);
    if ([v10 method]) {
      CFStringRef v11 = @"POST";
    }
    else {
      CFStringRef v11 = @"GET";
    }
    uint64_t v12 = [*(id *)(a1 + 32) action];
    id v13 = (objc_class *)objc_opt_class();
    uint64_t v14 = NSStringFromClass(v13);
    id v15 = [v5 responseCode];
    id v16 = [v5 responseData];
    *(_DWORD *)buf = 138545154;
    id v23 = v9;
    __int16 v24 = 2048;
    id v25 = v10;
    __int16 v26 = 2114;
    CFStringRef v27 = v11;
    __int16 v28 = 2114;
    int v29 = v12;
    __int16 v30 = 2114;
    int v31 = v14;
    __int16 v32 = 2048;
    id v33 = v5;
    __int16 v34 = 2048;
    id v35 = v15;
    __int16 v36 = 2048;
    id v37 = [v16 length];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p method=%{public}@ action=%{public}@> received response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x52u);

    id v6 = v21;
  }

  if (v6)
  {
    id v17 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "JaliscoSetItemPropertyOperation failed with error: %{public}@", buf, 0xCu);
    }
  }
  id v18 = *(void **)(a1 + 40);
  uint64_t v19 = (uint64_t)[v5 responseCode];
  if (v19 > 399)
  {
    if (v19 != 404 && v19 != 400) {
      goto LABEL_17;
    }
    uint64_t v20 = 3;
  }
  else
  {
    uint64_t v20 = 1;
    if (v19 != 200 && v19 != 204) {
LABEL_17:
    }
      uint64_t v20 = 2;
  }
  [v18 setStatus:v20];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100030CB0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = a1[4];
      uint64_t v10 = objc_msgSend(v6, "msv_description");
      *(_DWORD *)buf = 138543618;
      id v32 = v9;
      __int16 v33 = 2114;
      __int16 v34 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Finished request to begin collaboration error=%{public}@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = a1[4];
    *(_DWORD *)buf = 138543362;
    id v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished request to begin collaboration", buf, 0xCu);
  }

  uint64_t v12 = (uint64_t)[v5 responseCode];
  if (v12 > 399)
  {
    if (v12 == 404 || v12 == 400)
    {
      uint64_t v13 = 3;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  if (v12 != 200 && v12 != 204) {
LABEL_13:
  }
    uint64_t v13 = 2;
LABEL_14:
  [a1[4] setStatus:v13];
  [a1[4] setError:v6];
  if (!v6)
  {
    id v14 = v5;
    *(void *)((char *)a1[4] + 114) = [v14 collaborationCloudLibraryID];
    uint64_t v15 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v14 collaborationCloudLibraryID]);
    v29[0] = ML3ContainerPropertyStoreCloudID;
    v29[1] = ML3ContainerPropertyIsCollaborative;
    __int16 v28 = (void *)v15;
    v30[0] = v15;
    v30[1] = &__kCFBooleanTrue;
    v29[2] = ML3ContainerPropertyCollaborationMode;
    id v16 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v14 collaborationMode]);
    v30[2] = v16;
    v30[3] = &off_1001CBB58;
    v29[3] = ML3ContainerPropertyCollaboratorPermissions;
    v29[4] = ML3ContainerPropertyCollaborationInvitationURL;
    uint64_t v17 = [v14 collaborationInviteURL];
    id v18 = (void *)v17;
    if (v17) {
      CFStringRef v19 = (const __CFString *)v17;
    }
    else {
      CFStringRef v19 = &stru_1001BF9F0;
    }
    void v30[4] = v19;
    void v29[5] = ML3ContainerPropertyCollaborationInvitationURLExpirationDate;
    uint64_t v20 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v14 collaborationInviteURLExpirationDate]);
    v30[5] = v20;
    v29[6] = ML3ContainerPropertyCloudGlobalID;
    uint64_t v21 = [v14 collaborationGlobalID];
    int v22 = (void *)v21;
    if (v21) {
      CFStringRef v23 = (const __CFString *)v21;
    }
    else {
      CFStringRef v23 = &stru_1001BF9F0;
    }
    v29[7] = ML3ContainerPropertyCollaboratorStatus;
    v30[6] = v23;
    v30[7] = &off_1001CBB70;
    __int16 v24 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:8];
    id v25 = +[NSMutableDictionary dictionaryWithDictionary:v24];

    if (([a1[5] setValuesForPropertiesWithDictionary:v25] & 1) == 0)
    {
      __int16 v26 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        id v27 = a1[4];
        *(_DWORD *)buf = 138543362;
        id v32 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}@ Failed to update container properties", buf, 0xCu);
      }
    }
    *((unsigned char *)a1[4] + 106) = [v14 updateRequired];
  }
  [a1[6] endTransaction];
  [a1[4] finish];
}

uint64_t sub_1000314AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  uint64_t v7 = (uint64_t)[*(id *)(a1 + 40) jaliscoOnDiskDatabaseRevision];
  uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7 < 1)
  {
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "No purchase history database revision, skipping deauthenticate and clean up.", buf, 2u);
    }
  }
  else
  {
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Removing purchase history tracks", buf, 2u);
    }

    dispatch_semaphore_t v10 = dispatch_semaphore_create(0);
    id v11 = *(void **)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000317E0;
    v18[3] = &unk_1001BDE80;
    uint64_t v8 = v10;
    CFStringRef v19 = v8;
    [v11 removeSource:4 usingConnection:v3 withCompletionHandler:v18];
    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 40) jaliscoOnDiskDatabaseRevision];
      *(_DWORD *)buf = 134217984;
      id v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Clearing purchase history database revision (%ld)", buf, 0xCu);
    }

    [*(id *)(a1 + 40) setJaliscoOnDiskDatabaseRevision:0];
    [*(id *)(a1 + 40) clearJaliscoAccountID];
    [*(id *)(a1 + 40) setStorefrontIdentifier:0];
    id v14 = +[NSDate distantPast];
    [*(id *)(a1 + 40) setJaliscoLastGeniusUpdateDate:v14];

    if ([*(id *)(a1 + 40) jaliscoHasCloudGeniusData])
    {
      [*(id *)(a1 + 40) clearAllGeniusData];
      [*(id *)(a1 + 40) setJaliscoHasCloudGeniusData:0];
      [*(id *)(a1 + 40) setJaliscoIsMusicGeniusUserEnabled:0];
    }
    [*(id *)(a1 + 40) clearAllCloudKVSData];
    id v15 = objc_alloc_init((Class)CSSearchableIndex);
    [v15 deleteInteractionsWithGroupIdentifiers:&off_1001CCB80 bundleID:@"com.apple.Music" protectionClass:0 completionHandler:&stru_1001BA1B8];
  }
  id v16 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Cancelling any outstanding jalisco track downloads.", buf, 2u);
  }

  sub_10007C934(*(void **)(a1 + 40));
  return 1;
}

intptr_t sub_1000317E0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000317E8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to remove playback intents. err=%{public}@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_100031DCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  uint64_t v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)uint64_t v17 = 134217984;
    *(void *)&v17[4] = [v5 responseCode];
    BOOL v9 = "Set album artist properties response: %lu";
    dispatch_semaphore_t v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    *(_WORD *)uint64_t v17 = 0;
    BOOL v9 = "Set album artist properties received no response";
    dispatch_semaphore_t v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    uint32_t v12 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, v17, v12);
LABEL_7:

  if (v6)
  {
    id v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v17 = 138543362;
      *(void *)&v17[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Set album artist properties response with error: %{public}@", v17, 0xCu);
    }
  }
  id v14 = *(void **)(a1 + 32);
  uint64_t v15 = (uint64_t)objc_msgSend(v5, "responseCode", *(_OWORD *)v17);
  if (v15 > 399)
  {
    if (v15 != 404 && v15 != 400) {
      goto LABEL_18;
    }
    uint64_t v16 = 3;
  }
  else
  {
    uint64_t v16 = 1;
    if (v15 != 200 && v15 != 204) {
LABEL_18:
    }
      uint64_t v16 = 2;
  }
  [v14 setStatus:v16];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100032C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100032C74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100032C84(uint64_t a1)
{
}

void sub_100032C8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  dispatch_semaphore_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000334A4(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  ICDAAPUtilitiesWriteContainer();
}

void sub_100033538(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        ICDAAPUtilitiesWriteProperty();
        ++v8;
      }
      while (v6 != v8);
      id v6 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void sub_100034108(uint64_t a1)
{
}

void sub_100034CC4(id a1)
{
  qword_1001F3778 = [[ICDDefaults alloc] _init];

  _objc_release_x1();
}

uint64_t sub_100034E4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000350BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000350D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000350E4(uint64_t a1)
{
}

void sub_1000350EC(uint64_t a1)
{
  id v8 = [(id)objc_opt_class() handlers];
  uint64_t v2 = [v8 allValues];
  id v3 = NSStringFromSelector("configuration");
  id v4 = [v2 valueForKeyPath:v3];
  id v5 = [v4 copy];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000352D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000352F0(uint64_t a1)
{
  uint64_t v2 = [(id)objc_opt_class() handlers];
  id v3 = [*(id *)(a1 + 32) userIdentity];
  id v4 = [v3 accountDSID];

  if (v4)
  {
    uint64_t v5 = [v2 objectForKeyedSubscript:v4];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v8 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v14 = 134218754;
      uint64_t v15 = v9;
      __int16 v16 = 2048;
      uint64_t v17 = v10;
      __int16 v18 = 2114;
      id v19 = (id)objc_opt_class();
      __int16 v20 = 2114;
      id v21 = v4;
      id v11 = v19;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BaseRequestHandler %p - Deleting handler %p - class=%{public}@ dsid=%{public}@", (uint8_t *)&v14, 0x2Au);
    }
    [v2 setObject:0 forKeyedSubscript:v4];
  }
  else
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = 0;
  }
}

void sub_1000354B4()
{
  v0 = (objc_class *)objc_opt_class();
  id v1 = NSStringFromClass(v0);
  uint64_t v2 = +[NSString stringWithFormat:@"com.apple.%@.global.serial.queue", v1];

  id v7 = v2;
  id v3 = (const char *)[v7 UTF8String];
  id v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v5 = dispatch_queue_create(v3, v4);
  uint64_t v6 = (void *)qword_1001F3788;
  qword_1001F3788 = (uint64_t)v5;
}

void sub_100035570(void *a1)
{
  id v308 = a1;
  id v1 = [v308 userIdentity];
  uint64_t v2 = +[ML3MusicLibrary musicLibraryForUserAccount:v1];

  uint64_t v3 = (uint64_t)objc_msgSend(v2, "icd_sagaDatabaseUserVersion");
  id v4 = [v2 sagaOnDiskDatabaseRevision];
  uint64_t v5 = (uint64_t)[v2 jaliscoOnDiskDatabaseRevision];
  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218752;
    *(void *)&uint8_t buf[4] = 620000;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 2048;
    v313 = v4;
    LOWORD(v314) = 2048;
    *(void *)((char *)&v314 + 2) = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Migrating to version %ld, from userVersion=%ld, sagaDatabaseRevision=%ld, jaliscoDatabaseRevision=%ld", buf, 0x2Au);
  }

  if (!v3) {
    goto LABEL_7;
  }
  if (v3 == 620000) {
    goto LABEL_10;
  }
  if ((uint64_t)v4 <= 0 && v5 < 1)
  {
LABEL_7:
    objc_msgSend(v2, "icd_setSagaDatabaseUserVersion:", 620000);
    id v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = 620000;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Skipping migration and setting user version to latest: %ld", buf, 0xCu);
    }

    goto LABEL_10;
  }
  id v25 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Current user version: %ld", buf, 0xCu);
  }

  if (v3 < 620000)
  {
    uint64_t v306 = ML3TrackPropertyPurchaseHistoryID;
    uint64_t v307 = ML3TrackPropertyMediaType;
    uint64_t v302 = ML3TrackPropertyStoreTVSeasonCanonicalItemId;
    uint64_t v301 = ML3TrackPropertyStoreTVShowCanonicalItemId;
    uint64_t v300 = ML3TrackPropertyStoreCanonicalItemId;
    uint64_t v298 = ML3TrackPropertyFilePath;
    uint64_t v299 = ML3TrackPropertyBaseLocationID;
    uint64_t v296 = ML3ContainerPropertyCloudIsSubscribed;
    uint64_t v297 = ML3TrackPropertyTitle;
    uint64_t v305 = ML3TrackPropertyStoreExtrasURL;
    uint64_t v295 = ML3ContainerPropertyDateModified;
    do
    {
      if (v3 > 390009)
      {
        if (v3 <= 510009)
        {
          if (v3 > 400009)
          {
            if (v3 <= 400029)
            {
              switch(v3)
              {
                case 400010:
                  id v195 = v2;
                  v196 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                  if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEFAULT, "Migrating to version 400020", buf, 2u);
                  }

                  if ([v195 sagaOnDiskDatabaseRevision]
                    && (uint64_t)objc_msgSend(v195, "icd_sagaDatabaseUserVersion") >= 1)
                  {
                    [v195 setSagaNeedsFullUpdate:1];
                  }

                  uint64_t v75 = 400000;
                  goto LABEL_451;
                case 400020:
                  id v197 = v2;
                  v198 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                  if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEFAULT, "Migrating to version 400025", buf, 2u);
                  }

                  if ([v197 sagaOnDiskDatabaseRevision]
                    && (uint64_t)objc_msgSend(v197, "icd_sagaDatabaseUserVersion") >= 1)
                  {
                    [v197 setSagaNeedsFullUpdate:1];
                  }

                  uint64_t v3 = 400025;
                  break;
                case 400025:
                  id v78 = v2;
                  int v79 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion400025to400030]", buf, 2u);
                  }

                  id v80 = +[ML3ComparisonPredicate predicateWithProperty:v307 value:&off_1001CBC18 comparison:10];
                  id v81 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
                  *(void *)buf = v80;
                  *(void *)&buf[8] = v81;
                  __int16 v82 = +[NSArray arrayWithObjects:buf count:2];
                  id v83 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v82];

                  sub_100039F00(v78, (uint64_t)v83);
                  uint64_t v84 = 400000;
                  goto LABEL_301;
              }
            }
            else
            {
              if (v3 <= 503999)
              {
                if (v3 != 400030)
                {
                  if (v3 == 500000)
                  {
                    id v50 = v2;
                    id v51 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Migrating to version 504000", buf, 2u);
                    }

                    if ([v50 sagaNeedsFullUpdate]) {
                      [v50 setSagaLastLibraryUpdateTime:0];
                    }

                    uint64_t v3 = 504000;
                  }
                  goto LABEL_490;
                }
                id v163 = v2;
                v164 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_DEFAULT, "Migrating to version 500000", buf, 2u);
                }

                if ([v163 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v163, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v163 setSagaNeedsFullUpdate:1];
                }

                unsigned __int16 v165 = -24288;
                goto LABEL_405;
              }
              if (v3 == 504000)
              {
                id v242 = v2;
                v243 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_DEFAULT, "Migrating to version 510000", buf, 2u);
                }

                if (_os_feature_enabled_impl()
                  && [v242 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v242, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v242 setSagaNeedsFullUpdate:1];
                  [v242 setSagaLastLibraryUpdateTime:0];
                }

                unsigned __int16 v165 = -14288;
                goto LABEL_405;
              }
              if (v3 == 510000)
              {
                id v131 = v2;
                v132 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "Migrating to version 510010", buf, 2u);
                }

                if ([v131 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v131, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v131 setSagaNeedsFullUpdate:1];
                  [v131 setSagaLastLibraryUpdateTime:0];
                }

                unsigned __int16 v133 = -14288;
                goto LABEL_327;
              }
            }
          }
          else if (v3 <= 390039)
          {
            switch(v3)
            {
              case 390010:
                id v168 = v2;
                v169 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion390010to390020]", buf, 2u);
                }

                if (((MSVDeviceIsWatch() & 1) != 0 || MSVDeviceIsAudioAccessory())
                  && [v168 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v168, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v168 setSagaNeedsFullUpdate:1];
                }

                unsigned __int16 v170 = -3216;
                goto LABEL_431;
              case 390020:
                id v171 = v2;
                v172 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion390020to390030]", buf, 2u);
                }

                if ([v171 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v171, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  v173 = sub_1000EFDB4();
                  if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEFAULT, "Resetting sagaOnDiskDatabaseRevision to 1 to update missing cloud_universal_library_id", buf, 2u);
                  }

                  [v171 setSagaNeedsFullUpdate:1];
                }

                unsigned __int16 v58 = -3216;
LABEL_300:
                uint64_t v84 = v58 | 0x50000u;
LABEL_301:
                uint64_t v3 = v84 + 30;
                break;
              case 390030:
                id v66 = v2;
                uint64_t v67 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion390030to390040]", buf, 2u);
                }

                if ([v66 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v66, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  id v68 = sub_1000EFDB4();
                  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Resetting sagaOnDiskDatabaseRevision to 1 to update missing category_type_mask and grouping_sort_key", buf, 2u);
                  }

                  [v66 setSagaNeedsFullUpdate:1];
                }

                uint64_t v69 = 390000;
                goto LABEL_437;
            }
          }
          else
          {
            if (v3 <= 390059)
            {
              if (v3 != 390040)
              {
                if (v3 == 390050)
                {
                  id v37 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion390050to390060]", buf, 2u);
                  }

                  uint64_t v3 = 390060;
                }
                goto LABEL_490;
              }
              id v153 = v2;
              v154 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion390040to390050]", buf, 2u);
              }

              if ([v153 sagaOnDiskDatabaseRevision]
                && (uint64_t)objc_msgSend(v153, "icd_sagaDatabaseUserVersion") >= 1)
              {
                v155 = sub_1000EFDB4();
                if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "Resetting sagaOnDiskDatabaseRevision to 1 to update missing hls fields", buf, 2u);
                }

                [v153 setSagaNeedsFullUpdate:1];
              }

              uint64_t v61 = 390000;
              goto LABEL_258;
            }
            if (v3 == 390060)
            {
              id v214 = v2;
              v215 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion390060to400000]", buf, 2u);
              }

              if ([v214 sagaOnDiskDatabaseRevision]
                && (uint64_t)objc_msgSend(v214, "icd_sagaDatabaseUserVersion") >= 1)
              {
                v216 = +[ML3ComparisonPredicate predicateWithProperty:v295 value:&off_1001CBBA0 comparison:3];
                *(void *)v322 = v216;
                v217 = +[ML3ComparisonPredicate predicateWithProperty:v296 equalToInteger:1];
                uint64_t v323 = (uint64_t)v217;
                v218 = +[NSArray arrayWithObjects:v322 count:2];
                v219 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v218];

                id v220 = v214;
                v221 = +[ML3Container queryWithLibrary:v220 predicate:v219];
                v222 = +[NSMutableArray array];
                *(void *)block = _NSConcreteStackBlock;
                uint64_t v317 = 3221225472;
                uint64_t v318 = (uint64_t)sub_10003A49C;
                v319 = &unk_1001BE4C8;
                v223 = v222;
                v320 = v223;
                [v221 enumeratePersistentIDsUsingBlock:block];
                v224 = sub_1000EFDEC();
                if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v327) = 138543362;
                  *(void *)((char *)&v327 + 4) = v223;
                  _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEFAULT, "Will reset date_modified to 0 for playlistPersistenIDs=%{public}@", (uint8_t *)&v327, 0xCu);
                }

                *(void *)buf = _NSConcreteStackBlock;
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = sub_10003A4FC;
                v313 = &unk_1001BE540;
                *(void *)&long long v314 = v223;
                *((void *)&v314 + 1) = v220;
                id v225 = v220;
                v226 = v223;
                [v225 performDatabaseTransactionWithBlock:buf];

                [v225 setSagaLastSubscribedContainersUpdateTime:0];
                v227 = sub_1000EFDB4();
                if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v227, OS_LOG_TYPE_DEFAULT, "Resetting sagaOnDiskDatabaseRevision to 1 to update date_modified for subscribed playlists", buf, 2u);
                }

                [v225 setSagaNeedsFullUpdate:1];
              }

              uint64_t v3 = 400000;
              goto LABEL_490;
            }
            if (v3 == 400000)
            {
              id v303 = v2;
              v101 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)block = 0;
                _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "Migrating to version 400010", block, 2u);
              }

              id v102 = objc_alloc_init((Class)NSDateComponents);
              [v102 setYear:2021];
              [v102 setMonth:6];
              [v102 setDay:24];
              [v102 setHour:0];
              [v102 setMinute:0];
              id v103 = [objc_alloc((Class)NSCalendar) initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
              uint64_t v104 = [v103 dateFromComponents:v102];
              v105 = +[ML3ComparisonPredicate predicateWithProperty:v299 value:&off_1001CBC00 comparison:4];
              id v106 = +[ML3ComparisonPredicate predicateWithProperty:v307 value:&off_1001CBBB8 comparison:10];
              *(void *)block = v105;
              uint64_t v317 = (uint64_t)v106;
              id v107 = +[NSArray arrayWithObjects:block count:2];
              uint64_t v108 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v107];
              v109 = +[ML3Track unrestrictedAllItemsQueryWithlibrary:v303 predicate:v108 orderingTerms:0];

              *(void *)v322 = v298;
              uint64_t v323 = v297;
              id v110 = +[NSArray arrayWithObjects:v322 count:2];
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = sub_10003A5C4;
              v313 = &unk_1001BEF58;
              *(void *)&long long v314 = v104;
              id v111 = v104;
              [v109 enumeratePersistentIDsAndProperties:v110 usingBlock:buf];

              uint64_t v43 = 400000;
              goto LABEL_477;
            }
          }
        }
        else if (v3 <= 539999)
        {
          if (v3 <= 520019)
          {
            switch(v3)
            {
              case 510010:
                id v182 = v2;
                v183 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEFAULT, "Migrating to version 520000", buf, 2u);
                }

                if (_os_feature_enabled_impl()
                  && [v182 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v182, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v182 setSagaNeedsFullUpdate:1];
                  [v182 setSagaLastLibraryUpdateTime:0];
                }

                unsigned __int16 v165 = -4288;
LABEL_405:
                uint64_t v3 = v165 | 0x70000u;
                break;
              case 520000:
                id v184 = v2;
                v185 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_DEFAULT, "Migrating to version 520010", buf, 2u);
                }

                if ([v184 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v184, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v184 setSagaNeedsFullUpdate:1];
                  [v184 setSagaLastLibraryUpdateTime:0];
                }

                unsigned __int16 v133 = -4288;
LABEL_327:
                uint64_t v43 = v133 | 0x70000u;
                goto LABEL_477;
              case 520010:
                id v72 = v308;
                uint64_t v73 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Migrating to version 520020", buf, 2u);
                }

                id v74 = [[CloudPendingChangesCoordinator alloc] initWithConfiguration:v72 prefix:@"Saga" loggable:objc_opt_class()];
                [(CloudPendingChangesCoordinator *)v74 removeAllPendingChanges];

                uint64_t v75 = 520000;
                goto LABEL_451;
            }
          }
          else if (v3 > 530009)
          {
            if (v3 == 530010)
            {
              id v234 = v2;
              id v235 = v308;
              v236 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)block = 0;
                _os_log_impl((void *)&_mh_execute_header, v236, OS_LOG_TYPE_DEFAULT, "Migrating to version 530020", block, 2u);
              }

              *(void *)block = 0;
              uint64_t v317 = (uint64_t)block;
              uint64_t v318 = 0x2020000000;
              LOBYTE(v319) = 0;
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = sub_10003A90C;
              v313 = &unk_1001BA300;
              *(void *)&long long v314 = block;
              [v234 databaseConnectionAllowingWrites:0 withBlock:buf];
              if (*(unsigned char *)(v317 + 24)
                && [v234 sagaOnDiskDatabaseRevision]
                && (uint64_t)objc_msgSend(v234, "icd_sagaDatabaseUserVersion") >= 1)
              {
                [v234 setSagaNeedsFullUpdate:1];
                [v234 setSagaLastLibraryUpdateTime:0];
              }
              _Block_object_dispose(block, 8);

              uint64_t v75 = 530000;
              goto LABEL_451;
            }
            if (v3 == 530020)
            {
              id v121 = v2;
              id v122 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "Migrating to version 540000", buf, 2u);
              }

              if ([v121 sagaOnDiskDatabaseRevision]
                && (uint64_t)objc_msgSend(v121, "icd_sagaDatabaseUserVersion") >= 1)
              {
                [v121 setSagaNeedsFullUpdate:1];
                [v121 setSagaLastLibraryUpdateTime:0];
              }

              unsigned __int16 v123 = 15712;
              goto LABEL_268;
            }
          }
          else
          {
            if (v3 == 520020)
            {
              id v159 = v2;
              v160 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "Migrating to version 530000", buf, 2u);
              }

              if ([v159 sagaOnDiskDatabaseRevision]
                && (uint64_t)objc_msgSend(v159, "icd_sagaDatabaseUserVersion") >= 1)
              {
                [v159 setSagaLastLibraryUpdateTime:0];
              }

              unsigned __int16 v123 = 5712;
LABEL_268:
              uint64_t v3 = v123 | 0x80000u;
              goto LABEL_490;
            }
            if (v3 == 530000)
            {
              id v40 = v2;
              BOOL v41 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Migrating to version 530010", buf, 2u);
              }

              if ([v40 sagaOnDiskDatabaseRevision]
                && (uint64_t)objc_msgSend(v40, "icd_sagaDatabaseUserVersion") >= 1
                && _os_feature_enabled_impl()
                && !objc_msgSend(v40, "icd_sagaCloudFavoriteSongAddToLibraryBehavior"))
              {
                uint64_t v42 = sub_1000EFDB4();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = 1;
                  _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "AddToLibraryWhenFavoriting is enabled, but addToLibraryBehavior=%d, setting to %d", buf, 0xEu);
                }

                objc_msgSend(v40, "icd_setSagaCloudFavoriteSongAddToLibraryBehavior:", 1);
              }

              uint64_t v43 = 530000;
              goto LABEL_477;
            }
          }
        }
        else if (v3 > 600029)
        {
          if (v3 > 600049)
          {
            if (v3 == 600050)
            {
              id v284 = v2;
              id v285 = v308;
              v286 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v286, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)block = 0;
                _os_log_impl((void *)&_mh_execute_header, v286, OS_LOG_TYPE_DEFAULT, "Migrating to version 610000", block, 2u);
              }

              if ((sub_100010724() & 1) == 0
                && [v284 sagaOnDiskDatabaseRevision]
                && (uint64_t)objc_msgSend(v284, "icd_sagaDatabaseUserVersion") >= 1)
              {
                *(void *)block = 0;
                uint64_t v317 = (uint64_t)block;
                uint64_t v318 = 0x2020000000;
                LOBYTE(v319) = 0;
                *(void *)buf = _NSConcreteStackBlock;
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = sub_10003AF8C;
                v313 = &unk_1001BA300;
                *(void *)&long long v314 = block;
                [v284 databaseConnectionAllowingWrites:0 withBlock:buf];
                if (*(unsigned char *)(v317 + 24))
                {
                  [v284 setSagaNeedsFullUpdate:1];
                  [v284 setSagaInitiateClientResetSync:1];
                  [v284 setSagaLastLibraryUpdateTime:0];
                }
                _Block_object_dispose(block, 8);
              }

              unsigned __int16 v150 = 20176;
              goto LABEL_467;
            }
            if (v3 == 610000)
            {
              id v140 = v2;
              v141 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "Migrating to version 620000", buf, 2u);
              }

              v142 = +[ML3ComparisonPredicate predicateWithProperty:v307 equalToInteger:512];
              *(void *)buf = v142;
              v143 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
              *(void *)&buf[8] = v143;
              v144 = +[ML3ComparisonPredicate predicateWithProperty:v302 value:&stru_1001BF9F0 comparison:1];
              *(void *)block = v144;
              v145 = +[ML3ComparisonPredicate predicateWithProperty:v301 value:&stru_1001BF9F0 comparison:1];
              uint64_t v317 = (uint64_t)v145;
              v146 = +[NSArray arrayWithObjects:block count:2];
              v147 = +[ML3AnyCompoundPredicate predicateMatchingPredicates:v146];
              *(void *)&buf[16] = v147;
              v148 = +[NSArray arrayWithObjects:buf count:3];
              v149 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v148];

              sub_100039F00(v140, (uint64_t)v149);
              unsigned __int16 v150 = 30176;
              goto LABEL_467;
            }
          }
          else
          {
            if (v3 == 600030)
            {
              id v266 = v2;
              v267 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v267, OS_LOG_TYPE_DEFAULT, "Migrating to version 600040", buf, 2u);
              }

              if (sub_100010724()) {
                [v266 setSagaInitiateClientResetSync:0];
              }

              uint64_t v69 = 600000;
LABEL_437:
              uint64_t v3 = v69 + 40;
              goto LABEL_490;
            }
            if (v3 == 600040)
            {
              id v59 = v2;
              v60 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)block = 0;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Migrating to version 600050", block, 2u);
              }

              if ((sub_100010724() & 1) == 0)
              {
                *(void *)buf = _NSConcreteStackBlock;
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = sub_10003AEAC;
                v313 = &unk_1001BB928;
                *(void *)&long long v314 = v59;
                [(id)v314 databaseConnectionAllowingWrites:0 withBlock:buf];
              }
              uint64_t v61 = 600000;
LABEL_258:
              uint64_t v3 = v61 + 50;
            }
          }
        }
        else if (v3 > 600009)
        {
          if (v3 == 600010)
          {
            id v271 = v2;
            id v272 = v308;
            v273 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v322 = 0;
              _os_log_impl((void *)&_mh_execute_header, v273, OS_LOG_TYPE_DEFAULT, "Migrating to version 600020", v322, 2u);
            }

            if ((sub_100010724() & 1) == 0
              && [v271 sagaOnDiskDatabaseRevision]
              && (uint64_t)objc_msgSend(v271, "icd_sagaDatabaseUserVersion") >= 1)
            {
              *(void *)v322 = 0;
              uint64_t v323 = (uint64_t)v322;
              uint64_t v324 = 0x2020000000;
              LOBYTE(v325) = 0;
              *(void *)block = _NSConcreteStackBlock;
              uint64_t v317 = 3221225472;
              uint64_t v318 = (uint64_t)sub_10003AA64;
              v319 = &unk_1001BA300;
              v320 = v322;
              [v271 databaseConnectionAllowingWrites:0 withBlock:block];
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = sub_10003ADA8;
              v313 = &unk_1001BA328;
              *((void *)&v314 + 1) = v322;
              *(void *)&long long v314 = v271;
              [(id)v314 databaseConnectionAllowingWrites:1 withBlock:buf];

              _Block_object_dispose(v322, 8);
            }

            uint64_t v75 = 600000;
            goto LABEL_451;
          }
          if (v3 == 600020)
          {
            id v89 = v2;
            id v90 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "Migrating to version 600030", buf, 2u);
            }

            __int16 v91 = +[ML3ComparisonPredicate predicateWithProperty:v307 equalToInteger:2048];
            *(void *)block = v91;
            id v92 = +[ML3ComparisonPredicate predicateWithProperty:v307 equalToInteger:512];
            uint64_t v317 = (uint64_t)v92;
            id v93 = +[NSArray arrayWithObjects:block count:2];
            uint64_t v94 = +[ML3AnyCompoundPredicate predicateMatchingPredicates:v93];

            *(void *)buf = v94;
            __int16 v95 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
            *(void *)&buf[8] = v95;
            id v96 = +[ML3ComparisonPredicate predicateWithProperty:v300 value:&stru_1001BF9F0 comparison:1];
            *(void *)&buf[16] = v96;
            id v97 = +[NSArray arrayWithObjects:buf count:3];
            int v98 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v97];

            sub_100039F00(v89, (uint64_t)v98);
            uint64_t v84 = 600000;
            goto LABEL_301;
          }
        }
        else
        {
          if (v3 == 540000)
          {
            id v257 = v2;
            id v258 = v308;
            v259 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)block = 0;
              _os_log_impl((void *)&_mh_execute_header, v259, OS_LOG_TYPE_DEFAULT, "Migrating to version 600000", block, 2u);
            }

            if ((sub_100010724() & 1) == 0
              && [v257 sagaOnDiskDatabaseRevision]
              && (uint64_t)objc_msgSend(v257, "icd_sagaDatabaseUserVersion") >= 1)
            {
              *(void *)block = 0;
              uint64_t v317 = (uint64_t)block;
              uint64_t v318 = 0x2020000000;
              LOBYTE(v319) = 0;
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = sub_10003A970;
              v313 = &unk_1001BA300;
              *(void *)&long long v314 = block;
              [v257 databaseConnectionAllowingWrites:0 withBlock:buf];
              if (*(unsigned char *)(v317 + 24))
              {
                [v257 setSagaNeedsFullUpdate:1];
                [v257 setSagaInitiateClientResetSync:1];
                [v257 setSagaLastLibraryUpdateTime:0];
              }
              _Block_object_dispose(block, 8);
            }

            unsigned __int16 v150 = 10176;
LABEL_467:
            uint64_t v3 = v150 | 0x90000u;
            goto LABEL_490;
          }
          if (v3 == 600000)
          {
            __int16 v28 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Migrating to version 600010", buf, 2u);
            }

            int v29 = +[ACAccountStore ic_sharedAccountStore];
            *(void *)block = 0;
            __int16 v30 = objc_msgSend(v29, "ic_activeStoreAccountWithError:", block);
            id v31 = *(id *)block;

            if (!v30 || v31)
            {
              __int16 v33 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v31;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Could not get active store account, error=%{public}@", buf, 0xCu);
              }
LABEL_470:
            }
            else if (objc_msgSend(v30, "ic_isAutomaticDownloadsEnabledForMediaKindMusic"))
            {
              id v32 = sub_1000EFDB4();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Automatic Downloads is enabled on the active account. Setting appropriate user defaults", buf, 2u);
              }

              __int16 v33 = +[ICDefaults standardDefaults];
              [v33 setAutomaticDownloadsEnabled:1];
              goto LABEL_470;
            }

            uint64_t v43 = 600000;
            goto LABEL_477;
          }
        }
      }
      else if (v3 <= 380049)
      {
        if (v3 > 370299)
        {
          if (v3 <= 380009)
          {
            switch(v3)
            {
              case 370300:
                id v186 = v2;
                v187 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion370300to370400]", buf, 2u);
                }

                if ([v186 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v186, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v186 setSagaNeedsFullUpdate:1];
                }
                v188 = +[ML3ComparisonPredicate predicateWithProperty:v307 equalToInteger:2048];
                *(void *)buf = v188;
                v189 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
                *(void *)&buf[8] = v189;
                v190 = +[ML3ComparisonPredicate predicateWithProperty:v305 value:&stru_1001BF9F0 comparison:1];
                *(void *)&buf[16] = v190;
                v191 = +[NSArray arrayWithObjects:buf count:3];
                v192 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v191];

                sub_100039F00(v186, (uint64_t)v192);
                uint64_t v3 = 370400;
                break;
              case 370400:
                id v193 = v2;
                v194 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion370400to380000]", buf, 2u);
                }

                if ([v193 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v193, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v193 setSagaNeedsFullUpdate:1];
                }

                uint64_t v3 = 380000;
                break;
              case 380000:
                id v76 = v2;
                id v77 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380000to380010]", buf, 2u);
                }

                if ([v76 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v76, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v76 setSagaNeedsFullUpdate:1];
                }

                uint64_t v3 = 380010;
                break;
            }
          }
          else if (v3 > 380029)
          {
            if (v3 == 380030)
            {
              id v237 = v2;
              v238 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v238, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380030to380040]", buf, 2u);
              }

              id v239 = [v237 sagaOnDiskDatabaseRevision];
              v240 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              BOOL v241 = os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT);
              if (v239)
              {
                if (v241)
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEFAULT, "Cloud library is enabled, repairing subscribed containers is_src_remote (if any)", buf, 2u);
                }

                [v237 databaseConnectionAllowingWrites:1 withBlock:&stru_1001BA290];
              }
              else
              {
                if (v241)
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEFAULT, "Cloud library is NOT enabled, deleting subscribed containers (if any)", buf, 2u);
                }

                v288 = +[ML3PropertyPredicate predicateWithProperty:v296];
                v289 = +[ML3Container unrestrictedAllItemsQueryWithlibrary:v237 predicate:v288 orderingTerms:&__NSArray0__struct];

                [v289 deleteAllEntitiesFromLibraryWithDeletionType:2];
              }

              uint64_t v3 = 380040;
            }
            else if (v3 == 380040)
            {
              id v124 = v2;
              v125 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380040to380050]", buf, 2u);
              }

              id v126 = +[ML3ComparisonPredicate predicateWithProperty:v307 equalToInteger:2048];
              *(void *)buf = v126;
              id v127 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
              *(void *)&buf[8] = v127;
              id v128 = +[ML3ComparisonPredicate predicateWithProperty:v305 value:&stru_1001BF9F0 comparison:1];
              *(void *)&buf[16] = v128;
              v129 = +[NSArray arrayWithObjects:buf count:3];
              uint64_t v130 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v129];

              sub_100039F00(v124, (uint64_t)v130);
              uint64_t v3 = 380050;
            }
          }
          else if (v3 == 380010)
          {
            id v161 = v2;
            v162 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380010to380020]", buf, 2u);
            }

            sub_100039C44(v161);
            uint64_t v3 = 380020;
          }
          else if (v3 == 380020)
          {
            id v44 = v2;
            id v45 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380020to380030]", buf, 2u);
            }

            __int16 v46 = +[ML3BitMaskPredicate predicateWithProperty:v307 mask:8 value:8];
            *(void *)buf = v46;
            uint64_t v47 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
            *(void *)&buf[8] = v47;
            uint64_t v48 = +[NSArray arrayWithObjects:buf count:2];
            id v49 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v48];

            sub_100039F00(v44, (uint64_t)v49);
            uint64_t v3 = 380030;
          }
          goto LABEL_490;
        }
        if (v3 > 366558)
        {
          if (v3 > 370099)
          {
            if (v3 == 370100)
            {
              id v199 = v2;
              v200 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion370100to370200]", buf, 2u);
              }

              if ([v199 jaliscoOnDiskDatabaseRevision] && (MSVDeviceIsAppleTV() & 1) == 0)
              {
                v201 = sub_1000EFDB4();
                if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_DEFAULT, "resetting jalisco and saga revisions to zero", buf, 2u);
                }

                [v199 setJaliscoOnDiskDatabaseRevision:0];
                sub_100039DAC(4, v199);
                [v199 setSagaOnDiskDatabaseRevision:0];
                sub_100039DAC(2, v199);
                [v199 notifyCloudLibraryAvailabilityDidChange];
                [v199 setValue:&off_1001CBB88 forDatabaseProperty:@"MLResetCollectionsOnNextImport"];
                id v293 = v199;
                v294 = +[NSFileManager defaultManager];
                v304 = +[NSMutableDictionary dictionary];
                v202 = [v294 enumeratorAtPath:@"/var/mobile/Media/Purchases"];
                v203 = [v202 nextObject];
                if (v203)
                {
                  do
                  {
                    if ([v203 hasSuffix:@".plist"])
                    {
                      v205 = [@"/var/mobile/Media/Purchases" stringByAppendingPathComponent:v203];
                      v206 = +[NSDictionary dictionaryWithContentsOfFile:v205];
                      v207 = v206;
                      if (v206)
                      {
                        v208 = [v206 objectForKey:@"itemId"];
                        if (v208)
                        {
                          v209 = [v207 objectForKey:@"com.apple.iTunesStore.downloadInfo"];
                          v210 = v209;
                          if (v209)
                          {
                            v211 = [v209 objectForKey:@"mediaAssetFilename"];
                            if (v211) {
                              [v304 setValue:v208 forKey:v211];
                            }
                          }
                        }
                      }
                    }
                    uint64_t v212 = [v202 nextObject];

                    v203 = (void *)v212;
                  }
                  while (v212);
                }
                *(void *)buf = _NSConcreteStackBlock;
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = sub_100039E68;
                v313 = &unk_1001BB928;
                *(void *)&long long v314 = v304;
                id v213 = v304;
                [v293 databaseConnectionAllowingWrites:1 withBlock:buf];
              }
              uint64_t v3 = 370200;
            }
            else if (v3 == 370200)
            {
              id v99 = v2;
              id v100 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion370200to370300]", buf, 2u);
              }

              if ([v99 sagaOnDiskDatabaseRevision]) {
                sub_100039C44(v99);
              }

              uint64_t v3 = 370300;
            }
          }
          else if (v3 == 366559)
          {
            id v151 = v2;
            v152 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion366559to370000]", buf, 2u);
            }

            if ([v151 sagaOnDiskDatabaseRevision]
              && (uint64_t)objc_msgSend(v151, "icd_sagaDatabaseUserVersion") >= 1)
            {
              [v151 setSagaNeedsFullUpdate:1];
            }

            uint64_t v3 = 370000;
          }
          else if (v3 == 370000)
          {
            id v34 = v2;
            id v35 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion370000to370100]", buf, 2u);
            }

            if ([v34 jaliscoOnDiskDatabaseRevision] && MSVDeviceIsAppleTV())
            {
              __int16 v36 = sub_1000EFDB4();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Deleting ML database", buf, 2u);
              }

              [v34 emptyAllTables];
              sub_100039C44(v34);
            }

            uint64_t v3 = 370100;
          }
          goto LABEL_490;
        }
        switch(v3)
        {
          case 0:
            v166 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion0to348294]", buf, 2u);
            }

            unsigned __int16 v65 = 20614;
            goto LABEL_481;
          case 348294:
            v167 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion348294to348295]", buf, 2u);
            }

            uint64_t v3 = 348295;
            break;
          case 348295:
            id v62 = v2;
            id v63 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion348295to366559]", buf, 2u);
            }

            v64 = +[NSNumber numberWithBool:1];
            [v62 setValue:v64 forDatabaseProperty:@"MLCloudNeedsContainerRefetch"];

            unsigned __int16 v65 = -26657;
            goto LABEL_481;
        }
      }
      else
      {
        if (v3 <= 380114)
        {
          if (v3 <= 380079)
          {
            switch(v3)
            {
              case 380050:
                id v174 = v2;
                v175 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380050to380060]", buf, 2u);
                }

                v176 = +[ML3ComparisonPredicate predicateWithProperty:v307 value:&off_1001CBBB8 comparison:10];
                *(void *)buf = v176;
                v177 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
                *(void *)&buf[8] = v177;
                v178 = +[NSArray arrayWithObjects:buf count:2];
                v179 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v178];

                sub_100039F00(v174, (uint64_t)v179);
                if ([v174 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v174, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v174 setSagaNeedsFullUpdate:1];
                }

                uint64_t v3 = 380060;
                break;
              case 380060:
                id v180 = v2;
                v181 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380060to380070]", buf, 2u);
                }

                if ([v180 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v180, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v180 setSagaNeedsFullUpdate:1];
                }

                uint64_t v3 = 380070;
                break;
              case 380070:
                id v70 = v2;
                uint64_t v71 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380070to380080]", buf, 2u);
                }

                if ([v70 sagaOnDiskDatabaseRevision]
                  && (uint64_t)objc_msgSend(v70, "icd_sagaDatabaseUserVersion") >= 1)
                {
                  [v70 setSagaNeedsFullUpdate:1];
                }

                uint64_t v3 = 380080;
                break;
            }
          }
          else if (v3 > 380099)
          {
            if (v3 == 380100)
            {
              id v228 = v2;
              v229 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion3800100to380110]", buf, 2u);
              }

              v230 = +[ML3ComparisonPredicate predicateWithProperty:v307 equalToInteger:2048];
              *(void *)buf = v230;
              v231 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
              *(void *)&buf[8] = v231;
              v232 = +[NSArray arrayWithObjects:buf count:2];
              v233 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v232];

              sub_100039F00(v228, (uint64_t)v233);
              uint64_t v3 = 380110;
            }
            else if (v3 == 380110)
            {
              id v112 = v2;
              id v113 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v322 = 0;
                _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion3800110to380115]", v322, 2u);
              }

              uint64_t v114 = +[ML3ComparisonPredicate predicateWithProperty:v307 value:&off_1001CBBE8 comparison:10];
              *(void *)v322 = v114;
              v115 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
              uint64_t v323 = (uint64_t)v115;
              id v116 = +[NSArray arrayWithObjects:v322 count:2];
              id v117 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v116];

              sub_100039F00(v112, (uint64_t)v117);
              v118 = +[ML3Track queryWithLibrary:v112 predicate:v117];
              id v119 = +[NSMutableArray array];
              *(void *)block = _NSConcreteStackBlock;
              uint64_t v317 = 3221225472;
              uint64_t v318 = (uint64_t)sub_10003A1F4;
              v319 = &unk_1001BE4C8;
              id v120 = v119;
              v320 = v120;
              [v118 enumeratePersistentIDsUsingBlock:block];
              if ([(uint8_t *)v120 count])
              {
                *(void *)buf = _NSConcreteStackBlock;
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = sub_10003A254;
                v313 = &unk_1001BE540;
                *(void *)&long long v314 = v120;
                *((void *)&v314 + 1) = v112;
                [*((id *)&v314 + 1) performDatabaseTransactionWithBlock:buf];
              }
              uint64_t v3 = 380115;
            }
          }
          else if (v3 == 380080)
          {
            id v156 = v2;
            v157 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)block = 0;
              _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380080to380090]", block, 2u);
            }

            *(void *)buf = _NSConcreteStackBlock;
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = sub_10003A0F0;
            v313 = &unk_1001BB928;
            *(void *)&long long v314 = v156;
            id v158 = v156;
            [v158 databaseConnectionAllowingWrites:1 withBlock:buf];

            uint64_t v3 = 380090;
          }
          else if (v3 == 380090)
          {
            id v38 = v2;
            unsigned __int8 v39 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380090to380100]", buf, 2u);
            }

            if ([v38 sagaOnDiskDatabaseRevision]
              && (uint64_t)objc_msgSend(v38, "icd_sagaDatabaseUserVersion") >= 1)
            {
              [v38 setSagaNeedsFullUpdate:1];
            }

            uint64_t v3 = 380100;
          }
          goto LABEL_490;
        }
        if (v3 > 380149)
        {
          if (v3 > 380169)
          {
            if (v3 == 380170)
            {
              v274 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v274, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380170to390000]", buf, 2u);
              }

              v275 = +[ICDefaults standardDefaults];
              unsigned int v276 = [v275 automaticDownloadsEnabled];

              v277 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              BOOL v278 = os_log_type_enabled(v277, OS_LOG_TYPE_DEFAULT);
              if (v276)
              {
                if (v278)
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_DEFAULT, "Found Automatic Downloads Key in user defaults", buf, 2u);
                }

                v279 = +[ICDefaults standardDefaults];
                [v279 deleteAutomaticDownloadsKey];

                v277 = +[ICUpdateAutomaticDownloadMediaKindsRequest automaticDownloadMediaKindsForMusic];
                id v280 = objc_alloc((Class)ICStoreRequestContext);
                v281 = +[ICUserIdentity activeAccount];
                id v282 = [v280 initWithIdentity:v281];

                id v283 = [objc_alloc((Class)ICUpdateAutomaticDownloadMediaKindsRequest) initWithRequestContext:v282 mediaKindsToAdd:v277 mediaKindsToRemove:0];
                [v283 performRequestWithCompletionHandler:&stru_1001BA2B0];
              }
              else if (v278)
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_DEFAULT, "Automatic Downloads Key does not exist in user defaults", buf, 2u);
              }

              unsigned __int16 v65 = -3216;
LABEL_481:
              uint64_t v3 = v65 | 0x50000u;
              goto LABEL_490;
            }
            if (v3 == 390000)
            {
              int v134 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion390000to390010]", buf, 2u);
              }

              v135 = +[ACAccountStore ic_sharedAccountStore];
              *(void *)block = 0;
              v136 = objc_msgSend(v135, "ic_activeStoreAccountWithError:", block);
              id v137 = *(id *)block;

              if (!v136 || v137)
              {
                v139 = os_log_create("com.apple.amp.itunescloudd", "XPC");
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  *(void *)&uint8_t buf[4] = v137;
                  _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "Could not get active store account, error=%{public}@", buf, 0xCu);
                }
LABEL_474:
              }
              else if (objc_msgSend(v136, "ic_isAutomaticDownloadsEnabledForMediaKindMusic"))
              {
                v138 = sub_1000EFDB4();
                if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "Automatic Downloads is enabled on the active account. Setting appropriate user defaults", buf, 2u);
                }

                v139 = +[ICDefaults standardDefaults];
                [v139 setAutomaticDownloadsEnabled:1];
                goto LABEL_474;
              }

              unsigned __int16 v88 = -3216;
LABEL_476:
              uint64_t v43 = v88 | 0x50000u;
LABEL_477:
              uint64_t v3 = v43 + 10;
            }
          }
          else
          {
            if (v3 == 380150)
            {
              id v260 = v2;
              v261 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v261, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380150to380160]", buf, 2u);
              }

              v262 = [v260 sagaAccountID];
              if ([v262 longLongValue])
              {
                v263 = [v260 jaliscoLastExcludedMediaKinds];
                unsigned int v264 = [v263 containsObject:&off_1001CBB88];

                if (v264)
                {
                  v265 = sub_1000EFDB4();
                  if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v265, OS_LOG_TYPE_DEFAULT, "resetting jalisco revision to zero to force a reset sync", buf, 2u);
                  }

                  v262 = +[NSSet setWithObject:&off_1001CBB88];
                  [v260 updateJaliscoExcludedMediaKindsWith:v262 excludingMediaKindsInSet:0];
                  goto LABEL_429;
                }
              }
              else
              {
LABEL_429:
              }
              unsigned __int16 v170 = -13076;
LABEL_431:
              uint64_t v75 = v170 | 0x50000u;
LABEL_451:
              uint64_t v3 = v75 + 20;
              goto LABEL_490;
            }
            if (v3 == 380160)
            {
              id v52 = v2;
              uint64_t v53 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380160to380170]", buf, 2u);
              }

              uint64_t v54 = +[ML3ComparisonPredicate predicateWithProperty:v307 value:&off_1001CBBE8 comparison:10];
              int v55 = +[ML3ComparisonPredicate predicateWithProperty:v306 value:&off_1001CBBA0 comparison:2];
              *(void *)buf = v54;
              *(void *)&buf[8] = v55;
              uint64_t v56 = +[NSArray arrayWithObjects:buf count:2];
              id v57 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v56];

              sub_100039F00(v52, (uint64_t)v57);
              unsigned __int16 v58 = -13076;
              goto LABEL_300;
            }
          }
        }
        else
        {
          if (v3 <= 380129)
          {
            if (v3 == 380115)
            {
              id v244 = v2;
              v245 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion3800110to380120]", buf, 2u);
              }

              unsigned int v246 = [v244 sagaPrefersToMergeWithCloudLibrary];
              dispatch_semaphore_t v247 = dispatch_semaphore_create(0);
              v309[0] = _NSConcreteStackBlock;
              v309[1] = 3221225472;
              v309[2] = sub_10003A494;
              v309[3] = &unk_1001BE408;
              dispatch_semaphore_t v310 = v247;
              v248 = v247;
              v249 = v309;
              v250 = +[ICUserIdentityStore defaultIdentityStore];
              v251 = +[ICUserIdentity activeLockerAccount];
              id v311 = 0;
              v252 = [v250 getPropertiesForUserIdentity:v251 error:&v311];
              id v253 = v311;
              if (v253 || !v252)
              {
                v287 = dispatch_get_global_queue(0, 0);
                *(void *)buf = _NSConcreteStackBlock;
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = sub_1000D60EC;
                v313 = &unk_1001BEC48;
                *((void *)&v314 + 1) = v249;
                *(void *)&long long v314 = v253;
                dispatch_async(v287, buf);

                v255 = (void *)*((void *)&v314 + 1);
              }
              else
              {
                v254 = [v252 mergeToCloudLibraryPreference];
                v255 = v254;
                if (v254 && [v254 BOOLValue] == v246)
                {
                  v290 = dispatch_get_global_queue(0, 0);
                  *(void *)block = _NSConcreteStackBlock;
                  uint64_t v317 = 3221225472;
                  uint64_t v318 = (uint64_t)sub_1000D62C4;
                  v319 = &unk_1001BEC48;
                  v291 = v249;
                  v320 = 0;
                  id v321 = v291;
                  dispatch_async(v290, block);

                  v256 = &v321;
                }
                else
                {
                  *(void *)&long long v327 = _NSConcreteStackBlock;
                  *((void *)&v327 + 1) = 3221225472;
                  v328 = sub_1000D6100;
                  v329 = &unk_1001BD220;
                  char v330 = v246;
                  *(void *)v322 = _NSConcreteStackBlock;
                  uint64_t v323 = 3221225472;
                  uint64_t v324 = (uint64_t)sub_1000D61F8;
                  v325 = &unk_1001BD898;
                  v326 = v249;
                  [v250 insertPropertiesForUserIdentity:v251 andPostAccountChangeNotification:0 usingBlock:&v327 completionHandler:v322];
                  v256 = (id *)&v326;
                }
              }
              dispatch_semaphore_wait(v248, 0xFFFFFFFFFFFFFFFFLL);

              uint64_t v3 = 380120;
            }
            else if (v3 == 380120)
            {
              id v26 = v2;
              id v27 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion3800120to380130]", buf, 2u);
              }

              [v26 sortJaliscoLastSupportedMediaKinds];
              uint64_t v3 = 380130;
            }
            goto LABEL_490;
          }
          if (v3 == 380130)
          {
            v268 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v268, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380130to380140]", buf, 2u);
            }

            uint64_t v3 = 380140;
            if (MSVDeviceIsAppleTV()) {
              goto LABEL_490;
            }
            v269 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v269, OS_LOG_TYPE_DEFAULT, "Removing Job: com.apple.itunescloudd.periodicPoll.jaliscoApps", buf, 2u);
            }

            id v270 = +[CloudBackgroundTaskManager sharedTaskManager];
            BackgroundTaskAgentRemoveJob();
            unsigned __int16 v65 = -13076;
            goto LABEL_481;
          }
          if (v3 == 380140)
          {
            id v85 = v2;
            id v86 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "-[CloudServer _migrateFromUserVersion380140to380150]", buf, 2u);
            }

            if ([v85 jaliscoOnDiskDatabaseRevision])
            {
              uint64_t v87 = os_log_create("com.apple.amp.itunescloudd", "XPC");
              if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "resetting jalisco revisions to zero to force a reset sync", buf, 2u);
              }

              [v85 setJaliscoOnDiskDatabaseRevision:0];
            }

            unsigned __int16 v88 = -13076;
            goto LABEL_476;
          }
        }
      }
LABEL_490:
      objc_msgSend(v2, "icd_setSagaDatabaseUserVersion:", v3);
      v292 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v292, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v292, OS_LOG_TYPE_DEFAULT, "Setting current user version: %ld", buf, 0xCu);
      }
    }
    while (v3 < 620000);
  }
LABEL_10:
  id v8 = v2;
  uint64_t v9 = [v8 valueForDatabaseProperty:@"MLEnableICMLConfig"];
  if (v9)
  {
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    uint64_t v12 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v10, v11, objc_opt_class(), 0);
    *(void *)block = 0;
    id v13 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v12 fromData:v9 error:block];
    int v14 = *(id *)block;

    uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (!v13 || v14)
    {
      if (v16)
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Error (%{public}@) unarchiving enableICMLConfigData", buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Found autoEnableICMLConfig=%{public}@", buf, 0xCu);
      }

      uint64_t v15 = [v13 objectForKey:@"MLActiveAccountDSID"];
      uint64_t v17 = [v13 objectForKey:@"MLAutoEnableICML"];
      __int16 v18 = v17;
      if (v15 && ![v17 intValue])
      {
        dispatch_semaphore_t v19 = dispatch_semaphore_create(0);
        __int16 v20 = +[ICUserIdentity specificAccountWithDSID:v15];
        id v21 = +[ICUserIdentityStore defaultIdentityStore];
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = sub_10003B080;
        v313 = &unk_1001BE0D8;
        *(void *)&long long v314 = v20;
        *((void *)&v314 + 1) = v21;
        dispatch_semaphore_t v315 = v19;
        id v22 = v20;
        id v23 = v21;
        __int16 v24 = v19;
        [v23 getPropertiesForUserIdentity:v22 completionHandler:buf];
        dispatch_semaphore_wait(v24, 0xFFFFFFFFFFFFFFFFLL);
      }
    }

    [v8 deleteDatabaseProperty:@"MLEnableICMLConfig"];
  }
  else
  {
    int v14 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No configuration to determine if iCML should be enabled/disabled", buf, 2u);
    }
  }
}

void sub_100039C10(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_100039C44(void *a1)
{
  id v1 = a1;
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Removing play data plists", v9, 2u);
  }

  uint64_t v3 = [v1 libraryContainerPath];

  id v4 = [v3 stringByAppendingPathComponent:@"iTunes_Control/iTunes/LatestCloudPlayCountChanges.plist"];
  uint64_t v5 = [v3 stringByAppendingPathComponent:@"iTunes_Control/iTunes/LatestCloudPlayDateChanges.plist"];
  uint64_t v6 = [v3 stringByAppendingPathComponent:@"iTunes_Control/iTunes/LatestCloudSkipCountChanges.plist"];
  id v7 = [v3 stringByAppendingPathComponent:@"iTunes_Control/iTunes/LatestCloudPlayDataChangesDate.plist"];
  id v8 = +[NSFileManager defaultManager];
  [v8 removeItemAtPath:v4 error:0];
  [v8 removeItemAtPath:v5 error:0];
  [v8 removeItemAtPath:v6 error:0];
  [v8 removeItemAtPath:v7 error:0];
}

void sub_100039DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10003B66C;
  v5[3] = &unk_1001BDE80;
  dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
  id v4 = v6;
  [v3 removeSource:a1 withCompletionHandler:v5];

  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_100039E68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003B4E0;
  v6[3] = &unk_1001BA270;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_100039F00(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[ML3Track queryWithLibrary:v3 predicate:a2];
  +[NSMutableArray array];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10003B3B8;
  v13[3] = &unk_1001BE4C8;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v14 = v5;
  [v4 enumeratePersistentIDsUsingBlock:v13];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10003B418;
  v10[3] = &unk_1001BE540;
  id v6 = v5;
  id v11 = v6;
  id v7 = v3;
  id v12 = v7;
  [v7 performDatabaseTransactionWithBlock:v10];
  if ([v6 count])
  {
    [v7 setJaliscoNeedsUpdateForTokens:1];
    id v8 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [v6 count];
      *(_DWORD *)buf = 134217984;
      id v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Removing purchase history token from %lu tracks", buf, 0xCu);
    }
  }
}

void sub_10003A0F0(uint64_t a1, void *a2)
{
  id v3 = [a2 executeQuery:@"SELECT COUNT() FROM artwork_token WHERE artwork_type = ? AND artwork_token LIKE '%%0x0%%'" withParameters:&off_1001CCBB0];
  uint64_t v4 = (uint64_t)[v3 int64ValueForFirstRowAndColumn];
  if (v4 >= 1)
  {
    uint64_t v5 = v4;
    id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Detected %lld invalid artist artwork tokens, clearing last artist image import date...", (uint8_t *)&v7, 0xCu);
    }

    [*(id *)(a1 + 32) setValue:&off_1001CBBA0 forDatabaseProperty:@"MLArtistHeroImageImportDate"];
  }
}

void sub_10003A1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

id sub_10003A254(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSString stringWithFormat:@"DELETE FROM artwork_token WHERE artwork_source_type=%d AND entity_pid", 400];
  uint64_t v5 = +[ML3DatabaseStatementRenderer defaultRenderer];
  id v6 = objc_msgSend(v5, "statementWithPrefix:inParameterCount:", v4, objc_msgSend(*(id *)(a1 + 32), "count"));

  uint64_t v7 = *(void *)(a1 + 32);
  id v23 = 0;
  id v8 = [v3 executeUpdate:v6 withParameters:v7 error:&v23];
  id v9 = v23;
  uint64_t v10 = v9;
  if (v8)
  {
    id v18 = v9;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v11 = *(id *)(a1 + 32);
    id v12 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v20;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v20 != v14) {
            objc_enumerationMutation(v11);
          }
          objc_msgSend(*(id *)(a1 + 40), "updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:preserveExistingAvailableToken:usingConnection:", objc_msgSend(*(id *)(*((void *)&v19 + 1) + 8 * (void)v15), "longLongValue"), 0, 1, 0, v3, 0.0);
          uint64_t v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
      }
      while (v13);
    }

    [*(id *)(a1 + 40) cleanupArtworkWithOptions:30 usingConnection:v3];
    uint64_t v10 = v18;
  }
  else
  {
    id v16 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to purge artwork_token for movies and tv shows. err=%{public}@", buf, 0xCu);
    }
  }
  return v8;
}

intptr_t sub_10003A494(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10003A49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

id sub_10003A4FC(uint64_t a1, void *a2)
{
  uint64_t v7 = ML3ContainerPropertyDateModified;
  id v3 = a2;
  uint64_t v4 = +[NSArray arrayWithObjects:&v7 count:1];
  id v5 = +[ML3Container setValues:forProperties:forEntityPersistentIDs:inLibrary:usingConnection:](ML3Container, "setValues:forProperties:forEntityPersistentIDs:inLibrary:usingConnection:", &off_1001CCBC8, v4, *(void *)(a1 + 32), *(void *)(a1 + 40), v3, v7);

  return v5;
}

void sub_10003A5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:*(void *)a3];
  id v6 = *(id *)(a3 + 8);
  uint64_t v7 = [v5 pathExtension];
  id v8 = ML3OfflineHLSFileExtensions();
  unsigned int v9 = [v8 containsObject:v7];

  if (v9)
  {
    __int16 v24 = v7;
    id v26 = v5;
    id v10 = [objc_alloc((Class)ICFileContentKeyStore) initWithPath:v5];
    id v11 = +[NSMutableArray arrayWithCapacity:2];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10003B140;
    v31[3] = &unk_1001BA2D8;
    id v25 = v6;
    id v12 = v6;
    id v32 = v12;
    id v33 = *(id *)(a1 + 32);
    id v13 = v11;
    id v34 = v13;
    [v10 enumerateKeyEntriesUsingBlock:v31];
    uint64_t v14 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [v13 count];
      *(_DWORD *)buf = 134218498;
      id v37 = v15;
      __int16 v38 = 2114;
      id v39 = v12;
      __int16 v40 = 2114;
      id v41 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Purging %lu keys for song '%{public}@': %{public}@", buf, 0x20u);
    }

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v16 = v13;
    id v17 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v28;
      do
      {
        for (i = 0; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v28 != v19) {
            objc_enumerationMutation(v16);
          }
          long long v21 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          long long v22 = [v10 removeKeyForIdentifier:v21];
          if (v22)
          {
            id v23 = os_log_create("com.apple.amp.itunescloudd", "XPC");
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543618;
              id v37 = v21;
              __int16 v38 = 2114;
              id v39 = v22;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Failed to remove key '%{public}@'. err=%{public}@", buf, 0x16u);
            }
          }
        }
        id v18 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }
      while (v18);
    }

    id v6 = v25;
    id v5 = v26;
    uint64_t v7 = v24;
  }
}

void sub_10003A90C(uint64_t a1, void *a2)
{
  [a2 executeQuery:@"SELECT 1 FROM container WHERE is_collaborative = 1"];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 hasAtLeastOneRow];
}

void sub_10003A970(uint64_t a1, void *a2)
{
  id v3 = [a2 executeQuery:@"SELECT COUNT() FROM item_store WHERE store_saga_id != 0 GROUP BY store_saga_id HAVING COUNT() > 1"];
  if ([v3 int64ValueForFirstRowAndColumn])
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 134217984;
      id v6 = [v3 int64ValueForFirstRowAndColumn];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lld rows with duplicate saga_ids. Will perform a reset sync", (uint8_t *)&v5, 0xCu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_10003AA64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 executeQuery:@"SELECT COUNT() FROM container WHERE store_cloud_id != 0 GROUP BY store_cloud_id HAVING COUNT() > 1"];
  if ([v4 int64ValueForFirstRowAndColumn])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    int v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      id v20 = [v4 int64ValueForFirstRowAndColumn];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found %lld rows with duplicate cloud-ids. Will perform a reset sync", (uint8_t *)&v19, 0xCu);
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    || (+[ICDeviceInfo currentDeviceInfo],
        id v6 = objc_claimAutoreleasedReturnValue(),
        unsigned int v7 = [v6 isIPhone],
        v6,
        !v7))
  {
    id v8 = v4;
  }
  else
  {
    id v8 = [v3 executeQuery:@"SELECT COUNT() FROM container WHERE sync_id != 0 AND is_src_remote != 1"];

    if ([v8 int64ValueForFirstRowAndColumn])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      unsigned int v9 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [v8 int64ValueForFirstRowAndColumn];
        int v19 = 134217984;
        id v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Found %lld rows with un expected sync_ids for playlists. Will perform a reset sync", (uint8_t *)&v19, 0xCu);
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (*(unsigned char *)(*(void *)(v11 + 8) + 24))
  {
    id v12 = v8;
  }
  else
  {
    id v12 = [v3 executeQuery:@"SELECT COUNT() FROM container WHERE cloud_global_id != '' GROUP BY cloud_global_id HAVING COUNT() > 1"];

    id v13 = [v12 int64ValueForFirstRowAndColumn];
    uint64_t v11 = *(void *)(a1 + 32);
    if (v13)
    {
      *(unsigned char *)(*(void *)(v11 + 8) + 24) = 1;
      uint64_t v14 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [v12 int64ValueForFirstRowAndColumn];
        int v19 = 134217984;
        id v20 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Found %lld rows with duplicate cloud global ids. Will perform a reset sync", (uint8_t *)&v19, 0xCu);
      }

      uint64_t v11 = *(void *)(a1 + 32);
    }
  }
  if (*(unsigned char *)(*(void *)(v11 + 8) + 24))
  {
    id v16 = v12;
  }
  else
  {
    id v16 = [v3 executeQuery:@"SELECT COUNT() FROM container WHERE cloud_universal_library_id != '' GROUP BY cloud_universal_library_id HAVING COUNT() > 1"];

    if ([v16 int64ValueForFirstRowAndColumn])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      id v17 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = [v16 int64ValueForFirstRowAndColumn];
        int v19 = 134217984;
        id v20 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Found %lld rows with duplicate cloud universal library ids. Will perform a reset sync", (uint8_t *)&v19, 0xCu);
      }
    }
  }
}

void sub_10003ADA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[ICDeviceInfo currentDeviceInfo];
  unsigned int v5 = [v4 isIPhone];

  if (v5
    && ([v3 executeUpdate:@"UPDATE container SET sync_id=0 WHERE (is_src_remote != 1 AND sync_id != 0)"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error clearing sync id from playlists that were incorrectly updated", v7, 2u);
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    [*(id *)(a1 + 32) setSagaNeedsFullUpdate:1];
    [*(id *)(a1 + 32) setSagaInitiateClientResetSync:1];
    [*(id *)(a1 + 32) setSagaLastLibraryUpdateTime:0];
    [*(id *)(a1 + 32) setSagaLastSubscribedContainersUpdateTime:0];
  }
}

void sub_10003AEAC(uint64_t a1, void *a2)
{
  id v3 = [a2 executeQuery:@"SELECT item_pid FROM item JOIN item_store USING(item_pid) WHERE (media_type IN (8, 1032) AND store_saga_id = 0 AND match_redownload_params != '' AND in_my_library = 1) LIMIT 1"];
  uint64_t v4 = [v3 objectForFirstRowAndColumn];

  if (v4)
  {
    unsigned int v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found at least one item in library with invalid saga id and valid download parameters. Will initiate a reset sync to clear state", v6, 2u);
    }

    [*(id *)(a1 + 32) setSagaNeedsFullUpdate:1];
    [*(id *)(a1 + 32) setSagaInitiateClientResetSync:1];
    [*(id *)(a1 + 32) setSagaLastLibraryUpdateTime:0];
    [*(id *)(a1 + 32) setSagaLastSubscribedContainersUpdateTime:0];
  }
}

void sub_10003AF8C(uint64_t a1, void *a2)
{
  id v3 = [a2 executeQuery:@"SELECT COUNT() FROM item_store WHERE store_saga_id != 0 GROUP BY store_saga_id HAVING COUNT() > 1"];
  if ([v3 int64ValueForFirstRowAndColumn])
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 134217984;
      id v6 = [v3 int64ValueForFirstRowAndColumn];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lld rows with duplicate saga_ids. Will perform a reset sync", (uint8_t *)&v5, 0xCu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_10003B080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (!a3)
    {
      id v4 = [objc_alloc((Class)ICConnectionConfiguration) initWithUserIdentity:*(void *)(a1 + 32) userIdentityStore:*(void *)(a1 + 40)];
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_10003B138;
      v5[3] = &unk_1001BE408;
      id v6 = *(id *)(a1 + 48);
      sub_1000D6B8C(v4, -101, v5);
    }
  }
}

intptr_t sub_10003B138(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10003B140(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = [v3 identifier];
    id v6 = [v3 renewalDate];
    uint64_t v7 = a1[4];
    int v12 = 138543874;
    id v13 = v5;
    __int16 v14 = 2114;
    id v15 = v6;
    __int16 v16 = 2114;
    uint64_t v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found persisted key '%{public}@' with renewal Date '%{public}@' for song '%{public}@", (uint8_t *)&v12, 0x20u);
  }
  id v8 = [v3 renewalDate];
  id v9 = [v8 compare:a1[5]];

  if (v9 == (id)-1)
  {
    id v10 = (void *)a1[6];
    uint64_t v11 = [v3 identifier];
    [v10 addObject:v11];
  }
}

void sub_10003B298(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = os_log_create("com.apple.amp.itunescloudd", "Default");
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = [(NSError *)v2 msv_description];
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Automatic download media kind update task completed error=%{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Automatic download media kind update task completed", (uint8_t *)&v6, 2u);
  }
}

void sub_10003B3A8(id a1, ML3DatabaseConnection *a2)
{
  [(ML3DatabaseConnection *)a2 executeUpdate:@"UPDATE container SET is_src_remote = 2 WHERE cloud_is_subscribed AND is_src_remote = 0"];
}

void sub_10003B3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

id sub_10003B418(uint64_t a1, void *a2)
{
  uint64_t v7 = ML3TrackPropertyPurchaseHistoryToken;
  id v3 = a2;
  id v4 = +[NSArray arrayWithObjects:&v7 count:1];
  id v5 = +[ML3Track setValues:forProperties:forEntityPersistentIDs:inLibrary:usingConnection:](ML3Track, "setValues:forProperties:forEntityPersistentIDs:inLibrary:usingConnection:", &off_1001CCB98, v4, *(void *)(a1 + 32), *(void *)(a1 + 40), v3, v7);

  return v5;
}

void sub_10003B4E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    id v13 = v5;
    __int16 v14 = 2048;
    id v15 = [v6 longLongValue];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "updating track with location '%{public}@' to store_item_id=%lld", buf, 0x16u);
  }

  id v8 = *(void **)(a1 + 32);
  v11[0] = v6;
  v11[1] = v5;
  id v9 = +[NSArray arrayWithObjects:v11 count:2];
  LOBYTE(v8) = [v8 executeUpdate:@"UPDATE item_store SET store_item_id = ? WHERE item_pid IN (SELECT item_pid FROM item_extra WHERE id location = ?)" withParameters:v9 error:0];

  if ((v8 & 1) == 0)
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to update track with location '%{public}@'", buf, 0xCu);
    }
  }
}

void sub_10003B66C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "RemoveSource error: %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10003C558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10003C59C(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelRelationshipSongArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003C5EC()
{
  v4[0] = 0;
  if (!qword_1001F37A0)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = sub_10003CBBC;
    v4[4] = &unk_1001BEA20;
    v4[5] = v4;
    long long v5 = off_1001BA3C0;
    uint64_t v6 = 0;
    qword_1001F37A0 = _sl_dlopen();
  }
  v0 = (void *)qword_1001F37A0;
  if (!qword_1001F37A0)
  {
    v0 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryArtistAffinityAnalyzer.m", 20, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

id sub_10003C740()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1001F37B8;
  uint64_t v7 = qword_1001F37B8;
  if (!qword_1001F37B8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10003CAF4;
    v3[3] = &unk_1001BE9E8;
    v3[4] = &v4;
    sub_10003CAF4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10003C80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10003C824(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertyArtistName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003C874(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelRelationshipSongAlbum");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003C8C4(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertyAlbumTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003C914(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertySongTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003C964(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertySongPlayCount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003C9B4(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertySongSkipCount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003CA04(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertySongLastDevicePlaybackDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003CA54(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertySongLibraryAddedDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F37F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10003CAA4(uint64_t a1)
{
  uint64_t v2 = sub_10003C5EC();
  id result = dlsym(v2, "MPModelPropertySongUserRating");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F3800 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10003CAF4(uint64_t a1)
{
  sub_10003C5EC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPPropertySet");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F37B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPPropertySetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryArtistAffinityAnalyzer.m", 24, @"Unable to find class %s", "MPPropertySet");

    __break(1u);
  }
}

uint64_t sub_10003CBBC()
{
  uint64_t result = _sl_dlopen();
  qword_1001F37A0 = result;
  return result;
}

void sub_10003D0E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_10003D108()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1001F3798;
  uint64_t v7 = qword_1001F3798;
  if (!qword_1001F3798)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10003D5D4;
    v3[3] = &unk_1001BE9E8;
    v3[4] = &v4;
    sub_10003D5D4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10003D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003D1EC()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1001F37A8;
  uint64_t v7 = qword_1001F37A8;
  if (!qword_1001F37A8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10003D50C;
    v3[3] = &unk_1001BE9E8;
    v3[4] = &v4;
    sub_10003D50C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10003D2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003D2D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    id v8 = +[NSMutableArray array];
    id v9 = [v5 results];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10003D48C;
    v13[3] = &unk_1001BA350;
    id v14 = v8;
    id v10 = v8;
    [v9 enumerateItemsUsingBlock:v13];

    uint64_t v11 = [WeakRetained aggregateLibraryRecommendationMetricsFromSnapshots:v10];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id WeakRetained = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v16 = v12;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "%{public}@ Failed to retrieve library response for artist analysis. err=%{public}@", buf, 0x16u);
    }
  }
}

void sub_10003D48C(uint64_t a1, void *a2)
{
  id v4 = a2;
  sub_10003D1EC();
  if (objc_opt_isKindOfClass())
  {
    id v3 = [[ICMusicLibraryContentItemSnapshot alloc] initWithSong:v4];
    [*(id *)(a1 + 32) addObject:v3];
  }
}

void sub_10003D50C(uint64_t a1)
{
  sub_10003C5EC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPModelSong");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F37A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPModelSongClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryArtistAffinityAnalyzer.m", 21, @"Unable to find class %s", "MPModelSong");

    __break(1u);
  }
}

void sub_10003D5D4(uint64_t a1)
{
  sub_10003C5EC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPModelLibraryRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3798 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPModelLibraryRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryArtistAffinityAnalyzer.m", 25, @"Unable to find class %s", "MPModelLibraryRequest");

    __break(1u);
  }
}

void sub_10003E4A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10003E4C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!v5 || v6)
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      id v19 = WeakRetained;
      __int16 v20 = 2114;
      id v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ Failed to retrieve library response for artist analysis. err=%{public}@", buf, 0x16u);
    }
  }
  else
  {
    id v8 = +[NSMutableArray array];
    id v9 = [v5 results];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10003E714;
    v16[3] = &unk_1001BA350;
    id v10 = v8;
    __int16 v17 = v10;
    [v9 enumerateItemsUsingBlock:v16];

    uint64_t v11 = [WeakRetained aggregateLibraryRecommendationMetricsFromSnapshots:v10];
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(void **)(a1 + 32);
      id v14 = [v11 count];
      *(_DWORD *)buf = 138543618;
      id v19 = v13;
      __int16 v20 = 2048;
      id v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ Analyzing %lu user library artists.", buf, 0x16u);
    }

    id v15 = [WeakRetained createFeatureProviderDictionaryFromNewContentResponse:*(void *)(a1 + 40) withLibraryArtistSnapshots:v11];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10003E714(uint64_t a1, void *a2)
{
  id v4 = a2;
  sub_10003D1EC();
  if (objc_opt_isKindOfClass())
  {
    id v3 = [[ICMusicLibraryContentItemSnapshot alloc] initWithSong:v4];
    [*(id *)(a1 + 32) addObject:v3];
  }
}

void sub_10003E89C(id *a1)
{
  id v2 = a1[4];
  id v3 = a1[5];
  id v4 = a1[6];
  ICDAAPUtilitiesWriteContainer();
}

void sub_10003E95C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003EA20;
  v6[3] = &unk_1001BA3E0;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

void sub_10003EA20(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  id v9 = *(id *)(a1 + 48);
  id v6 = v8;
  id v7 = v5;
  ICDAAPUtilitiesWriteContainer();
}

void sub_10003EB08(uint64_t a1, void *a2)
{
  id v3 = a2;
  ICDAAPUtilitiesWriteProperty();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003EBCC;
  v6[3] = &unk_1001BDA60;
  id v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = v3;
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_10003EBCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasInfoForProperty:v5])
  {
    [*(id *)(a1 + 32) elementCodeForProperty:v5];
    [*(id *)(a1 + 32) valueTypeForProperty:v5];
    ICDAAPUtilitiesWriteProperty();
  }
  else
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No DAAP code found for container property: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_10003FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

void sub_10003FCAC(uint64_t a1, uint64_t a2, id *a3)
{
  id v5 = *a3;
  id v6 = [a3[1] unsignedLongLongValue];
  [a3[2] doubleValue];
  double v8 = v7;
  if ((uint64_t)[v5 longLongValue] >= 1
    && (([*(id *)(a1 + 32) ignoreMinRefreshInterval] & 1) != 0
     || *(double *)(a1 + 48) >= v8 + (double)(unint64_t)v6))
  {
    [*(id *)(a1 + 40) addObject:v5];
  }
  else
  {
    id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [v5 unsignedLongValue];
      double v11 = *(double *)(a1 + 48) - v8;
      int v12 = 134218496;
      id v13 = v10;
      __int16 v14 = 2048;
      double v15 = v11;
      __int16 v16 = 2048;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Skipping update for playlist cloud ID: %lu -- time since update = %.fs (min refresh = %llus)", (uint8_t *)&v12, 0x20u);
    }
  }
}

uint64_t sub_10003FDFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10003FE0C(uint64_t a1)
{
}

void sub_10003FE14(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10003FE74(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SagaSubscribedPlaylistUpdater import succeeded: %d", (uint8_t *)&v8, 8u);
  }

  if (v5)
  {
    double v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "SagaSubscribedPlaylistUpdater import failed: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1000406E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    id v6 = xpc_dictionary_get_value(v5, "did");
    double v7 = xpc_dictionary_get_value(v5, "fid");
    int v8 = xpc_dictionary_get_value(v5, "pid");
    if (v6
      && xpc_get_type(v6) == (xpc_type_t)&_xpc_type_int64
      && v7
      && xpc_get_type(v7) == (xpc_type_t)&_xpc_type_int64
      && v8
      && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_int64)
    {
      id v9 = objc_alloc((Class)AMSFamilyAccountPair);
      int64_t value = xpc_int64_get_value(v6);
      int64_t v11 = xpc_int64_get_value(v8);
      id v12 = [v9 initWithDownloaderAccountID:value purchaserAccountID:v11 familyID:xpc_int64_get_value(v7)];
      [*(id *)(a1 + 32) addObject:v12];
    }
  }

  return 1;
}

void sub_100041A58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100041A74()
{
  uint64_t v6 = 0;
  double v7 = &v6;
  uint64_t v8 = 0x2020000000;
  v0 = (void **)qword_1001F3808;
  uint64_t v9 = qword_1001F3808;
  if (!qword_1001F3808)
  {
    uint64_t v1 = sub_100041C2C();
    v7[3] = (uint64_t)dlsym(v1, "MPRestrictionsMonitorAllowsExplicitContentDidChangeNotification");
    qword_1001F3808 = v7[3];
    v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    id v4 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"NSString *getMPRestrictionsMonitorAllowsExplicitContentDidChangeNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ICDServerNotificationsManager.m", 38, @"%s", dlerror());

    __break(1u);
  }
}

void sub_100041BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100041BDC(uint64_t a1)
{
  id v2 = sub_100041C2C();
  uint64_t result = dlsym(v2, "MPRestrictionsMonitorAllowsMusicVideosDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F3818 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100041C2C()
{
  v4[0] = 0;
  if (!qword_1001F3810)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = sub_100042188;
    v4[4] = &unk_1001BEA20;
    v4[5] = v4;
    long long v5 = off_1001BA478;
    uint64_t v6 = 0;
    qword_1001F3810 = _sl_dlopen();
  }
  v0 = (void *)qword_1001F3810;
  if (!qword_1001F3810)
  {
    v0 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDServerNotificationsManager.m", 33, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_100041D80()
{
  uint64_t v6 = 0;
  double v7 = &v6;
  uint64_t v8 = 0x2020000000;
  v0 = (void **)qword_1001F3820;
  uint64_t v9 = qword_1001F3820;
  if (!qword_1001F3820)
  {
    uint64_t v1 = sub_100041C2C();
    v7[3] = (uint64_t)dlsym(v1, "MPHomeUserMonitorAllowExplicitSettingDidChangeNotification");
    qword_1001F3820 = v7[3];
    v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    id v4 = +[NSAssertionHandler currentHandler];
    long long v5 = +[NSString stringWithUTF8String:"NSString *getMPHomeUserMonitorAllowExplicitSettingDidChangeNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ICDServerNotificationsManager.m", 35, @"%s", dlerror());

    __break(1u);
  }
}

void sub_100041ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100041EE8(uint64_t a1)
{
  sub_100041C2C();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPHomeMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3828 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPHomeMonitorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDServerNotificationsManager.m", 34, @"Unable to find class %s", "MPHomeMonitor");

    __break(1u);
  }
}

void sub_100041FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
  long long v5 = *(void **)(a1 + 32);
  id v6 = +[NSString stringWithUTF8String:string];
  [v5 _didReceiveDistributedNotification:v6 withStreamEvent:v3];
}

void sub_100042040(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  id v4 = *(void **)(a1 + 32);
  id v5 = +[NSString stringWithUTF8String:string];
  [v4 _didReceiveDarwinNotification:v5];
}

void sub_1000420BC(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  id v4 = *(void **)(a1 + 32);
  id v5 = +[NSString stringWithUTF8String:string];
  [v4 _didReceiveTelephonyCenterNotification:v5];
}

void *sub_100042138(uint64_t a1)
{
  id v2 = sub_100041C2C();
  uint64_t result = dlsym(v2, "MPHomeUserMonitorAllowExplicitSettingDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F3820 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100042188()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3810 = result;
  return result;
}

void *sub_1000421FC(uint64_t a1)
{
  id v2 = sub_100041C2C();
  uint64_t result = dlsym(v2, "MPRestrictionsMonitorAllowsExplicitContentDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F3808 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_10004224C(uint64_t a1, void *a2)
{
  return [a2 _handleFamilyCircleChangedNotification];
}

id sub_100042254(uint64_t a1, void *a2)
{
  return _[a2 _handleMusicSettingsChangedNotification];
}

id sub_10004225C(uint64_t a1, void *a2)
{
  return _[a2 _handleCloudAuthenticationDidChangeNotification];
}

void sub_100042E80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (*(void *)(*(void *)(a1 + 32) + 96))
  {
    objc_msgSend(v3, "setMergeToCloudLibraryPreference:");
    id v3 = v7;
  }
  [v3 setActiveLocker:1];
  id v4 = [v7 cloudLibraryStateReason];
  id v5 = [v4 mutableCopy];

  id v6 = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1 + 32) + 112)];
  if (v5)
  {
    [v5 setObject:v6 forKey:@"CloudLibraryStateReasonKey"];
  }
  else
  {
    id v5 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v6, @"CloudLibraryStateReasonKey", 0];
  }

  [v7 setCloudLibraryStateReason:v5];
}

void sub_100042FB0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    unsigned int v9 = [*(id *)(v6 + 96) BOOLValue];
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 112);
    int v11 = 138544642;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    uint64_t v16 = v8;
    __int16 v17 = 1024;
    unsigned int v18 = v9;
    __int16 v19 = 1024;
    int v20 = v10;
    __int16 v21 = 2114;
    id v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - Setting account %{public}@ as the active locker account, dsid=%{public}@, _mergeToCloudLibraryPreference=%d, enableReason=%d finished with error=%{public}@", (uint8_t *)&v11, 0x36u);
  }

  if (v4)
  {
    [*(id *)(a1 + 32) setError:v4];
    [*(id *)(a1 + 32) setStatus:3];
    [*(id *)(a1 + 32) setAuthenticateFailureCode:&off_1001CBC90];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_100043620(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([(id)objc_opt_class() _isClientAllowedToRequestRestrictedInformationForConnection:v6])
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      unsigned int v9 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Notifying client with observation token %{public}@ of updated storefront identifier: \"%{public}@\".", buf, 0x20u);
    }

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100043800;
    v12[3] = &unk_1001BE408;
    void v12[4] = *(void *)(a1 + 32);
    uint64_t v10 = [v6 remoteObjectProxyWithErrorHandler:v12];
    [v10 storefrontIdentifierDidChange:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: Skipping notification of updated storefront identifier for client with observation token %{public}@: client connection %{public}@ is not allowed to access restricted information.", buf, 0x20u);
    }
  }
}

void sub_100043800(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2114;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: Failed to obtain remote proxy to notify of updated storefront identifier; error = %{public}@.",
      (uint8_t *)&v6,
      0x16u);
  }
}

void sub_100043F7C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (([(id)objc_opt_class() _shouldBypassEnforcementOfPrivacyAcknowledgementForClientConnection:v5 forIncomingCloudServiceCapabilitiesRequest:0] & 1) == 0)objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v5, v6); {
}
  }

void sub_100043FF8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([(id)objc_opt_class() _shouldBypassEnforcementOfPrivacyAcknowledgementForClientConnection:v5 forIncomingCloudServiceCapabilitiesRequest:0])objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v5, v6); {
}
  }

void sub_100044074(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([(id)objc_opt_class() _isClientAllowedToRequestCapabilitiesForConnection:v6])
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = ICCloudServiceCapabilitiesGetDescription();
      *(_DWORD *)buf = 138543874;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Notifying client with observation token %{public}@ of updated cloud service capabilities: %{public}@.", buf, 0x20u);
    }
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10004426C;
    v12[3] = &unk_1001BE408;
    void v12[4] = *(void *)(a1 + 32);
    uint64_t v10 = [v6 remoteObjectProxyWithErrorHandler:v12];
    [v10 capabilitiesDidChange:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: Skipping notification of updated cloud service capabilities for client with observation token %{public}@: client connection %{public}@ is not allowed to access capabilities.", buf, 0x20u);
    }
  }
}

void sub_10004426C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2114;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: Failed to obtain remote proxy to notify of updated cloud service capabilities; error = %{public}@.",
      (uint8_t *)&v6,
      0x16u);
  }
}

void sub_1000447D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([(id)objc_opt_class() _isClientAllowedToRequestRestrictedInformationForConnection:v6])
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Notifying client with observation token %{public}@ of updated storefront country code: \"%{public}@\".", buf, 0x20u);
    }

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000449B8;
    v12[3] = &unk_1001BE408;
    void v12[4] = *(void *)(a1 + 32);
    uint64_t v10 = [v6 remoteObjectProxyWithErrorHandler:v12];
    [v10 storefrontCountryCodeDidChange:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: Skipping notification of updated storefront country code for client with observation token %{public}@: client connection %{public}@ is not allowed to access restricted information.", buf, 0x20u);
    }
  }
}

void sub_1000449B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2114;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: Failed to obtain remote proxy to notify of updated storefront country code; error = %{public}@.",
      (uint8_t *)&v6,
      0x16u);
  }
}

void sub_100044BD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (!v5)
  {
    uint64_t v10 = [a2 storefrontIdentifier];
    if (v10)
    {
      id v9 = (void *)v10;
    }
    else
    {
      uint64_t v11 = +[ICUserIdentityStore defaultIdentityStore];
      uint64_t v12 = [v11 localStoreAccountProperties];
      id v9 = [v12 storefrontIdentifier];

      if (!v9)
      {
        id v8 = +[NSError msv_errorWithDomain:ICErrorDomain code:0 debugDescription:@"Found nil storefront identifier from local store account."];
        __int16 v13 = os_log_create("com.apple.amp.itunescloudd", "Default");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          __int16 v15 = objc_msgSend(v8, "msv_description");
          int v16 = 138543618;
          uint64_t v17 = v14;
          __int16 v18 = 2114;
          id v19 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@: %{public}@", (uint8_t *)&v16, 0x16u);
        }
        goto LABEL_5;
      }
    }
    id v8 = 0;
    goto LABEL_10;
  }
  int v6 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v16 = 138543618;
    uint64_t v17 = v7;
    __int16 v18 = 2114;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@: Encountered error getting properties for active account: %{public}@.", (uint8_t *)&v16, 0x16u);
  }

  id v8 = v5;
LABEL_5:
  id v9 = 0;
LABEL_10:
  [*(id *)(a1 + 32) _updateWithStorefrontIdentifier:v9 error:v8];
}

void sub_100045064(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@: Failed to fetch bag with error: %{public}@.", (uint8_t *)&v9, 0x16u);
    }
  }
  [*(id *)(a1 + 32) _updateWithBag:v5 error:v6];
}

void sub_1000452FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004531C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (id *)(a1 + 40);
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  [*(id *)(a1 + 32) _updateWithCapabilities:a2 error:v6 privacyAcknowledgementPolicy:*(void *)(a1 + 48) capabilitiesRequestOperation:WeakRetained];
}

void sub_1000455B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    uint64_t v12 = v8;
    __int16 v13 = 2114;
    id v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Notifying client with observation token %{public}@ of updated active account.", buf, 0x16u);
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100045708;
  v10[3] = &unk_1001BE408;
  void v10[4] = *(void *)(a1 + 32);
  int v9 = [v6 remoteObjectProxyWithErrorHandler:v10];

  [v9 activeAccountDidChange];
}

void sub_100045708(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2114;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: Failed to obtain remote proxy to notify of updated active account; error = %{public}@.",
      (uint8_t *)&v6,
      0x16u);
  }
}

void sub_100045CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100045D3C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleUpdatedBag:v3];
}

void sub_100045D98(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (id *)(a1 + 32);
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained _handleUpdatedSubscriptionStatus:v4];
}

void sub_1000466C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1000466F8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = [a2 originatingClientConnection];
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_100046BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_100046C14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v2) {
    [WeakRetained _handleClientConnectionInterrupted:v2];
  }
}

void sub_100046C7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v2) {
    [WeakRetained _handleClientConnectionInvalidated:v2];
  }
}

void sub_100046FD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    id v8 = v6;
    uint64_t v10 = [v8 domain];
    if ([v10 isEqualToString:ICErrorDomain])
    {
      id v11 = [v8 code];

      if (v11 == (id)-8200) {
        goto LABEL_8;
      }
    }
    else
    {
    }
    uint64_t v12 = +[NSError msv_errorWithDomain:ICErrorDomain code:-8200 underlyingError:v8 debugDescription:@"Failed to fetch developer token."];

    id v8 = (id)v12;
LABEL_8:
    uint64_t v13 = *(void *)(a1 + 48);
    objc_msgSend(v8, "msv_errorByRemovingUnsafeUserInfo");
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v9);
    goto LABEL_9;
  }
  id v8 = [(id)objc_opt_class() _clientInfoForUserTokenRequestWithRequestingApplicationBundleIdentifier:*(void *)(a1 + 40)];
  id v9 = [objc_alloc((Class)ICMusicUserTokenFetchRequest) initWithDeveloperToken:v5 clientInfo:v8 options:*(void *)(a1 + 56) & 1];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000471A0;
  v14[3] = &unk_1001BA510;
  id v15 = v5;
  id v16 = *(id *)(a1 + 48);
  [v9 performRequestWithResponseHandler:v14];

LABEL_9:
}

void sub_1000471A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)ICMusicKitTokensResponse) initWithDeveloperToken:*(void *)(a1 + 32) userToken:v6 userTokenFetchingError:v5];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100047520(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100047800(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100048D50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    [*(id *)(a1 + 32) addPendingChange:*(void *)(a1 + 40)];
  }
  else
  {
    if ([v5 hasCapability:512])
    {
      uint64_t v8 = *(void *)(a1 + 48);
      if (v8)
      {
        id v9 = *(void (**)(void))(v8 + 16);
LABEL_12:
        v9();
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ Cannot run operation as user is not subscribed to Cloud Music Library", buf, 0xCu);
    }

    uint64_t v12 = MSVAutoBugCaptureDomainMusicLibrary;
    v17[0] = @"FavoriteChangeOperation";
    uint64_t v13 = [*(id *)(a1 + 40) description];
    v17[1] = @"SubscriptionStatus";
    v18[0] = v13;
    v18[1] = v5;
    id v14 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:2];
    id v19 = v14;
    id v15 = +[NSArray arrayWithObjects:&v19 count:1];
    +[MSVAutoBugCapture snapshotWithDomain:v12 type:@"Bug" subType:@"OFT-FavoriteEntityForUnsupportedSubscription" context:@"Unsupported API call" triggerThresholdValues:0 events:v15 completion:0];

    [*(id *)(a1 + 40) _revertPendingFavoriteEntityForPermanentlyFailedOperation];
  }
  uint64_t v16 = *(void *)(a1 + 48);
  if (v16)
  {
    id v9 = *(void (**)(void))(v16 + 16);
    goto LABEL_12;
  }
LABEL_13:
}

void sub_100049118(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_10004944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100049480(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v7 = v6;
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v45 = v6;
    id v9 = +[NSArray arrayWithObjects:&v45 count:1];
    id v34 = 0;
    LOBYTE(v8) = [v8 executeUpdate:@"UPDATE item_stats SET liked_state=1, liked_state_changed_date=0 WHERE item_pid=?", v9, &v34 withParameters error];
    id v10 = v34;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)v8;

    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        id v13 = [v7 longLongValue];
        id v14 = *(void **)(*(void *)(a1 + 40) + 88);
        *(_DWORD *)buf = 138544130;
        uint64_t v38 = v12;
        __int16 v39 = 2048;
        id v40 = v13;
        __int16 v41 = 2048;
        id v42 = v14;
        __int16 v43 = 2114;
        id v44 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Could not revert liked_state=1, liked_state_changed_date=0 for track with persistentID=%lld, storeID:%lld. Error=%{public}@", buf, 0x2Au);
      }
    }
  }
  else
  {
    id v10 = 0;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    id v15 = *(void **)(a1 + 32);
    __int16 v36 = v7;
    uint64_t v16 = +[NSArray arrayWithObjects:&v36 count:1];
    id v33 = v10;
    unsigned __int8 v17 = [v15 executeUpdate:@"UPDATE item_store SET store_saga_id = store_saga_id WHERE item_pid = ?" withParameters:v16 error:&v33];
    id v18 = v33;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v17;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      if (!*(unsigned char *)(a1 + 57)) {
        goto LABEL_11;
      }
      id v19 = *(void **)(a1 + 32);
      v35[0] = &off_1001CBCC0;
      v35[1] = v7;
      v35[2] = &off_1001CBCD8;
      v35[3] = &off_1001CBCF0;
      int v20 = +[NSArray arrayWithObjects:v35 count:4];
      id v32 = v18;
      LOBYTE(v19) = [v19 executeUpdate:@"UPDATE item SET keep_local = ? WHERE item_pid = ? AND in_my_library = 1 AND media_type IN (?, ?)", v20, &v32 withParameters error];
      id v21 = v32;

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)v19;
      id v18 = v21;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
      {
LABEL_11:
        id v22 = [*(id *)(a1 + 40) musicLibrary];
        +[ML3Track incrementRevisionWithLibrary:persistentID:deletionType:revisionType:usingConnection:](ML3Track, "incrementRevisionWithLibrary:persistentID:deletionType:revisionType:usingConnection:", v22, [v7 longLongValue], 0, 0, *(void *)(a1 + 32));

        id v23 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)(a1 + 40);
          id v25 = [v7 longLongValue];
          *(_DWORD *)buf = 138543618;
          uint64_t v38 = v24;
          __int16 v39 = 2048;
          id v40 = v25;
          id v26 = "%{public}@ Updated in_my_library for track with persistent ID %lld";
          long long v27 = v23;
          os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
          uint32_t v29 = 22;
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v27, v28, v26, buf, v29);
          goto LABEL_17;
        }
        goto LABEL_17;
      }
    }
  }
  else
  {
    id v18 = v10;
  }
  *a4 = 1;
  id v23 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = *(void *)(a1 + 40);
    id v31 = [v7 longLongValue];
    *(_DWORD *)buf = 138543874;
    uint64_t v38 = v30;
    __int16 v39 = 2048;
    id v40 = v31;
    __int16 v41 = 2114;
    id v42 = v18;
    id v26 = "%{public}@ Failed to update in_my_library for track with persistent ID %lld with error: %{public}@";
    long long v27 = v23;
    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    uint32_t v29 = 32;
    goto LABEL_16;
  }
LABEL_17:
}

void sub_10004986C(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) musicLibrary];
    [v3 notifyEntitiesAddedOrRemoved];

    id v4 = [*(id *)(a1 + 32) musicLibrary];
    [v4 notifyContentsDidChange];
  }
}

id sub_100049AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  id v7 = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 96)];
  long long v27 = v7;
  uint64_t v8 = +[NSArray arrayWithObjects:&v27 count:1];
  id v18 = 0;
  id v9 = [v3 executeUpdate:@"UPDATE album_artist SET liked_state=1, liked_state_changed_date=0 WHERE album_artist_pid=?", v8, &v18 withParameters error];
  id v10 = v18;

  if ((v9 & 1) == 0)
  {
    uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 88);
      uint64_t v14 = *(void *)(v12 + 96);
      *(_DWORD *)buf = 138544130;
      uint64_t v20 = v12;
      __int16 v21 = 2048;
      uint64_t v22 = v13;
      __int16 v23 = 2048;
      uint64_t v24 = v14;
      __int16 v25 = 2114;
      id v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Could not revert liked_state=1, liked_state_changed_date=0 for album_artist with store=%lld, persistentID=%lld. Error=%{public}@", buf, 0x2Au);
    }
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100049F14;
  v16[3] = &unk_1001BDC58;
  id v17 = *(id *)(a1 + 40);
  [v3 enqueueBlockForTransactionCommit:v16];

  return v9;
}

id sub_100049D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 120);
  id v7 = +[NSArray arrayWithObjects:&v23 count:1];
  id v16 = 0;
  id v8 = [v3 executeUpdate:@"UPDATE album_artist SET liked_state=1, liked_state_changed_date=0 WHERE cloud_universal_library_id=?", v7, &v16 withParameters error];
  id v9 = v16;

  if ((v8 & 1) == 0)
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v11 + 120);
      *(_DWORD *)buf = 138543874;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2114;
      id v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ Could not revert liked_state=1, liked_state_changed_date=0 for album_artist with cloud_universal_library_id=%{public}@. Error=%{public}@", buf, 0x20u);
    }
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100049F04;
  v14[3] = &unk_1001BDC58;
  id v15 = *(id *)(a1 + 40);
  [v3 enqueueBlockForTransactionCommit:v14];

  return v8;
}

id *sub_100049F04(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] notifyContentsDidChange];
  }
  return result;
}

id *sub_100049F14(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] notifyContentsDidChange];
  }
  return result;
}

id sub_10004A11C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  id v7 = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 96)];
  uint32_t v29 = v7;
  id v8 = +[NSArray arrayWithObjects:&v29 count:1];
  id v22 = 0;
  id v9 = [v3 executeUpdate:@"UPDATE album SET liked_state=1, liked_state_changed_date=0 WHERE album_pid=?", v8, &v22 withParameters error];
  id v10 = v22;

  if (v9)
  {
    uint64_t v11 = +[NSMutableArray array];
    uint64_t v12 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyStorePlaylistID equalToInt64:*(void *)(*(void *)(a1 + 32) + 88)];
    uint64_t v13 = +[ML3Track allItemsQueryWithLibrary:*(void *)(a1 + 40) predicate:v12 orderingTerms:&__NSArray0__struct usingSections:0];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10004A634;
    v20[3] = &unk_1001BE4C8;
    id v21 = v11;
    id v14 = v11;
    [v13 enumeratePersistentIDsUsingBlock:v20];
    [*(id *)(a1 + 32) _recomputeInUsersLibraryForTrackPids:v14 resetFavoriteState:0 usingConnection:v3];
  }
  else
  {
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(v15 + 96);
      *(_DWORD *)buf = 138543874;
      uint64_t v24 = v15;
      __int16 v25 = 2048;
      uint64_t v26 = v16;
      __int16 v27 = 2114;
      id v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@ Could not revert liked_state=1, liked_state_changed_date=0 for album with album_pid=%lld. Error=%{public}@", buf, 0x20u);
    }
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_10004A694;
  v18[3] = &unk_1001BDC58;
  id v19 = *(id *)(a1 + 40);
  [v3 enqueueBlockForTransactionCommit:v18];

  return v9;
}

id sub_10004A428(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 112);
  id v7 = +[NSArray arrayWithObjects:&v23 count:1];
  id v16 = 0;
  id v8 = [v3 executeUpdate:@"UPDATE album SET liked_state=1, liked_state_changed_date=0 WHERE cloud_library_id=?", v7, &v16 withParameters error];
  id v9 = v16;

  if ((v8 & 1) == 0)
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v11 + 112);
      *(_DWORD *)buf = 138543874;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2114;
      id v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ Could not revert liked_state=1, liked_state_changed_date=0 for album with cloud_universal_id=%{public}@ with error=%{public}@", buf, 0x20u);
    }
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10004A624;
  v14[3] = &unk_1001BDC58;
  id v15 = *(id *)(a1 + 40);
  [v3 enqueueBlockForTransactionCommit:v14];

  return v8;
}

id *sub_10004A624(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] notifyContentsDidChange];
  }
  return result;
}

void sub_10004A634(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

id *sub_10004A694(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] notifyContentsDidChange];
  }
  return result;
}

uint64_t sub_10004AB98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  id v7 = *(void **)(a1 + 32);
  id v8 = +[NSNumber numberWithLongLong:v7[12]];
  uint64_t v11 = v8;
  id v9 = +[NSArray arrayWithObjects:&v11 count:1];
  [v7 _recomputeInUsersLibraryForTrackPids:v9 resetFavoriteState:1 usingConnection:v3];

  return 1;
}

void sub_10004B4E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B520(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004B530(uint64_t a1)
{
}

void sub_10004B538(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

uint64_t sub_10004B5A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  id v7 = *(void **)(a1 + 32);
  id v8 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) allObjects];
  [v7 _recomputeInUsersLibraryForTrackPids:v8 resetFavoriteState:0 usingConnection:v3];

  return 1;
}

uint64_t sub_10004B650(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10004BA98;
  v15[3] = &unk_1001BA6C0;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v16 = v3;
  uint64_t v17 = v8;
  id v10 = v3;
  [v9 enumerateObjectsUsingBlock:v15];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10004BC44;
  v13[3] = &unk_1001BDC58;
  id v14 = *(id *)(a1 + 48);
  [v10 enqueueBlockForTransactionCommit:v13];
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return v11;
}

uint64_t sub_10004B7B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  uint64_t v7 = [*(id *)(a1 + 32) configuration];
  LODWORD(v5) = sub_10012A49C(v7);

  if (v5)
  {
    v32[0] = *(void *)(a1 + 40);
    v32[1] = &off_1001CBCC0;
    uint64_t v8 = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 96)];
    v32[2] = v8;
    id v9 = +[NSArray arrayWithObjects:v32 count:3];
    id v22 = 0;
    unsigned __int8 v10 = [v3 executeUpdate:@"UPDATE album SET cloud_library_id=?, keep_local=? WHERE album_pid=?", v9, &v22 withParameters error];
    uint64_t v11 = v22;
  }
  else
  {
    v31[0] = *(void *)(a1 + 40);
    uint64_t v8 = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 96)];
    v31[1] = v8;
    id v9 = +[NSArray arrayWithObjects:v31 count:2];
    __int16 v21 = 0;
    unsigned __int8 v10 = [v3 executeUpdate:@"UPDATE album SET cloud_library_id=? WHERE album_pid=?" withParameters:v9 error:&v21];
    uint64_t v11 = v21;
  }
  id v12 = v11;

  if (v10)
  {
    uint64_t v13 = 1;
  }
  else
  {
    id v14 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void *)(v15 + 96);
      *(_DWORD *)buf = 138544130;
      uint64_t v24 = v15;
      __int16 v25 = 2114;
      uint64_t v26 = v16;
      __int16 v27 = 2048;
      uint64_t v28 = v17;
      __int16 v29 = 2114;
      id v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@ set cloud_library_id=%{public}@ for album with persistentID=%lld with error=%{public}@", buf, 0x2Au);
    }

    uint64_t v13 = 0;
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10004BA88;
  v19[3] = &unk_1001BDC58;
  id v20 = *(id *)(a1 + 48);
  [v3 enqueueBlockForTransactionCommit:v19];

  return v13;
}

id *sub_10004BA88(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] notifyContentsDidChange];
  }
  return result;
}

void sub_10004BA98(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[NSNumber numberWithLongLong:a1[7]];
  v21[0] = v3;
  id v4 = +[NSNumber numberWithLongLong:*(void *)(a1[5] + 96)];
  v21[1] = v4;
  id v5 = +[NSArray arrayWithObjects:v21 count:2];
  id v12 = 0;
  unsigned __int8 v6 = [v2 executeUpdate:@"UPDATE container SET store_cloud_id=? WHERE container_pid=?" withParameters:v5 error:&v12];
  id v7 = v12;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v6;

  if (!*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[5];
      uint64_t v10 = a1[7];
      uint64_t v11 = *(void *)(v9 + 96);
      *(_DWORD *)buf = 138544130;
      uint64_t v14 = v9;
      __int16 v15 = 2048;
      uint64_t v16 = v10;
      __int16 v17 = 2048;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      id v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Could not set store_cloud_id=%lld for container with persistentID=%lld. Error=%{public}@", buf, 0x2Au);
    }
  }
}

id *sub_10004BC44(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] notifyContentsDidChange];
  }
  return result;
}

void sub_10004BD1C(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = (id *)(a1 + 32);
    uint64_t v4 = +[NSString stringWithFormat:@"%@", objc_opt_class()];
    id v5 = [objc_alloc((Class)MSVXPCTransaction) initWithName:v4];
    [v5 beginTransaction];
    unsigned __int8 v6 = [*v3 musicLibrary];
    id v7 = [*v3 clientIdentity];
    [v6 setClientIdentity:v7];

    unsigned __int16 v58 = [*v3 connection];
    id v57 = [ICFavoriteEntityRequest alloc];
    uint64_t v8 = *((void *)*v3 + 11);
    uint64_t v9 = *((void *)*v3 + 13);
    uint64_t v10 = *((void *)*v3 + 14);
    uint64_t v11 = *((void *)*v3 + 15);
    id v12 = v4;
    id v13 = v5;
    uint64_t v14 = *((void *)*v3 + 17);
    uint64_t v15 = *((void *)*v3 + 16);
    LODWORD(v5) = [v58 databaseID];
    unsigned int v16 = [*v3 _currentDatabaseRevision];
    uint64_t v17 = v14;
    uint64_t v18 = v13;
    __int16 v19 = v12;
    id v20 = -[ICFavoriteEntityRequest initWithStoreID:globalPlaylistID:albumCloudLibraryID:artistCloudLibraryID:entityType:time:databaseID:databaseRevision:](v57, "initWithStoreID:globalPlaylistID:albumCloudLibraryID:artistCloudLibraryID:entityType:time:databaseID:databaseRevision:", v8, v9, v10, v11, v17, v15, __PAIR64__(v16, v5));
    __int16 v21 = v20;
    if (!v20)
    {
LABEL_40:
      if ([*(id *)(a1 + 32) status] == (id)3)
      {
        uint64_t v53 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v54 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v54;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "%{public}@ Operation permanently failed, attempting to remove pending library content...", buf, 0xCu);
        }

        [*(id *)(a1 + 32) _revertPendingFavoriteEntityForPermanentlyFailedOperation];
      }
      int v55 = [*(id *)(a1 + 32) musicLibrary];
      uint64_t v56 = MSVTCCIdentityForCurrentProcess();
      [v55 setClientIdentity:v56];

      [v18 endTransaction];
      goto LABEL_45;
    }
    [(ICDRequest *)v20 setVerificationInteractionLevel:2];
    id v22 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = (objc_class *)objc_opt_class();
      __int16 v25 = NSStringFromClass(v24);
      if ([(ICDRequest *)v21 method]) {
        CFStringRef v26 = @"POST";
      }
      else {
        CFStringRef v26 = @"GET";
      }
      __int16 v27 = [(ICDRequest *)v21 action];
      *(_DWORD *)buf = 138544386;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t))v21;
      *(_WORD *)id v76 = 2114;
      *(void *)&v76[2] = v26;
      *(_WORD *)&v76[10] = 2114;
      *(void *)&v76[12] = v27;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@ Sending favorite entity request <%{public}@: %p method=%{public}@ action=%{public}@>", buf, 0x34u);
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v75 = sub_10004B520;
    *(void *)id v76 = sub_10004B530;
    *(void *)&v76[8] = 0;
    uint64_t v66 = 0;
    uint64_t v67 = &v66;
    uint64_t v68 = 0x3032000000;
    uint64_t v69 = sub_10004B520;
    id v70 = sub_10004B530;
    id v71 = 0;
    dispatch_semaphore_t v28 = dispatch_semaphore_create(0);
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472;
    v60[2] = sub_10004C59C;
    v60[3] = &unk_1001BDBE0;
    __int16 v29 = v21;
    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v61 = v29;
    uint64_t v62 = v30;
    v64 = buf;
    unsigned __int16 v65 = &v66;
    uint64_t v31 = a1;
    id v32 = v28;
    id v63 = v32;
    [v58 sendRequest:v29 withResponseHandler:v60];
    dispatch_semaphore_wait(v32, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v33 = (uint64_t)[*(id *)(*(void *)&buf[8] + 40) responseCode];
    if (v33 > 399)
    {
      if (v33 == 404 || v33 == 400)
      {
        uint64_t v34 = 3;
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v34 = 1;
      if (v33 == 200 || v33 == 204)
      {
LABEL_18:
        [*(id *)(a1 + 32) setStatus:v34];
        __int16 v36 = (void *)v67[5];
        if (!v36) {
          goto LABEL_26;
        }
        id v37 = [v36 domain];
        if ([v37 isEqualToString:ICCloudClientErrorDomain])
        {
          BOOL v38 = [(id)v67[5] code] == (id)2019;

          uint64_t v31 = a1;
          if (!v38) {
            goto LABEL_26;
          }
          __int16 v39 = [(id)v67[5] userInfo];
          id v37 = [v39 objectForKey:@"CloudLibraryConnectionRequestForbiddenAdditonalErrorCodeKey"];

          if ([v37 integerValue] == (id)954)
          {
            [*(id *)(a1 + 32) setStatus:3];
            id v40 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              uint64_t v41 = *(void *)(a1 + 32);
              *(_DWORD *)id v72 = 138543362;
              uint64_t v73 = v41;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%{public}@ favorite entity permamently failed -- item limit exceeded", v72, 0xCu);
            }
          }
        }

        uint64_t v31 = a1;
LABEL_26:
        if (MSVDeviceOSIsInternalInstall())
        {
          id v42 = +[ICDefaults standardDefaults];
          unsigned int v43 = [v42 shouldTreatFavoritingEntityRequestAsFailed];

          uint64_t v31 = a1;
          if (v43)
          {
            id v44 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v45 = *(void *)(a1 + 32);
              *(_DWORD *)id v72 = 138543362;
              uint64_t v73 = v45;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%{public}@ Defaults are set to treat favoriting action as failed. Setting operation status to permanently failed", v72, 0xCu);
            }

            uint64_t v31 = a1;
            [*(id *)(a1 + 32) setStatus:3];
          }
        }
        if ([*(id *)(v31 + 32) status] == (id)1)
        {
          [*(id *)(a1 + 32) _setCloudIDsFromResponse:*(void *)(*(void *)&buf[8] + 40)];
          unsigned int v46 = [*(id *)(*(void *)&buf[8] + 40) updateRequired];
          uint64_t v47 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
          BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            if (v48)
            {
              uint64_t v49 = *(void *)(a1 + 32);
              *(_DWORD *)id v72 = 138543362;
              uint64_t v73 = v49;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%{public}@ Requesting library update because the response contained update-required flag", v72, 0xCu);
            }

            uint64_t v47 = [*(id *)(a1 + 32) configuration];
            id v50 = +[BaseRequestHandler handlerForConfiguration:v47];
            id v51 = [*(id *)(a1 + 32) clientIdentity];
            [v50 updateSagaLibraryWithClientIdentity:v51 forReason:8 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:0];
          }
          else if (v48)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            *(_DWORD *)id v72 = 138543362;
            uint64_t v73 = v52;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%{public}@ Skipping library update because the response did not contain update-required flag", v72, 0xCu);
          }
        }
        _Block_object_dispose(&v66, 8);

        _Block_object_dispose(buf, 8);
        goto LABEL_40;
      }
    }
    uint64_t v34 = 2;
    goto LABEL_18;
  }
  __int16 v19 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@ Not running operation", buf, 0xCu);
  }
LABEL_45:
}

void sub_10004C568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10004C59C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned __int8 v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (objc_class *)objc_opt_class();
    uint64_t v9 = NSStringFromClass(v8);
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = [v10 method];
    CFStringRef v12 = @"POST";
    if (!v11) {
      CFStringRef v12 = @"GET";
    }
    CFStringRef v27 = v12;
    id v13 = [*(id *)(a1 + 32) action];
    uint64_t v14 = (objc_class *)objc_opt_class();
    uint64_t v15 = NSStringFromClass(v14);
    id v16 = [v5 responseCode];
    uint64_t v17 = [v5 responseData];
    *(_DWORD *)buf = 138545154;
    __int16 v29 = v9;
    __int16 v30 = 2048;
    uint64_t v31 = v10;
    __int16 v32 = 2114;
    CFStringRef v33 = v27;
    __int16 v34 = 2114;
    uint64_t v35 = v13;
    __int16 v36 = 2114;
    id v37 = v15;
    __int16 v38 = 2048;
    id v39 = v5;
    __int16 v40 = 2048;
    id v41 = v16;
    __int16 v42 = 2048;
    id v43 = [v17 length];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p method=%{public}@ action=%{public}@> received response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x52u);
  }
  if (v6)
  {
    uint64_t v18 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v20 = *(void **)(a1 + 32);
      __int16 v19 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      __int16 v29 = v19;
      __int16 v30 = 2114;
      uint64_t v31 = v20;
      __int16 v32 = 2114;
      CFStringRef v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@ %{public}@ failed with error: %{public}@", buf, 0x20u);
    }
  }
  uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
  id v22 = *(void **)(v21 + 40);
  *(void *)(v21 + 40) = v5;
  id v23 = v5;

  uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8);
  __int16 v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = v6;
  CFStringRef v26 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10004D7C4(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  ICDAAPUtilitiesWriteContainer();
}

void sub_10004D88C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    unsigned __int8 v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        ICDAAPUtilitiesWriteProperty();
        ++v8;
      }
      while (v6 != v8);
      unsigned __int8 v6 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void sub_10004DE70(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = a1[4];
      long long v10 = objc_msgSend(v6, "msv_description");
      int v14 = 138543618;
      id v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Finished request to end collaboration error=%{public}@", (uint8_t *)&v14, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = a1[4];
    int v14 = 138543362;
    id v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished request to end collaboration", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v12 = (uint64_t)[v5 responseCode];
  if (v12 > 399)
  {
    if (v12 == 404 || v12 == 400)
    {
      uint64_t v13 = 3;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  if (v12 != 200 && v12 != 204) {
LABEL_13:
  }
    uint64_t v13 = 2;
LABEL_14:
  [a1[4] setStatus:v13];
  [a1[4] setError:v6];
  if (!v6)
  {
    *((unsigned char *)a1[4] + 107) = [v5 updateRequired];
    *(void *)((char *)a1[4] + 114) = [a1[5] longLongValue];
  }
  [a1[6] endTransaction];
  [a1[4] finish];
}

void sub_10004E6A8(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "UserState");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@: connection invalidated: pid=%u", (uint8_t *)&v5, 0x12u);
  }
}

void sub_10004E76C(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "UserState");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@: connection interrupted: pid=%u", (uint8_t *)&v5, 0x12u);
  }
}

id sub_10004EB20(uint64_t a1, void *a2)
{
  return [a2 setUserProfile:*(void *)(a1 + 32)];
}

id sub_10004EB2C(uint64_t a1, void *a2)
{
  return [a2 setMusic:*(void *)(a1 + 32)];
}

void sub_10004EBF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = +[ICUserIdentityStore defaultIdentityStore];
  [v3 setIdentityStore:v4];

  [v3 setIdentity:*(void *)(a1 + 32)];
  [v3 setAllowsExpiredBags:1];
  id v5 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v3 setAuthenticationProvider:v5];
}

id sub_10004EDF0(id a1, ICMediaUserState *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10004EE94;
  v5[3] = &unk_1001BAC80;
  uint64_t v6 = a2;
  id v2 = v6;
  id v3 = [(ICMediaUserState *)v2 copyWithBlock:v5];

  return v3;
}

void sub_10004EE94(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  int v4 = [v2 music];
  id v5 = [v4 copyWithBlock:&stru_1001BAC58];

  [v3 setMusic:v5];
}

void sub_10004EF0C(id a1, ICMutableMusicUserState *a2)
{
}

void sub_10004F2D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    __int16 v7 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v59 = *(void *)(a1 + 32);
      v60 = v7;
      id v8 = [*(id *)(a1 + 40) DSID];
      uint64_t v9 = MSVHasherSharedSeed();
      uint64_t v11 = v10;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      uint64_t v12 = v9 ^ 0x736F6D6570736575;
      uint64_t v76 = 0;
      uint64_t v13 = v10 ^ 0x646F72616E646F6DLL;
      uint64_t v14 = v9 ^ 0x6C7967656E657261;
      *(void *)buf = 1000;
      unint64_t v15 = (unint64_t)[v8 integerValue];
      uint64_t v16 = v11 ^ 0x7465646279746573 ^ v15;
      uint64_t v17 = (v12 + v13) ^ __ROR8__(v13, 51);
      uint64_t v18 = v14 + v16;
      uint64_t v19 = (v14 + v16) ^ __ROR8__(v16, 48);
      uint64_t v20 = v19 + __ROR8__(v12 + v13, 32);
      uint64_t v21 = v18 + v17;
      uint64_t v22 = v21 ^ __ROR8__(v17, 47);
      uint64_t v65 = 0x800000000000000;
      memset(&v77[1], 0, 64);
      uint64_t v23 = v20 ^ __ROR8__(v19, 43) ^ 0x800000000000000;
      unint64_t v24 = (v20 ^ v15) + v22;
      uint64_t v25 = v24 ^ __ROR8__(v22, 51);
      uint64_t v26 = __ROR8__(v21, 32) + v23;
      uint64_t v27 = __ROR8__(v23, 48);
      uint64_t v28 = (v26 ^ v27) + __ROR8__(v24, 32);
      uint64_t v29 = v28 ^ __ROR8__(v26 ^ v27, 43);
      uint64_t v30 = v26 + v25;
      uint64_t v31 = v30 ^ __ROR8__(v25, 47);
      uint64_t v32 = (v28 ^ 0x800000000000000) + v31;
      uint64_t v33 = __ROR8__(v32, 32);
      uint64_t v34 = v32 ^ __ROR8__(v31, 51);
      uint64_t v35 = (__ROR8__(v30, 32) ^ 0xFFLL) + v29;
      uint64_t v36 = v35 ^ __ROR8__(v29, 48);
      uint64_t v37 = v33 + v36;
      uint64_t v38 = (v33 + v36) ^ __ROR8__(v36, 43);
      uint64_t v39 = v34 + v35;
      uint64_t v40 = v39 ^ __ROR8__(v34, 47);
      uint64_t v41 = v40 + v37;
      uint64_t v42 = v41 ^ __ROR8__(v40, 51);
      uint64_t v43 = __ROR8__(v39, 32) + v38;
      uint64_t v44 = __ROR8__(v38, 48);
      uint64_t v45 = __ROR8__(v41, 32) + (v43 ^ v44);
      uint64_t v46 = v45 ^ __ROR8__(v43 ^ v44, 43);
      uint64_t v47 = v42 + v43;
      uint64_t v48 = v47 ^ __ROR8__(v42, 47);
      uint64_t v49 = v48 + v45;
      uint64_t v50 = v49 ^ __ROR8__(v48, 51);
      uint64_t v51 = __ROR8__(v47, 32) + v46;
      uint64_t v52 = __ROR8__(v46, 48);
      uint64_t v53 = __ROR8__(v49, 32) + (v51 ^ v52);
      uint64_t v54 = v53 ^ __ROR8__(v51 ^ v52, 43);
      uint64_t v55 = v50 + v51;
      *(void *)&buf[8] = v53;
      unint64_t v63 = __ROR8__(v55, 32);
      uint64_t v64 = v54;
      v77[0] = 1000;
      v77[1] = v55 ^ __ROR8__(v50, 47) ^ v53 ^ v63 ^ v54;
      *(_OWORD *)&v77[9] = *(_OWORD *)v77;
      *(_OWORD *)&v77[11] = *(_OWORD *)&v77[2];
      *(_OWORD *)&v77[13] = *(_OWORD *)&v77[4];
      *(_OWORD *)&v77[15] = *(_OWORD *)&v77[6];
      v77[17] = 0;
      __int16 v7 = v60;
      id v57 = +[NSNumber numberWithUnsignedInteger:v77[1]];
      unsigned __int16 v58 = [v57 stringValue];

      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v59;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v58;
      __int16 v62 = 2114;
      unint64_t v63 = (unint64_t)v6;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch user state for user %{public}@, refresh triggered by expired token. err=%{public}@", buf, 0x20u);
    }
    uint64_t v56 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    uint64_t v56 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v56();
}

unint64_t sub_10004F8F0(void *a1)
{
  if (*a1 < 0x20uLL) {
    uint64_t v1 = a1[3] + 0x27D4EB2F165667C5;
  }
  else {
    uint64_t v1 = 0x85EBCA77C2B2AE63
  }
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)));
  unint64_t v2 = v1 + *a1;
  id v3 = a1 + 5;
  unint64_t v4 = *a1 & 0x1FLL;
  if (v4 >= 8)
  {
    do
    {
      uint64_t v5 = *v3++;
      unint64_t v2 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v5, 33)) ^ v2, 37);
      v4 -= 8;
    }
    while (v4 > 7);
  }
  if (v4 >= 4)
  {
    unsigned int v6 = *(_DWORD *)v3;
    id v3 = (uint64_t *)((char *)v3 + 4);
    unint64_t v2 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v6) ^ v2, 41);
    v4 -= 4;
  }
  for (; v4; --v4)
  {
    unsigned int v7 = *(unsigned __int8 *)v3;
    id v3 = (uint64_t *)((char *)v3 + 1);
    unint64_t v2 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v7) ^ v2, 53);
  }
  unint64_t v8 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v8 ^ HIDWORD(v8);
}

void sub_10004FC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004FC50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004FC60(uint64_t a1)
{
}

void sub_10004FC68(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = os_log_create("com.apple.amp.itunescloudd", "UserState");
  unint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1[4];
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v9;
      __int16 v21 = 2114;
      id v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch token status. err=%{public}@", buf, 0x16u);
    }

    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[4];
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v10;
      __int16 v21 = 2114;
      id v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Fetched token status dictionary: %{public}@", buf, 0x16u);
    }

    id v11 = [v5 mutableCopy];
    uint64_t v12 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v11 count]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10004FE78;
    v16[3] = &unk_1001BAB88;
    uint64_t v13 = a1[6];
    id v17 = v12;
    uint64_t v18 = v13;
    id v14 = v12;
    [v11 enumerateKeysAndObjectsUsingBlock:v16];
    (*(void (**)(void, id, void, uint64_t))(a1[5] + 16))(a1[5], v14, 0, v15);
  }
}

void sub_10004FE78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc((Class)ICMusicLibraryAuthToken);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10004FFF8;
  v19[3] = &unk_1001BAB38;
  id v8 = v5;
  id v20 = v8;
  id v9 = [v7 initWithBlock:v19];
  id v10 = objc_alloc((Class)ICMusicLibraryAuthTokenStatus);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000500E8;
  v16[3] = &unk_1001BAB60;
  id v17 = v9;
  id v18 = v8;
  id v11 = v8;
  id v12 = v9;
  id v13 = [v10 initWithBlock:v16];
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  [*(id *)(a1 + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKeyedSubscript:v6];
}

void sub_10004FFF8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 tokenResult];
  id v6 = [v5 token];
  [v4 setToken:v6];

  id v7 = [*(id *)(a1 + 32) tokenResult];
  id v8 = [v7 expirationDate];
  [v4 setExpirationDate:v8];

  id v11 = [*(id *)(a1 + 32) tokenResult];
  id v9 = [v11 tokenIdentitifer];
  id v10 = [v9 deviceGUID];
  [v4 setDeviceGUID:v10];
}

void sub_1000500E8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = a2;
  [v6 setToken:v3];
  id v4 = [*(id *)(a1 + 40) lastError];
  [v6 setLastError:v4];

  id v5 = [*(id *)(a1 + 40) lastUpdatedDate];
  [v6 setLastUpdatedDate:v5];

  objc_msgSend(v6, "setShouldExcludeFromBackgroundRefresh:", objc_msgSend(*(id *)(a1 + 40), "shouldExcludeFromBackgroundRefresh"));
}

void sub_1000504FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v22 = 138543618;
      uint64_t v23 = v8;
      __int16 v24 = 2114;
      id v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Encountered error fetching user social profile. Returning cached userState error=%{public}@", (uint8_t *)&v22, 0x16u);
    }
  }
  else
  {
    id v7 = [*(id *)(a1 + 32) _updatedUserStateFromState:*(void *)(a1 + 56) withUserProfile:v5];
    id v9 = *(void **)(a1 + 40);
    id v10 = [*(id *)(a1 + 48) DSID];
    [v9 setObject:v7 forKeyedSubscript:v10];
  }
  id v11 = *(void **)(a1 + 40);
  id v12 = [*(id *)(a1 + 48) DSID];
  id v13 = [v11 objectForKeyedSubscript:v12];
  id v14 = *(id *)(a1 + 56);
  if (v13 == v14)
  {

LABEL_10:
    goto LABEL_11;
  }
  uint64_t v15 = v14;
  unsigned __int8 v16 = [v13 isEqual:v14];

  if ((v16 & 1) == 0)
  {
    id v12 = os_log_create("com.apple.amp.itunescloudd", "UserState_Oversize");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      id v17 = *(void **)(a1 + 40);
      uint64_t v19 = *(void **)(a1 + 56);
      id v20 = [*(id *)(a1 + 48) DSID];
      __int16 v21 = [v17 objectForKeyedSubscript:v20];
      int v22 = 138543874;
      uint64_t v23 = v18;
      __int16 v24 = 2114;
      id v25 = v19;
      __int16 v26 = 2114;
      uint64_t v27 = v21;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ Updated user state. cachedUserState=%{public}@ newUserState=%{public}@", (uint8_t *)&v22, 0x20u);
    }
    goto LABEL_10;
  }
LABEL_11:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_100050740(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) allValues];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100050B78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v7 = *(id *)(*(void *)(a1 + 32) + 48);
  uint64_t v8 = +[NSMutableArray array];
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(v9 + 48);
  *(void *)(v9 + 48) = v8;

  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(unsigned __int8 *)(v11 + 57);
  int v13 = *(unsigned __int8 *)(v11 + 56);
  *(unsigned char *)(v11 + 57) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v14 = os_log_create("com.apple.amp.itunescloudd", "UserState");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = [v7 count];
    int v17 = *(unsigned __int8 *)(a1 + 40);
    int v18 = *(unsigned __int8 *)(a1 + 41);
    *(_DWORD *)buf = 138544130;
    uint64_t v27 = v15;
    __int16 v28 = 2048;
    id v29 = v16;
    __int16 v30 = 1024;
    int v31 = v17;
    __int16 v32 = 1024;
    int v33 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ user state account fetch finished with %lu pending completions. forceRefresh=%{BOOL}u ignoreCache=%{BOOL}u", buf, 0x22u);
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10005109C;
  v23[3] = &unk_1001BAA30;
  id v19 = v5;
  id v24 = v19;
  id v20 = v6;
  id v25 = v20;
  [v7 enumerateObjectsUsingBlock:v23];
  if ((unint64_t)[v7 count] >= 2)
  {
    __int16 v21 = *(void **)(a1 + 32);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10005117C;
    v22[3] = &unk_1001BE1C0;
    void v22[4] = v21;
    [v21 _fetchAccountsWithForceRefresh:v13 != 0 ignoreResponseCache:v12 != 0 completion:v22];
  }
}

void sub_100050DE0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v6 = dispatch_group_create();
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id obj = *(id *)(a1 + 32);
    id v7 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v23;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v23 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v10);
          dispatch_group_enter(v6);
          uint64_t v12 = *(unsigned __int8 *)(a1 + 64);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v19[2] = sub_100051038;
          v19[3] = &unk_1001BAAC0;
          int v13 = *(void **)(a1 + 40);
          id v20 = *(id *)(a1 + 48);
          __int16 v21 = v6;
          [v13 _getUserStateFromIdentity:v11 tokensDictionary:v5 ignoreResponseCache:v12 completion:v19];

          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v8);
    }

    id v14 = *(NSObject **)(*(void *)(a1 + 40) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005107C;
    block[3] = &unk_1001BEC48;
    id v18 = *(id *)(a1 + 56);
    id v17 = *(id *)(a1 + 48);
    dispatch_group_notify(v6, v14, block);
  }
}

void sub_100051038(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addObject:a2];
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v3);
}

uint64_t sub_10005107C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

id sub_100051094(id a1, ICUserIdentity *a2)
{
  return [(ICUserIdentity *)a2 DSID];
}

void sub_10005109C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000512EC;
  block[3] = &unk_1001BEC98;
  id v9 = v3;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_10005117C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "UserState");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = objc_msgSend(v6, "msv_description");
      int v12 = 138543874;
      uint64_t v13 = v9;
      __int16 v14 = 2114;
      id v15 = v5;
      __int16 v16 = 2114;
      id v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ user state refresh completed with userStates %{public}@ error=%{public}@", (uint8_t *)&v12, 0x20u);
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ user state refresh completed with userStates %{public}@", (uint8_t *)&v12, 0x16u);
    }

    [*(id *)(a1 + 32) _notifyServerStateUpdatedIfNeeded:v5];
  }
}

uint64_t sub_1000512EC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100051AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose((const void *)(v61 - 208), 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose((const void *)(v61 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100051B44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 domain];
  if ([v7 isEqualToString:ICErrorDomain])
  {
    id v8 = [v6 code];

    if (v8 == (id)-7007)
    {
      uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "UserState");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v31 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ Couldn't fetch subscription status due to privacy restriction - fetching lightweight version instead", buf, 0xCu);
      }

      id v11 = [objc_alloc((Class)ICLightweightMusicSubscriptionStatusRequest) initWithRequestContext:*(void *)(a1 + 40)];
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1000540B0;
      v27[3] = &unk_1001BA860;
      uint64_t v12 = *(void *)(a1 + 64);
      void v27[4] = *(void *)(a1 + 32);
      uint64_t v29 = v12;
      long long v26 = *(_OWORD *)(a1 + 48);
      id v13 = (id)v26;
      long long v28 = v26;
      [v11 performRequestWithResponseHandler:v27];

      goto LABEL_18;
    }
  }
  else
  {
  }
  if (v5)
  {
    __int16 v14 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    id v15 = v14;
    if (v6)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        id v17 = objc_msgSend(v6, "msv_description");
        *(_DWORD *)buf = 138543874;
        uint64_t v31 = v16;
        __int16 v32 = 2114;
        id v33 = v5;
        __int16 v34 = 2114;
        uint64_t v35 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@ Subscription status request completed with response: %{public}@ error=%{public}@", buf, 0x20u);
      }
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v31 = v23;
      __int16 v32 = 2114;
      id v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ Subscription status request completed with response: %{public}@", buf, 0x16u);
    }

    uint64_t v24 = [v5 subscriptionStatus];
    uint64_t v25 = *(void *)(*(void *)(a1 + 72) + 8);
    long long v22 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v24;
  }
  else
  {
    id v18 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v31 = v19;
      __int16 v32 = 2114;
      id v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@ Failed to perform subscription status request. err=%{public}@", buf, 0x16u);
    }

    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
    id v21 = v6;
    long long v22 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v21;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
LABEL_18:
}

void sub_100051E84(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
    id v8 = *(void **)(*(void *)(a1 + 32) + 40);
    uint64_t v9 = [*(id *)(a1 + 40) identity];
    uint64_t v10 = [v9 DSID];
    id v11 = [v8 objectForKey:v10];

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
    if (v11 && ([v11 music], uint64_t v12 = objc_claimAutoreleasedReturnValue(), v12, v12))
    {
      id v13 = os_log_create("com.apple.amp.itunescloudd", "UserState");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        id v15 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        int v21 = 138543874;
        uint64_t v22 = v14;
        __int16 v23 = 2114;
        id v24 = v15;
        __int16 v25 = 2114;
        id v26 = v7;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@ Encountered error fetching user social profile. Keeping cached ICMusicUserProfile: %{public}@. error=%{public}@", (uint8_t *)&v21, 0x20u);
      }

      uint64_t v16 = [v11 music];
      uint64_t v17 = [v16 userProfile];
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = v17;
    }
    else
    {
      uint64_t v16 = os_log_create("com.apple.amp.itunescloudd", "UserState");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        int v21 = 138543618;
        uint64_t v22 = v20;
        __int16 v23 = 2114;
        id v24 = v7;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@ Encountered error fetching user social profile. error=%{public}@", (uint8_t *)&v21, 0x16u);
      }
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000520BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v11 = 138543618;
      uint64_t v12 = v7;
      __int16 v13 = 2114;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Encountered error fetching bag. error=%{public}@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    uint64_t v8 = [a2 stringForBagKey:ICURLBagKeyCountryCode];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000521D0(uint64_t a1)
{
  sub_100053EEC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WLKStoredConfigurationManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3830 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getWLKStoredConfigurationManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDMediaUserStateCenterServer.m", 48, @"Unable to find class %s", "WLKStoredConfigurationManager");

    __break(1u);
  }
}

id sub_100052298()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1001F3840;
  uint64_t v7 = qword_1001F3840;
  if (!qword_1001F3840)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100053E24;
    v3[3] = &unk_1001BE9E8;
    v3[4] = &v4;
    sub_100053E24((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100052364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005237C(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 isActiveUser];
  id v3 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v3);
}

void sub_1000523C4(uint64_t a1)
{
  id v2 = objc_alloc((Class)ICMediaUserState);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000524BC;
  v5[3] = &unk_1001BA9E0;
  id v6 = *(id *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 104);
  long long v8 = *(_OWORD *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 72);
  id v7 = *(id *)(a1 + 40);
  long long v10 = *(_OWORD *)(a1 + 80);
  id v3 = [v2 initWithBlock:v5];
  (*(void (**)(void, id, void, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v3, *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v4);
}

void sub_1000524BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)&long long data = 0;
  *((void *)&data + 1) = &data;
  *(void *)&long long v159 = 0x2050000000;
  uint64_t v4 = (void *)qword_1001F3848;
  *((void *)&v159 + 1) = qword_1001F3848;
  if (!qword_1001F3848)
  {
    *(void *)&long long v154 = _NSConcreteStackBlock;
    *((void *)&v154 + 1) = 3221225472;
    v155.i64[0] = (uint64_t)sub_1000537B0;
    v155.i64[1] = (uint64_t)&unk_1001BE9E8;
    v156[0] = &data;
    sub_1000537B0((uint64_t)&v154);
    uint64_t v4 = *(void **)(*((void *)&data + 1) + 24);
  }
  id v5 = v4;
  _Block_object_dispose(&data, 8);
  if ([v5 isCurrentDeviceValidHomeAccessory])
  {
    *(void *)&long long data = 0;
    *((void *)&data + 1) = &data;
    *(void *)&long long v159 = 0x2050000000;
    id v6 = (void *)qword_1001F3858;
    *((void *)&v159 + 1) = qword_1001F3858;
    if (!qword_1001F3858)
    {
      *(void *)&long long v154 = _NSConcreteStackBlock;
      *((void *)&v154 + 1) = 3221225472;
      v155.i64[0] = (uint64_t)sub_100053878;
      v155.i64[1] = (uint64_t)&unk_1001BE9E8;
      v156[0] = &data;
      sub_100053878((uint64_t)&v154);
      id v6 = *(void **)(*((void *)&data + 1) + 24);
    }
    id v7 = v6;
    _Block_object_dispose(&data, 8);
    long long v8 = [*(id *)(a1 + 32) homeUserIdentifiers];
    uint64_t v9 = [v7 userMonitorWithHomeIdentifiers:v8];

    if (v9) {
      unsigned __int8 v10 = [v9 isPrivateListeningEnabledForCurrentAccessory];
    }
    else {
      unsigned __int8 v10 = 1;
    }
  }
  else
  {
    unsigned __int8 v10 = 0;
  }
  char v11 = [*(id *)(a1 + 32) homeUserIdentifiers];
  uint64_t v12 = objc_msgSend(v11, "msv_map:", &stru_1001BA940);

  id v13 = [*(id *)(a1 + 32) DSID];
  uint32x4_t v155 = 0u;
  memset(v156, 0, sizeof(v156));
  long long v154 = 0u;
  uint64_t v14 = MSVHasherSharedSeed();
  memset(&v156[1], 0, 176);
  *(void *)&long long v154 = 1000;
  *((void *)&v154 + 1) = v14 ^ 0x736F6D6570736575;
  v155.i64[0] = v15 ^ 0x646F72616E646F6DLL;
  v155.i64[1] = v14 ^ 0x6C7967656E657261;
  v156[0] = v15 ^ 0x7465646279746573;
  unint64_t v16 = (unint64_t)[v13 integerValue];
  unint64_t v17 = v16;
  uint64_t v18 = &v154;
  uint64_t v19 = (int *)v156;
  *(void *)&long long data = v16;
  uint64_t v20 = v154;
  if ((uint64_t)v154 <= 3000)
  {
    if ((uint64_t)v154 <= 1999)
    {
      if ((void)v154)
      {
        if ((void)v154 != 1000) {
          goto LABEL_62;
        }
        unint64_t v21 = v156[1];
        if ((v156[1] & 0x400000000000000) != 0)
        {
          if ((v156[1] & 0x300000000000000) != 0)
          {
            v146 = +[NSAssertionHandler currentHandler];
            v144 = +[NSString stringWithUTF8String:"void _MSVHasher_SipHash_1_3_Append64(MSVHasherSipHash_1_3 *, uint64_t)"];
            objc_msgSend(v146, "handleFailureInFunction:file:lineNumber:description:", v144, @"MSVHasher+SipHash.h", 105, @"_MSVHasher_SipHash_1_3_Append64: invalid byte count detected [byteCount & 3]: %lld", v156[1]);

            unint64_t v21 = v156[1];
          }
          uint64_t v40 = v21 & 0xFFFFFFFFFFFFFFLL | (v17 << 32);
          uint64_t v41 = (*((void *)&v154 + 1) + v155.i64[0]) ^ __ROR8__(v155.i64[0], 51);
          uint64_t v42 = v155.i64[1] + (v40 ^ v156[0]);
          uint64_t v43 = __ROR8__(v40 ^ v156[0], 48);
          uint64_t v44 = (v42 ^ v43) + __ROR8__(*((void *)&v154 + 1) + v155.i64[0], 32);
          uint64_t v45 = v44 ^ __ROR8__(v42 ^ v43, 43);
          uint64_t v46 = v42 + v41;
          v155.i64[1] = __ROR8__(v46, 32);
          v156[0] = v45;
          *((void *)&v154 + 1) = v44 ^ v40;
          v155.i64[0] = v46 ^ __ROR8__(v41, 47);
          unint64_t v21 = v21 & 0xFF00000000000000 | HIDWORD(v17);
        }
        else
        {
          if ((v156[1] & 0x7FFFFFFFFFFFFFFLL) != 0)
          {
            v145 = +[NSAssertionHandler currentHandler];
            v143 = +[NSString stringWithUTF8String:"void _MSVHasher_SipHash_1_3_Append64(MSVHasherSipHash_1_3 *, uint64_t)"];
            [v145 handleFailureInFunction:v143, @"MSVHasher+SipHash.h", 101, @"_MSVHasher_SipHash_1_3_Append64: invalid byte count detected [byteCount & 7, tail == 0]: %lld", v156[1] file lineNumber description];

            unint64_t v21 = v156[1];
          }
          uint64_t v22 = (*((void *)&v154 + 1) + v155.i64[0]) ^ __ROR8__(v155.i64[0], 51);
          uint64_t v23 = v155.i64[1] + (v156[0] ^ v17);
          uint64_t v24 = __ROR8__(v156[0] ^ v17, 48);
          uint64_t v25 = (v23 ^ v24) + __ROR8__(*((void *)&v154 + 1) + v155.i64[0], 32);
          uint64_t v26 = v25 ^ __ROR8__(v23 ^ v24, 43);
          uint64_t v27 = v23 + v22;
          v155.i64[1] = __ROR8__(v27, 32);
          v156[0] = v26;
          *((void *)&v154 + 1) = v25 ^ v17;
          v155.i64[0] = v27 ^ __ROR8__(v22, 47);
        }
        v156[1] = v21 + 0x800000000000000;
      }
      else
      {
        uint64_t v31 = +[NSAssertionHandler currentHandler];
        __int16 v32 = +[NSString stringWithUTF8String:"void _MSVHasherAppend64(MSVHasher * _Nonnull, uint64_t)"];
        [v31 handleFailureInFunction:v32 file:@"MSVHasher+Algorithms.h" lineNumber:227 description:@"Cannot append to unknown hasher algorithm"];
      }
      goto LABEL_61;
    }
    if ((void)v154 == 2000)
    {
      id v33 = (__int8 *)v155.u8[3];
      unint64_t v34 = (v155.u8[3] + 8) & 0x1FC;
      __int8 v35 = v155.i8[3] & 3;
      switch(v155.i8[3])
      {
        case 0:
          unint64_t v36 = v16 >> 8;
          v16 >>= 16;
          unsigned __int8 v37 = v17;
          v17 >>= 24;
          break;
        case 1:
          v16 >>= 8;
          unsigned __int8 v37 = v155.i8[0];
          LOBYTE(v36) = v17;
          v17 >>= 16;
          break;
        case 2:
          unint64_t v17 = v16 >> 8;
          unsigned __int8 v37 = v155.i8[0];
          LODWORD(v36) = HIBYTE(v155.u16[0]);
          break;
        case 3:
          unsigned __int8 v37 = v155.i8[0];
          LODWORD(v36) = HIBYTE(v155.u16[0]);
          LOBYTE(v16) = v155.i8[2];
          break;
        default:
LABEL_48:
          LOBYTE(v36) = 0;
          unsigned __int8 v37 = 0;
          LOBYTE(v16) = 0;
          LODWORD(v17) = 0;
          break;
      }
      int v51 = (v16 << 16) | (v17 << 24) | v37 | (v36 << 8);
      HIDWORD(v52) = (461845907 * ((380141568 * v51) | ((-862048943 * v51) >> 17))) ^ DWORD2(v154);
      LODWORD(v52) = HIDWORD(v52);
      int v53 = 5 * (v52 >> 19) - 430675100;
      DWORD2(v154) = v53;
      uint64_t v54 = (__int8 *)((char *)&data - v33 + 4);
      id v33 = (__int8 *)(v34 + (char *)&data - v33);
      if (v34 >= 5)
      {
        do
        {
          int v55 = *(_DWORD *)v54;
          v54 += 4;
          HIDWORD(v56) = (461845907 * ((380141568 * v55) | ((-862048943 * v55) >> 17))) ^ v53;
          LODWORD(v56) = HIDWORD(v56);
          unint64_t v34 = 5 * (v56 >> 19);
          int v53 = v34 - 430675100;
        }
        while (v54 < v33);
        DWORD2(v154) = v34 - 430675100;
      }
      ++v18;
      switch((int)v33)
      {
        case 0:
          break;
        case 1:
          v155.i8[0] = *v33;
          break;
        case 2:
          v155.i16[0] = *(_WORD *)v33;
          break;
        case 3:
          *(_WORD *)uint64_t v18 = *(_WORD *)v33;
          *((unsigned char *)v18 + 2) = v33[2];
          break;
        default:
          goto LABEL_48;
      }
      v155.i8[3] = v35;
      HIDWORD(v154) += 8;
      goto LABEL_61;
    }
    if ((void)v154 != 3000) {
      goto LABEL_62;
    }
    BOOL v28 = (DWORD2(v154) + 8) > 0xF;
    DWORD2(v154) += 8;
    HIDWORD(v154) |= v28;
    uint64_t v29 = (void *)((char *)v156 + LODWORD(v156[2]));
    if (LODWORD(v156[2]) > 7)
    {
      memcpy(v29, &data, (16 - LODWORD(v156[2])));
      HIDWORD(v47) = v155.i32[0] - 2048144777 * LODWORD(v156[0]);
      LODWORD(v47) = HIDWORD(v47);
      __int32 v48 = -1640531535 * (v47 >> 19);
      HIDWORD(v47) = v155.i32[1] - 2048144777 * HIDWORD(v156[0]);
      LODWORD(v47) = HIDWORD(v47);
      v155.i32[0] = v48;
      v155.i32[1] = -1640531535 * (v47 >> 19);
      HIDWORD(v47) = v155.i32[2] - 2048144777 * LODWORD(v156[1]);
      LODWORD(v47) = HIDWORD(v47);
      v155.i32[2] = -1640531535 * (v47 >> 19);
      HIDWORD(v47) = v155.i32[3] - 2048144777 * HIDWORD(v156[1]);
      LODWORD(v47) = HIDWORD(v47);
      unsigned int v49 = 16 - LODWORD(v156[2]);
      v155.i32[3] = -1640531535 * (v47 >> 19);
      LODWORD(v156[2]) = 0;
      if (v49 > 7) {
        goto LABEL_61;
      }
      int v30 = 8 - v49;
      __memcpy_chk();
    }
    else
    {
      unint64_t *v29 = v17;
      int v30 = LODWORD(v156[2]) + 8;
    }
    LODWORD(v156[2]) = v30;
    goto LABEL_61;
  }
  if ((uint64_t)v154 > 4000)
  {
    switch((void)v154)
    {
      case 0xFA1:
        CC_SHA1_Update((CC_SHA1_CTX *)((char *)&v154 + 8), &data, 4u);
        break;
      case 0x10A0:
        CC_SHA256_Update((CC_SHA256_CTX *)((char *)&v154 + 8), &data, 4u);
        break;
      case 0x11A0:
        CC_SHA512_Update((CC_SHA512_CTX *)((char *)&v154 + 8), &data, 4u);
        break;
      default:
        goto LABEL_62;
    }
    goto LABEL_61;
  }
  if ((void)v154 == 3001)
  {
    *((void *)&v154 + 1) += 8;
    uint64_t v38 = (void *)((char *)&v156[2] + LODWORD(v156[6]));
    if (LODWORD(v156[6]) > 0x17)
    {
      memcpy(v38, &data, (32 - LODWORD(v156[6])));
      v155.i64[0] = 0x9E3779B185EBCA87 * __ROR8__(v155.i64[0] - 0x3D4D51C2D82B14B1 * v156[2], 33);
      v155.i64[1] = 0x9E3779B185EBCA87 * __ROR8__(v155.i64[1] - 0x3D4D51C2D82B14B1 * v156[3], 33);
      v156[0] = 0x9E3779B185EBCA87 * __ROR8__(v156[0] - 0x3D4D51C2D82B14B1 * v156[4], 33);
      v156[1] = 0x9E3779B185EBCA87 * __ROR8__(v156[1] - 0x3D4D51C2D82B14B1 * v156[5], 33);
      unsigned int v50 = 32 - LODWORD(v156[6]);
      LODWORD(v156[6]) = 0;
      if (v50 > 7) {
        goto LABEL_61;
      }
      int v39 = 8 - v50;
      __memcpy_chk();
    }
    else
    {
      *uint64_t v38 = v17;
      int v39 = LODWORD(v156[6]) + 8;
    }
    LODWORD(v156[6]) = v39;
    goto LABEL_61;
  }
  if ((void)v154 != 4000) {
    goto LABEL_62;
  }
  CC_MD5_Update((CC_MD5_CTX *)((char *)&v154 + 8), &data, 4u);
LABEL_61:
  uint64_t v20 = v154;
LABEL_62:
  memset(&v157[8], 0, 64);
  *(void *)v157 = v20;
  if (v20 > 3000)
  {
    if (v20 <= 4000)
    {
      if (v20 == 3001)
      {
        *(void *)&v157[8] = sub_10004F8F0((void *)&v154 + 1);
      }
      else if (v20 == 4000)
      {
        CC_MD5_Final(&v157[8], (CC_MD5_CTX *)((char *)&v154 + 8));
      }
    }
    else
    {
      switch(v20)
      {
        case 4001:
          CC_SHA1_Final(&v157[8], (CC_SHA1_CTX *)((char *)&v154 + 8));
          break;
        case 4256:
          CC_SHA256_Final(&v157[8], (CC_SHA256_CTX *)((char *)&v154 + 8));
          break;
        case 4512:
          CC_SHA512_Final(&v157[8], (CC_SHA512_CTX *)((char *)&v154 + 8));
          break;
      }
    }
    goto LABEL_99;
  }
  if (v20 > 1999)
  {
    if (v20 != 2000)
    {
      if (v20 != 3000) {
        goto LABEL_99;
      }
      if (HIDWORD(v154)) {
        __int32 v87 = vaddvq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(v155, (uint32x4_t)xmmword_100152460), (int8x16_t)vshlq_u32(v155, (uint32x4_t)xmmword_100152450)));
      }
      else {
        __int32 v87 = v155.i32[2] + 374761393;
      }
      unsigned __int32 v91 = DWORD2(v154) + v87;
      unint64_t v92 = v156[2] & 0xF;
      if (v92 >= 4)
      {
        do
        {
          int v93 = *v19++;
          HIDWORD(v94) = v91 - 1028477379 * v93;
          LODWORD(v94) = HIDWORD(v94);
          unsigned __int32 v91 = 668265263 * (v94 >> 15);
          v92 -= 4;
        }
        while (v92 > 3);
      }
      for (; v92; --v92)
      {
        int v95 = *(unsigned __int8 *)v19;
        uint64_t v19 = (int *)((char *)v19 + 1);
        HIDWORD(v96) = v91 + 374761393 * v95;
        LODWORD(v96) = HIDWORD(v96);
        unsigned __int32 v91 = -1640531535 * (v96 >> 21);
      }
      unsigned int v97 = (-2048144777 * (v91 ^ (v91 >> 15))) ^ ((-2048144777 * (v91 ^ (v91 >> 15))) >> 13);
      unsigned int v98 = (-1028477379 * v97) ^ ((-1028477379 * v97) >> 16);
      goto LABEL_98;
    }
    switch(v155.u8[3])
    {
      case 1u:
        int v90 = v155.u8[0];
        break;
      case 2u:
        int v90 = v155.u16[0];
        break;
      case 3u:
        int v90 = v155.u16[0] | (v155.u8[2] << 16);
        break;
      default:
        unsigned int v99 = DWORD2(v154);
        goto LABEL_97;
    }
    unsigned int v99 = (461845907 * ((380141568 * v90) | ((-862048943 * v90) >> 17))) ^ DWORD2(v154);
LABEL_97:
    unsigned int v100 = -2048144789 * (v99 ^ HIDWORD(v154) ^ ((v99 ^ HIDWORD(v154)) >> 16));
    unsigned int v98 = (-1028477387 * (v100 ^ (v100 >> 13))) ^ ((-1028477387 * (v100 ^ (v100 >> 13))) >> 16);
    DWORD2(v154) = v98;
LABEL_98:
    *(_DWORD *)&v157[8] = v98;
    goto LABEL_99;
  }
  if (v20)
  {
    if (v20 == 1000)
    {
      uint64_t v57 = (*((void *)&v154 + 1) + v155.i64[0]) ^ __ROR8__(v155.i64[0], 51);
      uint64_t v58 = v155.i64[1] + (v156[0] ^ v156[1]);
      uint64_t v59 = __ROR8__(v156[0] ^ v156[1], 48);
      uint64_t v60 = (v58 ^ v59) + __ROR8__(*((void *)&v154 + 1) + v155.i64[0], 32);
      uint64_t v61 = v60 ^ __ROR8__(v58 ^ v59, 43);
      uint64_t v62 = v58 + v57;
      uint64_t v63 = v62 ^ __ROR8__(v57, 47);
      uint64_t v64 = (v60 ^ v156[1]) + v63;
      uint64_t v65 = v64 ^ __ROR8__(v63, 51);
      uint64_t v66 = (__ROR8__(v62, 32) ^ 0xFFLL) + v61;
      uint64_t v67 = __ROR8__(v61, 48);
      uint64_t v68 = __ROR8__(v64, 32) + (v66 ^ v67);
      uint64_t v69 = v68 ^ __ROR8__(v66 ^ v67, 43);
      uint64_t v70 = v65 + v66;
      uint64_t v71 = v70 ^ __ROR8__(v65, 47);
      uint64_t v72 = v71 + v68;
      uint64_t v73 = v72 ^ __ROR8__(v71, 51);
      uint64_t v74 = __ROR8__(v70, 32) + v69;
      uint64_t v75 = __ROR8__(v69, 48);
      uint64_t v76 = __ROR8__(v72, 32) + (v74 ^ v75);
      uint64_t v77 = v76 ^ __ROR8__(v74 ^ v75, 43);
      uint64_t v78 = v73 + v74;
      uint64_t v79 = v78 ^ __ROR8__(v73, 47);
      uint64_t v80 = v79 + v76;
      uint64_t v81 = v80 ^ __ROR8__(v79, 51);
      uint64_t v82 = __ROR8__(v78, 32) + v77;
      uint64_t v83 = __ROR8__(v77, 48);
      uint64_t v84 = __ROR8__(v80, 32) + (v82 ^ v83);
      uint64_t v85 = v84 ^ __ROR8__(v82 ^ v83, 43);
      uint64_t v86 = v81 + v82;
      *((void *)&v154 + 1) = v84;
      v155.i64[0] = v86 ^ __ROR8__(v81, 47);
      v155.i64[1] = __ROR8__(v86, 32);
      v156[0] = v85;
      *(void *)&v157[8] = v155.i64[0] ^ v84 ^ v155.i64[1] ^ v85;
    }
  }
  else
  {
    unsigned __int16 v88 = +[NSAssertionHandler currentHandler];
    id v89 = +[NSString stringWithUTF8String:"MSVHash _MSVHasherFinalize(MSVHasher * _Nonnull)"];
    [v88 handleFailureInFunction:v89 file:@"MSVHasher+Algorithms.h" lineNumber:156 description:@"Cannot finalize unknown hasher algorithm"];
  }
LABEL_99:
  long long data = *(_OWORD *)v157;
  long long v159 = *(_OWORD *)&v157[16];
  long long v160 = *(_OWORD *)&v157[32];
  long long v161 = *(_OWORD *)&v157[48];
  uint64_t v162 = *(void *)&v157[64];
  if (*(uint64_t *)v157 <= 3999)
  {
    if (*(uint64_t *)v157 <= 2999)
    {
      if (*(void *)v157 != 1000)
      {
        if (*(void *)v157 != 2000) {
          goto LABEL_125;
        }
        goto LABEL_118;
      }
LABEL_112:
      id v107 = (id)*((void *)&data + 1);
      goto LABEL_126;
    }
    if (*(void *)v157 == 3000)
    {
LABEL_118:
      id v107 = (id)DWORD2(data);
      goto LABEL_126;
    }
    if (*(void *)v157 == 3001) {
      goto LABEL_112;
    }
LABEL_125:
    id v126 = +[NSAssertionHandler currentHandler];
    id v127 = +[NSString stringWithUTF8String:"NSUInteger _MSVHashGetHash(MSVHash)"];
    [v126 handleFailureInFunction:v127 file:@"MSVHasher+Algorithms.h" lineNumber:301 description:@"Cannot obtain hash from unknown hasher algorithm"];

    id v107 = 0;
    goto LABEL_126;
  }
  if (*(uint64_t *)v157 > 4255)
  {
    if (*(void *)v157 == 4256)
    {
      id v120 = (char *)malloc_type_calloc(0x40uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v121 = 0;
      id v122 = (unsigned __int8 *)&data + 8;
      do
      {
        unsigned int v123 = *v122++;
        id v124 = &v120[v121];
        *id v124 = a0123456789abcd[(unint64_t)v123 >> 4];
        v124[1] = a0123456789abcd[v123 & 0xF];
        v121 += 2;
      }
      while (v121 != 64);
      id v125 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v120 length:64 encoding:4 freeWhenDone:1];
      id v107 = [v125 hash];
    }
    else
    {
      if (*(void *)v157 != 4512) {
        goto LABEL_125;
      }
      uint64_t v108 = (char *)malloc_type_calloc(0x80uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v109 = 0;
      id v110 = (unsigned __int8 *)&data + 8;
      do
      {
        unsigned int v111 = *v110++;
        id v112 = &v108[v109];
        *id v112 = a0123456789abcd[(unint64_t)v111 >> 4];
        v112[1] = a0123456789abcd[v111 & 0xF];
        v109 += 2;
      }
      while (v109 != 128);
      id v113 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v108 length:128 encoding:4 freeWhenDone:1];
      id v107 = [v113 hash];
    }
  }
  else if (*(void *)v157 == 4000)
  {
    uint64_t v114 = (char *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
    uint64_t v115 = 0;
    id v116 = (unsigned __int8 *)&data + 8;
    do
    {
      unsigned int v117 = *v116++;
      v118 = &v114[v115];
      char *v118 = a0123456789abcd[(unint64_t)v117 >> 4];
      v118[1] = a0123456789abcd[v117 & 0xF];
      v115 += 2;
    }
    while (v115 != 32);
    id v119 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v114 length:32 encoding:4 freeWhenDone:1];
    id v107 = [v119 hash];
  }
  else
  {
    if (*(void *)v157 != 4001) {
      goto LABEL_125;
    }
    v101 = (char *)malloc_type_calloc(0x28uLL, 1uLL, 0x100004077774924uLL);
    uint64_t v102 = 0;
    id v103 = (unsigned __int8 *)&data + 8;
    do
    {
      unsigned int v104 = *v103++;
      v105 = &v101[v102];
      char *v105 = a0123456789abcd[(unint64_t)v104 >> 4];
      v105[1] = a0123456789abcd[v104 & 0xF];
      v102 += 2;
    }
    while (v102 != 40);
    id v106 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v101 length:40 encoding:4 freeWhenDone:1];
    id v107 = [v106 hash];
  }
LABEL_126:
  id v128 = +[NSNumber numberWithUnsignedInteger:v107];
  v129 = [v128 stringValue];

  [v3 setIdentifier:v129];
  objc_msgSend(v3, "setIsActive:", objc_msgSend(*(id *)(a1 + 32), "isActive"));
  uint64_t v130 = [*(id *)(a1 + 32) DSID];
  [v3 setDsid:v130];

  id v131 = [*(id *)(a1 + 32) alternateDSID];
  [v3 setAlternateDSID:v131];

  v132 = [*(id *)(a1 + 32) iCloudPersonID];
  [v3 setICloudPersonID:v132];

  [v3 setHomeUserIDs:v12];
  unsigned __int16 v133 = [*(id *)(a1 + 32) storefrontIdentifier];
  [v3 setStorefrontIdentifier:v133];

  [v3 setCountryCode:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  int v134 = [*(id *)(a1 + 32) firstName];
  [v3 setFirstName:v134];

  v135 = [*(id *)(a1 + 32) lastName];
  [v3 setLastName:v135];

  v136 = [*(id *)(a1 + 32) username];
  [v3 setUsername:v136];

  [v3 setAgeVerificationRequired:*(unsigned __int8 *)(a1 + 88)];
  id v137 = objc_alloc((Class)ICMusicUserState);
  v148[0] = _NSConcreteStackBlock;
  v148[1] = 3221225472;
  v148[2] = sub_100053940;
  v148[3] = &unk_1001BA990;
  id v149 = *(id *)(a1 + 32);
  long long v151 = *(_OWORD *)(a1 + 56);
  unsigned __int8 v153 = v10;
  id v138 = *(id *)(a1 + 40);
  uint64_t v139 = *(void *)(a1 + 72);
  id v150 = v138;
  uint64_t v152 = v139;
  id v140 = [v137 initWithBlock:v148];
  id v141 = objc_alloc((Class)ICTVUserState);
  v147[0] = _NSConcreteStackBlock;
  v147[1] = 3221225472;
  v147[2] = sub_100053B34;
  v147[3] = &unk_1001BA9B8;
  v147[4] = *(void *)(a1 + 80);
  id v142 = [v141 initWithBlock:v147];
  [v3 setMusic:v140];
  [v3 setTv:v142];
}

void sub_10005376C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1000537B0(uint64_t a1)
{
  sub_100053C60();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPHomeMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3848 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPHomeMonitorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDMediaUserStateCenterServer.m", 54, @"Unable to find class %s", "MPHomeMonitor");

    __break(1u);
  }
}

void sub_100053878(uint64_t a1)
{
  sub_100053C60();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPHomeUserMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3858 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPHomeUserMonitorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDMediaUserStateCenterServer.m", 55, @"Unable to find class %s", "MPHomeUserMonitor");

    __break(1u);
  }
}

void sub_100053940(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) carrierBundleDeviceIdentifier];
  [v3 setCarrierBundleDeviceID:v4];

  [v3 setSubscriptionStatus:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  [v3 setLightweightSubscriptionStatus:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  id v5 = [*(id *)(a1 + 32) cloudLibraryStateReason];
  id v6 = [v5 objectForKey:@"CloudLibraryStateReasonKey"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [v6 integerValue];
    if ((unint64_t)v7 >= 7) {
      uint64_t v8 = 2 * ((unint64_t)v7 > 0xFFFFFFFFFFFFFFF7);
    }
    else {
      uint64_t v8 = 1;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  [v3 setCloudLibrarySyncStatus:v8];
  [v3 setUsesListeningHistory:*(unsigned char *)(a1 + 72) == 0];
  uint64_t v9 = *(void **)(a1 + 40);
  unsigned __int8 v10 = [*(id *)(a1 + 32) DSID];
  char v11 = [v9 objectForKeyedSubscript:v10];
  [v3 setLibraryAuthTokenStatus:v11];

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
    objc_msgSend(v3, "setUserProfile:");
  }
  id v12 = objc_alloc((Class)ICMusicUserStateCookies);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100053B48;
  v14[3] = &unk_1001BA968;
  id v15 = *(id *)(a1 + 32);
  id v13 = [v12 initWithBlock:v14];
  [v3 setCookies:v13];
}

id sub_100053B34(uint64_t a1, void *a2)
{
  return _[a2 setActiveWatchKitUser:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_100053B48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = +[ICHTTPCookieStore sharedCookieStore];
  uint64_t v4 = [*(id *)(a1 + 32) DSID];
  id v5 = [v10 getCookieWithName:@"itfe" userIdentifier:v4];
  id v6 = [v5 value];
  [v3 setItfe:v6];

  id v7 = [*(id *)(a1 + 32) DSID];
  uint64_t v8 = [v10 getCookieWithName:@"xpAb" userIdentifier:v7];
  uint64_t v9 = [v8 value];
  [v3 setXpab:v9];
}

id sub_100053C58(id a1, NSUUID *a2)
{
  return [(NSUUID *)a2 UUIDString];
}

void sub_100053C60()
{
  v3[0] = 0;
  if (!qword_1001F3850)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_100053DB0;
    v3[4] = &unk_1001BEA20;
    void v3[5] = v3;
    long long v4 = off_1001BACE0;
    uint64_t v5 = 0;
    qword_1001F3850 = _sl_dlopen();
  }
  if (!qword_1001F3850)
  {
    uint64_t v1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICDMediaUserStateCenterServer.m", 53, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_100053DB0()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3850 = result;
  return result;
}

void sub_100053E24(uint64_t a1)
{
  sub_100053EEC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WLKConfigurationManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3840 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getWLKConfigurationManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDMediaUserStateCenterServer.m", 50, @"Unable to find class %s", "WLKConfigurationManager");

    __break(1u);
  }
}

void sub_100053EEC()
{
  v3[0] = 0;
  if (!qword_1001F3838)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10005403C;
    v3[4] = &unk_1001BEA20;
    void v3[5] = v3;
    long long v4 = off_1001BACC8;
    uint64_t v5 = 0;
    qword_1001F3838 = _sl_dlopen();
  }
  if (!qword_1001F3838)
  {
    uint64_t v1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *WatchListKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICDMediaUserStateCenterServer.m", 47, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10005403C()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3838 = result;
  return result;
}

void sub_1000540B0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Failed to perform lightweight subscription status request. err=%{public}@", (uint8_t *)&v12, 0x16u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
  }
  else
  {
    uint64_t v9 = [a2 lightweightSubscriptionStatus];
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    char v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

BOOL sub_100054490(uint64_t a1, void *a2)
{
  id v3 = [a2 dsid];

  if (!v3) {
    +[MSVAutoBugCapture snapshotWithDomain:MSVAutoBugCaptureDomainiTunesCloud type:@"Bug" subType:@"ICMediaUserStateBug" context:@"UserState with nil dsid" triggerThresholdValues:0 events:*(void *)(a1 + 32) completion:0];
  }
  return v3 != 0;
}

void sub_100054514(id a1)
{
  id v1 = +[NSDistributedNotificationCenter defaultCenter];
  [v1 postNotificationName:ICMediaUserStateCenterServerStateUpdatedNotification object:0 userInfo:0];
}

void sub_100054794(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2114;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch accounts forcing refresh after user updated notification. err=%{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _notifyServerStateUpdatedIfNeeded:a2];
  }
}

void sub_100054C50(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _notifyServerStateUpdatedIfNeeded:a2];
  id v3 = [*(id *)(a1 + 32) _sanitizedUserStatesForRemoteClientConnection:*(void *)(a1 + 40)];
  long long v4 = os_log_create("com.apple.amp.itunescloudd", "UserState_Oversize");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138543874;
    uint64_t v8 = v5;
    __int16 v9 = 2114;
    uint64_t v10 = v6;
    __int16 v11 = 2114;
    int v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshSocialProfilesWithReply: Returning updated user states to client connection %{public}@: %{public}@", (uint8_t *)&v7, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100054D58(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v7;
      __int16 v15 = 2114;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ refreshSocialProfilesWithReply: Failed to get user states. err=%{public}@", (uint8_t *)&v13, 0x16u);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    __int16 v9 = objc_msgSend(v5, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, void *, void *))(v8 + 16))(v8, &__NSArray0__struct, v9);
  }
  else
  {
    [*(id *)(a1 + 32) _notifyServerStateUpdatedIfNeeded:a2];
    __int16 v9 = [*(id *)(a1 + 32) _sanitizedUserStatesForRemoteClientConnection:*(void *)(a1 + 40)];
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "UserState_Oversize");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = *(void **)(a1 + 40);
      int v13 = 138543874;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v12;
      __int16 v17 = 2114;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshSocialProfilesWithReply: Returning updated user states to client connection %{public}@: %{public}@", (uint8_t *)&v13, 0x20u);
    }

    (*(void (**)(void, void *, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v9, 0);
  }
}

void sub_100055150(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v7;
      __int16 v15 = 2114;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Failed to get user states. err=%{public}@", (uint8_t *)&v13, 0x16u);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    __int16 v9 = objc_msgSend(v5, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    [*(id *)(a1 + 32) _notifyServerStateUpdatedIfNeeded:a2];
    __int16 v9 = [*(id *)(a1 + 32) _sanitizedUserStatesForRemoteClientConnection:*(void *)(a1 + 40)];
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = *(void **)(a1 + 40);
      int v13 = 138543874;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v12;
      __int16 v17 = 2114;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ Returning updated user states to client connection %{public}@: %{public}@", (uint8_t *)&v13, 0x20u);
    }

    (*(void (**)(void, void *, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v9, 0);
  }
}

id sub_10005547C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000554F0;
  v3[3] = &unk_1001BE1C0;
  v3[4] = v1;
  return [v1 _fetchAccountsWithForceRefresh:0 completion:v3];
}

void sub_1000554F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2114;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Failed to get user states lazily. err=%{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _notifyServerStateUpdatedIfNeeded:a2];
  }
}

void sub_100055FF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
  int v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      __int16 v10 = objc_msgSend(v6, "msv_description");
      int v16 = 138543874;
      uint64_t v17 = v9;
      __int16 v18 = 2114;
      id v19 = v5;
      __int16 v20 = 2114;
      unint64_t v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ received response: %{public}@ error=%{public}@", (uint8_t *)&v16, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v16 = 138543618;
      uint64_t v17 = v11;
      __int16 v18 = 2114;
      id v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ received response: %{public}@", (uint8_t *)&v16, 0x16u);
    }

    if ([*(id *)(a1 + 32) isCancelled])
    {
      int v12 = os_log_create("com.apple.amp.itunescloudd", "Default");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v16 = 138543362;
        uint64_t v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ Import was cancelled - returning", (uint8_t *)&v16, 0xCu);
      }

      uint64_t v14 = *(void *)(a1 + 40);
      __int16 v15 = +[NSError errorWithDomain:@"JaliscoImporterErrorDomain" code:-2 userInfo:0];
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
    }
    else
    {
      [*(id *)(a1 + 32) _processItemsPageResponse:v5 withCompletion:*(void *)(a1 + 40)];
    }
  }
}

void sub_100056544(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = os_log_create("com.apple.amp.itunescloudd", "Default");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v6 = objc_msgSend(v3, "msv_description");
      int v8 = 138543362;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Update complete error=%{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Update complete", (uint8_t *)&v8, 2u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_100056C98(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v26 = a4;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100057148;
  v37[3] = &unk_1001BAD28;
  id v22 = a5;
  id v38 = v22;
  uint64_t v11 = objc_retainBlock(v37);
  uint64_t v23 = v10;
  int v12 = [*(id *)(a1 + 32) objectForKey:v10];
  if (_NSIsNSDictionary())
  {
    uint64_t v41 = v12;
    uint64_t v13 = +[NSArray arrayWithObjects:&v41 count:1];

    int v12 = (void *)v13;
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = v12;
  id v27 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
  if (v27)
  {
    uint64_t v25 = *(void *)v34;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v34 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = v14;
        __int16 v15 = [*(id *)(*((void *)&v33 + 1) + 8 * v14) objectForKey:v26];
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        id v16 = [v15 countByEnumeratingWithState:&v29 objects:v39 count:16];
        if (v16)
        {
          id v17 = v16;
          uint64_t v18 = *(void *)v30;
          do
          {
            for (i = 0; i != v17; i = (char *)i + 1)
            {
              if (*(void *)v30 != v18) {
                objc_enumerationMutation(v15);
              }
              __int16 v20 = *(void **)(*((void *)&v29 + 1) + 8 * i);
              unint64_t v21 = [v20 objectForKey:@"key"];
              if (_NSIsNSString()
                && [v21 length]
                && ((unsigned int (*)(void *, void *, void *))v11[2])(v11, v20, v21))
              {
                [v9 addObject:v21];
              }
            }
            id v17 = [v15 countByEnumeratingWithState:&v29 objects:v39 count:16];
          }
          while (v17);
        }

        uint64_t v14 = v28 + 1;
      }
      while ((id)(v28 + 1) != v27);
      id v27 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
    }
    while (v27);
  }
}

uint64_t sub_100056F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t sub_100056FB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "containsObject:") ^ 1;
}

uint64_t sub_100056FE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "containsObject:") ^ 1;
}

BOOL sub_100057010(id a1, NSDictionary *a2, NSString *a3)
{
  long long v4 = a2;
  id v5 = a3;
  id v6 = [(NSDictionary *)v4 objectForKey:@"reason"];
  unsigned int v7 = [v6 isEqual:@"oversize"];

  if (v7)
  {
    int v8 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      uint64_t v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ERROR: server rejected %@ because the payload was too big.", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = [(NSDictionary *)v4 objectForKey:@"reason"];
  unsigned __int8 v10 = [v9 isEqual:@"conflicted"];

  return v10;
}

BOOL sub_100057140(id a1, NSDictionary *a2, NSString *a3)
{
  return 1;
}

uint64_t sub_100057148(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 16))();
  }
  else {
    return 1;
  }
}

void sub_10005798C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [v5 responseData];
  if ([v7 length] && objc_msgSend(v5, "responseCode") == (id)200)
  {
    int v8 = +[NSInputStream inputStreamWithData:v7];
    id v9 = [objc_alloc((Class)DKDAAPParser) initWithStream:v8];
    unsigned __int8 v10 = objc_alloc_init(PublishPlaylistResponseParserDelegate);
    [v9 setDelegate:v10];
    [v9 parse];
    uint64_t v11 = [(PublishPlaylistResponseParserDelegate *)v10 playlistGlobalID];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 96);
    *(void *)(v12 + 96) = v11;

    uint64_t v14 = [(PublishPlaylistResponseParserDelegate *)v10 playlistShareURL];
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 104);
    *(void *)(v15 + 104) = v14;
  }
  id v17 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(v18 + 96);
    uint64_t v20 = *(void *)(v18 + 104);
    int v24 = 138543618;
    id v25 = v19;
    __int16 v26 = 2114;
    uint64_t v27 = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received playlist globalID: %{public}@ shareURL: %{public}@", (uint8_t *)&v24, 0x16u);
  }

  uint64_t v21 = (uint64_t)[v5 responseCode];
  if (v21 <= 399)
  {
    if (v21 == 200 || v21 == 204)
    {
      if (*(void *)(*(void *)(a1 + 32) + 96)) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = 2;
      }
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v22 = 2;
    goto LABEL_15;
  }
  uint64_t v22 = 3;
  if (v21 != 400 && v21 != 404) {
    goto LABEL_14;
  }
LABEL_15:
  if (v6)
  {
    uint64_t v23 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v24 = 138543362;
      id v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "SagaPublishPlaylistOperation failed with error: %{public}@", (uint8_t *)&v24, 0xCu);
    }
  }
  [*(id *)(a1 + 32) setStatus:v22];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000586F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 urlForBagKey:*(void *)(*(void *)(a1 + 32) + 24)];
  unsigned int v7 = (void *)v6;
  if (a2 && v6)
  {
    int v8 = [*(id *)(a1 + 32) _baseRequestWithURL:v6];
    id v9 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v8 requestContext:*(void *)(a1 + 40)];
    unsigned __int8 v10 = +[ICURLSessionManager defaultSession];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100058900;
    v15[3] = &unk_1001BEA98;
    void v15[4] = *(void *)(a1 + 32);
    [v10 enqueueDataRequest:v9 withCompletionHandler:v15];

LABEL_9:
    goto LABEL_10;
  }
  uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(v12 + 24);
    *(_DWORD *)buf = 138543874;
    uint64_t v17 = v12;
    __int16 v18 = 2114;
    uint64_t v19 = v13;
    __int16 v20 = 2114;
    uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch URL from bag using key %{public}@. error=%{public}@", buf, 0x20u);
  }

  uint64_t v14 = *(void **)(a1 + 32);
  if (!v5)
  {
    int v8 = +[NSError errorWithDomain:ICErrorDomain code:-7200 userInfo:0];
    [v14 _finishWithError:v8];
    goto LABEL_9;
  }
  [v14 _finishWithError:v5];
LABEL_10:
}

void sub_100058900(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  int v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      unsigned __int8 v10 = [v5 parsedBodyDictionary];
      uint64_t v11 = objc_msgSend(v6, "msv_description");
      int v14 = 138544130;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      id v17 = v5;
      __int16 v18 = 2114;
      uint64_t v19 = v10;
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ request completed with response: %{public}@ body: %{public}@ error=%{public}@", (uint8_t *)&v14, 0x2Au);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = [v5 parsedBodyDictionary];
    int v14 = 138543874;
    uint64_t v15 = v12;
    __int16 v16 = 2114;
    id v17 = v5;
    __int16 v18 = 2114;
    uint64_t v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ request completed with response: %{public}@ body: %{public}@", (uint8_t *)&v14, 0x20u);
  }
  [*(id *)(a1 + 32) _finishWithResponse:v5 error:v6];
}

void sub_100058CF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [v3 lastSyncedDomainVersion];

  if (!v4)
  {
    id v5 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      unsigned int v7 = [v3 accountDSID];
      int v10 = 138543619;
      uint64_t v11 = v6;
      __int16 v12 = 2113;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ _handleUserIdentityStoreDidChangeNotification. Performing initial sync for user %{private}@", (uint8_t *)&v10, 0x16u);
    }
    int v8 = *(void **)(a1 + 32);
    uint64_t v9 = [v3 libraryUID];
    [v8 _performNotificationSyncForLibraryWithUID:v9];
  }
}

void sub_1000594E4(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Connection interrupted from pid: %i", (uint8_t *)&v5, 0x12u);
  }
}

void sub_1000595A8(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Connection invalidated from pid: %i", (uint8_t *)&v5, 0x12u);
  }
}

void sub_1000599B0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  __int16 v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = objc_msgSend(v5, "msv_description");
      int v11 = 138544130;
      uint64_t v12 = v8;
      __int16 v13 = 1024;
      int v14 = a2;
      __int16 v15 = 2114;
      id v16 = v5;
      __int16 v17 = 2114;
      __int16 v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@ pushPlaybackPositionEntity:completionBlock:] Finished. success=%{BOOL}u error=%{public}@ error=%{public}@", (uint8_t *)&v11, 0x26u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138543874;
    uint64_t v12 = v10;
    __int16 v13 = 1024;
    int v14 = a2;
    __int16 v15 = 2114;
    id v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@ pushPlaybackPositionEntity:completionBlock:] Finished. success=%{BOOL}u error=%{public}@", (uint8_t *)&v11, 0x1Cu);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100059CF8(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  uint64_t v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = objc_msgSend(v7, "msv_description");
      int v14 = 138544386;
      uint64_t v15 = v11;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 2114;
      id v19 = v7;
      __int16 v20 = 2114;
      id v21 = v8;
      __int16 v22 = 2114;
      uint64_t v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%{public}@ pullPlaybackPositionEntity:completionBlock:] Finished. success=%{BOOL}u error=%{public}@ cloudEntity=%{public}@ error=%{public}@", (uint8_t *)&v14, 0x30u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 138544130;
    uint64_t v15 = v13;
    __int16 v16 = 1024;
    int v17 = a2;
    __int16 v18 = 2114;
    id v19 = 0;
    __int16 v20 = 2114;
    id v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@ pullPlaybackPositionEntity:completionBlock:] Finished. success=%{BOOL}u error=%{public}@ cloudEntity=%{public}@", (uint8_t *)&v14, 0x26u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10005A1DC(void *a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  uint64_t v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = a1[4];
      uint64_t v12 = a1[5];
      id v13 = [v8 count];
      int v14 = objc_msgSend(v7, "msv_description");
      int v17 = 138544386;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2048;
      id v22 = v13;
      __int16 v23 = 1024;
      int v24 = a2;
      __int16 v25 = 2114;
      __int16 v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%{public}@ getLocalPlaybackPositionForEntityIdentifiers:] Completed request for library (%{public}@) with %llu entities. success=%{BOOL}u error=%{public}@", (uint8_t *)&v17, 0x30u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[5];
    int v17 = 138544130;
    uint64_t v18 = v15;
    __int16 v19 = 2114;
    uint64_t v20 = v16;
    __int16 v21 = 2048;
    id v22 = [v8 count];
    __int16 v23 = 1024;
    int v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@ getLocalPlaybackPositionForEntityIdentifiers:] Completed request for library (%{public}@) with %llu entities. success=%{BOOL}u", (uint8_t *)&v17, 0x26u);
  }

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10005A584(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%{public}@ persistPlaybackPositionEntity:isCheckpoint:completionBlock:] Finished. success=%{BOOL}u", (uint8_t *)&v8, 0x12u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10005AD24(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = os_log_create("com.apple.amp.itunescloudd", "SDK");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v19 = 138543362;
      id v20 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to badge application. err=%{public}@", (uint8_t *)&v19, 0xCu);
    }
  }
  id v5 = [*(id *)(a1 + 32) metrics];

  if (v5)
  {
    id v6 = [objc_alloc((Class)AMSEngagement) initWithBag:*(void *)(a1 + 40)];
    uint64_t v7 = [*(id *)(a1 + 32) metrics];
    id v8 = [v6 enqueueData:v7];
  }
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Sucessfully badged application", (uint8_t *)&v19, 2u);
  }

  if ([*(id *)(a1 + 32) enabled])
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      int v11 = *(void **)(a1 + 56);
      if (v11)
      {
        uint64_t v12 = [*(id *)(a1 + 32) badgeIdentifier];
        [v11 storeBadgeActionMetricsEvent:v10 identifier:v12];

        id v13 = os_log_create("com.apple.amp.itunescloudd", "Default");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          int v14 = [*(id *)(a1 + 32) badgeIdentifier];
          int v19 = 138543362;
          id v20 = v14;
          uint64_t v15 = "Stored %{public}@ badging action metrics event";
          uint64_t v16 = v13;
          os_log_type_t v17 = OS_LOG_TYPE_DEBUG;
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v19, 0xCu);
        }
      }
      else
      {
        id v13 = os_log_create("com.apple.amp.itunescloudd", "Default");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v14 = [*(id *)(a1 + 32) badgeIdentifier];
          int v19 = 138543362;
          id v20 = v14;
          uint64_t v15 = "Dropping %{public}@ badging action metrics event; no badge controller";
          uint64_t v16 = v13;
          os_log_type_t v17 = OS_LOG_TYPE_INFO;
          goto LABEL_18;
        }
      }
LABEL_19:
    }
  }
  else
  {
    uint64_t v18 = *(void **)(a1 + 56);
    if (v18)
    {
      id v13 = [*(id *)(a1 + 32) badgeIdentifier];
      [v18 clearBadgeActionMetricsEventForIdentifier:v13];
      goto LABEL_19;
    }
  }
}

uint64_t sub_10005B100(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005BED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_10005BEF0(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 48) newWithPersistentID:a2 inLibrary:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

uint64_t sub_10005BF4C(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a4 = 1;
  return result;
}

void sub_10005C504(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 48) newWithPersistentID:a2 inLibrary:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_10005C560(uint64_t a1, uint64_t a2, id *a3)
{
  if ([*a3 integerValue] != (id)-1)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = +[NSNumber numberWithLongLong:a2];
    [v5 addObject:v6];
  }
}

id sub_10005C5E8(void *a1, void *a2)
{
  uint64_t v3 = ML3EntityPropertyKeepLocal;
  uint64_t v12 = ML3EntityPropertyKeepLocal;
  id v4 = a2;
  id v5 = +[NSArray arrayWithObjects:&v12 count:1];
  unsigned int v6 = +[ML3Track setValues:&off_1001CCBE0 forProperties:v5 forEntityPersistentIDs:a1[4] inLibrary:a1[5] usingConnection:v4];

  if (!v6) {
    return 0;
  }
  uint64_t v7 = (void *)a1[6];
  v11[0] = v3;
  v11[1] = ML3EntityPropertyKeepLocalStatus;
  id v8 = +[NSArray arrayWithObjects:v11 count:2];
  id v9 = [v7 setValues:&off_1001CCBF8 forProperties:v8];

  return v9;
}

void sub_10005CBBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5)
  {
    id v8 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = objc_opt_class();
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 88);
      id v11 = v9;
      int v18 = 138543874;
      int v19 = v9;
      __int16 v20 = 2048;
      id v21 = [v10 count];
      __int16 v22 = 2114;
      id v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Loading artwork info for %lu cloud IDs failed with error=%{public}@", (uint8_t *)&v18, 0x20u);
    }
  }
  else
  {
    id v8 = [v6 artworkInfoDictionaries];
    if ([v8 count])
    {
      id v12 = [v8 copy];
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = *(void **)(v13 + 104);
      *(void *)(v13 + 104) = v12;
    }
  }

  uint64_t v15 = *(void **)(a1 + 32);
  uint64_t v16 = (uint64_t)[v7 responseCode];

  if (v16 > 399)
  {
    if (v16 != 404 && v16 != 400) {
      goto LABEL_13;
    }
    uint64_t v17 = 3;
  }
  else
  {
    uint64_t v17 = 1;
    if (v16 != 200 && v16 != 204) {
LABEL_13:
    }
      uint64_t v17 = 2;
  }
  [v15 setStatus:v17];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10005D1C4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  id v4 = a2;
  [v4 writeUInt32:v3 withCode:1836413810];
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  ICDAAPUtilitiesWriteContainer();
}

void sub_10005D29C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  ICDAAPUtilitiesWriteContainer();
}

void sub_10005D350(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 writeUInt32:*(unsigned int *)(a1 + 48) withCode:1835624804];
  if (*(void *)(a1 + 32))
  {
    id v4 = +[ICDAAPPropertyInfo sharedContainerPropertyInfo];
    id v5 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10005D4AC;
    v9[3] = &unk_1001BDA60;
    id v10 = v4;
    id v11 = v3;
    id v6 = v4;
    [v5 enumerateKeysAndObjectsUsingBlock:v9];
  }
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = v7;
    ICDAAPUtilitiesWriteContainer();
  }
}

void sub_10005D4AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasInfoForProperty:v5])
  {
    [*(id *)(a1 + 32) elementCodeForProperty:v5];
    [*(id *)(a1 + 32) valueTypeForProperty:v5];
    ICDAAPUtilitiesWriteProperty();
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No DAAP code found for container property: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_10005D5C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005D65C;
  v6[3] = &unk_1001BDA88;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateCloudItemIDsUsingBlock:v6];
}

void sub_10005D65C(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  id v5 = [v6 unsignedLongLongValue];
  switch(a3)
  {
    case 2:
      [*(id *)(a1 + 32) writeString:v6 withCode:1634353993];
      break;
    case 1:
      [*(id *)(a1 + 32) writeUInt64:v5 withCode:1634025833];
      break;
    case 0:
      [*(id *)(a1 + 32) writeUInt32:v5 withCode:1835624804];
      break;
  }
}

void sub_10005DFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 224), 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005E028(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005E038(uint64_t a1)
{
}

void sub_10005E040(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 32));
  int v8 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int v15 = 138544130;
    uint64_t v16 = v9;
    __int16 v17 = 2048;
    id v18 = [v7 count];
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] flushed %lu play events with result %d isFinalResult: %d", (uint8_t *)&v15, 0x22u);
  }

  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  if (*(unsigned char *)(v10 + 24)) {
    char v11 = 1;
  }
  else {
    char v11 = a3;
  }
  *(unsigned char *)(v10 + 24) = v11;
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) && (a3 & 1) == 0)
  {
    uint64_t v12 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    int v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
  if (a4) {
    [*(id *)(a1 + 40) finishWithError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

id sub_10005E1CC(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = *(void *)(a1[5] + 8);
  id v3 = *(void **)(v2 + 40);
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v7 = *(id *)(v4 + 40);
  id obj = v3;
  id v5 = [v1 getStoreAccounts:&obj returningError:&v7];
  objc_storeStrong((id *)(v2 + 40), obj);
  objc_storeStrong((id *)(v4 + 40), v7);
  return v5;
}

void sub_10005E244(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x3032000000;
  uint64_t v45 = sub_10005E028;
  uint64_t v46 = sub_10005E038;
  id v47 = 0;
  uint64_t v36 = 0;
  unsigned __int8 v37 = &v36;
  uint64_t v38 = 0x3032000000;
  int v39 = sub_10005E028;
  uint64_t v40 = sub_10005E038;
  id v41 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  void v31[2] = sub_10005E64C;
  v31[3] = &unk_1001BCDB0;
  id v32 = v4;
  long long v34 = &v42;
  id v5 = v3;
  id v33 = v5;
  long long v35 = &v36;
  [v32 performTransactionWithBlock:v31];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10005E6DC;
  v27[3] = &unk_1001BAF90;
  id v28 = *(id *)(a1 + 40);
  long long v18 = *(_OWORD *)(a1 + 56);
  id v6 = (id)v18;
  long long v29 = v18;
  long long v30 = &v42;
  id v7 = objc_retainBlock(v27);
  if (v37[5] || ![(id)v43[5] count])
  {
    int v8 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = v37[5];
      *(_DWORD *)buf = 138412546;
      id v49 = v5;
      __int16 v50 = 2112;
      uint64_t v51 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Found no play activity events for account id: %@ with error: %@", buf, 0x16u);
    }

    ((void (*)(void *, void))v7[2])(v7, 0);
  }
  uint64_t v10 = +[ICUserIdentity specificAccountWithDSID:](ICUserIdentity, "specificAccountWithDSID:", v5, v18);
  id v11 = [objc_alloc((Class)ICStoreRequestContext) initWithIdentity:v10];
  uint64_t v12 = +[ICURLBagProvider sharedBagProvider];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10005E790;
  v19[3] = &unk_1001BB030;
  id v13 = v11;
  id v20 = v13;
  id v14 = v10;
  __int16 v26 = &v42;
  uint64_t v15 = *(void *)(a1 + 48);
  id v21 = v14;
  uint64_t v22 = v15;
  uint64_t v16 = v7;
  id v25 = v16;
  id v17 = v5;
  id v23 = v17;
  id v24 = *(id *)(a1 + 32);
  [v12 getBagForRequestContext:v13 withCompletionHandler:v19];

  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v42, 8);
}

void sub_10005E614(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_10005E64C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v2 + 40);
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) longLongValue];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  id v8 = *(id *)(v5 + 40);
  id v6 = [v3 getPlayActivityEvents:&obj storeAccountID:v4 limit:1000 returningError:&v8];
  objc_storeStrong((id *)(v2 + 40), obj);
  objc_storeStrong((id *)(v5 + 40), v8);
  return v6;
}

void sub_10005E6DC(uint64_t a1, char a2)
{
  id v4 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005FAC4;
  block[3] = &unk_1001BAF68;
  long long v6 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v6;
  long long v8 = v6;
  uint64_t v9 = *(void *)(a1 + 56);
  char v10 = a2;
  dispatch_async(v4, block);
}

void sub_10005E790(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [v5 urlForBagKey:ICURLBagKeyPlayActivityFeedRequestPostURL];
    if (v7)
    {
      long long v8 = [*(id *)(a1 + 32) identityStore];
      uint64_t v9 = *(void *)(a1 + 40);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_10005EA34;
      v18[3] = &unk_1001BB008;
      id v10 = v5;
      uint64_t v11 = *(void *)(a1 + 48);
      id v19 = v10;
      uint64_t v20 = v11;
      long long v17 = *(_OWORD *)(a1 + 72);
      id v12 = (id)v17;
      long long v26 = v17;
      id v21 = *(id *)(a1 + 32);
      id v22 = v7;
      id v23 = *(id *)(a1 + 56);
      id v24 = *(id *)(a1 + 40);
      id v25 = *(id *)(a1 + 64);
      [v8 getPropertiesForUserIdentity:v9 completionHandler:v18];
    }
    else
    {
      uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543362;
        uint64_t v28 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%{public}@] Post URL missing from bag", buf, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
  }
  else
  {
    id v13 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v14;
      __int16 v29 = 2114;
      id v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%{public}@] Failed to load URL bag with error: %{public}@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_10005EA34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v41 = a3;
  id v6 = objc_alloc_init(ICPlayActivityFeedSerialization);
  uint64_t v42 = v5;
  id v7 = [v5 storefrontIdentifier];
  uint64_t v8 = [*(id *)(a1 + 32) storefrontHeaderSuffix];
  uint64_t v9 = (void *)v8;
  if (v8) {
    CFStringRef v10 = (const __CFString *)v8;
  }
  else {
    CFStringRef v10 = &stru_1001BF9F0;
  }
  uint64_t v11 = [v7 stringByAppendingString:v10];
  [(ICPlayActivityFeedSerialization *)v6 setCurrentStoreFrontID:v11];

  long long v54 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v51 = 0u;
  uint64_t v12 = a1;
  id v13 = *(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
  id v14 = [v13 countByEnumeratingWithState:&v51 objects:v59 count:16];
  if (v14)
  {
    id v15 = v14;
    id v16 = 0;
    uint64_t v17 = *(void *)v52;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v52 != v17) {
          objc_enumerationMutation(v13);
        }
        id v19 = [(ICPlayActivityFeedSerialization *)v6 propertyListObjectWithPlayActivityEvent:*(void *)(*((void *)&v51 + 1) + 8 * i)];
        if (v19)
        {
          if (!v16) {
            id v16 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(*(void *)(v12 + 96) + 8) + 40), "count"));
          }
          [v16 addObject:v19];
          if (MSVDeviceOSIsInternalInstall())
          {
            uint64_t v20 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity_Oversize");
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v21 = *(void *)(v12 + 40);
              *(_DWORD *)buf = 138543618;
              uint64_t v56 = v21;
              __int16 v57 = 2114;
              uint64_t v58 = v19;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%{public}@] Adding PAF event %{public}@.", buf, 0x16u);
            }
          }
        }
      }
      id v15 = [v13 countByEnumeratingWithState:&v51 objects:v59 count:16];
    }
    while (v15);
  }
  else
  {
    id v16 = 0;
  }

  if ([v16 count])
  {
    id v22 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithObjectsAndKeys:", v16, @"events", 0, v41);
    uint64_t v23 = v12;
    id v24 = [*(id *)(v12 + 48) deviceInfo];
    id v25 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:*(void *)(v23 + 56)];
    [v25 setHTTPMethod:@"POST"];
    long long v26 = [v24 deviceGUID];
    if (v26) {
      [v25 setValue:v26 forHTTPHeaderField:ICStoreHTTPHeaderKeyXGUID];
    }
    if ([*(id *)(v23 + 64) longLongValue])
    {
      uint64_t v27 = [*(id *)(v23 + 72) accountDSID];
      [v25 setValue:v27 forHTTPHeaderField:ICStoreHTTPHeaderKeyXDSID];
    }
    if (!v42 || ([v42 storefrontIdentifier], (uint64_t v28 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      __int16 v29 = [*(id *)(*(void *)(*(void *)(v23 + 96) + 8) + 40) lastObject];
      uint64_t v28 = [v29 storeFrontID];

      if (v28)
      {
        if (![v28 length]) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
      id v30 = [*(id *)(v23 + 48) identityStore];
      uint64_t v31 = [v30 localStoreAccountProperties];
      uint64_t v28 = [v31 storefrontIdentifier];
    }
    if (![v28 length])
    {
LABEL_37:
      id v34 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v25 requestContext:*(void *)(v23 + 48)];
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_10005EF7C;
      v43[3] = &unk_1001BAFE0;
      uint64_t v35 = *(void *)(v23 + 40);
      uint64_t v36 = *(void **)(v23 + 48);
      id v44 = v22;
      uint64_t v45 = v35;
      id v46 = v25;
      id v37 = v36;
      uint64_t v38 = *(void *)(v23 + 96);
      id v47 = v37;
      uint64_t v50 = v38;
      id v48 = *(id *)(v23 + 80);
      id v49 = *(id *)(v23 + 88);
      id v39 = v25;
      id v40 = v22;
      [v34 buildURLRequestWithCompletionHandler:v43];

      goto LABEL_38;
    }
    id v32 = [*(id *)(v23 + 32) storefrontHeaderSuffix];
    if ([v32 length])
    {
      uint64_t v33 = [v28 stringByAppendingString:v32];

      uint64_t v28 = (void *)v33;
    }

LABEL_36:
    [v25 setValue:v28 forHTTPHeaderField:ICStoreHTTPHeaderKeyXAppleStorefront];
    goto LABEL_37;
  }
  (*(void (**)(void))(*(void *)(v12 + 88) + 16))();
LABEL_38:
}

void sub_10005EF7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v33 = v6;
    uint64_t v8 = +[ICPlayActivityFeedSerialization defaultOverrideHTTPHeaderFields];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v9 = [v8 countByEnumeratingWithState:&v40 objects:v50 count:16];
    if (v9)
    {
      id v10 = v9;
      id v11 = 0;
      uint64_t v12 = *(void *)v41;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v41 != v12) {
            objc_enumerationMutation(v8);
          }
          uint64_t v14 = *(void *)(*((void *)&v40 + 1) + 8 * i);
          id v15 = [v5 valueForHTTPHeaderField:v14];
          if (v15)
          {
            if (!v11) {
              id v11 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:1];
            }
            [v11 setObject:v15 forKey:v14];
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v40 objects:v50 count:16];
      }
      while (v10);
    }
    else
    {
      id v11 = 0;
    }
    if ([v11 count]) {
      [*(id *)(a1 + 32) setObject:v11 forKey:@"override-headers"];
    }
    uint64_t v18 = *(void *)(a1 + 32);
    id v39 = 0;
    id v19 = +[NSPropertyListSerialization dataWithPropertyList:v18 format:200 options:0 error:&v39];
    id v20 = v39;
    uint64_t v21 = v20;
    id v7 = v33;
    if ((!v19 || v20) && MSVDeviceOSIsInternalInstall())
    {
      id v22 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity_Oversize");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        uint64_t v45 = v23;
        __int16 v46 = 2114;
        id v47 = v21;
        __int16 v48 = 2114;
        id v49 = v19;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[%{public}@] error (%{public}@ serializing request data (%{public}@).", buf, 0x20u);
      }
    }
    id v24 = v19;
    id v25 = v24;
    if ([v24 length])
    {
      long long v26 = MSVGzipCompressData();
      if (v26)
      {
        [*(id *)(a1 + 48) setValue:ICHTTPHeaderContentEncodingGZIP forHTTPHeaderField:ICHTTPHeaderKeyContentEncoding];
        [*(id *)(a1 + 48) setValue:ICHTTPHeaderContentTypeXApplePlist forHTTPHeaderField:ICHTTPHeaderKeyContentType];
        id v25 = v26;
        uint64_t v27 = v24;
      }
      else
      {
        uint64_t v27 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138543362;
          uint64_t v45 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[%{public}@] error compressing request data", buf, 0xCu);
        }
        id v25 = v24;
      }
    }
    [*(id *)(a1 + 48) setHTTPBody:v25];
    id v29 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:*(void *)(a1 + 48) requestContext:*(void *)(a1 + 56)];
    id v30 = +[ICURLSessionManager defaultSession];
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    id v34[2] = sub_10005F430;
    v34[3] = &unk_1001BAFB8;
    uint64_t v31 = *(void *)(a1 + 40);
    uint64_t v38 = *(void *)(a1 + 80);
    void v34[4] = v31;
    uint64_t v35 = v24;
    id v36 = *(id *)(a1 + 64);
    id v37 = *(id *)(a1 + 72);
    id v32 = v24;
    [v30 enqueueDataRequest:v29 withCompletionHandler:v34];
  }
  else
  {
    id v16 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v45 = v17;
      __int16 v46 = 2114;
      id v47 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[%{public}@] Failed to resolve a URL request for override headers with error: %{public}@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_10005F430(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 parsedBodyDictionary];
  uint64_t v8 = [v5 bodyData];
  if (MSVDeviceOSIsInternalInstall()
    && CFPreferencesGetAppBooleanValue(@"ShouldDebugLogFlushedEvents", @"com.apple.PlayActivityFeed", 0))
  {
    id v9 = NSTemporaryDirectory();
    id v10 = [v9 stringByAppendingPathComponent:@"com.apple.PlayActivityEvents"];

    id v11 = [objc_alloc((Class)ICHTTPArchive) initUnboundedArchiveWithDirectoryPath:v10];
    uint64_t v12 = [v5 urlRequest];
    id v13 = [v5 urlResponse];
    uint64_t v14 = [v5 performanceMetrics];
    [v11 archiveRequest:v12 withResponse:v13 responseData:v8 performanceMetrics:v14];
  }
  int v15 = 0;
  uint64_t v16 = -1;
  if (v5 && !v6)
  {
    uint64_t v17 = [v5 urlResponse];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v16 = (uint64_t)[v17 statusCode];
      uint64_t v18 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = a1[4];
        unsigned int v20 = [*(id *)(*(void *)(a1[8] + 8) + 40) count];
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v20;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%{public}@] Flush %d PAF events finished with HTTP code %ld", buf, 0x1Cu);
      }

      if ((unint64_t)(v16 - 200) <= 0x63)
      {
        if (v8) {
          BOOL v21 = v7 == 0;
        }
        else {
          BOOL v21 = 0;
        }
        int v15 = !v21;
        goto LABEL_30;
      }
      if (v16 == 500)
      {
        id v24 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = a1[4];
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%{public}@] MALFORMED PAF EVENTS ", buf, 0xCu);
        }

        if (MSVDeviceOSIsInternalInstall())
        {
          long long v26 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity_Oversize");
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            uint64_t v27 = *(void *)(*(void *)(a1[8] + 8) + 40);
            uint64_t v28 = a1[4];
            uint64_t v29 = a1[5];
            *(_DWORD *)buf = 138543874;
            *(void *)&uint8_t buf[4] = v28;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v27;
            *(_WORD *)&unsigned char buf[22] = 2114;
            *(void *)&unsigned char buf[24] = v29;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[%{public}@] MALFORMED PAF EVENTS=%{public}@, requestData=%{public}@", buf, 0x20u);
          }

          id v30 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
          if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
          {
            uint64_t v31 = a1[4];
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "[%{public}@] Uploading malformed PAF events", buf, 0xCu);
          }
        }
        int v15 = 0;
        uint64_t v16 = 500;
        goto LABEL_30;
      }
    }
    else
    {
      id v22 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = a1[4];
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[%{public}@] response is NOT of kind NSHTTPURLResponse", buf, 0xCu);
      }
    }
    int v15 = 0;
LABEL_30:
  }
  id v32 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = a1[4];
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v33;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v16;
    LOWORD(v49) = 2114;
    *(void *)((char *)&v49 + 2) = v7;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%{public}@] operation finished with error %{public}@, HTTTP statusCode %ld, parsedResponseBody %{public}@", buf, 0x2Au);
  }

  if (v15)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    *(void *)&unsigned char buf[24] = sub_10005E028;
    *(void *)&long long v49 = sub_10005E038;
    *((void *)&v49 + 1) = objc_alloc_init((Class)NSError);
    id v34 = (void *)a1[6];
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_10005FA64;
    v40[3] = &unk_1001BCDD8;
    id v35 = v34;
    uint64_t v36 = a1[8];
    id v41 = v35;
    uint64_t v42 = v36;
    long long v43 = buf;
    [v35 performTransactionWithBlock:v40];
    if (*(void *)(*(void *)&buf[8] + 40))
    {
      id v37 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = *(void *)(*(void *)(a1[8] + 8) + 40);
        uint64_t v39 = *(void *)(*(void *)&buf[8] + 40);
        *(_DWORD *)id v44 = 138412546;
        uint64_t v45 = v38;
        __int16 v46 = 2112;
        uint64_t v47 = v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to remove playActivtyEvents: %@ from table with error: %@", v44, 0x16u);
      }
    }
    _Block_object_dispose(buf, 8);
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_10005FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10005FA64(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = *(void *)(*(void *)(a1[5] + 8) + 40);
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  id v4 = [v1 removePlayActivityEvents:v2 returningError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

uint64_t sub_10005FAC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(unsigned __int8 *)(a1 + 56), --*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0);
}

void sub_100060498(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000604E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000604F0(uint64_t a1)
{
}

void sub_1000604F8(uint64_t a1, void *a2)
{
  id v8 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v7 = +[NSAssertionHandler currentHandler];
    [v7 handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 32) file:@"CloudArtworkOperationQueue.m" lineNumber:48 description:@"Only operations of type CloudArtworkImportOperation are supported"];
  }
  uint64_t v3 = [v8 assetURL];

  if (v3)
  {
    [*(id *)(a1 + 32) addOperation:v8];
  }
  else
  {
    id v4 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v8 cloudID]);
    id v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 artworkType]);
    id v6 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:v5];
    if (!v6)
    {
      id v6 = +[NSMutableArray array];
      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v6 forKeyedSubscript:v5];
    }
    [v6 addObject:v4];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v8 forKeyedSubscript:v4];
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  }
}

void sub_100060698(uint64_t a1, void *a2, void *a3)
{
  BOOL v21 = a2;
  id v20 = a3;
  if ([v20 count])
  {
    uint64_t v26 = a1;
    if ([*(id *)(a1 + 32) sourceType] == (id)400
      && [(__CFString *)v21 integerValue] == (id)1)
    {
      id v24 = (objc_class *)objc_opt_class();
      id v25 = ICArtworkInfoKeyPurchaseHistoryID;
      uint64_t v23 = 0;
      CFStringRef v5 = @"purchase history";
    }
    else
    {
      if ([*(id *)(a1 + 32) sourceType] == (id)200
        && [(__CFString *)v21 integerValue] == (id)1)
      {
        id v24 = (objc_class *)objc_opt_class();
        id v25 = ICArtworkInfoKeySagaID;
        CFStringRef v5 = @"cloud";
      }
      else if ([*(id *)(a1 + 32) sourceType] == (id)200 {
             && [(__CFString *)v21 integerValue] == (id)5)
      }
      {
        id v24 = (objc_class *)objc_opt_class();
        id v25 = ICArtworkInfoKeySagaID;
        CFStringRef v5 = @"container cloud";
      }
      else if ([*(id *)(a1 + 32) sourceType] == (id)600 {
             && [(__CFString *)v21 integerValue] == (id)1)
      }
      {
        id v24 = (objc_class *)objc_opt_class();
        id v25 = ICArtworkInfoKeySagaID;
        CFStringRef v5 = @"cloud (subscription)";
      }
      else if ([*(id *)(a1 + 32) sourceType] == (id)600 {
             && [(__CFString *)v21 integerValue] == (id)5)
      }
      {
        id v24 = (objc_class *)objc_opt_class();
        id v25 = ICArtworkInfoKeySagaID;
        CFStringRef v5 = @"container cloud (subscription)";
      }
      else
      {
        id v6 = +[NSAssertionHandler currentHandler];
        [v6 handleFailureInMethod:*(void *)(a1 + 48), *(void *)(a1 + 32), @"CloudArtworkOperationQueue.m", 107, @"Unknown sourceType/artworkType pair for CloudArtworkOperationQueue addOperations: %ld/%@", objc_msgSend(*(id *)(a1 + 32), "sourceType"), v21 object file lineNumber description];

        CFStringRef v5 = 0;
        id v24 = 0;
        id v25 = 0;
      }
      uint64_t v23 = 1;
    }
    id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      id v38 = [v20 count];
      __int16 v39 = 2114;
      CFStringRef v40 = v21;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Determined %lu operations with artworkType=%{public}@ need to resolve artwork URLs before executing.", buf, 0x16u);
    }

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id obj = [v20 subarraysOfSize:500];
    id v8 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v33;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v33 != v9) {
            objc_enumerationMutation(obj);
          }
          id v11 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            id v13 = [v11 count];
            *(_DWORD *)buf = 134218242;
            id v38 = v13;
            __int16 v39 = 2114;
            CFStringRef v40 = v5;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sending bulk artwork info request for %lu %{public}@ IDs.", buf, 0x16u);
          }

          id v14 = [v24 alloc];
          int v15 = [*(id *)(v26 + 32) configuration];
          id v16 = [v14 initWithConfiguration:v15 cloudIDs:v11];

          objc_initWeak((id *)buf, v16);
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          v27[2] = sub_100060DDC;
          v27[3] = &unk_1001BB0A8;
          void v27[4] = v11;
          objc_copyWeak(&v31, (id *)buf);
          uint64_t v28 = (__CFString *)v5;
          id v29 = v25;
          long long v30 = *(_OWORD *)(v26 + 32);
          [v16 setCompletionBlock:v27];
          [v16 setName:@"com.apple.itunescloudd.CloudArtworkOperation.bulkArtworkInfoOperation"];
          uint64_t v17 = objc_opt_class();
          uint64_t v18 = [*(id *)(v26 + 32) configuration];
          uint64_t v19 = [v17 handlerForConfiguration:v18];
          [v19 addOperation:v16 forLibraryType:v23 priority:1];

          objc_destroyWeak(&v31);
          objc_destroyWeak((id *)buf);
        }
        id v8 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
      }
      while (v8);
    }
  }
}

void sub_100060C1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

id sub_100060C44(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100060CBC;
  v4[3] = &unk_1001BB0F8;
  long long v5 = *(_OWORD *)(a1 + 32);
  return [a3 enumerateObjectsUsingBlock:v4];
}

void sub_100060CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKey:a2];
  id v4 = +[NSString stringWithFormat:@"No store account for source_type %ld", *(void *)(*(void *)(a1 + 32) + 8), NSLocalizedDescriptionKey];
  id v8 = v4;
  long long v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

  id v6 = +[NSError ic_cloudClientErrorWithCode:2009 userInfo:v5];
  [v3 setError:v6];

  [*(id *)(a1 + 32) addOperation:v3];
}

void sub_100060DDC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableCopy];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v4 = [WeakRetained cloudArtworkInfoDictionaries];

  long long v5 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v4 count];
    uint64_t v7 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 134218242;
    id v43 = v6;
    __int16 v44 = 2114;
    id v45 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received %lu artwork info dictionaries for %{public}@ IDs.", buf, 0x16u);
  }

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v34 objects:v41 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v35;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v35 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        id v14 = [v13 objectForKeyedSubscript:*(void *)(a1 + 48)];
        [v2 removeObject:v14];
        int v15 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) objectForKey:v14];
        id v16 = [*(id *)(a1 + 56) _artworkURLForInfoDictionary:v13];
        [v15 setAssetURL:v16];

        [*(id *)(a1 + 56) addOperation:v15];
      }
      id v10 = [v8 countByEnumeratingWithState:&v34 objects:v41 count:16];
    }
    while (v10);
  }

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = v2;
  id v17 = [obj countByEnumeratingWithState:&v30 objects:v40 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v31;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v31 != v19) {
          objc_enumerationMutation(obj);
        }
        BOOL v21 = *(void **)(*((void *)&v30 + 1) + 8 * (void)j);
        id v22 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = *(void **)(a1 + 40);
          id v24 = [v21 unsignedLongLongValue];
          *(_DWORD *)buf = 138543618;
          id v43 = v23;
          __int16 v44 = 2048;
          id v45 = v24;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to resolve artwork URL for %{public}@ ID: %llu", buf, 0x16u);
        }

        id v25 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) objectForKey:v21];
        NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
        uint64_t v26 = +[NSString stringWithFormat:@"Failed to resolve artwork URL for %@ ID: %@", *(void *)(a1 + 40), v21];
        __int16 v39 = v26;
        uint64_t v27 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];

        uint64_t v28 = +[NSError ic_cloudClientErrorWithCode:2008 userInfo:v27];
        [v25 setError:v28];

        [*(id *)(a1 + 56) addOperation:v25];
      }
      id v18 = [obj countByEnumeratingWithState:&v30 objects:v40 count:16];
    }
    while (v18);
  }
}

intptr_t sub_100061688(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(a1 + 32) + 120) = [v3 containerID];
  uint64_t v4 = (uint64_t)[v3 responseCode];

  if (v4 > 399)
  {
    uint64_t v6 = 3;
    if (v4 == 400 || v4 == 404) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 != 200 && v4 != 204)
  {
LABEL_9:
    uint64_t v6 = 2;
LABEL_10:
    long long v5 = *(void **)(a1 + 32);
    goto LABEL_11;
  }
  long long v5 = *(void **)(a1 + 32);
  if (v5[15]) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = 2;
  }
LABEL_11:
  [v5 setStatus:v6];
  uint64_t v7 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v7);
}

id sub_100061ED4(uint64_t a1, void *a2)
{
  id result = [a2 statusType];
  id v4 = result;
  int v5 = result == (id)1;
  if (*(unsigned __int8 *)(a1 + 40) != v5 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a1 + 42))
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 41);
      v8[0] = 67109376;
      v8[1] = v5;
      __int16 v9 = 1024;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updating AirPlay defaults: isAppleMusicSubscriber=%d, cloudLibraryIsOn=%d", (uint8_t *)v8, 0xEu);
    }

    [*(id *)(a1 + 32) setBool:v4 == (id)1 forKey:@"isAppleMusicSubscriber"];
    [*(id *)(a1 + 32) setBool:*(unsigned __int8 *)(a1 + 41) forKey:@"cloudLibraryIsOn"];
    return (id)notify_post("com.apple.airplay.prefsChanged");
  }
  return result;
}

void sub_100062530(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  int v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = objc_msgSend(v3, "msv_description");
      int v9 = 138543618;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Finished clearing default supported commands with MR for bundle id '%{public}@' error=%{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138543362;
    uint64_t v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Finished clearing default supported commands with MR for bundle id '%{public}@'", (uint8_t *)&v9, 0xCu);
  }
}

void sub_100062860(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = objc_msgSend(v6, "msv_description");
      int v19 = 138543618;
      uint64_t v20 = v8;
      __int16 v21 = 2114;
      v22[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to load U18 account value from account %{public}@ error=%{public}@", (uint8_t *)&v19, 0x16u);
    }
  }
  if (v5)
  {
    uint64_t v10 = [v5 value];
    id v11 = [v10 BOOLValue];

    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      int v19 = 138543874;
      uint64_t v20 = v13;
      __int16 v21 = 1024;
      LODWORD(v22[0]) = v11;
      WORD2(v22[0]) = 2114;
      *(void *)((char *)v22 + 6) = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ - _updateAccountServerCachedData caching isU18 value of %{BOOL}u for account %{public}@", (uint8_t *)&v19, 0x1Cu);
    }

    int v15 = +[ICDefaults standardDefaults];
    [v15 setCachedU18MinorAccountStatus:v11];

    id v16 = +[AMSAccountCachedServerData sharedInstance];
    id v17 = [v5 token];
    id v18 = [v16 cancelUpdatesForToken:v17];
  }
}

void sub_100062AFC(id a1, ICMusicSubscriptionStatus *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Updating HTTP Cookies] Failed to obtain subscription status for updating cookies. will be treated as unknown", buf, 2u);
    }
  }
  int v7 = [sub_100062E30() sharedRestrictionsMonitor];
  id v8 = [v7 allowsMusicVideos];

  int v9 = [sub_100062E30() sharedRestrictionsMonitor];
  id v10 = [v9 allowsExplicitContent];

  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"UserRequestedSubscriptionHidden", @"com.apple.mobileipod", 0);
  unsigned int v12 = [(ICMusicSubscriptionStatus *)v4 hasCapability:1];
  uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    int v21 = (int)v10;
    __int16 v22 = 1024;
    int v23 = (int)v8;
    __int16 v24 = 1024;
    BOOL v25 = AppBooleanValue != 0;
    __int16 v26 = 1024;
    unsigned int v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[Updating HTTP Cookies] Updating cookie store for content restrictions. explicitContentAllowed=%{BOOL}u, musicVideosAllowed=%{BOOL}u, hasDisabledAppleMusic=%{BOOL}u, isSubscriber=%{BOOL}u", buf, 0x1Au);
  }

  uint64_t v14 = +[ICDDefaults daemonDefaults];
  if (v10 != [v14 lastKnownExplicitContentAllowed])
  {
    if (v10)
    {
      if ((sub_100062F14(ICStoreHTTPCookieNameITRE) & 1) == 0) {
        goto LABEL_13;
      }
    }
    else if (!sub_1000630B8(ICStoreHTTPCookieNameITRE, @"1"))
    {
      goto LABEL_13;
    }
    [v14 setLastKnownExplicitContentAllowed:v10];
  }
LABEL_13:
  if (v8 == [v14 lastKnownMusicVideosAllowed]) {
    goto LABEL_19;
  }
  if (!v8)
  {
    if (!sub_1000630B8(ICStoreHTTPCookieNameITRV, @"1")) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (sub_100062F14(ICStoreHTTPCookieNameITRV)) {
LABEL_18:
  }
    [v14 setLastKnownMusicVideosAllowed:v8];
LABEL_19:
  if (v12) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = AppBooleanValue != 0;
  }
  if ((id)v15 == [v14 lastKnownMusicSubscriptionType]) {
    goto LABEL_26;
  }
  id v16 = (void *)ICStoreHTTPCookieNameITST;
  if (v15)
  {
    id v17 = +[NSString stringWithFormat:@"%ld", v15];
    unsigned int v18 = sub_1000630B8(v16, v17);

    if (!v18) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (sub_100062F14(ICStoreHTTPCookieNameITST)) {
LABEL_25:
  }
    [v14 setLastKnownMusicSubscriptionType:v15];
LABEL_26:
  int v19 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[Updating HTTP Cookies] Finished updating cookie store for content restrictions", buf, 2u);
  }
}

id sub_100062E30()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1001F3878;
  uint64_t v7 = qword_1001F3878;
  if (!qword_1001F3878)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100063314;
    v3[3] = &unk_1001BE9E8;
    v3[4] = &v4;
    sub_100063314((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100062EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100062F14(void *a1)
{
  id v1 = a1;
  id v2 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v11 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Updating HTTP Cookies] Removing cookie '%{public}@'", buf, 0xCu);
  }

  v8[0] = @"Domain";
  v8[1] = @"Name";
  v9[0] = @".apple.com";
  v9[1] = v1;
  _DWORD v8[2] = @"Path";
  v9[2] = @"/";
  id v3 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:3];
  uint64_t v4 = +[ICHTTPCookieStore sharedCookieStore];
  id v5 = [v4 removeCookiesWithProperties:v3];

  if ((v5 & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v11 = v1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Updating HTTP Cookies] Failed to remove cookie '%{public}@'", buf, 0xCu);
    }
  }
  return v5;
}

id sub_1000630B8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    id v18 = v3;
    __int16 v19 = 2114;
    id v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Updating HTTP Cookies] Setting cookie '%{public}@ = %{public}@'", buf, 0x16u);
  }

  v15[0] = NSHTTPCookieName;
  v15[1] = NSHTTPCookieValue;
  v16[0] = v3;
  v16[1] = v4;
  v15[2] = NSHTTPCookiePath;
  v15[3] = NSHTTPCookieDomain;
  v16[2] = @"/";
  v16[3] = @".apple.com";
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:4];
  uint64_t v7 = +[NSHTTPCookie cookieWithProperties:v6];

  id v8 = +[ICHTTPCookieStore sharedCookieStore];
  uint64_t v14 = v7;
  int v9 = +[NSArray arrayWithObjects:&v14 count:1];
  id v10 = +[NSURL URLWithString:@"https://www.apple.com/"];
  id v11 = [v8 saveCookies:v9 forURL:v10 userIdentifier:&off_1001CBD98];

  if ((v11 & 1) == 0)
  {
    unsigned int v12 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Updating HTTP Cookies] Failed to set cookie '%{public}@'", buf, 0xCu);
    }
  }
  return v11;
}

void sub_100063314(uint64_t a1)
{
  sub_1000633DC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPRestrictionsMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3878 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPRestrictionsMonitorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDServer.m", 86, @"Unable to find class %s", "MPRestrictionsMonitor");

    __break(1u);
  }
}

void sub_1000633DC()
{
  v3[0] = 0;
  if (!qword_1001F3880)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10006352C;
    v3[4] = &unk_1001BEA20;
    void v3[5] = v3;
    long long v4 = off_1001BB700;
    uint64_t v5 = 0;
    qword_1001F3880 = _sl_dlopen();
  }
  if (!qword_1001F3880)
  {
    id v1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICDServer.m", 80, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10006352C()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3880 = result;
  return result;
}

void sub_1000636B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v11 = 138543362;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Skipping updating enhanced audio availability because we failed to load the bag. err=%{public}@", (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    uint64_t v7 = [a2 enhancedAudioConfiguration];
    if (v7)
    {
      uint64_t v6 = v7;
      id v8 = +[ICMusicSubscriptionStatusController sharedStatusController];
      id v9 = [objc_alloc((Class)ICMusicSubscriptionStatusRequest) initWithStoreRequestContext:*(void *)(a1 + 32)];
      [v9 setCarrierBundleProvisioningStyle:1];
      [v9 shouldReturnLastKnownStatusOnly];
      [v9 setShouldIgnoreCache:0];
      [v9 setAllowsFallbackToExpiredStatus:1];
      [v9 setAllowsFallbackToStatusNeedingReload:1];
      [v8 performSubscriptionStatusRequest:v9 withCompletionHandler:&stru_1001BB630];
    }
    else
    {
      id v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disabling enhanced audio because the configuration is missing", (uint8_t *)&v11, 2u);
      }

      CFPreferencesSetAppValue(@"EnhancedAudioAvailable", kCFBooleanFalse, @"com.apple.mobileipod");
      uint64_t v6 = 0;
    }
  }
}

void sub_100063890(id a1, ICMusicSubscriptionStatusResponse *a2, NSError *a3)
{
  long long v4 = a3;
  if (v4)
  {
    id v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138543362;
      int v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Skipping updating enhanced audio availability because we failed to load subscription status. err=%{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    uint64_t v6 = [(ICMusicSubscriptionStatusResponse *)a2 subscriptionStatus];
    unsigned int v7 = [v6 hasCapability:1];

    id v8 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 67109120;
      LODWORD(v11) = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting cached enhanced audio availability flag to %{BOOL}u", (uint8_t *)&v10, 8u);
    }

    id v9 = (CFPropertyListRef *)&kCFBooleanTrue;
    if (!v7) {
      id v9 = (CFPropertyListRef *)&kCFBooleanFalse;
    }
    CFPreferencesSetAppValue(@"EnhancedAudioAvailable", *v9, @"com.apple.mobileipod");
  }
}

void sub_100063A08(id a1, ICRequestContext *a2)
{
  id v2 = a2;
  [(ICRequestContext *)v2 setAllowsExpiredBags:1];
  id v3 = +[ICUserIdentity activeAccount];
  [(ICRequestContext *)v2 setIdentity:v3];

  long long v4 = +[ICUserIdentityStore defaultIdentityStore];
  [(ICRequestContext *)v2 setIdentityStore:v4];

  id v5 = +[ICClientInfo defaultInfo];
  [(ICRequestContext *)v2 setClientInfo:v5];

  id v6 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [(ICRequestContext *)v2 setAuthenticationProvider:v6];
}

void sub_100063BD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 int64ValueForBagKey:ICURLBagKeySubscriptionStatusRefreshIntervalSeconds];
  id v5 = v4;
  if ((uint64_t)v4 >= XPC_ACTIVITY_INTERVAL_1_HOUR) {
    int64_t v6 = (int64_t)v4;
  }
  else {
    int64_t v6 = XPC_ACTIVITY_INTERVAL_1_DAY;
  }
  unsigned int v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [v3 serverCorrelationKey];
    id v9 = [v3 serverEnvironment];
    *(_DWORD *)buf = 134218754;
    int64_t v17 = v6;
    __int16 v18 = 2048;
    id v19 = v5;
    __int16 v20 = 2114;
    int v21 = v8;
    __int16 v22 = 2114;
    int v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Setting timer to perform periodic subscription tasks for %llds (value from bag: %llds; bag's serve"
      "r correlation key: %{public}@; server environment: %{public}@).",
      buf,
      0x2Au);
  }
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v10, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(v10, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v10, XPC_ACTIVITY_INTERVAL, v6);
  xpc_dictionary_set_BOOL(v10, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 0);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100063E0C;
  v13[3] = &unk_1001BCE28;
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  id v14 = v11;
  uint64_t v15 = v12;
  xpc_activity_register("com.apple.itunescloud.subscription_status_refresh", v10, v13);
}

void sub_100063E0C(uint64_t a1)
{
  id v1 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Performing periodic refresh of subscription status", buf, 2u);
  }

  id v2 = +[ICPrivacyInfo sharedPrivacyInfo];
  unsigned int v3 = [v2 privacyAcknowledgementRequiredForMusic];

  if (v3)
  {
    id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Skipping periodic subscription refresh because privacy acknowledgement is required", buf, 2u);
    }
  }
  else
  {
    id v5 = +[ICUserIdentityStore defaultIdentityStore];
    id v36 = 0;
    int64_t v6 = [v5 userIdentitiesForManageableAccountsWithError:&v36];
    id v4 = v36;

    if (v4 || ![v6 count])
    {
      unsigned int v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        __int16 v39 = v4;
        __int16 v40 = 2114;
        id v41 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Skipping subscription status refresh [issue retrieving user identities] - error=%{public}@ - userIdentities=%{public}@", buf, 0x16u);
      }
    }
    else
    {
      int v23 = v6;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id obj = v6;
      id v8 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v33;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(void *)v33 != v10) {
              objc_enumerationMutation(obj);
            }
            uint64_t v12 = *(void *)(*((void *)&v32 + 1) + 8 * i);
            id v13 = objc_alloc((Class)ICStoreRequestContext);
            v31[0] = _NSConcreteStackBlock;
            v31[1] = 3221225472;
            void v31[2] = sub_100064308;
            v31[3] = &unk_1001BB570;
            void v31[4] = v12;
            id v14 = [v13 initWithBlock:v31];
            id v15 = [objc_alloc((Class)ICMusicSubscriptionStatusRequest) initWithStoreRequestContext:v14];
            [v15 setCarrierBundleProvisioningStyle:1];
            [v15 setShouldIgnoreCache:1];
            [v15 setAllowsFallbackToExpiredStatus:1];
            [v15 setAllowsFallbackToStatusNeedingReload:1];
            id v16 = *(void **)(a1 + 32);
            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472;
            v27[2] = sub_1000643D0;
            v27[3] = &unk_1001BEB88;
            id v17 = v16;
            id v28 = v17;
            id v29 = v14;
            uint64_t v30 = v12;
            id v18 = v14;
            [v17 performSubscriptionStatusRequest:v15 withCompletionHandler:v27];
          }
          id v9 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
        }
        while (v9);
      }

      if (MSVDeviceSupportsEnhancedMusic())
      {
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        void v26[2] = sub_100064568;
        v26[3] = &unk_1001BC938;
        id v19 = *(void **)(a1 + 32);
        v26[4] = *(void *)(a1 + 40);
        [v19 getSubscriptionStatusWithCompletionHandler:v26];
        int64_t v6 = v23;
      }
      else
      {
        __int16 v20 = os_log_create("com.apple.amp.itunescloudd", "XPC");
        int64_t v6 = v23;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Skipping offline HLS key refresh because the device does not support it", buf, 2u);
        }
      }
      int v21 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updating Media API URL mapping file", buf, 2u);
      }

      __int16 v22 = +[ICMediaAPIURLMappingProvider sharedProvider];
      [v22 updateURLMappingsWithCompletion:&stru_1001BB5B0];

      [*(id *)(a1 + 40) processPendingKeyInvalidations];
    }
  }
}

void sub_100064308(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setAllowsExpiredBags:1];
  [v3 setIdentity:*(void *)(a1 + 32)];
  id v4 = +[ICUserIdentityStore defaultIdentityStore];
  [v3 setIdentityStore:v4];

  id v5 = +[ICClientInfo defaultInfo];
  [v3 setClientInfo:v5];

  id v6 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v3 setAuthenticationProvider:v6];
}

void sub_1000643D0(void *a1, void *a2)
{
  id v3 = [a2 subscriptionStatus];
  id v4 = +[ICDeviceInfo currentDeviceInfo];
  if ([v4 isAppleTV])
  {
  }
  else
  {
    id v5 = +[ICDeviceInfo currentDeviceInfo];
    unsigned __int8 v6 = [v5 isAudioAccessory];

    if ((v6 & 1) == 0 && [v3 hasCapability:128])
    {
      unsigned int v7 = (void *)a1[4];
      uint64_t v8 = a1[5];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_100064700;
      v11[3] = &unk_1001BC938;
      void v11[4] = a1[6];
      [v7 refreshSubscriptionUsingRequestContext:v8 withCompletionHandler:v11];
      goto LABEL_9;
    }
  }
  id v9 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[6];
    *(_DWORD *)buf = 138412546;
    uint64_t v13 = v10;
    __int16 v14 = 2114;
    id v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Skipping subscription key refresh complete for user identity: %@ - Subscription status: %{public}@", buf, 0x16u);
  }

LABEL_9:
}

void sub_100064568(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 hasCapability:1];
  id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Refreshing offline HLS keys", buf, 2u);
    }

    [*(id *)(a1 + 32) refreshEnhancedAudioSharedKeys];
    if (MSVDeviceSupportsMediaDownloads()) {
      [*(id *)(a1 + 32) fetchEnhancedAudioOfflineKeys];
    }
  }
  else
  {
    if (v5)
    {
      *(_WORD *)unsigned __int8 v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "<Key Refresh> - Skipping refreshing offline HLS keys because the user is not a subscriber", v6, 2u);
    }
  }
}

void sub_100064648(id a1, ICMediaAPIURLMappingSet *a2, NSError *a3)
{
  unsigned int v3 = a3;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    unsigned __int8 v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Media API URL mapping update completed. err=%{public}@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100064700(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  unsigned __int8 v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v7;
      __int16 v15 = 2114;
      id v16 = v4;
      uint64_t v8 = "<Key Refresh> - Periodic subscription refresh issue for user identity: %@ - error=%{public}@";
      id v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, v11);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = 138412290;
    uint64_t v14 = v12;
    uint64_t v8 = "<Key Refresh> - Periodic subscription refresh complete for user identity: %@";
    id v9 = v6;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    uint32_t v11 = 12;
    goto LABEL_6;
  }
}

void sub_10006481C(id a1, ICStoreRequestContext *a2)
{
  id v2 = a2;
  [(ICStoreRequestContext *)v2 setAllowsExpiredBags:1];
  unsigned int v3 = +[ICUserIdentity activeAccount];
  [(ICStoreRequestContext *)v2 setIdentity:v3];

  id v4 = +[ICUserIdentityStore defaultIdentityStore];
  [(ICStoreRequestContext *)v2 setIdentityStore:v4];

  int v5 = +[ICClientInfo defaultInfo];
  [(ICStoreRequestContext *)v2 setClientInfo:v5];

  id v6 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [(ICStoreRequestContext *)v2 setAuthenticationProvider:v6];
}

void sub_100064B4C(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Starting operation to reload cloud library for secondary accounts]", buf, 0xCu);
  }

  id v4 = [*(id *)(a1 + 32) internalOperationQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100064C68;
  v5[3] = &unk_1001BEC20;
  void v5[4] = *(void *)(a1 + 32);
  [v4 addOperationWithBlock:v5];
}

void sub_100064C68(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountManager];
  id v3 = [v2 libraryManagementPolicy];

  if (v3 == (id)1)
  {
    id v4 = [*(id *)(a1 + 32) handlerCoordinator];
    unsigned int v5 = [v4 isSetupCompleted];

    if (v5)
    {
      id v6 = *(void **)(a1 + 32);
      [v6 _transitionAppleTVToParallelMultiUserLibraryManagementPolicy];
    }
    else
    {
      id v9 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        int v11 = 134217984;
        uint64_t v12 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Handler Coordinator has not finished setup. Will retry loading secondary accounts]", (uint8_t *)&v11, 0xCu);
      }

      [*(id *)(a1 + 32) _retryLoadingCloudLibraryForSecondaryAccountsOnAppleTV];
    }
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 134218240;
      uint64_t v12 = v8;
      __int16 v13 = 1024;
      int v14 = (int)v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ICDServer %p - currentPolicy=%d and is not in a supported configuration. Will not attempt to reload cloud library for secondary users]", (uint8_t *)&v11, 0x12u);
    }
  }
}

void sub_10006535C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_100065380(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100065390(uint64_t a1)
{
}

intptr_t sub_100065398(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 subscriptionStatus];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v6);
}

void sub_100065AEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) _writeURLResolutionCacheFileUsingBag:a2];
  }
  else
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138543362;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to create url resolution file because we couldn't fetch the bag. err=%{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_100065BC8(id a1, ICStoreRequestContext *a2)
{
  id v2 = a2;
  [(ICStoreRequestContext *)v2 setAllowsExpiredBags:1];
  uint64_t v3 = +[ICUserIdentity activeAccount];
  [(ICStoreRequestContext *)v2 setIdentity:v3];

  uint64_t v4 = +[ICUserIdentityStore defaultIdentityStore];
  [(ICStoreRequestContext *)v2 setIdentityStore:v4];

  id v5 = +[ICClientInfo defaultInfo];
  [(ICStoreRequestContext *)v2 setClientInfo:v5];

  id v6 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [(ICStoreRequestContext *)v2 setAuthenticationProvider:v6];
}

void sub_100065ED4(uint64_t a1)
{
  id v2 = +[ICDefaults standardDefaults];
  uint64_t v3 = [v2 cachedSharedControlsCapability];
  uint64_t v4 = (void *)v3;
  id v5 = &off_1001CBD68;
  if (v3) {
    id v5 = (_UNKNOWN **)v3;
  }
  id v6 = v5;

  int v7 = [*(id *)(a1 + 32) dictionaryForBagKey:ICURLBagKeyMusicSubscription];
  BOOL v8 = v7 != 0;

  id v9 = +[ICDefaults standardDefaults];
  [v9 setSocialProfileSupported:v8];

  uint64_t v10 = ICURLBagKeySharedControls;
  int v11 = [*(id *)(a1 + 32) numberForBagKey:ICURLBagKeySharedControls];

  if (v11)
  {
    uint64_t v12 = [*(id *)(a1 + 32) numberForBagKey:v10];
  }
  else
  {
    uint64_t v12 = &off_1001CBD80;
  }
  __int16 v13 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    int v18 = 134218498;
    uint64_t v19 = v14;
    __int16 v20 = 2114;
    int v21 = v6;
    __int16 v22 = 2114;
    int v23 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ICDServer %p CachedSharedControlsCapability. cachedStatus=%{public}@ currentStatus=%{public}@", (uint8_t *)&v18, 0x20u);
  }

  id v15 = [v12 integerValue];
  if (v15 != [v6 integerValue])
  {
    id v16 = +[ICDefaults standardDefaults];
    [v16 setCachedSharedControlsCapability:v12];

    id v17 = +[NSDistributedNotificationCenter defaultCenter];
    [v17 postNotificationName:ICMusicUserStateGroupSessionCapabilityChangedNotification object:0];
  }
}

void sub_100066208(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 134218242;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "ICDServer %p - Server Setup - Encountered error fetching bag: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _updateSocialFeaturesAvailabilityIfNeededUsingBag:a2];
  }
}

void sub_100066750(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    uint64_t v11 = v5;
    __int16 v12 = 2114;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Removing cloud music library",
      buf,
      0x16u);
  }

  id v6 = +[BaseRequestHandler handlerForConfiguration:v3];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100066978;
  void v8[3] = &unk_1001BF198;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v3;
  id v7 = v3;
  [v6 handleMusicAppRemovedWithCompletion:v8];
}

void sub_1000668A8(id a1, ICConnectionConfiguration *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = [(ICConnectionConfiguration *)v4 userIdentity];
  id v8 = +[ML3MusicLibrary musicLibraryForUserAccount:v5];

  [v8 setJaliscoNeedsUpdateForTokens:1];
  id v6 = +[BaseRequestHandler handlerForConfiguration:v4];
  id v7 = [(ICConnectionConfiguration *)v4 clientIdentity];

  [v6 updateJaliscoLibraryWithClientIdentity:v7 forReason:6 completionHandler:&stru_1001BB4E0];
}

void sub_100066978(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v18 = v3;
    __int16 v19 = 2114;
    uint64_t v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Removing other music and music video tracks",
      buf,
      0x16u);
  }

  uint64_t v5 = [*(id *)(a1 + 40) userIdentity];
  id v6 = +[ML3MusicLibrary musicLibraryForUserAccount:v5];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100066B54;
  v13[3] = &unk_1001BEA70;
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v14 = v7;
  uint64_t v15 = v8;
  id v16 = v9;
  [v7 performDatabaseTransactionWithBlock:v13];
  __int16 v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v18 = v11;
    __int16 v19 = 2114;
    uint64_t v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Finished removing all music data",
      buf,
      0x16u);
  }
}

uint64_t sub_100066B54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyMediaType value:&off_1001CBD50 comparison:10];
  v40[0] = v4;
  uint64_t v5 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyIsLocal equalToInteger:1];
  v40[1] = v5;
  id v6 = +[NSArray arrayWithObjects:v40 count:2];
  id v7 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v6];

  uint64_t v8 = +[ML3Track unrestrictedAllItemsQueryWithlibrary:*(void *)(a1 + 32) predicate:v7 orderingTerms:0];
  id v9 = [v8 countOfEntities];
  __int16 v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    uint64_t v35 = v11;
    __int16 v36 = 2114;
    uint64_t v37 = v12;
    __int16 v38 = 2048;
    id v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Found %lu additional tracks to remove from library",
      buf,
      0x20u);
  }

  id v13 = malloc_type_calloc((size_t)v9, 8uLL, 0x100004000313F17uLL);
  if (v13)
  {
    id v14 = v13;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100067058;
    v33[3] = &unk_1001BB4A0;
    v33[4] = v13;
    [v8 enumeratePersistentIDsUsingBlock:v33];
    if ((+[ML3Track deleteFromLibrary:*(void *)(a1 + 32) deletionType:2 persistentIDs:v14 count:v9 usingConnection:v3] & 1) == 0)
    {
      uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        uint64_t v17 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        uint64_t v35 = v16;
        __int16 v36 = 2114;
        uint64_t v37 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Failed to remove additional tracks",
          buf,
          0x16u);
      }
    }
    free(v14);
  }
  else
  {
    uint64_t v18 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      uint64_t v35 = v19;
      __int16 v36 = 2114;
      uint64_t v37 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Failed to allocate pid array - skipping",
        buf,
        0x16u);
    }
  }
  int v21 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void *)(a1 + 40);
    uint64_t v23 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    uint64_t v35 = v22;
    __int16 v36 = 2114;
    uint64_t v37 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Removing empty collections",
      buf,
      0x16u);
  }

  if ((+[ML3Collection removeOrphanedCollectionsInLibrary:*(void *)(a1 + 32) usingConnection:v3] & 1) == 0)
  {
    __int16 v24 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v35 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@ - [Music App Removal] Failed to remove empty collections", buf, 0xCu);
    }
  }
  __int16 v26 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v28 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    uint64_t v35 = v27;
    __int16 v36 = 2114;
    uint64_t v37 = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Cleaning up artwork",
      buf,
      0x16u);
  }

  if (([*(id *)(a1 + 32) cleanupArtworkWithOptions:30] & 1) == 0)
  {
    id v29 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v31 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      uint64_t v35 = v30;
      __int16 v36 = 2114;
      uint64_t v37 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@ [Music App Removal] %{public}@; Artwork cleanup failed",
        buf,
        0x16u);
    }
  }
  return 1;
}

uint64_t sub_100067058(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 32) + 8 * a3) = a2;
  return result;
}

void sub_100067064(id a1, ICConnectionConfiguration *a2, unint64_t a3, BOOL *a4)
{
  +[BaseRequestHandler handlerForConfiguration:](ICDCloudMusicLibraryRequestHandler, "handlerForConfiguration:", a2, a4);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v4 handleMusicAppInstalled];
}

void sub_10006722C(uint64_t a1)
{
  id v2 = +[ICDeviceInfo currentDeviceInfo];
  unsigned int v3 = [v2 isAppleTV];

  id v4 = [*(id *)(a1 + 32) accountManager];
  uint64_t v5 = v4;
  if (!v3) {
    goto LABEL_6;
  }
  id v6 = [v4 libraryManagementPolicy];

  id v7 = *(void **)(a1 + 32);
  if (v6 != (id)1)
  {
    id v4 = [v7 accountManager];
    uint64_t v5 = v4;
LABEL_6:
    [v4 updateState];

    uint64_t v11 = [*(id *)(a1 + 32) handlerCoordinator];
    uint64_t v12 = [*(id *)(a1 + 32) accountManager];
    id v13 = [v12 stateChange];
    [v11 updateHandlersWithAccountStateChange:v13];

LABEL_7:
    goto LABEL_8;
  }
  uint64_t v8 = [v7 handlerCoordinator];
  unsigned int v9 = [v8 isSetupCompleted];

  __int16 v10 = *(unsigned char **)(a1 + 32);
  if (!v9)
  {
    if (v10[10]) {
      goto LABEL_8;
    }
    v10[10] = 1;
    uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      int v25 = 134217984;
      uint64_t v26 = v24;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Deferring library policy management change till handler coordinator is fully initialized", (uint8_t *)&v25, 0xCu);
    }
    goto LABEL_7;
  }
  [v10 _transitionAppleTVToParallelMultiUserLibraryManagementPolicy];
LABEL_8:
  id v14 = *(void **)(a1 + 32);
  uint64_t v15 = [v14 accountManager];
  uint64_t v16 = [v15 activeConfiguration];
  [v14 _ensureSubscriptionInformationIsUpToDateForConfiguration:v16];

  uint64_t v17 = *(void **)(a1 + 32);
  uint64_t v18 = [v17 accountManager];
  uint64_t v19 = [v18 activeConfiguration];
  [v17 _updateAirPlaySettingsForConfiguration:v19];

  uint64_t v20 = +[ICDeviceInfo currentDeviceInfo];
  if (([v20 isIPhone] & 1) != 0 || objc_msgSend(v20, "isIPod"))
  {
    int v21 = +[ICMusicLibraryRecommendationController sharedLibraryRecommendationController];
    uint64_t v22 = [*(id *)(a1 + 32) accountManager];
    uint64_t v23 = [v22 activeConfiguration];
    [v21 handleAccountStateChange:v23];
  }
  [*(id *)(a1 + 32) _updateAccountServerCachedData];
}

void sub_100067680(uint64_t a1, void *a2)
{
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100067830;
  v16[3] = &unk_1001BE408;
  id v17 = a2;
  id v3 = v17;
  id v4 = objc_retainBlock(v16);
  uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ensuring that we have off-line music subscription keys if the user has a slot", buf, 2u);
  }

  id v6 = [*(id *)(a1 + 32) userIdentityStore];
  [*(id *)(a1 + 32) userIdentity];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100067844;
  v10[3] = &unk_1001BB418;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  id v12 = v6;
  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = v4;
  id v7 = v6;
  id v8 = v11;
  unsigned int v9 = v4;
  [v7 getPropertiesForUserIdentity:v8 completionHandler:v10];
}

id sub_100067830(uint64_t a1, uint64_t a2)
{
  byte_1001F3870 = 0;
  return [*(id *)(a1 + 32) finishWithError:a2];
}

void sub_100067844(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 DSID];
  id v7 = [v6 unsignedLongLongValue];

  if (a2 && v7)
  {
    id v8 = +[ICMusicSubscriptionFairPlayController sharedController];
    id v30 = 0;
    unsigned int v9 = [v8 getKeyStatusForAccountUniqueIdentifier:v7 error:&v30];
    id v10 = v30;

    if (v10)
    {
      id v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        id v32 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to get current subscription key status - skipping key refresh. err=%{public}@", buf, 0xCu);
      }

      id v12 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    else
    {
      if (![v9 hasOfflinePlaybackKeys])
      {
        id v15 = objc_alloc((Class)ICStoreRequestContext);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100067C0C;
        v27[3] = &unk_1001BB3C8;
        id v28 = *(id *)(a1 + 32);
        id v29 = *(id *)(a1 + 40);
        id v16 = [v15 initWithBlock:v27];
        id v17 = +[ICMusicSubscriptionStatusController sharedStatusController];
        id v18 = [objc_alloc((Class)ICMusicSubscriptionStatusRequest) initWithStoreRequestContext:v16];
        [v18 setCarrierBundleProvisioningStyle:1];
        [v18 setShouldIgnoreCache:0];
        [v18 setAllowsFallbackToExpiredStatus:1];
        [v18 setAllowsFallbackToStatusNeedingReload:1];
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_100067CBC;
        void v22[3] = &unk_1001BB3F0;
        id v19 = *(id *)(a1 + 56);
        id v23 = v17;
        id v24 = v16;
        uint64_t v25 = *(void *)(a1 + 48);
        id v26 = v19;
        id v20 = v16;
        id v21 = v17;
        [v21 performSubscriptionStatusRequest:v18 withCompletionHandler:v22];

        goto LABEL_15;
      }
      id v14 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        id v32 = v7;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Offline subscription keys already present for DSID %llu - skipping key refresh", buf, 0xCu);
      }

      id v12 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    v12();
LABEL_15:

    goto LABEL_16;
  }
  uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No account properties - skipping subscription key refresh. err=%{public}@", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_16:
}

void sub_100067C0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setAllowsExpiredBags:1];
  [v3 setIdentity:*(void *)(a1 + 32)];
  [v3 setIdentityStore:*(void *)(a1 + 40)];
  id v4 = +[ICClientInfo defaultInfo];
  [v3 setClientInfo:v4];

  id v5 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v3 setAuthenticationProvider:v5];
}

void sub_100067CBC(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (!v5)
  {
    id v7 = [a2 subscriptionStatus];
    if ([v7 statusType] == (id)1)
    {
      if ([v7 hasCapability:128])
      {
        id v8 = (void *)a1[4];
        uint64_t v9 = a1[5];
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_100067F08;
        v15[3] = &unk_1001BD2F8;
        id v10 = (void *)a1[7];
        void v15[4] = a1[6];
        id v16 = v10;
        [v8 refreshSubscriptionUsingRequestContext:v9 withCompletionHandler:v15];

LABEL_14:
        goto LABEL_15;
      }
      id v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        id v18 = v7;
        id v12 = "Subscription not enabled - skipping key refresh. status=%{public}@";
        uint64_t v13 = v11;
        uint32_t v14 = 12;
        goto LABEL_12;
      }
    }
    else
    {
      id v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        id v12 = "Subscription not enabled - skipping key refresh";
        uint64_t v13 = v11;
        uint32_t v14 = 2;
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
      }
    }

    (*(void (**)(void))(a1[7] + 16))();
    goto LABEL_14;
  }
  id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to obtain subscription status - skipping key refresh. err=%{public}@", buf, 0xCu);
  }

  (*(void (**)(void))(a1[7] + 16))();
LABEL_15:
}

void sub_100067F08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138543618;
      id v15 = v6;
      __int16 v16 = 2114;
      id v17 = v5;
      uint64_t v9 = "Subscription refresh complete. status=%{public}@, err=%{public}@";
      id v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, (uint8_t *)&v14, v12);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138543362;
    id v15 = v5;
    uint64_t v9 = "Subscription refresh complete. status=%{public}@";
    id v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
    goto LABEL_6;
  }

  [*(id *)(a1 + 32) refreshEnhancedAudioSharedKeys];
  (*(void (**)(void, id, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v6, v13);
}

void sub_1000686FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100068720(uint64_t a1)
{
  sub_1000633DC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPHomeMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3898 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPHomeMonitorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDServer.m", 83, @"Unable to find class %s", "MPHomeMonitor");

    __break(1u);
  }
}

void sub_1000687E8(uint64_t a1)
{
  sub_1000633DC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPHomeUserMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F38A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPHomeUserMonitorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDServer.m", 84, @"Unable to find class %s", "MPHomeUserMonitor");

    __break(1u);
  }
}

void sub_1000688B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 hasCapability:128])
  {
    id v4 = [*(id *)(a1 + 32) valueForDatabaseProperty:@"MLLastUploadedExplicitContentAllowedBoolean"];
    os_log_t v5 = v4;
    if (v4 && *(unsigned __int8 *)(a1 + 64) == [v4 BOOLValue])
    {
      id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)buf = 67109120;
        LODWORD(v21) = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "parental control settings have not changed - allowExplicitContent %d", buf, 8u);
      }
    }
    else
    {
      id v9 = [objc_alloc((Class)ICSetParentalControlRequestOperation) initWithRequestContext:*(void *)(a1 + 40) allowsExplicitContent:*(unsigned __int8 *)(a1 + 64) isAutomatic:*(unsigned __int8 *)(a1 + 65)];
      id v10 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v11 = [*(id *)(a1 + 32) accountDSID];
        unsigned int v12 = [v5 BOOLValue];
        int v13 = *(unsigned __int8 *)(a1 + 64);
        int v14 = *(unsigned __int8 *)(a1 + 65);
        *(_DWORD *)buf = 138478595;
        id v21 = v11;
        __int16 v22 = 1024;
        *(_DWORD *)id v23 = v12;
        *(_WORD *)&void v23[4] = 1024;
        *(_DWORD *)&v23[6] = v13;
        __int16 v24 = 1024;
        int v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "updating explicit content. dsid=%{private}@, lastUploadedValue=%{BOOL}u, setting allowsExplicitContent=%{BOOL}u, automatic=%{BOOL}u", buf, 0x1Eu);
      }
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100068BCC;
      v16[3] = &unk_1001BB358;
      id v17 = v9;
      id v18 = *(id *)(a1 + 32);
      char v19 = *(unsigned char *)(a1 + 64);
      id v6 = v9;
      id v15 = +[NSBlockOperation blockOperationWithBlock:v16];
      [v6 setName:@"com.apple.itunescloudd.setParentalControlRequestOperation"];
      [v15 addDependency:v6];
      [*(id *)(a1 + 48) addBackgroundOperation:v6 priority:1];
      [*(id *)(a1 + 48) addOperation:v15 priority:1];
    }
  }
  else
  {
    os_log_t v5 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(a1 + 56) userIdentity];
      *(_DWORD *)buf = 138543618;
      id v21 = v8;
      __int16 v22 = 2114;
      *(void *)id v23 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User Identity %{public}@ has subscription status %{public}@.", buf, 0x16u);
    }
  }
}

void sub_100068BCC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];
  if (v2)
  {
    id v3 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 48);
      v7[0] = 67109378;
      v7[1] = v4;
      __int16 v8 = 2114;
      id v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Could not update parental settings to %d - error %{public}@.", (uint8_t *)v7, 0x12u);
    }
  }
  else
  {
    os_log_t v5 = *(void **)(a1 + 40);
    id v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
    [v5 setValue:v6 forDatabaseProperty:@"MLLastUploadedExplicitContentAllowedBoolean"];
  }
}

void sub_100068FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100068FF4(uint64_t a1)
{
  sub_1000633DC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3888 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPMediaQueryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDServer.m", 82, @"Unable to find class %s", "MPMediaQuery");

    __break(1u);
  }
}

id sub_1000690BC()
{
  uint64_t v4 = 0;
  os_log_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1001F3890;
  uint64_t v7 = qword_1001F3890;
  if (!qword_1001F3890)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000691A0;
    v3[3] = &unk_1001BE9E8;
    v3[4] = &v4;
    sub_1000691A0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100069188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000691A0(uint64_t a1)
{
  sub_1000633DC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3890 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDServer.m", 81, @"Unable to find class %s", "MPMediaLibrary");

    __break(1u);
  }
}

void sub_10006955C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isStartupSequenceCompleted];
  id v3 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ICDServer %p - _completeStartupSequenceIfNeeded - Nothing to do [startup sequence completed]", buf, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Completing server setup ....", buf, 0xCu);
    }

    dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56));
    [*(id *)(a1 + 32) _initializeAncillaryServices];
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 2. Services initialized...", buf, 0xCu);
    }

    id v9 = *(void **)(a1 + 32);
    id v10 = [v9 accountManager];
    os_log_type_t v11 = [v10 supportedConfigurations];
    [v9 _setupMPMediaLibraryFilteringForConfigurations:v11];

    unsigned int v12 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 3. MediaLibrary filtering setup completed...", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _startAncillaryServices];
    int v14 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 4. Services started...", buf, 0xCu);
    }

    __int16 v16 = *(void **)(a1 + 32);
    id v17 = [v16 accountManager];
    id v18 = [v17 supportedConfigurations];
    [v16 _migrateToLatestUserVersionForConfigurations:v18];

    char v19 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 5. Migration completed...", buf, 0xCu);
    }

    id v21 = [*(id *)(a1 + 32) accountManager];
    [v21 updateState];

    __int16 v22 = [*(id *)(a1 + 32) handlerCoordinator];
    id v23 = [*(id *)(a1 + 32) accountManager];
    __int16 v24 = [v23 stateChange];
    [v22 setupHandlersWithAccountStateChange:v24];

    int v25 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 6. Handlers setup...", buf, 0xCu);
    }

    uint64_t v27 = +[NSNotificationCenter defaultCenter];
    [v27 addObserver:*(void *)(a1 + 32) selector:"_handleURLBagProviderDidUpdateBagNotification:" name:ICURLBagProviderDidUpdateBagNotification object:0];

    [*(id *)(a1 + 32) _initializeSocialFeaturesAvailabilityIfNeeded];
    id v28 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 7. Posting notification that the service is ready", buf, 0xCu);
    }

    int v30 = dword_1001F2A80;
    if (dword_1001F2A80 == -1)
    {
      notify_register_check("com.apple.itunescloud.setupcompleted", &dword_1001F2A80);
      int v30 = dword_1001F2A80;
    }
    notify_set_state(v30, 1uLL);
    notify_post("com.apple.itunescloud.setupcompleted");
    uint64_t v31 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - Creating push notification controller...", buf, 0xCu);
    }

    long long v33 = *(void **)(a1 + 32);
    if (!v33[19])
    {
      long long v34 = [CloudPushNotificationController alloc];
      uint64_t v35 = [*(id *)(a1 + 32) accountManager];
      __int16 v36 = [(CloudPushNotificationController *)v34 initWithAccountManager:v35];
      uint64_t v37 = *(void *)(a1 + 32);
      __int16 v38 = *(void **)(v37 + 152);
      *(void *)(v37 + 152) = v36;

      [*(id *)(*(void *)(a1 + 32) + 152) setMediaUserStateCenterServer:*(void *)(*(void *)(a1 + 32) + 176)];
      [*(id *)(*(void *)(a1 + 32) + 152) setPlaybackPositionServer:*(void *)(*(void *)(a1 + 32) + 88)];
      [*(id *)(*(void *)(a1 + 32) + 152) setUserNotificationController:*(void *)(*(void *)(a1 + 32) + 168)];
      long long v33 = *(void **)(a1 + 32);
    }
    id v39 = [v33 accountManager];
    __int16 v40 = [v39 supportedConfigurations];
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_100069CD8;
    v48[3] = &unk_1001BB2B0;
    v48[4] = *(void *)(a1 + 32);
    [v40 enumerateObjectsUsingBlock:v48];

    id v41 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v42 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 8. Explicit content settings updated...", buf, 0xCu);
    }

    id v43 = [*(id *)(a1 + 32) accountManager];
    uint64_t v4 = [v43 activeConfiguration];

    [*(id *)(a1 + 32) _updateAirPlaySettingsForConfiguration:v4];
    __int16 v44 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server Setup - 9. Posting notification that the service is ready", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _ensureSubscriptionInformationIsUpToDateForConfiguration:v4];
    [*(id *)(a1 + 32) _updateEnhancedAudioAvailabilityIfNeeded];
    [*(id *)(a1 + 32) _updateHTTPCookieStoreForContentRestrictions];
    [*(id *)(a1 + 32) _ensureURLResolutionCacheFileExists];
    [*(id *)(a1 + 32) _updateAccountServerCachedData];
    [*(id *)(a1 + 32) setStartupSequenceCompleted:1];
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56));
    __int16 v46 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v50 = v47;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "ICDServer %p - Server setup completed", buf, 0xCu);
    }
  }
}

id sub_100069CD8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateAllowsExplicitContentSettingForConfiguration:a2 automatically:1];
}

uint64_t sub_100069EB0(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 8) = *(unsigned char *)(result + 40);
  return result;
}

id sub_10006A80C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 136) resume];
  unsigned int v2 = *(void **)(*(void *)(a1 + 32) + 144);

  return _[v2 startSystemXPCService];
}

void sub_10006A850(id a1)
{
  id v1 = +[ICPlayActivityServer sharedInstance];
  [v1 start];

  id v2 = +[CloudContentTasteUpdateRequestListener sharedContentTasteRequestListener];
  [v2 start];
}

void sub_10006A944(uint64_t a1)
{
  id v2 = +[ICDeviceInfo currentDeviceInfo];
  unsigned __int8 v3 = [v2 isAudioAccessory];

  if (v3)
  {
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v5 = +[ICDeviceInfo currentDeviceInfo];
    unsigned int v6 = [v5 isAppleTV];

    uint64_t v4 = v6;
  }
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v37 = 134218240;
    uint64_t v38 = v8;
    __int16 v39 = 1024;
    int v40 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ICDServer %p - policyType=%d", (uint8_t *)&v37, 0x12u);
  }

  id v9 = *(void **)(a1 + 32);
  if (!v9[14])
  {
    id v10 = [[ICDAccountManager alloc] initWithLibraryManagementPolicy:v4];
    uint64_t v11 = *(void *)(a1 + 32);
    unsigned int v12 = *(void **)(v11 + 112);
    *(void *)(v11 + 112) = v10;

    id v9 = *(void **)(a1 + 32);
  }
  if (!v9[15])
  {
    uint64_t v13 = [[ICDHandlerCoordinator alloc] initWithLibraryManagementPolicy:v4 backgroundTaskScheduler:*(void *)(a1 + 32)];
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 120);
    *(void *)(v14 + 120) = v13;

    __int16 v16 = +[ICDeviceInfo currentDeviceInfo];
    unsigned int v17 = [v16 isAppleTV];

    id v9 = *(void **)(a1 + 32);
    if (v17)
    {
      [v9 _retryLoadingCloudLibraryForSecondaryAccountsOnAppleTV];
      id v9 = *(void **)(a1 + 32);
    }
  }
  if (!v9[16])
  {
    id v18 = [[ICDBackgroundTaskManager alloc] initWithAccountManager:*(void *)(*(void *)(a1 + 32) + 112) handlerCoordinator:*(void *)(*(void *)(a1 + 32) + 120)];
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void **)(v19 + 128);
    *(void *)(v19 + 128) = v18;
  }
  id v21 = +[ICDeviceInfo currentDeviceInfo];
  unsigned __int8 v22 = [v21 isMac];

  if ((v22 & 1) == 0)
  {
    id v23 = *(void **)(a1 + 32);
    if (!v23[17])
    {
      uint64_t v24 = +[ICDelegateAccountStoreServiceListener machServiceListener];
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void **)(v25 + 136);
      *(void *)(v25 + 136) = v24;

      id v23 = *(void **)(a1 + 32);
    }
    if (!v23[18])
    {
      id v27 = objc_alloc((Class)ICStoreRequestContext);
      id v28 = +[ICClientInfo defaultInfo];
      id v29 = [v27 initWithClientInfo:v28];
      uint64_t v30 = +[ICDelegationProviderService systemServiceWithRequestContext:v29];
      uint64_t v31 = *(void *)(a1 + 32);
      uint64_t v32 = *(void **)(v31 + 144);
      *(void *)(v31 + 144) = v30;

      id v23 = *(void **)(a1 + 32);
    }
    if (!v23[21])
    {
      long long v33 = objc_alloc_init(CloudUserNotificationController);
      uint64_t v34 = *(void *)(a1 + 32);
      uint64_t v35 = *(void **)(v34 + 168);
      *(void *)(v34 + 168) = v33;

      __int16 v36 = [*(id *)(a1 + 32) cloudBadgingService];
      [*(id *)(*(void *)(a1 + 32) + 168) setBadgeControllerProtocol:v36];
    }
  }
}

void sub_10006AD70(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Handling SIGTERM event", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained stop];
  xpc_transaction_exit_clean();
}

id sub_10006BD8C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateAllowsExplicitContentSettingForConfiguration:a2 automatically:0];
}

void sub_10006BD9C(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    unsigned __int8 v3 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to remove explicit playback intents. err=%{public}@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_10006C030(uint64_t a1)
{
  id v2 = +[ICDeviceInfo currentDeviceInfo];
  unsigned int v3 = [v2 isAppleTV];

  if (v3)
  {
    int v4 = [*(id *)(a1 + 32) internalOperationQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10006C16C;
    v5[3] = &unk_1001BEC20;
    void v5[4] = *(void *)(a1 + 32);
    [v4 addOperationWithBlock:v5];
  }
}

void sub_10006C0EC(uint64_t a1)
{
  id v2 = *(unsigned char **)(a1 + 32);
  if (v2[10])
  {
    unsigned int v3 = [v2 accountManager];
    id v4 = [v3 libraryManagementPolicy];

    if (v4 == (id)1)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 10) = 0;
      uint64_t v5 = *(void **)(a1 + 32);
      [v5 _transitionAppleTVToParallelMultiUserLibraryManagementPolicy];
    }
  }
}

void sub_10006C16C(uint64_t a1)
{
  id v2 = *(unsigned char **)(a1 + 32);
  if (v2[10])
  {
    unsigned int v3 = [v2 accountManager];
    id v4 = [v3 libraryManagementPolicy];

    if (v4 == (id)1)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 10) = 0;
      uint64_t v5 = *(void **)(a1 + 32);
      [v5 _transitionAppleTVToParallelMultiUserLibraryManagementPolicy];
    }
  }
}

void sub_10006C6F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[CellularDataEnabled] An active account exists, updating Purchase History...", buf, 2u);
    }

    if ((uint64_t)[*(id *)(a1 + 32) jaliscoOnDiskDatabaseRevision] < 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = 4;
    }
    id v9 = +[BaseRequestHandler handlerForConfiguration:*(void *)(a1 + 40)];
    id v10 = [*(id *)(a1 + 40) clientIdentity];
    [v9 updateJaliscoLibraryWithClientIdentity:v10 forReason:v8 completionHandler:&stru_1001BB268];

    if ([v5 isActiveLocker])
    {
      uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[CellularDataEnabled] An active locker account exists, updating iCloud Music Library...", v15, 2u);
      }

      if ((uint64_t)[*(id *)(a1 + 32) sagaOnDiskDatabaseRevision] < 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = 4;
      }
      uint64_t v13 = +[BaseRequestHandler handlerForConfiguration:*(void *)(a1 + 40)];
      uint64_t v14 = [*(id *)(a1 + 40) clientIdentity];
      [v13 updateSagaLibraryWithClientIdentity:v14 forReason:v12 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:&stru_1001BB288];
    }
  }
}

uint64_t sub_10006D168(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 72) enumerateKeysAndObjectsUsingBlock:&stru_1001BB1D0];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 72);
  *(void *)(v2 + 72) = 0;

  id v4 = +[CloudMusicSubscriptionStatusServiceListener sharedMusicSubscriptionStatusServiceListener];
  [v4 stop];

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 200))
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v5 + 200));
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 200);
    *(void *)(v6 + 200) = 0;

    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v5 + 8))
  {
    [(id)v5 _stopAncillaryServices];
    *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
    uint64_t v5 = *(void *)(a1 + 32);
  }
  [(id)v5 _tearDownKVO];
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 184);
  if (result)
  {
    uint64_t result = MSVLogRemoveStateHandler();
    *(void *)(*(void *)(a1 + 32) + 184) = 0;
  }
  return result;
}

void sub_10006D224(id a1, NSString *a2, NSXPCListener *a3, BOOL *a4)
{
}

uint64_t sub_10006D39C(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v1 = &_dispatch_main_q;
  objc_copyWeak(&v4, &location);
  uint64_t v2 = MSVLogAddStateHandler();
  objc_destroyWeak(&v4);

  objc_destroyWeak(&location);
  return v2;
}

void sub_10006D464(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_10006D480(uint64_t a1)
{
  return [*(id *)(a1 + 32) _completeStartupSequenceIfNeeded];
}

uint64_t sub_10006D488(uint64_t a1, char a2, void *a3)
{
  uint64_t v5 = a3;
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v8 = WeakRetained;
    if (WeakRetained)
    {
      id v9 = [WeakRetained _stateDump];
      uint64_t v6 = v5[2](v5, v9);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_10006D790(id a1)
{
  qword_1001F3860 = [[ICDServer alloc] _init];

  _objc_release_x1();
}

void sub_10006D948(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  uint64_t v5 = +[NSMutableArray array];
  uint64_t v6 = [v3 executeQuery:@"SELECT DISTINCT (fetchable_artwork_token), purchase_history_id, media_type FROM best_artwork_token LEFT OUTER JOIN artwork ON fetchable_artwork_token = artwork_token JOIN item_store ON entity_pid = item_store.item_pid AND entity_type = 0 JOIN item USING (item_pid) WHERE artwork_token IS NULL AND best_artwork_token.artwork_type = ? AND fetchable_artwork_source_type = ? GROUP BY fetchable_artwork_token", &off_1001CCC70 withParameters];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10006DA74;
  void v9[3] = &unk_1001BEBB0;
  id v7 = *(id *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 48);
  id v10 = v7;
  id v11 = v5;
  id v8 = v5;
  [v6 enumerateRowsWithBlock:v9];
  [*(id *)(a1 + 40) importCloudArtworkForRequests:v8];
}

void sub_10006DA74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = [v3 stringForColumnIndex:0];
  id v4 = [v3 int64ForColumnIndex:1];
  id v5 = [v3 intForColumnIndex:2];

  uint64_t v6 = [[CloudArtworkImportRequest alloc] initWithClientIdentity:*(void *)(a1 + 32)];
  [(CloudArtworkImportRequest *)v6 setCloudID:v4];
  [(CloudArtworkImportRequest *)v6 setToken:v7];
  [(CloudArtworkImportRequest *)v6 setMediaType:v5];
  [(CloudArtworkImportRequest *)v6 setArtworkType:2];
  [(CloudArtworkImportRequest *)v6 setAllowsCellularData:*(unsigned __int8 *)(a1 + 48)];
  [*(id *)(a1 + 40) addObject:v6];
}

void sub_10006DC0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  id v5 = +[NSMutableArray array];
  uint64_t v6 = [v3 executeQuery:@"SELECT DISTINCT (fetchable_artwork_token), purchase_history_id, media_type FROM best_artwork_token LEFT OUTER JOIN artwork ON fetchable_artwork_token = artwork_token JOIN item_store ON entity_pid = item_store.item_pid AND entity_type = 0 JOIN item USING (item_pid) WHERE artwork_token IS NULL AND best_artwork_token.artwork_type = ? AND fetchable_artwork_source_type = ? GROUP BY fetchable_artwork_token", &off_1001CCC58 withParameters];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10006DD38;
  v10[3] = &unk_1001BB720;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = v5;
  id v9 = v5;
  [v6 enumerateRowsWithBlock:v10];
  [*(id *)(a1 + 40) importCloudArtworkForRequests:v9];
}

void sub_10006DD38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = [v3 stringForColumnIndex:0];
  id v4 = [v3 int64ForColumnIndex:1];
  id v5 = [v3 intForColumnIndex:2];

  uint64_t v6 = [[CloudArtworkImportRequest alloc] initWithClientIdentity:*(void *)(a1 + 32)];
  [(CloudArtworkImportRequest *)v6 setCloudID:v4];
  [(CloudArtworkImportRequest *)v6 setToken:v7];
  [(CloudArtworkImportRequest *)v6 setMediaType:v5];
  [(CloudArtworkImportRequest *)v6 setArtworkType:1];
  -[CloudArtworkImportRequest setAllowsCellularData:](v6, "setAllowsCellularData:", [*(id *)(a1 + 40) _cellularDataAllowedForMediaType:v5]);
  [*(id *)(a1 + 48) addObject:v6];
}

void sub_10006E54C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v17 = 0;
  id v18 = &v17;
  uint64_t v19 = 0x3032000000;
  uint64_t v20 = sub_10006E8D4;
  id v21 = sub_10006E8E4;
  id v22 = (id)objc_opt_new();
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  if (*(void *)(a1 + 56) == 1)
  {
    v25[0] = &off_1001CBE10;
    id v5 = +[NSNumber numberWithLongLong:*(void *)(a1 + 64)];
    v25[1] = v5;
    uint64_t v6 = +[NSArray arrayWithObjects:v25 count:2];
    [v3 executeQuery:@"SELECT fetchable_artwork_token, store_id FROM best_artwork_token JOIN item_artist ON entity_pid = item_artist_pid AND entity_type = ? WHERE entity_pid = ?", v6 withParameters];
  }
  else
  {
    v24[0] = &off_1001CBE28;
    id v5 = +[NSNumber numberWithLongLong:*(void *)(a1 + 64)];
    v24[1] = v5;
    uint64_t v6 = +[NSArray arrayWithObjects:v24 count:2];
    [v3 executeQuery:@"SELECT fetchable_artwork_token, store_id FROM best_artwork_token JOIN album_artist ON entity_pid = album_artist_pid AND entity_type = ? WHERE entity_pid = ?", v6 withParameters];
  id v7 = };

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10006E8EC;
  v12[3] = &unk_1001BB7E8;
  void v12[4] = &v17;
  void v12[5] = &v13;
  [v7 enumerateRowsWithBlock:v12];
  if ([(id)v18[5] length] && v14[3])
  {
    uint64_t v8 = [[CloudArtworkImportRequest alloc] initWithClientIdentity:*(void *)(a1 + 32)];
    [(CloudArtworkImportRequest *)v8 setCloudID:v14[3]];
    [(CloudArtworkImportRequest *)v8 setToken:v18[5]];
    [(CloudArtworkImportRequest *)v8 setMediaType:8];
    [(CloudArtworkImportRequest *)v8 setArtworkType:4];
    [(CloudArtworkImportRequest *)v8 setAllowsCellularData:*(unsigned __int8 *)(a1 + 72)];
    [(CloudArtworkImportRequest *)v8 setCompletionHandler:*(void *)(a1 + 48)];
    id v9 = [*(id *)(a1 + 40) artworkImporter];
    id v23 = v8;
    id v10 = +[NSArray arrayWithObjects:&v23 count:1];
    [v9 importCloudArtworkForRequests:v10];

LABEL_9:
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11)
  {
    uint64_t v8 = +[NSError ic_cloudClientErrorWithCode:2015 userInfo:0];
    (*(void (**)(uint64_t, CloudArtworkImportRequest *))(v11 + 16))(v11, v8);
    goto LABEL_9;
  }
LABEL_10:

  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_10006E8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E8D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10006E8E4(uint64_t a1)
{
}

void sub_10006E8EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 stringForColumnIndex:0];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = [v3 int64ForColumnIndex:1];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
}

void sub_10006E9E4(uint64_t a1)
{
  [*(id *)(a1 + 32) setCurrentUpdateOperation:0];
  uint64_t v2 = [*(id *)(a1 + 32) followupUpdateOpertion];

  if (v2)
  {
    id v3 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Running second artist hero image update", v6, 2u);
    }

    uint64_t v4 = [*(id *)(a1 + 32) followupUpdateOpertion];
    uint64_t v5 = [*(id *)(a1 + 32) operationQueue];
    [v5 addOperation:v4];

    [*(id *)(a1 + 32) setCurrentUpdateOperation:v4];
    [*(id *)(a1 + 32) setFollowupUpdateOpertion:0];
  }
}

void sub_10006EBE4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) powerAssertionIdentifier];
  CPSetPowerAssertionWithIdentifier();

  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    if (!v4)
    {
      uint64_t v5 = [*(id *)(a1 + 32) watchdog];
      [v5 suspend];

      uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [*(id *)(a1 + 32) powerAssertionIdentifier];
        *(_DWORD *)buf = 138543362;
        uint64_t v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Releasing power assertion: %{public}@", buf, 0xCu);
      }
      [*(id *)(a1 + 32) _artistHeroImageUpdateFinished];
      return;
    }
    goto LABEL_10;
  }
  if (!v4)
  {
LABEL_10:
    if (v4 < v3)
    {
      id v11 = [*(id *)(a1 + 32) watchdog];
      [v11 resume];
    }
    return;
  }
  uint64_t v8 = [*(id *)(a1 + 32) watchdog];
  [v8 resume];

  id v9 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = [*(id *)(a1 + 32) powerAssertionIdentifier];
    *(_DWORD *)buf = 138543362;
    uint64_t v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Taking power assertion: %{public}@", buf, 0xCu);
  }
}

id sub_10006EF90(uint64_t a1)
{
  [*(id *)(a1 + 32) setFollowupUpdateOpertion:0];
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = [*(id *)(a1 + 32) operationQueue];
    [v2 waitUntilAllOperationsAreFinished];
  }
  unint64_t v3 = *(void **)(a1 + 32);

  return [v3 setCurrentUpdateOperation:0];
}

void sub_10006F0B0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) musicLibrary];
  id v3 = [v2 currentRevision];

  unint64_t v4 = [*(id *)(a1 + 32) musicLibrary];
  uint64_t v5 = [v4 valueForDatabaseProperty:@"MLArtistHeroImageImportDatabaseRevision"];
  id v6 = [v5 longLongValue];

  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if ((uint64_t)v3 > (uint64_t)v6)
  {
    if (v8)
    {
      *(_DWORD *)buf = 134217984;
      id v109 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Searching for artists added since database revision %lld", buf, 0xCu);
    }

    id v9 = +[NSMutableSet set];
    uint64_t v10 = [*(id *)(a1 + 32) musicLibrary];
    id v11 = +[ML3Artist revisionTrackingCode];
    v104[0] = _NSConcreteStackBlock;
    v104[1] = 3221225472;
    v104[2] = sub_10006FB8C;
    v104[3] = &unk_1001BB748;
    id v7 = v9;
    v105 = v7;
    [v10 enumeratePersistentIDsAfterRevision:v6 revisionTrackingCode:v11 maximumRevisionType:0 forMediaTypes:0 inUsersLibrary:0 usingBlock:v104];

    uint64_t v12 = +[NSMutableSet set];
    uint64_t v13 = [*(id *)(a1 + 32) musicLibrary];
    id v14 = +[ML3AlbumArtist revisionTrackingCode];
    v102[0] = _NSConcreteStackBlock;
    v102[1] = 3221225472;
    v102[2] = sub_10006FBF4;
    v102[3] = &unk_1001BB748;
    id v15 = v12;
    id v103 = v15;
    [v13 enumeratePersistentIDsAfterRevision:v6 revisionTrackingCode:v14 maximumRevisionType:0 forMediaTypes:0 inUsersLibrary:0 usingBlock:v102];

    if (-[NSObject count](v7, "count") || [v15 count])
    {
      uint64_t v16 = +[NSMutableSet setWithSet:v7];
      [v16 unionSet:v15];
      uint64_t v17 = [*(id *)(a1 + 32) musicLibrary];
      v98[0] = _NSConcreteStackBlock;
      v98[1] = 3221225472;
      v98[2] = sub_10006FC5C;
      v98[3] = &unk_1001BB798;
      id v99 = v16;
      unsigned int v100 = v7;
      id v101 = v15;
      id v18 = v16;
      [v17 databaseConnectionAllowingWrites:0 withBlock:v98];
    }
    uint64_t v19 = [v7 allObjects];
    uint64_t v20 = +[NSMutableArray arrayWithArray:v19];

    id v21 = [v15 allObjects];
    id v22 = +[NSMutableArray arrayWithArray:v21];

    if (![v20 count] && !objc_msgSend(v22, "count"))
    {
      long long v53 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Found zero new artists and zero new album artists to update", buf, 2u);
      }

      uint64_t v30 = [*(id *)(a1 + 32) musicLibrary];
      sub_10006FDB8(v30, (uint64_t)v3);
      goto LABEL_69;
    }
    id v23 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [v20 count];
      id v25 = [v22 count];
      *(_DWORD *)buf = 134218240;
      id v109 = v24;
      __int16 v110 = 2048;
      id v111 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Found %lu artist(s) and %lu album artist(s) to update", buf, 0x16u);
    }

    uint64_t v26 = [DetermineArtistStoreIDLookupTypeOperation alloc];
    id v27 = [*(id *)(a1 + 32) artworkImporter];
    uint64_t v28 = *(void *)(a1 + 40);
    id v29 = [*(id *)(a1 + 32) operationQueue];
    uint64_t v30 = [(QueueAwareOperation *)v26 initWithArtworkImporter:v27 clientIdentity:v28 operationQueue:v29 artistPersistentIDsToUpdate:v20 albumArtistPersistentIDsToUpdate:v22];

    uint64_t v31 = [*(id *)(a1 + 32) currentUpdateOperation];

    uint64_t v32 = *(void **)(a1 + 32);
    if (!v31)
    {
      __int16 v46 = [v32 operationQueue];
      [v46 addOperation:v30];

      [*(id *)(a1 + 32) setCurrentUpdateOperation:v30];
LABEL_69:

      goto LABEL_70;
    }
    long long v33 = [v32 followupUpdateOpertion];

    uint64_t v34 = *(void **)(a1 + 32);
    if (v33)
    {
      uint64_t v35 = [v34 followupUpdateOpertion];
      unsigned int v36 = [v35 shouldProcessSpecificArtists];

      int v37 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      if (!v36)
      {
        if (v38)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "A follow-up artist hero image update already exists, it should include the specific artist persistent ids.", buf, 2u);
        }

        goto LABEL_69;
      }
      if (v38)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "A follow-up artist hero image update already exists, merging artist persistent ids to update.", buf, 2u);
      }

      __int16 v39 = [*(id *)(a1 + 32) currentUpdateOperation];
      int v40 = [v39 artistPersistentIDsToUpdate];

      id v41 = [*(id *)(a1 + 32) followupUpdateOpertion];
      uint64_t v42 = [v41 artistPersistentIDsToUpdate];

      __int32 v87 = v30;
      if (!v20 || v42)
      {
        if (v20 || !v42)
        {
          uint64_t v83 = v22;
          id v85 = v15;
          uint64_t v81 = v42;
          id v44 = [v42 mutableCopy];
          long long v94 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          __int16 v57 = v20;
          id v58 = v20;
          id v59 = [v58 countByEnumeratingWithState:&v94 objects:v107 count:16];
          if (v59)
          {
            id v60 = v59;
            uint64_t v61 = *(void *)v95;
            do
            {
              for (i = 0; i != v60; i = (char *)i + 1)
              {
                if (*(void *)v95 != v61) {
                  objc_enumerationMutation(v58);
                }
                uint64_t v63 = *(void *)(*((void *)&v94 + 1) + 8 * i);
                if (([v44 containsObject:v63] & 1) == 0
                  && ([v40 containsObject:v63] & 1) == 0)
                {
                  [v44 addObject:v63];
                }
              }
              id v60 = [v58 countByEnumeratingWithState:&v94 objects:v107 count:16];
            }
            while (v60);
          }

          uint64_t v64 = [*(id *)(a1 + 32) followupUpdateOpertion];
          [v64 setArtistPersistentIDsToUpdate:v44];

          uint64_t v20 = v57;
          id v22 = v83;
          id v15 = v85;
          uint64_t v42 = v81;
LABEL_50:

          uint64_t v65 = [*(id *)(a1 + 32) currentUpdateOperation];
          uint64_t v66 = [v65 albumArtistPersistentIDsToUpdate];

          uint64_t v67 = [*(id *)(a1 + 32) followupUpdateOpertion];
          uint64_t v68 = [v67 albumArtistPersistentIDsToUpdate];

          id v89 = v68;
          if (!v22 || v68)
          {
            if (v22 || !v68)
            {
              uint64_t v82 = v42;
              id v86 = v15;
              id v70 = objc_msgSend(v68, "mutableCopy", v20);
              long long v90 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v93 = 0u;
              uint64_t v84 = v22;
              id v72 = v22;
              id v73 = [v72 countByEnumeratingWithState:&v90 objects:v106 count:16];
              if (v73)
              {
                id v74 = v73;
                uint64_t v75 = *(void *)v91;
                do
                {
                  for (j = 0; j != v74; j = (char *)j + 1)
                  {
                    if (*(void *)v91 != v75) {
                      objc_enumerationMutation(v72);
                    }
                    uint64_t v77 = *(void *)(*((void *)&v90 + 1) + 8 * (void)j);
                    if (([v70 containsObject:v77] & 1) == 0
                      && ([v66 containsObject:v77] & 1) == 0)
                    {
                      [v70 addObject:v77];
                    }
                  }
                  id v74 = [v72 countByEnumeratingWithState:&v90 objects:v106 count:16];
                }
                while (v74);
              }

              uint64_t v78 = [*(id *)(a1 + 32) followupUpdateOpertion];
              [v78 setAlbumArtistPersistentIDsToUpdate:v70];

              id v22 = v84;
              id v15 = v86;
              uint64_t v20 = v80;
              uint64_t v42 = v82;
              goto LABEL_68;
            }
            uint64_t v69 = [*(id *)(a1 + 32) followupUpdateOpertion];
            uint64_t v71 = v68;
            id v70 = v69;
          }
          else
          {
            [v22 removeObjectsInArray:v66];
            uint64_t v69 = [*(id *)(a1 + 32) followupUpdateOpertion];
            id v70 = v69;
            uint64_t v71 = v22;
          }
          [v69 setAlbumArtistPersistentIDsToUpdate:v71];
LABEL_68:

          uint64_t v30 = v87;
          goto LABEL_69;
        }
        id v43 = [*(id *)(a1 + 32) followupUpdateOpertion];
        id v44 = v43;
        uint64_t v45 = v42;
      }
      else
      {
        [v20 removeObjectsInArray:v40];
        id v43 = [*(id *)(a1 + 32) followupUpdateOpertion];
        id v44 = v43;
        uint64_t v45 = v20;
      }
      [v43 setArtistPersistentIDsToUpdate:v45];
      goto LABEL_50;
    }
    uint64_t v47 = [v34 currentUpdateOperation];
    uint64_t v48 = [v47 artistPersistentIDsToUpdate];

    unsigned __int16 v88 = (void *)v48;
    [v20 removeObjectsInArray:v48];
    [(QueueAwareOperation *)v30 setArtistPersistentIDsToUpdate:v20];
    long long v49 = [*(id *)(a1 + 32) currentUpdateOperation];
    uint64_t v50 = [v49 albumArtistPersistentIDsToUpdate];

    [v22 removeObjectsInArray:v50];
    [(QueueAwareOperation *)v30 setAlbumArtistPersistentIDsToUpdate:v22];
    long long v51 = [(QueueAwareOperation *)v30 artistPersistentIDsToUpdate];
    if ([v51 count])
    {
      long long v52 = v30;
    }
    else
    {
      long long v52 = v30;
      long long v54 = [(QueueAwareOperation *)v30 albumArtistPersistentIDsToUpdate];
      id v55 = [v54 count];

      if (!v55)
      {
        uint64_t v79 = sub_1000EFCD4();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "The artist hero image update that is already in progress will already update all of the requests artists, skipping a follow-up update.", buf, 2u);
        }

        uint64_t v30 = v52;
        goto LABEL_38;
      }
    }
    uint64_t v56 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Artist hero image update already in progress: scheduling a follow-up update.", buf, 2u);
    }

    uint64_t v30 = v52;
    [*(id *)(a1 + 32) setFollowupUpdateOpertion:v52];
LABEL_38:

    goto LABEL_69;
  }
  if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Database revision is the same as the last update.", buf, 2u);
  }
LABEL_70:
}

void sub_10006FB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a5)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = +[NSNumber numberWithLongLong:a2];
    [v6 addObject:v7];
  }
}

void sub_10006FBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a5)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = +[NSNumber numberWithLongLong:a2];
    [v6 addObject:v7];
  }
}

void sub_10006FC5C(id *a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = +[ML3DatabaseStatementRenderer defaultRenderer];
  uint64_t v5 = objc_msgSend(v4, "statementWithPrefix:inParameterCount:", @"SELECT entity_pid FROM artwork_token LEFT OUTER JOIN artwork USING (artwork_token) WHERE artwork_token.artwork_source_type = ? AND relative_path != '' AND entity_pid", (char *)objc_msgSend(a1[4], "count") + 1);

  id v6 = +[NSMutableArray arrayWithObject:&off_1001CBDF8];
  id v7 = [a1[4] allObjects];
  [v6 addObjectsFromArray:v7];

  BOOL v8 = [v3 executeQuery:v5 withParameters:v6];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100076B70;
  void v9[3] = &unk_1001BB770;
  id v10 = a1[5];
  id v11 = a1[6];
  [v8 enumerateRowsWithBlock:v9];
}

void sub_10006FDB8(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[NSNumber numberWithLongLong:a2];
  [v3 setValue:v4 forDatabaseProperty:@"MLArtistHeroImageImportDatabaseRevision"];
}

void sub_10007077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1000707C4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100070B20(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v28 = a3;
  +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", (char *)[v6 count] + (void)objc_msgSend(v28, "count"));
  id v30 = (id)objc_claimAutoreleasedReturnValue();
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = v6;
  id v7 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v37;
    uint64_t v10 = ML3ArtistPropertyStoreID;
    uint64_t v11 = ML3ArtistPropertyName;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v37 != v9) {
          objc_enumerationMutation(obj);
        }
        id v13 = +[ML3Artist newWithPersistentID:inLibrary:](ML3Artist, "newWithPersistentID:inLibrary:", [*(id *)(*((void *)&v36 + 1) + 8 * i) longLongValue], v5);
        id v14 = [v13 valueForProperty:v10];
        id v15 = [v14 longLongValue];

        if (!v15)
        {
          uint64_t v16 = [v13 valueForProperty:v11];
          if ([v16 length]) {
            [v30 addObject:v16];
          }
        }
      }
      id v8 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    }
    while (v8);
  }

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v17 = v28;
  id v18 = [v17 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v33;
    uint64_t v21 = ML3AlbumArtistPropertyStoreID;
    uint64_t v29 = ML3AlbumArtistPropertyName;
    do
    {
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(void *)v33 != v20) {
          objc_enumerationMutation(v17);
        }
        id v23 = +[ML3AlbumArtist newWithPersistentID:inLibrary:](ML3AlbumArtist, "newWithPersistentID:inLibrary:", [*(id *)(*((void *)&v32 + 1) + 8 * (void)j) longLongValue], v5);
        id v24 = [v23 valueForProperty:v21];
        id v25 = [v24 longLongValue];

        if (!v25)
        {
          uint64_t v26 = [v23 valueForProperty:v29];
          if ([v26 length]) {
            [v30 addObject:v26];
          }
        }
      }
      id v19 = [v17 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v19);
  }

  return v30;
}

id sub_100070E24(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSMutableSet set];
  id v3 = sub_1000742CC(v1);
  uint64_t v17 = ML3ArtistPropertyName;
  id v4 = +[NSArray arrayWithObjects:&v17 count:1];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100074368;
  v14[3] = &unk_1001BEF58;
  id v5 = v2;
  id v15 = v5;
  [v3 enumeratePersistentIDsAndProperties:v4 usingBlock:v14];

  id v6 = sub_1000743C4(v1);

  uint64_t v16 = ML3AlbumArtistPropertyName;
  id v7 = +[NSArray arrayWithObjects:&v16 count:1];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100074460;
  v12[3] = &unk_1001BEF58;
  id v8 = v5;
  id v13 = v8;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v12];

  uint64_t v9 = v13;
  id v10 = v8;

  return v10;
}

void sub_100071010(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) artistNameLibraryMatchURL];
  v26[0] = @"kind";
  v26[1] = @"an";
  v27[0] = @"artist";
  v27[1] = v5;
  id v7 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:2];
  id v8 = objc_msgSend(v6, "ic_URLByAppendingQueryParameters:", v7);
  uint64_t v9 = +[NSMutableURLRequest requestWithURL:v8];

  [v9 setTimeoutInterval:180.0];
  id v10 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v9 requestContext:*(void *)(a1 + 40)];
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  uint64_t v12 = +[ICURLSessionManager defaultSession];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100073E74;
  v20[3] = &unk_1001BD700;
  id v13 = v5;
  uint64_t v14 = *(void *)(a1 + 32);
  id v21 = v13;
  uint64_t v22 = v14;
  id v15 = v11;
  id v23 = v15;
  [v12 enqueueDataRequest:v10 withCompletionHandler:v20];

  dispatch_time_t v16 = dispatch_time(0, 300000000000);
  if (dispatch_semaphore_wait(v15, v16))
  {
    uint64_t v17 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v25 = 300;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to receive response for artist id look up request after %d seconds, cancelling request", buf, 8u);
    }

    id v18 = +[ICURLSessionManager defaultSession];
    [v18 cancelRequest:v10];
  }
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v19 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Noticed cancel flag while looking up artist store ids by name, stopping...", buf, 2u);
    }

    *a3 = 1;
  }
}

void sub_1000714BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 executeQuery:@"SELECT store_id FROM item_artist LEFT OUTER JOIN artwork_token ON item_artist_pid = entity_pid AND entity_type = ? AND artwork_type = ? AND artwork_source_type = ? WHERE store_id != 0" withParameters:&off_1001CCC88];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100071604;
  void v8[3] = &unk_1001BE5B8;
  id v9 = *(id *)(a1 + 32);
  [v4 enumerateRowsWithBlock:v8];
  id v5 = [v3 executeQuery:@"SELECT store_id FROM album_artist LEFT OUTER JOIN artwork_token ON album_artist_pid = entity_pid AND entity_type = ? AND artwork_type = ? AND artwork_source_type = ? WHERE store_id != 0" withParameters:&off_1001CCCA0];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100071660;
  v6[3] = &unk_1001BE5B8;
  id v7 = *(id *)(a1 + 32);
  [v5 enumerateRowsWithBlock:v6];
}

void sub_100071604(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 objectAtIndexedSubscript:0];
  [v2 addObject:v3];
}

void sub_100071660(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 objectAtIndexedSubscript:0];
  [v2 addObject:v3];
}

void sub_100071DB8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v7 = +[NSMutableArray array];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v42 objects:v50 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v43;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v43 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = [*(id *)(*((void *)&v42 + 1) + 8 * i) stringValue];
        [v7 addObject:v13];
      }
      id v10 = [v8 countByEnumeratingWithState:&v42 objects:v50 count:16];
    }
    while (v10);
  }

  id v14 = objc_alloc_init((Class)ICStorePlatformRequest);
  id v15 = objc_alloc((Class)ICStoreRequestContext);
  dispatch_time_t v16 = [*(id *)(a1 + 32) userIdentity];
  id v17 = [v15 initWithIdentity:v16];

  [v14 setRequestContext:v17];
  [v14 setItemIdentifiers:v7];
  [v14 setPersonalizationStyle:1];
  [v14 setProtocolVersion:@"2"];
  dispatch_semaphore_t v18 = dispatch_semaphore_create(0);
  id v19 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v47 = v14;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Sending lookup request: %p", buf, 0xCu);
  }

  long long v34 = _NSConcreteStackBlock;
  uint64_t v35 = 3221225472;
  long long v36 = sub_100073CBC;
  long long v37 = &unk_1001BB8B0;
  id v20 = v8;
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void **)(a1 + 40);
  id v38 = v20;
  uint64_t v39 = v21;
  id v40 = v22;
  id v23 = v18;
  id v41 = v23;
  id v24 = [v14 performWithResponseHandler:&v34];
  int v25 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v47 = v14;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Waiting for lookup request: %p", buf, 0xCu);
  }

  dispatch_time_t v26 = dispatch_time(0, 300000000000);
  intptr_t v27 = dispatch_semaphore_wait(v23, v26);
  id v28 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
  if (v27)
  {
    if (!v29) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134218240;
    id v47 = v14;
    __int16 v48 = 1024;
    int v49 = 300;
    id v30 = "Failed to receive response for lookup request: %p after %d seconds";
    uint64_t v31 = v28;
    uint32_t v32 = 18;
  }
  else
  {
    if (!v29) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    id v47 = v14;
    id v30 = "Received response for lookup request: %p";
    uint64_t v31 = v28;
    uint32_t v32 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
LABEL_18:

  if (objc_msgSend(*(id *)(a1 + 32), "isCancelled", v34, v35, v36, v37))
  {
    long long v33 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Noticed cancel flag while looking up artist hero image URLs, stopping...", buf, 2u);
    }

    *a4 = 1;
  }
}

uint64_t sub_100072204(void *a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1000734FC;
  void v8[3] = &unk_1001BB900;
  id v4 = (void *)a1[4];
  id v5 = (void *)a1[6];
  void v8[4] = a1[5];
  id v9 = v5;
  id v10 = v3;
  id v6 = v3;
  [v4 enumerateObjectsUsingBlock:v8];

  return 1;
}

void sub_100072764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100072784(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 executeQuery:@"SELECT DISTINCT (fetchable_artwork_token), store_id FROM best_artwork_token LEFT OUTER JOIN artwork ON fetchable_artwork_token = artwork_token LEFT OUTER JOIN item_artist ON item_artist_pid = entity_pid WHERE artwork_token IS NULL AND entity_type = ? AND best_artwork_token.artwork_type = ? AND fetchable_artwork_source_type = ? GROUP BY fetchable_artwork_token", &off_1001CCCB8 withParameters];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100072F88;
  void v8[3] = &unk_1001BE5B8;
  id v9 = *(id *)(a1 + 32);
  [v4 enumerateRowsWithBlock:v8];
  id v5 = [v3 executeQuery:@"SELECT DISTINCT (fetchable_artwork_token), store_id FROM best_artwork_token LEFT OUTER JOIN artwork ON fetchable_artwork_token = artwork_token LEFT OUTER JOIN album_artist ON album_artist_pid = entity_pid WHERE artwork_token IS NULL AND entity_type = ? AND best_artwork_token.artwork_type = ? AND fetchable_artwork_source_type = ? GROUP BY fetchable_artwork_token", &off_1001CCCD0 withParameters];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100073028;
  v6[3] = &unk_1001BE5B8;
  id v7 = *(id *)(a1 + 32);
  [v5 enumerateRowsWithBlock:v6];
}

Class sub_1000728CC(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F38B0)
  {
    v6[1] = _NSConcreteStackBlock;
    v6[2] = (void *)3221225472;
    v6[3] = sub_100072F14;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BB970;
    uint64_t v8 = 0;
    qword_1001F38B0 = _sl_dlopen();
  }
  if (!qword_1001F38B0)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudArtistHeroImageImporter.m", 29, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudArtistHeroImageImporter.m", 30, @"Unable to find class %s", "MPMediaLibrary");

LABEL_10:
    __break(1u);
  }
  qword_1001F38A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100072AB8(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = +[NSURL URLWithString:v8];
  id v10 = +[ML3MusicLibrary artworkTokenForArtistHeroURL:v9];
  uint64_t v11 = +[ML3MusicLibrary artworkRelativePathFromToken:v10];
  if (([*(id *)(a1 + 32) hasOriginalArtworkForRelativePath:v11] & 1) == 0)
  {
    dispatch_time_t v16 = [CloudArtworkImportRequest alloc];
    id v17 = [*(id *)(a1 + 40) clientIdentity];
    os_log_t v15 = [(CloudArtworkImportRequest *)v16 initWithClientIdentity:v17];

    dispatch_semaphore_t v18 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Creating request for artwork token: %{public}@", buf, 0xCu);
    }

    -[NSObject setCloudID:](v15, "setCloudID:", [v7 longLongValue]);
    [v15 setToken:v8];
    [v15 setMediaType:8];
    [v15 setArtworkType:4];
    [v15 setAllowsCellularData:*(unsigned __int8 *)(a1 + 56)];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100072E3C;
    v20[3] = &unk_1001BE408;
    id v21 = v10;
    [v15 setCompletionHandler:v20];
    [*(id *)(a1 + 48) addObject:v15];

    goto LABEL_10;
  }
  uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Found hero image on disk for artwork token: %{public}@, attempting to import into database...", buf, 0xCu);
  }

  id v13 = [*(id *)(a1 + 40) musicLibrary];
  unsigned int v14 = [v13 importExistingOriginalArtworkWithArtworkToken:v10 artworkType:4 sourceType:500 mediaType:8];

  if (v14)
  {
    os_log_t v15 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Inserted artist hero image for artwork token: %{public}@", buf, 0xCu);
    }
LABEL_10:
  }
  if ([*(id *)(a1 + 40) isCancelled])
  {
    id v19 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Noticed cancel flag while downloading artist hero images, stopping...", buf, 2u);
    }

    *a4 = 1;
  }
}

void sub_100072E3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Import request for artwork token: %{public}@ failed with error: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

uint64_t sub_100072F14()
{
  uint64_t result = _sl_dlopen();
  qword_1001F38B0 = result;
  return result;
}

void sub_100072F88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [v3 stringForColumnIndex:0];
  id v4 = [v3 int64ForColumnIndex:1];

  uint64_t v5 = +[NSNumber numberWithLongLong:v4];
  [*(id *)(a1 + 32) setObject:v6 forKey:v5];
}

void sub_100073028(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [v3 stringForColumnIndex:0];
  id v4 = [v3 int64ForColumnIndex:1];

  uint64_t v5 = +[NSNumber numberWithLongLong:v4];
  [*(id *)(a1 + 32) setObject:v6 forKey:v5];
}

void sub_1000734FC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cancelled while processing artist artwork tokens.", buf, 2u);
    }

    if (a3) {
      *a3 = 1;
    }
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 40) objectForKey:v5];
    if (v7)
    {
      __int16 v48 = v7;
      __int16 v8 = +[ML3MusicLibrary artworkTokenForArtistHeroURL:v7];
      id v9 = +[NSMutableArray array];
      id v10 = [*(id *)(a1 + 32) musicLibrary];
      int v49 = v5;
      uint64_t v11 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", ML3ArtistPropertyStoreID, [v5 longLongValue]);
      uint64_t v12 = +[ML3Artist queryWithLibrary:v10 predicate:v11];

      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472;
      v63[2] = sub_100073BFC;
      v63[3] = &unk_1001BE4C8;
      id v13 = v9;
      id v64 = v13;
      id v47 = v12;
      [v12 enumeratePersistentIDsUsingBlock:v63];
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      id obj = v13;
      id v14 = [obj countByEnumeratingWithState:&v59 objects:v72 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v60;
        uint64_t v50 = ML3ArtistPropertyName;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(void *)v60 != v16) {
              objc_enumerationMutation(obj);
            }
            dispatch_semaphore_t v18 = *(void **)(*((void *)&v59 + 1) + 8 * i);
            id v19 = [v18 longLongValue];
            id v20 = [*(id *)(a1 + 32) musicLibrary];
            id v21 = +[ML3Artist newWithPersistentID:v19 inLibrary:v20];

            if (v21)
            {
              uint64_t v22 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                id v23 = [v18 longLongValue];
                id v24 = [v21 valueForProperty:v50];
                *(_DWORD *)buf = 138543874;
                uint64_t v67 = v8;
                __int16 v68 = 2048;
                id v69 = v23;
                __int16 v70 = 2114;
                uint64_t v71 = v24;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Setting artist hero image artwork_token '%{public}@' for item_artist with pid: %lld (name = %{public}@)", buf, 0x20u);
              }
              int v25 = [*(id *)(a1 + 32) musicLibrary];
              objc_msgSend(v25, "importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:usingConnection:", objc_msgSend(v21, "persistentID"), 2, v8, 4, 500, *(void *)(a1 + 48));

              dispatch_time_t v26 = [*(id *)(a1 + 32) musicLibrary];
              objc_msgSend(v26, "updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:usingConnection:", objc_msgSend(v21, "persistentID"), 2, 4, *(void *)(a1 + 48), 0.0);
            }
          }
          id v15 = [obj countByEnumeratingWithState:&v59 objects:v72 count:16];
        }
        while (v15);
      }

      intptr_t v27 = +[NSMutableArray array];
      id v28 = [*(id *)(a1 + 32) musicLibrary];
      BOOL v29 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", ML3AlbumArtistPropertyStoreID, [v49 longLongValue]);
      id v30 = +[ML3AlbumArtist queryWithLibrary:v28 predicate:v29];

      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_100073C5C;
      v57[3] = &unk_1001BE4C8;
      id v31 = v27;
      id v58 = v31;
      __int16 v46 = v30;
      [v30 enumeratePersistentIDsUsingBlock:v57];
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      id v32 = v31;
      id v33 = [v32 countByEnumeratingWithState:&v53 objects:v65 count:16];
      if (v33)
      {
        id v34 = v33;
        uint64_t v35 = *(void *)v54;
        uint64_t v51 = ML3AlbumArtistPropertyName;
        do
        {
          for (j = 0; j != v34; j = (char *)j + 1)
          {
            if (*(void *)v54 != v35) {
              objc_enumerationMutation(v32);
            }
            long long v37 = *(void **)(*((void *)&v53 + 1) + 8 * (void)j);
            id v38 = [v37 longLongValue];
            uint64_t v39 = [*(id *)(a1 + 32) musicLibrary];
            id v40 = +[ML3AlbumArtist newWithPersistentID:v38 inLibrary:v39];

            if (v40)
            {
              id v41 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                id v42 = [v37 longLongValue];
                long long v43 = [v40 valueForProperty:v51];
                *(_DWORD *)buf = 138543874;
                uint64_t v67 = v8;
                __int16 v68 = 2048;
                id v69 = v42;
                __int16 v70 = 2114;
                uint64_t v71 = v43;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Setting artist hero image artwork_token '%{public}@' for album_artist with pid: %lld (name = %{public}@)", buf, 0x20u);
              }
              long long v44 = [*(id *)(a1 + 32) musicLibrary];
              objc_msgSend(v44, "importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:usingConnection:", objc_msgSend(v40, "persistentID"), 7, v8, 4, 500, *(void *)(a1 + 48));

              long long v45 = [*(id *)(a1 + 32) musicLibrary];
              objc_msgSend(v45, "updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:usingConnection:", objc_msgSend(v40, "persistentID"), 7, 4, *(void *)(a1 + 48), 0.0);
            }
          }
          id v34 = [v32 countByEnumeratingWithState:&v53 objects:v65 count:16];
        }
        while (v34);
      }

      uint64_t v7 = v48;
      id v5 = v49;
    }
  }
}

void sub_100073BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_100073C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_100073CBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(obj);
        }
        __int16 v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v9 = [v8 stringValue];
        id v10 = [v3 itemForIdentifier:v9];

        uint64_t v11 = [v10 metadataDictionary];
        uint64_t v12 = [v11 objectForKey:@"artwork"];

        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v13 = [*(id *)(a1 + 40) _imageURLFromArtworkInfo:v12];
          if (v13)
          {
            id v14 = (void *)v13;
            [*(id *)(a1 + 48) setObject:v13 forKey:v8];
          }
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v5);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_100073E74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 urlResponse];
  if ([v4 statusCode] == (id)200)
  {
    id v5 = [v3 parsedBodyDictionary];
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "Artwork_Oversize");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      id v36 = v7;
      __int16 v37 = 2114;
      id v38 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Library match results for '%{public}@': %{public}@", buf, 0x16u);
    }
  }
  else
  {
    id v5 = 0;
  }
  __int16 v8 = [v5 objectForKey:@"id"];
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v8 longLongValue];
    if (v9)
    {
      id v32 = v9;
      id v10 = +[ML3ComparisonPredicate predicateWithProperty:ML3ArtistPropertyName equalToValue:*(void *)(a1 + 32)];
      v34[0] = v10;
      uint64_t v29 = ML3ArtistPropertyStoreID;
      uint64_t v11 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:");
      v34[1] = v11;
      uint64_t v12 = +[NSArray arrayWithObjects:v34 count:2];
      uint64_t v13 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v12];

      id v14 = [*(id *)(a1 + 40) musicLibrary];
      id v31 = (void *)v13;
      id v15 = +[ML3Artist anyInLibrary:v14 predicate:v13];

      if (v15)
      {
        long long v16 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          long long v17 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 134218242;
          id v36 = v32;
          __int16 v37 = 2114;
          id v38 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Setting store_id '%lld' for item_artist with name: '%{public}@'", buf, 0x16u);
        }

        long long v18 = +[NSNumber numberWithLongLong:v32];
        [v15 setValue:v18 forProperty:v29];
      }
      id v30 = v15;
      long long v19 = +[ML3ComparisonPredicate predicateWithProperty:ML3AlbumArtistPropertyName equalToValue:*(void *)(a1 + 32)];
      v33[0] = v19;
      uint64_t v28 = ML3AlbumArtistPropertyStoreID;
      id v20 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:");
      v33[1] = v20;
      id v21 = +[NSArray arrayWithObjects:v33 count:2];
      uint64_t v22 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v21];

      id v23 = [*(id *)(a1 + 40) musicLibrary];
      id v24 = +[ML3AlbumArtist anyInLibrary:v23 predicate:v22];

      if (v24)
      {
        int v25 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          dispatch_time_t v26 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 134218242;
          id v36 = v32;
          __int16 v37 = 2114;
          id v38 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Setting store_id '%lld' for album_artist with name: '%{public}@'", buf, 0x16u);
        }

        intptr_t v27 = +[NSNumber numberWithLongLong:v32];
        [v24 setValue:v27 forProperty:v28];
      }
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_1000742CC(void *a1)
{
  uint64_t v1 = ML3ArtistPropertyStoreID;
  id v2 = a1;
  id v3 = +[ML3ComparisonPredicate predicateWithProperty:v1 value:&off_1001CBE88 comparison:1];
  id v4 = +[ML3Artist queryWithLibrary:v2 predicate:v3];

  return v4;
}

void sub_100074368(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  if ([v4 length]) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

id sub_1000743C4(void *a1)
{
  uint64_t v1 = ML3AlbumArtistPropertyStoreID;
  id v2 = a1;
  id v3 = +[ML3ComparisonPredicate predicateWithProperty:v1 value:&off_1001CBE88 comparison:1];
  id v4 = +[ML3AlbumArtist queryWithLibrary:v2 predicate:v3];

  return v4;
}

void sub_100074460(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  if ([v4 length]) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

void sub_1000747CC(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, unsigned char *a5)
{
  __int16 v8 = *(void **)(a1 + 32);
  id v9 = *a3;
  id v10 = [v8 objectForKey:v9];
  uint64_t v11 = v10;
  if (v10) {
    id v12 = [v10 longLongValue];
  }
  else {
    id v12 = 0;
  }
  uint64_t v13 = [*(id *)(a1 + 40) musicLibrary];
  sub_100074BCC(v13, a2, v9, v12);

  unsigned int v14 = [*(id *)(a1 + 40) isCancelled];
  if (v14)
  {
    id v15 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Noticed cancel flag while updating artist store ids, stopping...", v16, 2u);
    }

    *a5 = 1;
  }
}

void sub_1000748E4(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, unsigned char *a5)
{
  __int16 v8 = *(void **)(a1 + 32);
  id v9 = *a3;
  id v10 = [v8 objectForKey:v9];
  uint64_t v11 = v10;
  if (v10) {
    id v12 = [v10 longLongValue];
  }
  else {
    id v12 = 0;
  }
  uint64_t v13 = [*(id *)(a1 + 40) musicLibrary];
  sub_1000749FC(v13, a2, v9, v12);

  unsigned int v14 = [*(id *)(a1 + 40) isCancelled];
  if (v14)
  {
    id v15 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Noticed cancel flag while updating album_artist store ids, stopping...", v16, 2u);
    }

    *a5 = 1;
  }
}

void sub_1000749FC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (a4)
  {
    id v9 = +[ML3ComparisonPredicate predicateWithProperty:ML3EntityPropertyPersistentID equalToInt64:a2];
    id v10 = +[ML3AlbumArtist anyInLibrary:v7 predicate:v9];

    if (v10)
    {
      uint64_t v11 = +[NSNumber numberWithLongLong:a4];
      [v10 setValue:v11 forProperty:ML3AlbumArtistPropertyStoreID];

      id v12 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 134218242;
        id v14 = a4;
        __int16 v15 = 2114;
        id v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Album Artist] Assigned store artist ID %lld to %{public}@", (uint8_t *)&v13, 0x16u);
      }
    }
  }
  else
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138543362;
      id v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Album Artist] No store artist id found for: '%{public}@'", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_100074BCC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (a4)
  {
    id v9 = +[ML3ComparisonPredicate predicateWithProperty:ML3EntityPropertyPersistentID equalToInt64:a2];
    id v10 = +[ML3Artist anyInLibrary:v7 predicate:v9];

    if (v10)
    {
      uint64_t v11 = +[NSNumber numberWithLongLong:a4];
      [v10 setValue:v11 forProperty:ML3ArtistPropertyStoreID];

      id v12 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 134218242;
        id v14 = a4;
        __int16 v15 = 2114;
        id v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Item Artist] Assigned store artist ID %lld to %{public}@", (uint8_t *)&v13, 0x16u);
      }
    }
  }
  else
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138543362;
      id v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Item Artist] No store artist id found for: '%{public}@'", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_1000755A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000755D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 urlResponse];
  if ([v7 statusCode] == (id)200)
  {
    id v8 = [v5 bodyData];
    uint64_t v9 = +[NSJSONSerialization JSONObjectWithData:v8 options:0 error:0];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v12 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count];
      int v17 = 134217984;
      id v18 = v13;
      id v14 = "Received all artist images map with %lu artist ids.";
      __int16 v15 = v12;
      uint32_t v16 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v17, v16);
    }
  }
  else
  {
    id v12 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 134218242;
      id v18 = [v7 statusCode];
      __int16 v19 = 2114;
      id v20 = v6;
      id v14 = "Failed to fetch all artist images map [HTTP %ld] - error: %{public}@";
      __int16 v15 = v12;
      uint32_t v16 = 22;
      goto LABEL_6;
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000760F0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) bulkArtistNameLibraryMatchURL];
  intptr_t v27 = +[NSURLComponents componentsWithURL:v6 resolvingAgainstBaseURL:0];

  id v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v5 count]);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v32;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = [*(id *)(*((void *)&v31 + 1) + 8 * i) stringByAddingPercentEncodingWithAllowedCharacters:*(void *)(a1 + 40)];
        id v14 = +[NSURLQueryItem queryItemWithName:@"an" value:v13];
        [v7 addObject:v14];
      }
      id v10 = [v8 countByEnumeratingWithState:&v31 objects:v37 count:16];
    }
    while (v10);
  }

  [v27 setPercentEncodedQueryItems:v7];
  __int16 v15 = [v27 URL];
  uint32_t v16 = +[NSMutableURLRequest requestWithURL:v15];

  [v16 setTimeoutInterval:180.0];
  id v17 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v16 requestContext:*(void *)(a1 + 48)];
  dispatch_semaphore_t v18 = dispatch_semaphore_create(0);
  __int16 v19 = +[ICURLSessionManager defaultSession];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  void v28[2] = sub_1000764C8;
  v28[3] = &unk_1001BD700;
  v28[4] = *(void *)(a1 + 32);
  id v20 = v8;
  id v29 = v20;
  id v21 = v18;
  id v30 = v21;
  [v19 enqueueDataRequest:v17 withCompletionHandler:v28];

  dispatch_time_t v22 = dispatch_time(0, 300000000000);
  if (dispatch_semaphore_wait(v21, v22))
  {
    id v23 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v36 = 300;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to receive response for bulk artist id look up request after %d seconds, cancelling request", buf, 8u);
    }

    id v24 = +[ICURLSessionManager defaultSession];
    [v24 cancelRequest:v17];
  }
  if ([*(id *)(a1 + 32) isCancelled])
  {
    int v25 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Noticed cancel flag while looking up artist store ids by name, stopping...", buf, 2u);
    }

    *a4 = 1;
  }
}

void sub_1000764C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 urlResponse];
  if ([v4 statusCode] == (id)200)
  {
    id v5 = [v3 parsedBodyDictionary];
    id v6 = os_log_create("com.apple.amp.itunescloudd", "Artwork_Oversize");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      __int16 v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bulk library match results: %{public}@", buf, 0xCu);
    }
  }
  else
  {
    id v5 = 0;
  }
  if ([v5 count])
  {
    id v7 = [*(id *)(a1 + 32) musicLibrary];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10007666C;
    v10[3] = &unk_1001BEA70;
    id v11 = *(id *)(a1 + 40);
    id v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    id v12 = v8;
    uint64_t v13 = v9;
    [v7 performDatabaseTransactionWithBlock:v10];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t sub_10007666C(id *a1, void *a2)
{
  id v40 = a2;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = a1[4];
  id v3 = [obj countByEnumeratingWithState:&v46 objects:v60 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v47;
    uint64_t v36 = ML3ArtistPropertyName;
    uint64_t v42 = ML3ArtistPropertyStoreID;
    uint64_t v35 = ML3AlbumArtistPropertyName;
    uint64_t v41 = ML3AlbumArtistPropertyStoreID;
    id v7 = &ML3TrackPropertyLyrics_ptr;
    *(void *)&long long v4 = 134218242;
    long long v34 = v4;
    uint64_t v37 = *(void *)v47;
    id v38 = a1;
    do
    {
      id v8 = 0;
      id v39 = v5;
      do
      {
        if (*(void *)v47 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v46 + 1) + 8 * (void)v8);
        id v10 = objc_msgSend(a1[5], "objectForKeyedSubscript:", v9, v34);
        if (objc_opt_respondsToSelector())
        {
          id v11 = [v10 longLongValue];
          if (v11)
          {
            id v12 = v11;
            long long v44 = v10;
            uint64_t v13 = +[ML3ComparisonPredicate predicateWithProperty:v36 equalToValue:v9];
            v59[0] = v13;
            id v14 = +[ML3ComparisonPredicate predicateWithProperty:v42 equalToInt64:0];
            v59[1] = v14;
            __int16 v15 = [v7[209] arrayWithObjects:v59 count:2];
            uint64_t v16 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v15];

            id v17 = [a1[6] musicLibrary];
            long long v45 = (void *)v16;
            dispatch_semaphore_t v18 = +[ML3Artist anyInLibrary:v17 predicate:v16];

            if (v18)
            {
              __int16 v19 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v34;
                id v56 = v12;
                __int16 v57 = 2114;
                uint64_t v58 = v9;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Setting store_id '%lld' for item_artist with name: '%{public}@'", buf, 0x16u);
              }

              id v20 = +[NSNumber numberWithLongLong:v12];
              long long v54 = v20;
              id v21 = +[NSArray arrayWithObjects:&v54 count:1];
              uint64_t v53 = v42;
              dispatch_time_t v22 = +[NSArray arrayWithObjects:&v53 count:1];
              [v18 setValues:v21 forProperties:v22 usingConnection:v40];
            }
            id v23 = +[ML3ComparisonPredicate predicateWithProperty:v35 equalToValue:v9];
            v52[0] = v23;
            id v24 = +[ML3ComparisonPredicate predicateWithProperty:v41 equalToInt64:0];
            v52[1] = v24;
            int v25 = +[NSArray arrayWithObjects:v52 count:2];
            dispatch_time_t v26 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v25];

            a1 = v38;
            intptr_t v27 = [v38[6] musicLibrary];
            uint64_t v28 = +[ML3AlbumArtist anyInLibrary:v27 predicate:v26];

            if (v28)
            {
              id v29 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v34;
                id v56 = v12;
                __int16 v57 = 2114;
                uint64_t v58 = v9;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Setting store_id '%lld' for album_artist with name: '%{public}@'", buf, 0x16u);
              }

              id v30 = +[NSNumber numberWithLongLong:v12];
              uint64_t v51 = v30;
              long long v31 = +[NSArray arrayWithObjects:&v51 count:1];
              uint64_t v50 = v41;
              long long v32 = +[NSArray arrayWithObjects:&v50 count:1];
              [v28 setValues:v31 forProperties:v32 usingConnection:v40];
            }
            uint64_t v6 = v37;
            id v5 = v39;
            id v7 = &ML3TrackPropertyLyrics_ptr;
            id v10 = v44;
          }
        }

        id v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      id v5 = [obj countByEnumeratingWithState:&v46 objects:v60 count:16];
    }
    while (v5);
  }

  return 1;
}

void sub_100076B70(uint64_t a1, void *a2)
{
  id v3 = [a2 int64ForColumnIndex:0];
  long long v4 = *(void **)(a1 + 32);
  id v5 = +[NSNumber numberWithLongLong:v3];
  [v4 removeObject:v5];

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = +[NSNumber numberWithLongLong:v3];
  [v6 removeObject:v7];
}

void sub_100076E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100076EB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained accessQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100076F5C;
    block[3] = &unk_1001BEC20;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

void sub_100076F5C(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "Artwork_Oversize");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) operationQueue];
    long long v4 = [v3 operations];
    int v8 = 138543362;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Watchdog fired, operation queue contents: %{public}@", (uint8_t *)&v8, 0xCu);
  }
  id v5 = [*(id *)(a1 + 32) powerAssertionIdentifier];
  CPSetPowerAssertionWithIdentifier();

  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = [*(id *)(a1 + 32) powerAssertionIdentifier];
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Watchdog fired, releasing power assertion: %{public}@", (uint8_t *)&v8, 0xCu);
  }
}

id sub_100077ED4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _savePendingChanges:0];
}

uint64_t sub_100077FD0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100077FE0(uint64_t a1)
{
}

uint64_t sub_100077FE8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) _pendingChanges];

  return _objc_release_x1();
}

id sub_1000781A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v6) {
    return _[v5 _addPendingChangesForContentTasteUpdateOperation:v7 invalidateLocalCache:*(unsigned __int8 *)(a1 + 56)];
  }
  else {
    return _objc_msgSend(v5, "_removePendingChangesForContentTasteUpdateOperation:", v7, a4);
  }
}

void sub_10007888C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  int v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = objc_msgSend(v6, "msv_description");
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v9;
      __int16 v29 = 2114;
      id v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Finished request to end collaboration error=%{public}@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished request to end collaboration", buf, 0xCu);
  }

  uint64_t v12 = (uint64_t)[v5 responseCode];
  if (v12 > 399)
  {
    if (v12 == 404 || v12 == 400)
    {
      uint64_t v13 = 3;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  if (v12 != 200 && v12 != 204) {
LABEL_13:
  }
    uint64_t v13 = 2;
LABEL_14:
  [*(id *)(a1 + 32) setStatus:v13];
  [*(id *)(a1 + 32) setError:v6];
  if (v6)
  {
    unsigned __int8 v14 = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 56))
    {
      id v15 = v5;
      uint64_t v16 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v15 convertedPlaylistCloudLibraryID]);
      uint64_t v17 = *(void *)(a1 + 32);
      dispatch_semaphore_t v18 = *(void **)(v17 + 106);
      *(void *)(v17 + 106) = v16;

      [v15 convertedPlaylistGlobalID];
    }
    else
    {
      [v5 globalPlaylistID];
    uint64_t v19 = };
    uint64_t v20 = *(void *)(a1 + 32);
    id v21 = *(void **)(v20 + 98);
    *(void *)(v20 + 98) = v19;

    unsigned __int8 v14 = [v5 updateRequired];
    dispatch_time_t v22 = [*(id *)(a1 + 32) musicLibrary];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_100078B8C;
    void v24[3] = &unk_1001BEBD8;
    id v23 = *(void **)(a1 + 40);
    void v24[4] = *(void *)(a1 + 32);
    char v26 = *(unsigned char *)(a1 + 56);
    id v25 = v23;
    [v22 databaseConnectionAllowingWrites:1 withBlock:v24];

    *(void *)(*(void *)(a1 + 32) + 122) = [*(id *)(*(void *)(a1 + 32) + 106) unsignedLongLongValue];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 114) = v14;
  [*(id *)(a1 + 48) endTransaction];
  [*(id *)(a1 + 32) finish];
}

void sub_100078B8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v31[0] = ML3ContainerPropertyStoreCloudID;
  v32[0] = *(void *)(*(void *)(a1 + 32) + 106);
  v32[1] = &off_1001CBEA0;
  v31[1] = ML3ContainerPropertyCollaborationJoinRequestPending;
  void v31[2] = ML3ContainerPropertyCollaboratorStatus;
  long long v4 = &off_1001CBEB8;
  if (!*(unsigned char *)(a1 + 48)) {
    long long v4 = &off_1001CBED0;
  }
  v32[2] = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:3];
  id v6 = +[NSMutableDictionary dictionaryWithDictionary:v5];

  if (*(unsigned char *)(a1 + 48))
  {
    v29[0] = ML3ContainerPropertyCollaborationMode;
    v29[1] = ML3ContainerPropertyCollaboratorPermissions;
    v30[0] = &off_1001CBEA0;
    v30[1] = &off_1001CBEA0;
    v29[2] = ML3ContainerPropertyIsCollaborative;
    v29[3] = ML3ContainerPropertyCollaborationInvitationURL;
    v30[2] = &__kCFBooleanFalse;
    v30[3] = &stru_1001BF9F0;
    v29[4] = ML3ContainerPropertyCollaborationInvitationURLExpirationDate;
    void v30[4] = &off_1001CBEA0;
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:5];
    [v6 addEntriesFromDictionary:v7];
  }
  if (([*(id *)(a1 + 40) setValuesForPropertiesWithDictionary:v6] & 1) == 0)
  {
    int v8 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Failed to update container properties", buf, 0xCu);
    }
  }
  uint64_t v28 = *(void *)(*(void *)(a1 + 32) + 106);
  id v10 = +[NSArray arrayWithObjects:&v28 count:1];
  id v22 = 0;
  unsigned __int8 v11 = [v3 executeUpdate:@"DELETE FROM container_author WHERE container_pid = ?" withParameters:v10 error:&v22];
  id v12 = v22;

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v14;
      __int16 v26 = 2114;
      id v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@ Failed to clear container_author entries. err=%{public}@", buf, 0x16u);
    }
  }
  id v15 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 32) + 90)];
  id v23 = v15;
  uint64_t v16 = +[NSArray arrayWithObjects:&v23 count:1];
  id v21 = v12;
  unsigned __int8 v17 = [v3 executeUpdate:@"DELETE FROM container_item_reaction WHERE container_item_pid IN (SELECT container_item_pid FROM container_item WHERE container_pid = ?)" withParameters:v16 error:&v21];
  id v18 = v21;

  if ((v17 & 1) == 0)
  {
    uint64_t v19 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v20;
      __int16 v26 = 2114;
      id v27 = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@ Failed to clear container_item_reaction entries. err=%{public}@", buf, 0x16u);
    }
  }
}

void sub_100079470(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [*(id *)(a1 + 32) _queryFilterString];
  if (v4) {
    [v3 writeString:v4 withCode:1836152165];
  }
  id v5 = *(id *)(a1 + 40);
  ICDAAPUtilitiesWriteContainer();
}

void sub_100079578(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      int v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        ICDAAPUtilitiesWriteProperty();
        ++v8;
      }
      while (v6 != v8);
      id v6 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void *sub_100079AEC(void *a1)
{
  v5[0] = 0;
  if (!qword_1001F38C0)
  {
    v5[1] = _NSConcreteStackBlock;
    v5[2] = (void *)3221225472;
    v5[3] = sub_100079C70;
    void v5[4] = &unk_1001BEA20;
    void v5[5] = v5;
    long long v6 = off_1001BBA00;
    uint64_t v7 = 0;
    qword_1001F38C0 = _sl_dlopen();
  }
  id v2 = (void *)qword_1001F38C0;
  if (!qword_1001F38C0)
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICDServerOperationsManager.m", 19, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "SBSSetStatusBarShowsActivityForApplication");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1001F38B8 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t sub_100079C70()
{
  uint64_t result = _sl_dlopen();
  qword_1001F38C0 = result;
  return result;
}

void sub_10007A8B8(id *a1)
{
  id v2 = a1[4];
  id v3 = a1[5];
  id v4 = a1[6];
  ICDAAPUtilitiesWriteContainer();
}

void sub_10007A978(id *a1)
{
  id v2 = a1[4];
  id v3 = a1[5];
  id v4 = a1[6];
  ICDAAPUtilitiesWriteContainer();
}

void sub_10007AA38(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 writeString:*(void *)(a1 + 32) withCode:1835626093];
  [v3 writeUInt8:3 withCode:1634029643];
  id v7 = *(id *)(a1 + 40);
  ICDAAPUtilitiesWriteContainer();
  if ([*(id *)(a1 + 48) count])
  {
    CFStringRef v8 = @"geniusSeedTrackIDs";
    uint64_t v9 = *(void *)(a1 + 48);
    id v4 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    id v5 = +[NSPropertyListSerialization dataWithPropertyList:v4 format:200 options:0 error:0];
    [v3 writeData:v5 withCode:1634029636];
    id v6 = *(id *)(a1 + 48);
    ICDAAPUtilitiesWriteContainer();
  }
}

void sub_10007AC24(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      CFStringRef v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        ICDAAPUtilitiesWriteProperty();
        ++v8;
      }
      while (v6 != v8);
      id v6 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void sub_10007AD30(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      CFStringRef v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        ICDAAPUtilitiesWriteProperty();
        ++v8;
      }
      while (v6 != v8);
      id v6 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

__CFString *sub_10007C7E4(unint64_t a1)
{
  if (a1 == 1)
  {
    id v2 = +[NSString stringWithFormat:@"%llu", 1];
  }
  else if (a1 - 1 >= 4)
  {
    if (a1 - 5 >= 3)
    {
      if (a1 - 8 >= 3)
      {
        if (a1 - 11 >= 5)
        {
          if (a1 - 16 >= 5)
          {
            if (a1 - 21 >= 5)
            {
              if (a1 <= 0x19) {
                id v2 = @"-1";
              }
              else {
                id v2 = @"26+";
              }
            }
            else
            {
              id v2 = @"21-25";
            }
          }
          else
          {
            id v2 = @"16-20";
          }
        }
        else
        {
          id v2 = @"11-15";
        }
      }
      else
      {
        id v2 = @"8-10";
      }
    }
    else
    {
      id v2 = @"5-7";
    }
  }
  else
  {
    id v2 = @"2-4";
  }
  return v2;
}

void sub_10007C934(void *a1)
{
  id v1 = a1;
  if (MSVDeviceSupportsMediaDownloads())
  {
    uint64_t v8 = 0;
    long long v9 = &v8;
    uint64_t v10 = 0x2050000000;
    id v2 = (void *)qword_1001F38C8;
    uint64_t v11 = qword_1001F38C8;
    if (!qword_1001F38C8)
    {
      *(void *)buf = _NSConcreteStackBlock;
      uint64_t v13 = 3221225472;
      uint64_t v14 = sub_10007CAF0;
      id v15 = &unk_1001BE9E8;
      uint64_t v16 = &v8;
      sub_10007CAF0((uint64_t)buf);
      id v2 = (void *)v9[3];
    }
    id v3 = v2;
    _Block_object_dispose(&v8, 8);
    id v4 = objc_msgSend(v3, "sharedManager", v8);
    id v5 = [v4 allMediaDownloadLibraryIdentifiers];
    if ([v5 count])
    {
      id v6 = os_log_create("com.apple.amp.itunescloudd", "Downloads");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = [v5 count];
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cancelling %d downloads", buf, 8u);
      }

      [v4 cancelDownloads:v5];
    }
  }
}

void sub_10007CAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

Class sub_10007CAF0(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F38D0)
  {
    v6[1] = _NSConcreteStackBlock;
    v6[2] = (void *)3221225472;
    v6[3] = sub_10007CCDC;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BBA40;
    uint64_t v8 = 0;
    qword_1001F38D0 = _sl_dlopen();
  }
  if (!qword_1001F38D0)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudTrackDownloadManager.m", 17, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaDownloadManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"Class getMPMediaDownloadManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudTrackDownloadManager.m", 18, @"Unable to find class %s", "MPMediaDownloadManager");

LABEL_10:
    __break(1u);
  }
  qword_1001F38C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10007CCDC()
{
  uint64_t result = _sl_dlopen();
  qword_1001F38D0 = result;
  return result;
}

void sub_10007D490(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = [a2 userIdentity];
  id v3 = [v4 accountDSID];
  [v2 addObject:v3];
}

void sub_10007D77C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = objc_msgSend(*(id *)(a1 + 32), "_configurationForAccount:baseConfiguration:");
  if (v3)
  {
    id v4 = *(void **)(a1 + 48);
    id v5 = [*(id *)(a1 + 32) _configurationForAccount:v6 baseConfiguration:*(void *)(a1 + 40)];
    [v4 addObject:v5];
  }
}

void sub_10007DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E014(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007E024(uint64_t a1)
{
}

void sub_10007E02C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (([v4 isManageable] & 1) != 0 || objc_msgSend(v4, "isActive"))
  {
    if (([v4 isManageable] & 1) == 0)
    {
      id v5 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 48);
        int v7 = 134217984;
        uint64_t v8 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ICDAccountManagerState %p - stateForAccounts: active account is not manageable!", (uint8_t *)&v7, 0xCu);
      }
    }
    [*(id *)(a1 + 32) addObject:v4];
    if ([v4 isActive]) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    }
  }
}

void sub_10007E420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007E440(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v4 = [v5 accountDSID];
  if ([*(id *)(a1 + 32) containsObject:v4]) {
    [*(id *)(a1 + 40) addObject:v5];
  }
  if (*(void *)(a1 + 48) && objc_msgSend(v4, "isEqualToString:")) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
}

void sub_10007E6B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v10 = [v5 bodyData];
    double v7 = COERCE_DOUBLE([v10 length]);

    if (v7 == 0.0)
    {
      long long v12 = 0;
    }
    else
    {
      uint64_t v11 = [v5 bodyData];
      long long v12 = +[NSPropertyListSerialization propertyListWithData:v11 options:0 format:0 error:0];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v13 = [v12 objectForKey:@"status"];
        double v14 = COERCE_DOUBLE([v13 integerValue]);

        if (v14 == 0.0)
        {
          double v7 = [v12 objectForKey:@"retry-in-ms"];

          if (v7 != 0.0)
          {
            id v21 = [v12 objectForKey:@"retry-in-ms"];
            unint64_t v22 = (unint64_t)[v21 unsignedIntegerValue];

            id v23 = +[NSDate date];
            [v23 timeIntervalSinceDate:*(void *)(a1 + 40)];
            double v25 = v24;
            double v26 = *(double *)(a1 + 64);

            id v27 = os_log_create("com.apple.amp.itunescloudd", "Genius");
            uint64_t v28 = v27;
            if (v25 >= v26)
            {
              if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
              {
                uint64_t v34 = *(void *)(a1 + 32);
                double v35 = *(double *)(a1 + 64);
                int v37 = 138543618;
                uint64_t v38 = v34;
                __int16 v39 = 2048;
                double v40 = v35;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Failed to load %{public}@ after %g seconds", (uint8_t *)&v37, 0x16u);
              }

              uint64_t v36 = *(void *)(a1 + 56);
              id v33 = +[NSError errorWithDomain:@"SSURLConnectionRequest+GeniusAdditions" code:-1 userInfo:0];
              (*(void (**)(uint64_t, void, void, id))(v36 + 16))(v36, 0, 0, v33);
            }
            else
            {
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v29 = *(void *)(a1 + 32);
                int v37 = 138543618;
                uint64_t v38 = v29;
                __int16 v39 = 2048;
                double v40 = (double)v22 / 1000.0;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Retrying loading %{public}@ in %g seconds", (uint8_t *)&v37, 0x16u);
              }

              usleep((unint64_t)((((125000 * v22) & 0x1FFFFFFFFFFFFFFFLL)
                                       * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4);
              id v30 = objc_alloc((Class)ICStoreURLRequest);
              long long v31 = [*(id *)(a1 + 48) urlRequest];
              long long v32 = [*(id *)(a1 + 48) storeRequestContext];
              id v33 = [v30 initWithURLRequest:v31 requestContext:v32];

              objc_msgSend(v33, "setMaxRetryCount:", objc_msgSend(*(id *)(a1 + 48), "maxRetryCount"));
              objc_msgSend(v33, "setShouldUseMescalSigning:", objc_msgSend(*(id *)(a1 + 48), "shouldUseMescalSigning"));
              [v33 _startGeniusRequestWithStartDate:*(void *)(a1 + 40) retryTimeout:*(void *)(a1 + 32) debugName:*(void *)(a1 + 56) connectionResponseBlock:*(double *)(a1 + 64)];
            }

            double v7 = 0.0;
            goto LABEL_14;
          }
        }
        else
        {
          CFStringRef v43 = @"server-status-code";
          id v15 = +[NSNumber numberWithInteger:*(void *)&v14];
          long long v44 = v15;
          uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
          double v7 = +[NSError errorWithDomain:@"SSURLConnectionRequestGeniusAdditionsErrorDomain" code:0 userInfo:v16];

          unsigned __int8 v17 = os_log_create("com.apple.amp.itunescloudd", "Genius");
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v18 = *(void *)(a1 + 32);
            uint64_t v19 = [v5 urlResponse];
            uint64_t v20 = [v19 URL];
            int v37 = 138543874;
            uint64_t v38 = v18;
            __int16 v39 = 2048;
            double v40 = v14;
            __int16 v41 = 2114;
            uint64_t v42 = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Received non-zero status response loading %{public}@: Status=%ld responseURL: %{public}@", (uint8_t *)&v37, 0x20u);
          }
        }
      }
      else
      {
        double v7 = 0.0;
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_14:

    goto LABEL_15;
  }
  double v7 = *(double *)&v6;
  uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "Genius");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v37 = 138543618;
    uint64_t v38 = v9;
    __int16 v39 = 2114;
    double v40 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Received error loading %{public}@: %{public}@", (uint8_t *)&v37, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_15:
}

uint64_t sub_10007F018(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    int v13 = v6 & 7;
    if (v12 || v13 == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      if (v13 == 2)
      {
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (1)
        {
          uint64_t v18 = (unint64_t *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v19 = *v18;
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__length);
          if (*v18 >= v20 || *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            break;
          }
          if (v19 > 0xFFFFFFFFFFFFFFFBLL || v19 + 4 > v20) {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else {
            *uint64_t v18 = v19 + 4;
          }
          PBRepeatedFloatAdd();
        }
        PBReaderRecallMark();
      }
      else
      {
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
        }
        else {
          *(unsigned char *)(a2 + v11) = 1;
        }
        PBRepeatedFloatAdd();
      }
    }
    else if ((v6 >> 3) == 1)
    {
      uint64_t v15 = PBReaderReadString();
      uint64_t v16 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v15;
    }
    else if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      return 0;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10007F9D8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_57;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_59;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_57:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_59:
        uint64_t v37 = 40;
        goto LABEL_72;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 48) |= 2u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_63:
        uint64_t v38 = 16;
        goto LABEL_77;
      case 3u:
        uint64_t v23 = PBReaderReadString();
        double v24 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v23;

        continue;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 48) |= 4u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v20 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_67:
        uint64_t v38 = 24;
        goto LABEL_77;
      case 5u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 48) |= 8u;
        while (2)
        {
          unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 == -1 || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
            v14 |= (unint64_t)(v32 & 0x7F) << v29;
            if (v32 < 0)
            {
              v29 += 7;
              BOOL v9 = v30++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_71:
        uint64_t v37 = 44;
LABEL_72:
        *(_DWORD *)(a1 + v37) = v14;
        continue;
      case 6u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1 || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v20 |= (unint64_t)(v36 & 0x7F) << v33;
      if ((v36 & 0x80) == 0) {
        goto LABEL_74;
      }
      v33 += 7;
      BOOL v9 = v34++ >= 9;
      if (v9)
      {
        uint64_t v20 = 0;
        goto LABEL_76;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v20 = 0;
    }
LABEL_76:
    uint64_t v38 = 8;
LABEL_77:
    *(void *)(a1 + v3_Block_object_dispose(&a9, 8) = v20;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100080930(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    unsigned int v5 = [v4 libraryIdentifier];
    unint64_t v6 = [*(id *)(a1 + 32) libraryIdentifier];
    unsigned int v7 = [v5 isEqualToString:v6];

    char v8 = [(id)objc_opt_class() logCategory];
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        int v10 = objc_opt_class();
        uint64_t v11 = *(void *)(a1 + 32);
        id v12 = v10;
        int v22 = 138544130;
        uint64_t v23 = v10;
        __int16 v24 = 2048;
        uint64_t v25 = v11;
        __int16 v26 = 2114;
        id v27 = (id)objc_opt_class();
        __int16 v28 = 2048;
        id v29 = v4;
        id v13 = v27;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ %p -  Calling block on one of our operations [%{public}@ %p]", (uint8_t *)&v22, 0x2Au);
      }
      (*(void (**)(void, id, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v4, v14, v15, v16, v17);
    }
    else
    {
      if (v9)
      {
        char v18 = objc_opt_class();
        uint64_t v19 = *(void *)(a1 + 32);
        id v20 = v18;
        int v22 = 138544130;
        uint64_t v23 = v18;
        __int16 v24 = 2048;
        uint64_t v25 = v19;
        __int16 v26 = 2114;
        id v27 = (id)objc_opt_class();
        __int16 v28 = 2048;
        id v29 = v4;
        id v21 = v27;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ %p -  Ignoring operation which is not ours [%{public}@ %p]", (uint8_t *)&v22, 0x2Au);
      }
    }
  }
}

void sub_100080B54(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    unsigned int v5 = [v4 libraryIdentifier];
    unint64_t v6 = [*(id *)(a1 + 32) libraryIdentifier];
    unsigned int v7 = [v5 isEqualToString:v6];

    char v8 = [(id)objc_opt_class() logCategory];
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        int v10 = objc_opt_class();
        uint64_t v11 = *(void *)(a1 + 32);
        id v12 = v10;
        int v22 = 138544130;
        uint64_t v23 = v10;
        __int16 v24 = 2048;
        uint64_t v25 = v11;
        __int16 v26 = 2114;
        id v27 = (id)objc_opt_class();
        __int16 v28 = 2048;
        id v29 = v4;
        id v13 = v27;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ %p -  Calling block on one of our background operations [%{public}@ %p]", (uint8_t *)&v22, 0x2Au);
      }
      (*(void (**)(void, id, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v4, v14, v15, v16, v17);
    }
    else
    {
      if (v9)
      {
        char v18 = objc_opt_class();
        uint64_t v19 = *(void *)(a1 + 32);
        id v20 = v18;
        int v22 = 138544130;
        uint64_t v23 = v18;
        __int16 v24 = 2048;
        uint64_t v25 = v19;
        __int16 v26 = 2114;
        id v27 = (id)objc_opt_class();
        __int16 v28 = 2048;
        id v29 = v4;
        id v21 = v27;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ %p -  Ignoring background operation which is not ours [%{public}@ %p]", (uint8_t *)&v22, 0x2Au);
      }
    }
  }
}

void sub_100080E3C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = [(id)objc_opt_class() logCategory];
  unsigned int v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      uint64_t v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudLibrary %p - Connected to library successfully.", buf, 0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(void *)(a1 + 40));
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134218242;
      uint64_t v27 = v10;
      __int16 v28 = 2114;
      id v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CloudLibrary %p - Failed to connect to library with error: %{public}@", buf, 0x16u);
    }

    uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 32) userIdentity];
    id v12 = [*(id *)(*(void *)(a1 + 32) + 32) userIdentityStore];
    id v13 = v12;
    if (v11) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      id v25 = 0;
      uint64_t v15 = [v12 getVerificationContextForUserIdentity:v11 error:&v25];
      id v16 = v25;
      uint64_t v17 = v16;
      if (v15)
      {
        [v15 setInteractionLevel:1];
        [v15 setDebugReason:@"Connecting to cloud library"];
        id v18 = [objc_alloc((Class)ICUserVerificationRequest) initWithVerificationContext:v15];
        id v19 = objc_alloc((Class)ICStoreRequestContext);
        id v20 = +[ICClientInfo defaultInfo];
        id v21 = [v19 initWithIdentity:v11 identityStore:v13 clientInfo:v20];
        [v18 setStoreRequestContext:v21];

        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_100081128;
        void v22[3] = &unk_1001BBBC8;
        id v24 = *(id *)(a1 + 48);
        id v23 = *(id *)(a1 + 40);
        [v18 performWithResponseHandler:v22];
      }
      else
      {
        (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      }
    }
  }
}

uint64_t sub_100081128(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

void sub_100081308(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v3 = [v2 _userIdentity];
  [v4 setIdentity:v3];

  [v4 setPersonalizationStyle:2];
}

void sub_100081378(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned int v7 = [(id)objc_opt_class() logCategory];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    uint64_t v8 = *(void *)(a1 + 32);
    int v39 = 134218242;
    uint64_t v40 = v8;
    __int16 v41 = 2114;
    id v42 = v6;
    uint64_t v9 = "CloudLibrary %p - failed to load url bag. err=%{public}@";
    uint64_t v10 = v7;
    uint32_t v11 = 22;
    goto LABEL_12;
  }
  if (![*(id *)(a1 + 32) _isEnabledWithURLBag:v5])
  {
    unsigned int v7 = [(id)objc_opt_class() logCategory];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    uint64_t v22 = *(void *)(a1 + 32);
    int v39 = 134217984;
    uint64_t v40 = v22;
    uint64_t v9 = "CloudLibrary %p - Service disabled in URL bag.";
    uint64_t v10 = v7;
    uint32_t v11 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v39, v11);
LABEL_13:

    uint64_t v23 = *(void *)(a1 + 40);
    if (v23) {
      (*(void (**)(uint64_t, void))(v23 + 16))(v23, 0);
    }
    goto LABEL_35;
  }
  uint64_t v12 = [*(id *)(a1 + 32) _bagKey];
  id v13 = [v5 dictionaryForBagKey:v12];

  objc_opt_class();
  LOBYTE(v12) = objc_opt_isKindOfClass();
  BOOL v14 = objc_opt_class();
  if (v12)
  {
    uint64_t v15 = [v14 oversizeLogCategory];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v39 = 134218242;
      uint64_t v40 = v16;
      __int16 v41 = 2114;
      id v42 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CloudLibrary %p - Library Bag: %{public}@", (uint8_t *)&v39, 0x16u);
    }

    uint64_t v17 = ICGetCloudDAAPClientPrefix();
    id v18 = [v17 stringByAppendingString:@"base-url"];
    id v19 = [v13 objectForKey:v18];
    id v20 = v19;
    if (v19)
    {
      id v21 = v19;
    }
    else
    {
      id v21 = [v13 objectForKey:@"base-url"];
    }
    uint64_t v27 = v21;

    if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      __int16 v28 = [(id)objc_opt_class() logCategory];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *(void *)(a1 + 32);
        int v39 = 134218242;
        uint64_t v40 = v29;
        __int16 v41 = 2114;
        id v42 = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CloudLibrary %p - Determined server URL: %{public}@", (uint8_t *)&v39, 0x16u);
      }

      unsigned int v30 = *(void **)(*(void *)(a1 + 32) + 32);
      unint64_t v31 = [v27 stringByAppendingString:@"/"];
      char v32 = +[NSURL URLWithString:v31];
      [v30 setBaseURL:v32];

      [*(id *)(a1 + 32) _continueConnectingToLibraryWithCompletionHandler:*(void *)(a1 + 40)];
    }
    else
    {
      int v33 = *(unsigned __int8 *)(a1 + 48);
      unsigned int v34 = [(id)objc_opt_class() logCategory];
      BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
      if (v33)
      {
        if (v35)
        {
          uint64_t v36 = *(void *)(a1 + 32);
          int v39 = 134217984;
          uint64_t v40 = v36;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CloudLibrary %p - No library URL found, invalidating the URL bag and retrying...", (uint8_t *)&v39, 0xCu);
        }

        [*(id *)(a1 + 32) _connectToLibraryWithCompletionHandler:*(void *)(a1 + 40) allowRetry:0 forceBagReload:1];
      }
      else
      {
        if (v35)
        {
          uint64_t v37 = *(void *)(a1 + 32);
          int v39 = 134217984;
          uint64_t v40 = v37;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CloudLibrary %p - No library URL found.", (uint8_t *)&v39, 0xCu);
        }

        uint64_t v38 = *(void *)(a1 + 40);
        if (v38) {
          (*(void (**)(uint64_t, void))(v38 + 16))(v38, 0);
        }
      }
    }
  }
  else
  {
    id v24 = [v14 logCategory];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      int v39 = 134217984;
      uint64_t v40 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CloudLibrary %p - No URL bag found", (uint8_t *)&v39, 0xCu);
    }

    uint64_t v26 = *(void *)(a1 + 40);
    if (v26) {
      (*(void (**)(uint64_t, void))(v26 + 16))(v26, 0);
    }
  }

LABEL_35:
}

void sub_10008182C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = [(id)objc_opt_class() logCategory];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      id v12 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CloudLibrary %p - Connected to library", buf, 0xCu);
    }

    id v6 = [WeakRetained connectionQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000819A4;
    block[3] = &unk_1001BDFE8;
    id v8 = WeakRetained;
    id v9 = v3;
    id v10 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }
  else
  {
    [*(id *)(a1 + 40) endTransaction];
  }
}

id sub_1000819A4(uint64_t a1)
{
  [*(id *)(a1 + 32) setUnderlyingConnection:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) underlyingConnection];
  [*(id *)(a1 + 32) setFailedToConnect:v2 == 0];

  id v3 = [*(id *)(a1 + 32) underlyingConnection];
  id v4 = [v3 connectionState];

  if (v4 == (id)2) {
    [*(id *)(a1 + 32) _performPendingOperations];
  }
  [*(id *)(a1 + 32) setLoginRequestInFlight:0];
  id v5 = [*(id *)(a1 + 32) connectionGroup];
  dispatch_group_leave(v5);

  id v6 = *(void **)(a1 + 48);

  return [v6 endTransaction];
}

void sub_100082004(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [(id)objc_opt_class() logCategory];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = objc_opt_class();
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = v5;
    int v9 = 138544130;
    id v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    id v14 = (id)objc_opt_class();
    __int16 v15 = 2048;
    id v16 = v3;
    id v8 = v14;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ %p - Cancelling one of our operations [%{public}@ %p]", (uint8_t *)&v9, 0x2Au);
  }
  [v3 cancel];
}

void sub_100082248(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [(id)objc_opt_class() logCategory];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = objc_opt_class();
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = v5;
    int v9 = 138544130;
    id v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    id v14 = (id)objc_opt_class();
    __int16 v15 = 2048;
    id v16 = v3;
    id v8 = v14;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ %p -  Increasing priority of one of our operations [%{public}@ %p]", (uint8_t *)&v9, 0x2Au);
  }
  [v3 increasePriority];
}

void sub_10008248C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [(id)objc_opt_class() logCategory];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = objc_opt_class();
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = v5;
    int v9 = 138544130;
    id v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    id v14 = (id)objc_opt_class();
    __int16 v15 = 2048;
    id v16 = v3;
    id v8 = v14;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ %p -  Decreasing priority of one of our operations [%{public}@ %p]", (uint8_t *)&v9, 0x2Au);
  }
  [v3 decreasePriority];
}

void sub_100082678(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) failedToConnect];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    _[v3 _enqueuePendingOperation:v4];
  }
  else
  {
    id v5 = [v3 underlyingConnection];
    [*(id *)(a1 + 40) setConnection:v5];

    uint64_t v6 = [*(id *)(a1 + 40) completionBlock];
    objc_initWeak(&location, *(id *)(a1 + 40));
    int v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    __int16 v11 = sub_1000827F0;
    uint64_t v12 = &unk_1001BCD88;
    objc_copyWeak(&v15, &location);
    uint64_t v13 = *(void *)(a1 + 32);
    id v7 = v6;
    id v14 = v7;
    [*(id *)(a1 + 40) setCompletionBlock:&v9];
    id v8 = +[ICDServer server];
    [v8 addBackgroundOperation:*(void *)(a1 + 40) priority:*(unsigned int *)(a1 + 48)];

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

void sub_1000827D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000827F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v6 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained status] == (id)1)
    {
      id v7 = [(id)objc_opt_class() logCategory];
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_10:

        goto LABEL_11;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      int v20 = 134218498;
      uint64_t v21 = v8;
      __int16 v22 = 2114;
      id v23 = (id)objc_opt_class();
      __int16 v24 = 2048;
      uint64_t v25 = v6;
      id v9 = v23;
      uint64_t v10 = "CloudLibrary %p - Background operation of type %{public}@ %p completed with status CloudLibraryOperationStatusSuccess.";
    }
    else
    {
      if ([v6 status] == (id)2)
      {
        __int16 v11 = [(id)objc_opt_class() logCategory];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 32);
          int v20 = 134218498;
          uint64_t v21 = v12;
          __int16 v22 = 2114;
          id v23 = (id)objc_opt_class();
          __int16 v24 = 2048;
          uint64_t v25 = v6;
          id v13 = v23;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CloudLibrary %p - Background operation of type %{public}@ %p completed with status CloudLibraryOperationStatusFailed.", (uint8_t *)&v20, 0x20u);
        }
        [*(id *)(a1 + 32) _enqueueFailedOperation:v6];
        id v7 = [*(id *)(a1 + 32) underlyingConnection];
        [v7 disconnect];
        goto LABEL_10;
      }
      if ([v6 status] == (id)3)
      {
        id v7 = [(id)objc_opt_class() logCategory];
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_10;
        }
        uint64_t v15 = *(void *)(a1 + 32);
        int v20 = 134218498;
        uint64_t v21 = v15;
        __int16 v22 = 2114;
        id v23 = (id)objc_opt_class();
        __int16 v24 = 2048;
        uint64_t v25 = v6;
        id v9 = v23;
        uint64_t v10 = "CloudLibrary %p - Background operation of type %{public}@ %p completed with status CloudLibraryOperationSt"
              "atusPermanentlyFailed.";
      }
      else
      {
        id v16 = [v6 status];
        id v7 = [(id)objc_opt_class() logCategory];
        BOOL v17 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        if (v16 == (id)4)
        {
          if (!v17) {
            goto LABEL_10;
          }
          uint64_t v18 = *(void *)(a1 + 32);
          int v20 = 134218498;
          uint64_t v21 = v18;
          __int16 v22 = 2114;
          id v23 = (id)objc_opt_class();
          __int16 v24 = 2048;
          uint64_t v25 = v6;
          id v9 = v23;
          uint64_t v10 = "CloudLibrary %p - Background operation of type %{public}@ %p completed with status CloudLibraryOperation"
                "StatusCancelled.";
        }
        else
        {
          if (!v17) {
            goto LABEL_10;
          }
          uint64_t v19 = *(void *)(a1 + 32);
          int v20 = 134218498;
          uint64_t v21 = v19;
          __int16 v22 = 2114;
          id v23 = (id)objc_opt_class();
          __int16 v24 = 2048;
          uint64_t v25 = v6;
          id v9 = v23;
          uint64_t v10 = "CloudLibrary %p - BACKGROUND OPERATION FAILED TO SET STATUS %{public}@ %p";
        }
      }
    }
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v20, 0x20u);

    goto LABEL_10;
  }
LABEL_11:
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16))(v14, v3, v4, v5);
  }
}

void sub_100083508(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  uint64_t v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)BOOL v17 = 134217984;
    *(void *)&v17[4] = [v5 responseCode];
    id v9 = "Set item properties response status code: %lu";
    uint64_t v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      goto LABEL_7;
    }
    *(_WORD *)BOOL v17 = 0;
    id v9 = "Set item properties received no response";
    uint64_t v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_FAULT;
    uint32_t v12 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, v17, v12);
LABEL_7:

  if (v6)
  {
    id v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)BOOL v17 = 138543362;
      *(void *)&v17[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Set item properties response failed with error: %{public}@", v17, 0xCu);
    }
  }
  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = (uint64_t)objc_msgSend(v5, "responseCode", *(_OWORD *)v17);
  if (v15 > 399)
  {
    if (v15 != 404 && v15 != 400) {
      goto LABEL_18;
    }
    uint64_t v16 = 3;
  }
  else
  {
    uint64_t v16 = 1;
    if (v15 != 200 && v15 != 204) {
LABEL_18:
    }
      uint64_t v16 = 2;
  }
  [v14 setStatus:v16];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100083D40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = objc_msgSend(v3, "msv_description");
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v6;
      __int16 v21 = 2114;
      __int16 v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ Completed cloud library update error=%{public}@", buf, 0x16u);
    }
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_12;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Completed cloud library update", buf, 0xCu);
  }

  if (!*(void *)(a1 + 56)) {
    goto LABEL_5;
  }
  id v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    os_log_type_t v11 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    uint64_t v20 = v10;
    __int16 v21 = 2048;
    __int16 v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ Requesting subscribed playlist update for %lld", buf, 0x16u);
  }

  uint32_t v12 = *(void **)(a1 + 32);
  id v13 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 56)];
  uint64_t v18 = v13;
  uint64_t v14 = +[NSArray arrayWithObjects:&v18 count:1];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100084120;
  v16[3] = &unk_1001BF2B0;
  uint64_t v15 = *(void *)(a1 + 40);
  void v16[4] = *(void *)(a1 + 32);
  id v17 = *(id *)(a1 + 48);
  [v12 updateSubscribedPlaylistsWithSagaIDs:v14 ignoreMinRefreshInterval:1 requestReason:8 pinnedOnly:0 clientIdentity:v15 completionHandler:v16];

LABEL_12:
}

void sub_100083FD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = objc_msgSend(v3, "msv_description");
      int v9 = 138543618;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint32_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ Completed subscribed playlist update error=%{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138543362;
    uint64_t v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Completed subscribed playlist update", (uint8_t *)&v9, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100084120(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = objc_msgSend(v3, "msv_description");
      int v9 = 138543618;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint32_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ Completed subscribed playlist update error=%{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138543362;
    uint64_t v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Completed subscribed playlist update", (uint8_t *)&v9, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000843D4(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8 * (void)v6);
        uint64_t v8 = objc_msgSend(*(id *)(a1 + 40), "msv_errorByRemovingUnsafeUserInfo", (void)v9);
        (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

uint64_t sub_100084D7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100084D90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7007 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100084E08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ic_cloudClientErrorWithCode:2013 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100084E74(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100084E88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ic_cloudClientErrorWithCode:2003 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100084EF4(uint64_t a1)
{
  if (*(void *)(a1 + 56) && *(void *)(*(void *)(a1 + 32) + 56))
  {
    id v2 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v36 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - Cloud library update already in progress, attaching completion handler.", buf, 0xCu);
    }

    id v4 = *(void **)(*(void *)(a1 + 32) + 64);
    id v5 = [*(id *)(a1 + 56) copy];
    [v4 addObject:v5];
  }
  if (!*(void *)(*(void *)(a1 + 32) + 56))
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = ICCloudClientGetStringForRequestReason();
      *(_DWORD *)buf = 138543618;
      uint64_t v36 = v7;
      __int16 v37 = 2114;
      uint64_t v38 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - Enqueuing update cloud library operation (requestReason = %{public}@)", buf, 0x16u);
    }
    long long v9 = +[ICDServer server];
    long long v10 = [v9 daemonOptionsForConfiguration:*(void *)(*(void *)(a1 + 32) + 96)];

    unsigned int v11 = [v10 prohibitLibraryUpload];
    unsigned __int8 v12 = [v10 prohibitArtworkPrefetch];
    id v13 = +[ICDeviceInfo currentDeviceInfo];
    char v14 = v12 ^ 1;
    if ([v13 isWatch])
    {
      uint64_t v15 = +[ICEnvironmentMonitor sharedMonitor];
      unsigned __int8 v16 = [v15 isCharging];

      if (v16)
      {
LABEL_15:
        id v17 = *(id *)(*(void *)(a1 + 32) + 96);
        uint64_t v18 = [[CloudUpdateLibraryOperation alloc] initWithConfiguration:v17 clientIdentity:*(void *)(a1 + 40) reason:*(void *)(a1 + 64) updateTaskHelper:*(void *)(*(void *)(a1 + 32) + 88)];
        uint64_t v19 = *(void **)(*(void *)(a1 + 32) + 56);
        *(void *)(*(void *)(a1 + 32) + 56) = v18;

        uint64_t v20 = *(void **)(a1 + 56);
        if (v20)
        {
          __int16 v21 = *(void **)(*(void *)(a1 + 32) + 64);
          id v22 = [v20 copy];
          [v21 addObject:v22];
        }
        [*(id *)(*(void *)(a1 + 32) + 56) setUploadingLibraryIsSupported:v11 ^ 1];
        [*(id *)(*(void *)(a1 + 32) + 56) setAllowNoisyAuthPrompt:*(unsigned __int8 *)(a1 + 72)];
        [*(id *)(*(void *)(a1 + 32) + 56) setIsExplicitUserAction:*(unsigned __int8 *)(a1 + 73)];
        objc_initWeak(&location, *(id *)(a1 + 32));
        objc_initWeak(&from, *(id *)(*(void *)(a1 + 32) + 56));
        uint64_t v25 = _NSConcreteStackBlock;
        uint64_t v26 = 3221225472;
        uint64_t v27 = sub_100085398;
        __int16 v28 = &unk_1001BBD68;
        objc_copyWeak(&v30, &location);
        objc_copyWeak(&v31, &from);
        char v32 = v14;
        id v29 = *(id *)(a1 + 40);
        [*(id *)(*(void *)(a1 + 32) + 56) setCompletionBlock:&v25];
        objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "setName:", @"com.apple.itunescloudd.SagaRequestHandler.updateLibraryOperation", v25, v26, v27, v28);
        [*(id *)(a1 + 48) addOperation:*(void *)(*(void *)(a1 + 32) + 56) priority:2];
        id v23 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          uint64_t v36 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@ - Posting Saga update in progress changed notification", buf, 0xCu);
        }

        objc_destroyWeak(&v31);
        objc_destroyWeak(&v30);
        objc_destroyWeak(&from);
        objc_destroyWeak(&location);

        return;
      }
      id v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Not performing artwork update because power is required", buf, 2u);
      }
      char v14 = 0;
    }

    goto LABEL_15;
  }
}

void sub_100085360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_100085398(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = v3;
  if (WeakRetained)
  {
    id v5 = WeakRetained[5];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10008547C;
    v6[3] = &unk_1001BBD40;
    id v7 = v3;
    uint64_t v8 = WeakRetained;
    char v10 = *(unsigned char *)(a1 + 56);
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v5, v6);
  }
}

void sub_10008547C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) status];
  id v3 = *(void **)(a1 + 40);
  if (v2 == (id)1)
  {
    id v4 = (void *)v3[12];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000858F0;
    v19[3] = &unk_1001BBD18;
    char v23 = *(unsigned char *)(a1 + 56);
    id v20 = *(id *)(a1 + 32);
    id v21 = *(id *)(a1 + 40);
    id v22 = *(id *)(a1 + 48);
    id v5 = v4;
    uint64_t v6 = v19;
    id v7 = [v5 userIdentityStore];
    uint64_t v8 = [v5 userIdentity];
    id v9 = +[NSDate date];
    v39[0] = 0;
    char v10 = [v7 getPropertiesForUserIdentity:v8 error:v39];
    id v11 = v39[0];
    if (v11 || !v10)
    {
      id v17 = dispatch_get_global_queue(0, 0);
      block = _NSConcreteStackBlock;
      uint64_t v25 = 3221225472;
      uint64_t v26 = sub_1000D6C1C;
      uint64_t v27 = &unk_1001BEC48;
      id v29 = v6;
      __int16 v28 = v11;
      dispatch_async(v17, &block);
    }
    else
    {
      uint64_t v33 = 0;
      unsigned int v34 = &v33;
      uint64_t v35 = 0x3032000000;
      uint64_t v36 = sub_1000D54E4;
      __int16 v37 = sub_1000D54F4;
      unsigned __int8 v12 = [v10 cloudLibraryStateReason];
      id v38 = [v12 mutableCopy];

      uint64_t v13 = [(id)v34[5] objectForKey:@"EnableCloudLibraryFailureReasonKey"];
      uint64_t v14 = [(id)v34[5] objectForKey:@"AutoEnableCloudLibraryFailureReasonKey"];
      if (v13 | v14)
      {
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1000D6C30;
        void v32[3] = &unk_1001BD258;
        v32[4] = &v33;
        block = _NSConcreteStackBlock;
        uint64_t v25 = 3221225472;
        uint64_t v26 = sub_1000D6CBC;
        uint64_t v27 = &unk_1001BD280;
        id v31 = &v33;
        uint64_t v15 = v8;
        __int16 v28 = v15;
        id v29 = v9;
        id v30 = v6;
        [v7 insertPropertiesForUserIdentity:v15 andPostAccountChangeNotification:0 usingBlock:v32 completionHandler:&block];

        unsigned __int8 v16 = v29;
      }
      else
      {
        unsigned __int8 v16 = dispatch_get_global_queue(0, 0);
        block = _NSConcreteStackBlock;
        uint64_t v25 = 3221225472;
        uint64_t v26 = sub_1000D6E68;
        uint64_t v27 = &unk_1001BEC70;
        __int16 v28 = v6;
        dispatch_async(v16, &block);
      }

      _Block_object_dispose(&v33, 8);
    }
  }
  else
  {
    id v18 = [*(id *)(a1 + 32) error];
    [v3 _handleCloudLibraryUpdateOperationFinishedWithError:v18];
  }
}

void sub_1000858D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1000858F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 56) && [*(id *)(a1 + 32) isInitialUpdate]) {
    [*(id *)(*(void *)(a1 + 40) + 16) importAllItemArtworkWithClientIdentity:*(void *)(a1 + 48)];
  }
  id v4 = *(void **)(a1 + 40);
  id v5 = v4[5];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000859C8;
  v6[3] = &unk_1001BECC0;
  id v7 = v4;
  id v8 = *(id *)(a1 + 32);
  dispatch_async(v5, v6);
}

void sub_1000859C8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) error];
  [v1 _handleCloudLibraryUpdateOperationFinishedWithError:v2];
}

void sub_100085E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100085E94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained error];
  id v4 = [WeakRetained libraryUpdateRequired];
  id v5 = [WeakRetained playlistCloudLibraryID];
  uint64_t v6 = [WeakRetained updatedInvitationURL];
  if (v3)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, void *, void *))(v7 + 16))(v7, v6, v8);
  }
  else
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100085FD4;
    v10[3] = &unk_1001BF2B0;
    id v9 = *(void **)(a1 + 32);
    id v12 = *(id *)(a1 + 40);
    id v11 = v6;
    [v9 _handleLibraryEditOperationCompletionUpdatingLibrary:v4 andSubscribedPlaylist:v5 completion:v10];
  }
}

void sub_100085FD4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v3, v4);
}

void sub_100086240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100086268(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained error];
  id v4 = [WeakRetained libraryUpdateRequired];
  id v5 = [WeakRetained playlistCloudLibraryID];
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    id v8 = v5;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100086378;
    v10[3] = &unk_1001BD0D8;
    id v9 = *(void **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    [v9 _handleLibraryEditOperationCompletionUpdatingLibrary:v4 andSubscribedPlaylist:v8 completion:v10];
  }
}

void sub_100086378(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000865CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000865F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained error];
  id v4 = [WeakRetained libraryUpdateRequired];
  id v5 = [WeakRetained playlistCloudLibraryID];
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    id v8 = v5;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100086704;
    v10[3] = &unk_1001BD0D8;
    id v9 = *(void **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    [v9 _handleLibraryEditOperationCompletionUpdatingLibrary:v4 andSubscribedPlaylist:v8 completion:v10];
  }
}

void sub_100086704(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100086950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100086978(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained error];
  id v4 = [WeakRetained libraryUpdateRequired];
  id v5 = [WeakRetained resultingPlaylistCloudLibraryID];
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, id, void *))(v6 + 16))(v6, v5, v7);
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100086A8C;
    void v9[3] = &unk_1001BBCF0;
    id v8 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v5;
    [v8 _handleLibraryEditOperationCompletionUpdatingLibrary:v4 andSubscribedPlaylist:v5 completion:v9];
  }
}

void sub_100086A8C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v3, v4);
}

void sub_100086CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100086D0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained error];
  id v4 = [WeakRetained libraryUpdateRequired];
  id v5 = [WeakRetained playlistCloudLibraryID];
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    id v8 = v5;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100086E1C;
    v10[3] = &unk_1001BD0D8;
    id v9 = *(void **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    [v9 _handleLibraryEditOperationCompletionUpdatingLibrary:v4 andSubscribedPlaylist:v8 completion:v10];
  }
}

void sub_100086E1C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100087040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100087068(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained error];
  id v4 = [WeakRetained libraryUpdateRequired];
  id v5 = [WeakRetained resultingPlaylistCloudLibraryID];
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, id, void *))(v6 + 16))(v6, v5, v7);
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008717C;
    void v9[3] = &unk_1001BBCF0;
    id v8 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v5;
    [v8 _handleLibraryEditOperationCompletionUpdatingLibrary:v4 andSubscribedPlaylist:v5 completion:v9];
  }
}

void sub_10008717C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v3, v4);
}

void sub_1000873B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000873D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained error];
  id v4 = [WeakRetained libraryUpdateRequired];
  id v5 = [WeakRetained resultingCollaborationCloudLibraryID];
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");
    (*(void (**)(uint64_t, id, void *))(v6 + 16))(v6, v5, v7);
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000874EC;
    void v9[3] = &unk_1001BBCF0;
    id v8 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v5;
    [v8 _handleLibraryEditOperationCompletionUpdatingLibrary:v4 andSubscribedPlaylist:0 completion:v9];
  }
}

void sub_1000874EC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v3, v4);
}

void sub_10008785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100087884(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_100087C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100087C40(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_1000880B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000880D8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_100088364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008838C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_10008863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100088664(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

id sub_100088798(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 56);
  if (result)
  {
    id result = [result progress];
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  }
  return result;
}

void sub_100088B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100088B30(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100088B48(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    int v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_100088DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100088E18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained itemIDs];
    (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v2, 0);
  }
}

uint64_t sub_100088E9C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

uint64_t sub_100089298(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000895A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000895C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained cloudArtworkInfoDictionaries];
    (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v2, 0);
  }
}

uint64_t sub_10008964C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_100089980(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1000899A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:NSURLErrorDomain code:-999 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100089A24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v2 = [WeakRetained cloudArtworkInfoDictionaries];
    (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v2, 0);
  }
}

uint64_t sub_100089AA8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_100089BE8(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    id v4 = *(void **)(a1[4] + 16);
    uint64_t v6 = a1[6];
    uint64_t v5 = a1[7];
    [v4 importContainerArtworkForSagaID:v5 clientIdentity:v3 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[7];
      *(_DWORD *)buf = 138543618;
      uint64_t v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - No active locker account, skipping import container artwork for saga ID: %llu", buf, 0x16u);
    }

    id v10 = (void *)a1[6];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 48);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100089D64;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_100089D64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ic_cloudClientErrorWithCode:2009 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100089ECC(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    id v4 = *(void **)(a1[4] + 16);
    uint64_t v6 = a1[6];
    uint64_t v5 = a1[7];
    [v4 importScreenshotForSagaID:v5 clientIdentity:v3 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[7];
      *(_DWORD *)buf = 138543618;
      uint64_t v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - No active locker account, skipping import screenshot for saga ID: %llu", buf, 0x16u);
    }

    id v10 = (void *)a1[6];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 48);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008A048;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_10008A048(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ic_cloudClientErrorWithCode:2009 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10008A1B0(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    id v4 = *(void **)(a1[4] + 16);
    uint64_t v6 = a1[6];
    uint64_t v5 = a1[7];
    [v4 importItemArtworkForSagaID:v5 clientIdentity:v3 completionHandler:v6];
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[7];
      *(_DWORD *)buf = 138543618;
      uint64_t v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - No active locker account, skipping import item artwork for saga ID: %llu", buf, 0x16u);
    }

    id v10 = (void *)a1[6];
    if (v10)
    {
      id v11 = *(NSObject **)(a1[4] + 48);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008A32C;
      block[3] = &unk_1001BEC70;
      id v13 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_10008A32C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ic_cloudClientErrorWithCode:2009 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_10008A478(void *a1)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = *(void *)(a1[4] + 56) != 0;
  id result = [*(id *)(a1[4] + 56) isInitialUpdate];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10008A70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A734(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008A7B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008AA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008AA38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008AAB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008AD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008AD3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008ADBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008B004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008B02C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

uint64_t sub_10008B0B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008B2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008B324(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

uint64_t sub_10008B3AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008B5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008B618(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained updateRequired])
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10008B748;
    v7[3] = &unk_1001BF2B0;
    uint64_t v3 = *(void **)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v8 = WeakRetained;
    [v3 _handleLibraryEditOperationCompletionUpdatingLibrary:1 andSubscribedPlaylist:0 completion:v7];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      uint64_t v5 = [WeakRetained globalIDToSagaIDMap];
      uint64_t v6 = [WeakRetained error];
      (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);
    }
  }
}

uint64_t sub_10008B728(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10008B748(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = [*(id *)(a1 + 32) globalIDToSagaIDMap];
    uint64_t v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }
}

uint64_t sub_10008B9F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10008BA08(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10008BDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008BE14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained updateRequired]) {
    [*(id *)(a1 + 32) _handleLibraryEditOperationCompletionUpdatingLibrary:1 andSubscribedPlaylist:0 completion:&stru_1001BBCC8];
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = WeakRetained;
  if (v2)
  {
    id v4 = [WeakRetained adamIDToSagaIDMap];
    uint64_t v5 = [WeakRetained error];
    (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v4, v5);

    uint64_t v3 = WeakRetained;
  }
}

uint64_t sub_10008BED0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10008C160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008C188(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008C208(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008C434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008C45C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

void sub_10008C70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008C734(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008C7B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008C9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008CA24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008CAA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008CCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008CD00(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained playlistGlobalID];
    id v4 = [WeakRetained playlistShareURL];
    uint64_t v5 = [WeakRetained error];
    (*(void (**)(uint64_t, void *, void *, void *))(v2 + 16))(v2, v3, v4, v5);
  }
}

uint64_t sub_10008CDC4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(result + 16))(result, 0, 0, a2);
  }
  return result;
}

void sub_10008D0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008D0F8(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v3 = [WeakRetained error];

    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = [WeakRetained error];
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
    else
    {
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = [WeakRetained clientIdentity];
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_10008D228;
      void v8[3] = &unk_1001BD0D8;
      id v9 = *(id *)(a1 + 40);
      [v6 updateLibraryWithClientIdentity:v7 reason:8 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:v8];
    }
  }
}

uint64_t sub_10008D210(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10008D228(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008D4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008D524(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if ([WeakRetained libraryUpdateRequired])
    {
      uint64_t v2 = *(void **)(a1 + 32);
      uint64_t v3 = [WeakRetained clientIdentity];
      [v2 updateLibraryWithClientIdentity:v3 reason:8 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:&stru_1001BBCA8];
    }
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }
}

uint64_t sub_10008D5FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008D860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008D888(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008D908(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10008DB4C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10008DB64(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10008DDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008DDD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_10008DE58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008E268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008E290(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained updateRequired]) {
    [*(id *)(a1 + 32) _handleLibraryEditOperationCompletionUpdatingLibrary:1 andSubscribedPlaylist:0 completion:&stru_1001BBC88];
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = WeakRetained;
  if (v2)
  {
    uint64_t v4 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

    uint64_t v3 = WeakRetained;
  }
}

uint64_t sub_10008E32C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008E5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008E5F8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = [WeakRetained playlistSagaID];
    uint64_t v4 = [WeakRetained error];
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
  }
}

uint64_t sub_10008E69C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10008E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008E9C0(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    id v3 = [WeakRetained error];

    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = [WeakRetained error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
    else
    {
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = [WeakRetained clientIdentity];
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_10008EB0C;
      void v8[3] = &unk_1001BF2B0;
      id v10 = *(id *)(a1 + 40);
      id v9 = WeakRetained;
      [v6 updateLibraryWithClientIdentity:v7 reason:8 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:v8];
    }
  }
}

uint64_t sub_10008EAEC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10008EB0C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, [v3 playlistSagaID], v4);
}

void sub_10008EE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008EE4C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = [WeakRetained playlistSagaID];
    id v4 = [WeakRetained error];
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
  }
}

uint64_t sub_10008EEF0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10008EFB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 80);
  id v3 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - Postponing playlist play data timer due to continued updates", buf, 0xCu);
    }

    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 80);
    dispatch_time_t v7 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  }
  else
  {
    if (v4)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - Created timer to update playlist play data", buf, 0xCu);
    }

    dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(*(void *)(a1 + 32) + 32));
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 80);
    *(void *)(v10 + 80) = v9;

    id v12 = *(NSObject **)(*(void *)(a1 + 32) + 80);
    dispatch_time_t v13 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(NSObject **)(v14 + 80);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10008F1D4;
    handler[3] = &unk_1001BDCF8;
    handler[4] = v14;
    id v17 = *(id *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 48);
    dispatch_source_set_event_handler(v15, handler);
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
  }
}

void sub_10008F1D4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 104) setClientIdentity:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 104) sagaLastPlaylistPlayDataUploadDate];
  id v3 = +[NSDate date];
  [v3 timeIntervalSinceDate:v2];
  double v5 = v4;

  if (v2 && v5 <= *(double *)(a1 + 48))
  {
    dispatch_source_t v9 = (SagaUploadPlaylistPlayDataOperation *)os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(&v9->super.super.super, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 48);
      int v21 = 138543874;
      uint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = *(void *)&v5;
      __int16 v25 = 2048;
      uint64_t v26 = v17;
      _os_log_impl((void *)&_mh_execute_header, &v9->super.super.super, OS_LOG_TYPE_DEFAULT, "%{public}@ - Skipping playlist play data upload (minimum time interval not satisfied (%.0f < %.0f)", (uint8_t *)&v21, 0x20u);
    }
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      [v2 timeIntervalSince1970];
      int v21 = 138543618;
      uint64_t v22 = v7;
      __int16 v23 = 2048;
      uint64_t v24 = (uint64_t)v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - Uploading playlist play data since %{time}zd", (uint8_t *)&v21, 0x16u);
    }

    dispatch_source_t v9 = [(CloudLibraryOperation *)[SagaUploadPlaylistPlayDataOperation alloc] initWithConfiguration:*(void *)(*(void *)(a1 + 32) + 96) clientIdentity:*(void *)(a1 + 40)];
    uint64_t v10 = [*(id *)(a1 + 32) _library];
    [v10 addOperation:v9 priority:2];

    [(SagaUploadPlaylistPlayDataOperation *)v9 waitUntilFinished];
    id v11 = [(CloudLibraryOperation *)v9 status];
    if (v11 == (id)1)
    {
      id v12 = +[NSDate date];
      [*(id *)(*(void *)(a1 + 32) + 104) setSagaLastPlaylistPlayDataUploadDate:v12];
    }
    else
    {
      unint64_t v13 = (unint64_t)v11;
      id v12 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        if (v13 > 4) {
          uint64_t v15 = @"Unknown Cloud Library Operation Status";
        }
        else {
          uint64_t v15 = *(&off_1001BBDD8 + v13);
        }
        uint64_t v18 = v15;
        int v21 = 138543618;
        uint64_t v22 = v14;
        __int16 v23 = 2114;
        uint64_t v24 = (uint64_t)v18;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ - Upload playlist play data operation failed with status: %{public}@", (uint8_t *)&v21, 0x16u);
      }
    }
  }
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 80));
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void **)(v19 + 80);
  *(void *)(v19 + 80) = 0;
}

void sub_10008F564(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 72);
  id v3 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - Postponing item play data timer due to continued updates", buf, 0xCu);
    }

    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 72);
    dispatch_time_t v7 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  }
  else
  {
    if (v4)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ - Created timer to update item play data", buf, 0xCu);
    }

    dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(*(void *)(a1 + 32) + 24));
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 72);
    *(void *)(v10 + 72) = v9;

    id v12 = *(NSObject **)(*(void *)(a1 + 32) + 72);
    dispatch_time_t v13 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(NSObject **)(v14 + 72);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10008F780;
    handler[3] = &unk_1001BDCF8;
    handler[4] = v14;
    id v17 = *(id *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 48);
    dispatch_source_set_event_handler(v15, handler);
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 72));
  }
}

void sub_10008F780(double *a1)
{
  [*(id *)(*((void *)a1 + 4) + 104) setClientIdentity:*((void *)a1 + 5)];
  uint64_t v2 = [*(id *)(*((void *)a1 + 4) + 104) sagaLastItemPlayDataUploadDate];
  id v3 = +[NSDate date];
  [v3 timeIntervalSinceDate:v2];
  double v5 = v4;

  if (v2 && v5 <= a1[6])
  {
    dispatch_source_t v9 = (SagaUploadItemPlayDataOperation *)os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(&v9->super.super.super, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *((void *)a1 + 4);
      uint64_t v16 = *((void *)a1 + 6);
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v5;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, &v9->super.super.super, OS_LOG_TYPE_DEFAULT, "%{public}@ - Skipping item play data upload (minimum time interval not satisfied (%.0f < %.0f)", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)a1 + 4);
      [v2 timeIntervalSince1970];
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = (uint64_t)v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - Uploading item play data since %{time}zd", buf, 0x16u);
    }

    dispatch_source_t v9 = [(CloudLibraryOperation *)[SagaUploadItemPlayDataOperation alloc] initWithConfiguration:*(void *)(*((void *)a1 + 4) + 96) clientIdentity:*((void *)a1 + 5)];
    [(SagaUploadItemPlayDataOperation *)v9 setName:@"com.apple.itunescloudd.SagaRequestHandler.uploadPlayDataOperation"];
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    LOBYTE(v26) = 1;
    uint64_t v10 = (void *)*((void *)a1 + 4);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10008FB0C;
    v20[3] = &unk_1001BBC68;
    void v20[4] = buf;
    [v10 _addLibraryOperation:v9 priority:2 noLibraryHandler:v20];
    if (*(unsigned char *)(*(void *)&buf[8] + 24)) {
      [(SagaUploadItemPlayDataOperation *)v9 waitUntilFinished];
    }
    id v11 = [(CloudLibraryOperation *)v9 status];
    if (v11 == (id)1)
    {
      id v12 = +[NSDate date];
      [*(id *)(*((void *)a1 + 4) + 104) setSagaLastItemPlayDataUploadDate:v12];
    }
    else
    {
      id v12 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *((void *)a1 + 4);
        if ((unint64_t)v11 > 4) {
          uint64_t v14 = @"Unknown Cloud Library Operation Status";
        }
        else {
          uint64_t v14 = *(&off_1001BBDD8 + (void)v11);
        }
        id v17 = v14;
        *(_DWORD *)int v21 = 138543618;
        uint64_t v22 = v13;
        __int16 v23 = 2114;
        uint64_t v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@ - Upload item play data operation failed with status: %{public}@", v21, 0x16u);
      }
    }

    _Block_object_dispose(buf, 8);
  }

  dispatch_source_cancel(*(dispatch_source_t *)(*((void *)a1 + 4) + 72));
  uint64_t v18 = *((void *)a1 + 4);
  uint64_t v19 = *(void **)(v18 + 72);
  *(void *)(v18 + 72) = 0;
}

void sub_10008FAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008FB0C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  return result;
}

void sub_10008FCC4(uint64_t a1, void *a2)
{
  id v3 = [a2 libraryDAAPConfiguration];
  double v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync_Oversize");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    uint64_t v12 = v5;
    __int16 v13 = 2114;
    uint64_t v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ = Fetched library DAAP configuration: %{public}@", buf, 0x16u);
  }

  if ((uint64_t)[v3 playDataBatchIntervalInMinutes] < 1) {
    double v6 = 3600.0;
  }
  else {
    double v6 = (double)(uint64_t)[v3 playDataBatchIntervalInMinutes] * 60.0;
  }
  [*(id *)(a1 + 32) uploadPlaylistPropertiesWithClientIdentity:*(void *)(a1 + 40) minimumTimeInterval:v6];
  uint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    double v8 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008FE4C;
    block[3] = &unk_1001BEC70;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t sub_10008FE4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100090008(uint64_t a1, void *a2)
{
  id v3 = [a2 libraryDAAPConfiguration];
  double v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync_Oversize");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    uint64_t v12 = v5;
    __int16 v13 = 2114;
    uint64_t v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - Fetched library DAAP configuration: %{public}@", buf, 0x16u);
  }

  if ((uint64_t)[v3 playDataBatchIntervalInMinutes] < 1) {
    double v6 = 3600.0;
  }
  else {
    double v6 = (double)(uint64_t)[v3 playDataBatchIntervalInMinutes] * 60.0;
  }
  [*(id *)(a1 + 32) uploadItemPropertiesWithClientIdentity:*(void *)(a1 + 40) minimumTimeInterval:v6];
  uint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    double v8 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100090190;
    block[3] = &unk_1001BEC70;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t sub_100090190(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100090314(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) increasePriority];
}

id sub_100090490(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) decreasePriority];
}

void sub_1000905A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000906D8;
  block[3] = &unk_1001BEC20;
  void block[4] = v2;
  dispatch_sync(v3, block);
  [*(id *)(*(void *)(a1 + 32) + 16) cancelAllImportsAndWaitForOperationsToFinish:0];
  [*(id *)(*(void *)(a1 + 32) + 8) cancelAllOperations];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  *(void *)(v4 + _Block_object_dispose(&a9, 8) = 0;

  double v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - cancelOperations: - Done!", buf, 0xCu);
  }
}

void sub_1000906D8(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - cancelOperations: - _updateCloudLibraryOperation", (uint8_t *)&v6, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 56) cancel];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0;
}

void sub_1000908D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100090A78;
  block[3] = &unk_1001BEC20;
  void block[4] = v2;
  dispatch_sync(v3, block);
  [*(id *)(*(void *)(a1 + 32) + 16) cancelAllImportsAndWaitForOperationsToFinish:1];
  [*(id *)(*(void *)(a1 + 32) + 8) cancelAllOperations];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  *(void *)(v4 + _Block_object_dispose(&a9, 8) = 0;

  int v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - cancelOperationsWithCompletion: - Done!", buf, 0xCu);
  }

  double v8 = *(void **)(a1 + 40);
  if (v8)
  {
    dispatch_source_t v9 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100090AC0;
    v10[3] = &unk_1001BEC70;
    id v11 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_100090A78(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) cancel];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0;
}

uint64_t sub_100090AC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100090F9C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 userIdentity];
  uint64_t v5 = [v4 accountDSID];
  int v6 = [v3 stringByAppendingFormat:@".%@", v5];

  return v6;
}

intptr_t sub_100091A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 itemIDs];
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 104);
  *(void *)(v5 + 104) = v4;

  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = (uint64_t)[v3 responseCode];

  if (v8 > 399)
  {
    if (v8 == 404 || v8 == 400)
    {
      uint64_t v9 = 3;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v9 = 1;
  if (v8 != 200 && v8 != 204) {
LABEL_8:
  }
    uint64_t v9 = 2;
LABEL_9:
  [v7 setStatus:v9];
  uint64_t v10 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v10);
}

void sub_100091E40(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t)[a2 code];
  if (v3 >= 1)
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Update Match Library failed with status: %ld", buf, 0xCu);
    }
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    int v6 = dispatch_get_global_queue(0, 0);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100091F8C;
    v7[3] = &unk_1001BC0C0;
    id v8 = v5;
    uint64_t v9 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_100091F8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40) == 0);
}

uint64_t sub_1000922E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100092550(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000927AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100092A04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100092C64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100092E94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000930D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100093394(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ICConnectionConfiguration);
  uint64_t v5 = +[ICUserIdentity activeAccount];
  int v6 = +[ICUserIdentityStore defaultIdentityStore];
  id v7 = [v4 initWithUserIdentity:v5 userIdentityStore:v6 clientIdentity:*(void *)(a1 + 32)];

  id v8 = [*(id *)(a1 + 40) handlerProvider];
  id v16 = 0;
  uint64_t v9 = [v8 handlerWithType:0 configuration:v7 error:&v16];
  id v10 = v16;

  if (v9)
  {
    uint64_t v11 = [v7 clientIdentity];
    [v9 disableCloudLibraryWithClientIdentity:v11 reason:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];

    [v3 finish];
  }
  else
  {
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 134218498;
      uint64_t v18 = v13;
      __int16 v19 = 1024;
      int v20 = v14;
      __int16 v21 = 2114;
      id v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CloudService %p - disableCloudLibraryWithReason (%d) - Unable to service request for cloud library - error=%{public}@", buf, 0x1Cu);
    }

    [v3 finish];
    uint64_t v15 = *(void *)(a1 + 48);
    if (v15) {
      (*(void (**)(uint64_t, id))(v15 + 16))(v15, v10);
    }
  }
}

void sub_100093688(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 handlerProvider];
  uint64_t v6 = *(void *)(a1 + 40);
  id v16 = 0;
  id v7 = [v5 handlerWithType:0 configuration:v6 error:&v16];
  id v8 = v16;

  if (v7)
  {
    uint64_t v9 = [*(id *)(a1 + 40) clientIdentity];
    [v7 enableCloudLibraryWithClientIdentity:v9 startInitialImport:*(unsigned __int8 *)(a1 + 64) enableCloudLibraryPolicy:*(void *)(a1 + 56) isExplicitUserAction:*(unsigned __int8 *)(a1 + 65) completionHandler:*(void *)(a1 + 48)];

    [v4 finish];
  }
  else
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = *(unsigned __int8 *)(a1 + 64);
      uint64_t v13 = *(void *)(a1 + 56);
      int v14 = *(unsigned __int8 *)(a1 + 65);
      *(_DWORD *)buf = 134219010;
      uint64_t v18 = v11;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 2114;
      id v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CloudService %p - authenticateForConfiguration (startInitialImport=%{BOOL}u, enableCloudLibraryPolicy=%d, isExplicitUserAction=%{BOOL}u) - Unable to service request for cloud library - error=%{public}@", buf, 0x28u);
    }

    [v4 finish];
    uint64_t v15 = *(void *)(a1 + 48);
    if (v15) {
      (*(void (**)(uint64_t, id))(v15 + 16))(v15, v8);
    }
  }
}

uint64_t sub_1000939E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_100093BB4(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  id v10 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 134219008;
    uint64_t v14 = v11;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 1024;
    unsigned int v20 = a5;
    __int16 v21 = 1024;
    unsigned int v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadIsUpdateInProgressForConfiguration: Saga [initial import: %{BOOL}u. Update in progress: %{BOOL}u], Jalisco [initial import: %{BOOL}u. Update in progress: %{BOOL}u]", (uint8_t *)&v13, 0x24u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a2 | a4, a3 | a5);
  }
  return result;
}

void sub_1000941C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218498;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadArtworkInfoForSubscriptionContainerPersistentIDs: - Sending subscription container artwork info: %{public}@ - error=%{public}@", (uint8_t *)&v9, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000944AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218498;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadScreenshotInfoForSubscriptionPersistentIDs: - Sending subscription screenshot artwork info: %{public}@ - error=%{public}@", (uint8_t *)&v9, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100094798(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218498;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadArtworkInfoForSubscriptionItemPersistentIDs: - Sending subscription item artwork info: %{public}@ - error=%{public}@", (uint8_t *)&v9, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100095D2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100095F2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218498;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadScreenshotInfoForPurchaseHistoryIDs: - Sending purchase history screenshot artwork info: %{public}@ - error=%{public}@", (uint8_t *)&v9, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100096220(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218242;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - Sending purchase history artwork info: %{public}@", (uint8_t *)&v9, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100096A74(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    double v4 = *(float *)(a1 + 48);
    int v6 = 134218240;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    double v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadSagaUpdateProgressForConfiguration: - Jalisco update progress: %f", (uint8_t *)&v6, 0x16u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, float))(result + 16))(result, 0, *(float *)(a1 + 48));
  }
  return result;
}

uint64_t sub_100096D30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100096F04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100096F14(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = +[NSDate date];
    [*(id *)(a1 + 32) setJaliscoLastLibraryUpdateTime:v3];
  }
}

void sub_100097964(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 0x100) != 0)
  {
    uint64_t v10 = [*(id *)(a1 + 32) handlerProvider];
    uint64_t v11 = *(void *)(a1 + 40);
    id v20 = 0;
    __int16 v8 = [v10 handlerWithType:0 configuration:v11 error:&v20];
    id v7 = v20;

    if (v8)
    {
      uint64_t v12 = *(void *)(a1 + 48);
      __int16 v13 = [*(id *)(a1 + 32) requestingBundleID];
      id v14 = [*(id *)(a1 + 40) clientIdentity];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_100097C04;
      v18[3] = &unk_1001BBFB0;
      id v19 = *(id *)(a1 + 56);
      [v8 addStoreItemWithOpaqueID:v12 requestingBundleID:v13 clientIdentity:v14 completionHandler:v18];
    }
    else
    {
      __int16 v15 = os_log_create("com.apple.amp.itunescloudd", "SDK");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 134218242;
        uint64_t v22 = v16;
        __int16 v23 = 2114;
        id v24 = v5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CloudService %p - sdk_addStoreItemWithOpaqueID: - Unable to service request for cloud library - error=%{public}@", buf, 0x16u);
      }

      uint64_t v17 = *(void *)(a1 + 56);
      if (v17) {
        (*(void (**)(uint64_t, void, id))(v17 + 16))(v17, 0, v7);
      }
      __int16 v8 = 0;
    }
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    NSErrorUserInfoKey v25 = NSDebugDescriptionErrorKey;
    id v7 = +[NSString stringWithFormat:@"Missing add to library capabilities in %ld", a2];
    id v26 = v7;
    __int16 v8 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    double v9 = +[NSError errorWithDomain:ICErrorDomain code:-7602 userInfo:v8];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v9);

LABEL_11:
  }
}

uint64_t sub_100097C04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100097FCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100098CEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100099084(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10009928C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100099960(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10009A280(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10009A4B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10009A6AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009A8AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218498;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadScreenshotInfoForSagaIDs: - Sending saga screenshot artwork info: %{public}@ - error=%{public}@", (uint8_t *)&v9, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10009ABA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218498;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadArtworkInfoForContainerSagaIDs: - Sending saga container artwork info: %{public}@ - error=%{public}@", (uint8_t *)&v9, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10009AE94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134218498;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadArtworkInfoForSagaIDs: - Sending saga artwork info: %{public}@ - error=%{public}@", (uint8_t *)&v9, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10009B9BC(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    double v4 = *(float *)(a1 + 48);
    int v6 = 134218240;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    double v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadSagaUpdateProgressForConfiguration: - Saga update progress: %f", (uint8_t *)&v6, 0x16u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, float))(result + 16))(result, 0, *(float *)(a1 + 48));
  }
  return result;
}

uint64_t sub_10009BC54(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 134218496;
    uint64_t v14 = v11;
    __int16 v15 = 1024;
    int v16 = a3 | a5;
    __int16 v17 = 1024;
    int v18 = a2 | a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CloudService %p - loadIsSagaUpdateInProgressForConfiguration: - Saga initial import: %{BOOL}u. Update in progress: %{BOOL}u", (uint8_t *)&v13, 0x18u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a2 | a4, a3 | a5);
  }
  return result;
}

void sub_10009C2C0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v6 isActiveLocker])
  {
    [v6 DSID];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009C7C8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (!a2 || v5)
  {
    __int16 v8 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = a1[4];
      *(_DWORD *)buf = 138543618;
      uint64_t v19 = v13;
      __int16 v20 = 2114;
      __int16 v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Could not get properties for user identity: %{public}@ - error=%{public}@.", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v7 = +[ML3MusicLibrary musicLibraryForUserAccount:a1[4]];
    __int16 v8 = [objc_alloc((Class)ICStoreRequestContext) initWithIdentity:a1[4]];
    double v9 = +[ICURLBagProvider sharedBagProvider];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10009C97C;
    v14[3] = &unk_1001BBE70;
    uint64_t v10 = a1[5];
    uint64_t v11 = (void *)a1[6];
    id v15 = v7;
    uint64_t v16 = v10;
    id v17 = v11;
    id v12 = v7;
    [v9 getBagForRequestContext:v8 withCompletionHandler:v14];
  }
}

void sub_10009C97C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 dictionaryForBagKey:ICURLBagKeyLibraryDAAP];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v4 = [v3 objectForKey:@"auto-update-polling-frequency-secs"];
    if (objc_opt_respondsToSelector()) {
      uint64_t v5 = (uint64_t)[v4 integerValue];
    }
    else {
      uint64_t v5 = 900;
    }
    uint64_t v7 = [v3 objectForKey:@"subscribed-container-polling-frequency-secs"];
    if (objc_opt_respondsToSelector()) {
      uint64_t v6 = (uint64_t)[v4 integerValue];
    }
    else {
      uint64_t v6 = -1;
    }
  }
  else
  {
    uint64_t v6 = -1;
    uint64_t v5 = 900;
  }
  unsigned int v8 = [*(id *)(a1 + 32) sagaOnDiskDatabaseRevision];
  if (v8)
  {
    double v9 = [*(id *)(a1 + 32) sagaLastLibraryUpdateTime];
    [v9 timeIntervalSinceReferenceDate];
    if (v10 <= 0.0)
    {
      BOOL v17 = 1;
    }
    else
    {
      uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        [v9 timeIntervalSince1970];
        *(_DWORD *)buf = 134217984;
        *(void *)uint64_t v63 = (uint64_t)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Last library update time: %{time_t}zd", buf, 0xCu);
      }

      uint64_t v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:v9];
      double v15 = v14;

      uint64_t v16 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)uint64_t v63 = v15;
        *(_WORD *)&v63[8] = 2048;
        double v64 = (double)v5;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Elapsed time since last library update: %g, minimum: %g", buf, 0x16u);
      }

      BOOL v17 = v15 >= (double)v5;
    }
  }
  else
  {
    BOOL v17 = 1;
  }
  if (v6 == -1)
  {
    int v18 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Subscribed containers periodic update disabled via bag.", buf, 2u);
    }
    id v34 = 0;
    BOOL v35 = 0;
  }
  else
  {
    int v18 = [*(id *)(a1 + 32) sagaLastSubscribedContainersUpdateTime];
    [v18 timeIntervalSinceReferenceDate];
    if (v19 <= 0.0) {
      goto LABEL_28;
    }
    __int16 v20 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      [v18 timeIntervalSince1970];
      *(_DWORD *)buf = 134217984;
      *(void *)uint64_t v63 = (uint64_t)v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Last subscribed containers update time: %{time_t}zd", buf, 0xCu);
    }

    uint64_t v22 = +[NSDate date];
    [v22 timeIntervalSinceDate:v18];
    double v24 = v23;

    NSErrorUserInfoKey v25 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)uint64_t v63 = v24;
      *(_WORD *)&v63[8] = 2048;
      double v64 = (double)v6;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Elapsed time since last subscribed containers update: %g, minimum: %g", buf, 0x16u);
    }

    if (v24 >= (double)v6)
    {
LABEL_28:
      id v34 = 0;
      BOOL v35 = 0;
      int v36 = 1;
      goto LABEL_33;
    }
    long long v48 = +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyDistinguishedKind equalToInteger:0];
    v61[0] = v48;
    +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyCloudLastUpdateTime equalToInteger:0];
    id v26 = v49 = v3;
    v61[1] = v26;
    uint64_t v27 = +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyCloudIsSubscribed equalToInt64:1];
    v61[2] = v27;
    uint64_t v28 = ML3ContainerPropertyStoreCloudID;
    id v29 = +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyStoreCloudID value:&off_1001CC0B0 comparison:2];
    v61[3] = v29;
    id v30 = +[NSArray arrayWithObjects:v61 count:4];
    long long v47 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v30];

    id v31 = +[ML3Container queryWithLibrary:*(void *)(a1 + 32) predicate:v47];
    id v32 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v60 = v28;
    uint64_t v33 = +[NSArray arrayWithObjects:&v60 count:1];
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_10009D24C;
    v58[3] = &unk_1001BEF58;
    id v34 = v32;
    id v59 = v34;
    [v31 enumeratePersistentIDsAndProperties:v33 usingBlock:v58];

    BOOL v35 = [v34 count] != 0;
    uint64_t v3 = v49;
  }
  int v36 = 0;
LABEL_33:

  __int16 v37 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)uint64_t v63 = v36;
    *(_WORD *)&void v63[4] = 1024;
    *(_DWORD *)&v63[6] = v35;
    LOWORD(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 2) = v17;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] shouldUpdateAllSubscribedContainers=%{BOOL}u, shouldUpdateSubscribedContainersWithNoLastUpdateTimestamp=%{BOOL}u, shouldUpdateLibrary=%{BOOL}u", buf, 0x14u);
  }

  if (v17)
  {
    if (v8) {
      uint64_t v38 = 7;
    }
    else {
      uint64_t v38 = 1;
    }
    int v39 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)uint64_t v63 = v8;
      *(_WORD *)&void v63[4] = 1024;
      *(_DWORD *)&v63[6] = v8 == 0;
      LOWORD(v64) = 1024;
      *(_DWORD *)((char *)&v64 + 2) = v38;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Updating cloud library. databaseRevision=%u, allowNoisyAuthPrompts=%{BOOL}u, reason=%d", buf, 0x14u);
    }

    __int16 v41 = *(void **)(a1 + 40);
    uint64_t v40 = *(void **)(a1 + 48);
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    void v52[2] = sub_10009D258;
    v52[3] = &unk_1001BBE28;
    char v56 = v36;
    v52[4] = v41;
    id v53 = v40;
    id v54 = *(id *)(a1 + 32);
    BOOL v57 = v35;
    id v55 = v34;
    [v41 _updateSagaLibraryWithReason:v38 allowNoisyAuthPrompt:v8 == 0 forConfiguration:v53 completionHandler:v52];

    id v42 = v53;
LABEL_46:

    goto LABEL_47;
  }
  if (v36)
  {
    CFStringRef v43 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Skipped cloud library update, updating all subscribed containers now (not ignoring min refresh interval)...", buf, 2u);
    }

    long long v44 = *(void **)(a1 + 40);
    uint64_t v45 = *(void *)(a1 + 48);
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_10009D3D0;
    v50[3] = &unk_1001BE408;
    id v51 = *(id *)(a1 + 32);
    [v44 updateSubscribedPlaylistsWithSagaIDs:0 ignoreMinRefreshInterval:0 configuration:v45 completion:v50];
    id v42 = v51;
    goto LABEL_46;
  }
  if (v35)
  {
    long long v46 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Skipped cloud library update and skipped updating all subscribed containers. Updating all subscribed containers with no last_update now...", buf, 2u);
    }

    [*(id *)(a1 + 40) updateSubscribedPlaylistsWithSagaIDs:v34 ignoreMinRefreshInterval:0 configuration:*(void *)(a1 + 48) completion:&stru_1001BBE48];
  }
LABEL_47:
}

id sub_10009D24C(uint64_t a1, uint64_t a2, void *a3)
{
  return [*(id *)(a1 + 32) addObject:*a3];
}

void sub_10009D258(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 64))
    {
      uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Update saga library completed successfully, updating all subscribed containers...", buf, 2u);
      }

      double v4 = *(void **)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_10009D438;
      v7[3] = &unk_1001BE408;
      id v8 = *(id *)(a1 + 48);
      [v4 updateSubscribedPlaylistsWithSagaIDs:0 ignoreMinRefreshInterval:1 configuration:v5 completion:v7];
    }
    else if (*(unsigned char *)(a1 + 65))
    {
      uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[BecomeActive::Cloud] Update saga library completed successfully, skipped updating all subscribed containers. Updating all subscribed containers with no last_update now...", buf, 2u);
      }

      [*(id *)(a1 + 32) updateSubscribedPlaylistsWithSagaIDs:*(void *)(a1 + 56) ignoreMinRefreshInterval:0 configuration:*(void *)(a1 + 40) completion:&stru_1001BBE00];
    }
  }
}

void sub_10009D3D0(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id v4 = +[NSDate date];
    [*(id *)(a1 + 32) setSagaLastSubscribedContainersUpdateTime:v4];
  }
}

void sub_10009D438(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id v4 = +[NSDate date];
    [*(id *)(a1 + 32) setSagaLastSubscribedContainersUpdateTime:v4];
  }
}

void sub_10009E6C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)BOOL v17 = 134217984;
    *(void *)&v17[4] = [v5 responseCode];
    double v9 = "Set album properties response: %lu";
    double v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    *(_WORD *)BOOL v17 = 0;
    double v9 = "Set album properties received no response";
    double v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    uint32_t v12 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, v17, v12);
LABEL_7:

  if (v6)
  {
    uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)BOOL v17 = 138543362;
      *(void *)&v17[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Set album properties response with error: %{public}@", v17, 0xCu);
    }
  }
  double v14 = *(void **)(a1 + 32);
  uint64_t v15 = (uint64_t)objc_msgSend(v5, "responseCode", *(_OWORD *)v17);
  if (v15 > 399)
  {
    if (v15 != 404 && v15 != 400) {
      goto LABEL_18;
    }
    uint64_t v16 = 3;
  }
  else
  {
    uint64_t v16 = 1;
    if (v15 != 200 && v15 != 204) {
LABEL_18:
    }
      uint64_t v16 = 2;
  }
  [v14 setStatus:v16];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10009FCD8(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v18 = a4;
  id v13 = a5;
  id v14 = a7;
  id v15 = a6;
  id v16 = a3;
  id v17 = a2;
  [a1 setObject:v15 forKey:v13];
  [v17 addObject:v13];

  [v16 addObject:v15];
  if (v14) {
    [v18 setObject:v14 forKey:v13];
  }
}

id sub_1000A0434(void *a1, void *a2, uint64_t a3, void *a4, double a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  uint64_t v34 = 0;
  BOOL v35 = &v34;
  uint64_t v36 = 0x3032000000;
  __int16 v37 = sub_1000A09B4;
  uint64_t v38 = sub_1000A09C4;
  id v39 = 0;
  id v12 = objc_alloc((Class)ICStoreRequestContext);
  id v13 = +[ICUserIdentity activeAccount];
  id v14 = [v12 initWithIdentity:v13];

  if (v9) {
    goto LABEL_14;
  }
  if (!v10)
  {
    uint64_t v28 = +[NSAssertionHandler currentHandler];
    id v29 = +[NSString stringWithUTF8String:"ICStoreURLRequest *_CloudGeniusUtilitiesCreatePostRequest(NSURL *__strong, NSString *__strong, NSTimeInterval, NSInteger, NSMutableDictionary *__strong, BOOL, BOOL)"];
    [v28 handleFailureInFunction:v29 file:@"CloudGeniusUtilities.m" lineNumber:315 description:@"Must provide either a URL or a URL Bag Key"];
  }
  dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
  *(void *)&long long v41 = 0;
  *((void *)&v41 + 1) = &v41;
  uint64_t v42 = 0x3032000000;
  CFStringRef v43 = sub_1000A09B4;
  long long v44 = sub_1000A09C4;
  id v45 = 0;
  id v16 = +[ICURLBagProvider sharedBagProvider];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1000A09CC;
  v30[3] = &unk_1001BD9F0;
  id v32 = &v41;
  uint64_t v33 = &v34;
  id v17 = v15;
  id v31 = v17;
  [v16 getBagForRequestContext:v14 withCompletionHandler:v30];

  dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL);
  if (v35[5])
  {
    id v18 = os_log_create("com.apple.amp.itunescloudd", "Genius");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = v35[5];
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "failed to fetch bag. err=%{public}@", buf, 0xCu);
    }
  }
  else
  {
    id v18 = [*(id *)(*((void *)&v41 + 1) + 40) stringForBagKey:v10];
    if (v18)
    {
      id v9 = +[NSURL URLWithString:v18];
      goto LABEL_13;
    }
    __int16 v20 = os_log_create("com.apple.amp.itunescloudd", "Genius");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "not creating request because url bag key '%{public}@' not found", buf, 0xCu);
    }

    id v18 = 0;
  }
  id v9 = 0;
LABEL_13:

  _Block_object_dispose(&v41, 8);
  if (!v9)
  {
    id v26 = 0;
    goto LABEL_25;
  }
LABEL_14:
  double v21 = +[NSMutableURLRequest requestWithURL:v9];
  [v21 setHTTPMethod:@"POST"];
  if (a5 > 0.0) {
    [v21 setTimeoutInterval:a5];
  }
  id v22 = v11;
  if (!v22)
  {
    id v22 = +[NSMutableDictionary dictionary];
  }
  [v22 setObject:&off_1001CC0C8 forKey:@"protocol-version"];
  [v22 setObject:&off_1001CC0C8 forKey:@"min-compatible-version"];
  *(void *)buf = 0;
  double v23 = +[NSPropertyListSerialization dataWithPropertyList:v22 format:100 options:0 error:buf];
  id v24 = *(id *)buf;
  if (!v23)
  {
    NSErrorUserInfoKey v25 = os_log_create("com.apple.amp.itunescloudd", "Genius");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v41) = 138543362;
      *(void *)((char *)&v41 + 4) = v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to serialize body dictionary to plist with error: %{public}@", (uint8_t *)&v41, 0xCu);
    }

    double v23 = 0;
  }

  if (v23)
  {
    [v21 setValue:@"application/x-apple-plist" forHTTPHeaderField:@"Content-Type"];
    [v21 setHTTPBody:v23];
  }
  id v26 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v21 requestContext:v14];
  [v26 setMaxRetryCount:a3];
  [v26 setShouldUseMescalSigning:1];

LABEL_25:
  _Block_object_dispose(&v34, 8);

  return v26;
}

void sub_1000A0974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A09B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A09C4(uint64_t a1)
{
}

void sub_1000A09CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000A0E64(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = a1[4];
      uint64_t v10 = objc_msgSend(v6, "msv_description");
      *(_DWORD *)buf = 138543618;
      id v33 = v9;
      __int16 v34 = 2114;
      BOOL v35 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Finished request error=%{public}@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = a1[4];
    *(_DWORD *)buf = 138543362;
    id v33 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished request", buf, 0xCu);
  }

  uint64_t v12 = (uint64_t)[v5 responseCode];
  if (v12 > 399)
  {
    if (v12 == 404 || v12 == 400)
    {
      uint64_t v13 = 3;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  if (v12 != 200 && v12 != 204) {
LABEL_13:
  }
    uint64_t v13 = 2;
LABEL_14:
  [a1[4] setStatus:v13];
  [a1[4] setError:v6];
  if (!v6)
  {
    id v14 = v5;
    uint64_t v15 = [v14 updatedInvitationURL];
    unsigned int v16 = [v14 updatedInviteURLExpirationDate];
    if (v16) {
      uint64_t v17 = v16 - 978307200;
    }
    else {
      uint64_t v17 = 0;
    }
    objc_storeStrong((id *)((char *)a1[4] + 106), v15);
    uint64_t v18 = [a1[4] musicLibrary];
    id v24 = _NSConcreteStackBlock;
    uint64_t v25 = 3221225472;
    id v26 = sub_1000A11A0;
    uint64_t v27 = &unk_1001BC0E8;
    id v28 = v15;
    uint64_t v31 = v17;
    id v19 = a1[5];
    id v20 = a1[4];
    id v29 = v19;
    id v30 = v20;
    id v21 = v15;
    [v18 databaseConnectionAllowingWrites:1 withBlock:&v24];

    LOBYTE(v1_Block_object_dispose(&a9, 8) = objc_msgSend(v14, "updateRequired", v24, v25, v26, v27);
    *((unsigned char *)a1[4] + 9_Block_object_dispose(&a9, 8) = (_BYTE)v18;
    *(void *)((char *)a1[4] + 114) = [a1[6] longLongValue];
  }
  id v22 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = a1[4];
    *(_DWORD *)buf = 138543362;
    id v33 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@ Operation complete", buf, 0xCu);
  }

  [a1[7] endTransaction];
  [a1[4] finish];
}

void sub_1000A11A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v12[0] = ML3ContainerPropertyCollaborationInvitationURL;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) absoluteString];
  }
  else
  {
    id v5 = &stru_1001BF9F0;
  }
  v12[1] = ML3ContainerPropertyCollaborationInvitationURLExpirationDate;
  v13[0] = v5;
  id v6 = +[NSNumber numberWithLongLong:*(void *)(a1 + 56)];
  v13[1] = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];

  if (v4) {
  if (([*(id *)(a1 + 40) setValuesForPropertiesWithDictionary:v7] & 1) == 0)
  }
  {
    id v8 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 138543362;
      uint64_t v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Failed to update container properties", (uint8_t *)&v10, 0xCu);
    }
  }
}

id sub_1000A1638(uint64_t a1)
{
  return [*(id *)(a1 + 32) resume];
}

void sub_1000A1744(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
    *(_DWORD *)buf = 138543618;
    uint64_t v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Delivering response to remote client for request %@", buf, 0x16u);
  }

  int v10 = (void *)a1[6];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000A18C0;
  v14[3] = &unk_1001BE408;
  void v14[4] = a1[4];
  uint64_t v11 = [v10 remoteObjectProxyWithErrorHandler:v14];
  uint64_t v12 = a1[5];
  uint64_t v13 = objc_msgSend(v5, "msv_errorByRemovingUnsafeUserInfo");

  [v11 deliverSubscriptionStatusResponse:v6 forRemoteRequestWithUniqueIdentifier:v12 error:v13];
}

void sub_1000A18C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2114;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ Failed to obtain remote proxy to deliver subscription status response. error = %{public}@.", (uint8_t *)&v6, 0x16u);
  }
}

void *sub_1000A1A08(void *result)
{
  if (*(unsigned char *)(result[4] + 16))
  {
    uint64_t v1 = result;
    uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[4];
      int v4 = 138543362;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ stopping...", (uint8_t *)&v4, 0xCu);
    }

    *(unsigned char *)(v1[4] + 16) = 0;
    [*(id *)(v1[4] + 24) invalidate];
    return [*(id *)(v1[4] + 24) setDelegate:0];
  }
  return result;
}

void *sub_1000A1B60(void *result)
{
  if (!*(unsigned char *)(result[4] + 16))
  {
    uint64_t v1 = result;
    uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[4];
      int v4 = 138543362;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ starting up...", (uint8_t *)&v4, 0xCu);
    }

    *(unsigned char *)(v1[4] + 16) = 1;
    objc_msgSend(*(id *)(v1[4] + 24), "setDelegate:");
    return [*(id *)(v1[4] + 24) resume];
  }
  return result;
}

uint64_t sub_1000A1CF0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 16);
  return result;
}

void sub_1000A1E50(id a1)
{
  qword_1001F38D8 = [[CloudMusicSubscriptionStatusServiceListener alloc] _init];

  _objc_release_x1();
}

uint64_t sub_1000A26E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000A27F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 32))
  {
    id v19 = +[NSAssertionHandler currentHandler];
    [v19 handleFailureInMethod:*(void *)(a1 + 56) object:*(void *)(a1 + 40) file:@"ICContentTasteRequestHandler.m" lineNumber:215 description:@"content taste change to post cannot be nil"];
  }
  if (*(unsigned char *)(*(void *)(a1 + 40) + 64))
  {
    id v4 = [objc_alloc((Class)MSVXPCTransaction) initWithName:@"PostPendingContentTasteChanges"];
    [v4 beginTransaction];
    uint64_t v5 = [*(id *)(*(void *)(a1 + 40) + 32) pendingChanges];
    int v6 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste_Oversize");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v30 = v7;
      __int16 v31 = 1024;
      LODWORD(v32) = [v5 count];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ Found %d pending content taste changes to post.", buf, 0x12u);
    }

    [*(id *)(a1 + 40) _postContentTasteChanges:v5 withCompletionHandler:0];
    __int16 v8 = [*(id *)(a1 + 32) objectForKey:@"ContentTastePendingChangesCoordinatorOperationIdentifierKey"];
    if ([v8 isEqualToString:@"ICContentTasteRequestHandlerRetryTaskIdentifier"]
      && ![v5 count])
    {
      uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste_Oversize");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543362;
        uint64_t v30 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ No pending changes for retry task.", buf, 0xCu);
      }

      *(void *)(*(void *)(a1 + 40) + 4_Block_object_dispose(&a9, 8) = 0;
      __int16 v17 = *(void **)(a1 + 48);
      if (!v17) {
        goto LABEL_10;
      }
      uint64_t v18 = dispatch_get_global_queue(0, 0);
      id v20 = _NSConcreteStackBlock;
      uint64_t v21 = 3221225472;
      id v22 = sub_1000A2C2C;
      id v23 = &unk_1001BEC70;
      id v24 = v17;
      dispatch_async(v18, &v20);

      int v10 = v24;
    }
    else
    {
      id v9 = *(void **)(a1 + 40);
      uint64_t v28 = *(void *)(a1 + 32);
      int v10 = +[NSArray arrayWithObjects:&v28 count:1];
      [v9 _postContentTasteChanges:v10 withCompletionHandler:*(void *)(a1 + 48)];
    }

LABEL_10:
    objc_msgSend(v4, "endTransaction", v20, v21, v22, v23);
    [v3 finishWithError:0];

LABEL_15:
    goto LABEL_16;
  }
  uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v30 = v12;
    __int16 v31 = 2048;
    id v32 = v3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ handler is no longer valid. Not running operation=%p", buf, 0x16u);
  }

  id v4 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  [v3 finishWithError:v4];
  uint64_t v13 = *(void **)(a1 + 48);
  if (v13)
  {
    id v14 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A2C18;
    block[3] = &unk_1001BEC48;
    id v27 = v13;
    id v4 = v4;
    id v26 = v4;
    dispatch_async(v14, block);

    uint64_t v5 = v27;
    goto LABEL_15;
  }
LABEL_16:
}

uint64_t sub_1000A2C18(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000A2C2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000A2E08(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 72) = 0;
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@  starting retry operation to post content taste change", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 32) updateContentTasteForReason:2 invalidatingLocalCache:0 completionHandler:0];
}

void sub_1000A3048(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      int v17 = 138543362;
      uint64_t v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@  running default task tp update content taste", (uint8_t *)&v17, 0xCu);
    }

    [*(id *)(a1 + 40) updateContentTasteForReason:3 invalidatingLocalCache:0 completionHandler:0];
  }
  else if (!state)
  {
    xpc_object_t v5 = xpc_activity_copy_criteria(v3);
    uint64_t v6 = v5;
    if (v5)
    {
      if (*(double *)(a1 + 48) != xpc_dictionary_get_double(v5, "MediaContentTasteResponseExpirationTimeKey"))
      {
        xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 32));
        uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a1 + 40);
          id v9 = *(void **)(v8 + 40);
          int v10 = +[NSLocale currentLocale];
          uint64_t v11 = [v9 descriptionWithLocale:v10];
          int v17 = 138543618;
          uint64_t v18 = v8;
          __int16 v19 = 2114;
          id v20 = v11;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@  updating criteria to fire next content taste operation at %{public}@", (uint8_t *)&v17, 0x16u);
        }
        goto LABEL_15;
      }
      uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        int v17 = 138543362;
        uint64_t v18 = v16;
        uint64_t v15 = "%{public}@  criteria to fire next content taste operation is unchanged";
        goto LABEL_14;
      }
    }
    else
    {
      xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 32));
      uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        int v17 = 138543362;
        uint64_t v18 = v14;
        uint64_t v15 = "%{public}@  setting criteria to fire next content taste operation";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v17, 0xCu);
      }
    }
LABEL_15:
  }
}

void sub_1000A3420(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    unsigned int v4 = [*(id *)(v3 + 16) operationCount];
    *(_DWORD *)buf = 138543618;
    uint64_t v10 = v3;
    __int16 v11 = 1024;
    unsigned int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - cancelling %d operations and clearing all pending changes", buf, 0x12u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 64) = 0;
  xpc_activity_unregister((const char *)[*(id *)(*(void *)(a1 + 32) + 56) UTF8String]);
  xpc_object_t v5 = +[ICCloudContentTasteResponseCacheManager sharedCloudContentTasteResponseCacheManager];
  [v5 removeCachedContentTasteResponseForConnectionConfiguration:*(void *)(*(void *)(a1 + 32) + 24)];

  [*(id *)(*(void *)(a1 + 32) + 32) removePendingChanges];
  [*(id *)(*(void *)(a1 + 32) + 16) cancelAllOperations];
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1000A35B0;
  v7[3] = &unk_1001BEC70;
  id v8 = *(id *)(a1 + 40);
  [v6 addOperationWithBlock:v7];
}

void sub_1000A35B0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A3654;
    block[3] = &unk_1001BEC70;
    id v4 = v1;
    dispatch_async(v2, block);
  }
}

uint64_t sub_1000A3654(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A3730(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = +[ICCloudContentTasteResponseCacheManager sharedCloudContentTasteResponseCacheManager];
    [v2 removeCachedContentTasteResponseForConnectionConfiguration:*(void *)(*(void *)(a1 + 32) + 24)];
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    v16[1] = @"ContentTastePendingChangesCoordinatorInvalidateCacheKey";
    v17[0] = v3;
    v16[0] = @"ContentTastePendingChangesCoordinatorContentTasteItemKey";
    id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
    v17[1] = v4;
    xpc_object_t v5 = (void **)v17;
    uint64_t v6 = (const __CFString **)v16;
    uint64_t v7 = 2;
  }
  else
  {
    CFStringRef v14 = @"ContentTastePendingChangesCoordinatorInvalidateCacheKey";
    id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
    uint64_t v15 = v4;
    xpc_object_t v5 = &v15;
    uint64_t v6 = &v14;
    uint64_t v7 = 1;
  }
  id v8 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v6 count:v7];

  v12[0] = @"ContentTastePendingChangesCoordinatorOperationIdentifierKey";
  id v9 = +[NSUUID UUID];
  uint64_t v10 = [v9 UUIDString];
  v12[1] = @"ContentTastePendingChangesCoordinatorPendingChangesKey";
  v13[0] = v10;
  v13[1] = v8;
  __int16 v11 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];

  [*(id *)(a1 + 32) _postPendingContentTasteChangesByAddingChange:v11 completionHandler:*(void *)(a1 + 48)];
}

void sub_1000A3984(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = +[ICCloudContentTasteResponseCacheManager sharedCloudContentTasteResponseCacheManager];
    [v2 removeCachedContentTasteResponseForConnectionConfiguration:*(void *)(*(void *)(a1 + 32) + 24)];

    BOOL v3 = *(unsigned char *)(a1 + 56) != 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  CFStringRef v19 = @"ContentTastePendingChangesCoordinatorInvalidateCacheKey";
  id v4 = +[NSNumber numberWithBool:v3];
  id v20 = v4;
  xpc_object_t v5 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];

  unint64_t v6 = *(void *)(a1 + 48);
  if (v6 >= 4)
  {
    id v8 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      uint64_t v16 = v9;
      __int16 v17 = 1024;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "%{public}@ - Requesting content taste for invalid reason=%d", buf, 0x12u);
    }

    __int16 v11 = +[NSUUID UUID];
    uint64_t v7 = [v11 UUIDString];
  }
  else
  {
    uint64_t v7 = off_1001BC1F0[v6];
  }
  v13[0] = @"ContentTastePendingChangesCoordinatorOperationIdentifierKey";
  v13[1] = @"ContentTastePendingChangesCoordinatorPendingChangesKey";
  v14[0] = v7;
  v14[1] = v5;
  unsigned int v12 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:2];
  [*(id *)(a1 + 32) _postPendingContentTasteChangesByAddingChange:v12 completionHandler:*(void *)(a1 + 40)];
}

void sub_1000A4100(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000A4120(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*(void *)(a1 + 32))
  {
    id v6 = WeakRetained;
    id v3 = [WeakRetained status];
    uint64_t v4 = *(void *)(a1 + 32);
    if (v3 == (id)1)
    {
      xpc_object_t v5 = [v6 books];
      (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0);
    }
    else
    {
      xpc_object_t v5 = +[NSError ic_cloudClientErrorWithCode:2002 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }

    id WeakRetained = v6;
  }
}

uint64_t sub_1000A41E4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_1000A4344(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 64);
    int v7 = 138543618;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ - cancelling _updateLibraryOperation=%p", (uint8_t *)&v7, 0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 64) cancel];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 64);
  *(void *)(v5 + 64) = 0;
}

void sub_1000A4528(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    [*(id *)(*(void *)(a1 + 32) + 16) setClientIdentity:*(void *)(a1 + 40)];
    uint64_t v13 = [*(id *)(a1 + 32) _DAAPMediaKindFromJaliscoSupportedMediaKind:*(void *)(a1 + 56)];
    CFStringRef v14 = [*(id *)(*(void *)(a1 + 32) + 16) jaliscoLastExcludedMediaKinds];
    unsigned __int8 v15 = [v14 containsObject:v13];

    uint64_t v16 = *(void **)(a1 + 48);
    if (v16)
    {
      __int16 v17 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_1000A47A0;
      v18[3] = &unk_1001BC2B8;
      id v19 = v16;
      unsigned __int8 v20 = v15;
      dispatch_async(v17, v18);
    }
    goto LABEL_8;
  }
  int v7 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    __int16 v9 = [*(id *)(v8 + 8) userIdentity];
    uint64_t v10 = [v9 accountDSID];
    *(_DWORD *)buf = 138543874;
    uint64_t v25 = v8;
    __int16 v26 = 2114;
    id v27 = v10;
    __int16 v28 = 2114;
    id v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Failed to get account properties - DSID=%{public}@ err=%{public}@", buf, 0x20u);
  }
  __int16 v11 = *(void **)(a1 + 48);
  if (v11)
  {
    unsigned int v12 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A4788;
    block[3] = &unk_1001BEC48;
    id v23 = v11;
    id v22 = v6;
    dispatch_async(v12, block);

    uint64_t v13 = v23;
LABEL_8:
  }
}

uint64_t sub_1000A4788(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 1, *(void *)(a1 + 32));
}

uint64_t sub_1000A47A0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 0);
}

void sub_1000A48B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = [*(id *)(v9 + 8) userIdentity];
      __int16 v11 = [v10 accountDSID];
      *(_DWORD *)buf = 138543874;
      uint64_t v24 = v9;
      __int16 v25 = 2114;
      __int16 v26 = v11;
      __int16 v27 = 2114;
      id v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Failed to get account properties - DSID=%{public}@ err=%{public}@", buf, 0x20u);
    }
    unsigned int v12 = *(void **)(a1 + 48);
    if (v12)
    {
      uint64_t v13 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1000A4B14;
      v20[3] = &unk_1001BEC48;
      id v22 = v12;
      id v21 = v6;
      dispatch_async(v13, v20);
    }
  }
  else
  {
    if (v8)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543618;
      uint64_t v24 = v14;
      __int16 v25 = 1024;
      LODWORD(v26) = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Reload media purchase history by removing media kind %d", buf, 0x12u);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) setClientIdentity:*(void *)(a1 + 40)];
    uint64_t v16 = *(void **)(a1 + 32);
    __int16 v17 = (void *)v16[2];
    int v18 = [v16 _DAAPMediaKindFromJaliscoSupportedMediaKind:*(void *)(a1 + 56)];
    id v19 = +[NSSet setWithObject:v18];
    [v17 updateJaliscoExcludedMediaKindsWith:v19 excludingMediaKindsInSet:1];

    [*(id *)(a1 + 32) _updateJaliscoLibraryWithClientIdentity:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

uint64_t sub_1000A4B14(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000A4C24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = [*(id *)(v9 + 8) userIdentity];
      __int16 v11 = [v10 accountDSID];
      *(_DWORD *)buf = 138543874;
      uint64_t v24 = v9;
      __int16 v25 = 2114;
      __int16 v26 = v11;
      __int16 v27 = 2114;
      id v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Failed to get account properties - DSID=%{public}@ err=%{public}@", buf, 0x20u);
    }
    unsigned int v12 = *(void **)(a1 + 48);
    if (v12)
    {
      uint64_t v13 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1000A4E80;
      v20[3] = &unk_1001BEC48;
      id v22 = v12;
      id v21 = v6;
      dispatch_async(v13, v20);
    }
  }
  else
  {
    if (v8)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543618;
      uint64_t v24 = v14;
      __int16 v25 = 1024;
      LODWORD(v26) = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Reload media purchase history by adding media kind %d", buf, 0x12u);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) setClientIdentity:*(void *)(a1 + 40)];
    uint64_t v16 = *(void **)(a1 + 32);
    __int16 v17 = (void *)v16[2];
    int v18 = [v16 _DAAPMediaKindFromJaliscoSupportedMediaKind:*(void *)(a1 + 56)];
    id v19 = +[NSSet setWithObject:v18];
    [v17 updateJaliscoExcludedMediaKindsWith:v19 excludingMediaKindsInSet:0];

    [*(id *)(a1 + 32) _updateJaliscoLibraryWithClientIdentity:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

uint64_t sub_1000A4E80(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000A5234(uint64_t a1)
{
  uint64_t v2 = +[BaseRequestHandler handlerForConfiguration:*(void *)(*(void *)(a1 + 32) + 8)];
  [v2 cancelAllOperationsAndWaitForOperationsToFinish:1];

  [*(id *)(a1 + 32) cancelAllOperationsAndWaitForOperationsToFinish:1];
  [*(id *)(*(void *)(a1 + 32) + 16) clearJaliscoLastExcludedMediaKinds];
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A530C;
    block[3] = &unk_1001BEC70;
    id v6 = v3;
    dispatch_async(v4, block);
  }
}

uint64_t sub_1000A530C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A5868(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000A5BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A5BF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:NSURLErrorDomain code:-999 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000A5C6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v2 = [WeakRetained cloudArtworkInfoDictionaries];
    (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v2, 0);
  }
}

uint64_t sub_1000A5CF0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_1000A5EB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v8 = [*(id *)(a1 + 32) artworkImporter];
    [v8 importScreenshotForPurchaseHistoryID:*(void *)(a1 + 56) clientIdentity:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543618;
      uint64_t v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ - No active account, skipping import screenshot for purchase history ID: %llu", buf, 0x16u);
    }

    id v6 = *(void **)(a1 + 48);
    if (v6)
    {
      int v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000A6044;
      block[3] = &unk_1001BEC70;
      id v10 = v6;
      dispatch_async(v7, block);
    }
  }
}

void sub_1000A6044(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ic_cloudClientErrorWithCode:2009 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000A61AC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v8 = [*(id *)(a1 + 32) artworkImporter];
    [v8 importItemArtworkForPurchaseHistoryID:*(void *)(a1 + 56) clientIdentity:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v3 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543618;
      uint64_t v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ - No active account, skipping import artwork for purchase history ID: %llu", buf, 0x16u);
    }

    id v6 = *(void **)(a1 + 48);
    if (v6)
    {
      int v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000A633C;
      block[3] = &unk_1001BEC70;
      id v10 = v6;
      dispatch_async(v7, block);
    }
  }
}

void sub_1000A633C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ic_cloudClientErrorWithCode:2009 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000A658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A65B4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = [WeakRetained error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_1000A686C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A6894(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = [WeakRetained error];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

uint64_t sub_1000A6900(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000A6918(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A692C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A6940(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A6954(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000A6968(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7400 userInfo:*(void *)(a1 + 32)];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000A6AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000A6AC0(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 64);
  if (result)
  {
    id result = [result updateProgress];
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  }
  return result;
}

void sub_1000A6BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void *sub_1000A6C1C(void *result)
{
  if (*(void *)(result[4] + 64))
  {
    uint64_t v1 = result;
    *(unsigned char *)(*(void *)(result[5] + 8) + 24) = 1;
    id result = [*(id *)(result[4] + 64) isInitialImport];
    *(unsigned char *)(*(void *)(v1[6] + 8) + 24) = (_BYTE)result;
  }
  return result;
}

void sub_1000A6C70(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) cancel];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0;
}

void sub_1000A6CB8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) cancel];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0;
}

void sub_1000A8FB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[ICUserIdentityStore defaultIdentityStore];
  [v3 setIdentityStore:v4];

  [v3 setIdentity:*(void *)(a1 + 32)];
  [v3 setAllowsExpiredBags:1];
  id v5 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v3 setAuthenticationProvider:v5];
}

void sub_1000A94D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A94F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A9500(uint64_t a1)
{
}

void sub_1000A9508(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  int v7 = [v9 libraryUID];
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_1000AC6B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v31 = v9;
      __int16 v32 = 2114;
      id v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ failed to load bag. err=%{public}@", buf, 0x16u);
    }

    [*(id *)(a1 + 32) finishWithError:v6];
  }
  else
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Executing request for AMPMusicArtistNewContentResponse", buf, 0xCu);
    }

    __int16 v11 = [v5 dictionaryForBagKey:ICURLBagKeyArtistNewContent];
    uint64_t v12 = [v11 objectForKey:@"url"];
    __int16 v13 = +[NSURL URLWithString:v12];
    if (v13)
    {
      __int16 v25 = v11;
      id v14 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v13];
      [v14 setCachePolicy:1];
      [v14 setHTTPMethod:@"GET"];
      [v14 setValue:ICHTTPHeaderContentTypeXProtobuf forHTTPHeaderField:ICHTTPHeaderKeyContentType];
      id v15 = *(id *)(*(void *)(a1 + 32) + 8);
      id v16 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v14 requestContext:v15];
      [v16 setAnisetteVersion:0];
      __int16 v17 = +[MCProfileConnection sharedConnection];
      unsigned int v18 = [v17 effectiveBoolValueForSetting:MCFeatureExplicitContentAllowed];

      if (v18 != 1)
      {
        CFStringRef v28 = @"itre";
        CFStringRef v29 = @"1";
        id v19 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
        [v16 setAdditionalHTTPCookies:v19];
      }
      unsigned __int8 v20 = +[ICURLSessionManager defaultSession];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      void v26[2] = sub_1000ACAA0;
      v26[3] = &unk_1001BD530;
      v26[4] = *(void *)(a1 + 32);
      id v27 = v14;
      id v21 = v14;
      [v20 enqueueDataRequest:v16 withCompletionHandler:v26];

      __int16 v11 = v25;
    }
    else
    {
      id v22 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        uint64_t v31 = v23;
        __int16 v32 = 2114;
        id v33 = v12;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@ Failure to find bag key for artist recommendations url. Bag Key: %{public}@", buf, 0x16u);
      }

      uint64_t v24 = *(void **)(a1 + 32);
      id v21 = +[NSError errorWithDomain:ICErrorDomain code:-7201 userInfo:0];
      [v24 finishWithError:v21];
    }
  }
}

void sub_1000ACAA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 bodyData];
  int v7 = v6;
  if (v5)
  {
    BOOL v8 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v19 = 138543618;
      uint64_t v20 = v9;
      __int16 v21 = 2114;
      id v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Sync request failed. err=%{public}@", (uint8_t *)&v19, 0x16u);
    }

    uint64_t v10 = v5;
    goto LABEL_14;
  }
  if (![v6 length])
  {
    id v16 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      unsigned int v18 = *(void **)(a1 + 40);
      int v19 = 138543618;
      uint64_t v20 = v17;
      __int16 v21 = 2114;
      id v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ Sync request failed. Artist new content request returned no data %{public}@", (uint8_t *)&v19, 0x16u);
    }

    goto LABEL_13;
  }
  __int16 v11 = [[AMPMusicArtistNewContentResponse alloc] initWithData:v7];
  uint64_t v12 = *(void *)(a1 + 32);
  __int16 v13 = *(void **)(v12 + 16);
  *(void *)(v12 + 16) = v11;

  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
LABEL_13:
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  id v14 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v19 = 138543362;
    uint64_t v20 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ failed to decode response object", (uint8_t *)&v19, 0xCu);
  }

  uint64_t v10 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
LABEL_14:
  [*(id *)(a1 + 32) finishWithError:v10];
}

uint64_t sub_1000ACE14(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 16), a2);
}

void sub_1000AD23C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      BOOL v8 = objc_msgSend(v6, "msv_description");
      *(_DWORD *)buf = 138543362;
      id v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to complete artist update request error=%{public}@", buf, 0xCu);
    }
  }
  uint64_t v9 = v6;
  if ([v5 responseCode] != (id)200)
  {
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      id v39 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ Received non-200 response for artists request, failing update", buf, 0xCu);
    }

    uint64_t v9 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-5 userInfo:0];
  }
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if ([*(id *)(a1 + 32) isCancelled])
    {
      uint64_t v12 = *(void *)(a1 + 64);
      __int16 v13 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-2 userInfo:0];
      (*(void (**)(uint64_t, SagaImportController *, void))(v12 + 16))(v12, v13, 0);
    }
    else
    {
      __int16 v13 = objc_alloc_init(SagaImportController);
      [(SagaImportController *)v13 processDAAPFileAtURL:*(void *)(a1 + 40)];
      if ([(SagaImportController *)v13 shouldRestart])
      {
        id v14 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void **)(a1 + 32);
          unsigned int v16 = [*(id *)(a1 + 48) count];
          *(_DWORD *)buf = 138543618;
          id v39 = v15;
          __int16 v40 = 1024;
          *(_DWORD *)long long v41 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ Server requested restart for artists request. clearing %d previous pages and starting again...", buf, 0x12u);
        }

        uint64_t v17 = +[NSFileManager defaultManager];
        uint64_t v18 = *(void *)(a1 + 56);
        id v37 = 0;
        unsigned __int8 v19 = [v17 removeItemAtPath:v18 error:&v37];
        id v20 = v37;
        if ((v19 & 1) == 0)
        {
          __int16 v21 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v39 = v20;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to remove obsolete items DAAP files with error: %@", buf, 0xCu);
          }
        }
        *(_DWORD *)(*(void *)(a1 + 32) + 72) = 0;
        id v22 = *(void **)(a1 + 32);
        uint64_t v23 = +[NSMutableArray array];
        [v22 _fetchUpdatedArtistsWithPaginationToken:0 responseFileURLs:v23 completion:*(void *)(a1 + 64)];
      }
      else
      {
        float v24 = (float)[(SagaImportController *)v13 processedItemCount];
        float v25 = v24 / (float)[(SagaImportController *)v13 totalItemCount];
        *(float *)&double v26 = v25;
        [*(id *)(a1 + 32) _updateProgressWithItemsProgress:0.0 albumsProgress:0.0 artistsProgress:v26 playlistProgress:0.0 importerProgress:0.0];
        id v27 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v28 = *(void **)(a1 + 32);
          unsigned int v29 = [(SagaImportController *)v13 currentItemCount];
          unsigned int v30 = [(SagaImportController *)v13 processedItemCount];
          unsigned int v31 = [(SagaImportController *)v13 totalItemCount];
          *(_DWORD *)buf = 138544386;
          id v39 = v28;
          __int16 v40 = 1024;
          *(_DWORD *)long long v41 = v29;
          *(_WORD *)&v41[4] = 2048;
          *(double *)&v41[6] = (float)(v25 * 100.0);
          __int16 v42 = 1024;
          unsigned int v43 = v30;
          __int16 v44 = 1024;
          unsigned int v45 = v31;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@ Downloaded artists response contains %u artists -- overall progress = %.0f%% (%u/%u)", buf, 0x28u);
        }

        [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
        uint64_t v17 = [(SagaImportController *)v13 currentPaginationToken];
        id v32 = [v17 length];
        id v33 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (v34)
          {
            BOOL v35 = *(void **)(a1 + 32);
            *(_DWORD *)buf = 138543618;
            id v39 = v35;
            __int16 v40 = 2114;
            *(void *)long long v41 = v17;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@ Requesting next batch of artist data with token: %{public}@", buf, 0x16u);
          }

          [*(id *)(a1 + 32) _fetchUpdatedArtistsWithPaginationToken:v17 responseFileURLs:*(void *)(a1 + 48) completion:*(void *)(a1 + 64)];
        }
        else
        {
          if (v34)
          {
            uint64_t v36 = *(void **)(a1 + 32);
            *(_DWORD *)buf = 138543362;
            id v39 = v36;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished fetching artist data", buf, 0xCu);
          }

          (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
        }
      }
    }
  }
}

void sub_1000ADBA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = objc_msgSend(v6, "msv_description");
      *(_DWORD *)buf = 138543618;
      uint64_t v41 = v8;
      __int16 v42 = 2114;
      *(void *)unsigned int v43 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Failed to complete albums update request error=%{public}@", buf, 0x16u);
    }
  }
  uint64_t v10 = v6;
  if ([v5 responseCode] != (id)200)
  {
    __int16 v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Received non-200 response for albums request, failing update", buf, 0xCu);
    }

    uint64_t v10 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-5 userInfo:0];
  }
  if (v10)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if ([*(id *)(a1 + 32) isCancelled])
    {
      uint64_t v13 = *(void *)(a1 + 64);
      id v14 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-2 userInfo:0];
      (*(void (**)(uint64_t, SagaImportController *, void))(v13 + 16))(v13, v14, 0);
    }
    else
    {
      id v14 = objc_alloc_init(SagaImportController);
      [(SagaImportController *)v14 processDAAPFileAtURL:*(void *)(a1 + 40)];
      if ([(SagaImportController *)v14 shouldRestart])
      {
        uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          unsigned int v17 = [*(id *)(a1 + 48) count];
          *(_DWORD *)buf = 138543618;
          uint64_t v41 = v16;
          __int16 v42 = 1024;
          *(_DWORD *)unsigned int v43 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ Server requested restart for albums request. clearing %d previous pages and starting again...", buf, 0x12u);
        }

        uint64_t v18 = +[NSFileManager defaultManager];
        uint64_t v19 = *(void *)(a1 + 56);
        id v39 = 0;
        unsigned __int8 v20 = [v18 removeItemAtPath:v19 error:&v39];
        id v21 = v39;
        if ((v20 & 1) == 0)
        {
          id v22 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138543618;
            uint64_t v41 = v23;
            __int16 v42 = 2112;
            *(void *)unsigned int v43 = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@ Failed to remove obsolete items DAAP files with error: %@", buf, 0x16u);
          }
        }
        *(_DWORD *)(*(void *)(a1 + 32) + 6_Block_object_dispose(&a9, 8) = 0;
        float v24 = *(void **)(a1 + 32);
        float v25 = +[NSMutableArray array];
        [v24 _fetchUpdatedAlbumsWithPaginationToken:0 responseFileURLs:v25 completion:*(void *)(a1 + 64)];
      }
      else
      {
        float v26 = (float)[(SagaImportController *)v14 processedItemCount];
        float v27 = v26 / (float)[(SagaImportController *)v14 totalItemCount];
        *(float *)&double v28 = v27;
        [*(id *)(a1 + 32) _updateProgressWithItemsProgress:0.0 albumsProgress:v28 artistsProgress:0.0 playlistProgress:0.0 importerProgress:0.0];
        unsigned int v29 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = *(void *)(a1 + 32);
          unsigned int v31 = [(SagaImportController *)v14 currentItemCount];
          unsigned int v32 = [(SagaImportController *)v14 processedItemCount];
          unsigned int v33 = [(SagaImportController *)v14 totalItemCount];
          *(_DWORD *)buf = 138544386;
          uint64_t v41 = v30;
          __int16 v42 = 1024;
          *(_DWORD *)unsigned int v43 = v31;
          *(_WORD *)&void v43[4] = 2048;
          *(double *)&v43[6] = (float)(v27 * 100.0);
          __int16 v44 = 1024;
          unsigned int v45 = v32;
          __int16 v46 = 1024;
          unsigned int v47 = v33;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@ Downloaded albums response contains %u albums -- overall progress = %.0f%% (%u/%u)", buf, 0x28u);
        }

        [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
        uint64_t v18 = [(SagaImportController *)v14 currentPaginationToken];
        id v34 = [v18 length];
        BOOL v35 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        if (v34)
        {
          if (v36)
          {
            uint64_t v37 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138543618;
            uint64_t v41 = v37;
            __int16 v42 = 2114;
            *(void *)unsigned int v43 = v18;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%{public}@ Requesting next batch of album data with token: %{public}@", buf, 0x16u);
          }

          [*(id *)(a1 + 32) _fetchUpdatedAlbumsWithPaginationToken:v18 responseFileURLs:*(void *)(a1 + 48) completion:*(void *)(a1 + 64)];
        }
        else
        {
          if (v36)
          {
            uint64_t v38 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138543362;
            uint64_t v41 = v38;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished fetching album data", buf, 0xCu);
          }

          (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
        }
      }
    }
  }
}

void sub_1000AE53C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = objc_msgSend(v6, "msv_description");
      int v19 = 138543618;
      uint64_t v20 = v8;
      __int16 v21 = 2114;
      id v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Failed to complete playlist update request error=%{public}@", (uint8_t *)&v19, 0x16u);
    }
  }
  uint64_t v10 = v6;
  if ([v5 responseCode] != (id)200)
  {
    __int16 v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v19 = 138543362;
      uint64_t v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Received non-200 response for playlist request, failing update", (uint8_t *)&v19, 0xCu);
    }

    uint64_t v10 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-5 userInfo:0];
  }
  if (v10)
  {
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_16:
    v13();
    goto LABEL_17;
  }
  if (![*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v16 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v19 = 138543362;
      uint64_t v20 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished fetching playlist data", (uint8_t *)&v19, 0xCu);
    }

    LODWORD(v1_Block_object_dispose(&a9, 8) = 1.0;
    [*(id *)(a1 + 32) _updateProgressWithItemsProgress:0.0 albumsProgress:0.0 artistsProgress:0.0 playlistProgress:v18 importerProgress:0.0];
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-2 userInfo:0];
  (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v15, 0);

LABEL_17:
}

void sub_1000AEB00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = objc_msgSend(v6, "msv_description");
      *(_DWORD *)buf = 138543618;
      uint64_t v47 = v8;
      __int16 v48 = 2114;
      *(void *)long long v49 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Failed to complete playlist update request error=%{public}@", buf, 0x16u);
    }
  }
  uint64_t v10 = v6;
  if ([v5 responseCode] != (id)200)
  {
    __int16 v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v47 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Received non-200 response for playlist request, failing update", buf, 0xCu);
    }

    uint64_t v10 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-5 userInfo:0];
  }
  if (v10)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    if ([*(id *)(a1 + 32) isCancelled])
    {
      uint64_t v13 = *(void *)(a1 + 72);
      uint64_t v14 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-2 userInfo:0];
      (*(void (**)(uint64_t, SagaImportController *, void, void, void))(v13 + 16))(v13, v14, 0, 0, 0);
    }
    else
    {
      uint64_t v14 = objc_alloc_init(SagaImportController);
      [(SagaImportController *)v14 processDAAPFileAtURL:*(void *)(a1 + 40)];
      if ([(SagaImportController *)v14 shouldRestart])
      {
        uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          unsigned int v17 = [*(id *)(a1 + 48) count];
          *(_DWORD *)buf = 138543618;
          uint64_t v47 = v16;
          __int16 v48 = 1024;
          *(_DWORD *)long long v49 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ Server requested restart for items request. clearing %d previous pages and starting again...", buf, 0x12u);
        }

        double v18 = +[NSFileManager defaultManager];
        uint64_t v19 = *(void *)(a1 + 56);
        id v45 = 0;
        unsigned __int8 v20 = [v18 removeItemAtPath:v19 error:&v45];
        id v21 = v45;
        if ((v20 & 1) == 0)
        {
          id v22 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138543618;
            uint64_t v47 = v23;
            __int16 v48 = 2112;
            *(void *)long long v49 = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@ Failed to remove obsolete items DAAP files with error: %@", buf, 0x16u);
          }
        }
        *(_DWORD *)(*(void *)(a1 + 32) + 64) = 0;
        float v24 = *(void **)(a1 + 32);
        float v25 = +[NSMutableArray array];
        float v26 = +[NSMutableDictionary dictionary];
        [v24 _fetchUpdatedTracksWithPaginationToken:0 responseFileURLs:v25 currentIncludesBookmarkable:0 cloudIDToLyricsTokenMap:v26 completion:*(void *)(a1 + 72)];
      }
      else
      {
        if (*(unsigned char *)(a1 + 80)) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = [(SagaImportController *)v14 includesBookmarkable];
        }
        double v28 = [(SagaImportController *)v14 cloudIDToLyricsTokenMap];
        id v29 = [v28 count];

        if (v29)
        {
          uint64_t v30 = *(void **)(a1 + 64);
          unsigned int v31 = [(SagaImportController *)v14 cloudIDToLyricsTokenMap];
          [v30 addEntriesFromDictionary:v31];
        }
        float v32 = (float)[(SagaImportController *)v14 processedItemCount];
        float v33 = v32 / (float)[(SagaImportController *)v14 totalItemCount];
        *(float *)&double v34 = v33;
        [*(id *)(a1 + 32) _updateProgressWithItemsProgress:v34 albumsProgress:0.0 artistsProgress:0.0 playlistProgress:0.0 importerProgress:0.0];
        BOOL v35 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v36 = *(void *)(a1 + 32);
          unsigned int v37 = [(SagaImportController *)v14 currentItemCount];
          unsigned int v38 = [(SagaImportController *)v14 processedItemCount];
          unsigned int v39 = [(SagaImportController *)v14 totalItemCount];
          *(_DWORD *)buf = 138544386;
          uint64_t v47 = v36;
          __int16 v48 = 1024;
          *(_DWORD *)long long v49 = v37;
          *(_WORD *)&v49[4] = 2048;
          *(double *)&v49[6] = (float)(v33 * 100.0);
          __int16 v50 = 1024;
          unsigned int v51 = v38;
          __int16 v52 = 1024;
          unsigned int v53 = v39;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%{public}@ Downloaded items response contains %u items -- overall progress = %.0f%% (%u/%u)", buf, 0x28u);
        }

        [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
        double v18 = [(SagaImportController *)v14 currentPaginationToken];
        id v40 = [v18 length];
        uint64_t v41 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
        if (v40)
        {
          if (v42)
          {
            uint64_t v43 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138543618;
            uint64_t v47 = v43;
            __int16 v48 = 2114;
            *(void *)long long v49 = v18;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%{public}@ Requesting next batch of item data with token: %{public}@", buf, 0x16u);
          }

          [*(id *)(a1 + 32) _fetchUpdatedTracksWithPaginationToken:v18 responseFileURLs:*(void *)(a1 + 48) currentIncludesBookmarkable:v27 cloudIDToLyricsTokenMap:*(void *)(a1 + 64) completion:*(void *)(a1 + 72)];
        }
        else
        {
          if (v42)
          {
            uint64_t v44 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138543362;
            uint64_t v47 = v44;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished fetching items data", buf, 0xCu);
          }

          (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
        }
      }
    }
  }
}

id sub_1000AF2A4(id a1, NSURL *a2)
{
  return [(NSURL *)a2 path];
}

id sub_1000AF620(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyStoreSagaID value:&off_1001CC1A0 comparison:2];
  v34[0] = v4;
  id v5 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyStoreCloudAssetAvailable equalToInt64:0];
  v34[1] = v5;
  id v6 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyStoreProtectionType equalToInt64:2];
  void v34[2] = v6;
  int v7 = +[NSArray arrayWithObjects:v34 count:3];
  uint64_t v8 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v7];

  uint64_t v9 = +[ML3Track unrestrictedAllItemsQueryWithlibrary:*(void *)(a1 + 32) predicate:v8 orderingTerms:&__NSArray0__struct];
  +[NSMutableArray array];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  void v28[2] = sub_1000AFA38;
  v28[3] = &unk_1001BE4C8;
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  id v29 = v10;
  [v9 enumeratePersistentIDsUsingBlock:v28];
  if ([v10 count])
  {
    __int16 v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      id v13 = [v10 count];
      *(_DWORD *)buf = 138543874;
      uint64_t v31 = v12;
      __int16 v32 = 2048;
      *(void *)float v33 = v13;
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = 2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ Found %lu unavailable tracks to unlink with asset protection type = %d", buf, 0x1Cu);
    }

    uint64_t v14 = +[NSMutableSet set];
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v23 = _NSConcreteStackBlock;
    uint64_t v24 = 3221225472;
    float v25 = sub_1000AFA98;
    float v26 = &unk_1001BC408;
    id v16 = v14;
    id v27 = v16;
    +[ML3Track enumeratePathsToDeleteFromLibrary:v15 persistentIDs:v10 usingBlock:&v23];
    unsigned int v17 = os_log_create("com.apple.amp.itunescloudd", "CloudSync_Oversize");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      uint64_t v31 = v18;
      __int16 v32 = 1024;
      *(_DWORD *)float v33 = 2;
      *(_WORD *)&v33[4] = 2114;
      *(void *)&v33[6] = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@  Deleting assets with protection type = %d that are no longer cloud available: %{public}@", buf, 0x1Cu);
    }

    ML3DeleteAssetsAtPaths();
    id v19 = +[ML3Track clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:](ML3Track, "clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:", *(void *)(a1 + 32), v10, 0, v3, v23, v24, v25, v26);
    if ((v19 & 1) == 0)
    {
      unsigned __int8 v20 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        uint64_t v31 = v21;
        __int16 v32 = 1024;
        *(_DWORD *)float v33 = 2;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@  Failed to clear location for unavailable tracks with asset protection type = %d", buf, 0x12u);
      }
    }
  }
  else
  {
    id v19 = 0;
  }

  return v19;
}

void sub_1000AFA38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

uint64_t sub_1000AFA98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v5 = v3;
    if ([v3 length]) {
      [*(id *)(a1 + 32) addObject:v5];
    }
  }

  return _objc_release_x1();
}

void sub_1000B0154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose((const void *)(v67 - 256), 8);
  _Block_object_dispose((const void *)(v67 - 208), 8);
  _Block_object_dispose((const void *)(v67 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B01BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B01CC(uint64_t a1)
{
}

void sub_1000B01D4(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v18 = a2;
  id v10 = a3;
  id v11 = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  if (v18) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v10;
  id v14 = v10;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a4;
  uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v11;
  id v17 = v11;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000B02D0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  if (v10) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
  id v9 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000B0388(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  if (v10) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
  id v9 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000B0440(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  if (v10) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
  id v9 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000B04F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v44 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Stopping saga import as the operation is cancelled", buf, 0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-2 userInfo:0];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    uint64_t v8 = v7;
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 138543618;
        uint64_t v44 = v9;
        __int16 v45 = 2114;
        uint64_t v46 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Failed to obtain updated library data. err=%{public}@", buf, 0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Metadata update complete - starting import", buf, 0xCu);
      }

      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(unsigned int *)(v12 + 40);
      uint64_t v14 = *(unsigned int *)(v12 + 44);
      uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      id v16 = +[NSArray arrayWithObjects:&v42 count:1];
      sub_1000D59EC(2, v13, v14, v15, v16, *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40));

      id v17 = *(_DWORD **)(a1 + 32);
      int v18 = v17[10];
      BOOL v32 = v18 == 0;
      if (!v18)
      {
        uint64_t v41 = objc_opt_class();
        id v19 = +[NSArray arrayWithObjects:&v41 count:1];
        unsigned __int8 v20 = [*(id *)(a1 + 32) configuration];
        +[CloudKeepLocalUtilities downPinCollectionsForClasses:v19 configuration:v20];

        id v17 = *(_DWORD **)(a1 + 32);
      }
      uint64_t v21 = [v17 _importDataFromResponseFileURLs:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      id v22 = [*(id *)(a1 + 32) _importDataFromResponseFileURLs:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
      uint64_t v23 = [*(id *)(a1 + 32) _importDataFromResponseFileURLs:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
      uint64_t v24 = *(void **)(a1 + 32);
      uint64_t v40 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      float v25 = +[NSArray arrayWithObjects:&v40 count:1];
      float v26 = [v24 _importDataFromResponseFileURLs:v25];

      id v27 = +[ML3MusicLibrary musicLibraryForUserAccount:*(void *)(*(void *)(a1 + 32) + 8)];
      [v27 setClientIdentity:*(void *)(*(void *)(a1 + 32) + 24)];
      double v28 = [v27 databasePath];
      id v29 = [objc_alloc((Class)ML3DatabaseImport) initWithLibraryPath:v28 trackData:v21 playlistData:v26 albumArtistData:v22 albumData:v23 clientIdentity:*(void *)(*(void *)(a1 + 32) + 24)];
      [v29 setClientInitiatedReset:*(unsigned __int8 *)(*(void *)(a1 + 32) + 17)];
      objc_initWeak((id *)buf, *(id *)(a1 + 32));
      uint64_t v30 = +[MLMediaLibraryService sharedMediaLibraryService];
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_1000B0A6C;
      v38[3] = &unk_1001BDB18;
      objc_copyWeak(&v39, (id *)buf);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      void v33[2] = sub_1000B0AD0;
      v33[3] = &unk_1001BC3B8;
      v33[4] = *(void *)(a1 + 32);
      BOOL v37 = v32;
      id v31 = v27;
      id v34 = v31;
      long long v36 = *(_OWORD *)(a1 + 88);
      id v35 = *(id *)(a1 + 40);
      [v30 performImport:v29 fromSource:2 withProgressBlock:v38 completionHandler:v33];

      objc_destroyWeak(&v39);
      objc_destroyWeak((id *)buf);
    }
  }
}

void sub_1000B0A40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1000B0A6C(uint64_t a1, float a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    *(float *)&double v4 = a2;
    [WeakRetained _updateProgressWithItemsProgress:0.0 albumsProgress:0.0 artistsProgress:0.0 playlistProgress:0.0 importerProgress:v4];
    id WeakRetained = v5;
  }
}

void sub_1000B0AD0(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  uint64_t v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = objc_msgSend(v7, "msv_description");
      *(_DWORD *)buf = 138543618;
      uint64_t v49 = v11;
      __int16 v50 = 2114;
      unsigned int v51 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ Database import completed error=%{public}@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v49 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ Database import completed", buf, 0xCu);
  }

  id v14 = v7;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v49 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ Re-pinning albums", buf, 0xCu);
    }

    uint64_t v47 = objc_opt_class();
    id v17 = +[NSArray arrayWithObjects:&v47 count:1];
    int v18 = [*(id *)(a1 + 32) configuration];
    +[CloudKeepLocalUtilities rePinCollectionsForClasses:v17 configuration:v18];
  }
  id v19 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v49 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@ Removing unavailable subscription content", buf, 0xCu);
  }

  [*(id *)(a1 + 32) _removeUnavailableSubscriptionAssetsInLibrary:*(void *)(a1 + 40)];
  if (a2)
  {
    if ([*(id *)(a1 + 32) isCancelled])
    {
      unsigned int v21 = 1;
    }
    else
    {
      id v22 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v49 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@ Updating subscribed playlists", buf, 0xCu);
      }

      v46[0] = *(void *)(*(void *)(a1 + 32) + 32);
      v46[1] = @"containers.daap";
      uint64_t v24 = +[NSArray arrayWithObjects:v46 count:2];
      float v25 = +[NSURL fileURLWithPathComponents:v24];

      v45[0] = *(void *)(*(void *)(a1 + 32) + 32);
      v45[1] = @"subscribed-containers.daap";
      float v26 = +[NSArray arrayWithObjects:v45 count:2];
      id v27 = +[NSURL fileURLWithPathComponents:v26];

      double v28 = *(void **)(a1 + 32);
      id v29 = [v25 path];
      unsigned int v21 = [v28 _updateGlobalPlaylistsFromContainersPayloadAtPath:v29 downloadPathForSubscribedContainersPayload:v27];

      if ((v21 & 1) == 0)
      {
        uint64_t v30 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          uint64_t v31 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          uint64_t v49 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}@ Failed to update subscribed playlists", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    unsigned int v21 = 0;
  }
  BOOL v32 = +[ICDeviceInfo currentDeviceInfo];
  if ([v32 isWatch])
  {
    unsigned int v33 = 1;
    if (!v21) {
      goto LABEL_25;
    }
LABEL_28:
    if ((([*(id *)(a1 + 32) isCancelled] | v33) & 1) == 0)
    {
      id v34 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v49 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}@ Updating lyrics", buf, 0xCu);
      }

      [*(id *)(a1 + 32) _importLyricsWithLyricsTokenMap:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      long long v36 = +[NSNotificationCenter defaultCenter];
      BOOL v37 = [*(id *)(a1 + 40) libraryUID];
      [v36 postNotificationName:@"ICDPlaybackPositionImportRequiresSyncNotification" object:v37];
    }
    if (!v7) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  unsigned int v33 = [v32 isAudioAccessory];
  if (v21) {
    goto LABEL_28;
  }
LABEL_25:
  if (!v7)
  {
    id v7 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-1 userInfo:0];
LABEL_38:
    unsigned int v38 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v49 = v41;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%{public}@ Saga update complete", buf, 0xCu);
    }
    goto LABEL_40;
  }
LABEL_35:
  unsigned int v38 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    uint64_t v39 = *(void *)(a1 + 32);
    uint64_t v40 = objc_msgSend(v14, "msv_description");
    *(_DWORD *)buf = 138543618;
    uint64_t v49 = v39;
    __int16 v50 = 2114;
    unsigned int v51 = v40;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%{public}@ Saga update complete error=%{public}@", buf, 0x16u);
  }
  id v7 = v14;
LABEL_40:

  *(_DWORD *)(*(void *)(a1 + 32) + 8_Block_object_dispose(&a9, 8) = 1065353216;
  [*(id *)(a1 + 40) notifyContentsDidChange];
  unsigned int v42 = [*(id *)(a1 + 32) isCancelled];
  uint64_t v43 = *(void *)(a1 + 48);
  if (v42)
  {
    uint64_t v44 = +[NSError errorWithDomain:@"SagaImporterErrorDomain" code:-2 userInfo:0];
    (*(void (**)(uint64_t, void *))(v43 + 16))(v43, v44);
  }
  else
  {
    (*(void (**)(uint64_t, id))(v43 + 16))(v43, v7);
  }
}

intptr_t sub_1000B126C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000B1788(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (uint64_t)[v5 responseCode];
  if (v7 > 399)
  {
    if (v7 == 404 || v7 == 400)
    {
      uint64_t v8 = 3;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v8 = 1;
  if (v7 != 200 && v7 != 204) {
LABEL_8:
  }
    uint64_t v8 = 2;
LABEL_9:
  [*(id *)(a1 + 32) setStatus:v8];
  [*(id *)(a1 + 32) setError:v6];
  if (v6)
  {
    uint64_t v9 = [*(id *)(a1 + 32) error];
    uint64_t v10 = [v9 domain];
    uint64_t v11 = ICCloudClientErrorDomain;
    if (([v10 isEqualToString:ICCloudClientErrorDomain] & 1) == 0)
    {

      goto LABEL_25;
    }
    uint64_t v12 = [*(id *)(a1 + 32) error];
    id v13 = [v12 code];

    if (v13 == (id)2019)
    {
      id v14 = [*(id *)(a1 + 32) error];
      uint64_t v15 = [v14 userInfo];
      uint64_t v9 = [v15 objectForKey:@"CloudLibraryConnectionRequestForbiddenAdditonalErrorCodeKey"];

      id v16 = [v9 integerValue];
      if (v16 == (id)959)
      {
        double v28 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          uint64_t v34 = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}@ - Server response indicates the limit on pending collaborators has been reached", buf, 0xCu);
        }

        [*(id *)(a1 + 32) setStatus:3];
        CFStringRef v19 = @"Pending collaborator limit exceeded";
        uint64_t v20 = v11;
        uint64_t v21 = 2024;
        goto LABEL_24;
      }
      if (v16 == (id)958)
      {
        id v17 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          uint64_t v34 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@ - Server response indicates the limit on active collaborators has been reached", buf, 0xCu);
        }

        [*(id *)(a1 + 32) setStatus:3];
        CFStringRef v19 = @"Active collaborator limit exceeded";
        uint64_t v20 = v11;
        uint64_t v21 = 2023;
LABEL_24:
        uint64_t v30 = +[NSError msv_errorWithDomain:v20 code:v21 underlyingError:v6 debugDescription:v19];
        [*(id *)(a1 + 32) setError:v30];
      }
LABEL_25:
    }
  }
  else
  {
    id v22 = v5;
    unsigned int v23 = [v22 collaborationCloudLibraryID];
    uint64_t v24 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v25;
      __int16 v35 = 1024;
      unsigned int v36 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished request to join collaboration. sagaID=%u", buf, 0x12u);
    }

    *(void *)(*(void *)(a1 + 32) + 114) = v23;
    float v26 = [*(id *)(a1 + 32) musicLibrary];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    void v31[2] = sub_1000B1B88;
    void v31[3] = &unk_1001BC4E8;
    void v31[4] = *(void *)(a1 + 32);
    unsigned int v32 = v23;
    [v26 databaseConnectionAllowingWrites:1 withBlock:v31];

    unsigned __int8 v27 = [v22 updateRequired];
    *(unsigned char *)(*(void *)(a1 + 32) + 106) = v27;
  }
  [*(id *)(a1 + 40) endTransaction];
  [*(id *)(a1 + 32) finish];
}

void sub_1000B1B88(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) musicLibrary];
  uint64_t v3 = +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyCloudGlobalID equalToValue:*(void *)(*(void *)(a1 + 32) + 90)];
  double v4 = +[ML3Container anyInLibrary:v2 predicate:v3];

  if ([v4 existsInLibrary])
  {
    v11[0] = ML3ContainerPropertyStoreCloudID;
    id v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
    v12[0] = v5;
    v12[1] = &__kCFBooleanTrue;
    v11[1] = ML3ContainerPropertyIsCollaborative;
    void v11[2] = ML3ContainerPropertyCollaboratorStatus;
    void v12[2] = &off_1001CC1B8;
    id v6 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:3];

    if (([v4 setValuesForPropertiesWithDictionary:v6] & 1) == 0)
    {
      uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v9 = 138543362;
        uint64_t v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Failed to update container properties", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

void sub_1000B2928(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B2978(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B2988(uint64_t a1)
{
}

void sub_1000B2990(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000B2B38(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000B2BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        ICDAAPUtilitiesWriteProperty();
        ++v8;
      }
      while (v6 != v8);
      id v6 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void sub_1000B3730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3764(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B3774(uint64_t a1)
{
}

void sub_1000B377C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000B4714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1000B4734(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1000B4B34()
{
  return ICDAAPUtilitiesWriteContainer();
}

uint64_t sub_1000B4BB0()
{
  return ICDAAPUtilitiesWriteContainer();
}

void sub_1000B4C2C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 104);
  id v4 = a2;
  [v4 writeString:v3 withCode:1634357319];
  id v5 = [*(id *)(*(void *)(a1 + 32) + 112) absoluteString];
  [v4 writeString:v5 withCode:1634354025];
}

void sub_1000B53E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    uint64_t v9 = v21 = v6;
    long long v10 = *(void **)(a1 + 32);
    if ([v10 method]) {
      CFStringRef v11 = @"POST";
    }
    else {
      CFStringRef v11 = @"GET";
    }
    id v12 = [*(id *)(a1 + 32) action];
    id v13 = (objc_class *)objc_opt_class();
    id v14 = NSStringFromClass(v13);
    id v15 = [v5 responseCode];
    id v16 = [v5 responseData];
    *(_DWORD *)buf = 138545154;
    id v23 = v9;
    __int16 v24 = 2048;
    uint64_t v25 = v10;
    __int16 v26 = 2114;
    CFStringRef v27 = v11;
    __int16 v28 = 2114;
    uint64_t v29 = v12;
    __int16 v30 = 2114;
    uint64_t v31 = v14;
    __int16 v32 = 2048;
    id v33 = v5;
    __int16 v34 = 2048;
    id v35 = v15;
    __int16 v36 = 2048;
    id v37 = [v16 length];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p method=%{public}@ action=%{public}@> received response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x52u);

    id v6 = v21;
  }

  if (v6)
  {
    id v17 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "SagaRemovePlaylistOperation failed with error: %{public}@", buf, 0xCu);
    }
  }
  uint64_t v18 = *(void **)(a1 + 40);
  uint64_t v19 = (uint64_t)[v5 responseCode];
  if (v19 > 399)
  {
    if (v19 != 404 && v19 != 400) {
      goto LABEL_17;
    }
    uint64_t v20 = 3;
  }
  else
  {
    uint64_t v20 = 1;
    if (v19 != 200 && v19 != 204) {
LABEL_17:
    }
      uint64_t v20 = 2;
  }
  [v18 setStatus:v20];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_1000B5DB0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = a2;
  id v5 = [v3 allObjects];
  id v6 = [v4 executeUpdate:v2 withParameters:v5 error:0];

  return v6;
}

id sub_1000B6384(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v4 count]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000B6474;
  v10[3] = &unk_1001BC7B8;
  id v11 = v3;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v12 = v5;
  id v6 = v3;
  [v4 enumerateObjectsUsingBlock:v10];

  uint64_t v7 = v12;
  id v8 = v5;

  return v8;
}

void sub_1000B6474(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = objc_msgSend(*(id *)(a1 + 32), "valueForProperty:");
  if (v3) {
    [*(id *)(a1 + 40) setObject:v3 forKey:v4];
  }
}

void sub_1000B6628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6640(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B6650(uint64_t a1)
{
}

uint64_t sub_1000B6658(uint64_t a1, void *a2)
{
  uint64_t v14 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = +[NSArray arrayWithObjects:&v14 count:1];
  id v5 = [v3 executeQuery:@"SELECT key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp FROM cloud_kvs WHERE key = ?", v4 withParameters];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000B6794;
  void v9[3] = &unk_1001BC768;
  uint64_t v13 = *(void *)(a1 + 56);
  id v10 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = v6;
  uint64_t v12 = v7;
  [v5 enumerateRowsWithBlock:v9];

  return 1;
}

void sub_1000B6794(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ICPlaybackPositionEntity) initWithDomain:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v13 = [v3 numberForColumnIndex:1];
  uint64_t v7 = [v3 numberForColumnIndex:2];
  id v8 = [v3 numberForColumnIndex:3];
  uint64_t v9 = [v3 numberForColumnIndex:4];

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setPlaybackPositionKey:*(void *)(a1 + 40)];
  id v10 = [*(id *)(a1 + 48) libraryUID];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setLibraryIdentifier:v10];

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setUserPlayCount:v13];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setHasBeenPlayed:v7];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setBookmarkTimestamp:v9];
  if (v8)
  {
    [v8 doubleValue];
    uint64_t v12 = +[NSNumber numberWithDouble:v11 / 1000.0];
  }
  else
  {
    uint64_t v12 = 0;
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setBookmarkTime:v12];
  if (v8) {
}
  }

void sub_1000B6C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000B6CB4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:a1[4]];
  [v3 setPrivacyContext:v4];

  uint64_t v9 = a1[5];
  uint64_t v5 = +[NSArray arrayWithObjects:&v9 count:1];
  uint64_t v6 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v6 + 40);
  unsigned __int8 v7 = [v3 executeUpdate:@"DELETE FROM cloud_kvs WHERE key = ?" withParameters:v5 error:&obj];

  objc_storeStrong((id *)(v6 + 40), obj);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v7;
}

void sub_1000B6F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1000B6FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  uint64_t v5 = [*(id *)(a1 + 40) playbackPositionKey];
  uint64_t v80 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v80 count:1];
  unsigned __int8 v7 = [v3 executeQuery:@"SELECT key FROM cloud_kvs WHERE key = ?" withParameters:v6];

  if ([v7 hasAtLeastOneRow])
  {
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v9 = (id *)(a1 + 40);
    uint64_t v10 = [*(id *)(a1 + 40) hasBeenPlayed];
    double v11 = (void *)v10;
    if (v10) {
      uint64_t v12 = (_UNKNOWN **)v10;
    }
    else {
      uint64_t v12 = &off_1001CC1D0;
    }
    [v8 setObject:v12 forKeyedSubscript:@"has_been_played"];

    uint64_t v13 = [*v9 userPlayCount];
    uint64_t v14 = (void *)v13;
    if (v13) {
      id v15 = (_UNKNOWN **)v13;
    }
    else {
      id v15 = &off_1001CC1D0;
    }
    [v8 setObject:v15 forKeyedSubscript:@"play_count_user"];

    uint64_t v16 = [*v9 bookmarkTimestamp];
    id v17 = (void *)v16;
    if (v16) {
      uint64_t v18 = (_UNKNOWN **)v16;
    }
    else {
      uint64_t v18 = &off_1001CC1D0;
    }
    [v8 setObject:v18 forKeyedSubscript:@"bookmark_sync_timestamp"];

    uint64_t v19 = [*v9 bookmarkTime];
    if (v19)
    {
      uint64_t v20 = [*(id *)(a1 + 40) bookmarkTime];
      [v20 doubleValue];
      id v22 = +[NSNumber numberWithDouble:v21 * 1000.0];
      [v8 setObject:v22 forKeyedSubscript:@"bookmark_time_ms"];
    }
    else
    {
      [v8 setObject:&off_1001CC1D0 forKeyedSubscript:@"bookmark_time_ms"];
    }

    id v23 = [v8 allKeys];
    BOOL v24 = [v23 count] == 0;

    if (v24)
    {

      BOOL v42 = 1;
      goto LABEL_24;
    }
    uint64_t v25 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 48) currentRevision]);
    [v8 setObject:v25 forKey:@"bookmark_sync_revision"];

    __int16 v26 = [v8 allKeys];
    id v27 = [v26 count];

    id v28 = objc_alloc_init((Class)NSMutableString);
    id v29 = objc_alloc_init((Class)NSMutableArray);
    __int16 v30 = [v8 allKeys];
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472;
    v73[2] = sub_1000B76D8;
    v73[3] = &unk_1001BC6C8;
    id v74 = v28;
    id v75 = v29;
    id v76 = v8;
    id v77 = v27;
    id v31 = v8;
    id v32 = v29;
    id v33 = v28;
    [v30 enumerateObjectsUsingBlock:v73];

    __int16 v34 = [*(id *)(a1 + 40) playbackPositionKey];
    [v32 addObject:v34];

    id v35 = +[NSString stringWithFormat:@"UPDATE cloud_kvs SET %@ WHERE key = ?", v33];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 executeUpdate:v35 withParameters:v32 error:0];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = objc_msgSend(*(id *)(a1 + 56), "_updateUbiquitousDatabaseWithEntity:syncRevision:usingConnection:", *(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 48), "currentRevision"), v3);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    __int16 v36 = [*(id *)(a1 + 40) playbackPositionKey];
    uint64_t v79 = v36;
    id v37 = +[NSArray arrayWithObjects:&v79 count:1];
    unsigned int v38 = [v3 executeQuery:@"SELECT item_pid, play_count_user, has_been_played, bookmark_time_ms FROM cloud_kvs INNER JOIN item_kvs USING (key) LEFT OUTER JOIN item USING (item_pid) WHERE key = ? AND item.item_pid IS NOT NULL", v37 withParameters];

    uint64_t v67 = 0;
    __int16 v68 = &v67;
    uint64_t v69 = 0x3032000000;
    __int16 v70 = sub_1000B6640;
    uint64_t v71 = sub_1000B6650;
    id v72 = 0;
    uint64_t v61 = 0;
    long long v62 = &v61;
    uint64_t v63 = 0x3032000000;
    double v64 = sub_1000B6640;
    uint64_t v65 = sub_1000B6650;
    id v66 = 0;
    uint64_t v55 = 0;
    char v56 = &v55;
    uint64_t v57 = 0x3032000000;
    uint64_t v58 = sub_1000B6640;
    id v59 = sub_1000B6650;
    id v60 = 0;
    uint64_t v49 = 0;
    __int16 v50 = &v49;
    uint64_t v51 = 0x3032000000;
    __int16 v52 = sub_1000B6640;
    unsigned int v53 = sub_1000B6650;
    id v54 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = &v45;
    uint64_t v47 = 0x2020000000;
    char v48 = 0;
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_1000B77A0;
    v44[3] = &unk_1001BC6F0;
    uint8_t v44[4] = &v67;
    void v44[5] = &v61;
    v44[6] = &v55;
    v44[7] = &v49;
    v44[8] = &v45;
    [v38 enumerateRowsWithBlock:v44];
    if (*((unsigned char *)v46 + 24) && [(id)v68[5] longLongValue])
    {
      uint64_t v39 = v56[5];
      v78[0] = v50[5];
      v78[1] = v39;
      uint64_t v40 = v68[5];
      v78[2] = v62[5];
      v78[3] = v40;
      uint64_t v41 = +[NSArray arrayWithObjects:v78 count:4];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 executeUpdate:@"UPDATE item_stats SET bookmark_time_ms = ?, has_been_played = ?, play_count_user = ? where item_pid = ?", v41, 0 withParameters error];
    }
    _Block_object_dispose(&v45, 8);
    _Block_object_dispose(&v49, 8);

    _Block_object_dispose(&v55, 8);
    _Block_object_dispose(&v61, 8);

    _Block_object_dispose(&v67, 8);
    BOOL v42 = *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) != 0;
  }
  else
  {
    BOOL v42 = 0;
  }
LABEL_24:

  return v42;
}

void sub_1000B7688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1000B76D8(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 appendFormat:@"%@ = ?", v6];
  unsigned __int8 v7 = *(void **)(a1 + 40);
  id v8 = [*(id *)(a1 + 48) objectForKey:v6];

  [v7 addObject:v8];
  if (*(void *)(a1 + 56) - 1 > a3)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    [v9 appendString:@", "];
  }
}

void sub_1000B77A0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 numberForColumnIndex:0];
  uint64_t v5 = *(void *)(a1[4] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = [v3 numberForColumnIndex:1];
  uint64_t v8 = *(void *)(a1[5] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = [v3 numberForColumnIndex:2];
  uint64_t v11 = *(void *)(a1[6] + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  uint64_t v13 = [v3 numberForColumnIndex:3];

  uint64_t v14 = *(void *)(a1[7] + 8);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 1;
}

void sub_1000B7948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B7960(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:a1[4]];
  [v3 setPrivacyContext:v4];

  id v5 = [objc_alloc((Class)ML3Track) initWithPersistentID:a1[7] inLibrary:a1[5]];
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 valueForProperty:ML3TrackPropertyRememberBookmarkTime];
    unsigned int v8 = [v7 BOOLValue];

    if (!v8)
    {
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    uint64_t v9 = ML3TrackPropertyStoreBookmarkMetadataIdentifier;
    uint64_t v10 = [v6 valueForProperty:ML3TrackPropertyStoreBookmarkMetadataIdentifier];
    if ([v10 length])
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v23 = 0x3032000000;
      BOOL v24 = sub_1000B6640;
      uint64_t v25 = sub_1000B6650;
      id v26 = 0;
      double v21 = v10;
      uint64_t v11 = +[NSArray arrayWithObjects:&v21 count:1];
      uint64_t v12 = [v3 executeQuery:@"SELECT play_count_user, has_been_played, bookmark_time_ms FROM cloud_kvs WHERE key = ?", v11 withParameters];

      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1000B7C8C;
      v19[3] = &unk_1001BC678;
      void v19[4] = &buf;
      [v12 enumerateRowsWithBlock:v19];
      if (*(void *)(*((void *)&buf + 1) + 40)) {
        objc_msgSend(v6, "setValuesForPropertiesWithDictionary:");
      }
      uint64_t v13 = [v6 valueForProperty:v9];
      v20[0] = &off_1001CCDC0;
      v20[1] = &off_1001CC1D0;
      v20[2] = v13;
      uint64_t v14 = +[NSArray arrayWithObjects:v20 count:3];
      id v15 = [v3 executeQuery:@"UPDATE cloud_kvs SET bookmark_sync_timestamp = ?, bookmark_sync_revision = ? WHERE key = ?", v14 withParameters];

      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      _Block_object_dispose(&buf, 8);

      uint64_t v16 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = a1[7];
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:, persistentID %lld doesn't exist.", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v16 = 0;
LABEL_10:

LABEL_12:
  return v16;
}

void sub_1000B7C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B7C8C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (!a3)
    {
      v11[0] = ML3TrackPropertyPlayCountUser;
      id v4 = a2;
      id v5 = [v4 numberForColumnIndex:0];
      v12[0] = v5;
      v11[1] = ML3TrackPropertyHasBeenPlayed;
      id v6 = [v4 numberForColumnIndex:1];
      v12[1] = v6;
      void v11[2] = ML3TrackPropertyBookmarkTime;
      uint64_t v7 = [v4 numberForColumnIndex:2];

      void v12[2] = v7;
      uint64_t v8 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:3];
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }
  }
}

void sub_1000B7F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000B7F34(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:a1[4]];
  [v3 setPrivacyContext:v4];

  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  unsigned __int8 v6 = [v3 executeUpdate:@"DELETE FROM cloud_kvs" withParameters:&__NSArray0__struct error:&obj];

  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
}

void sub_1000B8168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B8180(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  uint64_t v17 = +[NSMutableString stringWithString:@"SELECT key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp FROM cloud_kvs WHERE key"];
  uint64_t v16 = +[ML3DatabaseStatementRenderer defaultRenderer];
  uint64_t v5 = (char *)[*(id *)(a1 + 40) count];
  if (v5)
  {
    unsigned __int8 v6 = v5;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = -1;
    do
    {
      if ((unint64_t)&v6[-v8] >= 0x64) {
        uint64_t v10 = 100;
      }
      else {
        uint64_t v10 = (uint64_t)&v6[-v8];
      }
      uint64_t v11 = objc_msgSend(*(id *)(a1 + 40), "subarrayWithRange:", v8, v10);
      if (v9 != v10)
      {
        uint64_t v12 = [v16 statementWithPrefix:v17 inParameterCount:v10];

        uint64_t v9 = v10;
        uint64_t v7 = (void *)v12;
      }
      v8 += v10;
      uint64_t v13 = [v3 executeQuery:v7 withParameters:v11];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_1000B834C;
      v18[3] = &unk_1001BC628;
      id v14 = *(id *)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 56);
      id v19 = v14;
      uint64_t v20 = v15;
      [v13 enumerateRowsWithBlock:v18];
    }
    while (v8 < (unint64_t)v6);
  }
}

void sub_1000B834C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2 && !a3)
  {
    id v4 = a2;
    id v12 = [v4 stringForColumnIndex:0];
    uint64_t v5 = [v4 numberForColumnIndex:1];
    unsigned __int8 v6 = [v4 numberForColumnIndex:2];
    uint64_t v7 = [v4 numberForColumnIndex:3];
    unint64_t v8 = [v4 numberForColumnIndex:4];

    id v9 = [objc_alloc((Class)ICPlaybackPositionEntity) initWithDomain:*(void *)(a1 + 32)];
    [v9 setPlaybackPositionKey:v12];
    [v9 setUserPlayCount:v5];
    [v9 setHasBeenPlayed:v6];
    [v9 setBookmarkTimestamp:v8];
    if (v7)
    {
      [v7 doubleValue];
      uint64_t v11 = +[NSNumber numberWithDouble:v10 / 1000.0];
      [v9 setBookmarkTime:v11];
    }
    else
    {
      [v9 setBookmarkTime:0];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v9];
  }
}

uint64_t sub_1000B8954(void *a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B8BC4;
  v4[3] = &unk_1001BC588;
  uint64_t v2 = (void *)a1[4];
  id v1 = (void *)a1[5];
  uint64_t v6 = a1[6];
  id v5 = v1;
  [v2 enumerateKeysAndObjectsUsingBlock:v4];

  return 1;
}

uint64_t sub_1000B89E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setLastSyncedEntityRevision:*(void *)(a1 + 64)];
  [*(id *)(a1 + 32) setLastSyncedDomainVersion:*(void *)(a1 + 40)];
  id v4 = *(void **)(a1 + 32);
  id v5 = +[NSDate date];
  [v4 setDateLastSynced:v5];

  [*(id *)(a1 + 32) setLastNotificationDomainVersion:*(void *)(a1 + 40)];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000B8AE8;
  void v9[3] = &unk_1001BC5D8;
  void v9[4] = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v7 = v3;
  [v6 enumerateKeysAndObjectsUsingBlock:v9];

  return 1;
}

void sub_1000B8AE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v13 = v3;
  id v5 = [v3 playbackPositionKey];
  uint64_t v6 = [v4 _kvsEntityWithKVSKey:v5 domain:*(void *)(a1 + 40)];

  id v7 = [v6 bookmarkTimestamp];
  [v7 doubleValue];
  double v9 = v8;

  if (!v6
    || ([v13 bookmarkTimestamp],
        id v10 = objc_claimAutoreleasedReturnValue(),
        [v10 doubleValue],
        double v12 = v11,
        v10,
        v12 > v9))
  {
    [*(id *)(a1 + 32) _updateUbiquitousDatabaseWithEntity:v13 syncRevision:0 usingConnection:*(void *)(a1 + 48)];
  }
}

void sub_1000B8BC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSNull null];
  unsigned __int8 v8 = [v6 isEqual:v7];

  if ((v8 & 1) == 0)
  {
    double v9 = [v6 valueForProperty:ML3TrackPropertyStoreBookmarkMetadataIdentifier];
    if ([v9 length])
    {
      id v10 = [v6 valueForProperty:ML3TrackPropertyStoreBookmarkMetadataEntityRevision];
      id v11 = [v10 unsignedLongLongValue];

      if ((unint64_t)v11 <= *(void *)(a1 + 40)) {
        goto LABEL_5;
      }
      double v12 = [v6 valueForProperty:ML3TrackPropertyStoreBookmarkMetadataTimestamp];
      [v12 doubleValue];
      double v14 = v13;

      uint64_t v15 = [v5 bookmarkTimestamp];
      [v15 doubleValue];
      double v17 = v16;

      if (v14 >= v17)
      {
        [*(id *)(a1 + 32) addObject:v5];
      }
      else
      {
LABEL_5:
        uint64_t v18 = [v5 hasBeenPlayed];
        id v19 = (void *)v18;
        uint64_t v20 = &off_1001CC1D0;
        if (v18) {
          double v21 = (_UNKNOWN **)v18;
        }
        else {
          double v21 = &off_1001CC1D0;
        }
        id v22 = v21;

        uint64_t v23 = [v5 userPlayCount];
        BOOL v24 = (void *)v23;
        if (v23) {
          uint64_t v25 = (_UNKNOWN **)v23;
        }
        else {
          uint64_t v25 = &off_1001CC1D0;
        }
        id v26 = v25;

        id v27 = [v5 bookmarkTime];
        if (v27)
        {
          id v28 = [v5 bookmarkTime];
          [v28 doubleValue];
          uint64_t v20 = +[NSNumber numberWithDouble:v29 * 1000.0];
        }
        v31[0] = ML3TrackPropertyPlayCountUser;
        v31[1] = ML3TrackPropertyHasBeenPlayed;
        v32[0] = v26;
        v32[1] = v22;
        void v31[2] = ML3TrackPropertyBookmarkTime;
        v32[2] = v20;
        __int16 v30 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:3];
        [v6 setValuesForPropertiesWithDictionary:v30];
      }
    }
  }
}

uint64_t sub_1000B8F5C(id *a1, void *a2)
{
  id v3 = a1[4];
  id v4 = a1[5];
  id v5 = a2;
  id v6 = objc_msgSend(v3, "_queryForTracksNeedingPushWithEntityRevisionAnchor:orderingTerms:", objc_msgSend(v4, "lastSyncedEntityRevision"), &__NSArray0__struct);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000B91A0;
  v19[3] = &unk_1001BC510;
  id v7 = a1[6];
  id v8 = a1[4];
  id v9 = a1[5];
  id v20 = v7;
  id v21 = v8;
  id v22 = v9;
  id v23 = a1[7];
  [v6 enumeratePersistentIDsUsingBlock:v19];
  id v10 = [a1[4] _sqlQueryStringForItemsNeedingPush];
  id v11 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [a1[5] lastSyncedEntityRevision]);
  BOOL v24 = v11;
  double v12 = +[NSArray arrayWithObjects:&v24 count:1];
  double v13 = [v5 executeQuery:v10 withParameters:v12];

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000B9284;
  v15[3] = &unk_1001BC538;
  void v15[4] = a1[4];
  id v16 = a1[6];
  id v18 = a1[7];
  id v17 = a1[5];
  [v13 enumerateRowsWithBlock:v15];

  return 1;
}

void sub_1000B91A0(uint64_t a1, uint64_t a2)
{
  id v7 = [objc_alloc((Class)ICPlaybackPositionEntity) initWithDomain:*(void *)(a1 + 32)];
  id v4 = [objc_alloc((Class)ML3Track) initWithPersistentID:a2 inLibrary:*(void *)(a1 + 40)];
  id v5 = [v4 valueForProperty:ML3TrackPropertyStoreBookmarkMetadataIdentifier];
  if ([v5 length])
  {
    [*(id *)(a1 + 40) _populateMetadataValues:v7 fromDataSourceTrack:v4];
    id v6 = [*(id *)(a1 + 48) ubiquitousIdentifiersToSync];
    [v6 addObject:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000B9284(uint64_t a1, void *a2)
{
  id v5 = [a2 stringForColumnIndex:0];
  id v3 = [*(id *)(a1 + 32) _kvsEntityWithKVSKey:v5 domain:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  id v4 = [*(id *)(a1 + 48) ubiquitousIdentifiersToSync];
  [v4 addObject:v5];
}

void sub_1000B9898(_Unwind_Exception *a1)
{
}

void sub_1000B98A4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1000B98B0);
}

void sub_1000B9AF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _mediaContentTasteCacheFilePathForAccount:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = +[NSFileManager defaultManager];
    id v8 = 0;
    unsigned int v4 = [v3 removeItemAtPath:v2 error:&v8];
    id v5 = v8;

    id v6 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138544130;
      uint64_t v10 = v7;
      __int16 v11 = 2114;
      double v12 = v2;
      __int16 v13 = 1024;
      unsigned int v14 = v4;
      __int16 v15 = 2114;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ Cached content taste response at %{public}@ was deleted with status=%{BOOL}u, error=%{public}@ ", buf, 0x26u);
    }
  }
}

void sub_1000B9CA0(uint64_t a1)
{
  uint64_t v2 = +[NSFileManager defaultManager];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v27 = 0;
  unsigned int v4 = [v2 contentsOfDirectoryAtPath:v3 error:&v27];
  id v5 = v27;

  id v6 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [v4 count];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v30 = v7;
    __int16 v31 = 2048;
    id v32 = v8;
    __int16 v33 = 2114;
    id v34 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ Got %lu content taste archives to remove with error %{public}@", buf, 0x20u);
  }

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v9 = v4;
  id v10 = [v9 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v10)
  {
    id v12 = v10;
    uint64_t v13 = *(void *)v24;
    *(void *)&long long v11 = 138543874;
    long long v21 = v11;
    do
    {
      unsigned int v14 = 0;
      __int16 v15 = v5;
      do
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v9);
        }
        id v16 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "stringByAppendingPathComponent:", *(void *)(*((void *)&v23 + 1) + 8 * (void)v14), v21);
        id v17 = +[NSFileManager defaultManager];
        id v22 = v15;
        unsigned __int8 v18 = [v17 removeItemAtPath:v16 error:&v22];
        id v5 = v22;

        if ((v18 & 1) == 0)
        {
          id v19 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            uint64_t v20 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = v21;
            uint64_t v30 = v20;
            __int16 v31 = 2114;
            id v32 = v5;
            __int16 v33 = 2114;
            id v34 = v16;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@ Error %{public}@ removing archive at %{public}@", buf, 0x20u);
          }
        }
        unsigned int v14 = (char *)v14 + 1;
        __int16 v15 = v5;
      }
      while (v12 != v14);
      id v12 = [v9 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v12);
  }
}

void sub_1000BA03C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _mediaContentTasteCacheFilePathForAccount:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) _prepareArchiveWithContentTasteReponse:*(void *)(a1 + 48)];
    unsigned int v4 = v3;
    if (v3 && [v3 length])
    {
      id v5 = +[NSFileManager defaultManager];
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
      id v14 = 0;
      unsigned __int8 v7 = [v5 createDirectoryAtPath:v6 withIntermediateDirectories:1 attributes:0 error:&v14];
      id v8 = v14;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v7;

      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v4 writeToFile:v2 atomically:1];
        id v9 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a1 + 32);
          long long v11 = [*(id *)(a1 + 40) userIdentity];
          int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          *(_DWORD *)long long buf = 138544130;
          uint64_t v16 = v10;
          __int16 v17 = 2114;
          id v18 = v11;
          __int16 v19 = 2114;
          uint64_t v20 = v2;
          __int16 v21 = 1024;
          int v22 = v12;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ content taste response for %{public}@ was written to %{public}@ with status=%{BOOL}u", buf, 0x26u);
        }
      }
      else
      {
        id v9 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543618;
          uint64_t v16 = v13;
          __int16 v17 = 2114;
          id v18 = v8;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ Error %{public}@ creating content taste update directory", buf, 0x16u);
        }
      }
    }
    else
    {
      id v8 = +[NSFileManager defaultManager];
      [v8 removeItemAtPath:v2 error:0];
    }
  }
}

uint64_t sub_1000BA3A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BA3B8(uint64_t a1)
{
}

uint64_t sub_1000BA3C0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _mediaContentTasteCacheFilePathForAccount:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) _prepareCachedResponseFromArchiveAtPath:v2];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  return _objc_release_x1();
}

void sub_1000BA560(id a1)
{
  qword_1001F38E8 = [[ICCloudContentTasteResponseCacheManager alloc] _init];

  _objc_release_x1();
}

void sub_1000BABCC(uint64_t a1, uint64_t a2, id *a3)
{
  id v18 = *a3;
  if ((uint64_t)[a3[1] longLongValue] < 1) {
    id v6 = 0;
  }
  else {
    id v6 = a3[1];
  }
  id v7 = v6;
  if ((uint64_t)[a3[2] longLongValue] < 1) {
    id v8 = 0;
  }
  else {
    id v8 = a3[2];
  }
  id v9 = v8;
  [a3[3] doubleValue];
  uint64_t v10 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  long long v11 = [v10 earlierDate:*(void *)(a1 + 32)];

  if (v11 == v10)
  {

    uint64_t v10 = 0;
  }
  [a3[4] doubleValue];
  int v12 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  uint64_t v13 = [v12 earlierDate:*(void *)(a1 + 32)];

  if (v13 == v12)
  {

    int v12 = 0;
  }
  if (v7 || v9 || v10 || v12)
  {
    id v14 = +[NSMutableDictionary dictionaryWithCapacity:4];
    __int16 v15 = v14;
    if (v7) {
      [v14 setObject:v7 forKey:@"daap.incrementplaycount"];
    }
    if (v9) {
      [v15 setObject:v9 forKey:@"daap.incrementskipcount"];
    }
    if (v10) {
      [v15 setObject:v10 forKey:ML3TrackPropertyDatePlayed];
    }
    if (v12) {
      [v15 setObject:v12 forKey:ML3TrackPropertyDateSkipped];
    }
    [*(id *)(a1 + 40) addObject:v18];
    [*(id *)(a1 + 48) addObject:v15];
    uint64_t v16 = *(void **)(a1 + 56);
    __int16 v17 = +[NSNumber numberWithLongLong:a2];
    [v16 addObject:v17];
  }
}

void sub_1000BADE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134217984;
    id v13 = [v5 responseCode];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Bulk set item properties response code: %lu", (uint8_t *)&v12, 0xCu);
  }

  if (v6)
  {
    id v8 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138543362;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Bulk set item properties response with error: %{public}@", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = (uint64_t)[v5 responseCode];
  if (v10 > 399)
  {
    if (v10 != 404 && v10 != 400) {
      goto LABEL_14;
    }
    uint64_t v11 = 3;
  }
  else
  {
    uint64_t v11 = 1;
    if (v10 != 200 && v10 != 204) {
LABEL_14:
    }
      uint64_t v11 = 2;
  }
  [v9 setStatus:v11];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_1000BAF7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  __int16 v17 = v3;
  [v3 setPrivacyContext:v6];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = *(id *)(a1 + 40);
  id v7 = [obj countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    uint64_t v10 = ML3TrackPropertyPlayCountRecent;
    uint64_t v11 = ML3TrackPropertySkipCountRecent;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(obj);
        }
        id v13 = [*(id *)(*((void *)&v19 + 1) + 8 * i) longLongValue];
        id v14 = +[ML3Track newWithPersistentID:v13 inLibrary:*(void *)(a1 + 48)];
        [v14 setValue:&off_1001CC1E8 forProperty:v10];
        [v14 setValue:&off_1001CC1E8 forProperty:v11];
        __int16 v15 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134217984;
          id v24 = v13;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Play data update succeeded for track with persistent ID: %lld", buf, 0xCu);
        }
      }
      id v8 = [obj countByEnumeratingWithState:&v19 objects:v25 count:16];
    }
    while (v8);
  }

  return 1;
}

uint64_t sub_1000BB8AC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      id v18 = objc_alloc_init(AMPMusicCatalogContent);
      [(id)a1 addCatalogContent:v18];
      if (!PBReaderPlaceMark() || (sub_1000E0AF4((uint64_t)v18, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else if (v12 == 2)
    {
      uint64_t v19 = PBReaderReadString();
      long long v20 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v19;
    }
    else if (v12 == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      *(unsigned char *)(a1 + 32) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_34;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          uint64_t v15 = 0;
          goto LABEL_36;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v15 = 0;
      }
LABEL_36:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000BCA5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v65 = v8;
      __int16 v66 = 2114;
      uint64_t v67 = v9;
      __int16 v68 = 2114;
      id v69 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Unable to get message entries for identifier %{public}@. err=%{public}@", buf, 0x20u);
    }
    goto LABEL_30;
  }
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id v10 = [v5 countByEnumeratingWithState:&v59 objects:v63 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v50 = a1;
    unint64_t v12 = 0;
    id v53 = v5;
    id v54 = 0;
    uint64_t v13 = *(void *)v60;
    uint64_t v51 = *(void *)v60;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v60 != v13) {
          objc_enumerationMutation(v5);
        }
        uint64_t v15 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        unint64_t v16 = [v15 applicationMessage];
        char v17 = [v16 identifier];
        unsigned int v18 = [v17 isEqualToString:@"non-subscriber-notification-content-opt-in"];

        if (v18)
        {
          uint64_t v19 = v15;

          unint64_t v12 = v19;
        }
        long long v20 = [v16 targets];
        unsigned int v21 = [v20 containsObject:@"Library_Recommendation"];

        if (v21)
        {
          if (!v54
            || (signed int v22 = [v16 priority],
                [v54 applicationMessage],
                long long v23 = objc_claimAutoreleasedReturnValue(),
                signed int v24 = [v23 priority],
                v23,
                v22 > v24))
          {
            long long v25 = v15;

            id v54 = v25;
          }
          uint64_t v13 = v51;
          id v5 = v53;
        }
      }
      id v11 = [v5 countByEnumeratingWithState:&v59 objects:v63 count:16];
    }
    while (v11);
    unint64_t v7 = v54;
    if (v54)
    {
      id v6 = 0;
      if (v12)
      {
        long long v26 = [v54 applicationMessage];
        id v27 = [v26 contentPages];
        id v28 = [v27 firstObject];

        double v29 = [v28 contentParameters];
        uint64_t v30 = [v29 firstObject];

        __int16 v31 = [v12 applicationMessage];
        uint64_t v32 = [v31 contentPages];
        __int16 v33 = [(id)v32 lastObject];

        id v34 = [v33 contentParameters];
        LOBYTE(v32) = [v34 containsObject:v30];

        if ((v32 & 1) == 0)
        {
          [v12 applicationMessage];
          id v35 = v52 = v28;
          __int16 v36 = [v54 applicationMessage];
          [v36 startDate];
          objc_msgSend(v35, "setStartDate:");

          id v37 = [v54 applicationMessage];
          [v37 endDate];
          objc_msgSend(v35, "setEndDate:");

          unsigned int v38 = [v35 contentPages];
          [v38 removeLastObject];

          uint64_t v39 = *(void **)(v50 + 32);
          uint64_t v40 = [v54 applicationMessage];
          uint64_t v41 = [v40 contentPages];
          BOOL v42 = [v41 firstObject];
          uint64_t v43 = [v39 _optInMessageContentForPriorityMessageContent:v42];
          [v35 addContentPages:v43];

          uint64_t v44 = +[ICInAppMessageManager sharedManager];
          v57[0] = _NSConcreteStackBlock;
          v57[1] = 3221225472;
          v57[2] = sub_1000BCFE8;
          v57[3] = &unk_1001BF198;
          void v57[4] = *(void *)(v50 + 32);
          uint64_t v58 = v12;
          [v44 updateMessageEntry:v58 completion:v57];

          id v28 = v52;
          unint64_t v7 = v54;
        }
      }
      else
      {
        uint64_t v47 = *(void **)(v50 + 32);
        char v48 = [v54 applicationMessage];
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472;
        v55[2] = sub_1000BD0D4;
        v55[3] = &unk_1001BCB08;
        uint64_t v49 = *(void **)(v50 + 40);
        v55[4] = *(void *)(v50 + 32);
        id v56 = v49;
        [v47 _optInMessageForPriorityMessage:v48 completion:v55];
      }
      id v5 = v53;
      goto LABEL_30;
    }
    unint64_t v7 = v12;
    a1 = v50;
    id v6 = 0;
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v45 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v65 = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%{public}@ Unable to find priority message.", buf, 0xCu);
  }

LABEL_30:
}

void sub_1000BCFE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = [*(id *)(a1 + 40) applicationMessage];
      id v6 = [v5 identifier];
      int v7 = 138543618;
      uint64_t v8 = v4;
      __int16 v9 = 2114;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ Unable to update opt-in message entry %{public}@.", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1000BD0D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = [v5 applicationMessage];
      id v10 = [v9 identifier];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      uint64_t v19 = v10;
      __int16 v20 = 2114;
      id v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Failed to create opt-in message %{public}@. err=%{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v11 = +[ICInAppMessageManager sharedManager];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000BD298;
    void v12[3] = &unk_1001BF238;
    void v12[4] = *(void *)(a1 + 32);
    id v13 = v5;
    id v14 = *(id *)(a1 + 40);
    id v15 = 0;
    [v11 addMessageEntry:v13 completion:v12];
  }
}

void sub_1000BD298(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = [*(id *)(a1 + 40) applicationMessage];
      int v7 = [v6 identifier];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v22 = v5;
      __int16 v23 = 2114;
      signed int v24 = v7;
      __int16 v25 = 2114;
      id v26 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ Failed to save application message %{public}@. err=%{public}@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v8 = +[ICInAppMessageManager sharedManager];
    __int16 v9 = [*(id *)(a1 + 40) applicationMessage];
    id v10 = [v9 identifier];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1000BD4DC;
    v17[3] = &unk_1001BE0B0;
    uint64_t v11 = *(void *)(a1 + 48);
    unint64_t v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void **)(a1 + 40);
    __int16 v18 = v12;
    uint64_t v19 = v13;
    id v20 = v14;
    [v8 downloadResourcesForMessageWithIdentifier:v10 bundleIdentifier:v11 completion:v17];

    id v15 = +[ICInAppMessageManager sharedManager];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1000BD5E8;
    v16[3] = &unk_1001BE408;
    void v16[4] = *(void *)(a1 + 32);
    [v15 removeMessageEntryWithIdentifier:@"non-subscriber-notification-content-opt-in" forBundleIdentifier:@"com.apple.amp.inappmessages.private" completion:v16];

    uint64_t v4 = v18;
  }
}

void sub_1000BD4DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = [*(id *)(a1 + 48) applicationMessage];
      int v7 = [v6 identifier];
      int v8 = 138543874;
      uint64_t v9 = v5;
      __int16 v10 = 2114;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ Failed to download resources for message %{public}@. err=%{public}@", (uint8_t *)&v8, 0x20u);
    }
  }
}

void sub_1000BD5E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543874;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      CFStringRef v9 = @"non-subscriber-notification-content-opt-in";
      __int16 v10 = 2114;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ Failed to remove message with identifier %{public}@. err=%{public}@", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_1000BD7BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v17 = 138543874;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      CFStringRef v20 = @"non-subscriber-opt-in-message";
      __int16 v21 = 2114;
      id v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Unable to retrieve message with identifier %{public}@. err=%{public}@", (uint8_t *)&v17, 0x20u);
    }
  }
  else
  {
    uint64_t v7 = objc_alloc_init((Class)ICIAMApplicationMessage);
    CFStringRef v9 = [v5 applicationMessage];
    [v7 mergeFrom:v9];

    [*(id *)(a1 + 40) startDate];
    -[NSObject setStartDate:](v7, "setStartDate:");
    [*(id *)(a1 + 40) endDate];
    -[NSObject setEndDate:](v7, "setEndDate:");
    __int16 v10 = *(void **)(a1 + 32);
    id v11 = [*(id *)(a1 + 40) contentPages];
    __int16 v12 = [v11 firstObject];
    id v13 = [v10 _optInMessageContentForPriorityMessageContent:v12];
    [v7 addContentPages:v13];

    id v14 = objc_alloc((Class)ICInAppMessageEntry);
    id v15 = ICBundleIdentifierForSystemApplicationType();
    id v16 = [v14 initWithApplicationMessage:v7 bundleIdentifier:v15];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000BDCE4(uint64_t a1, void *a2, void *a3)
{
  id v94 = a2;
  id v93 = a3;
  if (v93)
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v93;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ platform lookup failed. err=%@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_33:
    uint64_t v105 = 0;
    id v106 = &v105;
    uint64_t v107 = 0x2050000000;
    uint64_t v57 = (void *)qword_1001F3908;
    uint64_t v108 = qword_1001F3908;
    if (!qword_1001F3908)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1000BF050;
      __int16 v110 = &unk_1001BE9E8;
      id v111 = &v105;
      sub_1000BF050((uint64_t)buf);
      uint64_t v57 = (void *)v106[3];
    }
    uint64_t v58 = v57;
    _Block_object_dispose(&v105, 8);
    id v59 = [v58 alloc];
    long long v60 = [v94 allItems];
    os_log_t v44 = (os_log_t)[v59 initWithLookupItems:v60];

    uint64_t v105 = 0;
    id v106 = &v105;
    uint64_t v107 = 0x2050000000;
    long long v61 = (void *)qword_1001F3918;
    uint64_t v108 = qword_1001F3918;
    if (!qword_1001F3918)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1000BF118;
      __int16 v110 = &unk_1001BE9E8;
      id v111 = &v105;
      sub_1000BF118((uint64_t)buf);
      long long v61 = (void *)v106[3];
    }
    id v62 = v61;
    _Block_object_dispose(&v105, 8);
    uint64_t v63 = [v62 musicLibraryForUserAccount:0];
    double v64 = [v63 databasePath];
    uint64_t v105 = 0;
    id v106 = &v105;
    uint64_t v107 = 0x2050000000;
    uint64_t v65 = (void *)qword_1001F3920;
    uint64_t v108 = qword_1001F3920;
    if (!qword_1001F3920)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1000BF1E0;
      __int16 v110 = &unk_1001BE9E8;
      id v111 = &v105;
      sub_1000BF1E0((uint64_t)buf);
      uint64_t v65 = (void *)v106[3];
    }
    __int16 v66 = v65;
    _Block_object_dispose(&v105, 8);
    id v67 = [v66 alloc];
    __int16 v68 = [v44 trackData];
    id v69 = [v67 initWithLibraryPath:v64 trackData:v68 playlistData:0];

    [v69 setTracksAreLibraryOwnedContent:0];
    [v69 setPendingMatch:0];
    uint64_t v105 = 0;
    id v106 = &v105;
    uint64_t v107 = 0x2050000000;
    __int16 v70 = (void *)qword_1001F3928;
    uint64_t v108 = qword_1001F3928;
    if (!qword_1001F3928)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1000BF2A8;
      __int16 v110 = &unk_1001BE9E8;
      id v111 = &v105;
      sub_1000BF2A8((uint64_t)buf);
      __int16 v70 = (void *)v106[3];
    }
    id v71 = v70;
    _Block_object_dispose(&v105, 8);
    id v72 = [v71 sharedMediaLibraryService];
    v97[0] = _NSConcreteStackBlock;
    v97[1] = 3221225472;
    v97[2] = sub_1000BF370;
    v97[3] = &unk_1001BCA90;
    v97[4] = *(void *)(a1 + 32);
    id v98 = *(id *)(a1 + 64);
    [v72 performImport:v69 fromSource:6 withProgressBlock:0 completionHandler:v97];

    goto LABEL_42;
  }
  id v6 = +[ICDefaults standardDefaults];
  unsigned __int8 v7 = [v6 shouldForceLibraryRecommendationAnalysis];

  uint64_t v8 = [v94 itemForIdentifier:*(void *)(a1 + 40)];
  CFStringRef v9 = v8;
  if (v8)
  {
    id v77 = [v8 storeAdamID];
    __int16 v10 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      __int16 v12 = [v9 title];
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v77;
      *(_WORD *)&unsigned char buf[22] = 2114;
      __int16 v110 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ Creating application message for adamID %lld : %{public}@", buf, 0x20u);
    }
    id v95 = objc_alloc_init((Class)ICIAMApplicationMessage);
    [v95 setAssetPrefetchStrategy:1];
    id v13 = [v9 releaseDate];
    if (v13
      && (+[NSDate now],
          id v14 = objc_claimAutoreleasedReturnValue(),
          BOOL v15 = [v13 compare:v14] == (id)1,
          v14,
          v15))
    {
      id v16 = v13;
    }
    else
    {
      uint64_t v17 = +[NSDate now];

      id v16 = (void *)v17;
    }
    id v76 = v16;
    id v75 = [v16 dateByAddingTimeInterval:1209600.0];
    [v76 timeIntervalSince1970];
    objc_msgSend(v95, "setStartDate:");
    [v75 timeIntervalSince1970];
    objc_msgSend(v95, "setEndDate:");
    uint64_t v18 = +[NSUUID UUID];
    uint64_t v84 = [v18 UUIDString];

    [v95 setGlobalPresentationPolicyGroup:0];
    [v95 setCarousel:0];
    [v95 setHasCloseButton:1];
    [v95 setIdentifier:v84];
    [v95 setMaximumDisplays:0xFFFFFFFFLL];
    [v95 setMessageType:2];
    __int16 v19 = [*(id *)(a1 + 48) score];
    [v19 doubleValue];
    double v21 = v20;

    [v95 setPriority:(int)(v21 * 100.0)];
    [v95 addTarget:@"Library_Recommendation"];
    id v91 = objc_alloc_init((Class)ICIAMMessageRule);
    [v91 setIdentifier:@"page-detail-rule"];
    [v91 setType:1];
    [v91 setRuleOperator:0];
    id v90 = objc_alloc_init((Class)ICIAMTriggerCondition);
    [v90 setComparisonType:2];
    [v90 setDataType:2];
    id v22 = +[NSString stringWithFormat:@"eventType:page|pageId:%lld", v77];
    [v90 setIdentifier:v22];

    [v90 setTriggerValue:@"1"];
    id v86 = objc_alloc_init((Class)ICIAMMessageRule);
    [v86 setIdentifier:@"detail-event"];
    [v86 setType:0];
    [v86 setTriggerCondition:v90];
    [v91 addSubrules:v86];
    id v89 = objc_alloc_init((Class)ICIAMTriggerCondition);
    [v89 setIdentifier:@"isOptedInToNewArtistContent"];
    [v89 setComparisonType:0];
    [v89 setTriggerValue:@"true"];
    [v89 setDataType:0];
    id v85 = objc_alloc_init((Class)ICIAMMessageRule);
    [v85 setIdentifier:@"optin-context"];
    [v85 setType:0];
    [v85 setTriggerCondition:v89];
    [v91 addSubrules:v85];
    if ([v9 isExplicit])
    {
      id v23 = objc_alloc_init((Class)ICIAMTriggerCondition);
      [v23 setIdentifier:@"isExplicitContent"];
      [v23 setComparisonType:0];
      [v23 setTriggerValue:@"true"];
      [v23 setDataType:0];
      id v24 = objc_alloc_init((Class)ICIAMMessageRule);
      [v24 setIdentifier:@"is-explicit-rule"];
      [v24 setType:0];
      [v24 setTriggerCondition:v23];
      [v91 addSubrules:v24];
    }
    if ((v7 & 1) == 0)
    {
      id v25 = objc_alloc_init((Class)ICIAMTriggerCondition);
      [v25 setComparisonType:0];
      [v25 setDataType:0];
      [v25 setIdentifier:@"isAppleMusicSubscriber"];
      [v25 setTriggerValue:@"false"];
      id v26 = objc_alloc_init((Class)ICIAMMessageRule);
      [v26 setIdentifier:@"subscription-status-context"];
      [v26 setType:0];
      [v26 setTriggerCondition:v25];
      [v91 addSubrules:v26];
    }
    [v95 setRule:v91];
    id v92 = objc_alloc_init((Class)ICIAMMessageContent);
    [v92 setIdentifier:*(void *)(a1 + 40)];
    id v27 = [v9 name];
    [v92 setTitle:v27];

    id v28 = [v9 artistName];
    [v92 setSubtitle:v28];

    id v82 = objc_alloc_init((Class)ICIAMImage);
    double v29 = +[NSUUID UUID];
    uint64_t v30 = [v29 UUIDString];
    [v82 setIdentifier:v30];

    __int16 v31 = [v9 artworkInfos];
    id v74 = [v31 firstObject];

    id v73 = objc_msgSend(v74, "artworkURLWithSize:cropStyle:format:", ICStoreArtworkInfoCropStyleBoundedBox, ICStoreArtworkInfoImageFormatJPEG, 210.0, 210.0);
    uint64_t v32 = [v73 absoluteString];
    [v82 setURL:v32];

    [v92 addImages:v82];
    id v81 = objc_alloc_init((Class)ICIAMParameter);
    [v81 setKey:@"adamId"];
    [v81 setValue:*(void *)(a1 + 40)];
    [v92 addContentParameters:v81];
    id v80 = objc_alloc_init((Class)ICIAMParameter);
    [v80 setKey:@"explicitContent"];
    if ([v9 isExplicit]) {
      CFStringRef v33 = @"true";
    }
    else {
      CFStringRef v33 = @"false";
    }
    [v80 setValue:v33];
    [v92 addContentParameters:v80];
    id v88 = objc_alloc_init((Class)ICIAMMessageAction);
    [v88 setIdentifier:@"album-detail-segue"];
    [v88 setRequiresDelegate:1];
    [v88 setMessageRemovalPolicy:1];
    id v34 = objc_alloc_init((Class)ICIAMMetricEvent);
    [v34 setActionType:0];
    [v34 setEventType:@"click"];
    [v34 setPageId:@"LibraryContentBannerNonsubscriber"];
    [v34 setPageType:0];
    [v34 setTargetId:v84];
    [v34 setTargetType:3];
    uint64_t v83 = [*(id *)(a1 + 56) recoId];
    id v79 = objc_alloc_init((Class)ICIAMParameter);
    [v79 setKey:@"recoId"];
    [v79 setValue:v83];
    [v34 addActionDetails:v79];
    [v88 setClickEvent:v34];
    [v92 addMessageActions:v88];
    id v87 = objc_alloc_init((Class)ICIAMMessageAction);
    [v87 setIdentifier:@"close-button"];
    [v87 setRequiresDelegate:1];
    [v87 setMessageRemovalPolicy:1];
    id v35 = objc_alloc_init((Class)ICIAMMetricEvent);
    [v35 setActionType:0];
    [v35 setEventType:@"click"];
    [v35 setPageId:@"LibraryContentBannerNonsubscriber"];
    [v35 setPageType:0];
    [v35 setTargetId:v84];
    [v35 setTargetType:4];
    id v36 = objc_alloc_init((Class)ICIAMParameter);
    [v36 setKey:@"recoId"];
    [v36 setValue:v83];
    [v35 addActionDetails:v36];
    [v87 setClickEvent:v35];
    [v92 addMessageActions:v87];
    [v95 addContentPages:v92];
    id v37 = objc_alloc_init((Class)ICIAMMetricEvent);
    [v37 setEventType:@"impressions"];
    [v37 setPageId:@"LibraryContentBannerNonsubscriber"];
    [v37 setPageType:0];
    id v78 = objc_alloc_init((Class)ICIAMImpressionNode);
    [v78 setImpressionType:@"banner"];
    [v78 setRecoAlgoId:v83];
    [v37 setImpression:v78];
    [v95 setImpressionEvent:v37];
    unsigned int v38 = *(unsigned char **)(a1 + 32);
    if (v38[24])
    {
      uint64_t v39 = [v38 _createLocalNotificationDictionaryForRecommendationResult:*(void *)(a1 + 48) storePlatformMetadata:v9 recommendationID:v83 identifier:v84];
      if (v39)
      {
        id v40 = objc_alloc_init((Class)ICIAMLocalNotification);
        id v104 = 0;
        uint64_t v41 = +[NSJSONSerialization dataWithJSONObject:v39 options:0 error:&v104];
        id v42 = v104;
        if (v41
          && ([v41 base64EncodedStringWithOptions:0],
              (uint64_t v43 = objc_claimAutoreleasedReturnValue()) != 0))
        {
          [v40 setNotification:v43];
          [v95 setLocalNotification:v40];
        }
        else
        {
          uint64_t v43 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v47 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v47;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v42;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%{public}@ Failed to serialize local notification data. err=%{public}@", buf, 0x16u);
          }
        }
      }
    }
    char v48 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = *(void *)(a1 + 32);
      uint64_t v50 = [v95 identifier];
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v49;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v50;
      *(_WORD *)&unsigned char buf[22] = 2048;
      __int16 v110 = v77;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%{public}@ Created new application message %{public}@ for adamID %lld", buf, 0x20u);
    }
    uint64_t v51 = ICBundleIdentifierForSystemApplicationType();
    id v52 = [objc_alloc((Class)ICInAppMessageEntry) initWithApplicationMessage:v95 bundleIdentifier:v51];
    [v52 setShouldDownloadResources:1];
    id v53 = +[ICInAppMessageManager sharedManager];
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472;
    v99[2] = sub_1000BEE94;
    v99[3] = &unk_1001BCA68;
    void v99[4] = *(void *)(a1 + 32);
    id v100 = v95;
    id v102 = v51;
    id v103 = v77;
    id v101 = v9;
    id v54 = v51;
    id v55 = v9;
    id v56 = v95;
    [v53 addMessageEntry:v52 completion:v99];

    goto LABEL_33;
  }
  os_log_t v44 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    uint64_t v45 = *(void *)(a1 + 32);
    uint64_t v46 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v45;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v46;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%{public}@ Unable to create message. There is no store platform data for AdamID: %@", buf, 0x16u);
  }
LABEL_42:
}

void sub_1000BEE68(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1000BEE94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = [*(id *)(a1 + 40) identifier];
      uint64_t v7 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 138544130;
      uint64_t v16 = v5;
      __int16 v17 = 2114;
      uint64_t v18 = v6;
      __int16 v19 = 2048;
      uint64_t v20 = v7;
      __int16 v21 = 2114;
      id v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ Failed to save application message %{public}@ for adamID %lld. err=%{public}@", buf, 0x2Au);
    }
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    CFStringRef v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 48) storeAdamID]);
    id v14 = v9;
    __int16 v10 = +[NSArray arrayWithObjects:&v14 count:1];
    [v8 _cacheMatchedRecommendations:v10];

    uint64_t v11 = +[ICInAppMessageManager sharedManager];
    __int16 v12 = [*(id *)(a1 + 40) identifier];
    [v11 downloadResourcesForMessageWithIdentifier:v12 bundleIdentifier:*(void *)(a1 + 56) completion:&stru_1001BCA40];

    id v13 = *(unsigned char **)(a1 + 32);
    if (!v13[25]) {
      [v13 _updateOptInIfNecessary];
    }
  }
}

void sub_1000BF050(uint64_t a1)
{
  sub_1000BF460();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ML3StoreItemTrackData");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3908 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getML3StoreItemTrackDataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryRecommendationController.m", 62, @"Unable to find class %s", "ML3StoreItemTrackData");

    __break(1u);
  }
}

void sub_1000BF118(uint64_t a1)
{
  sub_1000BF460();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ML3MusicLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3918 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getML3MusicLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryRecommendationController.m", 60, @"Unable to find class %s", "ML3MusicLibrary");

    __break(1u);
  }
}

void sub_1000BF1E0(uint64_t a1)
{
  sub_1000BF460();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ML3MutableDatabaseImport");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3920 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getML3MutableDatabaseImportClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryRecommendationController.m", 61, @"Unable to find class %s", "ML3MutableDatabaseImport");

    __break(1u);
  }
}

void sub_1000BF2A8(uint64_t a1)
{
  sub_1000BF460();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MLMediaLibraryService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3928 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMLMediaLibraryServiceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICMusicLibraryRecommendationController.m", 63, @"Unable to find class %s", "MLMediaLibraryService");

    __break(1u);
  }
}

void sub_1000BF370(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2114;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Failed to import lookup responses into media library. err=%{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000BF460()
{
  v3[0] = 0;
  if (!qword_1001F3910)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_1000BF5B0;
    v3[4] = &unk_1001BEA20;
    void v3[5] = v3;
    long long v4 = off_1001BCB28;
    uint64_t v5 = 0;
    qword_1001F3910 = _sl_dlopen();
  }
  if (!qword_1001F3910)
  {
    uint64_t v1 = +[NSAssertionHandler currentHandler];
    uint64_t v2 = +[NSString stringWithUTF8String:"void *MusicLibraryLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICMusicLibraryRecommendationController.m", 59, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_1000BF5B0()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3910 = result;
  return result;
}

void sub_1000BF6EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = +[NSDate now];
  [v4 timeIntervalSince1970];
  double v6 = v5;

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = v3;
  id v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        __int16 v12 = [*(id *)(*((void *)&v21 + 1) + 8 * (void)v11) applicationMessage];
        id v13 = [v12 targets];
        if ([v13 containsObject:@"Library_Recommendation"])
        {
          [v12 endDate];
          double v15 = v14;

          if (v6 > v15)
          {
            uint64_t v16 = +[ICInAppMessageManager sharedManager];
            __int16 v17 = [v12 identifier];
            v19[0] = _NSConcreteStackBlock;
            v19[1] = 3221225472;
            v19[2] = sub_1000BF918;
            v19[3] = &unk_1001BF198;
            uint64_t v18 = *(void *)(a1 + 32);
            void v19[4] = *(void *)(a1 + 40);
            id v20 = v12;
            [v16 removeMessageEntryWithIdentifier:v17 forBundleIdentifier:v18 completion:v19];
          }
        }
        else
        {
        }
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v9);
  }
}

void sub_1000BF918(uint64_t a1, uint64_t a2)
{
  long long v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  double v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v13 = 138543618;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      uint64_t v16 = v7;
      id v8 = "%{public}@ Failed to remove expired message %{public}@";
      id v9 = v5;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, 0x16u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    int v13 = 138543618;
    uint64_t v14 = v11;
    __int16 v15 = 2114;
    uint64_t v16 = v12;
    id v8 = "%{public}@ Removed expired message %{public}@";
    id v9 = v5;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_6;
  }
}

void sub_1000BFB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BFB54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BFB64(uint64_t a1)
{
}

void sub_1000BFB6C(uint64_t a1)
{
  uint64_t v2 = +[ICUserIdentityStore defaultIdentityStore];
  id v3 = +[ICUserIdentity activeAccount];
  id v14 = [v2 DSIDForUserIdentity:v3 outError:0];

  long long v4 = [*(id *)(a1 + 32) _cacheDirectoryPath];
  double v5 = +[NSURL fileURLWithPath:v4];
  uint64_t v6 = [v5 URLByAppendingPathComponent:@"musicRecommendationsData"];
  uint64_t v7 = +[NSDictionary dictionaryWithContentsOfURL:v6];
  id v8 = [v7 mutableCopy];

  id v9 = [v14 stringValue];
  os_log_type_t v10 = [v8 objectForKey:v9];

  uint64_t v11 = [v10 valueForKey:@"matchedAdamIDs"];
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  int v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1000BFDD8(id a1, ICStoreRequestContext *a2)
{
  long long v4 = a2;
  uint64_t v2 = +[ICUserIdentity activeAccount];
  [(ICStoreRequestContext *)v4 setIdentity:v2];

  id v3 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [(ICStoreRequestContext *)v4 setAuthenticationProvider:v3];

  [(ICStoreRequestContext *)v4 setAllowsExpiredBags:1];
  [(ICStoreRequestContext *)v4 setPersonalizationStyle:0];
}

void sub_1000C0320(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(a1);
    double v5 = sub_1000EFE5C();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v3 - 12_Block_object_dispose(&STACK[0x250], 8) = 138543618;
      *(void *)(v3 - 124) = v2;
      *(_WORD *)(v3 - 116) = 2114;
      *(void *)(v3 - 114) = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ Failed to cache or compile MLModel err=%{public}@", (uint8_t *)(v3 - 128), 0x16u);
    }

    objc_end_catch();
    JUMPOUT(0x1000C030CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1000C07C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch recommendations model. err=%{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000C0A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 valueForKey:@"release_ix"];
  [v3 removeObjectForKey:@"release_ix"];
  if ([v4 count])
  {
    id v5 = [*(id *)(a1 + 40) mlModel];
    id v53 = 0;
    id v6 = [objc_alloc((Class)MLDictionaryFeatureProvider) initWithDictionary:v3 error:&v53];
    id v7 = v53;
    id v52 = v7;
    uint64_t v8 = [v5 predictionFromFeatures:v6 error:&v52];
    id v9 = v52;

    uint64_t v10 = [v8 featureValueForName:@"thresholded_score"];
    __int16 v11 = [v10 multiArrayValue];

    if (v9)
    {
      id v12 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543618;
        uint64_t v55 = v13;
        __int16 v56 = 2114;
        id v57 = v9;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@ Failed to compute scores. err=%{public}@", buf, 0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      id v51 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v16 = +[ICDefaults standardDefaults];
      id v17 = [v16 allowLowAffinityRecommendations];

      char v48 = v4;
      if ((uint64_t)[v11 count] < 1) {
        goto LABEL_25;
      }
      os_log_t v44 = v8;
      id v45 = v6;
      uint64_t v46 = v5;
      id v47 = v3;
      uint64_t v18 = 0;
      uint64_t v50 = 0;
      double v19 = 0.0;
      id v20 = &ML3TrackPropertyLyrics_ptr;
      uint64_t v49 = v11;
      do
      {
        long long v21 = [v11 objectAtIndexedSubscript:v18];
        [v21 doubleValue];
        if (v22 == 0.0) {
          int v23 = (int)v17;
        }
        else {
          int v23 = 0;
        }
        if (v23 == 1)
        {
          uint64_t v24 = [v20[243] numberWithDouble:(double)arc4random() / 4294967300.0];

          long long v21 = (void *)v24;
        }
        [v21 doubleValue];
        if (v25 > 0.0)
        {
          id v26 = v17;
          id v27 = [v4 objectAtIndex:v18];
          signed int v28 = [v27 intValue];

          double v29 = [*(id *)(a1 + 48) artistContentAtIndex:v28];
          uint64_t v30 = [v29 catalogContentAtIndex:0];
          __int16 v31 = objc_msgSend(v20[243], "numberWithLongLong:", objc_msgSend(v30, "adamId"));
          uint64_t v32 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(uint64_t)[v30 releaseDate]);
          CFStringRef v33 = [[ICMusicLibraryRecommendationResult alloc] initWithAdamID:v31 date:v32 score:v21];
          [v51 addObject:v33];
          [v21 doubleValue];
          if (v34 > v19)
          {
            [v21 doubleValue];
            double v19 = v35;
            uint64_t v36 = a1;
            id v37 = v33;

            uint64_t v50 = v37;
            a1 = v36;
            id v4 = v48;
          }

          id v17 = v26;
          __int16 v11 = v49;
          id v20 = &ML3TrackPropertyLyrics_ptr;
        }

        ++v18;
      }
      while ((uint64_t)[v11 count] > v18);
      id v5 = v46;
      id v3 = v47;
      id v9 = 0;
      id v6 = v45;
      uint64_t v8 = v44;
      if (v50)
      {
        unsigned int v38 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = *(void *)(a1 + 32);
          id v40 = [v51 count];
          *(_DWORD *)long long buf = 138543874;
          uint64_t v55 = v39;
          __int16 v56 = 2048;
          id v57 = v40;
          __int16 v58 = 2114;
          id v59 = v51;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%{public}@ Found %lu new recommendations: %{public}@", buf, 0x20u);
        }
        uint64_t v41 = v50;
      }
      else
      {
LABEL_25:
        unsigned int v38 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          uint64_t v42 = *(void *)(a1 + 32);
          id v43 = [v11 count];
          *(_DWORD *)long long buf = 138543618;
          uint64_t v55 = v42;
          __int16 v56 = 2048;
          id v57 = v43;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%{public}@ Generated %lu matches, but zero results scored above the model score threshold.", buf, 0x16u);
        }
        uint64_t v41 = 0;
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      id v4 = v48;
    }
  }
  else
  {
    id v14 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v55 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ No matched results found", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  [*(id *)(a1 + 32) _clearMLModelCache];
}

void sub_1000C1190(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [a1[4] _retrievePreviousRecommendationMatchesFromCache];
    id v5 = +[NSSet setWithArray:v4];

    id v6 = [v3 adamID];
    unsigned int v7 = [v5 containsObject:v6];

    if (v7)
    {
      uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = a1[4];
        uint64_t v10 = [v3 adamID];
        *(_DWORD *)long long buf = 138543618;
        id v23 = v9;
        __int16 v24 = 2048;
        id v25 = [v10 longLongValue];
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Matched recommendation already created for AdamID: %llu", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v13 = ICBundleIdentifierForSystemApplicationType();
      id v14 = +[ICInAppMessageManager sharedManager];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_1000C142C;
      v16[3] = &unk_1001BC988;
      id v15 = a1[4];
      id v17 = v13;
      id v18 = v15;
      id v19 = v3;
      id v20 = a1[5];
      id v21 = a1[6];
      uint64_t v8 = v13;
      [v14 messageEntriesForBundleIdentifier:v8 completion:v16];
    }
  }
  else
  {
    __int16 v11 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = a1[4];
      *(_DWORD *)long long buf = 138543362;
      id v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ No recommendations found.", buf, 0xCu);
    }

    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_1000C142C(uint64_t a1, void *a2)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v26;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(obj);
        }
        unsigned int v7 = [*(id *)(*((void *)&v25 + 1) + 8 * (void)v6) applicationMessage];
        uint64_t v8 = [v7 targets];
        unsigned int v9 = [v8 containsObject:@"Library_Recommendation"];

        if (v9)
        {
          uint64_t v10 = +[ICInAppMessageManager sharedManager];
          __int16 v11 = [v7 identifier];
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3221225472;
          v23[2] = sub_1000C1704;
          v23[3] = &unk_1001BF198;
          uint64_t v12 = *(void *)(a1 + 32);
          void v23[4] = *(void *)(a1 + 40);
          id v24 = v7;
          [v10 removeMessageEntryWithIdentifier:v11 forBundleIdentifier:v12 completion:v23];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v4);
  }
  uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = [*(id *)(a1 + 48) adamID];
    id v16 = [v15 longLongValue];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v30 = v14;
    __int16 v31 = 2048;
    id v32 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ Attempting to create new recommendation message for AdamID: %llu", buf, 0x16u);
  }
  id v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_1000C1834;
  v21[3] = &unk_1001BD0D8;
  uint64_t v19 = *(void *)(a1 + 56);
  id v22 = *(id *)(a1 + 64);
  [v17 _createApplicationMessagesForResult:v18 artistNewContentResponse:v19 completion:v21];
}

void sub_1000C1704(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v14 = 138543874;
      uint64_t v15 = v6;
      __int16 v16 = 2114;
      uint64_t v17 = v7;
      __int16 v18 = 2114;
      id v19 = v3;
      uint64_t v8 = "%{public}@ Failed to remove message %{public}@, err=%{public}@";
      unsigned int v9 = v5;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 32;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v14, v11);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    int v14 = 138543618;
    uint64_t v15 = v12;
    __int16 v16 = 2114;
    uint64_t v17 = v13;
    uint64_t v8 = "%{public}@ Removing stale messages for new recommendation update. Removed message: %{public}@";
    unsigned int v9 = v5;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    uint32_t v11 = 22;
    goto LABEL_6;
  }
}

uint64_t sub_1000C1834(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000C1984(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    if (v5)
    {
      uint64_t v7 = +[ICMusicSubscriptionStatusController sharedStatusController];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_1000C1B3C;
      v14[3] = &unk_1001BC938;
      void v14[4] = *(void *)(a1 + 32);
      [v7 getSubscriptionStatusWithCompletionHandler:v14];
      goto LABEL_9;
    }
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v16 = v13;
    unsigned int v9 = "%{public}@ Skipping update because the user is not signed in";
    os_log_type_t v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
    goto LABEL_4;
  }
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v16 = v8;
    __int16 v17 = 2114;
    id v18 = v6;
    unsigned int v9 = "%{public}@ Skipping update because we failed to load account properties. err=%{public}@";
    os_log_type_t v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    uint32_t v12 = 22;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
  }
LABEL_9:
}

void sub_1000C1B3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[ICDefaults standardDefaults];
  unsigned int v8 = [v7 shouldForceLibraryRecommendationAnalysis];

  if (v6)
  {
    unsigned int v9 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v19 = v10;
      __int16 v20 = 2114;
      id v21 = v6;
      os_log_type_t v11 = "%{public}@ Skipping update because we failed to obtain the subscription status. err=%{public}@";
      uint32_t v12 = v9;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      uint32_t v14 = 22;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, buf, v14);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if ((([v5 hasCapability:128] ^ 1 | v8) & 1) == 0)
  {
    unsigned int v9 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v19 = v16;
      os_log_type_t v11 = "%{public}@ Skipping update because the user is a subscriber";
      uint32_t v12 = v9;
      os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
      uint32_t v14 = 12;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_10;
  }
  uint64_t v15 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000C1D18;
  v17[3] = &unk_1001BC910;
  void v17[4] = v15;
  [v15 _fetchRecommendationsSetAndModelWithCompletionHandler:v17];
LABEL_10:
}

void sub_1000C1D18(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000C1E2C;
    v6[3] = &unk_1001BE408;
    void v6[4] = v3;
    [v3 _handleRecommendationsResponseModel:a2 completion:v6];
  }
  else
  {
    id v4 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ No response model from the server - skipping update", buf, 0xCu);
    }
  }
}

void sub_1000C1E2C(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%{public}@ Library Recommendations Computation Finished", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000C218C(uint64_t a1, void *a2)
{
  [a2 settingsSwitches];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [obj countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (!v3) {
    goto LABEL_12;
  }
  id v4 = v3;
  uint64_t v15 = a1;
  unsigned __int8 v5 = 0;
  unsigned __int8 v6 = 0;
  char v7 = 0;
  uint64_t v8 = *(void *)v18;
  do
  {
    for (i = 0; i != v4; i = (char *)i + 1)
    {
      if (*(void *)v18 != v8) {
        objc_enumerationMutation(obj);
      }
      uint64_t v10 = *(void **)(*((void *)&v17 + 1) + 8 * i);
      os_log_type_t v11 = objc_msgSend(v10, "identifier", v15);
      unsigned int v12 = [v11 isEqualToString:ICMusicAccountNotificationsSettingsSwitchArtistsAndShows];

      if (v12)
      {
        unsigned __int8 v6 = [v10 isToggled];
        unsigned __int8 v5 = [v10 hasBeenPreviouslyToggled];
        char v7 = v6 | v5 ^ 1;
      }
    }
    id v4 = [obj countByEnumeratingWithState:&v17 objects:v23 count:16];
  }
  while (v4);
  a1 = v15;
  if (v7)
  {
    *(unsigned char *)(*(void *)(v15 + 32) + 24) = v6 & 1;
    *(unsigned char *)(*(void *)(v15 + 32) + 25) = v5 & 1;
    [*(id *)(v15 + 32) _performRecommendationsRequest];
  }
  else
  {
LABEL_12:
    os_log_type_t v13 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ User has opted out of artist and shows notifications; recommendations request is skipped.",
        buf,
        0xCu);
    }
  }
}

void sub_1000C2410(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _cacheDirectoryPath];
  id v3 = +[NSURL fileURLWithPath:v2];
  id v4 = +[ICUserIdentityStore defaultIdentityStore];
  unsigned __int8 v5 = +[ICUserIdentity activeAccount];
  unsigned __int8 v6 = [v4 DSIDForUserIdentity:v5 outError:0];

  if (v3)
  {
    id v21 = v2;
    char v7 = [v3 URLByAppendingPathComponent:@"musicRecommendationsData"];
    uint64_t v8 = +[NSDictionary dictionaryWithContentsOfURL:v7];
    id v9 = [v8 mutableCopy];

    if (!v9) {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
    }
    uint64_t v10 = [v6 stringValue];
    id v11 = [v9 objectForKey:v10];

    if (!v11)
    {
      id v11 = objc_alloc_init((Class)NSMutableDictionary);
      unsigned int v12 = [v6 stringValue];
      [v9 setObject:v11 forKey:v12];
    }
    os_log_type_t v13 = [v11 valueForKey:@"matchedAdamIDs"];
    if (v13) {
      +[NSMutableSet setWithArray:v13];
    }
    else {
    uint64_t v15 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [*(id *)(a1 + 40) count]);
    }
    [v15 addObjectsFromArray:*(void *)(a1 + 40)];
    uint64_t v16 = [v15 allObjects];
    [v11 setObject:v16 forKey:@"matchedAdamIDs"];

    id v22 = 0;
    unsigned __int8 v17 = [v9 writeToURL:v7 error:&v22];
    id v18 = v22;
    if (v18 || (v17 & 1) == 0)
    {
      long long v19 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543618;
        uint64_t v24 = v20;
        __int16 v25 = 2114;
        id v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@ Failed to write to disk the matched recommendations. err=%{public}@", buf, 0x16u);
      }
    }
    uint64_t v2 = v21;
  }
  else
  {
    char v7 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v24 = v14;
      __int16 v25 = 2114;
      id v26 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Cache Directory URL is nil failed to cache recommendations data with path received: %{public}@", buf, 0x16u);
    }
  }
}

void sub_1000C2B80(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Handle new AMPMusicArtistNewContentResponse from notification finished", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000C2F40(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 dictionaryForBagKey:ICURLBagKeyArtistNewContent];
  int v4 = objc_msgSend(v3, "ic_numberValueForKey:", @"min-refresh-freq-in-seconds");
  if ([v4 longLongValue]) {
    id v5 = [v4 longLongValue];
  }
  else {
    id v5 = (id)XPC_ACTIVITY_INTERVAL_1_DAY;
  }
  unsigned __int8 v6 = +[ICDefaults standardDefaults];
  unsigned int v7 = [v6 shouldReduceLibraryRecommendationsXPCInterval];

  if (v7) {
    id v5 = (id)XPC_ACTIVITY_INTERVAL_30_MIN;
  }
  *(double *)(*(void *)(a1 + 32) + 64) = (double)(uint64_t)v5;
  uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v14 = v9;
    __int16 v15 = 2048;
    id v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Scheduling periodic updates every %lld seconds", buf, 0x16u);
  }

  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  id v11 = (const char *)[@"com.apple.itunescloud.library_recommendations_refresh" UTF8String];
  xpc_dictionary_set_string(v10, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(v10, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v10, XPC_ACTIVITY_INTERVAL, (int64_t)v5);
  xpc_dictionary_set_BOOL(v10, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 0);
  xpc_dictionary_set_BOOL(v10, XPC_ACTIVITY_ALLOW_BATTERY, 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000C31B0;
  handler[3] = &unk_1001BC898;
  handler[4] = *(void *)(a1 + 32);
  xpc_activity_register(v11, v10, handler);
}

void sub_1000C31B0(uint64_t a1)
{
  id v3 = +[NSDate now];
  [v3 timeIntervalSince1970];
  *(void *)(*(void *)(a1 + 32) + 56) = v2;
  [*(id *)(a1 + 32) _performRecommendationsUpdate];
}

void sub_1000C34F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = +[ICUserIdentityStore defaultIdentityStore];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1000C35AC;
  v7[3] = &unk_1001BECC0;
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v4;
  id v6 = v4;
  [v5 synchronizeWithCompletionHandler:v7];
}

void sub_1000C35AC(uint64_t a1)
{
  uint64_t v2 = +[ICUserIdentityStore defaultIdentityStore];
  id v3 = +[ICUserIdentity activeAccount];
  uint64_t v4 = [v2 DSIDForUserIdentity:v3 outError:0];

  if (!v4) {
    goto LABEL_7;
  }
  id v5 = *(void **)(a1 + 32);
  if (v4 != v5[6])
  {
    [v5 stopSystemService];
    [*(id *)(a1 + 32) startSystemService];
  }
  if (![*(id *)(a1 + 40) hasCapability:128]
    || (+[ICDefaults standardDefaults],
        id v6 = objc_claimAutoreleasedReturnValue(),
        unsigned int v7 = [v6 shouldForceLibraryRecommendationAnalysis],
        v6,
        v7))
  {
    [*(id *)(a1 + 32) scheduleRecommendationsRefreshTimer];
  }
  else
  {
LABEL_7:
    [*(id *)(a1 + 32) stopSystemService];
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 48);
  *(void *)(v8 + 4_Block_object_dispose(&STACK[0x250], 8) = v4;
}

void sub_1000C38B4(id a1)
{
  qword_1001F3900 = objc_alloc_init(ICMusicLibraryRecommendationController);

  _objc_release_x1();
}

void sub_1000C3B94(id a1)
{
  id v1 = [[ICDAAPPropertyInfo alloc] _init];
  uint64_t v2 = (void *)qword_1001F3940;
  qword_1001F3940 = (uint64_t)v1;

  [(id)qword_1001F3940 mapProperty:@"daap.incrementplaycount" toCode:1634953584 valueType:5];
  [(id)qword_1001F3940 mapProperty:@"com.apple.itunes.cloud-artwork-token" toCode:1634026324 valueType:9];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyName toCode:1835626093 valueType:9];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyDescription toCode:1634037860 valueType:9];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyDatePlayed toCode:1835362672 valueType:10];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyDateCreated toCode:1835362657 valueType:10];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyLikedState toCode:1634036851 valueType:1];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyCloudIsPublic toCode:1634358088 valueType:1];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyCloudIsVisible toCode:1634363766 valueType:1];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyCloudAuthorStoreID toCode:1634353481 valueType:7];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyParentPersistentID toCode:1836082031 valueType:5];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyExternalVendorIdentifier toCode:1634358889 valueType:9];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyExternalVendorDisplayName toCode:1634358894 valueType:9];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyExternalVendorContainerTag toCode:1634358900 valueType:9];
  [(id)qword_1001F3940 mapProperty:ML3ContainerPropertyCoverArtworkRecipe toCode:1634353490 valueType:9];
  id v3 = (void *)qword_1001F3940;
  uint64_t v4 = ML3ContainerPropertyCollaborationMode;

  [v3 mapProperty:v4 toCode:1634353999 valueType:5];
}

void sub_1000C3E38(id a1)
{
  id v1 = [[ICDAAPPropertyInfo alloc] _init];
  uint64_t v2 = (void *)qword_1001F3930;
  qword_1001F3930 = (uint64_t)v1;

  [(id)qword_1001F3930 mapProperty:@"daap.incrementplaycount" toCode:1634953584 valueType:5];
  [(id)qword_1001F3930 mapProperty:@"daap.incrementskipcount" toCode:1634953587 valueType:5];
  [(id)qword_1001F3930 mapProperty:@"dmap.itemhidden" toCode:1835624553 valueType:1];
  [(id)qword_1001F3930 mapProperty:ML3TrackPropertyUserRating toCode:1634956658 valueType:1];
  [(id)qword_1001F3930 mapProperty:ML3TrackPropertyHidden toCode:1835624553 valueType:1];
  [(id)qword_1001F3930 mapProperty:ML3TrackPropertyDatePlayed toCode:1634955372 valueType:10];
  [(id)qword_1001F3930 mapProperty:ML3TrackPropertyDateSkipped toCode:1634954084 valueType:10];
  [(id)qword_1001F3930 mapProperty:ML3TrackPropertyLikedState toCode:1634036851 valueType:1];
  [(id)qword_1001F3930 mapProperty:ML3TrackPropertyAlbumLikedState toCode:1634361708 valueType:1];
  [(id)qword_1001F3930 mapProperty:ML3TrackPropertyLikedStateChangedDate toCode:1634036850 valueType:10];
  [(id)qword_1001F3930 mapProperty:ML3AlbumArtistPropertyLikedState toCode:1634036851 valueType:1];
  [(id)qword_1001F3930 mapProperty:ML3AlbumArtistPropertyLikedStateChangedDate toCode:1634036850 valueType:10];
  [(id)qword_1001F3930 mapProperty:ML3AlbumPropertyLikedState toCode:1634036851 valueType:1];
  id v3 = (void *)qword_1001F3930;
  uint64_t v4 = ML3AlbumPropertyLikedStateChangedDate;

  [v3 mapProperty:v4 toCode:1634036850 valueType:10];
}

BOOL sub_1000C4430(void *a1, const __CFString *a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    memset(&cf[1], 0, sizeof(audit_token_t));
    [a1 auditToken];
    cf[0] = cf[1];
    uint64_t v4 = SecTaskCreateWithAuditToken(0, cf);
    if (!v4) {
      return 0;
    }
    id v5 = v4;
    *(void *)cf[0].val = 0;
    CFBooleanRef v6 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v4, a2, (CFErrorRef *)cf);
    if (*(void *)cf[0].val)
    {
      CFRelease(*(CFTypeRef *)cf[0].val);
    }
    else if (v6)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(v6))
      {
        BOOL v2 = CFBooleanGetValue(v6) != 0;
        goto LABEL_7;
      }
    }
    BOOL v2 = 0;
LABEL_7:
    CFRelease(v5);
  }
  return v2;
}

void sub_1000C4900(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = os_log_create("com.apple.amp.itunescloudd", "SDK");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    uint64_t v9 = v21 = v6;
    xpc_object_t v10 = *(void **)(a1 + 32);
    if ([v10 method]) {
      CFStringRef v11 = @"POST";
    }
    else {
      CFStringRef v11 = @"GET";
    }
    unsigned int v12 = [*(id *)(a1 + 32) action];
    os_log_type_t v13 = (objc_class *)objc_opt_class();
    uint64_t v14 = NSStringFromClass(v13);
    id v15 = [v5 responseCode];
    id v16 = [v5 responseData];
    *(_DWORD *)long long buf = 138545154;
    id v23 = v9;
    __int16 v24 = 2048;
    __int16 v25 = v10;
    __int16 v26 = 2114;
    CFStringRef v27 = v11;
    __int16 v28 = 2114;
    double v29 = v12;
    __int16 v30 = 2114;
    __int16 v31 = v14;
    __int16 v32 = 2048;
    id v33 = v5;
    __int16 v34 = 2048;
    id v35 = v15;
    __int16 v36 = 2048;
    id v37 = [v16 length];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p method=%{public}@ action=%{public}@> received response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x52u);

    id v6 = v21;
  }

  if (v6)
  {
    unsigned __int8 v17 = os_log_create("com.apple.amp.itunescloudd", "SDK");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "JaliscoHideItemOperation failed with error: %{public}@", buf, 0xCu);
    }
  }
  id v18 = *(void **)(a1 + 40);
  uint64_t v19 = (uint64_t)[v5 responseCode];
  if (v19 > 399)
  {
    if (v19 != 404 && v19 != 400) {
      goto LABEL_17;
    }
    uint64_t v20 = 3;
  }
  else
  {
    uint64_t v20 = 1;
    if (v19 != 200 && v19 != 204) {
LABEL_17:
    }
      uint64_t v20 = 2;
  }
  [v18 setStatus:v20];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000C5108(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = a1[4];
      xpc_object_t v10 = objc_msgSend(v6, "msv_description");
      int v14 = 138543618;
      id v15 = v9;
      __int16 v16 = 2114;
      unsigned __int8 v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Finished request to end collaboration error=%{public}@", (uint8_t *)&v14, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = a1[4];
    int v14 = 138543362;
    id v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished request to end collaboration", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v12 = (uint64_t)[v5 responseCode];
  if (v12 > 399)
  {
    if (v12 == 404 || v12 == 400)
    {
      uint64_t v13 = 3;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  if (v12 != 200 && v12 != 204) {
LABEL_13:
  }
    uint64_t v13 = 2;
LABEL_14:
  [a1[4] setStatus:v13];
  [a1[4] setError:v6];
  if (!v6)
  {
    *((unsigned char *)a1[4] + 106) = [v5 updateRequired];
    *(void *)((char *)a1[4] + 114) = [a1[5] longLongValue];
  }
  [a1[6] endTransaction];
  [a1[4] finish];
}

void sub_1000C5694(id *a1)
{
  id v2 = a1[4];
  id v3 = a1[5];
  id v4 = a1[6];
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000C575C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000C5828;
  v6[3] = &unk_1001BCC00;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  char v10 = *(unsigned char *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

void sub_1000C5828(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  id v9 = *(id *)(a1 + 48);
  id v6 = v8;
  id v7 = v5;
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000C5918(uint64_t a1, void *a2)
{
  id v3 = a2;
  ICDAAPUtilitiesWriteProperty();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000C59F0;
  v6[3] = &unk_1001BDA60;
  id v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = v3;
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1000C59F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasInfoForProperty:v5])
  {
    [*(id *)(a1 + 32) elementCodeForProperty:v5];
    [*(id *)(a1 + 32) valueTypeForProperty:v5];
    ICDAAPUtilitiesWriteProperty();
  }
  else
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No DAAP code found for item property: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1000C5C18(id *a1)
{
  id v2 = a1[4];
  id v3 = a1[5];
  id v4 = a1[6];
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000C5CE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 56)) {
    int v4 = 1835625572;
  }
  else {
    int v4 = 1835624804;
  }
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v5 = 7;
  }
  else {
    uint64_t v5 = 5;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1000C5DD8;
  void v8[3] = &unk_1001BCBB0;
  id v6 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  int v13 = v4;
  uint64_t v12 = v5;
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  [v6 enumerateObjectsUsingBlock:v8];
}

void sub_1000C5DD8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  int v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  id v9 = *(id *)(a1 + 48);
  id v6 = v8;
  id v7 = v5;
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000C5ED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  ICDAAPUtilitiesWriteProperty();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000C5F90;
  v6[3] = &unk_1001BDA60;
  int v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = v3;
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1000C5F90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasInfoForProperty:v5])
  {
    [*(id *)(a1 + 32) elementCodeForProperty:v5];
    [*(id *)(a1 + 32) valueTypeForProperty:v5];
    ICDAAPUtilitiesWriteProperty();
  }
  else
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No DAAP code found for item property: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

id sub_1000C736C(uint64_t a1)
{
  [*(id *)(a1 + 40) mediaType];
  id v2 = NSStringFromMLMediaType();
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"mediaType"];

  [*(id *)(a1 + 48) timeIntervalSinceNow];
  int v4 = +[NSNumber numberWithDouble:fabs(v3)];
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:@"duration"];

  [*(id *)(a1 + 32) setObject:&__kCFBooleanFalse forKeyedSubscript:@"success"];
  id v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"cachingEnabled"];

  id v6 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"availableStorage"];

  id v7 = *(void **)(a1 + 32);

  return v7;
}

id sub_1000C7480(id *a1)
{
  [a1[5] mediaType];
  id v2 = NSStringFromMLMediaType();
  [a1[4] setObject:v2 forKeyedSubscript:@"mediaType"];

  [a1[6] timeIntervalSinceNow];
  int v4 = +[NSNumber numberWithDouble:fabs(v3)];
  [a1[4] setObject:v4 forKeyedSubscript:@"duration"];

  [a1[4] setObject:&__kCFBooleanFalse forKeyedSubscript:@"success"];
  [a1[4] setObject:&__kCFBooleanTrue forKeyedSubscript:@"noToken"];
  id v5 = a1[4];

  return v5;
}

id sub_1000C754C(id *a1)
{
  [a1[5] mediaType];
  id v2 = NSStringFromMLMediaType();
  [a1[4] setObject:v2 forKeyedSubscript:@"mediaType"];

  [a1[6] timeIntervalSinceNow];
  int v4 = +[NSNumber numberWithDouble:fabs(v3)];
  [a1[4] setObject:v4 forKeyedSubscript:@"duration"];

  [a1[4] setObject:&__kCFBooleanFalse forKeyedSubscript:@"success"];
  [a1[4] setObject:&__kCFBooleanTrue forKeyedSubscript:@"noAssetURL"];
  id v5 = a1[4];

  return v5;
}

id sub_1000C7618(id *a1)
{
  [a1[5] mediaType];
  id v2 = NSStringFromMLMediaType();
  [a1[4] setObject:v2 forKeyedSubscript:@"mediaType"];

  [a1[6] timeIntervalSinceNow];
  int v4 = +[NSNumber numberWithDouble:fabs(v3)];
  [a1[4] setObject:v4 forKeyedSubscript:@"duration"];

  [a1[4] setObject:&__kCFBooleanFalse forKeyedSubscript:@"success"];
  [a1[4] setObject:&__kCFBooleanTrue forKeyedSubscript:@"watchNotCharging"];
  id v5 = a1[4];

  return v5;
}

void sub_1000C76E4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [a1[4] isCancelled];
  unsigned int v8 = v7;
  if (v6 || (v7 & 1) != 0)
  {
    id v23 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    __int16 v24 = v23;
    if (v6)
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v25 = a1[4];
        __int16 v26 = [v25 assetURL];
        CFStringRef v27 = objc_msgSend(v6, "msv_description");
        *(_DWORD *)long long buf = 138544130;
        id v54 = v25;
        __int16 v55 = 2114;
        __int16 v56 = v26;
        __int16 v57 = 1024;
        LODWORD(v58[0]) = v8;
        WORD2(v58[0]) = 2114;
        *(void *)((char *)v58 + 6) = v27;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}@ Finished downloading artwork from '%{public}@' (isCancelled=%{BOOL}u) error=%{public}@", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = a1[4];
      __int16 v32 = [v31 assetURL];
      *(_DWORD *)long long buf = 138543874;
      id v54 = v31;
      __int16 v55 = 2114;
      __int16 v56 = v32;
      __int16 v57 = 1024;
      LODWORD(v58[0]) = v8;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished downloading artwork from '%{public}@' (isCancelled=%{BOOL}u)", buf, 0x1Cu);
    }
    id v38 = a1[5];
    id v39 = a1[6];
    id v40 = v6;
    AnalyticsSendEventLazy();
    [a1[4] setError:v40];
    [a1[4] finish];
  }
  else
  {
    id v10 = [v5 urlResponse];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v10 statusCode] == (id)200)
    {
      __int16 v36 = v9;
      id v11 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = a1[4];
        int v13 = [v12 assetURL];
        *(_DWORD *)long long buf = 138543618;
        id v54 = v12;
        __int16 v55 = 2114;
        __int16 v56 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ Downloaded artwork successfully from '%{public}@'", buf, 0x16u);
      }
      int v14 = [v5 bodyDataURL];
      uint64_t v15 = [a1[4] _resizedImageDataFromLocation:v14];
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_1000C7D70;
      v47[3] = &unk_1001BCCA0;
      v47[4] = a1[4];
      id v48 = v10;
      id v16 = v14;
      id v49 = v16;
      id v50 = a1[5];
      id v51 = a1[6];
      id v52 = 0;
      unsigned __int8 v17 = objc_retainBlock(v47);
      id v37 = [a1[4] musicLibrary];
      id v18 = [a1[4] artworkToken];
      id v35 = [a1[4] artworkType];
      id v34 = [a1[4] sourceType];
      id v19 = [a1[4] mediaType];
      uint64_t v20 = (void *)v15;
      if (v15)
      {
        v45[0] = _NSConcreteStackBlock;
        v45[1] = 3221225472;
        void v45[2] = sub_1000C7F78;
        v45[3] = &unk_1001BD0D8;
        id v21 = (id *)&v46;
        uint64_t v46 = v17;
        id v22 = v17;
        [v37 importOriginalArtworkFromImageData:v20 withArtworkToken:v18 artworkType:v35 sourceType:v34 mediaType:v19 shouldPerformColorAnalysis:0 completion:v45];
      }
      else
      {
        v43[0] = _NSConcreteStackBlock;
        v43[1] = 3221225472;
        v43[2] = sub_1000C7F88;
        v43[3] = &unk_1001BD0D8;
        id v21 = (id *)&v44;
        os_log_t v44 = v17;
        id v33 = v17;
        [v37 importOriginalArtworkFromFileURL:v16 withArtworkToken:v18 artworkType:v35 sourceType:v34 mediaType:v19 shouldPerformColorAnalysis:0 completion:v43];
      }

      id v9 = v36;
    }
    else
    {
      __int16 v28 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        id v29 = a1[4];
        __int16 v30 = [v29 assetURL];
        *(_DWORD *)long long buf = 138543874;
        id v54 = v29;
        __int16 v55 = 2114;
        __int16 v56 = v30;
        __int16 v57 = 2114;
        v58[0] = v5;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}@ Failed to download artwork. URL = %{public}@), response=%{public}@", buf, 0x20u);
      }
      id v41 = a1[5];
      id v42 = a1[6];
      AnalyticsSendEventLazy();
      [a1[4] setError:0];
      [a1[4] finish];

      id v16 = v41;
    }
  }
}

void sub_1000C7D70(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = [*(id *)(a1 + 40) statusCode];
      unsigned int v7 = [*(id *)(a1 + 32) assetURL];
      unsigned int v8 = objc_msgSend(v3, "msv_description");
      *(_DWORD *)long long buf = 138544130;
      uint64_t v16 = v5;
      __int16 v17 = 2048;
      id v18 = v6;
      __int16 v19 = 2114;
      uint64_t v20 = v7;
      __int16 v21 = 2114;
      id v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ Failed to download artwork with HTTP status code %lld (URL = %{public}@) error=%{public}@", buf, 0x2Au);
    }
  }
  id v9 = +[NSFileManager defaultManager];
  [v9 removeItemAtURL:*(void *)(a1 + 48) error:0];

  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  int v13 = v3;
  id v14 = *(id *)(a1 + 72);
  id v10 = v3;
  AnalyticsSendEventLazy();
  [*(id *)(a1 + 32) setError:*(void *)(a1 + 72)];
  [*(id *)(a1 + 32) finish];
}

uint64_t sub_1000C7F78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C7F88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000C7F98(id *a1)
{
  [a1[5] mediaType];
  id v2 = NSStringFromMLMediaType();
  [a1[4] setObject:v2 forKeyedSubscript:@"mediaType"];

  [a1[6] timeIntervalSinceNow];
  int v4 = +[NSNumber numberWithDouble:fabs(v3)];
  [a1[4] setObject:v4 forKeyedSubscript:@"duration"];

  [a1[4] setObject:&__kCFBooleanFalse forKeyedSubscript:@"success"];
  [a1[4] setObject:&__kCFBooleanFalse forKeyedSubscript:@"isCancelled"];
  uint64_t v5 = objc_msgSend(a1[7], "msv_analyticSignature");
  [a1[4] setObject:v5 forKeyedSubscript:@"errorstring"];

  id v6 = a1[4];

  return v6;
}

id sub_1000C808C(uint64_t a1)
{
  [*(id *)(a1 + 40) mediaType];
  id v2 = NSStringFromMLMediaType();
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"mediaType"];

  [*(id *)(a1 + 48) timeIntervalSinceNow];
  int v4 = +[NSNumber numberWithDouble:fabs(v3)];
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:@"duration"];

  [*(id *)(a1 + 32) setObject:&__kCFBooleanFalse forKeyedSubscript:@"success"];
  uint64_t v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"isCancelled"];

  id v6 = objc_msgSend(*(id *)(a1 + 56), "msv_analyticSignature");
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"errorstring"];

  unsigned int v7 = *(void **)(a1 + 32);

  return v7;
}

id sub_1000C819C(uint64_t a1)
{
  [*(id *)(a1 + 40) mediaType];
  id v2 = NSStringFromMLMediaType();
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"mediaType"];

  [*(id *)(a1 + 48) timeIntervalSinceNow];
  int v4 = +[NSNumber numberWithDouble:fabs(v3)];
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:@"duration"];

  [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"success"];
  uint64_t v5 = +[NSNumber numberWithInt:*(void *)(a1 + 56) == 0];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"importSuccess"];

  id v6 = objc_msgSend(*(id *)(a1 + 64), "msv_analyticSignature");
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"errorstring"];

  unsigned int v7 = *(void **)(a1 + 32);

  return v7;
}

void sub_1000C9E84(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  id v4 = a2;
  [v4 writeUInt32:v3 withCode:1836413810];
  [v4 writeUInt8:*(unsigned __int8 *)(a1 + 36) withCode:1634354764];
}

void sub_1000CA1BC(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  xpc_object_t v5 = xpc_activity_copy_criteria(v3);
  id v6 = v5;
  if (state != 2)
  {
    if (state)
    {
      id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      uint64_t v17 = *(void *)(a1 + 40);
      int v30 = 138543362;
      uint64_t v31 = v17;
      id v18 = "%{public}@ Unknown state";
      __int16 v19 = v11;
      uint32_t v20 = 12;
    }
    else
    {
      if (v5)
      {
        double v7 = xpc_dictionary_get_double(v5, "CloudPlayActivityListenerNextFlushPlayActivityFireDateKey");
        double v8 = v7;
        id v9 = *(void **)(a1 + 32);
        if (v9)
        {
          double v10 = xpc_dictionary_get_double(v9, "CloudPlayActivityListenerNextFlushPlayActivityFireDateKey");
          if (![*(id *)(a1 + 40) _isValidTimeInterval:v8] || vabdd_f64(v10, v8) > 300.0)
          {
            *(double *)(*(void *)(a1 + 40) + 4_Block_object_dispose(&STACK[0x250], 8) = v10;
            xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 32));
            id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v12 = *(void *)(a1 + 40);
              int v13 = +[NSDate dateWithTimeIntervalSince1970:v8];
              id v14 = +[NSDate dateWithTimeIntervalSince1970:*(double *)(*(void *)(a1 + 40) + 48)];
              int v30 = 138543874;
              uint64_t v31 = v12;
              __int16 v32 = 2114;
              id v33 = v13;
              __int16 v34 = 2114;
              id v35 = v14;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ updating current criteria to flush the next play activity event from %{public}@ to %{public}@", (uint8_t *)&v30, 0x20u);

LABEL_28:
            }
LABEL_29:

            goto LABEL_30;
          }
          id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_29;
          }
          uint64_t v29 = *(void *)(a1 + 40);
          int v13 = +[NSDate dateWithTimeIntervalSince1970:v8];
          int v30 = 138543618;
          uint64_t v31 = v29;
          __int16 v32 = 2114;
          id v33 = v13;
          id v23 = "%{public}@ Found existing activity to flush play activity events on %{public}@";
LABEL_27:
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v30, 0x16u);
          goto LABEL_28;
        }
        unsigned int v24 = [*(id *)(a1 + 40) _isValidTimeInterval:v7];
        uint64_t v25 = *(void *)(a1 + 40);
        if (v24)
        {
          *(double *)(v25 + 4_Block_object_dispose(&STACK[0x250], 8) = v8;
          id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_29;
          }
          uint64_t v26 = *(void *)(a1 + 40);
          int v13 = +[NSDate dateWithTimeIntervalSince1970:*(double *)(v26 + 48)];
          int v30 = 138543618;
          uint64_t v31 = v26;
          __int16 v32 = 2114;
          id v33 = v13;
          id v23 = "%{public}@ Loading next play activity flush event to fire on %{public}@";
          goto LABEL_27;
        }
        *(void *)(v25 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
        id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_29;
        }
      }
      else
      {
        __int16 v21 = *(void **)(a1 + 32);
        if (v21)
        {
          *(double *)(*(void *)(a1 + 40) + 4_Block_object_dispose(&STACK[0x250], 8) = xpc_dictionary_get_double(v21, "CloudPlayActivityListenerNextFlushPlayActivityFireDateKey");
          xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 32));
          id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_29;
          }
          uint64_t v22 = *(void *)(a1 + 40);
          int v13 = +[NSDate dateWithTimeIntervalSince1970:*(double *)(v22 + 48)];
          int v30 = 138543618;
          uint64_t v31 = v22;
          __int16 v32 = 2114;
          id v33 = v13;
          id v23 = "%{public}@ Setting criteria to fire the next play activity event on %{public}@";
          goto LABEL_27;
        }
        *(void *)(*(void *)(a1 + 40) + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
        id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_29;
        }
      }
      uint64_t v27 = *(void *)(a1 + 40);
      __int16 v28 = *(void **)(v27 + 48);
      int v30 = 138543618;
      uint64_t v31 = v27;
      __int16 v32 = 2048;
      id v33 = v28;
      id v18 = "%{public}@ Loading default nextFlushPlayActivityFireSyncInterval to %f";
      __int16 v19 = v11;
      uint32_t v20 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v30, v20);
    goto LABEL_29;
  }
  uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    int v30 = 138543362;
    uint64_t v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ starting xpc activity to flush play activity events", (uint8_t *)&v30, 0xCu);
  }

  [*(id *)(a1 + 40) flushPendingPlayActivityEventsWithCompletionHandler:0];
  *(void *)(*(void *)(a1 + 40) + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
LABEL_30:
  *(void *)(*(void *)(a1 + 40) + 56) = 0;
}

void sub_1000CABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CABD0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = v6;
  if (v5 && !v6)
  {
    double v8 = [v5 numberForBagKey:@"play-activity-feed-post-frequency"];
    id v9 = v8;
    if (v8)
    {
      [v8 doubleValue];
      *(void *)(*(void *)(a1[6] + 8) + 24) = v10;
      id v11 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = a1[4];
        uint64_t v13 = *(void *)(*(void *)(a1[6] + 8) + 24);
        int v19 = 138543618;
        uint64_t v20 = v12;
        __int16 v21 = 2048;
        uint64_t v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ Found postFrequency %f from bag", (uint8_t *)&v19, 0x16u);
      }
    }
  }
  uint64_t v14 = *(void *)(a1[6] + 8);
  if (*(double *)(v14 + 24) == 0.0)
  {
    *(void *)(v14 + 24) = 0x408C200000000000;
    uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = a1[4];
      uint64_t v17 = *(void *)(*(void *)(a1[6] + 8) + 24);
      int v19 = 138543618;
      uint64_t v20 = v16;
      __int16 v21 = 2048;
      uint64_t v22 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ Did not find postFrequency from bag using default value (%f)", (uint8_t *)&v19, 0x16u);
    }
  }
  uint64_t v18 = a1[5];
  if (v18) {
    (*(void (**)(double))(v18 + 16))(*(double *)(*(void *)(a1[6] + 8) + 24));
  }
}

void sub_1000CAED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAEFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000CAF0C(uint64_t a1)
{
}

id sub_1000CAF14(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = *(void *)(a1[5] + 8) + 24;
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  id v4 = [v1 hasPendingPlayActivityEvents:v2 returningError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

void sub_1000CB038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "msv_errorByRemovingUnsafeUserInfo");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000CB3C8(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ connection from pid %i was interrupted", (uint8_t *)&v5, 0x12u);
  }
}

void sub_1000CB48C(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ connection from pid %i was invalidated", (uint8_t *)&v5, 0x12u);
  }
}

void sub_1000CB890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

BOOL sub_1000CB8C4(uint64_t a1)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v17 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void *)(*((void *)&v16 + 1) + 8 * v6);
      int v8 = *(void **)(a1 + 40);
      uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
      id obj = *(id *)(v9 + 40);
      unsigned __int8 v10 = [v8 insertPlayActivityEvent:v7 returningError:&obj];
      objc_storeStrong((id *)(v9 + 40), obj);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    return 1;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
    return 0;
  }
  uint64_t v12 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  return *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != 0;
}

void sub_1000CBA7C(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000CBAF4;
  v4[3] = &unk_1001BCD38;
  void v4[4] = v2;
  *(double *)&v4[5] = a2;
  dispatch_async(v3, v4);
}

uint64_t sub_1000CBAF4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _criteriaDictionaryWithPostFrequency:*(double *)(a1 + 40)];
  if (v2) {
    [*(id *)(a1 + 32) _scheduleNextPlayActivityFlushOperationWithCriteria:v2];
  }

  return _objc_release_x1();
}

void sub_1000CBD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CBD30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained error];
  id v4 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v15 = v5;
    __int16 v16 = 2114;
    long long v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ finished flushing play activity events with error %{public}@", buf, 0x16u);
  }

  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000CBEF4;
    block[3] = &unk_1001BEC48;
    id v13 = v6;
    id v12 = v3;
    dispatch_async(v7, block);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(NSObject **)(v8 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000CBF50;
  v10[3] = &unk_1001BEC20;
  void v10[4] = v8;
  dispatch_async(v9, v10);
}

void sub_1000CBEF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "msv_errorByRemovingUnsafeUserInfo");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_1000CBF50(uint64_t a1)
{
  --*(void *)(*(void *)(a1 + 32) + 40);
  id result = [*(id *)(a1 + 32) hasPendingPlayEvents];
  if (result && !*(void *)(*(void *)(a1 + 32) + 40))
  {
    id v3 = os_log_create("com.apple.amp.itunescloudd", "PlayActivity");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ Have pending play activity events to flush", buf, 0xCu);
    }

    uint64_t v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000CC080;
    v6[3] = &unk_1001BCD60;
    void v6[4] = v5;
    return [v5 _timeIntervalForNextFlushOperationWithReplyBlock:v6];
  }
  return result;
}

void sub_1000CC080(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000CC0F8;
  v4[3] = &unk_1001BCD38;
  void v4[4] = v2;
  *(double *)&v4[5] = a2;
  dispatch_async(v3, v4);
}

uint64_t sub_1000CC0F8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _criteriaDictionaryWithPostFrequency:*(double *)(a1 + 40)];
  if (v2) {
    [*(id *)(a1 + 32) _scheduleNextPlayActivityFlushOperationWithCriteria:v2];
  }

  return _objc_release_x1();
}

void sub_1000CC538(id a1)
{
  qword_1001F3958 = [[ICPlayActivityServer alloc] _init];

  _objc_release_x1();
}

void sub_1000CC81C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = objc_alloc((Class)ICAsyncBlockOperation);
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    uint64_t v15 = sub_1000CC9B8;
    __int16 v16 = &unk_1001BCFC8;
    long long v17 = *(id *)(a1 + 40);
    char v20 = *(unsigned char *)(a1 + 48);
    id v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    id v18 = v8;
    uint64_t v19 = v9;
    id v10 = [v7 initWithStartHandler:&v13];
    objc_msgSend(v10, "setName:", @"com.apple.itunescloudd.enhancedAudioSharedKeyRefreshOperation", v13, v14, v15, v16);
    [*(id *)(*(void *)(a1 + 32) + 8) addOperation:v10];

    id v11 = v17;
  }
  else
  {
    id v11 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v22 = v12;
      __int16 v23 = 2114;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch the bag. err=%{public}@", buf, 0x16u);
    }
  }
}

void sub_1000CC9B8(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v3 = [objc_alloc((Class)ICContentKeySession) initWithRequestContext:*(void *)(a1 + 32)];
  [v3 setBypassCache:*(unsigned __int8 *)(a1 + 56)];
  [v3 setRequestOfflineKeys:1];
  [v3 setAdamID:&off_1001CC248];
  [v3 setKeyServerProtocolType:1];
  uint64_t v4 = a1;
  [*(id *)(a1 + 40) enhancedAudioConfiguration];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v15 = v20 = 0u;
  id v5 = [v15 prefetchSKDs];
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        id v11 = os_log_create("com.apple.amp.itunescloudd", "Default");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(v4 + 48);
          *(_DWORD *)long long buf = 138543618;
          uint64_t v22 = v12;
          __int16 v23 = 2114;
          uint64_t v24 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ Requesting refresh for key %{public}@", buf, 0x16u);
        }

        [v3 processKeyWithIdentifier:v10];
      }
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v7);
  }

  [v3 waitForAllKeysToProcess];
  id v13 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(v4 + 48);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished refreshing offline HLS keys", buf, 0xCu);
  }

  [v16 finishWithError:0];
}

void sub_1000CCC64(id a1, ICStoreRequestContext *a2)
{
  uint64_t v2 = a2;
  [(ICStoreRequestContext *)v2 setAllowsExpiredBags:1];
  id v3 = +[ICUserIdentity activeAccount];
  [(ICStoreRequestContext *)v2 setIdentity:v3];

  uint64_t v4 = +[ICUserIdentityStore defaultIdentityStore];
  [(ICStoreRequestContext *)v2 setIdentityStore:v4];

  id v5 = +[ICClientInfo defaultInfo];
  [(ICStoreRequestContext *)v2 setClientInfo:v5];

  id v6 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [(ICStoreRequestContext *)v2 setAuthenticationProvider:v6];
}

void sub_1000CCDD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ Processing pending key invalidations", buf, 0xCu);
  }

  id v6 = [*(id *)(a1 + 32) _storeRequestContext];
  id v7 = [v6 copyWithBlock:&stru_1001BCF58];

  uint64_t v8 = +[ICURLBagProvider sharedBagProvider];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000CCF4C;
  v10[3] = &unk_1001BF210;
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v3;
  id v9 = v3;
  [v8 getBagForRequestContext:v7 withCompletionHandler:v10];
}

void sub_1000CCF4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v24 = v9;
      __int16 v25 = 2114;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch bag to obtain invalidation URLS. err=%{public}@", buf, 0x16u);
    }

    [*(id *)(a1 + 40) finishWithError:v6];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Stopping key session for keys", buf, 0xCu);
    }

    id v11 = +[ICContentKeySession pendingInvalidationKeyStorePath];
    id v12 = [objc_alloc((Class)ICFileContentKeyStore) initWithPath:v11];
    id v13 = objc_alloc((Class)ICContentKeySession);
    uint64_t v14 = [*(id *)(a1 + 32) _storeRequestContext];
    id v15 = [v13 initWithRequestContext:v14 keyStore:v12];

    [v15 setKeyServerProtocolType:2];
    id v16 = [v5 urlForBagKey:ICURLBagKeyPodcastsLicenseOfflineStop];
    [v15 setOfflineLeaseStopURL:v16];

    long long v17 = [v5 urlForBagKey:ICURLBagKeyPodcastsLicenseOfflineStopNonce];
    [v15 setOfflineLeaseStopNonceURL:v17];

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000CD1E8;
    void v20[3] = &unk_1001BE0B0;
    long long v18 = *(void **)(a1 + 40);
    void v20[4] = *(void *)(a1 + 32);
    id v21 = v12;
    id v22 = v18;
    id v19 = v12;
    [v15 stopSessionInvalidatingKeys:1 withCompletion:v20];
  }
}

void sub_1000CD1E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "Default");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = objc_msgSend(v3, "msv_description");
      *(_DWORD *)long long buf = 138543618;
      uint64_t v12 = v6;
      __int16 v13 = 2114;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ Finished Invalidating offline keys error=%{public}@", buf, 0x16u);
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000CD388;
    v10[3] = &unk_1001BCF80;
    uint64_t v8 = *(void **)(a1 + 40);
    void v10[4] = *(void *)(a1 + 32);
    [v8 enumerateKeyEntriesUsingBlock:v10];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished Invalidating offline keys", buf, 0xCu);
    }
  }
  [*(id *)(a1 + 48) finishWithError:v3];
}

void sub_1000CD388(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MSVAutoBugCaptureDomainiTunesCloud;
  id v5 = [v3 identifier];
  uint64_t v6 = [v3 adamID];
  id v7 = +[NSString stringWithFormat:@"Failed to invalidate key '%@', adamID %@", v5, v6];
  +[MSVAutoBugCapture snapshotWithDomain:v4 type:@"Bug" subType:@"Key Management" context:v7 triggerThresholdValues:&stru_1001BF9F0 events:0 completion:0];

  uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = [v3 identifier];
    id v11 = [v3 adamID];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v13 = v9;
    __int16 v14 = 2114;
    id v15 = v10;
    __int16 v16 = 2114;
    long long v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Failed to invalidate key '%{public}@', adamID=%{public}@", buf, 0x20u);
  }
}

void sub_1000CD52C(id a1, ICStoreRequestContext *a2)
{
  uint64_t v2 = a2;
  id v3 = [objc_alloc((Class)ICClientInfo) initWithSystemApplicationType:3];
  [(ICStoreRequestContext *)v2 setClientInfo:v3];
}

void sub_1000CD8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Block_object_dispose((const void *)(v16 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000CD934(uint64_t a1)
{
  uint64_t v2 = +[ML3BitMaskPredicate predicateWithProperty:ML3TrackPropertyMediaType mask:1032 value:8];
  v16[0] = v2;
  id v3 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyHasNonPurgeableAsset equalToInteger:1];
  v16[1] = v3;
  uint64_t v4 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyHLSAssetTraits value:&off_1001CC248 comparison:2];
  void v16[2] = v4;
  id v5 = +[NSArray arrayWithObjects:v16 count:3];
  uint64_t v6 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v5];

  id v7 = +[ML3Track unrestrictedAllItemsQueryWithlibrary:*(void *)(a1 + 32) predicate:v6 orderingTerms:0];
  v15[0] = ML3TrackPropertyFilePath;
  v15[1] = ML3TrackPropertyTitle;
  v15[2] = ML3TrackPropertyAssetStoreItemID;
  v15[3] = ML3TrackPropertySubscriptionStoreItemID;
  uint64_t v8 = +[NSArray arrayWithObjects:v15 count:4];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000CE114;
  void v12[3] = &unk_1001BCE78;
  void v12[4] = *(void *)(a1 + 40);
  id v13 = v8;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v11;
  long long v14 = v11;
  id v10 = v8;
  [v7 enumeratePersistentIDsAndProperties:v10 usingBlock:v12];
}

void sub_1000CDB70(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000CDC14;
  v2[3] = &unk_1001BCEF0;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  [v1 enumerateKeysAndObjectsUsingBlock:v2];
  objc_destroyWeak(&v3);
}

void sub_1000CDC00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDC14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = [v6 objectForKeyedSubscript:ML3TrackPropertyFilePath];
  id v9 = [v6 objectForKeyedSubscript:ML3TrackPropertyTitle];
  id v10 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:v8];
  long long v11 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543874;
    id v30 = WeakRetained;
    __int16 v31 = 2114;
    __int16 v32 = v9;
    __int16 v33 = 2114;
    id v34 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ Fetching missing offline key for track '%{public}@' (%{public}@)", buf, 0x20u);
  }

  id v12 = objc_alloc((Class)ICAsyncBlockOperation);
  long long v20 = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472;
  id v22 = sub_1000CDE78;
  __int16 v23 = &unk_1001BCEC8;
  id v24 = WeakRetained;
  id v25 = v6;
  id v26 = v9;
  id v27 = v5;
  id v28 = v10;
  id v13 = v10;
  id v14 = v5;
  id v15 = v9;
  id v16 = v6;
  long long v17 = (id *)WeakRetained;
  id v18 = [v12 initWithStartHandler:&v20];
  id v19 = +[NSString stringWithFormat:@"com.apple.itunescloudd.enhancedAudioOfflineKeyFetchOperation.%@]", v14, v20, v21, v22, v23];
  [v18 setName:v19];

  [v17[1] addOperation:v18];
}

void sub_1000CDE78(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 _storeRequestContext];
  id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:ML3TrackPropertyAssetStoreItemID];
  if (![v6 longLongValue])
  {
    uint64_t v7 = [*(id *)(a1 + 40) objectForKeyedSubscript:ML3TrackPropertySubscriptionStoreItemID];

    id v6 = (void *)v7;
  }
  uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    int v21 = 138543874;
    uint64_t v22 = v9;
    __int16 v23 = 2114;
    uint64_t v24 = v10;
    __int16 v25 = 2114;
    uint64_t v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Fetching offline key for track '%{public}@' (%{public}@)", (uint8_t *)&v21, 0x20u);
  }

  id v12 = [objc_alloc((Class)ICFileContentKeyStore) initWithPath:*(void *)(a1 + 64)];
  id v13 = [objc_alloc((Class)ICContentKeySession) initWithRequestContext:v5 keyStore:v12];
  [v13 setAdamID:v6];
  [v13 setRequestOfflineKeys:1];
  [v13 setKeyServerProtocolType:1];
  id v14 = +[NSURL fileURLWithPath:*(void *)(a1 + 64)];
  id v15 = +[AVURLAsset URLAssetWithURL:v14 options:0];

  [v13 addAsset:v15 shouldPreloadKeys:1 waitForKeyIdentifiers:1];
  [v13 waitForAllKeysToProcess];
  id v16 = os_log_create("com.apple.amp.itunescloudd", "Default");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 64);
    int v21 = 138544130;
    uint64_t v22 = v17;
    __int16 v23 = 2114;
    uint64_t v24 = v18;
    __int16 v25 = 2114;
    uint64_t v26 = v19;
    __int16 v27 = 2114;
    uint64_t v28 = v20;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished  track %{public}@ because the file '%{public}@' (%{public}@) isn't HLS", (uint8_t *)&v21, 0x2Au);
  }

  [v4 finishWithError:0];
}

void sub_1000CE114(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v26 = a2;
  id v5 = *a3;
  id v6 = a3[1];
  uint64_t v7 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:v5];
  char v35 = 1;
  uint64_t v8 = +[NSFileManager defaultManager];
  unsigned __int8 v9 = [v8 fileExistsAtPath:v7 isDirectory:&v35];
  if (v35) {
    unsigned __int8 v10 = v9;
  }
  else {
    unsigned __int8 v10 = 0;
  }

  if (v10)
  {
    uint64_t v11 = [v7 pathExtension];
    id v12 = ML3OfflineHLSFileExtensions();
    unsigned __int8 v13 = [v12 containsObject:v11];

    if (v13)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      os_log_t v14 = (os_log_t)[objc_alloc((Class)ICFileContentKeyStore) initWithPath:v7];
      *(void *)id v42 = 0;
      *(void *)&v42[8] = v42;
      *(void *)&v42[16] = 0x2020000000;
      LOBYTE(v43) = 1;
      __int16 v27 = _NSConcreteStackBlock;
      uint64_t v28 = 3221225472;
      uint64_t v29 = sub_1000CE564;
      id v30 = &unk_1001BCE50;
      uint64_t v15 = *(void *)(a1 + 32);
      __int16 v33 = v42;
      uint64_t v31 = v15;
      id v16 = v6;
      id v32 = v16;
      uint64_t v34 = v26;
      [v14 enumerateKeyEntriesUsingBlock:&v27];
      if (*(unsigned char *)(*(void *)&v42[8] + 24))
      {
        uint64_t v17 = os_log_create("com.apple.amp.itunescloudd", "Default");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543874;
          uint64_t v37 = v18;
          __int16 v38 = 2114;
          id v39 = v16;
          __int16 v40 = 2048;
          uint64_t v41 = v26;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@ Found track missing offline key: '%{public}@' (%lld)", buf, 0x20u);
        }

        uint64_t v19 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [*(id *)(a1 + 40) count]);
        for (unint64_t i = 0; i < (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count", v26, v27, v28, v29, v30, v31); ++i)
        {
          int v21 = [*(id *)(a1 + 40) objectAtIndexedSubscript:i];
          [v19 setObject:a3[i] forKey:v21];
        }
        uint64_t v24 = *(void **)(a1 + 48);
        __int16 v25 = +[NSNumber numberWithLongLong:v26];
        [v24 setObject:v19 forKey:v25];
      }
      _Block_object_dispose(v42, 8);
    }
    else
    {
      os_log_t v14 = os_log_create("com.apple.amp.itunescloudd", "Default");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        *(_DWORD *)id v42 = 138544130;
        *(void *)&v42[4] = v23;
        *(_WORD *)&v42[12] = 2114;
        *(void *)&v42[14] = v6;
        *(_WORD *)&v42[22] = 2048;
        uint64_t v43 = v26;
        __int16 v44 = 2114;
        id v45 = v7;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ Skipping track '%{public}@' (%llu) because the file '%{public}@' isn't HLS", v42, 0x2Au);
      }
    }
  }
  else
  {
    uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)id v42 = 138544130;
      *(void *)&v42[4] = v22;
      *(_WORD *)&v42[12] = 2114;
      *(void *)&v42[14] = v6;
      *(_WORD *)&v42[22] = 2048;
      uint64_t v43 = v26;
      __int16 v44 = 2114;
      id v45 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ Skipping track '%{public}@' (%llu) because the asset file '%{public}@' doesn't exist or is not a directory", v42, 0x2Au);
    }
  }
}

void sub_1000CE538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CE564(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 keyData];

  if (v4)
  {
LABEL_6:
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
    goto LABEL_7;
  }
  if ((unint64_t)[v3 failureCount] >= 5)
  {
    id v5 = os_log_create("com.apple.amp.itunescloudd", "Default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = a1[5];
      uint64_t v8 = a1[7];
      int v9 = 138544130;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint64_t v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = v8;
      __int16 v15 = 2048;
      id v16 = [v3 failureCount];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Skipping track '%{public}@' (%llu) because the failure count of %lu exceeds the retry limit", (uint8_t *)&v9, 0x2Au);
    }

    goto LABEL_6;
  }
LABEL_7:
}

void sub_1000CF150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF178(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000CF188(uint64_t a1)
{
}

void sub_1000CF190(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  uint64_t v7 = [v9 libraryUID];
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_1000D05EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0618(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D0628(uint64_t a1)
{
}

void sub_1000D0630(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "SDK");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = (objc_class *)objc_opt_class();
    id v9 = NSStringFromClass(v8);
    id v10 = [v5 responseCode];
    __int16 v11 = [v5 responseData];
    int v16 = 138544386;
    id v17 = v9;
    __int16 v18 = 2048;
    id v19 = v5;
    __int16 v20 = 2048;
    id v21 = v10;
    __int16 v22 = 2048;
    id v23 = [v11 length];
    __int16 v24 = 1024;
    unsigned int v25 = [v5 responseCode];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Books ItemsRequest retrieved a response: <%{public}@: %p code=%ld, length=%{bytes}lu> -- Code: %d", (uint8_t *)&v16, 0x30u);
  }
  if (v6)
  {
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "SDK");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v16 = 138543362;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Books ItemsRequest failed with error: %{public}@", (uint8_t *)&v16, 0xCu);
    }
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v5;
  id v15 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000D0948(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(v3, "setIdentity:");
  }
  else
  {
    id v4 = +[ICUserIdentity activeAccount];
    [v7 setIdentity:v4];
  }
  if (*(void *)(a1 + 40))
  {
    objc_msgSend(v7, "setClientInfo:");
  }
  else
  {
    id v5 = +[ICClientInfo defaultInfo];
    [v7 setClientInfo:v5];
  }
  id v6 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v7 setAuthenticationProvider:v6];

  [v7 setAllowsExpiredBags:1];
}

void sub_1000D0B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D0BB0(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D0C3C;
    block[3] = &unk_1001BEC20;
    void block[4] = v2;
    dispatch_barrier_async(v3, block);
  }
}

id sub_1000D0C3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkForRecentRevocations];
}

void sub_1000D0EE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = v3;
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(v3, "setIdentity:");
  }
  else
  {
    id v4 = +[ICUserIdentity activeAccount];
    [v10 setIdentity:v4];
  }
  id v5 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v10 setAuthenticationProvider:v5];

  [v10 setAllowsExpiredBags:1];
  [v10 setPersonalizationStyle:2];
  id v6 = +[ICClientInfo defaultInfo];
  id v7 = [v6 mutableCopy];

  if (*(void *)(a1 + 40))
  {
    id v8 = [objc_alloc((Class)ICClientInfo) initWithBundleIdentifier:*(void *)(a1 + 40)];
    [v7 setRequestingBundleIdentifier:*(void *)(a1 + 40)];
    id v9 = [v8 clientVersion];
    [v7 setRequestingBundleVersion:v9];
  }
  [v10 setClientInfo:v7];
}

void sub_1000D1204(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = a2;
    id v5 = +[NSSet setWithObject:v3];
    [v2 _registerFailureToRevokeMusicUserTokensForApplicationsWithIdentifiers:v5 error:v4];
  }
}

void sub_1000D145C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 urlForBagKey:ICURLBagKeyRevokeMusicUserTokenURL];
  if (v6)
  {
    id v7 = +[NSMutableURLRequest requestWithURL:v6];
    [v7 setHTTPMethod:@"POST"];
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    id v9 = [*(id *)(a1 + 48) deviceInfo];
    id v10 = [v9 deviceGUID];

    if (v10) {
      [v8 setObject:v10 forKey:@"guid"];
    }
    __int16 v11 = +[NSJSONSerialization dataWithJSONObject:v8 options:0 error:0];
    if (v11)
    {
      [v7 setHTTPBody:v11];
      [v7 setValue:ICHTTPHeaderContentTypeJSON forHTTPHeaderField:ICHTTPHeaderKeyContentType];
    }
    id v12 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v7 requestContext:*(void *)(a1 + 48)];
    uint64_t v13 = +[ICURLSessionManager defaultSession];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1000D1750;
    v17[3] = &unk_1001BD6D8;
    uint64_t v14 = *(void **)(a1 + 40);
    void v17[4] = *(void *)(a1 + 32);
    id v18 = v14;
    id v19 = *(id *)(a1 + 56);
    id v20 = *(id *)(a1 + 64);
    [v13 enqueueDataRequest:v12 withCompletionHandler:v17];
  }
  else
  {
    if (v5)
    {
      id v15 = v5;
    }
    else
    {
      id v15 = +[NSError errorWithDomain:ICErrorDomain code:-7201 userInfo:0];
    }
    id v7 = v15;
    int v16 = os_log_create("com.apple.amp.itunescloudd", "SDK");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      __int16 v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to load revocation url from bag. err=%{public}@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _registerFailureToRevokeMusicUserTokensForApplicationIdentifier:*(void *)(a1 + 40) error:v7];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_1000D1750(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = os_log_create("com.apple.amp.itunescloudd", "Default");
  id v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      id v10 = objc_msgSend(v4, "msv_description");
      int v14 = 138544130;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      uint64_t v19 = v9;
      __int16 v20 = 2114;
      id v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Completed revocation of music kit user tokens for application '%{public}@' and user identity %{public}@ error=%{public}@", (uint8_t *)&v14, 0x2Au);
    }
    [*(id *)(a1 + 32) _registerFailureToRevokeMusicUserTokensForApplicationIdentifier:*(void *)(a1 + 40) error:v4];
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      int v14 = 138543874;
      uint64_t v15 = v11;
      __int16 v16 = 2114;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ Completed revocation of music kit user tokens for application '%{public}@' and user identity %{public}@", (uint8_t *)&v14, 0x20u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000D1F3C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  objc_msgSend(a2, "msv_errorByRemovingUnsafeUserInfo");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000D2524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1000D2564(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  id v7 = [v2 objectForKeyedSubscript:v3];

  if (!v7)
  {
    id v7 = +[NSMutableArray array];
    id v4 = *(void **)(*(void *)(a1 + 32) + 40);
    id v5 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
    [v4 setObject:v7 forKeyedSubscript:v5];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  id v6 = objc_retainBlock(*(id *)(a1 + 40));
  [v7 addObject:v6];
}

void sub_1000D2658(uint64_t a1)
{
  AnalyticsSendEvent();
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000D2724;
  v6[3] = &unk_1001BD0B0;
  id v7 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  int v10 = *(_DWORD *)(a1 + 64);
  [v2 _displayNotificationForBuilder:v3 withReplyBlock:v6];
}

void sub_1000D2724(uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = a1;
  id v4 = a3;
  uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "SDK");
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(v18 + 32);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "User accepted to renew premissions for all expired bundle identifiers %{public}@", (uint8_t *)&buf, 0xCu);
    }

    TCCExpirationResetService();
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id obj = *(id *)(v18 + 32);
    id v8 = (char *)[obj countByEnumeratingWithState:&v26 objects:v38 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v27;
      do
      {
        int v10 = 0;
        do
        {
          if (*(void *)v27 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v36 = kTCCSetNoKill;
          uint64_t v37 = &__kCFBooleanTrue;
          +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1, v18);
          TCCAccessSetForBundleIdWithOptions();
          ++v10;
        }
        while (v8 != v10);
        id v8 = (char *)[obj countByEnumeratingWithState:&v26 objects:v38 count:16];
      }
      while (v8);
    }
  }
  else
  {
    if (v6)
    {
      uint64_t v11 = *(void *)(v18 + 40);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "User rejected to renew premissions for all expired bundle identifiers, resetting for %{public}@", (uint8_t *)&buf, 0xCu);
    }

    TCCExpirationResetServiceForBundleIdentifier();
  }
  AnalyticsSendEvent();
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v32 = 0x3032000000;
  __int16 v33 = sub_1000D2AF8;
  uint64_t v34 = sub_1000D2B08;
  id v35 = 0;
  uint64_t v12 = *(void *)(v18 + 48);
  uint64_t v13 = *(NSObject **)(v12 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D2B10;
  block[3] = &unk_1001BD088;
  void block[4] = v12;
  void block[5] = &buf;
  int v25 = *(_DWORD *)(v18 + 56);
  dispatch_barrier_sync(v13, block);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v14 = *(id *)(*((void *)&buf + 1) + 40);
  id v15 = [v14 countByEnumeratingWithState:&v20 objects:v30 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v21;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v21 != v16) {
          objc_enumerationMutation(v14);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v20 + 1) + 8 * (void)v17) + 16))();
        uint64_t v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v15 = [v14 countByEnumeratingWithState:&v20 objects:v30 count:16];
    }
    while (v15);
  }

  _Block_object_dispose(&buf, 8);
}

void sub_1000D2AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t sub_1000D2AF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D2B08(uint64_t a1)
{
}

void sub_1000D2B10(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 40);
  id v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  [v7 setObject:0 forKeyedSubscript:v8];
}

void sub_1000D2DA8(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543874;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    __int16 v9 = 2114;
    CFStringRef v10 = @"com.apple.itunescloudd.tcchelper";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ connection from pid %i was interrupted for service %{public}@.", (uint8_t *)&v5, 0x1Cu);
  }
}

void sub_1000D2E80(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "XPC");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543874;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    __int16 v9 = 2114;
    CFStringRef v10 = @"com.apple.itunescloudd.tcchelper";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ connection from pid %i was invalidated for service %{public}@.", (uint8_t *)&v5, 0x1Cu);
  }
}

id sub_1000D2FCC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopObservingRevocations];
}

id sub_1000D3048(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startObservingRevocations];
}

id sub_1000D30E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopObservingRevocations];
}

void sub_1000D33F0(id a1)
{
  qword_1001F3960 = [[MediaLibraryAccessRevocationController alloc] _init];

  _objc_release_x1();
}

void sub_1000D39C0(_Unwind_Exception *a1)
{
}

id sub_1000D3B84(uint64_t a1)
{
  [*(id *)(a1 + 32) _savePendingChanges:0];
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D3C48;
    block[3] = &unk_1001BEC70;
    id v6 = v2;
    dispatch_async(v3, block);
  }
  return [*(id *)(a1 + 40) endTransaction];
}

uint64_t sub_1000D3C48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D3E20(id *a1)
{
  uint64_t v2 = [a1[4] _pendingChanges];
  id v3 = [v2 count];
  int v4 = [(id)objc_opt_class() logCategory];
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (!v5) {
      goto LABEL_7;
    }
    id v6 = a1[4];
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v3;
    *(_WORD *)&unsigned char buf[22] = 2114;
    __int16 v40 = v2;
    __int16 v7 = "%{public}@ Processing %lu pending changes: %{public}@";
    int v8 = v4;
    uint32_t v9 = 32;
  }
  else
  {
    if (!v5) {
      goto LABEL_7;
    }
    id v10 = a1[4];
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v7 = "%{public}@  No pending changes to process.";
    int v8 = v4;
    uint32_t v9 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
LABEL_7:

  id v25 = [v2 mutableCopy];
  id v11 = objc_alloc_init((Class)NSOperationQueue);
  [v11 setName:@"com.apple.itunescloudd.CloudPendingChangesCoordinator.operationQueue"];
  [v11 setMaxConcurrentOperationCount:1];
  [v11 setQualityOfService:-1];
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2810000000;
  __int16 v40 = &unk_10017E44F;
  int v41 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = v2;
  id v12 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v12)
  {
    uint64_t v14 = *(void *)v31;
    *(void *)&long long v13 = 138543618;
    long long v23 = v13;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        uint64_t v17 = [(id)objc_opt_class() logCategory];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          id v18 = a1[4];
          *(_DWORD *)uint64_t v34 = v23;
          id v35 = v18;
          __int16 v36 = 2114;
          id v37 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@ Enqueueing pending change operation %{public}@", v34, 0x16u);
        }

        uint64_t v19 = [a1[5] underlyingConnection];
        [v16 setConnection:v19];

        objc_initWeak((id *)v34, v16);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        void v26[2] = sub_1000D42C8;
        v26[3] = &unk_1001BD150;
        objc_copyWeak(&v29, (id *)v34);
        long long v28 = buf;
        id v27 = v25;
        [v16 setCompletionBlock:v26];
        [v11 addOperation:v16];

        objc_destroyWeak(&v29);
        objc_destroyWeak((id *)v34);
      }
      id v12 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
    }
    while (v12);
  }

  [v11 waitUntilAllOperationsAreFinished];
  if ([v25 count])
  {
    long long v20 = [(id)objc_opt_class() logCategory];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = a1[4];
      id v22 = [v25 count];
      *(_DWORD *)uint64_t v34 = 138543618;
      id v35 = v21;
      __int16 v36 = 2048;
      id v37 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@ %lu pending changes failed again, persisting for another time.", v34, 0x16u);
    }
  }
  objc_msgSend(a1[4], "_savePendingChanges:", v25, v23);
  [a1[6] endTransaction];
  _Block_object_dispose(buf, 8);
}

void sub_1000D4274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1000D42C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained status] != (id)2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 40) + 8) + 32));
    [*(id *)(a1 + 32) removeObject:WeakRetained];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 40) + 8) + 32));
  }
}

void sub_1000D4500(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _pendingChanges];
  id v4 = [v2 mutableCopy];

  id v3 = v4;
  if (!v4) {
    id v3 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
  }
  id v5 = v3;
  [v3 addObject:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _savePendingChanges:v5];
  [*(id *)(a1 + 48) endTransaction];
}

id sub_1000D4804()
{
  v0 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  uint64_t v1 = [v0 lastObject];

  v6[0] = v1;
  v6[1] = @"com.apple.itunescloudd";
  uint64_t v2 = +[NSArray arrayWithObjects:v6 count:2];
  id v3 = +[NSString pathWithComponents:v2];

  if ([v3 length])
  {
    id v4 = v3;
  }
  else
  {
    +[NSException raise:NSInternalInconsistencyException format:@"unable to create cache directory"];
    id v4 = 0;
  }

  return v4;
}

id sub_1000D4924()
{
  v0 = sub_1000D4804();
  uint64_t v1 = [v0 stringByAppendingPathComponent:@"ArtworkDownloads"];

  return v1;
}

id sub_1000D4A70(uint64_t a1, void *a2)
{
  return [a2 writeString:*(void *)(*(void *)(a1 + 32) + 104) withCode:1634357319];
}

BOOL sub_1000D4EBC(void *a1, char a2, void *a3)
{
  id v5 = a1;
  uint64_t v57 = 0;
  __int16 v58 = &v57;
  uint64_t v59 = 0x2020000000;
  char v60 = 0;
  uint64_t v51 = 0;
  id v52 = &v51;
  uint64_t v53 = 0x3032000000;
  id v54 = sub_1000D54E4;
  __int16 v55 = sub_1000D54F4;
  id v56 = 0;
  id v6 = [v5 userIdentity];
  __int16 v7 = +[ML3MusicLibrary musicLibraryForUserAccount:v6];

  int v8 = [v7 sagaCloudLibraryCUID];
  uint32_t v9 = [v7 sagaCloudLibraryTroveID];
  if ([v8 length] && objc_msgSend(v9, "length"))
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device is already registered with CUID and TroveID", buf, 2u);
    }

    *((unsigned char *)v58 + 24) = 1;
  }
  if (!*((unsigned char *)v58 + 24))
  {
    id v11 = objc_alloc((Class)ICStoreRequestContext);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_1000D54FC;
    v48[3] = &unk_1001BD178;
    id v49 = v5;
    char v50 = a2;
    id v12 = [v11 initWithBlock:v48];
    *(void *)long long buf = 0;
    uint64_t v43 = buf;
    uint64_t v44 = 0x3032000000;
    id v45 = sub_1000D54E4;
    uint64_t v46 = sub_1000D54F4;
    id v47 = 0;
    dispatch_semaphore_t v13 = dispatch_semaphore_create(0);
    uint64_t v36 = 0;
    id v37 = &v36;
    uint64_t v38 = 0x3032000000;
    id v39 = sub_1000D54E4;
    __int16 v40 = sub_1000D54F4;
    id v41 = 0;
    uint64_t v14 = +[ICURLBagProvider sharedBagProvider];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1000D5604;
    void v32[3] = &unk_1001BD9F0;
    uint64_t v34 = &v36;
    id v35 = buf;
    id v15 = v13;
    long long v33 = v15;
    [v14 getBagForRequestContext:v12 withCompletionHandler:v32];

    dispatch_semaphore_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
    if (*((void *)v43 + 5))
    {
      uint64_t v16 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *((void *)v43 + 5);
        *(_DWORD *)long long v61 = 138543362;
        uint64_t v62 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to load url bag. err=%{public}@", v61, 0xCu);
      }
    }
    else
    {
      uint64_t v16 = [(id)v37[5] urlForBagKey:ICURLBagKeyCloudAddComputer];
      id v18 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
      BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if (v16)
      {
        if (v19)
        {
          *(_WORD *)long long v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Sending request to register device", v61, 2u);
        }

        dispatch_semaphore_t v20 = dispatch_semaphore_create(0);
        id v26 = [objc_alloc((Class)ICStoreURLRequest) initWithURL:v16 requestContext:v12];
        id v21 = +[ICURLSessionManager defaultSession];
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        void v27[2] = sub_1000D56A0;
        v27[3] = &unk_1001BD1A0;
        id v28 = v7;
        long long v30 = &v57;
        long long v31 = &v51;
        id v22 = v20;
        uint64_t v29 = v22;
        [v21 enqueueDataRequest:v26 withCompletionHandler:v27];

        dispatch_semaphore_wait(v22, 0xFFFFFFFFFFFFFFFFLL);
      }
      else
      {
        if (v19)
        {
          *(_WORD *)long long v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to register device because url bag is missing the 'cloud-add-computer' key", v61, 2u);
        }

        uint64_t v23 = +[NSError errorWithDomain:ICErrorDomain code:-7201 userInfo:0];
        id v22 = v52[5];
        void v52[5] = v23;
      }
    }
    _Block_object_dispose(&v36, 8);

    _Block_object_dispose(buf, 8);
  }
  if (a3) {
    *a3 = (id) v52[5];
  }
  BOOL v24 = *((unsigned char *)v58 + 24) != 0;

  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v57, 8);

  return v24;
}

void sub_1000D5484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 208), 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D54E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D54F4(uint64_t a1)
{
}

void sub_1000D54FC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 userIdentity];
  [v4 setIdentity:v5];

  id v6 = [*(id *)(a1 + 32) userIdentityStore];
  [v4 setIdentityStore:v6];

  __int16 v7 = +[ICClientInfo defaultInfo];
  [v4 setClientInfo:v7];

  id v8 = objc_alloc((Class)ICStoreURLResponseAuthenticationProvider);
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 1;
  }
  id v10 = [v8 initWithUserInteractionLevel:v9];
  [v4 setAuthenticationProvider:v10];

  id v11 = objc_alloc_init((Class)ICStoreDialogResponseHandler);
  [v4 setStoreDialogResponseHandler:v11];
}

void sub_1000D5604(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000D56A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 138543362;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to register device. err=%{public}@", (uint8_t *)&v18, 0xCu);
    }
  }
  else
  {
    uint64_t v7 = [v5 bodyData];
    id v8 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 134217984;
      id v19 = [v7 length];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received response (length = %{bytes}lu)", (uint8_t *)&v18, 0xCu);
    }

    uint64_t v9 = [v5 parsedBodyDictionary];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 138543362;
        id v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Register device response: %{public}@", (uint8_t *)&v18, 0xCu);
      }

      id v11 = [v9 objectForKey:@"cloud-info"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v12 = [v11 objectForKey:@"cuid"];
        dispatch_semaphore_t v13 = [v11 objectForKey:@"troveid"];
        if ([v12 length] && objc_msgSend(v13, "length"))
        {
          uint64_t v14 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = 138543618;
            id v19 = v12;
            __int16 v20 = 2114;
            id v21 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Successfully registered device (CUID: %{public}@, TroveID: %{public}@)", (uint8_t *)&v18, 0x16u);
          }

          [*(id *)(a1 + 32) setSagaCloudLibraryCUID:v12];
          [*(id *)(a1 + 32) setSagaCloudLibraryTroveID:v13];
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        }
      }
    }
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      uint64_t v15 = +[NSError ic_cloudClientErrorWithCode:2022 userInfo:0];
      uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000D59EC(int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  if (MSVDeviceOSIsInternalInstall())
  {
    uint64_t v69 = a3;
    id v73 = v16;
    id v17 = objc_alloc_init((Class)NSFileManager);
    int v18 = off_1001BD370[a1];
    id v19 = MSVMediaLoggingDirectory();
    v83[0] = v19;
    v83[1] = @"DaapDebugging";
    v83[2] = v18;
    __int16 v20 = +[NSArray arrayWithObjects:v83 count:3];
    id v21 = +[NSURL fileURLWithPathComponents:v20];

    uint64_t v22 = [v21 URLByAppendingPathComponent:@"Initial" isDirectory:1];
    uint64_t v23 = a2;
    BOOL v24 = (void *)v22;
    id v71 = v15;
    id v72 = v21;
    uint64_t v70 = v23;
    if (v23)
    {
      id v67 = v14;
      id v74 = +[NSMutableDictionary dictionary];
      v82[0] = NSURLIsDirectoryKey;
      v82[1] = NSURLCreationDateKey;
      id v25 = +[NSArray arrayWithObjects:v82 count:2];
      __int16 v68 = v17;
      id v26 = [v17 enumeratorAtURL:v21 includingPropertiesForKeys:v25 options:4 errorHandler:0];

      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      id v27 = v26;
      id v28 = [v27 countByEnumeratingWithState:&v77 objects:v81 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v78;
        do
        {
          for (unint64_t i = 0; i != v29; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v78 != v30) {
              objc_enumerationMutation(v27);
            }
            long long v32 = *(void **)(*((void *)&v77 + 1) + 8 * i);
            if ((objc_msgSend(v32, "ic_referencesSameFile:", v24) & 1) == 0)
            {
              id v76 = 0;
              unsigned int v33 = [v32 getResourceValue:&v76 forKey:NSURLIsDirectoryKey error:0];
              id v34 = v76;
              id v35 = v34;
              if (v33 && [v34 BOOLValue])
              {
                id v75 = 0;
                unsigned __int8 v36 = [v32 getResourceValue:&v75 forKey:NSURLCreationDateKey error:0];
                id v37 = v75;
                if ((v36 & 1) == 0)
                {
                  uint64_t v38 = +[NSDate distantPast];

                  id v37 = (id)v38;
                }
                [v74 setObject:v32 forKey:v37];
              }
            }
          }
          id v29 = [v27 countByEnumeratingWithState:&v77 objects:v81 count:16];
        }
        while (v29);
      }

      id v39 = v74;
      __int16 v40 = v72;
      if ((unint64_t)[v74 count] >= 4)
      {
        id v41 = [v74 allKeys];
        id v42 = [v41 sortedArrayUsingComparator:&stru_1001BD1E0];

        if ([v42 count] != (id)3)
        {
          uint64_t v43 = 0;
          do
          {
            uint64_t v44 = [v42 objectAtIndex:v43];
            id v45 = [v74 objectForKey:v44];

            [v68 removeItemAtURL:v45 error:0];
            ++v43;
          }
          while (v43 < (char *)[v42 count] - 3);
        }

        id v39 = v74;
        __int16 v40 = v72;
      }
      uint64_t v46 = &ML3TrackPropertyLyrics_ptr;
      id v47 = +[NSString stringWithFormat:@"Revision_%u_to_%u", v70, v69];
      id v48 = [v40 URLByAppendingPathComponent:v47 isDirectory:1];

      id v14 = v67;
      id v17 = v68;
    }
    else
    {
      [v17 removeItemAtURL:v21 error:0];
      id v48 = v24;
      uint64_t v46 = &ML3TrackPropertyLyrics_ptr;
    }
    [v17 createDirectoryAtURL:v48 withIntermediateDirectories:1 attributes:0 error:0];
    if ([v13 count])
    {
      unint64_t v49 = 0;
      do
      {
        char v50 = [v13 objectAtIndex:v49];
        uint64_t v51 = +[NSString stringWithFormat:@"track_data_%lu.daap", ++v49];
        id v52 = [v48 URLByAppendingPathComponent:v51 isDirectory:0];

        uint64_t v46 = &ML3TrackPropertyLyrics_ptr;
        [v17 copyItemAtURL:v50 toURL:v52 error:0];
      }
      while (v49 < (unint64_t)[v13 count]);
    }
    if ([v14 count])
    {
      unint64_t v53 = 0;
      do
      {
        id v54 = [v14 objectAtIndex:v53];
        __int16 v55 = +[NSString stringWithFormat:@"playlist_data_%lu.daap", ++v53];
        id v56 = [v48 URLByAppendingPathComponent:v55 isDirectory:0];

        uint64_t v46 = &ML3TrackPropertyLyrics_ptr;
        [v17 copyItemAtURL:v54 toURL:v56 error:0];
      }
      while (v53 < (unint64_t)[v14 count]);
    }
    uint64_t v57 = v71;
    if (_os_feature_enabled_impl())
    {
      __int16 v58 = v73;
      if ([v73 count])
      {
        unint64_t v59 = 0;
        do
        {
          char v60 = [v58 objectAtIndex:v59];
          long long v61 = +[NSString stringWithFormat:@"album_data_%lu.daap", ++v59];
          uint64_t v62 = [v48 URLByAppendingPathComponent:v61 isDirectory:0];

          uint64_t v46 = &ML3TrackPropertyLyrics_ptr;
          [v17 copyItemAtURL:v60 toURL:v62 error:0];

          __int16 v58 = v73;
        }
        while (v59 < (unint64_t)[v73 count]);
      }
      uint64_t v57 = v71;
      if ([v71 count])
      {
        unint64_t v63 = 0;
        do
        {
          double v64 = [v71 objectAtIndex:v63];
          uint64_t v65 = objc_msgSend(v46[250], "stringWithFormat:", @"artist_data_%lu.daap", ++v63);
          __int16 v66 = [v48 URLByAppendingPathComponent:v65 isDirectory:0];

          uint64_t v46 = &ML3TrackPropertyLyrics_ptr;
          [v17 copyItemAtURL:v64 toURL:v66 error:0];
        }
        while (v63 < (unint64_t)[v71 count]);
      }
    }

    id v16 = v73;
    id v15 = v57;
  }
}

int64_t sub_1000D60DC(id a1, NSDate *a2, NSDate *a3)
{
  return [(NSDate *)a2 compare:a3];
}

int64_t sub_1000D60E4(id a1, NSDate *a2, NSDate *a3)
{
  return [(NSDate *)a2 compare:a3];
}

uint64_t sub_1000D60EC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D6100(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
  id v4 = a2;
  id v5 = +[NSNumber numberWithBool:v3];
  [v4 setMergeToCloudLibraryPreference:v5];

  id v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 32);
    v8[0] = 67109120;
    v8[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updating mergeToICMLPreference to %d for activeLockerAccount", (uint8_t *)v8, 8u);
  }
}

void sub_1000D61F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id v6 = dispatch_get_global_queue(0, 0);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1000D62D8;
    v7[3] = &unk_1001BEC48;
    id v9 = v5;
    id v8 = v4;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_1000D62C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000D62D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D62EC(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v25 = a2;
  id v8 = a4;
  id v9 = [v7 userIdentityStore];
  id v10 = [v7 userIdentity];
  BOOL v24 = +[NSDate date];
  id v49 = 0;
  id v11 = [v9 getPropertiesForUserIdentity:v10 error:&v49];
  id v12 = v49;
  if (!v12 && v11)
  {
    uint64_t v40 = 0;
    id v41 = &v40;
    uint64_t v42 = 0x3032000000;
    uint64_t v43 = sub_1000D54E4;
    uint64_t v44 = sub_1000D54F4;
    id v13 = [v11 cloudLibraryStateReason];
    id v45 = [v13 mutableCopy];

    if (a3 == 1)
    {
      id v14 = off_1001BD240;
    }
    else
    {
      if (a3 != 2)
      {
        uint64_t v23 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v51 = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Invalid CloudLibraryStateReasonType (%d)", buf, 8u);
        }

        goto LABEL_17;
      }
      id v14 = &off_1001BD248;
    }
    id v16 = *v14;
    if (v16)
    {
      id v17 = v16;
      int v18 = [(id)v41[5] objectForKey:v16];
      id v19 = v18;
      if (v41[5] && ([v18 isEqualToNumber:v25] & 1) != 0)
      {
        if (!v8)
        {
LABEL_22:

          _Block_object_dispose(&v40, 8);
          goto LABEL_23;
        }
        __int16 v20 = dispatch_get_global_queue(0, 0);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        void v26[2] = sub_1000D6B64;
        v26[3] = &unk_1001BEC48;
        id v27 = 0;
        id v28 = v8;
        dispatch_async(v20, v26);

        id v21 = &v28;
        uint64_t v22 = v27;
      }
      else
      {
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        void v34[2] = sub_1000D68AC;
        void v34[3] = &unk_1001BD320;
        id v37 = &v40;
        id v35 = v25;
        id v17 = v17;
        unsigned __int8 v36 = v17;
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_1000D696C;
        v29[3] = &unk_1001BD280;
        unsigned int v33 = &v40;
        id v30 = v7;
        id v31 = v24;
        id v32 = v8;
        [v9 insertPropertiesForUserIdentity:v10 andPostAccountChangeNotification:0 usingBlock:v34 completionHandler:v29];

        id v21 = &v35;
        uint64_t v22 = v36;
      }
LABEL_20:

      goto LABEL_22;
    }
LABEL_17:
    if (!v8)
    {
      id v17 = 0;
      id v19 = 0;
      goto LABEL_22;
    }
    uint64_t v22 = dispatch_get_global_queue(0, 0);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_1000D6834;
    v38[3] = &unk_1001BEC70;
    id v21 = &v39;
    id v39 = v8;
    dispatch_async(v22, v38);
    id v17 = 0;
    id v19 = 0;
    goto LABEL_20;
  }
  if (v8)
  {
    id v15 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D6820;
    block[3] = &unk_1001BEC48;
    id v48 = v8;
    id v47 = v12;
    dispatch_async(v15, block);
  }
LABEL_23:
}

void sub_1000D67FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

uint64_t sub_1000D6820(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D6834(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000D68AC(void *a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1[6] + 8) + 40);
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  id v6 = a2;
  if (v3)
  {
    [v3 setObject:v4 forKey:v5];
  }
  else
  {
    uint64_t v7 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v4, v5, 0);
    uint64_t v8 = *(void *)(a1[6] + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  [a2 setCloudLibraryStateReason:*(void *)(*(void *)(a1[6] + 8) + 40)];
}

void sub_1000D696C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v7 = [*(id *)(a1 + 32) userIdentity];
    uint64_t v8 = [v7 accountDSID];
    id v9 = +[NSDate date];
    [v9 timeIntervalSinceDate:*(void *)(a1 + 40)];
    *(_DWORD *)long long buf = 138544130;
    uint64_t v18 = v6;
    __int16 v19 = 2114;
    __int16 v20 = v8;
    __int16 v21 = 2114;
    id v22 = v4;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "_CloudLibraryUtilitiesUpdateUserIdentityWithReason finished updating (cloudLibraryStateReason=%{public}@) for account [%{public}@] with error=%{public}@ in %f seconds", buf, 0x2Au);
  }
  if (!v4)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, ICCloudClientEnableCloudLibraryFailureTypeChangedNotification, 0, 0, 1u);
  }
  id v12 = *(void **)(a1 + 48);
  if (v12)
  {
    id v13 = dispatch_get_global_queue(0, 0);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000D6B78;
    v14[3] = &unk_1001BEC48;
    id v16 = v12;
    id v15 = v4;
    dispatch_async(v13, v14);
  }
}

uint64_t sub_1000D6B64(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000D6B78(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D6B8C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  id v7 = +[NSNumber numberWithInteger:a2];
  sub_1000D62EC(v6, v7, 2, v5);
}

uint64_t sub_1000D6C1C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D6C30(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = a2;
  [v3 removeObjectForKey:@"EnableCloudLibraryFailureReasonKey"];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) removeObjectForKey:@"AutoEnableCloudLibraryFailureReasonKey"];
  [v4 setCloudLibraryStateReason:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_1000D6CBC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(a1[7] + 8) + 40);
    uint64_t v7 = a1[4];
    uint64_t v8 = +[NSDate date];
    [v8 timeIntervalSinceDate:a1[5]];
    *(_DWORD *)long long buf = 138544130;
    uint64_t v16 = v6;
    __int16 v17 = 2114;
    uint64_t v18 = v7;
    __int16 v19 = 2114;
    id v20 = v4;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CloudLibraryUtilitiesUpdateAccountRemoveEnableICMLErrorReason finished updating (cloudLibraryStateReason=%{public}@) for %{public}@ with error=%{public}@ in %f seconds", buf, 0x2Au);
  }
  uint64_t v10 = (void *)a1[6];
  if (v10)
  {
    id v11 = dispatch_get_global_queue(0, 0);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000D6E7C;
    void v12[3] = &unk_1001BEC48;
    id v14 = v10;
    id v13 = v4;
    dispatch_async(v11, v12);
  }
}

uint64_t sub_1000D6E68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000D6E7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000D6E90(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D6EA4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = +[NSNumber numberWithInteger:v4];
  if (v3)
  {
    [v3 setObject:v6 forKey:@"CloudLibraryStateReasonKey"];
  }
  else
  {
    uint64_t v7 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v6, @"CloudLibraryStateReasonKey", 0];
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  [a2 setCloudLibraryStateReason:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_1000D6FAC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(a1[7] + 8) + 40);
    uint64_t v7 = a1[4];
    uint64_t v8 = +[NSDate date];
    [v8 timeIntervalSinceDate:a1[5]];
    *(_DWORD *)long long buf = 138544130;
    uint64_t v16 = v6;
    __int16 v17 = 2114;
    uint64_t v18 = v7;
    __int16 v19 = 2114;
    id v20 = v4;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Finished updating cloudLibraryStateReason=%{public}@ for %{public}@ with error=%{public}@ in %f seconds", buf, 0x2Au);
  }
  uint64_t v10 = (void *)a1[6];
  if (v10)
  {
    id v11 = dispatch_get_global_queue(0, 0);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000D716C;
    void v12[3] = &unk_1001BEC48;
    id v14 = v10;
    id v13 = v4;
    dispatch_async(v11, v12);
  }
}

uint64_t sub_1000D7158(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000D716C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000D7180(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

Class sub_1000D7198(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F3978)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_1000D7384;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BD340;
    uint64_t v8 = 0;
    qword_1001F3978 = _sl_dlopen();
  }
  if (!qword_1001F3978)
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudLibraryUtilities.m", 38, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPCloudController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"Class getMPCloudControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudLibraryUtilities.m", 39, @"Unable to find class %s", "MPCloudController");

LABEL_10:
    __break(1u);
  }
  qword_1001F3970 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000D7384()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3978 = result;
  return result;
}

id sub_1000D73F8()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1001F3980;
  uint64_t v7 = qword_1001F3980;
  if (!qword_1001F3980)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000D74DC;
    v3[3] = &unk_1001BE9E8;
    v3[4] = &v4;
    sub_1000D74DC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000D74C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000D74DC(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F3988)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_1000D76C8;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BD358;
    uint64_t v8 = 0;
    qword_1001F3988 = _sl_dlopen();
  }
  if (!qword_1001F3988)
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    uint64_t v4 = +[NSString stringWithUTF8String:"void *AirTrafficDeviceLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudLibraryUtilities.m", 34, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("ATDeviceSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"Class getATDeviceSettingsClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudLibraryUtilities.m", 35, @"Unable to find class %s", "ATDeviceSettings");

LABEL_10:
    __break(1u);
  }
  qword_1001F3980 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000D76C8()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3988 = result;
  return result;
}

void sub_1000D773C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError msv_errorWithDomain:ICErrorDomain code:-7007 debugDescription:@"Privacy acknowledgement required to check subscription status"];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

uint64_t sub_1000D7CA4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 16;
        goto LABEL_29;
      case 2u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
            v17 |= (unint64_t)(v19 & 0x7F) << v15;
            if (v19 < 0)
            {
              v15 += 7;
              BOOL v9 = v16++ >= 9;
              if (v9)
              {
                uint64_t v17 = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v17 = 0;
        }
LABEL_40:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = v17;
        continue;
      case 3u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 24;
LABEL_29:
        id v20 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        continue;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v23 |= (unint64_t)(v25 & 0x7F) << v21;
      if ((v25 & 0x80) == 0) {
        goto LABEL_42;
      }
      v21 += 7;
      BOOL v9 = v22++ >= 9;
      if (v9)
      {
        LODWORD(v23) = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v23) = 0;
    }
LABEL_44:
    *(_DWORD *)(a1 + 32) = v23;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D8D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose((const void *)(v33 - 224), 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8DC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D8DD4(uint64_t a1)
{
}

void sub_1000D8DDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "SDK");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    char v8 = (objc_class *)objc_opt_class();
    BOOL v9 = NSStringFromClass(v8);
    int v10 = *(void **)(a1 + 32);
    id v11 = [v10 method];
    CFStringRef v12 = @"POST";
    if (!v11) {
      CFStringRef v12 = @"GET";
    }
    CFStringRef v25 = v12;
    uint64_t v13 = [*(id *)(a1 + 32) action];
    id v14 = (objc_class *)objc_opt_class();
    char v15 = NSStringFromClass(v14);
    id v16 = [v5 responseCode];
    uint64_t v17 = [v5 responseData];
    *(_DWORD *)long long buf = 138545154;
    id v27 = v9;
    __int16 v28 = 2048;
    id v29 = v10;
    __int16 v30 = 2114;
    CFStringRef v31 = v25;
    __int16 v32 = 2114;
    uint64_t v33 = v13;
    __int16 v34 = 2114;
    id v35 = v15;
    __int16 v36 = 2048;
    id v37 = v5;
    __int16 v38 = 2048;
    id v39 = v16;
    __int16 v40 = 2048;
    id v41 = [v17 length];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p method=%{public}@ action=%{public}@> received response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x52u);
  }
  if (v6)
  {
    unint64_t v18 = os_log_create("com.apple.amp.itunescloudd", "SDK");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "SagaCloudSDKAddOperation failed with error: %{public}@", buf, 0xCu);
    }
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v5;
  id v21 = v5;

  uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v6;
  id v24 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void *sub_1000D903C(void *a1)
{
  v5[0] = 0;
  if (!qword_1001F3998)
  {
    v5[1] = _NSConcreteStackBlock;
    v5[2] = (void *)3221225472;
    v5[3] = sub_1000D91E4;
    void v5[4] = &unk_1001BEA20;
    void v5[5] = v5;
    long long v6 = off_1001BD3D0;
    uint64_t v7 = 0;
    qword_1001F3998 = _sl_dlopen();
  }
  id v2 = (void *)qword_1001F3998;
  if (!qword_1001F3998)
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"SagaCloudSDKAddOperation.m", 30, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "MPErrorDomain");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  qword_1001F3990 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t sub_1000D91C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, *(void *)(a1 + 32), a2);
  }
  return result;
}

uint64_t sub_1000D91E4()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3998 = result;
  return result;
}

void sub_1000D9AE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 134218240;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    id v12 = [v3 responseCode];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%p received response status code: %lu", (uint8_t *)&v9, 0x16u);
  }

  long long v6 = *(void **)(a1 + 40);
  uint64_t v7 = (uint64_t)[v3 responseCode];
  if (v7 > 399)
  {
    if (v7 != 404 && v7 != 400) {
      goto LABEL_10;
    }
    uint64_t v8 = 3;
  }
  else
  {
    uint64_t v8 = 1;
    if (v7 != 200 && v7 != 204) {
LABEL_10:
    }
      uint64_t v8 = 2;
  }
  [v6 setStatus:v8];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000DB200(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000DB2A8;
  v6[3] = &unk_1001BD4E0;
  int v8 = *(_DWORD *)(a1 + 40);
  void v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  [v4 _performMusicUserProfileRequestWithUserProfileContext:v5 ignoreCache:1 completion:v6];
}

void sub_1000DB2A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(NSObject **)(v7 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000DB38C;
  block[3] = &unk_1001BD4B8;
  id v12 = v6;
  uint64_t v13 = v7;
  int v16 = *(_DWORD *)(a1 + 48);
  id v14 = *(id *)(a1 + 40);
  id v15 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000DB38C(uint64_t a1)
{
  if (*(void *)(a1 + 32)
    && objc_msgSend(*(id *)(a1 + 40), "_errorIsRecoverable:")
    && *(_DWORD *)(a1 + 64) <= 2u)
  {
    id v2 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = *(_DWORD *)(a1 + 64) + 1;
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      int v16 = 134218498;
      uint64_t v17 = v4;
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = v3;
      *(_WORD *)&void v19[4] = 2112;
      *(void *)&v19[6] = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "<ICDMusicUserSocialProfileProvider: %p> Error is recoverable, retrying attempt %u in background. error=%@", (uint8_t *)&v16, 0x1Cu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) addObject:*(void *)(a1 + 48)];
    objc_msgSend(*(id *)(a1 + 40), "_onQueue_setupRetrySourceForAttempt:", (*(_DWORD *)(a1 + 64) + 1));
  }
  else
  {
    [*(id *)(*(void *)(a1 + 40) + 8) removeObject:*(void *)(a1 + 48)];
    if (![*(id *)(*(void *)(a1 + 40) + 8) count])
    {
      objc_msgSend(*(id *)(a1 + 40), "_onQueue_teardownRetrySource");
      id v6 = +[ICEnvironmentMonitor sharedMonitor];
      [v6 unregisterObserver:*(void *)(a1 + 40)];
    }
    id v7 = *(id *)(*(void *)(a1 + 40) + 32);
    int v8 = v7;
    if (*(void *)(a1 + 32)
      || ![v7 conformsToProtocol:&OBJC_PROTOCOL___ICDMusicUserSocialProfileProviderDelegate])
    {
      uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "UserState");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        int v16 = 134218242;
        uint64_t v17 = v14;
        __int16 v18 = 2112;
        *(void *)uint64_t v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "<ICDMusicUserSocialProfileProvider: %p> Error is unrecoverable - dropping retry. error=%@", (uint8_t *)&v16, 0x16u);
      }
    }
    else
    {
      id v9 = os_log_create("com.apple.amp.itunescloudd", "UserState");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 56);
        int v16 = 134218498;
        uint64_t v17 = v10;
        __int16 v18 = 2114;
        *(void *)uint64_t v19 = v8;
        *(_WORD *)&v19[8] = 2114;
        *(void *)&v19[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "<ICDMusicUserSocialProfileProvider: %p> Updating delegate %{public}@ with profile %{public}@", (uint8_t *)&v16, 0x20u);
      }

      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = [*(id *)(a1 + 48) storeRequestContext];
      [v8 updateUserProfile:v12 forRequestContext:v13];
    }
  }
}

void sub_1000DB7A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    int v3 = +[ICEnvironmentMonitor sharedMonitor];
    unsigned int v4 = [v3 isRemoteServerLikelyReachable];

    if (v4)
    {
      objc_msgSend(WeakRetained, "_onQueue_retryPendingUpdateAttempt:", *(unsigned int *)(a1 + 48));
    }
    else
    {
      uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "UserState");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v8 = 134217984;
        uint64_t v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "<ICDMusicUserSocialProfileProvider: %p> Postponing retry for favorable environment", (uint8_t *)&v8, 0xCu);
      }

      id v7 = +[ICEnvironmentMonitor sharedMonitor];
      [v7 registerObserver:*(void *)(a1 + 32)];

      objc_msgSend(WeakRetained, "_onQueue_teardownRetrySource");
    }
  }
}

void sub_1000DBB40(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v11 = [v3 clientInfo];
  uint64_t v5 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
  uint64_t v6 = [v11 clientIdentifier];
  id v7 = [v11 clientVersion];
  int v8 = +[ICClientInfo clientInfoForMusicKitRequestWithClientIdentifier:v6 clientVersion:v7 bundleIdentifier:v5];

  [v4 setClientInfo:v8];
  uint64_t v9 = [*(id *)(a1 + 32) identity];
  [v4 setIdentity:v9];

  uint64_t v10 = [*(id *)(a1 + 32) identityStore];
  [v4 setIdentityStore:v10];
}

void sub_1000DBC54(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "UserState_Oversize");
  int v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1[4];
      uint64_t v10 = a1[5];
      id v11 = [v5 parsedBodyDictionary];
      int v22 = 134219011;
      uint64_t v23 = v9;
      __int16 v24 = 2114;
      uint64_t v25 = v10;
      __int16 v26 = 2114;
      id v27 = v5;
      __int16 v28 = 2114;
      id v29 = v6;
      __int16 v30 = 2113;
      CFStringRef v31 = v11;
      uint64_t v12 = "<ICDMusicUserSocialProfileProvider: %p> Encountered error for MusicKit request %{public}@. response=%{public"
            "}@ error=%{public}@ responseBody=%{private}@";
      uint64_t v13 = v8;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 52;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, (uint8_t *)&v22, v15);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a1[4];
    uint64_t v17 = a1[5];
    id v11 = [v5 parsedBodyDictionary];
    int v22 = 134218755;
    uint64_t v23 = v16;
    __int16 v24 = 2114;
    uint64_t v25 = v17;
    __int16 v26 = 2114;
    id v27 = v5;
    __int16 v28 = 2113;
    id v29 = v11;
    uint64_t v12 = "<ICDMusicUserSocialProfileProvider: %p> Received response for MusicKit request: %{public}@. response=%{public}"
          "@ responseBody=%{private}@";
    uint64_t v13 = v8;
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    uint32_t v15 = 42;
    goto LABEL_6;
  }

  (*(void (**)(void, id, id, uint64_t, uint64_t, uint64_t, uint64_t))(a1[6] + 16))(a1[6], v5, v6, v18, v19, v20, v21);
}

void sub_1000DC048(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if ([v5 statusCode] == (id)200)
    {
      id v7 = [v6 parsedBodyDictionary];
      id v8 = [objc_alloc((Class)ICMusicUserProfile) initWithMediaAPIResponse:v7];
      if (v8)
      {
        uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "UserState");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = *(void *)(a1 + 32);
          uint64_t v10 = [v8 name];
          id v11 = [v8 handle];
          unsigned int v19 = [v8 collaborationAllowed];
          unsigned int v12 = [v8 isOnboarded];
          uint64_t v13 = [v8 socialProfileID];
          os_log_type_t v14 = [v8 socialProfile];
          *(_DWORD *)long long buf = 134219779;
          uint64_t v22 = v20;
          __int16 v23 = 2048;
          id v24 = v8;
          __int16 v25 = 2113;
          __int16 v26 = v10;
          __int16 v27 = 2113;
          __int16 v28 = v11;
          __int16 v29 = 1024;
          unsigned int v30 = v19;
          __int16 v31 = 1024;
          unsigned int v32 = v12;
          __int16 v33 = 2113;
          __int16 v34 = v13;
          __int16 v35 = 2114;
          __int16 v36 = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "<ICDMusicUserSocialProfileProvider: %p> Created <ICMusicUserProfile %p> name=%{private}@ handle=%{private}@ collaborationAllowed=%{BOOL}u isOnboarded=%{BOOL}u socialProfileID=%{private}@ socialProfile=%{public}@", buf, 0x4Au);
        }
      }
      uint32_t v15 = [v7 objectForKeyedSubscript:@"data"];

      if (v15) {
        [*(id *)(a1 + 32) _cacheResponse:v7 forContext:*(void *)(a1 + 40)];
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      uint64_t v16 = os_log_create("com.apple.amp.itunescloudd", "UserState");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 134217984;
        uint64_t v22 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "<ICDMusicUserSocialProfileProvider: %p> Failed to create user profile from response.", buf, 0xCu);
      }

      uint64_t v18 = *(void *)(a1 + 48);
      id v7 = +[NSError errorWithDomain:ICErrorDomain code:-7102 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v7);
    }
  }
}

id sub_1000DCE08(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "UserState_Oversize");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    unsigned int v4 = [*(id *)(a1 + 40) isRemoteServerLikelyReachable];
    int v6 = 134218240;
    uint64_t v7 = v3;
    __int16 v8 = 1024;
    unsigned int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "<ICDMusicUserSocialProfileProvider: %p> environmentMonitorDidChangeNetworkReachability remoteServerLikelyReachable=%{BOOL}u", (uint8_t *)&v6, 0x12u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_retryPendingUpdateAttempt:", 0);
}

void sub_1000DD25C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "UserState");
    __int16 v8 = v7;
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = objc_msgSend(v6, "msv_description");
        *(_DWORD *)long long buf = 134218498;
        uint64_t v35 = v9;
        __int16 v36 = 2114;
        id v37 = v5;
        __int16 v38 = 2114;
        id v39 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "<ICDMusicUserSocialProfileProvider: %p> Subscription status request completed with response: %{public}@ error=%{public}@", buf, 0x20u);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134218242;
      uint64_t v35 = v15;
      __int16 v36 = 2114;
      id v37 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "<ICDMusicUserSocialProfileProvider: %p> Subscription status request completed with response: %{public}@", buf, 0x16u);
    }

    uint64_t v16 = [ICDMusicUserSocialProfileRequestContext alloc];
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = [v5 subscriptionStatus];
    unsigned int v19 = [(ICDMusicUserSocialProfileRequestContext *)v16 initWithStoreRequestContext:v17 subscriptionStatus:v18];

    uint64_t v20 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 56))
    {
      [v20 _clearCacheForContext:v19];
    }
    else
    {
      uint64_t v26 = [v20 _getCachedResponseForContext:v19];
      if (v26)
      {
        __int16 v25 = (void *)v26;
        __int16 v27 = os_log_create("com.apple.amp.itunescloudd", "UserState_Oversize");
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 134218243;
          uint64_t v35 = v28;
          __int16 v36 = 2113;
          id v37 = v25;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "<ICDMusicUserSocialProfileProvider: %p> Short-circuiting with cached response: %{private}@.", buf, 0x16u);
        }

        uint64_t v29 = *(void *)(a1 + 48);
        id v30 = [objc_alloc((Class)ICMusicUserProfile) initWithMediaAPIResponse:v25];
        (*(void (**)(uint64_t, id, void))(v29 + 16))(v29, v30, 0);

        goto LABEL_18;
      }
    }
    uint64_t v21 = *(void **)(a1 + 32);
    uint64_t v22 = *(unsigned __int8 *)(a1 + 56);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    void v31[2] = sub_1000DD634;
    void v31[3] = &unk_1001BD3F0;
    id v23 = *(id *)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 32);
    id v33 = v23;
    void v31[4] = v24;
    unsigned int v32 = v19;
    [v21 _performMusicUserProfileRequestWithUserProfileContext:v32 ignoreCache:v22 completion:v31];

    __int16 v25 = v33;
LABEL_18:

LABEL_19:
    goto LABEL_20;
  }
  id v11 = os_log_create("com.apple.amp.itunescloudd", "UserState");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = [*(id *)(a1 + 40) identity];
    *(_DWORD *)long long buf = 134218499;
    uint64_t v35 = v12;
    __int16 v36 = 2113;
    id v37 = v13;
    __int16 v38 = 2114;
    id v39 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "<ICDMusicUserSocialProfileProvider: %p> Failed to fetch subscription status for identity=%{private}@ error=%{public}@", buf, 0x20u);
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (!v6)
  {
    unsigned int v19 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
    (*(void (**)(uint64_t, void, ICDMusicUserSocialProfileRequestContext *))(v14 + 16))(v14, 0, v19);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0, v6);
LABEL_20:
}

void sub_1000DD634(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  if (v6)
  {
    v7();
    if ([*(id *)(a1 + 32) _errorIsRecoverable:v6])
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(NSObject **)(v8 + 16);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1000DD72C;
      v10[3] = &unk_1001BECC0;
      void v10[4] = v8;
      id v11 = *(id *)(a1 + 40);
      dispatch_async(v9, v10);
    }
  }
  else
  {
    v7();
  }
}

id sub_1000DD72C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return objc_msgSend(v2, "_onQueue_setupRetrySourceForAttempt:", 0);
}

uint64_t sub_1000DD8B8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) badgeActionMetricsEventForIdentifier:@"appIcon"];
  if (v2)
  {
    [*(id *)(a1 + 32) enqueueMetricsEvent:v2];
    [*(id *)(a1 + 32) clearBadgeActionMetricsEventForIdentifier:@"appIcon"];
  }

  return _objc_release_x1();
}

BOOL sub_1000DE644(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
LABEL_21:
        uint64_t v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 16;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000DF6B0(uint64_t a1, void *a2)
{
  return [a2 writeString:*(void *)(*(void *)(a1 + 32) + 104) withCode:1634357319];
}

void sub_1000DFC74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    unint64_t v6 = [a2 urlResponse];
    uint64_t v7 = (uint64_t)[v6 statusCode];
    if (v7 > 399)
    {
      if (v7 == 404 || v7 == 400)
      {
        uint64_t v8 = 3;
LABEL_13:
        [*(id *)(a1 + 32) setStatus:v8];
        if ([*(id *)(a1 + 32) status] != (id)1)
        {
          int v10 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 134217984;
            id v12 = [v6 statusCode];
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Cloud library opt-out request failed with non-2xx status code %ld", (uint8_t *)&v11, 0xCu);
          }
        }
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v8 = 1;
      if (v7 == 200 || v7 == 204) {
        goto LABEL_13;
      }
    }
    uint64_t v8 = 2;
    goto LABEL_13;
  }
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v11 = 138543362;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Cloud library opt-out request failed with error: %{public}@", (uint8_t *)&v11, 0xCu);
  }

  [*(id *)(a1 + 32) setStatus:2];
LABEL_18:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_1000E0AF4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 48) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_59;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_61;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_61:
        *(_DWORD *)(a1 + 40) = v14;
        goto LABEL_79;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_65:
        uint64_t v37 = 8;
        goto LABEL_74;
      case 3u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 48) |= 2u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v20 |= (unint64_t)(v26 & 0x7F) << v23;
            if (v26 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_69:
        uint64_t v37 = 16;
        goto LABEL_74;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 48) |= 4u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v27;
            if (v30 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                uint64_t v20 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_73:
        uint64_t v37 = 24;
LABEL_74:
        *(void *)(a1 + v37) = v20;
        goto LABEL_79;
      case 5u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 48) |= 0x10u;
        while (2)
        {
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                uint64_t v33 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v33 = 0;
        }
LABEL_78:
        *(unsigned char *)(a1 + 44) = v33 != 0;
        goto LABEL_79;
      case 6u:
        __int16 v36 = objc_alloc_init(AMPMusicFeature);
        [(id)a1 addContentFeatures:v36];
        if PBReaderPlaceMark() && (sub_10007F018((uint64_t)v36, a2))
        {
          PBReaderRecallMark();

LABEL_79:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_79;
    }
  }
}

void sub_1000E1938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E1950(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E1960(uint64_t a1)
{
}

void sub_1000E1968(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = a2;
  id v9 = +[RemoveCloudSourcesOperation _icCloudSourceToMLCloudSourceMapDescription];
  unsigned int v5 = [v9 objectForKeyedSubscript:v4];

  uint64_t v6 = [v3 stringByAppendingFormat:@"%@,", v5];
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  char v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1000E1B48(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v5 = +[RemoveCloudSourcesOperation _icCloudSourceToMLCloudSourceMap];
  id v4 = [v5 objectForKeyedSubscript:v3];

  [v2 addObject:v4];
}

void sub_1000E25BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  id v5 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = [*(id *)(a1 + 48) DSID];
    int v8 = 138543874;
    uint64_t v9 = v6;
    __int16 v10 = 2048;
    id v11 = [v7 longLongValue];
    __int16 v12 = 2114;
    id v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - Removing account %lld as the active locker account finished with error=%{public}@", (uint8_t *)&v8, 0x20u);
  }
}

intptr_t sub_1000E26B8(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000E26C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  id v5 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138543618;
    uint64_t v8 = v6;
    __int16 v9 = 2114;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - Finished running maintenance task with error=%{public}@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1000E279C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to remove playback intents. err=%{public}@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1000E28AC(id a1)
{
  v3[0] = &off_1001CC2A8;
  v3[1] = &off_1001CC2D8;
  v4[0] = @"Purchase History";
  v4[1] = @"Subscription";
  v3[2] = &off_1001CC290;
  v3[3] = &off_1001CC2C0;
  v4[2] = @"Saga";
  v4[3] = @"Purchase History For Media Items";
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
  uint64_t v2 = (void *)qword_1001F39A0;
  qword_1001F39A0 = v1;
}

void sub_1000E32F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 urlForBagKey:*(void *)(*(void *)(a1 + 32) + 8)];
  int v7 = (void *)v6;
  if (a2 && v6)
  {
    id v8 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v6];
    [v8 setHTTPMethod:@"POST"];
    [v8 setValue:ICHTTPHeaderContentTypeXApplePlist forHTTPHeaderField:ICHTTPHeaderKeyContentType];
    [v8 setHTTPBody:*(void *)(a1 + 40)];
    id v9 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v8 requestContext:*(void *)(a1 + 48)];
    id v10 = +[ICURLSessionManager defaultSession];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000E356C;
    v15[3] = &unk_1001BD728;
    void v15[4] = *(void *)(a1 + 32);
    id v16 = *(id *)(a1 + 56);
    [v10 enqueueDataRequest:v9 withCompletionHandler:v15];

LABEL_9:
    goto LABEL_10;
  }
  id v11 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(v12 + 8);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v18 = v12;
    __int16 v19 = 2114;
    uint64_t v20 = v13;
    __int16 v21 = 2114;
    uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch URL from bag using key %{public}@. error=%{public}@", buf, 0x20u);
  }

  uint64_t v14 = *(void *)(a1 + 56);
  if (!v5)
  {
    id v8 = +[NSError errorWithDomain:ICErrorDomain code:-7200 userInfo:0];
    (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0, v8);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0, v5);
LABEL_10:
}

void sub_1000E356C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = [v5 parsedBodyDictionary];
      id v11 = objc_msgSend(v6, "msv_description");
      int v14 = 138544130;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      id v17 = v5;
      __int16 v18 = 2114;
      __int16 v19 = v10;
      __int16 v20 = 2114;
      __int16 v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ request completed with response: %{public}@ body: %{public}@ error=%{public}@", (uint8_t *)&v14, 0x2Au);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = [v5 parsedBodyDictionary];
    int v14 = 138543874;
    uint64_t v15 = v12;
    __int16 v16 = 2114;
    id v17 = v5;
    __int16 v18 = 2114;
    __int16 v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ request completed with response: %{public}@ body: %{public}@", (uint8_t *)&v14, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000E41D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 playbackPositionKey];
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 32);
    int v7 = [v3 playbackPositionKey];
    id v8 = [v6 objectForKeyedSubscript:v7];

    if (v8)
    {
      uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v10 = [v3 playbackPositionKey];
        id v11 = *(void **)(*(void *)(a1 + 32) + 32);
        uint64_t v12 = [v3 playbackPositionKey];
        uint64_t v13 = [v11 objectForKeyedSubscript:v12];
        int v16 = 138543874;
        id v17 = v10;
        __int16 v18 = 2114;
        __int16 v19 = v13;
        __int16 v20 = 2114;
        id v21 = v3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "ERROR: metadataItemsFromDataSource already contains item for entityIdentifier %{public}@. existingItem=%{public}@ newItem=%{public}@", (uint8_t *)&v16, 0x20u);
      }
    }
    int v14 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v15 = [v3 playbackPositionKey];
    [v14 setObject:v3 forKey:v15];
  }
  else
  {
    uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412290;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "ERROR: will skip syncing item with no sync metadataIdentifier: %@", (uint8_t *)&v16, 0xCu);
    }
  }
}

void sub_1000E43E8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = a1[4];
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v5;
      *(_WORD *)&unsigned char buf[22] = 2114;
      uint64_t v57 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Encountered error with reponse: %{public}@ error=%{public}@", buf, 0x20u);
    }

    [a1[4] _finishWithError:v6];
  }
  else
  {
    uint64_t v33 = [*((id *)a1[4] + 2) playbackPositionDomain];
    uint64_t v9 = [ICDPlaybackPositionResponseDataSync alloc];
    id v10 = [v5 parsedBodyDictionary];
    id v11 = [(ICDPlaybackPositionResponseDataSync *)v9 initWithResponseDictionary:v10 forDomain:v33];

    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition_Oversize");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = a1[4];
      unsigned int v32 = [(ICDPlaybackPositionResponseDataSync *)v11 syncAnchor];
      char v31 = [(ICDPlaybackPositionResponseDataSync *)v11 updatedKeys];
      int v14 = [(ICDPlaybackPositionResponseDataSync *)v11 conflictedKeys];
      uint64_t v15 = [(ICDPlaybackPositionResponseDataSync *)v11 deletedKeys];
      int v16 = [(ICDPlaybackPositionResponseDataSync *)v11 successfullyUpdatedKeys];
      id v17 = [(ICDPlaybackPositionResponseDataSync *)v11 successfullyDeletedKeys];
      *(_DWORD *)long long buf = 138545154;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v5;
      *(_WORD *)&unsigned char buf[22] = 2112;
      uint64_t v57 = v32;
      *(_WORD *)__int16 v58 = 2112;
      *(void *)&void v58[2] = v31;
      *(_WORD *)&v58[10] = 2112;
      *(void *)&v58[12] = v14;
      __int16 v59 = 2112;
      char v60 = v15;
      __int16 v61 = 2112;
      uint64_t v62 = v16;
      __int16 v63 = 2112;
      double v64 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ Received sync response: %{public}@\n syncAnchor=%@\n updatedKeys=%@\n conflictedKeys=%@\n deletedKeys=%@\n successfullyUpdatedKeys=%@\n successfullyDeletedKeys=%@", buf, 0x52u);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v57 = sub_1000E4A34;
    *(void *)__int16 v58 = sub_1000E4A44;
    *(void *)&v58[8] = 0;
    uint64_t v46 = 0;
    id v47 = &v46;
    uint64_t v48 = 0x3032000000;
    id v49 = sub_1000E4A34;
    char v50 = sub_1000E4A44;
    id v51 = 0;
    id v18 = a1[4];
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    void v45[2] = sub_1000E4A4C;
    v45[3] = &unk_1001BD688;
    void v45[4] = buf;
    v45[5] = &v46;
    [v18 _parseResponseData:v11 completion:v45];
    __int16 v19 = [(ICDPlaybackPositionResponseDataSync *)v11 syncAnchor];
    if (!v19)
    {
      __int16 v20 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v21 = a1[4];
        *(_DWORD *)id v52 = 138543362;
        id v53 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@ responseData.syncAnchor=nil", v52, 0xCu);
      }

      __int16 v19 = @"0";
    }
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_1000E4AD4;
    v38[3] = &unk_1001BD6B0;
    uint64_t v22 = v19;
    id v39 = v22;
    uint64_t v44 = buf;
    id v40 = a1[5];
    id v41 = a1[6];
    id v23 = v33;
    id v24 = a1[4];
    id v42 = v23;
    id v43 = v24;
    unint64_t v25 = objc_retainBlock(v38);
    if ([(id)v47[5] count])
    {
      char v26 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        id v27 = a1[4];
        unsigned int v28 = [(id)v47[5] allKeys];
        *(_DWORD *)id v52 = 138543618;
        id v53 = v27;
        __int16 v54 = 2112;
        __int16 v55 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%{public}@ Sending merged items to server: %@", v52, 0x16u);
      }
      id v29 = a1[4];
      uint64_t v30 = v47[5];
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      void v34[2] = sub_1000E4BF4;
      void v34[3] = &unk_1001BD6D8;
      void v34[4] = v29;
      id v35 = v5;
      id v36 = v23;
      uint64_t v37 = v25;
      [v29 _performSyncWithSyncAnchor:v22 itemsToSync:v30 conflictDetectionType:@"none" completion:v34];
    }
    else
    {
      ((void (*)(void *, void))v25[2])(v25, 0);
    }

    _Block_object_dispose(&v46, 8);
    _Block_object_dispose(buf, 8);
  }
}

void sub_1000E49FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E4A34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E4A44(uint64_t a1)
{
}

void sub_1000E4A4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v11 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
}

void sub_1000E4AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Committing merged items with domainRevision: %@ to local database: %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) allValues];
  [v7 commitUniversalPlaybackPositions:v8 context:*(void *)(a1 + 48) domain:*(void *)(a1 + 56) domainVersion:*(void *)(a1 + 32)];

  [*(id *)(a1 + 64) _finishWithError:v3];
}

void sub_1000E4BF4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      id v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ Received error for KVS merge request. error=%{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
  else
  {
    uint64_t v7 = [ICDPlaybackPositionResponseDataSync alloc];
    id v8 = [*(id *)(a1 + 40) parsedBodyDictionary];
    uint64_t v5 = [(ICDPlaybackPositionResponseDataSync *)v7 initWithResponseDictionary:v8 forDomain:*(void *)(a1 + 48)];

    int v9 = [v5 conflictedKeys];
    id v10 = [v9 count];

    if (v10)
    {
      __int16 v11 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v13 = 138543362;
        uint64_t v14 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ WARNING: sent resolved conflict to server, but still received conflicts in the response, saving those for next time...", (uint8_t *)&v13, 0xCu);
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000E578C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = [*(id *)(a1 + 48) userIdentity];
      int v9 = [v8 accountDSID];
      *(_DWORD *)id v23 = 138544130;
      *(void *)&void v23[4] = v6;
      *(_WORD *)&v23[12] = 2114;
      *(void *)&v23[14] = v7;
      *(_WORD *)&v23[22] = 2114;
      id v24 = v9;
      LOWORD(v25) = 2114;
      *(void *)((char *)&v25 + 2) = v3;
      id v10 = "%{public}@ - Unable to deactivate handler - class=%{public}@ dsid=%{public}@ error=%{public}@";
      __int16 v11 = v5;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 42;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, v23, v13);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    id v8 = [*(id *)(a1 + 48) userIdentity];
    int v9 = [v8 accountDSID];
    *(_DWORD *)id v23 = 138543874;
    *(void *)&void v23[4] = v14;
    *(_WORD *)&v23[12] = 2114;
    *(void *)&v23[14] = v15;
    *(_WORD *)&v23[22] = 2114;
    id v24 = v9;
    id v10 = "%{public}@ - Handler is no longer active - class=%{public}@ dsid=%{public}@";
    __int16 v11 = v5;
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    uint32_t v13 = 32;
    goto LABEL_6;
  }

  if (*(void *)(a1 + 56) && ICSystemApplicationIsInstalled())
  {
    id v16 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = *(void **)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 56);
      __int16 v20 = [*(id *)(a1 + 64) userIdentity];
      id v21 = [v20 accountDSID];
      *(_DWORD *)id v23 = 138544130;
      *(void *)&void v23[4] = v17;
      *(_WORD *)&v23[12] = 2048;
      *(void *)&v23[14] = v19;
      *(_WORD *)&v23[22] = 2114;
      id v24 = v18;
      LOWORD(v25) = 2114;
      *(void *)((char *)&v25 + 2) = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ - Activating handler %p - class=%{public}@ dsid=%{public}@", v23, 0x2Au);
    }
    [*(id *)(a1 + 56) becomeActive];
  }
  id v22 = objc_msgSend(*(id *)(a1 + 40), "deleteHandlerForConfiguration:", *(void *)(a1 + 48), *(_OWORD *)v23, *(void *)&v23[16], v24, v25);
}

void sub_1000E61C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = [*(id *)(a1 + 48) userIdentity];
      id v8 = [v7 accountDSID];
      int v10 = 138544130;
      uint64_t v11 = v5;
      __int16 v12 = 2114;
      uint64_t v13 = v6;
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@ - Unable to deactivate handler with deauthentication [deleting it anyway] - class=%{public}@ dsid=%{public}@ error=%{public}@", (uint8_t *)&v10, 0x2Au);
    }
  }
  id v9 = [*(id *)(a1 + 40) deleteHandlerForConfiguration:*(void *)(a1 + 48)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1000E62F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E6690(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) libraryManagementPolicy];
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4 == v5)
  {
    if (v7)
    {
      id v8 = *(void **)(a1 + 32);
      int v14 = 138543618;
      uint64_t v15 = v8;
      __int16 v16 = 1024;
      LODWORD(v17) = [v8 libraryManagementPolicy];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - policy type is unchanged (%d)", (uint8_t *)&v14, 0x12u);
    }
  }
  else
  {
    if (v7)
    {
      id v9 = *(void **)(a1 + 32);
      unint64_t v10 = (unint64_t)[v9 libraryManagementPolicy];
      if (v10 > 2) {
        CFStringRef v11 = @"Unknown";
      }
      else {
        CFStringRef v11 = off_1001BD7C0[v10];
      }
      unint64_t v12 = *(void *)(a1 + 48);
      if (v12 > 2) {
        CFStringRef v13 = @"Unknown";
      }
      else {
        CFStringRef v13 = off_1001BD7C0[v12];
      }
      int v14 = 138543874;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      CFStringRef v17 = v11;
      __int16 v18 = 2114;
      CFStringRef v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - Changing policy type from %{public}@ to %{public}@", (uint8_t *)&v14, 0x20u);
    }

    [*(id *)(a1 + 32) setLibraryManagementPolicy:*(void *)(a1 + 48)];
    if ([*(id *)(a1 + 32) libraryManagementPolicy] == (id)2) {
      [*(id *)(a1 + 32) _processSupportedConfigurationsChange:*(void *)(a1 + 40) initialSetup:0];
    }
  }
  [v3 finishWithError:0];
}

void sub_1000E6B14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v51 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - updateHandlersWithAccountStateChange", buf, 0xCu);
  }

  if (([*(id *)(a1 + 32) isSetupCompleted] & 1) == 0)
  {
    unsigned int v32 = +[NSAssertionHandler currentHandler];
  }
  if (([*(id *)(a1 + 40) activeConfigurationChanged] & 1) == 0
    && ([*(id *)(a1 + 40) supportedConfigurationsChanged] & 1) == 0)
  {
    id v29 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(a1 + 32);
      char v31 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v51 = v30;
      __int16 v52 = 2112;
      id v53 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@ - No changes detected - %@", buf, 0x16u);
    }

    goto LABEL_48;
  }
  uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v51 = v7;
    __int16 v52 = 2112;
    id v53 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - Change detected: %@", buf, 0x16u);
  }

  if ([*(id *)(a1 + 32) libraryManagementPolicy] == (id)2
    && [*(id *)(a1 + 40) supportedConfigurationsChanged])
  {
    id v9 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v51 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - Supported configurations changed", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _processSupportedConfigurationsChange:*(void *)(a1 + 40) initialSetup:0];
  }
  else if ((![*(id *)(a1 + 32) libraryManagementPolicy] {
          || [*(id *)(a1 + 32) libraryManagementPolicy] == (id)1)
  }
         && [*(id *)(a1 + 40) activeConfigurationChanged])
  {
    CFStringRef v11 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v51 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ - Active account changed", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _processActiveConfigurationChange:*(void *)(a1 + 40) initialSetup:0];
  }
  if ([*(id *)(a1 + 32) libraryManagementPolicy] == (id)2)
  {
    id v33 = v3;
    CFStringRef v13 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v51 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ - Verifying handlers are active", buf, 0xCu);
    }

    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id obj = +[ICDHandlerCoordinator _managedHandlerClasses];
    id v36 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
    if (v36)
    {
      uint64_t v35 = *(void *)v45;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v45 != v35) {
            objc_enumerationMutation(obj);
          }
          uint64_t v37 = v15;
          __int16 v16 = *(void **)(*((void *)&v44 + 1) + 8 * v15);
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          uint64_t v17 = a1;
          __int16 v18 = [*(id *)(a1 + 40) finalState];
          CFStringRef v19 = [v18 supportedConfigurations];

          id v20 = [v19 countByEnumeratingWithState:&v40 objects:v48 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v41;
            do
            {
              for (unint64_t i = 0; i != v21; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v41 != v22) {
                  objc_enumerationMutation(v19);
                }
                id v24 = [v16 handlerForConfiguration:*(void *)(*((void *)&v40 + 1) + 8 * i)];
                if (([v24 isActive] & 1) == 0)
                {
                  long long v25 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v26 = *(void *)(v17 + 32);
                    *(_DWORD *)long long buf = 138543618;
                    uint64_t v51 = v26;
                    __int16 v52 = 2114;
                    id v53 = v24;
                    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}@ - activating handler %{public}@", buf, 0x16u);
                  }

                  [v24 becomeActive];
                }
              }
              id v21 = [v19 countByEnumeratingWithState:&v40 objects:v48 count:16];
            }
            while (v21);
          }

          uint64_t v15 = v37 + 1;
          a1 = v17;
        }
        while ((id)(v37 + 1) != v36);
        id v36 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
      }
      while (v36);
    }

    id v3 = v33;
  }
  if ([*(id *)(a1 + 32) libraryManagementPolicy] != (id)2
    && [*(id *)(a1 + 32) libraryManagementPolicy] != (id)1)
  {
LABEL_48:
    [v3 finishWithError:0];
    goto LABEL_49;
  }
  id v27 = *(void **)(a1 + 32);
  uint64_t v28 = *(void *)(a1 + 40);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_1000E7160;
  v38[3] = &unk_1001BE408;
  id v39 = v3;
  [v27 _deauthenticateUnsupportedConfigurationsFromChange:v28 initialSetup:0 completion:v38];

LABEL_49:
}

id sub_1000E7160(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

void sub_1000E7244(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ - setupHandlersWithAccountStateChange", buf, 0xCu);
  }

  if ([*(id *)(a1 + 32) isSetupCompleted])
  {
    id v23 = +[NSAssertionHandler currentHandler];
  }
  unsigned __int8 v6 = [*(id *)(a1 + 40) activeConfigurationChanged];
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = [*(id *)(a1 + 40) initialState];
    CFStringRef v11 = [*(id *)(a1 + 40) finalState];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v27 = v9;
    __int16 v28 = 2112;
    id v29 = v10;
    __int16 v30 = 2112;
    char v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - setupHandlers - Account change on startup [restore - [%@] -> [%@]]", buf, 0x20u);
  }
  else
  {
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v10 = [*(id *)(a1 + 40) initialState];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v27 = v12;
    __int16 v28 = 2112;
    id v29 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - setupHandlers - No account change on startup [restore - [%@]]", buf, 0x16u);
  }

LABEL_11:
  id v13 = [*(id *)(a1 + 32) libraryManagementPolicy];
  uint64_t v14 = os_log_create("com.apple.amp.itunescloudd", "Accounts");
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13 == (id)2)
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v27 = v16;
      __int16 v28 = 2112;
      id v29 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%{public}@ - setupHandlers - Parallel MU setup - State Change=%@", buf, 0x16u);
    }

    [*(id *)(a1 + 32) _processSupportedConfigurationsChange:*(void *)(a1 + 40) initialSetup:1];
  }
  else
  {
    if (v15)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      CFStringRef v19 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v27 = v18;
      __int16 v28 = 2112;
      id v29 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%{public}@ - setupHandlers - Single & Sequential MU setups - State Change=%@", buf, 0x16u);
    }

    [*(id *)(a1 + 32) _processActiveConfigurationChange:*(void *)(a1 + 40) initialSetup:1];
  }
  if ([*(id *)(a1 + 32) libraryManagementPolicy] == (id)2
    || [*(id *)(a1 + 32) libraryManagementPolicy] == (id)1)
  {
    id v21 = *(void **)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 40);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_1000E7618;
    void v24[3] = &unk_1001BF198;
    void v24[4] = v21;
    id v25 = v3;
    [v21 _deauthenticateUnsupportedConfigurationsFromChange:v20 initialSetup:0 completion:v24];
  }
  else
  {
    [*(id *)(a1 + 32) setSetupCompleted:1];
    uint64_t v22 = +[NSNotificationCenter defaultCenter];
    [v22 postNotificationName:@"ICDHandlerCoordinatorDidFinishInitializationNotificationName" object:*(void *)(a1 + 32)];
    [v3 finishWithError:0];
  }
}

void sub_1000E7618(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setSetupCompleted:1];
  id v5 = +[NSNotificationCenter defaultCenter];
  [v5 postNotificationName:@"ICDHandlerCoordinatorDidFinishInitializationNotificationName" object:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) finishWithError:v4];
}

uint64_t sub_1000E7934(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 16) = 0;
  return result;
}

void sub_1000E7A58(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  unsigned __int8 v6 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E81D4;
  block[3] = &unk_1001BD870;
  id v7 = *(id *)(a1 + 32);
  char v12 = a2;
  id v10 = v5;
  id v11 = v7;
  id v8 = v5;
  dispatch_async(v6, block);
}

void sub_1000E7B28(uint64_t a1)
{
  if ([*(id *)(a1 + 32) connectionState])
  {
    uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "Connections");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v20 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Unable to connect, current state: %ld", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 16) = 1;
    id v4 = [*(id *)(a1 + 32) configuration];
    id v5 = [v4 libraryBagKey];

    if ([v5 length])
    {
      id v6 = objc_alloc((Class)ICStoreRequestContext);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_1000E7DD8;
      v18[3] = &unk_1001BE6B0;
      void v18[4] = *(void *)(a1 + 32);
      id v7 = [v6 initWithBlock:v18];
      id v8 = +[ICURLBagProvider sharedBagProvider];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_1000E7E48;
      v14[3] = &unk_1001BD8E8;
      id v9 = v5;
      uint64_t v10 = *(void *)(a1 + 32);
      id v11 = *(void **)(a1 + 40);
      id v15 = v9;
      uint64_t v16 = v10;
      id v17 = v11;
      [v8 getBagForRequestContext:v7 withCompletionHandler:v14];
    }
    else
    {
      char v12 = os_log_create("com.apple.amp.itunescloudd", "Connections");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No library bag key. Failed to determine database ID.", buf, 2u);
      }

      *(void *)(*(void *)(a1 + 32) + 16) = 0;
      uint64_t v13 = *(void *)(a1 + 40);
      id v7 = +[NSError ic_cloudClientErrorWithCode:2013 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v7);
    }
  }
}

void sub_1000E7DD8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v3 = [v2 userIdentity];
  [v4 setIdentity:v3];

  [v4 setPersonalizationStyle:2];
}

void sub_1000E7E48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "Connections");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = objc_msgSend(v6, "msv_description");
      *(_DWORD *)long long buf = 138543362;
      id v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to fetch bag error=%{public}@", buf, 0xCu);
    }
  }
  id v9 = [v5 dictionaryForBagKey:*(void *)(a1 + 32)];
  uint64_t v10 = [v9 objectForKey:@"database-id"];
  unsigned int v11 = [v10 unsignedIntValue];

  char v12 = [v9 objectForKey:@"database-name"];
  uint64_t v13 = [*(id *)(a1 + 40) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E8038;
  block[3] = &unk_1001BD8C0;
  unsigned int v21 = v11;
  uint64_t v14 = *(void **)(a1 + 48);
  void block[4] = *(void *)(a1 + 40);
  id v18 = v12;
  id v19 = v9;
  id v20 = v14;
  id v15 = v9;
  id v16 = v12;
  dispatch_async(v13, block);
}

void sub_1000E8038(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    *(_DWORD *)(v3 + _Block_object_dispose(&STACK[0x250], 8) = v2;
    *(void *)(*(void *)(a1 + 32) + 16) = 2;
    id v4 = os_log_create("com.apple.amp.itunescloudd", "Connections");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 8);
      int v11 = 138543618;
      uint64_t v12 = v5;
      __int16 v13 = 1024;
      int v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cloud database: %{public}@ (DatabaseID = %u)", (uint8_t *)&v11, 0x12u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    *(void *)(v3 + 16) = 0;
    id v7 = os_log_create("com.apple.amp.itunescloudd", "Connections");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      int v11 = 138543362;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to load database ID, bag library: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = +[NSError ic_cloudClientErrorWithCode:2013 userInfo:0];
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
}

uint64_t sub_1000E81D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

Class sub_1000E81EC(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F39B8)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_1000E8468;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BD908;
    uint64_t v8 = 0;
    qword_1001F39B8 = _sl_dlopen();
  }
  if (!qword_1001F39B8)
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudLibraryConnection.m", 27, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPPlaybackUserDefaults");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"Class getMPPlaybackUserDefaultsClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudLibraryConnection.m", 28, @"Unable to find class %s", "MPPlaybackUserDefaults");

LABEL_10:
    __break(1u);
  }
  qword_1001F39B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

ICURLSession *__cdecl sub_1000E8400(id a1)
{
  uint64_t v1 = +[NSURLSessionConfiguration ic_defaultSessionConfiguration];
  id v2 = [objc_alloc((Class)ICURLSession) initWithConfiguration:v1 maxConcurrentRequests:4 qualityOfService:-1];

  return (ICURLSession *)v2;
}

uint64_t sub_1000E8468()
{
  uint64_t result = _sl_dlopen();
  qword_1001F39B8 = result;
  return result;
}

void sub_1000E86F0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 104);
  id v3 = a2;
  [v3 writeString:v2 withCode:1634357319];
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000E87AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 112);
  uint64_t v5 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    int v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      for (unint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        ICDAAPUtilitiesWriteContainer();
      }
      int v6 = (char *)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

id sub_1000E8924(uint64_t a1, void *a2)
{
  return [a2 writeString:*(void *)(a1 + 32) withCode:1936746852];
}

void sub_1000E93F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E9428(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E9438(uint64_t a1)
{
}

void sub_1000E9440(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000E978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E97BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void **)(a1 + 32);
      int v26 = 138543618;
      id v27 = v8;
      __int16 v28 = 2114;
      id v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Received an error loading response for %{public}@: %{public}@", (uint8_t *)&v26, 0x16u);
    }

    goto LABEL_5;
  }
  uint64_t v9 = [v5 bodyData];
  id v10 = [v9 length];

  if (!v10)
  {
    uint64_t v19 = a1 + 48;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
  id v11 = [v5 bodyData];
  id v12 = +[NSPropertyListSerialization propertyListWithData:v11 options:0 format:0 error:0];

  id v13 = 0;
  if (_NSIsNSDictionary())
  {
    uint64_t v14 = [v12 objectForKey:@"status"];
    id v15 = [v14 integerValue];

    if (v15)
    {
      uint64_t v16 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = [v5 urlResponse];
        id v18 = [v17 URL];
        int v26 = 134218242;
        id v27 = v15;
        __int16 v28 = 2114;
        id v29 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Received response with error: Status-%ld when loading URL: %{public}@", (uint8_t *)&v26, 0x16u);
      }
      id v13 = 0;
      goto LABEL_12;
    }
    id v13 = [v12 objectForKey:@"retry-in-ms"];

    if (!v13)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v12);
LABEL_12:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      goto LABEL_17;
    }
    id v20 = [v12 objectForKey:@"retry-in-ms"];
    id v13 = [v20 unsignedIntegerValue];
  }
LABEL_17:

  uint64_t v19 = a1 + 48;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    goto LABEL_5;
  }
  if (v13)
  {
    unsigned int v21 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void **)(a1 + 32);
      int v26 = 138543618;
      id v27 = v22;
      __int16 v28 = 2048;
      id v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Retrying loading %{public}@ URL in %ld milliseconds", (uint8_t *)&v26, 0x16u);
    }

    usleep(((double)(unint64_t)v13 * 1000.0));
    goto LABEL_5;
  }
LABEL_22:
  id v23 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    id v24 = *(void **)(a1 + 32);
    id v25 = *(void **)(a1 + 64);
    int v26 = 138543618;
    id v27 = v24;
    __int16 v28 = 2048;
    id v29 = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to load %{public}@ URL after %g seconds", (uint8_t *)&v26, 0x16u);
  }

  *(unsigned char *)(*(void *)(*(void *)v19 + 8) + 24) = 1;
LABEL_5:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000EA294(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a4;
  id v10 = a5;
  if (v10)
  {
    id v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138543618;
      id v13 = v10;
      __int16 v14 = 2114;
      id v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "uploadTask failed: %{public}@. %{public}@", (uint8_t *)&v12, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000EAEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1000EAF00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000EB778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1000EB7A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = v3;
  id v6 = (unsigned __int16 *)[v5 bytes];
  id v7 = [v5 length];
  int v8 = (int)v7;
  uint64_t v9 = *(void *)(v4 + 32);
  if (v9 > 3999)
  {
    if (v9 > 4255)
    {
      if (v9 == 4256)
      {
        CC_SHA256_Update((CC_SHA256_CTX *)(v4 + 40), v6, (CC_LONG)v7);
      }
      else if (v9 == 4512)
      {
        CC_SHA512_Update((CC_SHA512_CTX *)(v4 + 40), v6, (CC_LONG)v7);
      }
    }
    else if (v9 == 4000)
    {
      CC_MD5_Update((CC_MD5_CTX *)(v4 + 40), v6, (CC_LONG)v7);
    }
    else if (v9 == 4001)
    {
      CC_SHA1_Update((CC_SHA1_CTX *)(v4 + 40), v6, (CC_LONG)v7);
    }
  }
  else if (v9 > 2999)
  {
    if (v9 == 3000)
    {
      sub_1000ED448((_DWORD *)(v4 + 40), (char *)v6, (size_t)v7);
    }
    else if (v9 == 3001)
    {
      sub_1000ED5F8((char *)(v4 + 40), (char *)v6, (size_t)v7);
    }
  }
  else if (v9)
  {
    if (v9 == 2000)
    {
      uint64_t v10 = *(unsigned __int8 *)(v4 + 51);
      size_t v11 = ((unint64_t)v7 + v10) & 3;
      if ((unint64_t)v7 + v10 >= 4)
      {
        unint64_t v15 = ((unint64_t)v7 + v10) & 0xFFFFFFFFFFFFFFFCLL;
        switch(*(unsigned char *)(v4 + 51))
        {
          case 0:
            unsigned int v16 = *(_DWORD *)v6;
            int v17 = *(_DWORD *)v6 >> 8;
            unsigned int v18 = HIWORD(*(_DWORD *)v6);
            int v19 = HIBYTE(*(_DWORD *)v6);
            break;
          case 1:
            LOBYTE(v16) = *(unsigned char *)(v4 + 48);
            LOBYTE(v17) = *(unsigned char *)v6;
            unsigned int v18 = *(unsigned __int16 *)((char *)v6 + 1);
            goto LABEL_31;
          case 2:
            unsigned int v16 = *(unsigned __int16 *)(v4 + 48);
            int v17 = v16 >> 8;
            unsigned int v18 = *v6;
LABEL_31:
            int v19 = v18 >> 8;
            break;
          case 3:
            unsigned int v16 = *(unsigned __int16 *)(v4 + 48);
            int v17 = v16 >> 8;
            LOBYTE(v1_Block_object_dispose(&STACK[0x250], 8) = *(unsigned char *)(v4 + 50);
            int v19 = *(unsigned __int8 *)v6;
            break;
          default:
            LOBYTE(v17) = 0;
            LOBYTE(v16) = 0;
            LOBYTE(v1_Block_object_dispose(&STACK[0x250], 8) = 0;
            int v19 = 0;
            break;
        }
        int v21 = (v18 << 16) | (v19 << 24) | v16 | (v17 << 8);
        HIDWORD(v22) = (461845907 * ((380141568 * v21) | ((-862048943 * v21) >> 17))) ^ *(_DWORD *)(v4 + 40);
        LODWORD(v22) = HIDWORD(v22);
        int v23 = 5 * (v22 >> 19) - 430675100;
        *(_DWORD *)(v4 + 40) = v23;
        id v24 = (char *)v6 - v10 + 4;
        uint64_t v25 = v15 - 4;
        int v26 = &v24[v25];
        if (v25 >= 1)
        {
          do
          {
            int v27 = *(_DWORD *)v24;
            v24 += 4;
            HIDWORD(v2_Block_object_dispose(&STACK[0x250], 8) = (461845907 * ((380141568 * v27) | ((-862048943 * v27) >> 17))) ^ v23;
            LODWORD(v2_Block_object_dispose(&STACK[0x250], 8) = HIDWORD(v28);
            int v23 = 5 * (v28 >> 19) - 430675100;
            *(_DWORD *)(v4 + 40) = v23;
          }
          while (v24 < v26);
        }
        if (v11) {
          memcpy((void *)(v4 + 48), v26, v11);
        }
        *(unsigned char *)(v4 + 51) = v11;
      }
      else
      {
        id v12 = (unsigned char *)(v4 + v10 + 48);
        switch((_BYTE)v11 - (_BYTE)v10)
        {
          case 0:
            break;
          case 1:
            *id v12 = *(unsigned char *)v6;
            break;
          case 2:
            __int16 v20 = *v6;
            goto LABEL_27;
          case 3:
            __int16 v20 = *v6;
            void v12[2] = *((unsigned char *)v6 + 2);
LABEL_27:
            *(_WORD *)id v12 = v20;
            break;
          default:
            memcpy(v12, v6, (v11 - v10));
            break;
        }
      }
      *(_DWORD *)(v4 + 44) += v8;
    }
  }
  else
  {
    id v13 = +[NSAssertionHandler currentHandler];
    __int16 v14 = +[NSString stringWithUTF8String:"void _MSVHasherAppendBytes(MSVHasher * _Nonnull, const void * _Nonnull, size_t)"];
    [v13 handleFailureInFunction:v14 file:@"MSVHasher+Algorithms.h" lineNumber:262 description:@"Cannot append to unknown hasher algorithm"];
  }
  uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8);
  id v53 = v5;
  __int16 v30 = (unsigned __int16 *)[v53 bytes];
  id v31 = [v53 length];
  int v32 = (int)v31;
  uint64_t v33 = *(void *)(v29 + 32);
  if (v33 > 3999)
  {
    if (v33 > 4255)
    {
      if (v33 == 4256)
      {
        CC_SHA256_Update((CC_SHA256_CTX *)(v29 + 40), v30, (CC_LONG)v31);
      }
      else if (v33 == 4512)
      {
        CC_SHA512_Update((CC_SHA512_CTX *)(v29 + 40), v30, (CC_LONG)v31);
      }
    }
    else if (v33 == 4000)
    {
      CC_MD5_Update((CC_MD5_CTX *)(v29 + 40), v30, (CC_LONG)v31);
    }
    else if (v33 == 4001)
    {
      CC_SHA1_Update((CC_SHA1_CTX *)(v29 + 40), v30, (CC_LONG)v31);
    }
  }
  else if (v33 > 2999)
  {
    if (v33 == 3000)
    {
      sub_1000ED448((_DWORD *)(v29 + 40), (char *)v30, (size_t)v31);
    }
    else if (v33 == 3001)
    {
      sub_1000ED5F8((char *)(v29 + 40), (char *)v30, (size_t)v31);
    }
  }
  else if (v33)
  {
    if (v33 == 2000)
    {
      uint64_t v34 = *(unsigned __int8 *)(v29 + 51);
      size_t v35 = ((unint64_t)v31 + v34) & 3;
      if ((unint64_t)v31 + v34 >= 4)
      {
        unint64_t v39 = ((unint64_t)v31 + v34) & 0xFFFFFFFFFFFFFFFCLL;
        switch(*(unsigned char *)(v29 + 51))
        {
          case 0:
            unsigned int v40 = *(_DWORD *)v30;
            int v41 = *(_DWORD *)v30 >> 8;
            unsigned int v42 = HIWORD(*(_DWORD *)v30);
            int v43 = HIBYTE(*(_DWORD *)v30);
            break;
          case 1:
            LOBYTE(v40) = *(unsigned char *)(v29 + 48);
            LOBYTE(v41) = *(unsigned char *)v30;
            unsigned int v42 = *(unsigned __int16 *)((char *)v30 + 1);
            goto LABEL_69;
          case 2:
            unsigned int v40 = *(unsigned __int16 *)(v29 + 48);
            int v41 = v40 >> 8;
            unsigned int v42 = *v30;
LABEL_69:
            int v43 = v42 >> 8;
            break;
          case 3:
            unsigned int v40 = *(unsigned __int16 *)(v29 + 48);
            int v41 = v40 >> 8;
            LOBYTE(v42) = *(unsigned char *)(v29 + 50);
            int v43 = *(unsigned __int8 *)v30;
            break;
          default:
            LOBYTE(v41) = 0;
            LOBYTE(v40) = 0;
            LOBYTE(v42) = 0;
            int v43 = 0;
            break;
        }
        int v45 = (v42 << 16) | (v43 << 24) | v40 | (v41 << 8);
        HIDWORD(v46) = (461845907 * ((380141568 * v45) | ((-862048943 * v45) >> 17))) ^ *(_DWORD *)(v29 + 40);
        LODWORD(v46) = HIDWORD(v46);
        int v47 = 5 * (v46 >> 19) - 430675100;
        *(_DWORD *)(v29 + 40) = v47;
        uint64_t v48 = (char *)v30 - v34 + 4;
        uint64_t v49 = v39 - 4;
        char v50 = &v48[v49];
        if (v49 >= 1)
        {
          do
          {
            int v51 = *(_DWORD *)v48;
            v48 += 4;
            HIDWORD(v52) = (461845907 * ((380141568 * v51) | ((-862048943 * v51) >> 17))) ^ v47;
            LODWORD(v52) = HIDWORD(v52);
            int v47 = 5 * (v52 >> 19) - 430675100;
            *(_DWORD *)(v29 + 40) = v47;
          }
          while (v48 < v50);
        }
        if (v35) {
          memcpy((void *)(v29 + 48), v50, v35);
        }
        *(unsigned char *)(v29 + 51) = v35;
      }
      else
      {
        id v36 = (unsigned char *)(v29 + v34 + 48);
        switch((_BYTE)v35 - (_BYTE)v34)
        {
          case 0:
            break;
          case 1:
            *id v36 = *(unsigned char *)v30;
            break;
          case 2:
            __int16 v44 = *v30;
            goto LABEL_65;
          case 3:
            __int16 v44 = *v30;
            v36[2] = *((unsigned char *)v30 + 2);
LABEL_65:
            *(_WORD *)id v36 = v44;
            break;
          default:
            memcpy(v36, v30, (v35 - v34));
            break;
        }
      }
      *(_DWORD *)(v29 + 44) += v32;
    }
  }
  else
  {
    uint64_t v37 = +[NSAssertionHandler currentHandler];
    __int16 v38 = +[NSString stringWithUTF8String:"void _MSVHasherAppendBytes(MSVHasher * _Nonnull, const void * _Nonnull, size_t)"];
    [v37 handleFailureInFunction:v38 file:@"MSVHasher+Algorithms.h" lineNumber:262 description:@"Cannot append to unknown hasher algorithm"];
  }
}

void sub_1000EBEB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  memset((char *)&v245[1] + 8, 0, 64);
  uint64_t v5 = *(void *)(v4 + 32);
  *(void *)&v245[1] = v5;
  if (v5 > 3000)
  {
    if (v5 <= 4000)
    {
      if (v5 == 3001)
      {
        *((void *)&v245[1] + 1) = sub_10004F8F0((void *)(v4 + 40));
      }
      else if (v5 == 4000)
      {
        CC_MD5_Final((unsigned __int8 *)&v245[1] + 8, (CC_MD5_CTX *)(v4 + 40));
      }
    }
    else
    {
      switch(v5)
      {
        case 4001:
          CC_SHA1_Final((unsigned __int8 *)&v245[1] + 8, (CC_SHA1_CTX *)(v4 + 40));
          break;
        case 4256:
          CC_SHA256_Final((unsigned __int8 *)&v245[1] + 8, (CC_SHA256_CTX *)(v4 + 40));
          break;
        case 4512:
          CC_SHA512_Final((unsigned __int8 *)&v245[1] + 8, (CC_SHA512_CTX *)(v4 + 40));
          break;
      }
    }
    goto LABEL_37;
  }
  if (v5 <= 1999)
  {
    if (v5)
    {
      if (v5 == 1000)
      {
        uint64_t v6 = *(void *)(v4 + 72);
        uint64_t v7 = *(void *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 64) ^ v6;
        uint64_t v9 = *(void *)(v4 + 40) + v7;
        uint64_t v10 = v9 ^ __ROR8__(v7, 51);
        uint64_t v11 = *(void *)(v4 + 56) + v8;
        uint64_t v12 = __ROR8__(v8, 48);
        uint64_t v13 = (v11 ^ v12) + __ROR8__(v9, 32);
        uint64_t v14 = v13 ^ __ROR8__(v11 ^ v12, 43);
        uint64_t v15 = v11 + v10;
        uint64_t v16 = v15 ^ __ROR8__(v10, 47);
        uint64_t v17 = (v13 ^ v6) + v16;
        uint64_t v18 = v17 ^ __ROR8__(v16, 51);
        uint64_t v19 = (__ROR8__(v15, 32) ^ 0xFFLL) + v14;
        uint64_t v20 = __ROR8__(v14, 48);
        uint64_t v21 = __ROR8__(v17, 32) + (v19 ^ v20);
        uint64_t v22 = v21 ^ __ROR8__(v19 ^ v20, 43);
        uint64_t v23 = v18 + v19;
        uint64_t v24 = v23 ^ __ROR8__(v18, 47);
        uint64_t v25 = v24 + v21;
        uint64_t v26 = v25 ^ __ROR8__(v24, 51);
        uint64_t v27 = __ROR8__(v23, 32) + v22;
        uint64_t v28 = __ROR8__(v22, 48);
        uint64_t v29 = __ROR8__(v25, 32) + (v27 ^ v28);
        uint64_t v30 = v29 ^ __ROR8__(v27 ^ v28, 43);
        uint64_t v31 = v26 + v27;
        uint64_t v32 = v31 ^ __ROR8__(v26, 47);
        uint64_t v33 = v32 + v29;
        uint64_t v34 = v33 ^ __ROR8__(v32, 51);
        uint64_t v35 = __ROR8__(v31, 32) + v30;
        uint64_t v36 = __ROR8__(v30, 48);
        uint64_t v37 = __ROR8__(v33, 32) + (v35 ^ v36);
        uint64_t v38 = v37 ^ __ROR8__(v35 ^ v36, 43);
        uint64_t v39 = v34 + v35;
        uint64_t v40 = v39 ^ __ROR8__(v34, 47);
        *(void *)(v4 + 40) = v37;
        *(void *)(v4 + 4_Block_object_dispose(&STACK[0x250], 8) = v40;
        *(void *)(v4 + 56) = __ROR8__(v39, 32);
        *(void *)(v4 + 64) = v38;
        *((void *)&v245[1] + 1) = v40 ^ v37 ^ __ROR8__(v39, 32) ^ v38;
      }
    }
    else
    {
      unsigned int v42 = +[NSAssertionHandler currentHandler];
      int v43 = +[NSString stringWithUTF8String:"MSVHash _MSVHasherFinalize(MSVHasher * _Nonnull)"];
      [v42 handleFailureInFunction:v43 file:@"MSVHasher+Algorithms.h" lineNumber:156 description:@"Cannot finalize unknown hasher algorithm"];
    }
    goto LABEL_37;
  }
  if (v5 == 2000)
  {
    int v44 = *(unsigned __int8 *)(v4 + 51);
    switch(v44)
    {
      case 1:
        int v45 = *(unsigned __int8 *)(v4 + 48);
        break;
      case 2:
        int v45 = *(unsigned __int16 *)(v4 + 48);
        break;
      case 3:
        int v45 = *(unsigned __int16 *)(v4 + 48) | (*(unsigned __int8 *)(v4 + 50) << 16);
        break;
      default:
        unsigned int v54 = *(_DWORD *)(v4 + 40);
        goto LABEL_36;
    }
    unsigned int v54 = (461845907 * ((380141568 * v45) | ((-862048943 * v45) >> 17))) ^ *(_DWORD *)(v4 + 40);
LABEL_36:
    unsigned int v55 = -2048144789 * (v54 ^ *(_DWORD *)(v4 + 44) ^ ((v54 ^ *(_DWORD *)(v4 + 44)) >> 16));
    unsigned int v56 = (-1028477387 * (v55 ^ (v55 >> 13))) ^ ((-1028477387 * (v55 ^ (v55 >> 13))) >> 16);
    *(_DWORD *)(v4 + 40) = v56;
    DWORD2(v245[1]) = v56;
    goto LABEL_37;
  }
  if (v5 == 3000)
  {
    if (*(_DWORD *)(v4 + 44)) {
      int v41 = vaddvq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(*(uint32x4_t *)(v4 + 48), (uint32x4_t)xmmword_100152460), (int8x16_t)vshlq_u32(*(uint32x4_t *)(v4 + 48), (uint32x4_t)xmmword_100152450)));
    }
    else {
      int v41 = *(_DWORD *)(v4 + 56) + 374761393;
    }
    unsigned int v46 = *(_DWORD *)(v4 + 40) + v41;
    int v47 = (int *)(v4 + 64);
    unint64_t v48 = *(_DWORD *)(v4 + 80) & 0xF;
    if (v48 >= 4)
    {
      do
      {
        int v49 = *v47++;
        HIDWORD(v50) = v46 - 1028477379 * v49;
        LODWORD(v50) = HIDWORD(v50);
        unsigned int v46 = 668265263 * (v50 >> 15);
        v48 -= 4;
      }
      while (v48 > 3);
    }
    for (; v48; --v48)
    {
      int v51 = *(unsigned __int8 *)v47;
      int v47 = (int *)((char *)v47 + 1);
      HIDWORD(v52) = v46 + 374761393 * v51;
      LODWORD(v52) = HIDWORD(v52);
      unsigned int v46 = -1640531535 * (v52 >> 21);
    }
    unsigned int v53 = -1028477379 * ((-2048144777 * (v46 ^ (v46 >> 15))) ^ ((-2048144777 * (v46 ^ (v46 >> 15))) >> 13));
    DWORD2(v245[1]) = v53 ^ HIWORD(v53);
  }
LABEL_37:
  long long buf = v245[1];
  long long v247 = v245[2];
  long long v248 = v245[3];
  long long v249 = v245[4];
  uint64_t v250 = *(void *)&v245[5];
  if (*(uint64_t *)&v245[1] > 3999)
  {
    if (*(uint64_t *)&v245[1] > 4255)
    {
      if (*(void *)&v245[1] == 4256)
      {
        id v98 = (unsigned __int8 *)&buf + 8;
        id v99 = (char *)malloc_type_calloc(0x40uLL, 1uLL, 0x100004077774924uLL);
        id v100 = v99;
        for (uint64_t i = 0; i != 64; i += 2)
        {
          unsigned int v102 = *v98++;
          id v103 = &v99[i];
          *id v103 = a0123456789abcd[(unint64_t)v102 >> 4];
          v103[1] = a0123456789abcd[v102 & 0xF];
        }
        id v69 = objc_alloc((Class)NSString);
        uint64_t v70 = v100;
        uint64_t v71 = 64;
      }
      else
      {
        if (*(void *)&v245[1] != 4512) {
          goto LABEL_100;
        }
        id v76 = (unsigned __int8 *)&buf + 8;
        long long v77 = (char *)malloc_type_calloc(0x80uLL, 1uLL, 0x100004077774924uLL);
        long long v78 = v77;
        for (uint64_t j = 0; j != 128; j += 2)
        {
          unsigned int v80 = *v76++;
          id v81 = &v77[j];
          *id v81 = a0123456789abcd[(unint64_t)v80 >> 4];
          v81[1] = a0123456789abcd[v80 & 0xF];
        }
        id v69 = objc_alloc((Class)NSString);
        uint64_t v70 = v78;
        uint64_t v71 = 128;
      }
    }
    else if (*(void *)&v245[1] == 4000)
    {
      id v88 = (unsigned __int8 *)&buf + 8;
      id v89 = (char *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
      id v90 = v89;
      for (uint64_t k = 0; k != 32; k += 2)
      {
        unsigned int v92 = *v88++;
        id v93 = &v89[k];
        *id v93 = a0123456789abcd[(unint64_t)v92 >> 4];
        v93[1] = a0123456789abcd[v92 & 0xF];
      }
      id v69 = objc_alloc((Class)NSString);
      uint64_t v70 = v90;
      uint64_t v71 = 32;
    }
    else
    {
      if (*(void *)&v245[1] != 4001) {
        goto LABEL_100;
      }
      __int16 v63 = (unsigned __int8 *)&buf + 8;
      double v64 = (char *)malloc_type_calloc(0x28uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v65 = v64;
      for (uint64_t m = 0; m != 40; m += 2)
      {
        unsigned int v67 = *v63++;
        __int16 v68 = &v64[m];
        char *v68 = a0123456789abcd[(unint64_t)v67 >> 4];
        v68[1] = a0123456789abcd[v67 & 0xF];
      }
      id v69 = objc_alloc((Class)NSString);
      uint64_t v70 = v65;
      uint64_t v71 = 40;
    }
LABEL_81:
    CFStringRef v87 = (CFStringRef)[v69 initWithBytesNoCopy:v70 length:v71 encoding:4 freeWhenDone:1];
    goto LABEL_82;
  }
  if (*(uint64_t *)&v245[1] > 2999)
  {
    if (*(void *)&v245[1] == 3000)
    {
      LODWORD(v251[0]) = bswap32(DWORD2(buf));
      id v94 = (char *)malloc_type_calloc(8uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v95 = 0;
      long long v96 = v94 + 1;
      do
      {
        unint64_t v97 = *((unsigned __int8 *)v251 + v95);
        *(v96 - 1) = a0123456789abcd[v97 >> 4];
        *long long v96 = a0123456789abcd[v97 & 0xF];
        v96 += 2;
        ++v95;
      }
      while (v95 != 4);
      id v69 = objc_alloc((Class)NSString);
      uint64_t v70 = v94;
      uint64_t v71 = 8;
    }
    else
    {
      if (*(void *)&v245[1] != 3001) {
        goto LABEL_100;
      }
      v251[0] = bswap64(*((unint64_t *)&buf + 1));
      id v72 = (char *)malloc_type_calloc(0x10uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v73 = 0;
      id v74 = v72 + 1;
      do
      {
        unint64_t v75 = *((unsigned __int8 *)v251 + v73);
        *(v74 - 1) = a0123456789abcd[v75 >> 4];
        *id v74 = a0123456789abcd[v75 & 0xF];
        v74 += 2;
        ++v73;
      }
      while (v73 != 8);
      id v69 = objc_alloc((Class)NSString);
      uint64_t v70 = v72;
      uint64_t v71 = 16;
    }
    goto LABEL_81;
  }
  if (*(void *)&v245[1] == 1000)
  {
    uint64_t v82 = *((void *)&buf + 1);
    uint64_t v83 = (char *)v252 + 1;
    uint64_t quot = *((void *)&buf + 1);
    do
    {
      lldiv_t v85 = lldiv(quot, 10);
      uint64_t quot = v85.quot;
      if (v85.rem >= 0) {
        LOBYTE(v86) = v85.rem;
      }
      else {
        uint64_t v86 = -v85.rem;
      }
      *(v83 - 2) = v86 + 48;
      uint64_t v62 = (const UInt8 *)(v83 - 2);
      --v83;
    }
    while (v85.quot);
    if (v82 < 0)
    {
      *(v83 - 2) = 45;
      uint64_t v62 = (const UInt8 *)(v83 - 2);
    }
    __int16 v61 = (char *)((char *)v252 - (char *)v62);
    goto LABEL_71;
  }
  if (*(void *)&v245[1] == 2000)
  {
    uint64_t v57 = DWORD2(buf);
    __int16 v58 = v252;
    do
    {
      ldiv_t v59 = ldiv(v57, 10);
      uint64_t v57 = v59.quot;
      if (v59.rem >= 0) {
        LOBYTE(v60) = v59.rem;
      }
      else {
        uint64_t v60 = -v59.rem;
      }
      *((unsigned char *)v58 - 1) = v60 + 48;
      __int16 v58 = (void *)((char *)v58 - 1);
    }
    while (v59.quot);
    __int16 v61 = (char *)((char *)v252 - (char *)v58);
    uint64_t v62 = (const UInt8 *)v58;
LABEL_71:
    CFStringRef v87 = CFStringCreateWithBytes(0, v62, (CFIndex)v61, 0x8000100u, 0);
LABEL_82:
    CFStringRef v104 = v87;
    goto LABEL_83;
  }
LABEL_100:
  v143 = +[NSAssertionHandler currentHandler];
  v144 = +[NSString stringWithUTF8String:"NSString * _Nonnull _MSVHashGetDigest(MSVHash)"];
  [v143 handleFailureInFunction:v144 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

  CFStringRef v104 = &stru_1001BF9F0;
LABEL_83:
  uint64_t v105 = *(void *)(*(void *)(a1 + 48) + 8);
  memset(&v245[1], 0, 72);
  uint64_t v106 = *(void *)(v105 + 32);
  *(void *)&v245[1] = v106;
  if (v106 > 3000)
  {
    if (v106 <= 4000)
    {
      if (v106 == 3001)
      {
        *((void *)&v245[1] + 1) = sub_10004F8F0((void *)(v105 + 40));
      }
      else if (v106 == 4000)
      {
        CC_MD5_Final((unsigned __int8 *)&v245[1] + 8, (CC_MD5_CTX *)(v105 + 40));
      }
    }
    else
    {
      switch(v106)
      {
        case 4001:
          CC_SHA1_Final((unsigned __int8 *)&v245[1] + 8, (CC_SHA1_CTX *)(v105 + 40));
          break;
        case 4256:
          CC_SHA256_Final((unsigned __int8 *)&v245[1] + 8, (CC_SHA256_CTX *)(v105 + 40));
          break;
        case 4512:
          CC_SHA512_Final((unsigned __int8 *)&v245[1] + 8, (CC_SHA512_CTX *)(v105 + 40));
          break;
      }
    }
    goto LABEL_120;
  }
  if (v106 <= 1999)
  {
    if (v106)
    {
      if (v106 == 1000)
      {
        uint64_t v107 = *(void *)(v105 + 72);
        uint64_t v108 = *(void *)(v105 + 48);
        uint64_t v109 = *(void *)(v105 + 64) ^ v107;
        uint64_t v110 = *(void *)(v105 + 40) + v108;
        uint64_t v111 = v110 ^ __ROR8__(v108, 51);
        uint64_t v112 = *(void *)(v105 + 56) + v109;
        uint64_t v113 = __ROR8__(v109, 48);
        uint64_t v114 = (v112 ^ v113) + __ROR8__(v110, 32);
        uint64_t v115 = v114 ^ __ROR8__(v112 ^ v113, 43);
        uint64_t v116 = v112 + v111;
        uint64_t v117 = v116 ^ __ROR8__(v111, 47);
        uint64_t v118 = (v114 ^ v107) + v117;
        uint64_t v119 = v118 ^ __ROR8__(v117, 51);
        uint64_t v120 = (__ROR8__(v116, 32) ^ 0xFFLL) + v115;
        uint64_t v121 = __ROR8__(v115, 48);
        uint64_t v122 = __ROR8__(v118, 32) + (v120 ^ v121);
        uint64_t v123 = v122 ^ __ROR8__(v120 ^ v121, 43);
        uint64_t v124 = v119 + v120;
        uint64_t v125 = v124 ^ __ROR8__(v119, 47);
        uint64_t v126 = v125 + v122;
        uint64_t v127 = v126 ^ __ROR8__(v125, 51);
        uint64_t v128 = __ROR8__(v124, 32) + v123;
        uint64_t v129 = __ROR8__(v123, 48);
        uint64_t v130 = __ROR8__(v126, 32) + (v128 ^ v129);
        uint64_t v131 = v130 ^ __ROR8__(v128 ^ v129, 43);
        uint64_t v132 = v127 + v128;
        uint64_t v133 = v132 ^ __ROR8__(v127, 47);
        uint64_t v134 = v133 + v130;
        uint64_t v135 = v134 ^ __ROR8__(v133, 51);
        uint64_t v136 = __ROR8__(v132, 32) + v131;
        uint64_t v137 = __ROR8__(v131, 48);
        uint64_t v138 = __ROR8__(v134, 32) + (v136 ^ v137);
        uint64_t v139 = v138 ^ __ROR8__(v136 ^ v137, 43);
        uint64_t v140 = v135 + v136;
        uint64_t v141 = v140 ^ __ROR8__(v135, 47);
        *(void *)(v105 + 40) = v138;
        *(void *)(v105 + 4_Block_object_dispose(&STACK[0x250], 8) = v141;
        *(void *)(v105 + 56) = __ROR8__(v140, 32);
        *(void *)(v105 + 64) = v139;
        *((void *)&v245[1] + 1) = v141 ^ v138 ^ __ROR8__(v140, 32) ^ v139;
      }
    }
    else
    {
      v145 = +[NSAssertionHandler currentHandler];
      v146 = +[NSString stringWithUTF8String:"MSVHash _MSVHasherFinalize(MSVHasher * _Nonnull)"];
      [v145 handleFailureInFunction:v146 file:@"MSVHasher+Algorithms.h" lineNumber:156 description:@"Cannot finalize unknown hasher algorithm"];
    }
    goto LABEL_120;
  }
  if (v106 == 2000)
  {
    int v147 = *(unsigned __int8 *)(v105 + 51);
    switch(v147)
    {
      case 1:
        int v148 = *(unsigned __int8 *)(v105 + 48);
        break;
      case 2:
        int v148 = *(unsigned __int16 *)(v105 + 48);
        break;
      case 3:
        int v148 = *(unsigned __int16 *)(v105 + 48) | (*(unsigned __int8 *)(v105 + 50) << 16);
        break;
      default:
        unsigned int v157 = *(_DWORD *)(v105 + 40);
        goto LABEL_119;
    }
    unsigned int v157 = (461845907 * ((380141568 * v148) | ((-862048943 * v148) >> 17))) ^ *(_DWORD *)(v105 + 40);
LABEL_119:
    unsigned int v158 = -2048144789 * (v157 ^ *(_DWORD *)(v105 + 44) ^ ((v157 ^ *(_DWORD *)(v105 + 44)) >> 16));
    unsigned int v159 = (-1028477387 * (v158 ^ (v158 >> 13))) ^ ((-1028477387 * (v158 ^ (v158 >> 13))) >> 16);
    *(_DWORD *)(v105 + 40) = v159;
    DWORD2(v245[1]) = v159;
    goto LABEL_120;
  }
  if (v106 == 3000)
  {
    if (*(_DWORD *)(v105 + 44)) {
      int v142 = vaddvq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(*(uint32x4_t *)(v105 + 48), (uint32x4_t)xmmword_100152460), (int8x16_t)vshlq_u32(*(uint32x4_t *)(v105 + 48), (uint32x4_t)xmmword_100152450)));
    }
    else {
      int v142 = *(_DWORD *)(v105 + 56) + 374761393;
    }
    unsigned int v149 = *(_DWORD *)(v105 + 40) + v142;
    id v150 = (int *)(v105 + 64);
    unint64_t v151 = *(_DWORD *)(v105 + 80) & 0xF;
    if (v151 >= 4)
    {
      do
      {
        int v152 = *v150++;
        HIDWORD(v153) = v149 - 1028477379 * v152;
        LODWORD(v153) = HIDWORD(v153);
        unsigned int v149 = 668265263 * (v153 >> 15);
        v151 -= 4;
      }
      while (v151 > 3);
    }
    for (; v151; --v151)
    {
      int v154 = *(unsigned __int8 *)v150;
      id v150 = (int *)((char *)v150 + 1);
      HIDWORD(v155) = v149 + 374761393 * v154;
      LODWORD(v155) = HIDWORD(v155);
      unsigned int v149 = -1640531535 * (v155 >> 21);
    }
    unsigned int v156 = -1028477379 * ((-2048144777 * (v149 ^ (v149 >> 15))) ^ ((-2048144777 * (v149 ^ (v149 >> 15))) >> 13));
    DWORD2(v245[1]) = v156 ^ HIWORD(v156);
  }
LABEL_120:
  long long buf = v245[1];
  long long v247 = v245[2];
  long long v248 = v245[3];
  long long v249 = v245[4];
  uint64_t v250 = *(void *)&v245[5];
  if (*(uint64_t *)&v245[1] > 3999)
  {
    if (*(uint64_t *)&v245[1] > 4255)
    {
      if (*(void *)&v245[1] == 4256)
      {
        v201 = (unsigned __int8 *)&buf + 8;
        v202 = (char *)malloc_type_calloc(0x40uLL, 1uLL, 0x100004077774924uLL);
        v203 = v202;
        for (uint64_t n = 0; n != 64; n += 2)
        {
          unsigned int v205 = *v201++;
          v206 = &v202[n];
          char *v206 = a0123456789abcd[(unint64_t)v205 >> 4];
          v206[1] = a0123456789abcd[v205 & 0xF];
        }
        id v172 = objc_alloc((Class)NSString);
        v173 = v203;
        uint64_t v174 = 64;
      }
      else
      {
        if (*(void *)&v245[1] != 4512) {
          goto LABEL_197;
        }
        v179 = (unsigned __int8 *)&buf + 8;
        id v180 = (char *)malloc_type_calloc(0x80uLL, 1uLL, 0x100004077774924uLL);
        v181 = v180;
        for (iuint64_t i = 0; ii != 128; ii += 2)
        {
          unsigned int v183 = *v179++;
          id v184 = &v180[ii];
          *id v184 = a0123456789abcd[(unint64_t)v183 >> 4];
          v184[1] = a0123456789abcd[v183 & 0xF];
        }
        id v172 = objc_alloc((Class)NSString);
        v173 = v181;
        uint64_t v174 = 128;
      }
    }
    else if (*(void *)&v245[1] == 4000)
    {
      v191 = (unsigned __int8 *)&buf + 8;
      v192 = (char *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
      id v193 = v192;
      for (juint64_t j = 0; jj != 32; jj += 2)
      {
        unsigned int v195 = *v191++;
        v196 = &v192[jj];
        char *v196 = a0123456789abcd[(unint64_t)v195 >> 4];
        v196[1] = a0123456789abcd[v195 & 0xF];
      }
      id v172 = objc_alloc((Class)NSString);
      v173 = v193;
      uint64_t v174 = 32;
    }
    else
    {
      if (*(void *)&v245[1] != 4001) {
        goto LABEL_197;
      }
      v166 = (unsigned __int8 *)&buf + 8;
      v167 = (char *)malloc_type_calloc(0x28uLL, 1uLL, 0x100004077774924uLL);
      id v168 = v167;
      for (kuint64_t k = 0; kk != 40; kk += 2)
      {
        unsigned int v170 = *v166++;
        id v171 = &v167[kk];
        *id v171 = a0123456789abcd[(unint64_t)v170 >> 4];
        v171[1] = a0123456789abcd[v170 & 0xF];
      }
      id v172 = objc_alloc((Class)NSString);
      v173 = v168;
      uint64_t v174 = 40;
    }
LABEL_164:
    CFStringRef v190 = (CFStringRef)[v172 initWithBytesNoCopy:v173 length:v174 encoding:4 freeWhenDone:1];
    goto LABEL_165;
  }
  if (*(uint64_t *)&v245[1] > 2999)
  {
    if (*(void *)&v245[1] == 3000)
    {
      LODWORD(v251[0]) = bswap32(DWORD2(buf));
      id v197 = (char *)malloc_type_calloc(8uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v198 = 0;
      id v199 = v197 + 1;
      do
      {
        unint64_t v200 = *((unsigned __int8 *)v251 + v198);
        *(v199 - 1) = a0123456789abcd[v200 >> 4];
        *id v199 = a0123456789abcd[v200 & 0xF];
        v199 += 2;
        ++v198;
      }
      while (v198 != 4);
      id v172 = objc_alloc((Class)NSString);
      v173 = v197;
      uint64_t v174 = 8;
    }
    else
    {
      if (*(void *)&v245[1] != 3001) {
        goto LABEL_197;
      }
      v251[0] = bswap64(*((unint64_t *)&buf + 1));
      v175 = (char *)malloc_type_calloc(0x10uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v176 = 0;
      v177 = v175 + 1;
      do
      {
        unint64_t v178 = *((unsigned __int8 *)v251 + v176);
        *(v177 - 1) = a0123456789abcd[v178 >> 4];
        unsigned char *v177 = a0123456789abcd[v178 & 0xF];
        v177 += 2;
        ++v176;
      }
      while (v176 != 8);
      id v172 = objc_alloc((Class)NSString);
      v173 = v175;
      uint64_t v174 = 16;
    }
    goto LABEL_164;
  }
  if (*(void *)&v245[1] == 1000)
  {
    uint64_t v185 = *((void *)&buf + 1);
    id v186 = (char *)v252 + 1;
    uint64_t v187 = *((void *)&buf + 1);
    do
    {
      lldiv_t v188 = lldiv(v187, 10);
      uint64_t v187 = v188.quot;
      if (v188.rem >= 0) {
        LOBYTE(v189) = v188.rem;
      }
      else {
        uint64_t v189 = -v188.rem;
      }
      *(v186 - 2) = v189 + 48;
      unsigned __int16 v165 = (const UInt8 *)(v186 - 2);
      --v186;
    }
    while (v188.quot);
    if (v185 < 0)
    {
      *(v186 - 2) = 45;
      unsigned __int16 v165 = (const UInt8 *)(v186 - 2);
    }
    v164 = (char *)((char *)v252 - (char *)v165);
    goto LABEL_154;
  }
  if (*(void *)&v245[1] == 2000)
  {
    uint64_t v160 = DWORD2(buf);
    long long v161 = v252;
    do
    {
      ldiv_t v162 = ldiv(v160, 10);
      uint64_t v160 = v162.quot;
      if (v162.rem >= 0) {
        LOBYTE(v163) = v162.rem;
      }
      else {
        uint64_t v163 = -v162.rem;
      }
      *((unsigned char *)v161 - 1) = v163 + 48;
      long long v161 = (void *)((char *)v161 - 1);
    }
    while (v162.quot);
    v164 = (char *)((char *)v252 - (char *)v161);
    unsigned __int16 v165 = (const UInt8 *)v161;
LABEL_154:
    CFStringRef v190 = CFStringCreateWithBytes(0, v165, (CFIndex)v164, 0x8000100u, 0);
LABEL_165:
    CFStringRef v207 = v190;
    goto LABEL_166;
  }
LABEL_197:
  v231 = +[NSAssertionHandler currentHandler];
  v232 = +[NSString stringWithUTF8String:"NSString * _Nonnull _MSVHashGetDigest(MSVHash)"];
  [v231 handleFailureInFunction:v232 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

  CFStringRef v207 = &stru_1001BF9F0;
LABEL_166:
  v244[0] = @"cloud-ids";
  v208 = [*(id *)(a1 + 32) containerCloudID];
  v243 = v208;
  v209 = +[NSArray arrayWithObjects:&v243 count:1];
  v244[1] = @"artwork";
  *(void *)&v245[0] = v209;
  v241[0] = @"file-size";
  v210 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) assetFileSize]);
  v241[1] = @"hash-values";
  v242[0] = v210;
  v239[0] = @"md5";
  v239[1] = @"sha256";
  id v235 = (__CFString *)v207;
  v236 = (__CFString *)v104;
  v240[0] = v104;
  v240[1] = v207;
  v211 = +[NSDictionary dictionaryWithObjects:v240 forKeys:v239 count:2];
  v242[1] = v211;
  uint64_t v212 = +[NSDictionary dictionaryWithObjects:v242 forKeys:v241 count:2];
  *((void *)&v245[0] + 1) = v212;
  id v213 = +[NSDictionary dictionaryWithObjects:v245 forKeys:v244 count:2];

  v237[0] = @"dsid";
  id v214 = [*(id *)(a1 + 32) dsid];
  v238[0] = v214;
  v237[1] = @"cuid";
  v215 = [*(id *)(a1 + 32) cuid];
  v238[1] = v215;
  v237[2] = @"troveid";
  v216 = [*(id *)(a1 + 32) troveID];
  v237[3] = @"payload";
  v238[2] = v216;
  v238[3] = v213;
  v217 = +[NSDictionary dictionaryWithObjects:v238 forKeys:v237 count:4];

  v218 = [*(id *)(a1 + 32) _requestWithURL:0 URLBagKey:ICURLBagKeyCloudAssetsUpdate timeoutInterval:v217 additionalBodyFields:60.0];
  if (v218)
  {
    id v234 = v3;
    v219 = [*(id *)(a1 + 32) _responseBodyForRequest:v218 retryTimeout:@"initiate asset change" debugName:180.0];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v220 = [v219 objectForKey:@"back-off-delay-in-ms"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        unsigned int v221 = [v220 unsignedIntValue];
      }
      else {
        unsigned int v221 = 0;
      }
      v224 = [v219 objectForKey:@"upload-responses-url"];
      objc_opt_class();
      unsigned int v233 = v221;
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v224 length])
      {
        uint64_t v225 = +[NSURL URLWithString:v224];
      }
      else
      {
        uint64_t v225 = 0;
      }
      v226 = [v219 objectForKey:@"download-requests-url"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v226 length])
      {
        v223 = +[NSURL URLWithString:v226];
      }
      else
      {
        v223 = 0;
      }

      if (v223)
      {
        if (v225)
        {
          if (v233)
          {
            v227 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
            if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v233;
              _os_log_impl((void *)&_mh_execute_header, v227, OS_LOG_TYPE_DEFAULT, "Backing off before sending downloadRequestsRequest for %u ms", (uint8_t *)&buf, 8u);
            }

            usleep(1000 * v233);
          }
          [*(id *)(a1 + 32) _downloadRequestsFromURL:v223 uploadResponsesURL:v225];
          id v228 = v223;
          v223 = (void *)v225;
          goto LABEL_195;
        }
        v229 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v229, OS_LOG_TYPE_FAULT))
        {
          LOWORD(buf) = 0;
          v230 = "Failed to get uploadResponsesURL";
          goto LABEL_193;
        }
        goto LABEL_194;
      }
      v223 = (void *)v225;
    }
    else
    {
      v223 = 0;
    }
    v229 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v229, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      v230 = "Failed to get downloadRequestsURL";
LABEL_193:
      _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_FAULT, v230, (uint8_t *)&buf, 2u);
    }
LABEL_194:

    [*(id *)(a1 + 32) setStatus:2];
    id v228 = +[NSError ic_cloudClientErrorWithCode:2014 userInfo:0];
    [*(id *)(a1 + 32) setError:v228];
LABEL_195:

    id v3 = v234;
    goto LABEL_196;
  }
  v222 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_ERROR, "SagaUploadPlaylistArtworkOperation failed to create url request - aborting", (uint8_t *)&buf, 2u);
  }

  [*(id *)(a1 + 32) setStatus:3];
LABEL_196:
}

_DWORD *sub_1000ED448(_DWORD *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    uint64_t v4 = __src;
    uint64_t v5 = result;
    int v6 = result[1];
    unsigned int v7 = *result + __n;
    BOOL v9 = __n > 0xF || v7 > 0xF;
    *uint64_t result = v7;
    result[1] = v6 | v9;
    uint64_t v10 = result[10];
    if (v10 + __n <= 0xF)
    {
      uint64_t result = memcpy((char *)result + v10 + 24, __src, __n);
      LODWORD(v11) = v5[10] + v3;
LABEL_18:
      v5[10] = v11;
      return result;
    }
    uint64_t v12 = &__src[__n];
    if (v10)
    {
      uint64_t result = memcpy((char *)result + v10 + 24, __src, (16 - v10));
      HIDWORD(v13) = v5[2] - 2048144777 * v5[6];
      LODWORD(v13) = HIDWORD(v13);
      int v14 = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[3] - 2048144777 * v5[7];
      LODWORD(v13) = HIDWORD(v13);
      v5[2] = v14;
      v5[3] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[4] - 2048144777 * v5[8];
      LODWORD(v13) = HIDWORD(v13);
      void v5[4] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[5] - 2048144777 * v5[9];
      LODWORD(v13) = HIDWORD(v13);
      void v5[5] = -1640531535 * (v13 >> 19);
      v4 += (16 - v5[10]);
      v5[10] = 0;
    }
    if (v4 <= v12 - 16)
    {
      int v15 = v5[2];
      int v16 = v5[3];
      int v17 = v5[4];
      int v18 = v5[5];
      do
      {
        HIDWORD(v19) = v15 - 2048144777 * *(_DWORD *)v4;
        LODWORD(v19) = HIDWORD(v19);
        int v15 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v16 - 2048144777 * *((_DWORD *)v4 + 1);
        LODWORD(v19) = HIDWORD(v19);
        int v16 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v17 - 2048144777 * *((_DWORD *)v4 + 2);
        LODWORD(v19) = HIDWORD(v19);
        int v17 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v18 - 2048144777 * *((_DWORD *)v4 + 3);
        LODWORD(v19) = HIDWORD(v19);
        int v18 = -1640531535 * (v19 >> 19);
        v4 += 16;
      }
      while (v4 <= v12 - 16);
      v5[2] = v15;
      v5[3] = v16;
      void v5[4] = v17;
      void v5[5] = v18;
    }
    if (v4 < v12)
    {
      size_t v11 = v12 - v4;
      uint64_t result = memcpy(v5 + 6, v4, v11);
      goto LABEL_18;
    }
  }
  return result;
}

char *sub_1000ED5F8(char *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    uint64_t v4 = __src;
    uint64_t v5 = result;
    *(void *)result += __n;
    uint64_t v6 = *((unsigned int *)result + 18);
    if (v6 + __n <= 0x1F)
    {
      uint64_t result = (char *)memcpy(&result[v6 + 40], __src, __n);
      LODWORD(v7) = *((_DWORD *)v5 + 18) + v3;
LABEL_12:
      *((_DWORD *)v5 + 1_Block_object_dispose(&STACK[0x250], 8) = v7;
      return result;
    }
    uint64_t v8 = &__src[__n];
    if (v6)
    {
      uint64_t result = (char *)memcpy(&result[v6 + 40], __src, (32 - v6));
      uint64_t v9 = __ROR8__(*((void *)v5 + 2) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 6), 33);
      *((void *)v5 + 1) = 0x9E3779B185EBCA87
                          * __ROR8__(*((void *)v5 + 1) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 5), 33);
      *((void *)v5 + 2) = 0x9E3779B185EBCA87 * v9;
      unint64_t v10 = 0x9E3779B185EBCA87 * __ROR8__(*((void *)v5 + 4) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 8), 33);
      *((void *)v5 + 3) = 0x9E3779B185EBCA87
                          * __ROR8__(*((void *)v5 + 3) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 7), 33);
      *((void *)v5 + 4) = v10;
      v4 += (32 - *((_DWORD *)v5 + 18));
      *((_DWORD *)v5 + 1_Block_object_dispose(&STACK[0x250], 8) = 0;
    }
    if (v4 + 32 <= v8)
    {
      unint64_t v11 = *((void *)v5 + 1);
      unint64_t v12 = *((void *)v5 + 2);
      unint64_t v14 = *((void *)v5 + 3);
      unint64_t v13 = *((void *)v5 + 4);
      do
      {
        unint64_t v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *(void *)v4, 33);
        unint64_t v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 1), 33);
        unint64_t v14 = 0x9E3779B185EBCA87 * __ROR8__(v14 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 2), 33);
        unint64_t v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 3), 33);
        v4 += 32;
      }
      while (v4 <= v8 - 32);
      *((void *)v5 + 1) = v11;
      *((void *)v5 + 2) = v12;
      *((void *)v5 + 3) = v14;
      *((void *)v5 + 4) = v13;
    }
    if (v4 < v8)
    {
      size_t v7 = v8 - v4;
      uint64_t result = (char *)memcpy(v5 + 40, v4, v7);
      goto LABEL_12;
    }
  }
  return result;
}

void sub_1000EE374(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ICRemoteRequestOperationExecutionResponse);
  uint64_t v5 = [*(id *)(a1 + 32) response];
  uint64_t v6 = objc_msgSend(v3, "msv_errorByRemovingUnsafeUserInfo");

  id v7 = [v4 initWithRemoteRequestOperationResponse:v5 remoteRequestOperationError:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void *sub_1000EE4A4(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 16))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + 16) = 0;
    [*(id *)(result[4] + 24) invalidate];
    id v3 = *(void **)(v2[4] + 24);
    return [v3 setDelegate:0];
  }
  return result;
}

void *sub_1000EE57C(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 16))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + 16) = 1;
    objc_msgSend(*(id *)(result[4] + 24), "setDelegate:");
    id v3 = *(void **)(v2[4] + 24);
    return [v3 resume];
  }
  return result;
}

uint64_t sub_1000EE68C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 16);
  return result;
}

void sub_1000EE7EC(id a1)
{
  qword_1001F39C0 = [[CloudRemoteRequestOperationExecutionServiceListener alloc] _init];

  _objc_release_x1();
}

void sub_1000EE890(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2 == 0;
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setError:v4];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000EF2AC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  id v4 = a2;
  [v4 writeUInt32:v3 withCode:1836413810];
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000EF37C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  ICDAAPUtilitiesWriteContainer();
}

void sub_1000EF428(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 writeUInt8:1 withCode:1634029643];
  if (*(void *)(a1 + 32))
  {
    id v4 = +[ICDAAPPropertyInfo sharedContainerPropertyInfo];
    id v5 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000EF580;
    void v9[3] = &unk_1001BDA60;
    id v10 = v4;
    id v11 = v3;
    id v6 = v4;
    [v5 enumerateKeysAndObjectsUsingBlock:v9];
  }
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = v7;
    ICDAAPUtilitiesWriteContainer();
  }
}

void sub_1000EF580(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasInfoForProperty:v5])
  {
    [*(id *)(a1 + 32) elementCodeForProperty:v5];
    [*(id *)(a1 + 32) valueTypeForProperty:v5];
    ICDAAPUtilitiesWriteProperty();
  }
  else
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No DAAP code found for container property: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1000EF698(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000EF730;
  v6[3] = &unk_1001BDA88;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateCloudItemIDsUsingBlock:v6];
}

uint64_t sub_1000EF730(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3 == 2)
  {
    id v8 = v5;
    id v5 = [*(id *)(a1 + 32) writeString:v5 withCode:1634025833];
  }
  else if (a3 == 1)
  {
    id v8 = v5;
    id v5 = objc_msgSend(*(id *)(a1 + 32), "writeUInt64:withCode:", objc_msgSend(v5, "unsignedLongLongValue"), 1634025833);
  }
  else
  {
    if (a3) {
      goto LABEL_8;
    }
    id v8 = v5;
    id v5 = objc_msgSend(*(id *)(a1 + 32), "writeUInt32:withCode:", objc_msgSend(v5, "unsignedIntValue"), 1835624804);
  }
  id v6 = v8;
LABEL_8:

  return _objc_release_x1(v5, v6);
}

os_log_t sub_1000EFC9C()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "Default");

  return v0;
}

os_log_t sub_1000EFCD4()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "Artwork");

  return v0;
}

os_log_t sub_1000EFD0C()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");

  return v0;
}

os_log_t sub_1000EFD44()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "Connections");

  return v0;
}

os_log_t sub_1000EFD7C()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "Push");

  return v0;
}

os_log_t sub_1000EFDB4()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "XPC");

  return v0;
}

os_log_t sub_1000EFDEC()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "XPC_Oversize");

  return v0;
}

os_log_t sub_1000EFE24()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");

  return v0;
}

os_log_t sub_1000EFE5C()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "LibraryRecommendations");

  return v0;
}

os_log_t sub_1000EFE94()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "CloudLibraryCoordinator");

  return v0;
}

os_log_t sub_1000EFECC()
{
  os_log_t v0 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");

  return v0;
}

void sub_1000F075C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55,uint64_t a56,char a57)
{
  _Block_object_dispose((const void *)(v57 - 176), 8);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(&a55);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0810(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F0820(uint64_t a1)
{
}

void sub_1000F0828(uint64_t a1, float a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    *(float *)&double v4 = a2 * 0.99;
    id v5 = WeakRetained;
    [WeakRetained setProgress:v4];
    id WeakRetained = v5;
  }
}

void sub_1000F0884(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v14 = 138543618;
      uint64_t v15 = v6;
      __int16 v16 = 2114;
      id v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ - Import failed with error = %{public}@", (uint8_t *)&v14, 0x16u);
    }
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    id v5 = WeakRetained;
    if (WeakRetained)
    {
      id v8 = [WeakRetained supportedMediaKinds];
      id v9 = [v8 componentsJoinedByString:@","];

      id v10 = [v5 musicLibrary];
      [v10 setJaliscoLastSupportedMediaKinds:v9];
    }
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v4;
  id v13 = v4;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000F09E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    id v42 = 0;
    uint64_t v6 = 0;
    id v7 = 0;
    goto LABEL_63;
  }
  uint64_t v3 = a3;
  id v5 = 0;
  uint64_t v6 = 0;
  id v7 = 0;
  id v8 = (void *)(a2 + 16);
  do
  {
    int v9 = *((_DWORD *)v8 - 4);
    switch(v9)
    {
      case 1634026357:
        id v40 = v5;
        if (v8[1] == 2) {
          id v12 = [objc_alloc((Class)NSString) initWithBytesNoCopy:*(v8 - 1) length:*v8 encoding:4 freeWhenDone:0];
        }
        else {
          id v12 = 0;
        }
        uint64_t v15 = [*(id *)(a1 + 32) _chapterDataFromURL:v12];

        __int16 v16 = +[NSURL URLWithString:v12];
        uint64_t v17 = [v16 URLByDeletingLastPathComponent];

        id v7 = (void *)v15;
        uint64_t v6 = (void *)v17;
        id v5 = v40;
        break;
      case 1634951787:
        uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
        if (*(unsigned char *)(v13 + 24))
        {
          BOOL v14 = 1;
        }
        else
        {
          unsigned int v18 = -1;
          unint64_t v19 = (unsigned int *)*(v8 - 1);
          switch(*v8)
          {
            case 1:
              unsigned int v18 = *(unsigned __int8 *)v19;
              break;
            case 2:
              unsigned int v18 = __rev16(*(unsigned __int16 *)v19);
              break;
            case 4:
              unsigned int v24 = *v19;
              goto LABEL_27;
            case 8:
              unsigned int v24 = v19[1];
LABEL_27:
              unsigned int v18 = bswap32(v24);
              break;
            default:
              break;
          }
          BOOL v14 = v18 != 0;
        }
        *(unsigned char *)(v13 + 24) = v14;
        break;
      case 1835625572:
        uint64_t v10 = v8[1];
        switch(v10)
        {
          case 1:
            id v20 = 0;
            switch(*v8)
            {
              case 1:
                id v41 = v5;
                id v21 = objc_alloc((Class)NSNumber);
                uint64_t v22 = 255;
                uint64_t v23 = (unsigned __int8 *)*(v8 - 1);
                switch(*v8)
                {
                  case 1:
                    goto LABEL_38;
                  case 2:
                    ++v23;
                    goto LABEL_38;
                  case 4:
                    v23 += 3;
                    goto LABEL_38;
                  case 8:
                    v23 += 7;
LABEL_38:
                    uint64_t v22 = *v23;
                    break;
                  default:
                    break;
                }
                id v34 = [v21 initWithUnsignedChar:v22];
                goto LABEL_54;
              case 2:
                id v41 = v5;
                id v25 = objc_alloc((Class)NSNumber);
                uint64_t v26 = 0xFFFFLL;
                uint64_t v27 = (unsigned __int8 *)*(v8 - 1);
                switch(*v8)
                {
                  case 1:
                    uint64_t v26 = *v27;
                    break;
                  case 2:
                    unsigned int v35 = *(unsigned __int16 *)v27;
                    goto LABEL_43;
                  case 4:
                    unsigned int v35 = *((unsigned __int16 *)v27 + 1);
                    goto LABEL_43;
                  case 8:
                    unsigned int v35 = *((unsigned __int16 *)v27 + 3);
LABEL_43:
                    uint64_t v26 = bswap32(v35) >> 16;
                    break;
                  default:
                    break;
                }
                id v34 = [v25 initWithUnsignedShort:v26];
                goto LABEL_54;
              case 4:
                id v41 = v5;
                id v28 = objc_alloc((Class)NSNumber);
                uint64_t v29 = 0xFFFFFFFFLL;
                uint64_t v30 = (unsigned int *)*(v8 - 1);
                switch(*v8)
                {
                  case 1:
                    uint64_t v29 = *(unsigned __int8 *)v30;
                    break;
                  case 2:
                    uint64_t v29 = __rev16(*(unsigned __int16 *)v30);
                    break;
                  case 4:
                    unsigned int v36 = *v30;
                    goto LABEL_48;
                  case 8:
                    unsigned int v36 = v30[1];
LABEL_48:
                    uint64_t v29 = bswap32(v36);
                    break;
                  default:
                    break;
                }
                id v34 = [v28 initWithUnsignedLong:v29];
                goto LABEL_54;
              case 8:
                id v41 = v5;
                id v31 = objc_alloc((Class)NSNumber);
                unint64_t v32 = -1;
                uint64_t v33 = (unsigned __int8 *)*(v8 - 1);
                switch(*v8)
                {
                  case 1:
                    unint64_t v32 = *v33;
                    break;
                  case 2:
                    unint64_t v32 = __rev16(*(unsigned __int16 *)v33);
                    break;
                  case 4:
                    unint64_t v32 = bswap32(*(_DWORD *)v33);
                    break;
                  case 8:
                    unint64_t v32 = (((unint64_t)*v33 << 56) | ((unint64_t)v33[1] << 48) | ((unint64_t)v33[2] << 40) | ((unint64_t)v33[3] << 32) | ((unint64_t)v33[4] << 24) | ((unint64_t)v33[5] << 16) | ((unint64_t)v33[6] << 8))
                        + v33[7];
                    break;
                  default:
                    break;
                }
                id v34 = [v31 initWithUnsignedLongLong:v32];
LABEL_54:
                id v20 = v34;
                id v5 = v41;
                break;
              default:
                goto LABEL_55;
            }
            goto LABEL_55;
          case 3:
            id v39 = v5;
            id v11 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(v8 - 1) length:*v8 freeWhenDone:0];
            break;
          case 2:
            id v39 = v5;
            id v11 = [objc_alloc((Class)NSString) initWithBytesNoCopy:*(v8 - 1) length:*v8 encoding:4 freeWhenDone:0];
            break;
          default:
            id v20 = 0;
            goto LABEL_55;
        }
        id v5 = v39;
        id v20 = v11;
LABEL_55:

        id v5 = v20;
        break;
      default:
        break;
    }
    v8 += 4;
    --v3;
  }
  while (v3);
  if (v5 && v7)
  {
    id v42 = v5;
    if (v6)
    {
      uint64_t v37 = *(void **)(a1 + 40);
      uint64_t v38 = [*(id *)(a1 + 32) _chapterArtworkURLsForData:v7 baseURL:v6];
      [v37 setObject:v38 forKey:v42];
    }
  }
  else
  {
    id v42 = v5;
  }
LABEL_63:
}

id sub_1000F0F80(id a1, id a2)
{
  return [a2 path];
}

void sub_1000F1D94(uint64_t a1, uint64_t a2, id *a3)
{
  id v6 = *a3;
  id v5 = a3[1];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [*(id *)(a1 + 32) setObject:v5 forKey:v6];
    }
  }
}

intptr_t sub_1000F1FA4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000F2530(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableArray array];
  id v5 = [v3 executeQuery:@"SELECT DISTINCT (fetchable_artwork_token), subscription_store_item_id, media_type FROM best_artwork_token LEFT OUTER JOIN artwork ON fetchable_artwork_token = artwork_token JOIN item_store ON entity_pid = item_store.item_pid AND entity_type = ? JOIN item USING (item_pid) WHERE artwork_token IS NULL AND best_artwork_token.artwork_type = ? AND fetchable_artwork_source_type = ? GROUP BY fetchable_artwork_token", &off_1001CCD48 withParameters];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000F2644;
  void v9[3] = &unk_1001BEBB0;
  id v6 = *(id *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 48);
  id v10 = v6;
  id v11 = v4;
  id v7 = v4;
  [v5 enumerateRowsWithBlock:v9];
  id v8 = [*(id *)(a1 + 40) artworkImporter];
  [v8 importCloudArtworkForRequests:v7];
}

void sub_1000F2644(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [[CloudArtworkImportRequest alloc] initWithClientIdentity:*(void *)(a1 + 32)];
  id v4 = [v3 stringForColumnIndex:0];
  [(CloudArtworkImportRequest *)v6 setToken:v4];

  -[CloudArtworkImportRequest setCloudID:](v6, "setCloudID:", [v3 int64ForColumnIndex:1]);
  id v5 = [v3 intForColumnIndex:2];

  [(CloudArtworkImportRequest *)v6 setMediaType:v5];
  [(CloudArtworkImportRequest *)v6 setArtworkType:1];
  [(CloudArtworkImportRequest *)v6 setAllowsCellularData:*(unsigned __int8 *)(a1 + 48)];
  [*(id *)(a1 + 40) addObject:v6];
}

void sub_1000F2CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  objc_destroyWeak(v53);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2D70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F2D80(uint64_t a1)
{
}

uint64_t sub_1000F2D88(void *a1)
{
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    uint64_t v2 = *(void *)(a1[6] + 8);
    id v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
  }
  id v4 = *(uint64_t (**)(void))(a1[4] + 16);

  return v4();
}

void sub_1000F2E08(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableCopy];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v4 = [WeakRetained cloudArtworkInfoDictionaries];

  id v5 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v53 = v6;
    __int16 v54 = 2048;
    id v55 = [v4 count];
    __int16 v56 = 2114;
    id v57 = (id)objc_opt_class();
    id v7 = v57;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ - Received %lu artwork info lookup dictionaries for lookup operation in  %{public}@ IDs.", buf, 0x20u);
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v44 objects:v51 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v45;
    uint64_t v12 = ICArtworkInfoKeySagaID;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v11) {
          objc_enumerationMutation(v8);
        }
        BOOL v14 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        uint64_t v15 = [v14 objectForKeyedSubscript:v12];
        [v2 removeObject:v15];
        [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v14];
      }
      id v10 = [v8 countByEnumeratingWithState:&v44 objects:v51 count:16];
    }
    while (v10);
  }
  uint64_t v38 = (void *)a1;
  uint64_t v37 = v8;

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v16 = v2;
  id v17 = [v16 countByEnumeratingWithState:&v40 objects:v50 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v41;
    id v20 = "com.apple.amp.itunescloudd";
    id v21 = "Artwork";
    do
    {
      for (uint64_t j = 0; j != v18; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v41 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v23 = *(void **)(*((void *)&v40 + 1) + 8 * (void)j);
        unsigned int v24 = os_log_create(v20, v21);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v25 = v18;
          uint64_t v26 = v20;
          uint64_t v27 = v38[5];
          id v28 = v21;
          id v29 = v16;
          uint64_t v30 = objc_opt_class();
          id v39 = v30;
          id v31 = [v23 unsignedLongLongValue];
          *(_DWORD *)long long buf = 138543874;
          uint64_t v53 = v27;
          id v20 = v26;
          id v18 = v25;
          __int16 v54 = 2114;
          id v55 = v30;
          id v16 = v29;
          id v21 = v28;
          __int16 v56 = 2048;
          id v57 = v31;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}@ - Failed to fetch artwork info lookup in %{public}@ ID: %llu", buf, 0x20u);
        }
      }
      id v18 = [v16 countByEnumeratingWithState:&v40 objects:v50 count:16];
    }
    while (v18);
  }

  if ([v16 count])
  {
    CFStringRef v48 = @"NSDebugDescription";
    unint64_t v32 = +[NSString stringWithFormat:@"%@ Failed to fetch artwork info lookup for cloud IDs: %@", v38[5], v16];
    int v49 = v32;
    uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
    uint64_t v34 = +[NSError ic_cloudClientErrorWithCode:2021 userInfo:v33];
    uint64_t v35 = *(void *)(v38[8] + 8);
    unsigned int v36 = *(void **)(v35 + 40);
    *(void *)(v35 + 40) = v34;
  }
  (*(void (**)(void))(v38[6] + 16))();
}

void sub_1000F4360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1000F4394(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F43A4(uint64_t a1)
{
}

void sub_1000F43AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (objc_class *)objc_opt_class();
    id v9 = NSStringFromClass(v8);
    id v10 = *(void **)(a1 + 32);
    id v11 = [v10 method];
    CFStringRef v12 = @"POST";
    if (!v11) {
      CFStringRef v12 = @"GET";
    }
    CFStringRef v27 = v12;
    uint64_t v13 = [*(id *)(a1 + 32) action];
    BOOL v14 = (objc_class *)objc_opt_class();
    uint64_t v15 = NSStringFromClass(v14);
    id v16 = [v5 responseCode];
    id v17 = [v5 responseData];
    *(_DWORD *)long long buf = 138545154;
    id v29 = v9;
    __int16 v30 = 2048;
    id v31 = v10;
    __int16 v32 = 2114;
    CFStringRef v33 = v27;
    __int16 v34 = 2114;
    uint64_t v35 = v13;
    __int16 v36 = 2114;
    uint64_t v37 = v15;
    __int16 v38 = 2048;
    id v39 = v5;
    __int16 v40 = 2048;
    id v41 = v16;
    __int16 v42 = 2048;
    id v43 = [v17 length];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p method=%{public}@ action=%{public}@> received response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x52u);
  }
  if (v6)
  {
    id v18 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v29 = v19;
      __int16 v30 = 2114;
      id v31 = v6;
      id v20 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%{public}@] failed with error: %{public}@", buf, 0x16u);
    }
  }
  uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v22 = *(void **)(v21 + 40);
  *(void *)(v21 + 40) = v5;
  id v23 = v5;

  uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8);
  id v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = v6;
  id v26 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000F47E0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v22 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = objc_alloc_init((Class)NSMutableSet);
  CFStringRef v12 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertySubscriptionStoreItemID equalToInt64:a5];
  uint64_t v13 = +[ML3Track allItemsQueryWithLibrary:v10 predicate:v12 orderingTerms:&__NSArray0__struct usingSections:0];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  void v31[2] = sub_1000F4B88;
  void v31[3] = &unk_1001BE4C8;
  id v14 = v11;
  id v32 = v14;
  [v13 enumeratePersistentIDsUsingBlock:v31];
  if ([v14 count])
  {
    uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v14 count];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = a4;
      __int16 v35 = 2048;
      id v36 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%{public}@] Found %lu track(s) to update in_my_library...", buf, 0x16u);
    }
    id v17 = v12;
    id v18 = v13;
  }
  else
  {
    id v17 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyStorePlaylistID equalToInt64:a5];

    id v18 = +[ML3Track allItemsQueryWithLibrary:v10 predicate:v17 orderingTerms:&__NSArray0__struct usingSections:0];

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1000F4BE8;
    v29[3] = &unk_1001BE4C8;
    id v19 = v14;
    id v30 = v19;
    [v18 enumeratePersistentIDsUsingBlock:v29];

    uint64_t v15 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [v19 count];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = a4;
      __int16 v35 = 2048;
      id v36 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%{public}@] Found %lu track(s) to update in_my_library (based on album store id)...", buf, 0x16u);
    }
  }

  if ([v14 count])
  {
    unsigned __int8 v21 = sub_10012A49C(v22);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1000F4C48;
    v23[3] = &unk_1001BDC80;
    id v24 = v9;
    id v25 = v14;
    unsigned __int8 v28 = v21;
    id v26 = v10;
    uint64_t v27 = a4;
    [v26 performDatabaseTransactionWithBlock:v23];
  }
}

void sub_1000F4B88(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_1000F4BE8(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

uint64_t sub_1000F4C48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 1;
  id v5 = *(void **)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1000F4DEC;
  v13[3] = &unk_1001BDC30;
  id v16 = &v19;
  id v6 = v3;
  id v14 = v6;
  char v18 = *(unsigned char *)(a1 + 64);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v15 = v7;
  uint64_t v17 = v8;
  [v5 enumerateObjectsUsingBlock:v13];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000F5088;
  void v11[3] = &unk_1001BDC58;
  id v12 = *(id *)(a1 + 48);
  [v6 enqueueBlockForTransactionCommit:v11];
  uint64_t v9 = *((unsigned __int8 *)v20 + 24);

  _Block_object_dispose(&v19, 8);
  return v9;
}

void sub_1000F4DD4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000F4DEC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v31 = v5;
  id v7 = +[NSArray arrayWithObjects:&v31 count:1];
  id v23 = 0;
  unsigned __int8 v8 = [v6 executeUpdate:@"UPDATE item_store set store_saga_id = store_saga_id WHERE item_pid = ?" withParameters:v7 error:&v23];
  id v9 = v23;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v8;

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    goto LABEL_6;
  }
  if (!*(unsigned char *)(a1 + 64)) {
    goto LABEL_4;
  }
  id v10 = *(void **)(a1 + 32);
  v30[0] = &off_1001CC3B0;
  v30[1] = v5;
  id v11 = +[NSArray arrayWithObjects:v30 count:2];
  id v22 = v9;
  LOBYTE(v10) = [v10 executeUpdate:@"UPDATE item SET keep_local = ? WHERE item_pid = ? AND in_my_library = 1 AND media_type IN (8, 1032)", v11, &v22 withParameters error];
  id v12 = v22;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)v10;
  id v9 = v12;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
LABEL_4:
    +[ML3Track incrementRevisionWithLibrary:persistentID:deletionType:revisionType:usingConnection:](ML3Track, "incrementRevisionWithLibrary:persistentID:deletionType:revisionType:usingConnection:", *(void *)(a1 + 40), [v5 longLongValue], 0, 0, *(void *)(a1 + 32));
    uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 56);
      id v15 = [v5 longLongValue];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v25 = v14;
      __int16 v26 = 2048;
      id v27 = v15;
      id v16 = "[%{public}@] Updated in_my_library for track with persistent ID %lld";
      uint64_t v17 = v13;
      os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
      uint32_t v19 = 22;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, v19);
    }
  }
  else
  {
LABEL_6:
    *a3 = 1;
    uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 56);
      id v21 = [v5 longLongValue];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v25 = v20;
      __int16 v26 = 2048;
      id v27 = v21;
      __int16 v28 = 2114;
      id v29 = v9;
      id v16 = "[%{public}@] Failed to update in_my_library for track with persistent ID %lld with error: %{public}@";
      uint64_t v17 = v13;
      os_log_type_t v18 = OS_LOG_TYPE_ERROR;
      uint32_t v19 = 32;
      goto LABEL_8;
    }
  }
}

id *sub_1000F5088(id *result, int a2)
{
  if (a2)
  {
    id v2 = result;
    [result[4] notifyEntitiesAddedOrRemoved];
    id v3 = v2[4];
    return (id *)[v3 notifyContentsDidChange];
  }
  return result;
}

uint64_t sub_1000F58C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  id v7 = +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyStoreCloudID equalToInt64:0];
  v24[0] = v7;
  uint64_t v8 = ML3ContainerPropertyCloudGlobalID;
  id v9 = [*(id *)(a1 + 40) allKeys];
  id v10 = +[NSSet setWithArray:v9];
  id v11 = +[ML3ContainmentPredicate predicateWithProperty:v8 values:v10];
  v24[1] = v11;
  id v12 = +[NSArray arrayWithObjects:v24 count:2];
  uint64_t v13 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v12];

  uint64_t v14 = [*(id *)(a1 + 32) musicLibrary];
  id v15 = +[ML3Container queryWithLibrary:v14 predicate:v13];

  uint64_t v23 = v8;
  id v16 = +[NSArray arrayWithObjects:&v23 count:1];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000F5B24;
  void v20[3] = &unk_1001BDC08;
  id v17 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 32);
  id v21 = v17;
  uint64_t v22 = v18;
  [v15 enumeratePersistentIDsAndProperties:v16 usingBlock:v20];

  return 1;
}

void sub_1000F5B24(uint64_t a1, uint64_t a2, id *a3)
{
  id v5 = *a3;
  if ([v5 length])
  {
    id v6 = [*(id *)(a1 + 32) objectForKey:v5];
    id v7 = v6;
    if (v6 && (uint64_t)[v6 longLongValue] >= 1)
    {
      uint64_t v8 = [*(id *)(a1 + 40) musicLibrary];
      id v9 = +[ML3Container newWithPersistentID:a2 inLibrary:v8];

      id v10 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134218240;
        uint64_t v12 = a2;
        __int16 v13 = 2048;
        id v14 = [v7 longLongValue];
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updating playlist with persistent-id %lld, setting cloud-id to %lld", (uint8_t *)&v11, 0x16u);
      }

      [v9 setValue:v7 forProperty:ML3ContainerPropertyStoreCloudID];
    }
  }
}

uint64_t start()
{
  uint64_t v1 = +[ICDServer server];
  [v1 start];

  id v2 = +[NSRunLoop currentRunLoop];
  [v2 run];

  return 0;
}

void sub_1000F67FC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 104);
  id v3 = a2;
  [v3 writeString:v2 withCode:1634357319];
  ICDAAPUtilitiesWriteContainer();
}

uint64_t sub_1000F68B8()
{
  return ICDAAPUtilitiesWriteContainer();
}

void sub_1000F6934(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 112);
  id v4 = a2;
  [v4 writeString:v3 withCode:1936746852];
  [v4 writeUInt8:*(unsigned __int8 *)(*(void *)(a1 + 32) + 120) withCode:1634357328];
}

void sub_1000F7210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float sub_1000F7228(uint64_t a1, void *a2)
{
  v5[0] = 0.0;
  v5[1] = 0.0;
  [a2 getValue:v5];
  float result = *(float *)v5;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v5[0] > *(float *)(v4 + 24))
  {
    float result = v5[0];
    *(float *)(v4 + 24) = result;
  }
  return result;
}

void sub_1000F7420(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000F74F8;
  void v9[3] = &unk_1001BDDC0;
  uint64_t v4 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v14 = v3;
  id v8 = v3;
  [v4 performDatabaseTransactionWithBlock:v9];
}

uint64_t sub_1000F74F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) artworkToken];
  id v30 = v4;
  id v5 = +[NSArray arrayWithObjects:&v30 count:1];
  uint64_t v6 = [v3 executeQuery:@"SELECT relative_path FROM artwork WHERE artwork_token = ?" withParameters:v5];

  uint64_t v20 = 0;
  id v21 = &v20;
  uint64_t v22 = 0x3032000000;
  uint64_t v23 = sub_1000F7760;
  id v24 = sub_1000F7770;
  id v25 = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1000F7778;
  v14[3] = &unk_1001BDD98;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = *(id *)(a1 + 32);
  id v18 = *(id *)(a1 + 56);
  uint32_t v19 = &v20;
  [v6 enumerateRowsWithBlock:v14];
  if (v21[5])
  {
    id v9 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = v21[5];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v27 = v10;
      __int16 v28 = 2112;
      uint64_t v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@ failed to create artwork color analysis with error: %@", buf, 0x16u);
    }

    uint64_t v12 = v21[5];
  }
  else
  {
    uint64_t v12 = 0;
  }
  [*(id *)(a1 + 64) finishWithError:v12];

  _Block_object_dispose(&v20, 8);
  return 1;
}

void sub_1000F7740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7760(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F7770(uint64_t a1)
{
}

void sub_1000F7778(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
  }
  else
  {
    id v7 = [a2 stringForColumnIndex:0];
    uint64_t v8 = [*(id *)(a1 + 32) originalArtworkDirectory];
    v26[0] = v8;
    v26[1] = v7;
    id v9 = +[NSArray arrayWithObjects:v26 count:2];
    uint64_t v10 = +[NSString pathWithComponents:v9];
    uint64_t v11 = +[NSURL fileURLWithPath:v10 isDirectory:0];

    objc_msgSend(*(id *)(a1 + 40), "_sizeForArtworkWithMediaType:artworkType:", objc_msgSend(*(id *)(a1 + 48), "artworkMediaType"), objc_msgSend(*(id *)(a1 + 48), "artworkType"));
    id v14 = objc_msgSend(objc_alloc((Class)MSVArtworkServiceColorAnalysisRequest), "initWithSourceURL:preferredImageSize:", v11, v12, v13);
    id v15 = +[MSVArtworkService sharedService];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_1000F7998;
    v21[3] = &unk_1001BDD70;
    id v16 = *(id *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(a1 + 48);
    id v22 = v16;
    uint64_t v23 = v17;
    id v19 = v18;
    uint64_t v20 = *(void *)(a1 + 64);
    id v24 = v19;
    uint64_t v25 = v20;
    [v15 sendRequest:v14 completion:v21];
  }
}

void sub_1000F7998(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    id v7 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) assetURL];
      int v17 = 138543618;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ failed to create artwork color analysis for image at: %@", (uint8_t *)&v17, 0x16u);
    }
  }
  else
  {
    id v7 = [objc_alloc((Class)ML3ArtworkColorAnalysis) initWithColorAnalysis:v5];
    CFStringRef v23 = @"ColorAnalysis";
    uint64_t v10 = [&off_1001CC3C8 stringValue];
    id v21 = v10;
    uint64_t v11 = [v7 dictRepresentation];
    id v22 = v11;
    double v12 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    id v24 = v12;
    double v13 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];

    [*(id *)(a1 + 32) setInterestDictionary:v13];
    id v14 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      id v16 = [*(id *)(a1 + 48) assetURL];
      int v17 = 138543618;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      uint64_t v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ set interest dict for artwork for image at: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

void sub_1000F7EE0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = [*(id *)(a1 + 32) artworkDownloadOperationQueue];
    [v2 waitUntilAllOperationsAreFinished];
  }
  id v3 = [*(id *)(a1 + 32) artworkDownloadOperationMap];
  [v3 removeAllObjects];
}

void sub_1000F7FD8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) artworkDownloadOperationQueue];
  [v1 increaseQualityOfService];
}

void sub_1000F80A4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) artworkDownloadOperationQueue];
  [v1 decreaseQualityOfService];
}

void sub_1000F8184(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"artwork_operation(%llu, %ld, %ld)", *(void *)(a1 + 40), *(void *)(a1 + 48), [*(id *)(a1 + 32) sourceType]);
  id v3 = [*(id *)(a1 + 32) artworkDownloadOperationMap];
  uint64_t v4 = [v3 objectForKey:v2];

  if (v4)
  {
    id v5 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = (unint64_t)[v4 artworkType];
      if (v6 > 5) {
        id v7 = 0;
      }
      else {
        id v7 = off_1001BDE20[v6];
      }
      uint64_t v8 = sub_1000F8300((uint64_t)[v4 sourceType]);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v10 = v2;
      __int16 v11 = 2114;
      double v12 = v7;
      __int16 v13 = 2114;
      id v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Decreasing priority of artwork download (identifier = '%{public}@' type = %{public}@ source = %{public}@)", buf, 0x20u);
    }
    [v4 decreasePriority];
  }
}

CFStringRef sub_1000F8300(uint64_t a1)
{
  CFStringRef v1 = @"ML3ArtworkSourceTypePurchaseHistory";
  CFStringRef v2 = @"ML3ArtworkSourceTypeStore";
  CFStringRef v3 = @"ML3ArtworkSourceTypeSubscriptionStoreContent";
  if (a1 != 600) {
    CFStringRef v3 = 0;
  }
  if (a1 != 500) {
    CFStringRef v2 = v3;
  }
  if (a1 != 400) {
    CFStringRef v1 = v2;
  }
  CFStringRef v4 = @"ML3ArtworkSourceTypeSync";
  if (a1 != 300) {
    CFStringRef v4 = 0;
  }
  if (a1 == 200) {
    CFStringRef v4 = @"ML3ArtworkSourceTypeCloud";
  }
  if (!a1) {
    CFStringRef v4 = @"ML3ArtworkSourceTypeUnknown";
  }
  if (a1 <= 399) {
    return v4;
  }
  else {
    return v1;
  }
}

void sub_1000F8428(uint64_t a1)
{
  long long v44 = +[NSMutableArray array];
  long long v45 = +[NSMutableArray array];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id obj = *(id *)(a1 + 32);
  id v48 = [obj countByEnumeratingWithState:&v59 objects:v69 count:16];
  if (v48)
  {
    uint64_t v47 = *(void *)v60;
    uint64_t v42 = ML3ContainerPropertyStoreCloudID;
    uint64_t v43 = ML3TrackPropertyStoreSagaID;
    do
    {
      for (uint64_t i = 0; i != v48; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v60 != v47) {
          objc_enumerationMutation(obj);
        }
        CFStringRef v2 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v37 = +[NSAssertionHandler currentHandler];
          [v37 handleFailureInMethod:*(void *)(a1 + 48), *(void *)(a1 + 40), @"CloudArtworkImporter.m", 199, @"Request must be of type %@", objc_opt_class() object file lineNumber description];
        }
        CFStringRef v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"artwork_operation(%llu, %ld, %ld)", [v2 cloudID], objc_msgSend(v2, "artworkType"), objc_msgSend(*(id *)(a1 + 40), "sourceType"));
        CFStringRef v4 = [*(id *)(a1 + 40) artworkDownloadOperationMap];
        id v5 = [v4 objectForKey:v3];

        if (v5)
        {
          unint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v7 = [(CloudArtworkImportOperation *)v5 artworkType];
            if (v7 > 5) {
              uint64_t v8 = 0;
            }
            else {
              uint64_t v8 = off_1001BDE20[v7];
            }
            __int16 v13 = sub_1000F8300([(CloudArtworkImportOperation *)v5 sourceType]);
            *(_DWORD *)long long buf = 138543874;
            double v64 = v3;
            __int16 v65 = 2114;
            __int16 v66 = v8;
            __int16 v67 = 2114;
            __int16 v68 = v13;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Boosting priority of artwork download (identifier = '%{public}@' type = %{public}@ source = %{public}@)", buf, 0x20u);
          }
          [(CloudArtworkImportOperation *)v5 increasePriority];
          goto LABEL_34;
        }
        id v9 = [v2 cloudID];
        unint64_t v50 = [v2 token];
        id v51 = [v2 artworkType];
        id v10 = [*(id *)(a1 + 40) sourceType];
        id v11 = v10;
        if (v51 == (id)2)
        {
LABEL_13:
          id v12 = [v2 token];
          int v49 = +[NSURL URLWithString:v12];
LABEL_28:

          goto LABEL_29;
        }
        if (v10 == (id)600)
        {
          id v14 = [v2 token];
          id v12 = +[NSURL URLWithString:v14];

          uint64_t v15 = [v12 resourceSpecifier];
          BOOL v16 = [v15 rangeOfString:@"//"] == 0;

          if (v16)
          {
            id v12 = v12;
            int v49 = v12;
          }
          else
          {
            id v17 = [v2 cloudID];
            if ([v2 artworkType] == (id)1)
            {
              uint64_t v18 = [*(id *)(a1 + 40) musicLibrary];
              id v19 = +[ML3Track newWithPersistentID:v17 inLibrary:v18];

              uint64_t v20 = [v19 valueForProperty:v43];
              id v9 = [v20 unsignedLongLongValue];
            }
            else if ([v2 artworkType] == (id)5)
            {
              id v21 = [*(id *)(a1 + 40) musicLibrary];
              id v22 = +[ML3Container newWithPersistentID:v17 inLibrary:v21];

              CFStringRef v23 = [v22 valueForProperty:v42];
              id v9 = [v23 unsignedLongLongValue];
            }
            int v49 = 0;
          }
          goto LABEL_28;
        }
        if (v10 == (id)500) {
          goto LABEL_13;
        }
        int v49 = 0;
LABEL_29:
        id v24 = [CloudArtworkImportOperation alloc];
        uint64_t v25 = [*(id *)(a1 + 40) artworkDownloadSession];
        __int16 v26 = [*(id *)(a1 + 40) configuration];
        uint64_t v27 = [v2 clientIdentity];
        id v5 = [(CloudArtworkImportOperation *)v24 initWithURLSession:v25 configuration:v26 cloudID:v9 artworkToken:v50 artworkType:v51 sourceType:v11 clientIdentity:v27];

        -[CloudArtworkImportOperation setMediaType:](v5, "setMediaType:", [v2 mediaType]);
        -[CloudArtworkImportOperation setAllowsCellularData:](v5, "setAllowsCellularData:", [v2 allowsCellularData]);
        [(CloudArtworkImportOperation *)v5 setAssetURL:v49];
        __int16 v28 = -[CloudArtworkImportAsset initWithAssertURL:artworkMediaType:artworkType:artworkToken:]([CloudArtworkImportAsset alloc], "initWithAssertURL:artworkMediaType:artworkType:artworkToken:", v49, [v2 mediaType], v51, v50);
        [v45 addObject:v28];
        v57[0] = _NSConcreteStackBlock;
        v57[1] = 3221225472;
        v57[2] = sub_1000F8D30;
        v57[3] = &unk_1001BECC0;
        void v57[4] = *(void *)(a1 + 40);
        id v29 = v3;
        id v58 = v29;
        [(CloudArtworkImportOperation *)v5 setCompletionBlock:v57];
        id v30 = [*(id *)(a1 + 40) artworkDownloadOperationMap];
        [v30 setObject:v5 forKey:v29];

        id v31 = [*(id *)(a1 + 40) artworkDownloadOperationMap];
        LODWORD(v30) = [v31 count] == (id)1;

        if (v30)
        {
          id v32 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v33 = [*(id *)(a1 + 40) powerAssertionIdentifier];
            *(_DWORD *)long long buf = 138543362;
            double v64 = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Taking power assertion: %{public}@", buf, 0xCu);
          }
          uint64_t v34 = [*(id *)(a1 + 40) powerAssertionIdentifier];
          CPSetPowerAssertionWithIdentifier();

          __int16 v35 = [*(id *)(a1 + 40) artworkDownloadWatchdog];
          [v35 resume];
        }
        [v44 addObject:v5];

LABEL_34:
        id v36 = [v2 completionHandler];
        [(CloudArtworkImportOperation *)v5 addCompletionHandler:v36];
      }
      id v48 = [obj countByEnumeratingWithState:&v59 objects:v69 count:16];
    }
    while (v48);
  }

  __int16 v38 = [*(id *)(a1 + 40) artworkDownloadOperationQueue];
  [v38 addOperations:v44];

  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  if ([v45 count])
  {
    id v39 = +[ML3MusicLibrary autoupdatingSharedLibrary];
    __int16 v40 = [*(id *)(a1 + 40) artworkDownloadOperationQueue];
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472;
    v53[2] = sub_1000F8DD4;
    v53[3] = &unk_1001BDCD0;
    objc_copyWeak(&v56, (id *)buf);
    id v54 = v45;
    id v41 = v39;
    id v55 = v41;
    [v40 addBarrierBlock:v53];

    objc_destroyWeak(&v56);
  }
  objc_destroyWeak((id *)buf);
}

void sub_1000F8D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,id location)
{
  objc_destroyWeak(v51);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F8D30(uint64_t a1)
{
  CFStringRef v2 = [*(id *)(a1 + 32) artworkDownloadAccessQueue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000F9064;
  v4[3] = &unk_1001BECC0;
  CFStringRef v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v2, v4);
}

void sub_1000F8DD4(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  CFStringRef v3 = [WeakRetained artworkColorAnalysisAccessQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000F8EB0;
  block[3] = &unk_1001BDFE8;
  id v6 = WeakRetained;
  id v7 = a1[4];
  id v8 = a1[5];
  id v4 = WeakRetained;
  dispatch_async(v3, block);
}

void sub_1000F8EB0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v2 = *(id *)(a1 + 40);
    id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v16;
      do
      {
        id v6 = 0;
        do
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(v2);
          }
          id v7 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v6);
          id v9 = objc_alloc((Class)ML3Artwork);
          id v10 = objc_msgSend(v7, "artworkToken", (void)v15);
          id v11 = objc_msgSend(v9, "initWithToken:artworkType:musicLibrary:", v10, objc_msgSend(v7, "artworkType"), *(void *)(a1 + 48));

          id v12 = [v11 interestDictionary];

          if (!v12)
          {
            __int16 v13 = [*(id *)(a1 + 32) _artworkColorAnalysisOperationForArtworkAsset:v7 library:*(void *)(a1 + 48) artwork:v11];
            if (v13)
            {
              id v14 = [*(id *)(a1 + 32) artworkColorAnalysisOperationQueue];
              [v14 addOperation:v13];
            }
          }

          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v4);
    }
  }
}

void sub_1000F9064(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) artworkDownloadOperationMap];
  id v3 = [v2 objectForKey:*(void *)(a1 + 40)];

  [v3 callCompletionHandlers];
  id v4 = [*(id *)(a1 + 32) artworkDownloadOperationMap];
  [v4 removeObjectForKey:*(void *)(a1 + 40)];

  uint64_t v5 = [*(id *)(a1 + 32) artworkDownloadOperationMap];
  id v6 = [v5 count];

  if (v6)
  {
    id v7 = [*(id *)(a1 + 32) artworkDownloadWatchdog];
    [v7 resume];
  }
  else
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, ICCloudClientArtworkDownloadsDidCompleteNotification, 0, 0, 1u);
    id v9 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) powerAssertionIdentifier];
      int v12 = 138543362;
      __int16 v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Releasing power assertion: %{public}@", (uint8_t *)&v12, 0xCu);
    }
    id v11 = [*(id *)(a1 + 32) powerAssertionIdentifier];
    CPSetPowerAssertionWithIdentifier();

    id v7 = [*(id *)(a1 + 32) artworkDownloadWatchdog];
    [v7 suspend];
  }
}

void sub_1000F98A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  _Block_object_dispose((const void *)(v18 - 80), 8);
  _Unwind_Resume(a1);
}

Class sub_1000F98D4(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F39D8)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_1000F9D8C;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BDE08;
    uint64_t v8 = 0;
    qword_1001F39D8 = _sl_dlopen();
  }
  if (!qword_1001F39D8)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudArtworkImporter.m", 26, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaDownloadManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"Class getMPMediaDownloadManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudArtworkImporter.m", 27, @"Unable to find class %s", "MPMediaDownloadManager");

LABEL_10:
    __break(1u);
  }
  qword_1001F39D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000F9AC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained artworkDownloadAccessQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000F9B6C;
    block[3] = &unk_1001BEC20;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

void sub_1000F9B6C(uint64_t a1)
{
  id v2 = os_log_create("com.apple.amp.itunescloudd", "Artwork_Oversize");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) artworkDownloadOperationQueue];
    id v4 = [v3 operations];
    *(_DWORD *)long long buf = 138543362;
    uint64_t v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Watchdog fired, operation queue contents: %{public}@", buf, 0xCu);
  }
  id v5 = [*(id *)(a1 + 32) powerAssertionIdentifier];
  CPSetPowerAssertionWithIdentifier();

  id v6 = os_log_create("com.apple.amp.itunescloudd", "Artwork");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    long long v7 = [*(id *)(a1 + 32) powerAssertionIdentifier];
    *(_DWORD *)long long buf = 138543362;
    uint64_t v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Watchdog fired, releasing power assertion: %{public}@", buf, 0xCu);
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v8 = objc_msgSend(*(id *)(a1 + 32), "artworkDownloadOperationQueue", 0);
  id v9 = [v8 operations];

  id v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v15;
    do
    {
      __int16 v13 = 0;
      do
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v9);
        }
        [*(id *)(*((void *)&v14 + 1) + 8 * (void)v13) cancel];
        __int16 v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v11);
  }
}

uint64_t sub_1000F9D8C()
{
  uint64_t result = _sl_dlopen();
  qword_1001F39D8 = result;
  return result;
}

id sub_1000FA13C(uint64_t a1, int a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v4 = 2;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = a3;
    uint64_t v4 = 3;
  }
  return [v3 _didCompleteWithPrivacyPromptStatus:v4 error:v5];
}

void sub_1000FADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FAE10(uint64_t a1)
{
  sub_1000FB26C();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBSRemoteAlertDefinition");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F39E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getSBSRemoteAlertDefinitionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDPrivacyPromptOperation.m", 37, @"Unable to find class %s", "SBSRemoteAlertDefinition");

    __break(1u);
  }
}

void sub_1000FAED8(uint64_t a1)
{
  sub_1000FB26C();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBSRemoteAlertConfigurationContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F39F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getSBSRemoteAlertConfigurationContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDPrivacyPromptOperation.m", 36, @"Unable to find class %s", "SBSRemoteAlertConfigurationContext");

    __break(1u);
  }
}

void sub_1000FAFA0(uint64_t a1)
{
  sub_1000FB430();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BSMutableSettings");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F39F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getBSMutableSettingsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDPrivacyPromptOperation.m", 30, @"Unable to find class %s", "BSMutableSettings");

    __break(1u);
  }
}

void sub_1000FB068(uint64_t a1)
{
  sub_1000FB430();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BSAction");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3A08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getBSActionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDPrivacyPromptOperation.m", 29, @"Unable to find class %s", "BSAction");

    __break(1u);
  }
}

void sub_1000FB130(uint64_t a1, void *a2)
{
  id v3 = [a2 info];
  id v4 = [v3 objectForSetting:1];

  objc_msgSend(*(id *)(a1 + 32), "_handleRemoteAlertActionWithResult:", objc_msgSend(v4, "BOOLValue"));
}

void sub_1000FB1A4(uint64_t a1)
{
  sub_1000FB26C();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBSRemoteAlertHandle");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3A10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getSBSRemoteAlertHandleClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDPrivacyPromptOperation.m", 38, @"Unable to find class %s", "SBSRemoteAlertHandle");

    __break(1u);
  }
}

void sub_1000FB26C()
{
  v3[0] = 0;
  if (!qword_1001F39E8)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_1000FB3BC;
    void v3[4] = &unk_1001BEA20;
    void v3[5] = v3;
    long long v4 = off_1001BDEA0;
    uint64_t v5 = 0;
    qword_1001F39E8 = _sl_dlopen();
  }
  if (!qword_1001F39E8)
  {
    CFStringRef v1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICDPrivacyPromptOperation.m", 35, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_1000FB3BC()
{
  uint64_t result = _sl_dlopen();
  qword_1001F39E8 = result;
  return result;
}

void sub_1000FB430()
{
  v3[0] = 0;
  if (!qword_1001F3A00)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_1000FB580;
    void v3[4] = &unk_1001BEA20;
    void v3[5] = v3;
    long long v4 = off_1001BDEB8;
    uint64_t v5 = 0;
    qword_1001F3A00 = _sl_dlopen();
  }
  if (!qword_1001F3A00)
  {
    CFStringRef v1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *BaseBoardLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICDPrivacyPromptOperation.m", 28, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_1000FB580()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3A00 = result;
  return result;
}

void sub_1000FBBDC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  uint64_t v5 = [a3 dictionaryRepresentation];
  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    long long v7 = [v8 stringValue];
    [v6 setObject:v5 forKey:v7];
  }
}

void sub_1000FBD68(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (_NSIsNSString() && _NSIsNSDictionary())
  {
    id v6 = [[ICDCloudPushNotificationAccountRegistrationState alloc] initWithDictionaryRepresentation:v5];
    long long v7 = *(void **)(*(void *)(a1 + 32) + 8);
    id v8 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v9 longLongValue]);
    [v7 setObject:v6 forKey:v8];
  }
}

void sub_1000FC170(id a1)
{
  CFStringRef v1 = +[ICDeviceInfo currentDeviceInfo];
  unsigned int v2 = [v1 isWatch];

  if (v2) {
    +[NSSet setWithObjects:@"feature-movie", @"tv-episode", @"book", @"software", 0];
  }
  else {
  uint64_t v3 = +[NSSet setWithObjects:@"feature-movie", @"tv-episode", @"book", 0, v5];
  }
  uint64_t v4 = qword_1001F3A28;
  qword_1001F3A28 = v3;

  _objc_release_x1(v3, v4);
}

void sub_1000FC268(id a1)
{
  CFStringRef v1 = +[ICDeviceInfo currentDeviceInfo];
  unsigned int v2 = [v1 isWatch];

  if (v2) {
    +[NSSet setWithObjects:@"song", @"music-video", @"feature-movie", @"tv-episode", @"book", @"software", 0];
  }
  else {
  uint64_t v3 = +[NSSet setWithObjects:@"song", @"music-video", @"feature-movie", @"tv-episode", @"book", 0, v5];
  }
  uint64_t v4 = qword_1001F3A18;
  qword_1001F3A18 = v3;

  _objc_release_x1(v3, v4);
}

void sub_1000FC604(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to process incoming sync push message. err=%{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1000FCC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

Class sub_1000FCCBC(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F3A40)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_1000FCEA8;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BE220;
    uint64_t v8 = 0;
    qword_1001F3A40 = _sl_dlopen();
  }
  if (!qword_1001F3A40)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    uint64_t v4 = +[NSString stringWithUTF8String:"void *MusicLibraryLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudPushNotificationController.m", 29, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("ML3MusicLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"Class getML3MusicLibraryClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudPushNotificationController.m", 30, @"Unable to find class %s", "ML3MusicLibrary");

LABEL_10:
    __break(1u);
  }
  qword_1001F3A38 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000FCEA8()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3A40 = result;
  return result;
}

void sub_1000FD440(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = os_log_create("com.apple.amp.itunescloudd", "Push");
  int v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = objc_msgSend(v4, "msv_description");
      int v10 = 138543618;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      __int16 v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Refreshed User Social Profiles error=%{public}@", (uint8_t *)&v10, 0x16u);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138543362;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ Refreshed User Social Profiles", (uint8_t *)&v10, 0xCu);
  }
}

void sub_1000FD788(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    long long v16 = *(NSObject **)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    id v30 = v16;
    __int16 v31 = 2114;
    id v32 = v6;
    long long v17 = "%{public}@ Ignoring jalisco push message because we failed to load account properties. err=%{public}@";
    uint64_t v18 = v7;
    uint32_t v19 = 22;
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_28;
  }
  if ((MSVDeviceSupportsMultipleLibraries() & 1) == 0 && ([v5 isActive] & 1) == 0)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    id v22 = *(NSObject **)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    id v30 = v22;
    long long v17 = "%{public}@ Ignoring jalisco push message for an inactive account";
    uint64_t v18 = v7;
    uint32_t v19 = 12;
    goto LABEL_24;
  }
  if ([*(id *)(a1 + 40) actionType] == (id)1)
  {
    uint64_t v7 = [*(id *)(a1 + 40) jaliscoChangedMediaTypes];
    id v8 = [objc_alloc((Class)ICConnectionConfiguration) initWithUserIdentity:*(void *)(a1 + 48)];
    if (v7)
    {
      uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "Push");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v30 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received update request to media types: %{public}@", buf, 0xCu);
      }

      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      int v10 = v7;
      id v11 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v25;
        while (2)
        {
          for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v25 != v13) {
              objc_enumerationMutation(v10);
            }
            if (objc_msgSend(*(id *)(a1 + 32), "_isSupportedJaliscoMediaKind:", *(void *)(*((void *)&v24 + 1) + 8 * i), (void)v24))
            {

              goto LABEL_26;
            }
          }
          id v12 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }

      long long v15 = os_log_create("com.apple.amp.itunescloudd", "Push");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Ignoring push notification since it did not contain any supported media types", buf, 2u);
      }
    }
    else
    {
LABEL_26:
      long long v15 = +[BaseRequestHandler handlerForConfiguration:v8];
      CFStringRef v23 = [v8 clientIdentity];
      [v15 updateJaliscoLibraryWithClientIdentity:v23 forReason:2 completionHandler:0];
    }
  }
  else
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(NSObject **)(a1 + 32);
      id v21 = [*(id *)(a1 + 40) userInfo];
      *(_DWORD *)long long buf = 138543618;
      id v30 = v20;
      __int16 v31 = 2114;
      id v32 = v21;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Received unhandled jalisco push action. userInfo=%{public}@", buf, 0x16u);
    }
  }
LABEL_28:
}

void sub_1000FDD44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v25 = v12;
    __int16 v26 = 2114;
    id v27 = v6;
    uint64_t v13 = "%{public}@ Ignoring saga push message because we failed to load account properties. err=%{public}@";
    long long v14 = v7;
    uint32_t v15 = 22;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
    goto LABEL_26;
  }
  if (([v5 isActiveLocker] & 1) == 0)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v16 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v25 = v16;
    uint64_t v13 = "%{public}@ Ignoring saga push message because the account no longer has icml enabled";
    goto LABEL_13;
  }
  if ((MSVDeviceSupportsMultipleLibraries() & 1) == 0 && ([v5 isActive] & 1) == 0)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v25 = v18;
    uint64_t v13 = "%{public}@ Ignoring saga push message for an inactive account";
LABEL_13:
    long long v14 = v7;
    uint32_t v15 = 12;
    goto LABEL_14;
  }
  if ([*(id *)(a1 + 40) actionType] == (id)1)
  {
    uint64_t v7 = [objc_alloc((Class)ICConnectionConfiguration) initWithUserIdentity:*(void *)(a1 + 48)];
    id v8 = [*(id *)(a1 + 40) sagaServerRevision];
    uint64_t v9 = [*(id *)(a1 + 40) sagaUpdatedSubscribedPlaylistIDs];
    int v10 = +[BaseRequestHandler handlerForConfiguration:v7];
    if (v8 && v9)
    {
      id v11 = [v7 clientIdentity];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1000FE104;
      void v20[3] = &unk_1001BE0B0;
      id v21 = v10;
      id v22 = v9;
      CFStringRef v23 = v7;
      [v21 updateSagaLibraryWithClientIdentity:v11 forReason:2 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:v20];

LABEL_24:
      goto LABEL_25;
    }
    if (v8)
    {
      uint32_t v19 = [v7 clientIdentity];
      [v10 updateSagaLibraryWithClientIdentity:v19 forReason:2 allowNoisyAuthPrompt:0 isExplicitUserAction:0 completionHandler:0];
    }
    else
    {
      if (!v9) {
        goto LABEL_24;
      }
      uint32_t v19 = [v7 clientIdentity];
      [v10 updateSubscribedPlaylistsWithSagaIDs:v9 ignoreMinRefreshInterval:1 requestReason:2 pinnedOnly:0 clientIdentity:v19 completionHandler:0];
    }

    goto LABEL_24;
  }
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v9 = [*(id *)(a1 + 40) userInfo];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v25 = v17;
    __int16 v26 = 2114;
    id v27 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Received unhandled saga push action. userInfo=%{public}@", buf, 0x16u);
LABEL_25:
  }
LABEL_26:
}

void sub_1000FE104(uint64_t a1)
{
  CFStringRef v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 48) clientIdentity];
  [v1 updateSubscribedPlaylistsWithSagaIDs:v2 ignoreMinRefreshInterval:1 requestReason:2 pinnedOnly:0 clientIdentity:v3 completionHandler:0];
}

void sub_1000FE41C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v12 = 138543874;
    uint64_t v13 = v8;
    __int16 v14 = 2114;
    id v15 = v6;
    __int16 v16 = 2050;
    id v17 = [v5 statusCode];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished registering push token. err=%{public}@, statusCode=%{public}ld", (uint8_t *)&v12, 0x20u);
  }

  id v9 = v6;
  int v10 = v9;
  if (!v9)
  {
    if ([v5 statusCode])
    {
      int v10 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
    }
    else
    {
      int v10 = 0;
    }
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v10);
  }
}

void sub_1000FE740(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v12 = 138543874;
    uint64_t v13 = v8;
    __int16 v14 = 2114;
    id v15 = v6;
    __int16 v16 = 1024;
    unsigned int v17 = [v5 statusCode];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished registering push token. err=%{public}@, statusCode=%d", (uint8_t *)&v12, 0x1Cu);
  }

  id v9 = v6;
  int v10 = v9;
  if (!v9)
  {
    if ([v5 statusCode])
    {
      int v10 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
    }
    else
    {
      int v10 = 0;
    }
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v10);
  }
}

void sub_1000FEA34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [*(id *)(a1 + 40) userIdentity];
    uint64_t v8 = +[ICPrivacyInfo sharedPrivacyInfoForUserIdentity:v7];
    unsigned int v9 = [v8 privacyAcknowledgementRequiredForMedia];

    if (v9)
    {
      int v10 = os_log_create("com.apple.amp.itunescloudd", "Push");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v68 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ Not registering for push notifications because privacy acknowledgement is required for media", buf, 0xCu);
      }

      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = +[NSError errorWithDomain:ICErrorDomain code:-7007 userInfo:0];
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);

      goto LABEL_32;
    }
    uint64_t v17 = [v5 DSID];
    uint64_t v18 = [*(id *)(*(void *)(a1 + 32) + 32) registrationStateForAccountDSID:v17];
    if (!v18) {
      uint64_t v18 = objc_alloc_init(ICDCloudPushNotificationAccountRegistrationState);
    }
    unint64_t v50 = (void *)v17;
    unsigned __int8 v19 = [v5 isActiveLocker];
    uint64_t v20 = *(void **)(a1 + 32);
    if (v19) {
      [v20 _supportedJaliscoMediaKindsWithSagaEnabled];
    }
    else {
    id v21 = [v20 _supportedJaliscoMediaKinds];
    }
    id v22 = [v21 allObjects];

    id v23 = objc_alloc((Class)ICStoreRequestContext);
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 3221225472;
    v65[2] = sub_1000FEFE4;
    v65[3] = &unk_1001BE6B0;
    id v66 = *(id *)(a1 + 40);
    id v24 = [v23 initWithBlock:v65];
    uint64_t v25 = [(ICDCloudPushNotificationAccountRegistrationState *)v18 APNSToken];
    uint64_t v26 = [(ICDCloudPushNotificationAccountRegistrationState *)v18 mediaKinds];
    id v27 = (void *)v26;
    int v49 = (void *)v25;
    if (v25)
    {
      unsigned __int8 v28 = [*(id *)(*(void *)(a1 + 32) + 24) isEqualToData:v25];
      unsigned __int8 v29 = v28;
      id v30 = v50;
      if (v27)
      {
        unsigned __int8 v31 = [v22 isEqualToArray:v27];
        if (v29)
        {
          if (v31)
          {
            id v32 = os_log_create("com.apple.amp.itunescloudd", "Push");
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v33 = *(void *)(a1 + 32);
              uint64_t v34 = *(void **)(a1 + 40);
              *(_DWORD *)long long buf = 138543618;
              uint64_t v68 = v33;
              __int16 v69 = 2114;
              uint64_t v70 = v34;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%{public}@ Push notification registration up to date for configuration %{public}@", buf, 0x16u);
            }

            (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
            goto LABEL_31;
          }
          goto LABEL_24;
        }
        __int16 v35 = v24;
        goto LABEL_26;
      }
      if (v28)
      {
LABEL_24:
        id v36 = v24;
        uint64_t v37 = v22;
        __int16 v38 = *(void **)(a1 + 32);
        v51[0] = _NSConcreteStackBlock;
        v51[1] = 3221225472;
        v51[2] = sub_1000FF268;
        v51[3] = &unk_1001BE010;
        unint64_t v52 = v18;
        id v39 = v37;
        uint64_t v40 = *(void *)(a1 + 32);
        id v53 = v39;
        uint64_t v54 = v40;
        id v55 = v50;
        id v56 = *(id *)(a1 + 48);
        id v41 = v38;
        id v22 = v37;
        id v24 = v36;
        [v41 _registerMediaKinds:v39 usingRequestContext:v36 withCompletion:v51];

        uint64_t v42 = v52;
LABEL_30:

LABEL_31:
        goto LABEL_32;
      }
      __int16 v35 = v24;
    }
    else
    {
      __int16 v35 = v24;
      if (v26)
      {
        unsigned __int8 v31 = [v22 isEqualToArray:v26];
LABEL_26:
        char v43 = v31 ^ 1;
LABEL_29:
        long long v44 = *(void **)(a1 + 32);
        uint64_t v45 = v44[3];
        v57[0] = _NSConcreteStackBlock;
        v57[1] = 3221225472;
        v57[2] = sub_1000FF0A8;
        v57[3] = &unk_1001BE038;
        __int16 v63 = (ICDCloudPushNotificationAccountRegistrationState *)*(id *)(a1 + 48);
        long long v46 = v18;
        uint64_t v47 = *(void *)(a1 + 32);
        id v58 = v46;
        uint64_t v59 = v47;
        char v64 = v43;
        id v60 = v22;
        id v61 = v35;
        id v30 = v50;
        id v62 = v50;
        uint64_t v48 = v45;
        id v24 = v35;
        [v44 _registerAPNSToken:v48 usingRequestContext:v61 withCompletion:v57];

        uint64_t v42 = v63;
        goto LABEL_30;
      }
    }
    char v43 = 1;
    goto LABEL_29;
  }
  __int16 v14 = os_log_create("com.apple.amp.itunescloudd", "Push");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    __int16 v16 = [*(id *)(a1 + 40) userIdentity];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v68 = v15;
    __int16 v69 = 2114;
    uint64_t v70 = v16;
    __int16 v71 = 2114;
    id v72 = v6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ Failed to get properties for user identity %{public}@. err=%{public}@", buf, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_32:
}

void sub_1000FEFE4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 userIdentity];
  [v4 setIdentity:v5];

  id v6 = [*(id *)(a1 + 32) userIdentityStore];
  [v4 setIdentityStore:v6];

  [v4 setPersonalizationStyle:2];
  id v7 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v4 setAuthenticationProvider:v7];
}

void sub_1000FF0A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v3();
  }
  else
  {
    [*(id *)(a1 + 32) setAPNSToken:*(void *)(*(void *)(a1 + 40) + 24)];
    id v4 = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1000FF3CC;
      v17[3] = &unk_1001BE010;
      id v18 = *(id *)(a1 + 32);
      id v7 = *(id *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      id v19 = v7;
      uint64_t v20 = v8;
      id v21 = *(id *)(a1 + 64);
      id v22 = *(id *)(a1 + 72);
      [v4 _registerMediaKinds:v5 usingRequestContext:v6 withCompletion:v17];

      unsigned int v9 = v18;
    }
    else
    {
      int v10 = v4[1];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_1000FF4AC;
      v14[3] = &unk_1001BDFE8;
      void v14[4] = v4;
      id v15 = *(id *)(a1 + 32);
      id v16 = *(id *)(a1 + 64);
      dispatch_async(v10, v14);
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), 0, v11, v12, v13);

      unsigned int v9 = v15;
    }
  }
}

void sub_1000FF268(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    [*(id *)(a1 + 32) setMediaKinds:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(NSObject **)(v4 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000FF348;
    block[3] = &unk_1001BDFE8;
    void block[4] = v4;
    id v7 = *(id *)(a1 + 32);
    id v8 = *(id *)(a1 + 56);
    dispatch_async(v5, block);
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000FF348(void *a1)
{
  [*(id *)(a1[4] + 32) setRegistrationState:a1[5] forAccountDSID:a1[6]];
  id v3 = +[ICDefaults standardDefaults];
  uint64_t v2 = [*(id *)(a1[4] + 32) dictionaryRepresentation];
  [v3 setPushNotificationState:v2];
}

void sub_1000FF3CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    [*(id *)(a1 + 32) setMediaKinds:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(NSObject **)(v4 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000FF530;
    block[3] = &unk_1001BDFE8;
    void block[4] = v4;
    id v7 = *(id *)(a1 + 32);
    id v8 = *(id *)(a1 + 56);
    dispatch_async(v5, block);
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000FF4AC(void *a1)
{
  [*(id *)(a1[4] + 32) setRegistrationState:a1[5] forAccountDSID:a1[6]];
  id v3 = +[ICDefaults standardDefaults];
  uint64_t v2 = [*(id *)(a1[4] + 32) dictionaryRepresentation];
  [v3 setPushNotificationState:v2];
}

void sub_1000FF530(void *a1)
{
  [*(id *)(a1[4] + 32) setRegistrationState:a1[5] forAccountDSID:a1[6]];
  id v3 = +[ICDefaults standardDefaults];
  uint64_t v2 = [*(id *)(a1[4] + 32) dictionaryRepresentation];
  [v3 setPushNotificationState:v2];
}

void sub_1000FF6AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      unint64_t v50 = v8;
      __int16 v51 = 2114;
      id v52 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Failed to fetch bag configuration. error=%{public}@", buf, 0x16u);
    }
  }
  else
  {
    unsigned int v9 = APSEnvironmentProduction;
    int v10 = [v5 dictionaryForBagKey:ICURLBagKeyPushNotifications];
    id v7 = v9;
    if (_NSIsNSDictionary())
    {
      uint64_t v11 = [v10 objectForKey:@"environment"];
      id v7 = v9;
      if (_NSIsNSString())
      {
        if (([v11 isEqualToString:v9] & 1) != 0
          || ([v11 isEqualToString:APSEnvironmentDevelopment] & 1) != 0
          || (id v7 = v9, [v11 isEqualToString:APSEnvironmentDemo]))
        {
          id v7 = v11;
        }
      }
    }
    uint64_t v12 = [*(id *)(a1 + 32) connection];
    if (!v12
      || (uint64_t v13 = (void *)v12,
          [*(id *)(a1 + 32) pushEnvironment],
          __int16 v14 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v15 = [v14 isEqualToString:v7],
          v14,
          v13,
          (v15 & 1) == 0))
    {
      id v16 = os_log_create("com.apple.amp.itunescloudd", "Push");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void **)(a1 + 32);
        id v18 = [v17 connection];
        CFStringRef v19 = @"Push environment changed";
        if (!v18) {
          CFStringRef v19 = @"connection=nil";
        }
        *(_DWORD *)long long buf = 138543618;
        unint64_t v50 = v17;
        __int16 v51 = 2114;
        id v52 = (id)v19;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ Creating new APNS connection. %{public}@", buf, 0x16u);
      }
      uint64_t v20 = [*(id *)(a1 + 32) connection];

      if (v20)
      {
        id v21 = [*(id *)(a1 + 32) connection];
        [v21 setDelegate:0];

        [*(id *)(a1 + 32) setConnection:0];
      }
      id v39 = v10;
      id v40 = v5;
      id v22 = os_log_create("com.apple.amp.itunescloudd", "Push");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = *(void **)(a1 + 32);
        *(_DWORD *)long long buf = 138543618;
        unint64_t v50 = v23;
        __int16 v51 = 2114;
        id v52 = v7;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@ Registering for push notifications. environment=%{public}@", buf, 0x16u);
      }

      [*(id *)(a1 + 32) setPushEnvironment:v7];
      id v24 = [objc_alloc((Class)APSConnection) initWithEnvironmentName:v7 namedDelegatePort:@"com.apple.aps.itunescloudd" queue:&_dispatch_main_q];
      if (!v24)
      {
        uint64_t v25 = os_log_create("com.apple.amp.itunescloudd", "Push");
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = *(void **)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          unint64_t v50 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}@ Failed to create the push connection", buf, 0xCu);
        }
      }
      [*(id *)(a1 + 32) setConnection:v24];
      [v24 setDelegate:*(void *)(a1 + 32)];
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      v47[0] = v9;
      v47[1] = APSEnvironmentDevelopment;
      v47[2] = APSEnvironmentDemo;
      id v27 = +[NSArray arrayWithObjects:v47 count:3];
      id v28 = [v27 countByEnumeratingWithState:&v43 objects:v48 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v44;
        do
        {
          for (uint64_t i = 0; i != v29; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v44 != v30) {
              objc_enumerationMutation(v27);
            }
            id v32 = *(void **)(*((void *)&v43 + 1) + 8 * i);
            uint64_t v33 = [*(id *)(a1 + 32) pushEnvironment];
            unsigned __int8 v34 = [v32 isEqualToString:v33];

            if ((v34 & 1) == 0)
            {
              id v35 = [objc_alloc((Class)APSConnection) initWithEnvironmentName:v32 namedDelegatePort:@"com.apple.aps.itunescloudd" queue:&_dispatch_main_q];

              [v35 setDelegate:*(void *)(a1 + 32)];
              dispatch_time_t v36 = dispatch_time(0, 1000000000);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_1000FFC80;
              block[3] = &unk_1001BEC20;
              id v42 = v35;
              id v37 = v35;
              dispatch_after(v36, (dispatch_queue_t)&_dispatch_main_q, block);
            }
          }
          id v29 = [v27 countByEnumeratingWithState:&v43 objects:v48 count:16];
        }
        while (v29);
      }

      id v6 = 0;
      id v5 = v40;
      int v10 = v39;
    }
  }
  uint64_t v38 = *(void *)(a1 + 40);
  if (v38) {
    (*(void (**)(uint64_t, id))(v38 + 16))(v38, v6);
  }
}

id sub_1000FFC80(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDelegate:0];
}

void sub_1000FFE24(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) operationCount])
  {
    uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ We already have an operation enqueued to handle push registration", buf, 0xCu);
    }
  }
  else
  {
    id v4 = objc_alloc((Class)ICAsyncBlockOperation);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    double v5[2] = sub_1000FFF60;
    v5[3] = &unk_1001BDF98;
    void v5[4] = *(void *)(a1 + 32);
    uint64_t v2 = [v4 initWithStartHandler:v5];
    [*(id *)(*(void *)(a1 + 32) + 16) addOperation:v2];
  }
}

void sub_1000FFF60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "Push");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ Updating push notification registration", buf, 0xCu);
  }

  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100100090;
  void v8[3] = &unk_1001BF198;
  id v9 = v3;
  int v10 = v6;
  id v7 = v3;
  [v6 _createAPNSConnectionWithCompletion:v8];
}

void sub_100100090(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 finishWithError:a2];
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10010014C;
    v7[3] = &unk_1001BDF70;
    id v4 = *(void **)(a1 + 40);
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v8 = v5;
    uint64_t v9 = v6;
    [v4 _activeConfigurationsWithCompletion:v7];
  }
}

void sub_10010014C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) finishWithError:a3];
  }
  else
  {
    uint64_t v6 = +[NSMutableArray arrayWithCapacity:5];
    id v7 = +[ICDeviceInfo currentDeviceInfo];
    if (([v7 isMac] & 1) == 0 && objc_msgSend(v5, "count"))
    {
      [v6 addObject:@"com.apple.music.engagement"];
      [v6 addObject:@"com.apple.music.service"];
      [v6 addObject:@"com.apple.music.social"];
      [v6 addObject:@"com.apple.sagad"];
      [v6 addObject:@"com.apple.jalisco"];
      [v6 addObject:@"com.apple.storebookkeeper"];
    }
    if (([v7 isWatch] & 1) != 0
      || ([v7 isAppleTV] & 1) != 0
      || [v7 isMac])
    {
      [v6 addObject:@"com.apple.itunesstored"];
    }
    id v8 = [*(id *)(a1 + 40) connection];
    uint64_t v9 = [v8 enabledTopics];
    unsigned __int8 v10 = [v6 isEqualToArray:v9];

    if ((v10 & 1) == 0)
    {
      uint64_t v11 = [*(id *)(a1 + 40) connection];
      [v11 _setEnabledTopics:v6];
    }
    uint64_t v12 = *(void **)(a1 + 40);
    if (v12[3]) {
      goto LABEL_14;
    }
    uint64_t v13 = [v12 connection];
    uint64_t v14 = [v13 publicToken];
    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = *(void **)(v15 + 24);
    *(void *)(v15 + 24) = v14;

    if (*(void *)(*(void *)(a1 + 40) + 24))
    {
LABEL_14:
      uint64_t v17 = a1;
      uint64_t v30 = v7;
      id v18 = dispatch_group_create();
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id obj = v5;
      id v19 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v37;
        do
        {
          for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v37 != v21) {
              objc_enumerationMutation(obj);
            }
            uint64_t v23 = *(void *)(*((void *)&v36 + 1) + 8 * i);
            dispatch_group_enter(v18);
            id v24 = *(void **)(v17 + 40);
            v34[0] = _NSConcreteStackBlock;
            v34[1] = 3221225472;
            void v34[2] = sub_100100564;
            void v34[3] = &unk_1001BE408;
            id v35 = v18;
            [v24 _updateRegistrationForConfiguration:v23 completion:v34];
          }
          id v20 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
        }
        while (v20);
      }

      uint64_t v25 = v17;
      uint64_t v26 = *(void *)(v17 + 40);
      id v27 = *(NSObject **)(v26 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10010056C;
      block[3] = &unk_1001BECC0;
      void block[4] = v26;
      id v33 = *(id *)(v25 + 32);
      dispatch_group_notify(v18, v27, block);

      id v7 = v30;
    }
    else
    {
      id v28 = os_log_create("com.apple.amp.itunescloudd", "Push");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v42 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%{public}@ No APNS token available - skipping registration for now", buf, 0xCu);
      }

      [*(id *)(a1 + 32) finishWithError:0];
    }
  }
}

void sub_100100564(uint64_t a1)
{
}

id sub_10010056C(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "Push");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished push registration", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) finishWithError:0];
}

void sub_1001008B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  int v5 = [*(id *)(a1 + 40) connection];

  if (v4 == v5)
  {
    uint64_t v9 = +[ICUserIdentityStore defaultIdentityStore];
    unsigned __int8 v10 = +[ICUserIdentity activeAccount];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_100100A70;
    v13[3] = &unk_1001BDF20;
    id v14 = *(id *)(a1 + 56);
    id v15 = v3;
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40);
    id v16 = v11;
    uint64_t v17 = v12;
    [v9 getPropertiesForUserIdentity:v10 completionHandler:v13];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v19 = v7;
      __int16 v20 = 2114;
      uint64_t v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Push notification came from alternate environment, dropping notification from topic \"%{public}@\": %{public}@", buf, 0x16u);
    }

    [v3 finishWithError:0];
  }
}

void sub_100100A70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ICPushNotificationMessage) initWithMessageUserInfo:*(void *)(a1 + 32)];
  int v5 = [v3 DSID];

  id v6 = [v5 longLongValue];
  id v7 = [v4 accountDSID];
  if (v7 == v6 || (id v8 = v7, (MSVDeviceSupportsMultipleLibraries() & 1) != 0))
  {
    if ([*(id *)(a1 + 48) isEqualToString:@"com.apple.sagad"])
    {
      uint64_t v9 = *(void **)(a1 + 56);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      void v33[2] = sub_100100FF4;
      v33[3] = &unk_1001BE408;
      id v34 = *(id *)(a1 + 40);
      [v9 _handleSagaPushMessage:v4 withCompletionHandler:v33];
      unsigned __int8 v10 = v34;
    }
    else if ([*(id *)(a1 + 48) isEqualToString:@"com.apple.jalisco"])
    {
      id v11 = *(void **)(a1 + 56);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      void v31[2] = sub_100101000;
      void v31[3] = &unk_1001BE408;
      id v32 = *(id *)(a1 + 40);
      [v11 _handleJaliscoPushMessage:v4 withCompletionHandler:v31];
      unsigned __int8 v10 = v32;
    }
    else if (([*(id *)(a1 + 48) isEqualToString:@"com.apple.itunesstored"] & 1) != 0 {
           || [*(id *)(a1 + 48) isEqualToString:@"com.apple.music.service"])
    }
    {
      id v16 = *(void **)(a1 + 56);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10010100C;
      v29[3] = &unk_1001BE408;
      id v30 = *(id *)(a1 + 40);
      [v16 _handleITunesStorePushMessage:v4 withCompletionHandler:v29];
      unsigned __int8 v10 = v30;
    }
    else if ([*(id *)(a1 + 48) isEqualToString:@"com.apple.music.engagement"])
    {
      uint64_t v17 = *(void **)(a1 + 56);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      void v27[2] = sub_100101018;
      v27[3] = &unk_1001BE408;
      id v28 = *(id *)(a1 + 40);
      [v17 _handleMusicEngagementPushMessage:v4 withCompletionHandler:v27];
      unsigned __int8 v10 = v28;
    }
    else if ([*(id *)(a1 + 48) isEqualToString:@"com.apple.music.social"])
    {
      id v18 = *(void **)(a1 + 56);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      void v25[2] = sub_100101024;
      v25[3] = &unk_1001BE408;
      id v26 = *(id *)(a1 + 40);
      [v18 _handleMusicSocialPushMessage:v4 withCompletionHandler:v25];
      unsigned __int8 v10 = v26;
    }
    else if ([*(id *)(a1 + 48) isEqualToString:@"com.apple.storebookkeeper"])
    {
      uint64_t v19 = *(void **)(a1 + 56);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100101030;
      v23[3] = &unk_1001BE408;
      id v24 = *(id *)(a1 + 40);
      [v19 _handleStoreBookkeeperPushMessage:v4 withCompletionHandler:v23];
      unsigned __int8 v10 = v24;
    }
    else
    {
      __int16 v20 = sub_1000EFD7C();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void **)(a1 + 48);
        *(_DWORD *)long long buf = 138543362;
        id v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Unknown push topic '%{public}@'", buf, 0xCu);
      }

      id v22 = *(void **)(a1 + 40);
      unsigned __int8 v10 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
      [v22 finishWithError:v10];
    }
  }
  else
  {
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "Push");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      id v38 = v8;
      __int16 v39 = 2048;
      id v40 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Ignoring push notification for an account that is not the active account. accountDSID=%lld, activeAccountDSID=%lld", buf, 0x16u);
    }

    uint64_t v13 = *(void **)(a1 + 40);
    NSErrorUserInfoKey v35 = NSDebugDescriptionErrorKey;
    unsigned __int8 v10 = +[NSString stringWithFormat:@"Ignoring push notification [account is not active] - accountDSID=%lld - activeAccountDSID=%lld", v8, v6];
    long long v36 = v10;
    id v14 = +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    id v15 = +[NSError errorWithDomain:ICErrorDomain code:-7400 userInfo:v14];
    [v13 finishWithError:v15];
  }
}

id sub_100100FF4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_100101000(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_10010100C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_100101018(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_100101024(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_100101030(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

void sub_100101524(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) length]) {
    [v3 writeString:*(void *)(a1 + 32) withCode:1835365473];
  }
  if ([*(id *)(a1 + 40) length]) {
    [v3 writeString:*(void *)(a1 + 40) withCode:1836152165];
  }
  if (*(unsigned char *)(a1 + 64)) {
    [v3 writeUInt8:1 withCode:1835559268];
  }
  if (*(unsigned char *)(a1 + 65)) {
    [v3 writeUInt8:1 withCode:1634355568];
  }
  if ([*(id *)(a1 + 48) length]) {
    [v3 writeString:*(void *)(a1 + 48) withCode:1836081511];
  }
  id v4 = *(void **)(a1 + 56);
  if (v4)
  {
    id v5 = v4;
    ICDAAPUtilitiesWriteContainer();
  }
}

void sub_100101660(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001016F8;
  v6[3] = &unk_1001BE268;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1001016F8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v4 = v7;
  id v5 = v6;
  ICDAAPUtilitiesWriteContainer();
}

void sub_1001017C0(uint64_t a1, void *a2)
{
  id v2 = a2;
  ICDAAPUtilitiesWriteProperty();
  ICDAAPUtilitiesWriteProperty();
}

void sub_100101F60(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  id v4 = a2;
  [v4 writeUInt32:v3 withCode:1836413810];
  [v4 writeUInt8:*(unsigned __int8 *)(a1 + 36) withCode:1634354753];
}

void sub_100102388(int a1, unsigned __int8 *a2, unsigned int a3, void *a4, const __CFString **a5)
{
  if (a1 <= 1634952288)
  {
    if (a1 <= 1634031683)
    {
      if (a1 > 1634027348)
      {
        if (a1 <= 1634029141)
        {
          if (a1 <= 1634027852)
          {
            if (a1 > 1634027587)
            {
              if (a1 == 1634027588)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.is-hd-video";
                goto LABEL_481;
              }
              if (a1 == 1634027606)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.has-video";
                goto LABEL_481;
              }
            }
            else
            {
              if (a1 == 1634027349)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.gapless-dur";
                goto LABEL_481;
              }
              if (a1 == 1634027587)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.has-chapter-data";
                goto LABEL_481;
              }
            }
          }
          else if (a1 <= 1634028337)
          {
            if (a1 == 1634027853)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.itunes-machine-id";
              goto LABEL_481;
            }
            if (a1 == 1634028337)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.drm-key1-id";
              goto LABEL_481;
            }
          }
          else
          {
            switch(a1)
            {
              case 1634028338:
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.drm-key2-id";
                goto LABEL_481;
              case 1634028907:
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.extended-media-kind";
                goto LABEL_481;
              case 1634029124:
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.non-drm-user-id";
                goto LABEL_481;
            }
          }
          goto LABEL_472;
        }
        if (a1 <= 1634029667)
        {
          if (a1 > 1634029642)
          {
            if (a1 == 1634029643)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.playlist-kind";
              goto LABEL_481;
            }
            if (a1 == 1634029651)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.special-playlist";
              goto LABEL_481;
            }
          }
          else
          {
            if (a1 == 1634029142)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.norm-volume";
              goto LABEL_481;
            }
            if (a1 == 1634029636)
            {
              *a4 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.playlist-data";
              goto LABEL_481;
            }
          }
          goto LABEL_472;
        }
        if (a1 <= 1634029682)
        {
          if (a1 == 1634029668)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (a5)
            {
              CFStringRef v10 = @"com.apple.itunes.display-publication-version";
              goto LABEL_485;
            }
            goto LABEL_486;
          }
          if (a1 == 1634029682)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"com.apple.itunes.playlist-sort-is-reversed";
            goto LABEL_481;
          }
        }
        else
        {
          switch(a1)
          {
            case 1634029683:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.playlist-sort";
              goto LABEL_481;
            case 1634030160:
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"com.apple.itunes.item-redownload-param";
              goto LABEL_485;
            case 1634030192:
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"com.apple.itunes.item-redownload-param-2";
              goto LABEL_485;
          }
        }
      }
      else
      {
        if (a1 > 1634026575)
        {
          if (a1 <= 1634027331)
          {
            if (a1 > 1634026581)
            {
              if (a1 == 1634026582)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.drm-versions";
                goto LABEL_481;
              }
              if (a1 == 1634027090)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.supports-fprap";
                goto LABEL_481;
              }
            }
            else
            {
              if (a1 == 1634026576)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.drm-platform-id";
                goto LABEL_481;
              }
              if (a1 == 1634026578)
              {
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.drm-user-id";
                goto LABEL_481;
              }
            }
          }
          else if (a1 <= 1634027335)
          {
            if (a1 == 1634027332)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.gapless-enc-dr";
              goto LABEL_481;
            }
            if (a1 == 1634027333)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.gapless-enc-del";
              goto LABEL_481;
            }
          }
          else
          {
            switch(a1)
            {
              case 1634027336:
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.gapless-heur";
                goto LABEL_481;
              case 1634027346:
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.gapless-resy";
                goto LABEL_481;
              case 1634027347:
                *a4 = +[ICDResponseDataParser _parseItemIDArrayWithBytes:a2 length:a3];
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.genius-seed-track-id-listing";
                goto LABEL_481;
            }
          }
          goto LABEL_472;
        }
        if (a1 <= 1634026336)
        {
          if (a1 <= 1634026316)
          {
            if (a1 == 1633841260)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"daap.baseplaylist";
              goto LABEL_481;
            }
            if (a1 == 1634026308)
            {
              *a4 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.flat-chapter-data";
              goto LABEL_481;
            }
            goto LABEL_472;
          }
          if (a1 == 1634026317)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"com.apple.itunes.cloud-match-type";
            goto LABEL_481;
          }
          if (a1 == 1634026324)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"com.apple.itunes.cloud-artwork-token";
            goto LABEL_485;
          }
        }
        else
        {
          if (a1 > 1634026354)
          {
            if (a1 == 1634026355)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.cloud-connect-status";
              goto LABEL_481;
            }
            if (a1 != 1634026356)
            {
              if (a1 == 1634026571)
              {
                *a4 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"com.apple.itunes.drm-key-list-id";
                goto LABEL_481;
              }
              goto LABEL_472;
            }
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"com.apple.itunes.cloud-lyrics-token";
            goto LABEL_485;
          }
          if (a1 == 1634026337)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (a5)
            {
              CFStringRef v10 = @"com.apple.itunes.cloud-artwork-url";
              goto LABEL_485;
            }
            goto LABEL_486;
          }
          if (a1 == 1634026354)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"com.apple.itunes.copyright";
            goto LABEL_485;
          }
        }
      }
      goto LABEL_472;
    }
    if (a1 > 1634358894)
    {
      if (a1 > 1634952035)
      {
        switch(a1)
        {
          case 1634952036:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songcodectype";
            break;
          case 1634952045:
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"daap.songcomment";
            goto LABEL_485;
          case 1634952046:
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"daap.songcontentdescription";
            goto LABEL_485;
          case 1634952047:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songcompilation";
            break;
          case 1634952048:
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"daap.songcomposer";
            goto LABEL_485;
          case 1634952050:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songcontentrating";
            break;
          case 1634952051:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songcodecsubtype";
            break;
          case 1634952052:
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"daap.songcategory";
            goto LABEL_485;
          default:
            goto LABEL_472;
        }
        goto LABEL_481;
      }
      if (a1 > 1634951531)
      {
        switch(a1)
        {
          case 1634951787:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.bookmarkable";
            goto LABEL_481;
          case 1634951788:
          case 1634951789:
          case 1634951790:
          case 1634951792:
          case 1634951793:
          case 1634951795:
            goto LABEL_472;
          case 1634951791:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songbookmark";
            goto LABEL_481;
          case 1634951794:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songbitrate";
            goto LABEL_481;
          case 1634951796:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songbeatsperminute";
            goto LABEL_481;
          default:
            if (a1 != 1634951532)
            {
              if (a1 != 1634951538) {
                goto LABEL_472;
              }
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (a5)
              {
                CFStringRef v10 = @"daap.songartist";
                goto LABEL_485;
              }
              goto LABEL_486;
            }
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"daap.songalbum";
            break;
        }
        goto LABEL_485;
      }
      if (a1 <= 1634951520)
      {
        if (a1 == 1634358895)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"com.apple.itunes.store.vpp-org-id";
          goto LABEL_481;
        }
        if (a1 == 1634759535)
        {
          *a4 = +[ICDResponseDataParser _parseItemsResponseWithBytes:a2 length:a3 usingHandler:0];
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.playlistsongs";
          goto LABEL_481;
        }
        goto LABEL_472;
      }
      if (a1 != 1634951521)
      {
        if (a1 == 1634951529)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songalbumid";
          goto LABEL_481;
        }
        goto LABEL_472;
      }
      id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
      *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
      if (!a5) {
        goto LABEL_486;
      }
      CFStringRef v10 = @"daap.songalbumartist";
    }
    else
    {
      if (a1 <= 1634354516)
      {
        if (a1 <= 1634036069)
        {
          if (a1 > 1634035299)
          {
            if (a1 == 1634035300)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.item-flavor-id";
              goto LABEL_481;
            }
            if (a1 == 1634035308)
            {
              *a4 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.item-flavor-listing";
              goto LABEL_481;
            }
          }
          else
          {
            if (a1 == 1634031684)
            {
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"com.apple.itunes.xid";
              goto LABEL_485;
            }
            if (a1 == 1634034544)
            {
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"com.apple.itunes.collection-description";
              goto LABEL_485;
            }
          }
        }
        else if (a1 <= 1634037877)
        {
          if (a1 == 1634036070)
          {
            *a4 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"com.apple.itunes.item-flavor";
            goto LABEL_481;
          }
          if (a1 == 1634037872)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"com.apple.itunes.page-progression";
            goto LABEL_481;
          }
        }
        else
        {
          switch(a1)
          {
            case 1634037878:
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"com.apple.itunes.publication-version";
              goto LABEL_485;
            case 1634038895:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"com.apple.itunes.cloud-purchased-token";
              goto LABEL_481;
            case 1634169456:
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"daap.songgrouping";
              goto LABEL_485;
          }
        }
        goto LABEL_472;
      }
      if (a1 <= 1634356847)
      {
        if (a1 > 1634356832)
        {
          if (a1 == 1634356833)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (a5)
            {
              CFStringRef v10 = @"com.apple.itunes.store.newsstand-artwork-url";
              goto LABEL_485;
            }
            goto LABEL_486;
          }
          if (a1 == 1634356837)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"com.apple.jingle.newsstandBindingEdge";
            goto LABEL_481;
          }
        }
        else
        {
          if (a1 == 1634354517)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"com.apple.itunes.store.extras-url";
            goto LABEL_485;
          }
          if (a1 == 1634354547)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"com.apple.itunes.store.episode-screenshot";
            goto LABEL_485;
          }
        }
        goto LABEL_472;
      }
      if (a1 <= 1634357332)
      {
        if (a1 == 1634356848)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"com.apple.jingle.AppIconNeedsShine";
          goto LABEL_481;
        }
        if (a1 == 1634356852)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"com.apple.jingle.newsstandBindingType";
          goto LABEL_481;
        }
        goto LABEL_472;
      }
      switch(a1)
      {
        case 1634357333:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"com.apple.itunes.store.product-url";
          break;
        case 1634358884:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"com.apple.itunes.store.vpp-org-display-name";
          break;
        case 1634358892:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"com.apple.itunes.store.vpp-is-licensed";
          goto LABEL_481;
        default:
          goto LABEL_472;
      }
    }
    goto LABEL_485;
  }
  if (a1 <= 1634956651)
  {
    if (a1 <= 1634954338)
    {
      if (a1 > 1634952547)
      {
        if (a1 > 1634953071)
        {
          if (a1 <= 1634954083)
          {
            if (a1 == 1634953072)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"daap.songgapless";
              goto LABEL_481;
            }
            if (a1 == 1634953328)
            {
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"daap.songhasbeenplayed";
              goto LABEL_481;
            }
          }
          else
          {
            switch(a1)
            {
              case 1634954084:
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"daap.songlastskipdate";
                goto LABEL_481;
              case 1634954096:
                sub_100104EF4(a2, a3);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
                if (!a5) {
                  return;
                }
                CFStringRef v9 = @"daap.songuserskipcount";
                goto LABEL_481;
              case 1634954105:
                id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
                *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
                if (!a5) {
                  goto LABEL_486;
                }
                CFStringRef v10 = @"daap.songkeywords";
                goto LABEL_485;
            }
          }
        }
        else if (a1 <= 1634952562)
        {
          if (a1 == 1634952548)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (a5)
            {
              CFStringRef v10 = @"daap.songextradata";
              goto LABEL_485;
            }
            goto LABEL_486;
          }
          if (a1 == 1634952561)
          {
            id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
            *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
            if (!a5) {
              goto LABEL_486;
            }
            CFStringRef v10 = @"daap.songeqpreset";
            goto LABEL_485;
          }
        }
        else
        {
          switch(a1)
          {
            case 1634952563:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"daap.songexcludefromshuffle";
              goto LABEL_481;
            case 1634952813:
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"daap.songformat";
              goto LABEL_485;
            case 1634953070:
              id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
              *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
              if (!a5) {
                goto LABEL_486;
              }
              CFStringRef v10 = @"daap.songgenre";
              goto LABEL_485;
          }
        }
        goto LABEL_472;
      }
      switch(a1)
      {
        case 1634952289:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdateadded";
          break;
        case 1634952290:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdisabled";
          break;
        case 1634952291:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdisccount";
          break;
        case 1634952299:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdatakind";
          break;
        case 1634952301:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdatemodified";
          break;
        case 1634952302:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdiscnumber";
          break;
        case 1634952304:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdatepurchased";
          break;
        case 1634952306:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdatereleased";
          break;
        case 1634952308:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.songdescription";
          goto LABEL_485;
        default:
          goto LABEL_472;
      }
LABEL_481:
      *a5 = v9;
      return;
    }
    if (a1 > 1634956128)
    {
      if (a1 > 1634956153)
      {
        if (a1 > 1634956396)
        {
          if (a1 == 1634956397)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songtime";
            goto LABEL_481;
          }
          if (a1 == 1634956398)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songtracknumber";
            goto LABEL_481;
          }
        }
        else
        {
          if (a1 == 1634956154)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songsize";
            goto LABEL_481;
          }
          if (a1 == 1634956387)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.songtrackcount";
            goto LABEL_481;
          }
        }
        goto LABEL_472;
      }
      switch(a1)
      {
        case 1634956129:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.sortartist";
          goto LABEL_485;
        case 1634956131:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.sortcomposer";
          goto LABEL_485;
        case 1634956140:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.sortalbumartist";
          goto LABEL_485;
        case 1634956142:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.sortname";
          goto LABEL_485;
        case 1634956144:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songstoptime";
          break;
        case 1634956146:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songsamplerate";
          break;
        case 1634956147:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.sortseriesname";
          goto LABEL_485;
        case 1634956148:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songstarttime";
          break;
        case 1634956149:
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.sortalbum";
          goto LABEL_485;
        default:
          goto LABEL_472;
      }
      goto LABEL_481;
    }
    if (a1 > 1634955371)
    {
      if (a1 > 1634955880)
      {
        if (a1 == 1634955881)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songartistid";
          goto LABEL_481;
        }
        if (a1 == 1634955894)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songrelativevolume";
          goto LABEL_481;
        }
      }
      else
      {
        if (a1 == 1634955372)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"daap.songdateplayed";
          goto LABEL_481;
        }
        if (a1 == 1634955381)
        {
          id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
          *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
          if (!a5) {
            goto LABEL_486;
          }
          CFStringRef v10 = @"daap.songpodcasturl";
          goto LABEL_485;
        }
      }
      goto LABEL_472;
    }
    if (a1 != 1634954339)
    {
      if (a1 == 1634954355)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"daap.songlongsize";
        goto LABEL_481;
      }
      if (a1 == 1634955363)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"daap.songuserplaycount";
        goto LABEL_481;
      }
      goto LABEL_472;
    }
    id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
    *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
    if (!a5) {
      goto LABEL_486;
    }
    CFStringRef v10 = @"daap.songlongcontentdescription";
LABEL_485:
    *a5 = v10;
    goto LABEL_486;
  }
  if (a1 > 1835361394)
  {
    if (a1 > 1835626092)
    {
      if (a1 > 1936016200)
      {
        if (a1 <= 1936020040)
        {
          if (a1 == 1936016201)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.composersyncid";
            goto LABEL_481;
          }
          if (a1 == 1936017225)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.genresyncid";
            goto LABEL_481;
          }
        }
        else
        {
          switch(a1)
          {
            case 1936020041:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"daap.artistsyncid";
              goto LABEL_481;
            case 1936020297:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"daap.syncid";
              goto LABEL_481;
            case 1936020553:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"daap.albumartistsyncid";
              goto LABEL_481;
          }
        }
        goto LABEL_472;
      }
      if (a1 > 1836082545)
      {
        switch(a1)
        {
          case 1836082546:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.persistentid";
            goto LABEL_481;
          case 1836282996:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.status";
            goto LABEL_481;
          case 1936015689:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"daap.albumsyncid";
            goto LABEL_481;
        }
        goto LABEL_472;
      }
      if (a1 == 1835626093)
      {
        id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
        *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
        if (a5)
        {
          CFStringRef v10 = @"dmap.itemname";
          goto LABEL_485;
        }
        goto LABEL_486;
      }
      if (a1 == 1836082031)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"dmap.parentcontainerid";
        goto LABEL_481;
      }
    }
    else
    {
      if (a1 > 1835624552)
      {
        if (a1 <= 1835625315)
        {
          if (a1 == 1835624553)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.itemhidden";
            goto LABEL_481;
          }
          if (a1 == 1835624804)
          {
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.itemid";
            goto LABEL_481;
          }
        }
        else
        {
          switch(a1)
          {
            case 1835625316:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"dmap.itemkind";
              goto LABEL_481;
            case 1835625572:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"dmap.longitemid";
              goto LABEL_481;
            case 1835625827:
              sub_100104EF4(a2, a3);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              if (!a5) {
                return;
              }
              CFStringRef v9 = @"dmap.itemcount";
              goto LABEL_481;
          }
        }
        goto LABEL_472;
      }
      if (a1 > 1835362671)
      {
        if (a1 == 1835362672)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmap.itemdateplayed";
          goto LABEL_481;
        }
        if (a1 != 1835366516)
        {
          if (a1 == 1835623521)
          {
            *a4 = +[ICDResponseDataParser _parseItemIDArrayWithBytes:a2 length:a3];
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.itemidlisting";
            goto LABEL_481;
          }
          goto LABEL_472;
        }
        id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
        *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
        if (!a5) {
          goto LABEL_486;
        }
        CFStringRef v10 = @"dmap.objectextradata";
        goto LABEL_485;
      }
      if (a1 == 1835361395) {
        return;
      }
      if (a1 == 1835362657)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"dmap.itemdateadded";
        goto LABEL_481;
      }
    }
LABEL_472:
    id v11 = sub_1000EFC9C();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67110144;
      unsigned int v14 = HIBYTE(a1);
      __int16 v15 = 1024;
      unsigned int v16 = HIWORD(a1);
      __int16 v17 = 1024;
      unsigned int v18 = a1 >> 8;
      __int16 v19 = 1024;
      int v20 = a1;
      __int16 v21 = 1024;
      unsigned int v22 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unhandled code in item response: %c%c%c%c (%u bytes long)", buf, 0x20u);
    }

    return;
  }
  if (a1 > 1668117099)
  {
    if (a1 > 1835103851)
    {
      if (a1 <= 1835234408)
      {
        if (a1 == 1835103852)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmap.itemavailable";
          goto LABEL_481;
        }
        if (a1 == 1835234403)
        {
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmap.containercount";
          goto LABEL_481;
        }
      }
      else
      {
        switch(a1)
        {
          case 1835234409:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.containeritemid";
            goto LABEL_481;
          case 1835295339:
            sub_100104EF4(a2, a3);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.databasekind";
            goto LABEL_481;
          case 1835295596:
            *a4 = +[ICDResponseDataParser _parseDictionaryCollectionWithBytes:a2 length:a3];
            if (!a5) {
              return;
            }
            CFStringRef v9 = @"dmap.dictionary";
            goto LABEL_481;
        }
      }
    }
    else if (a1 <= 1668117346)
    {
      if (a1 == 1668117100)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"dmcp.supportsremotelibraryselection";
        goto LABEL_481;
      }
      if (a1 == 1668117346)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"dmcp.supportsbonjoursourcesupdates";
        goto LABEL_481;
      }
    }
    else
    {
      switch(a1)
      {
        case 1668117347:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmcp.supportscontrolpromptrequests";
          goto LABEL_481;
        case 1668117360:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmcp.supportsplaystatusupdates";
          goto LABEL_481;
        case 1668117366:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmcp.supportsvolumecontrol";
          goto LABEL_481;
      }
    }
    goto LABEL_472;
  }
  if (a1 > 1667330932)
  {
    if (a1 <= 1667584855)
    {
      if (a1 == 1667330933)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"dacp.supports-setuserrating";
        goto LABEL_481;
      }
      if (a1 == 1667584839)
      {
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"com.apple.itunes.supports-genius-control";
        goto LABEL_481;
      }
    }
    else
    {
      switch(a1)
      {
        case 1667584856:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"com.apple.itunes.supported-itunes-extensions";
          goto LABEL_481;
        case 1668114795:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmcp.interfacekind";
          goto LABEL_481;
        case 1668116594:
          sub_100104EF4(a2, a3);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          if (!a5) {
            return;
          }
          CFStringRef v9 = @"dmcp.protocolversion";
          goto LABEL_481;
      }
    }
    goto LABEL_472;
  }
  if (a1 > 1634957681)
  {
    switch(a1)
    {
      case 1634957682:
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"daap.songyear";
        goto LABEL_481;
      case 1667330162:
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"dacp.protocolversion";
        goto LABEL_481;
      case 1667330931:
        sub_100104EF4(a2, a3);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        if (!a5) {
          return;
        }
        CFStringRef v9 = @"dacp.supports-speakerselection";
        goto LABEL_481;
    }
    goto LABEL_472;
  }
  if (a1 != 1634956652)
  {
    if (a1 == 1634956658)
    {
      sub_100104EF4(a2, a3);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      if (!a5) {
        return;
      }
      CFStringRef v9 = @"daap.songuserrating";
      goto LABEL_481;
    }
    goto LABEL_472;
  }
  id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 length:a3];
  *a4 = [objc_alloc((Class)NSString) initWithData:v12 encoding:4];
  if (a5)
  {
    CFStringRef v10 = @"daap.songdataurl";
    goto LABEL_485;
  }
LABEL_486:
}

id sub_100104EF4(unsigned __int8 *a1, uint64_t a2)
{
  id v3 = 0;
  switch(a2)
  {
    case 1:
      id v3 = [objc_alloc((Class)NSNumber) initWithUnsignedChar:*a1];
      break;
    case 2:
      id v3 = [objc_alloc((Class)NSNumber) initWithUnsignedShort:bswap32(*(unsigned __int16 *)a1) >> 16];
      break;
    case 4:
      id v3 = [objc_alloc((Class)NSNumber) initWithUnsignedLong:bswap32(*(_DWORD *)a1)];
      break;
    case 8:
      id v3 = [objc_alloc((Class)NSNumber) initWithUnsignedLongLong:(((unint64_t)*a1 << 56) | ((unint64_t)a1[1] << 48) | ((unint64_t)a1[2] << 40) | ((unint64_t)a1[3] << 32) | ((unint64_t)a1[4] << 24) | ((unint64_t)a1[5] << 16) | ((unint64_t)a1[6] << 8))+ a1[7]];
      break;
    default:
      break;
  }

  return v3;
}

uint64_t sub_100108218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1001082E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 40) parseItemWithBytes:a2 length:a3 usingHandler:*(void *)(a1 + 32)];
}

void sub_100109074(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = a2;
  CFStringRef v9 = objc_alloc_init(ICAppleMusicAPITokenResponse);
  [(ICAppleMusicAPITokenResponse *)v9 setTokenCollection:v8];

  if (v7)
  {
    CFStringRef v10 = [[ICAppleMusicAPITokenError alloc] initWithNSError:v7];
    [(ICAppleMusicAPITokenError *)v10 setPhase:a4];
    [(ICAppleMusicAPITokenResponse *)v9 setError:v10];
  }
  id v11 = os_log_create("com.apple.amp.itunescloudd", "Connections");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = a1[5];
    unsigned int v14 = [(ICAppleMusicAPITokenResponse *)v9 privacyConsciousDescription];
    int v16 = 138543874;
    uint64_t v17 = v12;
    __int16 v18 = 2114;
    uint64_t v19 = v13;
    __int16 v20 = 2114;
    __int16 v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%{public}@ Reporting completion for token request %{public}@ with response: %{public}@.", (uint8_t *)&v16, 0x20u);
  }
  uint64_t v15 = a1[6];
  if (v15) {
    (*(void (**)(uint64_t, ICAppleMusicAPITokenResponse *))(v15 + 16))(v15, v9);
  }
}

void sub_1001091F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "Connections");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v18 = v9;
      __int16 v19 = 2114;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Encountered error trying to request Developer Token: %{public}@.", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}@ Successfully retrieved Developer Token.", buf, 0xCu);
    }

    id v11 = objc_alloc_init(ICAppleMusicAPITokenCollection);
    [(ICAppleMusicAPITokenCollection *)v11 setDeveloperToken:v5];
    id v12 = objc_msgSend(objc_alloc((Class)ICMusicUserTokenFetchRequest), "initWithDeveloperToken:clientInfo:options:", v5, *(void *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "shouldIgnoreUserTokenCache"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100109414;
    v14[3] = &unk_1001BE398;
    void v14[4] = *(void *)(a1 + 32);
    uint64_t v15 = v11;
    id v16 = *(id *)(a1 + 56);
    uint64_t v13 = v11;
    [v12 performRequestWithResponseHandler:v14];
  }
}

void sub_100109414(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "Connections");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2114;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ Encountered error trying to request Music User Token: %{public}@.", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) setUserToken:a2];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_10010958C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stop];
}

id sub_100109608(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _start];
}

void sub_100109854(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)IDSProtobuf);
  id v5 = [v3 data];

  id v6 = [v4 initWithProtobufData:v5 type:2000 isResponse:0];
  uint64_t v7 = +[NSSet setWithObject:IDSDefaultPairedDevice];
  v27[0] = IDSSendMessageOptionTimeoutKey;
  int v8 = +[NSNumber numberWithLong:llround(3600.0)];
  v28[0] = v8;
  v28[1] = &__kCFBooleanTrue;
  v27[1] = IDSSendMessageOptionWantsClientAcknowledgementKey;
  void v27[2] = IDSSendMessageOptionForceLocalDeliveryKey;
  void v28[2] = &__kCFBooleanTrue;
  uint64_t v9 = +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];

  __int16 v10 = *(void **)(*(void *)(a1 + 32) + 16);
  id v21 = 0;
  id v22 = 0;
  unsigned int v11 = [v10 sendProtobuf:v6 toDestinations:v7 priority:300 options:v9 identifier:&v22 error:&v21];
  id v12 = v22;
  id v13 = v21;
  unsigned int v14 = os_log_create("com.apple.amp.itunescloudd", "Connections");
  uint64_t v15 = v14;
  if (v11)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v24 = v16;
      __int16 v25 = 2114;
      id v26 = v12;
      uint64_t v17 = "%{public}@ Successfully sent response message; responseMessageIdentifier = %{public}@.";
      uint64_t v18 = v15;
      os_log_type_t v19 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v24 = v20;
    __int16 v25 = 2114;
    id v26 = v13;
    uint64_t v17 = "%{public}@ Failed to send response message with error = %{public}@.";
    uint64_t v18 = v15;
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }
}

id sub_100109B58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stop];
}

void sub_100109C60(id a1)
{
  id v1 = [[AppleMusicAPITokenIDSService alloc] _init];
  uint64_t v2 = qword_1001F3A48;
  qword_1001F3A48 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10010A424(uint64_t a1, unsigned char *a2, void *a3)
{
  id v5 = a3;
  if (a2 && *a2)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136446210;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BackgroundTask Fired: %{public}s", (uint8_t *)&v15, 0xCu);
    }

    uint64_t v7 = +[ICDeviceSetupStatusMonitor sharedMonitor];
    unsigned __int8 v8 = [v7 isSetupAssistantComplete];

    if (v8)
    {
      int v9 = xpc_dictionary_get_BOOL(v5, kBackgroundTaskAgentJobExpired);
      int64_t int64 = xpc_dictionary_get_int64(v5, kBackgroundTaskAgentJobStatus);
      unsigned int v11 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136315906;
        uint64_t v16 = a2;
        __int16 v17 = 1024;
        int v18 = v9;
        __int16 v19 = 1024;
        int v20 = (int64 == 2) & ~v9;
        __int16 v21 = 1024;
        BOOL v22 = int64 == 1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BackgroundTask %s: expired = %d, satisfied = %d, invalid = %d", (uint8_t *)&v15, 0x1Eu);
      }

      [*(id *)(a1 + 32) _handleJobNamed:a2 satisfied:(int64 == 2) & ~v9 invalid:int64 == 1];
    }
    else
    {
      unsigned int v14 = os_log_create("com.apple.amp.itunescloudd", "XPC");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Ignoring BackgroundTask because setup assistant hasn't finished.", (uint8_t *)&v15, 2u);
      }

      [*(id *)(a1 + 32) _unscheduleJobNamed:a2];
    }
  }
  else
  {
    id v13 = os_log_create("com.apple.amp.itunescloudd", "XPC");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "BackgroundTask Fired without a job name", (uint8_t *)&v15, 2u);
    }
  }
}

void sub_10010A8E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138543362;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Jalisco media deferred push update failed with error %{public}@, trying again in an hour.", (uint8_t *)&v10, 0xCu);
    }

    id v5 = *(void **)(a1 + 32);
    id v6 = +[NSDate date];
    [v6 timeIntervalSinceReferenceDate];
    unsigned __int8 v8 = +[NSNumber numberWithDouble:v7 + 3600.0];
    int v9 = [*(id *)(a1 + 32) _baseBtaJobForDeferredPush];
    [v5 _scheduleJobNamed:"com.apple.itunescloudd.deferredPushUpdate.jaliscoMedia" withStartTime:v8 baseBtaJob:v9];
  }
  else
  {
    [*(id *)(a1 + 32) unscheduleJaliscoMediaDeferredPushUpate];
  }
}

void sub_10010AC7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = os_log_create("com.apple.amp.itunescloudd", "PurchaseSync");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v20 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Jalisco media periodic poll update failed with error %{public}@, trying again tomorrow.", buf, 0xCu);
    }

    id v5 = objc_alloc((Class)NSNumber);
    id v6 = +[NSDate date];
    [v6 timeIntervalSinceReferenceDate];
    id v8 = [v5 initWithDouble:v7 + 86400.0];

    int v9 = *(void **)(a1 + 32);
    int v10 = [v9 _nextJaliscoMediaPollTimeKey];
    [v9 _setHomeSharingPrefsNumber:v8 forKey:v10];

    id v11 = *(void **)(a1 + 32);
    objc_msgSend(v11, "_baseBtaJobForPeriodicPollCellularDataAllowed:", objc_msgSend(v11, "_cellularDataAllowedForJaliscoMedia"));
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    [v11 _scheduleJobNamed:"com.apple.itunescloudd.periodicPoll.jaliscoMedia" withStartTime:v8 baseBtaJob:v12];
  }
  else
  {
    id v13 = [objc_alloc((Class)MSVXPCTransaction) initWithName:@"CloudPeriodicPoller - JaliscoMedia - LoadBag"];
    [v13 beginTransaction];
    id v14 = objc_alloc((Class)ICStoreRequestContext);
    int v15 = +[ICUserIdentity activeAccount];
    id v8 = [v14 initWithIdentity:v15];

    uint64_t v16 = +[ICURLBagProvider sharedBagProvider];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10010AED8;
    v17[3] = &unk_1001BF210;
    void v17[4] = *(void *)(a1 + 32);
    id v18 = v13;
    id v12 = v13;
    [v16 getBagForRequestContext:v8 withCompletionHandler:v17];
  }
}

void sub_10010AED8(uint64_t a1, void *a2)
{
  id v19 = [a2 dictionaryForBagKey:@"purchase-daap"];
  id v3 = ICGetCloudDAAPClientPrefix();
  id v4 = [v3 stringByAppendingString:@"forced-refresh-frequency-minutes"];
  id v5 = [v19 objectForKey:v4];
  id v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v7 = [v19 objectForKey:@"forced-refresh-frequency-minutes"];
  }
  id v8 = v7;

  if (v8)
  {
    [v8 doubleValue];
    double v10 = v9 * 60.0;
  }
  else
  {
    double v10 = 604800.0;
  }
  id v11 = objc_alloc((Class)NSNumber);
  id v12 = +[NSDate date];
  [v12 timeIntervalSinceReferenceDate];
  id v14 = [v11 initWithDouble:v10 + v13];

  int v15 = *(void **)(a1 + 32);
  uint64_t v16 = [v15 _nextJaliscoMediaPollTimeKey];
  [v15 _setHomeSharingPrefsNumber:v14 forKey:v16];

  __int16 v17 = *(void **)(a1 + 32);
  id v18 = objc_msgSend(v17, "_baseBtaJobForPeriodicPollCellularDataAllowed:", objc_msgSend(v17, "_cellularDataAllowedForJaliscoMedia"));
  [v17 _scheduleJobNamed:"com.apple.itunescloudd.periodicPoll.jaliscoMedia" withStartTime:v14 baseBtaJob:v18];

  [*(id *)(a1 + 40) endTransaction];
}

void sub_10010B298(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138543362;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Saga deferred push update failed with error %{public}@, trying again in an hour.", (uint8_t *)&v10, 0xCu);
    }

    id v5 = *(void **)(a1 + 32);
    id v6 = +[NSDate date];
    [v6 timeIntervalSinceReferenceDate];
    id v8 = +[NSNumber numberWithDouble:v7 + 3600.0];
    double v9 = [*(id *)(a1 + 32) _baseBtaJobForDeferredPush];
    [v5 _scheduleJobNamed:"com.apple.itunescloudd.deferredPushUpdate.saga" withStartTime:v8 baseBtaJob:v9];
  }
  else
  {
    [*(id *)(a1 + 32) unscheduleSagaDeferredPushUpate];
  }
}

void sub_10010B69C(id a1)
{
  id v1 = objc_alloc_init(CloudBackgroundTaskManager);
  uint64_t v2 = qword_1001F3A58;
  qword_1001F3A58 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10010B7FC(uint64_t a1, void *a2)
{
  return [a2 writeUInt32:*(unsigned int *)(a1 + 32) withCode:1835624804];
}

id sub_10010BF18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  double v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v13 = 138543362;
    uint64_t v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Clearing temporary item cloud ids.", (uint8_t *)&v13, 0xCu);
  }

  if ([v3 executeUpdate:@"UPDATE item_store SET store_saga_id = 0"])
  {
    double v9 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v13 = 138543362;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ - Clearing temporary container cloud ids.", (uint8_t *)&v13, 0xCu);
    }

    id v11 = [v3 executeUpdate:@"UPDATE container SET store_cloud_id = 0"];
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

void sub_10010C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10010C6C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10010C6D4(uint64_t a1)
{
}

void sub_10010C6DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v18 = v7;

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  int v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v8;
  id v14 = v8;

  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v9;
  id v17 = v9;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10010DD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose((const void *)(v69 - 192), 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Unwind_Resume(a1);
}

void sub_10010DE80(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (v5)
  {
    if ([v5 responseCode] == (id)200)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v6 databaseRevision];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v6 hasAddToPlaylistBehavior];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v6 addToPlaylistBehavior];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v6 hasNeedsResetSync];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [v6 needsResetSync];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = [v6 hasClientFeaturesVersion];
      uint64_t v7 = [v6 clientFeaturesVersion];
      uint64_t v8 = *(void *)(*(void *)(a1 + 104) + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = [v6 hasAddToLibraryWhenFavoritingBehavior];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = [v6 addToLibraryWhenFavoritingBehavior];
      char v10 = *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
      if (v10) {
        char v10 = *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) != 0;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = v10;
      id v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync_Oversize");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        int v13 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        int v14 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
        int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
        int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
        int v17 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
        int v18 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
        int v19 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
        uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v21 = *(void *)(a1 + 40);
        int v24 = 138545922;
        uint64_t v25 = v22;
        __int16 v26 = 1024;
        int v27 = v12;
        __int16 v28 = 1024;
        int v29 = v13;
        __int16 v30 = 1024;
        int v31 = v14;
        __int16 v32 = 1024;
        int v33 = v15;
        __int16 v34 = 1024;
        int v35 = v16;
        __int16 v36 = 1024;
        int v37 = v17;
        __int16 v38 = 1024;
        int v39 = v18;
        __int16 v40 = 1024;
        int v41 = v19;
        __int16 v42 = 2114;
        uint64_t v43 = v20;
        __int16 v44 = 2114;
        uint64_t v45 = v21;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ - Got update response databaseRevision=%u, addToPlaylistBehavior=%{BOOL}u, favoriteSongAddToLibraryBehavior=%{BOOL}u, needsResetSync=%{BOOL}u, clientFeaturesVersion=%{BOOL}u, addToPlaylistBehaviorDAAPValue=%d, addToLibraryWhenFavoritingBehaviorDAAPValue=%d, needsResetSyncDAAPValue=%d, clientFeaturesVersionDAAPValue=%{public}@, currentClientBuildVersion=%{public}@", (uint8_t *)&v24, 0x50u);
      }
    }
    uint64_t v23 = [v6 error];
    [*(id *)(a1 + 32) setError:v23];
  }
  else
  {
    [*(id *)(a1 + 32) setError:a3];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10010E13C(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2 == 0;
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setError:v4];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10010E1AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  uint64_t v7 = [v3 executeQuery:@"SELECT best_artwork_token.entity_pid FROM best_artwork_token JOIN artwork_token ON best_artwork_token.entity_pid = artwork_token.entity_pid AND best_artwork_token.entity_type = artwork_token.entity_type AND best_artwork_token.available_artwork_token=artwork_token.artwork_token WHERE best_artwork_token.entity_type = ? AND best_artwork_token.artwork_type = ? AND artwork_source_type = ? AND available_artwork_token != ''" withParameters:&off_1001CCD60];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10010E2B8;
  void v8[3] = &unk_1001BE5B8;
  id v9 = *(id *)(a1 + 40);
  [v7 enumerateRowsWithBlock:v8];
}

void sub_10010E2B8(uint64_t a1, void *a2)
{
  id v3 = [a2 int64ForColumnIndex:0];
  id v4 = *(void **)(a1 + 32);
  id v5 = +[NSNumber numberWithLongLong:v3];
  [v4 addObject:v5];
}

uint64_t sub_10010E400(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  [v3 setPrivacyContext:v6];

  uint64_t v7 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyStoreSagaID equalToInt64:0];
  uint64_t v8 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyPurchaseHistoryID equalToInt64:0];
  uint64_t v9 = +[ML3ComparisonPredicate predicateWithProperty:ML3TrackPropertyMediaType value:&off_1001CC7E8 comparison:10];
  +[ML3PropertyPredicate predicateWithProperty:ML3TrackPropertyIsInMyLibrary];
  int v27 = (void *)v8;
  __int16 v28 = (void *)v7;
  v35[0] = v7;
  uint64_t v25 = v35[1] = v8;
  __int16 v26 = (void *)v9;
  v35[2] = v9;
  v35[3] = v25;
  char v10 = +[NSArray arrayWithObjects:v35 count:4];
  uint64_t v11 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v10];

  int v29 = (void *)v11;
  int v12 = +[ML3Track queryWithLibrary:*(void *)(a1 + 40) predicate:v11];
  int v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v32 = v14;
    __int16 v33 = 2048;
    id v34 = [v12 countOfEntities];
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ - Removing %lu items that do not have a cloud id.", buf, 0x16u);
  }

  unsigned int v24 = [v12 deleteAllEntitiesFromLibraryWithDeletionType:2 usingConnection:v3];
  int v15 = +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyStoreCloudID equalToInt64:0];
  int v16 = +[ML3ComparisonPredicate predicateWithProperty:ML3ContainerPropertyIsHidden equalToInt64:0];
  v30[0] = v15;
  v30[1] = v16;
  int v17 = +[NSArray arrayWithObjects:v30 count:2];
  int v18 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v17];

  int v19 = +[ML3Container queryWithLibrary:*(void *)(a1 + 40) predicate:v18];
  uint64_t v20 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = [v19 countOfEntities];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v32 = v21;
    __int16 v33 = 2048;
    id v34 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@ - Removing %lu playlists that do not have a cloud id.", buf, 0x16u);
  }

  [v19 deleteAllEntitiesFromLibraryWithDeletionType:2 usingConnection:v3];
  [*(id *)(a1 + 40) setValue:&__kCFBooleanTrue forDatabaseProperty:@"createdBuiltInSmartPlaylists"];
  [*(id *)(a1 + 40) setValue:&__kCFBooleanTrue forDatabaseProperty:@"autoCreatedSmartPlaylistsDeleted"];

  return v24;
}

void sub_100110AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x410], 8);
  _Block_object_dispose(&STACK[0x330], 8);
  _Block_object_dispose(&STACK[0x360], 8);
  _Block_object_dispose((const void *)(v62 - 192), 8);
  _Unwind_Resume(a1);
}

Class sub_100110BE8(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1001F3A70)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_100111C04;
    void v6[4] = &unk_1001BEA20;
    void v6[5] = v6;
    long long v7 = off_1001BE628;
    uint64_t v8 = 0;
    qword_1001F3A70 = _sl_dlopen();
  }
  if (!qword_1001F3A70)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *MobileBackupLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"CloudUpdateLibraryOperation.m", 43, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MBStateInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"Class getMBStateInfoClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"CloudUpdateLibraryOperation.m", 44, @"Unable to find class %s", "MBStateInfo");

LABEL_10:
    __break(1u);
  }
  qword_1001F3A68 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100110DD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v18 = v7;

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  int v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v8;
  id v14 = v8;

  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  int v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v9;
  id v17 = v9;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100110EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    *a5 = 1;
  }
  else
  {
    int v29 = v9;
    uint64_t v10 = +[NSMutableDictionary dictionaryWithSharedKeySet:*(void *)(a1 + 40)];
    uint64_t v11 = +[NSString stringWithFormat:@"%llx", a2];
    [v10 setObject:v11 forKey:@"persistent-id"];

    id v28 = *(id *)(a3 + 8 * *(void *)(a1 + 72));
    if (((unsigned __int16)[v28 intValue] & 0x400) != 0) {
      CFStringRef v12 = @"music-video";
    }
    else {
      CFStringRef v12 = @"song";
    }
    __int16 v30 = v10;
    [v10 setObject:v12 forKey:@"kind"];
    id v13 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 8);
    id v14 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 16);
    int v27 = v13;
    if ((int)[v13 intValue] >= 250 && objc_msgSend(v14, "intValue") == 2) {
      [v30 setObject:&__kCFBooleanTrue forKey:@"has-subscription-drm"];
    }
    __int16 v26 = v14;
    unsigned int v15 = [*(id *)(a3 + 8 * *(void *)(a1 + 72) + 24) BOOLValue];
    unsigned int v16 = [*(id *)(a3 + 8 * *(void *)(a1 + 72) + 32) BOOLValue];
    if (*(void *)(a1 + 72))
    {
      unsigned int v17 = v16;
      unint64_t v18 = 0;
      uint64_t v19 = ML3TrackPropertyUserRating;
      uint64_t v20 = ML3TrackPropertyUserAlbumRating;
      do
      {
        id v21 = *(id *)(a3 + 8 * v18);
        id v22 = [*(id *)(a1 + 48) objectAtIndex:v18];
        uint64_t v23 = v22;
        if ((!v15 || ([v22 isEqualToString:v19] & 1) == 0)
          && (!v17 || ([v23 isEqualToString:v20] & 1) == 0))
        {
          uint64_t v24 = [*(id *)(a1 + 56) geniusValueForML3TrackProperty:v23 value:v21];

          if (v24)
          {
            uint64_t v25 = [*(id *)(a1 + 56) geniusTrackPropertyForML3TrackProperty:v23];
            [v30 setObject:v24 forKey:v25];

            id v21 = (id)v24;
          }
          else
          {
            id v21 = 0;
          }
        }

        ++v18;
      }
      while (v18 < *(void *)(a1 + 72));
    }
    [*(id *)(a1 + 64) addObject:v30];

    id v9 = v29;
  }
}

void sub_100111158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  if (![*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v10 = +[NSMutableDictionary dictionaryWithSharedKeySet:*(void *)(a1 + 40)];
    uint64_t v11 = +[NSNumber numberWithLongLong:a2];
    [v10 setObject:v11 forKey:@"persistent-id"];

    unint64_t v12 = *(void *)(a1 + 72);
    if (v12)
    {
      for (unint64_t i = 0; i < v12; ++i)
      {
        id v14 = *(void **)(a1 + 48);
        id v15 = *(id *)(a3 + 8 * i);
        unsigned int v16 = [v14 objectAtIndex:i];
        unsigned int v17 = [*(id *)(a1 + 56) geniusValueForML3ContainerProperty:v16 value:v15];

        if (v17)
        {
          unint64_t v18 = [*(id *)(a1 + 56) geniusPlaylistPropertyForML3ContainerProperty:v16];
          [v10 setObject:v17 forKey:v18];
        }
        unint64_t v12 = *(void *)(a1 + 72);
      }
    }
    id v19 = *(id *)(a3 + 8 * v12);
    id v20 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 8);
    id v21 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 32);
    id v22 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 40);
    id v74 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 48);
    id v73 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 16);
    __int16 v71 = v20;
    id v72 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 24);
    if (([v20 BOOLValue] & 1) != 0 && objc_msgSend(v19, "length"))
    {
      uint64_t v23 = v22;
      [v10 setObject:v19 forKey:@"playlist-global-id"];
      uint64_t v24 = 7;
LABEL_30:
      __int16 v51 = +[NSNumber numberWithInt:v24];
      [v10 setObject:v51 forKey:@"kind"];

      [*(id *)(a1 + 64) addObject:v10];
      goto LABEL_31;
    }
    if ([v21 BOOLValue])
    {
      uint64_t v23 = v22;
      uint64_t v24 = 4;
      goto LABEL_30;
    }
    unsigned __int8 v25 = [v74 BOOLValue];
    unsigned __int8 v26 = v25;
    uint64_t v53 = a2;
    if (v25)
    {
      unsigned __int8 v62 = v25;
      id v58 = v9;
      id v64 = v19;
      int v27 = 3;
    }
    else
    {
      if (![v22 length])
      {
        uint64_t v23 = v22;
        if ([v73 BOOLValue])
        {
          uint64_t v24 = 8;
          goto LABEL_30;
        }
        unsigned int v52 = [v72 BOOLValue];
        if (v52) {
          uint64_t v24 = 9;
        }
        else {
          uint64_t v24 = 1;
        }
        if (v52) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      unsigned __int8 v62 = v26;
      id v58 = v9;
      id v64 = v19;
      int v27 = 2;
    }
    unsigned int v69 = v27;
    id v63 = v21;
    id v68 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 56);
    id v67 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 64);
    id v28 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 72);
    id v29 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 80);
    id v30 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 88);
    id v65 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 96);
    id v66 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 104);
    id v31 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 112);
    id v32 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 120);
    id v33 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 128);
    id v54 = *(id *)(a3 + 8 * *(void *)(a1 + 72) + 136);
    unsigned int v34 = [v54 intValue];
    int v86 = 0;
    long long v85 = 0u;
    long long v84 = 0u;
    long long v83 = 0u;
    long long v82 = 0u;
    long long v81 = 0u;
    long long v80 = 0u;
    v77[0] = [v67 BOOLValue];
    id v61 = v28;
    v77[1] = [v28 BOOLValue];
    id v60 = v29;
    v77[2] = [v29 BOOLValue];
    uint64_t v59 = v30;
    [v30 unsignedCharValue];
    v77[3] = ITDBPlaylistLimitFromSmartPlaylistLimit();
    [v66 unsignedIntValue];
    unsigned int v78 = bswap32(ITDBTrackOrderForTrackOrder());
    id v57 = v31;
    unsigned int v79 = bswap32([v31 unsignedIntValue]);
    id v56 = v32;
    LOBYTE(v80) = [v32 BOOLValue];
    id v55 = v33;
    BYTE1(v80) = [v33 BOOLValue];
    BYTE2(v80) = [v74 BOOLValue];
    if (!v34)
    {
      [v65 unsignedIntValue];
      DWORD1(v80) = bswap32(ITDBTrackOrderForTrackOrder());
    }
    int v35 = +[NSData dataWithBytes:v77 length:112];
    __int16 v36 = +[NSMutableDictionary dictionaryWithObject:v35 forKey:@"smartInfo"];
    int v37 = v36;
    id v9 = v58;
    if (v22) {
      [v36 setObject:v22 forKey:@"contentFilter"];
    }
    uint64_t v23 = v22;
    if (v34 - 200 >= 7) {
      __int16 v38 = &__kCFBooleanFalse;
    }
    else {
      __int16 v38 = &__kCFBooleanTrue;
    }
    [v37 setObject:v38 forKey:@"isDefaultSmartPlaylist"];
    id v39 = [v68 longLongValue];
    if (v39)
    {
      CFStringRef v87 = @"persistent-id";
      __int16 v40 = +[NSString stringWithFormat:@"%llx", v39];
      id v88 = v40;
      int v41 = +[NSDictionary dictionaryWithObjects:&v88 forKeys:&v87 count:1];
      id v89 = v41;
      __int16 v42 = +[NSArray arrayWithObjects:&v89 count:1];
      [v10 setObject:v42 forKeyedSubscript:@"genius-seed-tracks"];
    }
    uint64_t v43 = +[NSPropertyListSerialization dataWithPropertyList:v37 format:200 options:0 error:0];
    if (v43) {
      [v10 setObject:v43 forKey:@"data"];
    }

    id v21 = v63;
    id v19 = v64;
    uint64_t v24 = v69;
    if ((v62 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_29:
    unsigned int v70 = v24;
    __int16 v44 = +[NSMutableArray array];
    id v45 = v19;
    [*(id *)(a1 + 32) musicLibrary];
    v47 = id v46 = v21;
    id v48 = +[ML3Container newWithPersistentID:v53 inLibrary:v47];

    id v21 = v46;
    int v49 = +[ML3Track containerQueryWithContainer:v48];
    v75[0] = _NSConcreteStackBlock;
    v75[1] = 3221225472;
    v75[2] = sub_100111B4C;
    v75[3] = &unk_1001BE4C8;
    id v76 = v44;
    id v50 = v44;
    [v49 enumeratePersistentIDsUsingBlock:v75];
    [v10 setObject:v50 forKey:@"items"];

    id v19 = v45;
    uint64_t v24 = v70;
    goto LABEL_30;
  }
  *a5 = 1;
LABEL_31:
}

void sub_100111924(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001119C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100111A5C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2114;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ - Importing cloud-ids failed with error: %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100111B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  CFStringRef v5 = @"persistent-id";
  id v3 = +[NSNumber numberWithLongLong:a2];
  id v6 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v2 addObject:v4];
}

uint64_t sub_100111C04()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3A70 = result;
  return result;
}

id sub_1001132E0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  CFStringRef v5 = [*(id *)(a1 + 40) finalState];
  id v6 = [v5 copy];
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(v7 + 24);
  *(void *)(v7 + 24) = v6;

  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 24);

  return [v9 save];
}

void sub_10011355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100113588(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100113598(uint64_t a1)
{
}

void sub_1001135A0(void *a1)
{
  id v2 = +[ICUserIdentityStore defaultIdentityStore];
  uint64_t v3 = [v2 _unsafeBackend];

  uint64_t v4 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v4 + 40);
  CFStringRef v5 = [v3 allStoreAccountsWithError:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (!*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    id v6 = [*(id *)(a1[4] + 24) activeConfiguration];
    uint64_t v7 = +[ICDAccountManagerState stateForAccounts:v5 baseConfiguration:v6];

    uint64_t v8 = a1[4];
    if (*(void *)(v8 + 40) == 2) {
      uint64_t v9 = 3;
    }
    else {
      uint64_t v9 = 1;
    }
    uint64_t v10 = +[ICDAccountManagerStateChange stateChangeFromState:*(void *)(v8 + 24) toState:v7 computation:v9];
    uint64_t v11 = *(void *)(a1[6] + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_100113780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100113798(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 40);
  return result;
}

void sub_1001138B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001138C8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100113A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100113A30(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100113B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100113B98(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 24) activeConfiguration];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100114BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100114C00(uint64_t a1)
{
  sub_100114D18();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPHomeMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3A78 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    uint64_t v3 = +[NSString stringWithUTF8String:"Class getMPHomeMonitorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDMediaUserStateCenterServerNotificationsManager.m", 21, @"Unable to find class %s", "MPHomeMonitor");

    __break(1u);
  }
}

void *sub_100114CC8(uint64_t a1)
{
  id v2 = sub_100114D18();
  uint64_t result = dlsym(v2, "MPHomeUserMonitorPrivateListeningForCurrentDeviceSettingDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F3A88 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100114D18()
{
  v4[0] = 0;
  if (!qword_1001F3A80)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = sub_100114E7C;
    void v4[4] = &unk_1001BEA20;
    void v4[5] = v4;
    long long v5 = off_1001BE690;
    uint64_t v6 = 0;
    qword_1001F3A80 = _sl_dlopen();
  }
  os_log_t v0 = (void *)qword_1001F3A80;
  if (!qword_1001F3A80)
  {
    os_log_t v0 = +[NSAssertionHandler currentHandler];
    uint64_t v3 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICDMediaUserStateCenterServerNotificationsManager.m", 20, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

id sub_100114E6C(uint64_t a1, void *a2)
{
  return _[a2 _handleMusicSettingsChangedNotification];
}

id sub_100114E74(uint64_t a1, void *a2)
{
  return _[a2 _handleCloudAuthenticationDidChangeNotification];
}

uint64_t sub_100114E7C()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3A80 = result;
  return result;
}

void sub_100115620(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 int64ForColumnIndex:0];
  id v5 = [v3 int64ForColumnIndex:1];
  uint64_t v6 = [v3 stringForColumnIndex:2];

  if (v4)
  {
    [*(id *)(a1 + 32) removeObject:v6];
    uint64_t v7 = [*(id *)(a1 + 40) objectForKey:v6];
    uint64_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = [v7 objectAtIndexedSubscript:0];
      unsigned int v10 = [v9 intValue];

      if (v5 == (id)(int)v10)
      {
        uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 138412802;
          uint64_t v15 = v6;
          __int16 v16 = 2048;
          id v17 = v4;
          __int16 v18 = 2048;
          id v19 = v5;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Container with PlaylistGlobalId: %@, persistentID: %lld, liked_state: %lld is imported and has the correct liked state", (uint8_t *)&v14, 0x20u);
        }

        goto LABEL_11;
      }
      [*(id *)(a1 + 48) addObject:v8];
      uint64_t v13 = *(void **)(a1 + 56);
      uint64_t v12 = +[NSNumber numberWithLongLong:v4];
      [v13 addObject:v12];
    }
    else
    {
      uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138543362;
        uint64_t v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Could not find content taste for playlistGlobalID=%{public}@", (uint8_t *)&v14, 0xCu);
      }
    }

LABEL_11:
  }
}

void sub_100115828(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error %{public}@ adding global playlists", buf, 0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 72);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void))(v8 + 16);
LABEL_11:
      v9();
    }
  }
  else if ([*(id *)(a1 + 32) isCancelled])
  {
    unsigned int v10 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      id v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ is cancelled", buf, 0xCu);
    }

    uint64_t v12 = *(void *)(a1 + 72);
    if (v12)
    {
      uint64_t v9 = *(void (**)(void))(v12 + 16);
      goto LABEL_11;
    }
  }
  else
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100115AE8;
    v18[3] = &unk_1001BE998;
    id v19 = *(id *)(a1 + 40);
    id v20 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 56);
    [v5 enumerateKeysAndObjectsUsingBlock:v18];
    uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = [*(id *)(a1 + 64) count];
      +[NSDate timeIntervalSinceReferenceDate];
      double v16 = v15 - *(double *)(a1 + 80);
      *(_DWORD *)long long buf = 134218240;
      id v23 = v14;
      __int16 v24 = 2048;
      double v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Finished loading content taste for %lu playlists in %3f seconds", buf, 0x16u);
    }

    uint64_t v17 = *(void *)(a1 + 72);
    if (v17) {
      (*(void (**)(uint64_t, void, void, void))(v17 + 16))(v17, *(void *)(a1 + 48), *(void *)(a1 + 56), 0);
    }
  }
}

void sub_100115AE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 longLongValue];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = [*(id *)(a1 + 32) objectForKey:v5];
    if (v8)
    {
      uint64_t v9 = v8;
      [*(id *)(a1 + 40) addObject:v8];
      unsigned int v10 = *(void **)(a1 + 48);
      uint64_t v11 = +[NSNumber numberWithLongLong:v7];
      [v10 addObject:v11];
    }
    else
    {
      uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138543362;
        id v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Could not find content taste for playlistGlobalID=%{public}@", (uint8_t *)&v13, 0xCu);
      }

      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138543362;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "global playlist %{public}@ was not imported", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_100116778(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001167F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100116808(uint64_t a1)
{
}

void sub_100116810(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 int64ForColumnIndex:0];
  id v5 = [v3 int64ForColumnIndex:1];
  id v6 = [v3 int64ForColumnIndex:2];
  id v7 = [v3 int64ForColumnIndex:3];
  uint64_t v8 = (uint64_t)[v3 int64ForColumnIndex:4];
  id v9 = [v3 int64ForColumnIndex:5];

  if (v4)
  {
    if (v9)
    {
      if ([*(id *)(a1 + 32) isEqualToString:@"store_item_id"]) {
        id v10 = v6;
      }
      else {
        id v10 = v7;
      }
      uint64_t v11 = *(void **)(a1 + 40);
      uint64_t v12 = +[NSNumber numberWithLongLong:v10];
      [v11 removeObject:v12];

      if (v8 < 1)
      {
        id v19 = *(void **)(a1 + 48);
        id v20 = +[NSNumber numberWithLongLong:v10];
        int v13 = [v19 objectForKey:v20];

        if (v13)
        {
          id v21 = [v13 objectAtIndexedSubscript:0];
          unsigned int v22 = [v21 intValue];

          if (v5 == (id)(int)v22)
          {
            id v23 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v24 = *(void *)(a1 + 32);
              int v28 = 134219010;
              id v29 = v6;
              __int16 v30 = 2048;
              id v31 = v7;
              __int16 v32 = 2048;
              id v33 = v4;
              __int16 v34 = 1024;
              *(_DWORD *)int v35 = v5;
              *(_WORD *)&void v35[4] = 2112;
              *(void *)&v35[6] = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Track with storeItemID: %lld, subscriptionStoreItemID: %lld, persistenID: %lld, liked_state: %d for property: %@ is imported and has the correct liked state", (uint8_t *)&v28, 0x30u);
            }
          }
          else
          {
            [*(id *)(a1 + 56) addObject:v13];
            unsigned __int8 v26 = *(void **)(a1 + 64);
            int v27 = +[NSNumber numberWithLongLong:v4];
            [v26 addObject:v27];
          }
        }
        else
        {
          double v25 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            int v28 = 134217984;
            id v29 = v10;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Could not find content taste for media item with storeID=%lld", (uint8_t *)&v28, 0xCu);
          }

          int v13 = 0;
        }
      }
      else
      {
        int v13 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          int v28 = 134219010;
          id v29 = v6;
          __int16 v30 = 2048;
          id v31 = v7;
          __int16 v32 = 2048;
          id v33 = v4;
          __int16 v34 = 2112;
          *(void *)int v35 = v14;
          *(_WORD *)&v35[8] = 2048;
          *(void *)&v35[10] = v8;
          double v15 = "Track with storeItemID: %lld, subscriptionStoreItemID: %lld, persistenID: %lld for property: %@ has a st"
                "oreSagaID: %lld and will not be updated";
          double v16 = v13;
          uint32_t v17 = 52;
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v28, v17);
        }
      }
    }
    else
    {
      int v13 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        int v28 = 134218754;
        id v29 = v6;
        __int16 v30 = 2048;
        id v31 = v7;
        __int16 v32 = 2048;
        id v33 = v4;
        __int16 v34 = 2112;
        *(void *)int v35 = v18;
        double v15 = "Track with storeItemID: %lld, subscriptionStoreItemID: %lld, persistenID: %lld for property: %@ will be im"
              "ported to include subscription data source";
        double v16 = v13;
        uint32_t v17 = 42;
        goto LABEL_13;
      }
    }
  }
  else
  {
    int v13 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 134217984;
      id v29 = v6;
      double v15 = "Track with storeItemID: %lld will be imported";
      double v16 = v13;
      uint32_t v17 = 12;
      goto LABEL_13;
    }
  }
}

void sub_100116C24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 int64ForColumnIndex:0];
  id v5 = [v3 int64ForColumnIndex:1];
  id v6 = [v3 int64ForColumnIndex:2];
  id v7 = [v3 int64ForColumnIndex:3];
  uint64_t v8 = (uint64_t)[v3 int64ForColumnIndex:4];
  id v9 = [v3 int64ForColumnIndex:5];

  if (v7)
  {
    if (v9)
    {
      id v10 = *(void **)(a1 + 32);
      uint64_t v11 = +[NSNumber numberWithLongLong:v6];
      [v10 removeObject:v11];

      if (v8 < 1)
      {
        double v16 = *(void **)(a1 + 40);
        uint32_t v17 = +[NSNumber numberWithLongLong:v6];
        uint64_t v12 = [v16 objectForKey:v17];

        if (v12)
        {
          uint64_t v18 = [v12 objectAtIndexedSubscript:0];
          unsigned int v19 = [v18 intValue];

          if (v5 == (id)(int)v19)
          {
            id v20 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              int v23 = 134218496;
              id v24 = v6;
              __int16 v25 = 2048;
              id v26 = v4;
              __int16 v27 = 2048;
              uint64_t v28 = (uint64_t)v5;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Album with storeItemId: %lld, albumPid: %lld, liked_state: %lld is imported and has the correct liked state", (uint8_t *)&v23, 0x20u);
            }
          }
          else
          {
            [*(id *)(a1 + 48) addObject:v12];
            id v21 = *(void **)(a1 + 56);
            unsigned int v22 = +[NSNumber numberWithLongLong:v4];
            [v21 addObject:v22];
          }
        }
      }
      else
      {
        uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 134218496;
          id v24 = v6;
          __int16 v25 = 2048;
          id v26 = v4;
          __int16 v27 = 2048;
          uint64_t v28 = v8;
          int v13 = "Album with storeItemId: %lld, albumPid: %lld, has storeSagaID: %lld and will not be updated";
          uint64_t v14 = v12;
          uint32_t v15 = 32;
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v23, v15);
        }
      }
    }
    else
    {
      uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 134218240;
        id v24 = v6;
        __int16 v25 = 2048;
        id v26 = v4;
        int v13 = "Album with albumStoreID: %lld, persistenID: %lld will be imported to include subscription data source";
        uint64_t v14 = v12;
        uint32_t v15 = 22;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 134217984;
      id v24 = v6;
      int v13 = "Album with storeItemID: %lld will be imported";
      uint64_t v14 = v12;
      uint32_t v15 = 12;
      goto LABEL_10;
    }
  }
}

void sub_100116F68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(a1 + 32) count];
      *(_DWORD *)long long buf = 134218242;
      id v81 = v8;
      __int16 v82 = 2112;
      double v83 = *(double *)&v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error importing %lu tracks to the library. %@", buf, 0x16u);
    }

    uint64_t v9 = *(void *)(a1 + 96);
    if (v9)
    {
      id v10 = *(void (**)(void))(v9 + 16);
LABEL_11:
      v10();
      goto LABEL_64;
    }
    goto LABEL_64;
  }
  unsigned __int8 v11 = [*(id *)(a1 + 72) isCancelled];
  uint64_t v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((v11 & 1) == 0)
  {
    id v58 = 0;
    if (v13)
    {
      id v16 = [v5 count];
      id v17 = [*(id *)(a1 + 32) count];
      *(_DWORD *)long long buf = 134218240;
      id v81 = v16;
      __int16 v82 = 2048;
      double v83 = *(double *)&v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Imported %lu mediaItems for %lu storeAdamIds", buf, 0x16u);
    }

    uint64_t v18 = +[NSMutableArray array];
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    id v59 = v5;
    id v19 = v5;
    id v20 = [v19 countByEnumeratingWithState:&v76 objects:v87 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v77;
      do
      {
        for (unint64_t i = 0; i != v21; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v77 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(*((void *)&v76 + 1) + 8 * i), "persistentID", v58));
          [v18 addObject:v24];
        }
        id v21 = [v19 countByEnumeratingWithState:&v76 objects:v87 count:16];
      }
      while (v21);
    }

    id v61 = +[NSMutableSet set];
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    id v25 = v18;
    id v71 = [v25 countByEnumeratingWithState:&v72 objects:v86 count:16];
    if (!v71)
    {
LABEL_55:

      id v6 = v58;
      if ([*(id *)(a1 + 32) count])
      {
        if ([*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) count]) {
          [*(id *)(a1 + 32) addObjectsFromArray:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40)];
        }
        uint64_t v50 = objc_msgSend(*(id *)(a1 + 32), "componentsJoinedByString:", @"$", v58);
        uint64_t v51 = *(void *)(*(void *)(a1 + 112) + 8);
        unsigned int v52 = *(void **)(v51 + 40);
        *(void *)(v51 + 40) = v50;
      }
      uint64_t v53 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        id v54 = [*(id *)(a1 + 32) count];
        +[NSDate timeIntervalSinceReferenceDate];
        double v56 = v55 - *(double *)(a1 + 120);
        *(_DWORD *)long long buf = 134218240;
        id v81 = v54;
        __int16 v82 = 2048;
        double v83 = v56;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Finished loading content taste for %lu items/albums in %3f seconds", buf, 0x16u);
      }

      uint64_t v57 = *(void *)(a1 + 96);
      id v5 = v59;
      if (v57) {
        (*(void (**)(uint64_t, void, void, void, void, void, void))(v57 + 16))(v57, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40), 0);
      }

      goto LABEL_64;
    }
    uint64_t v26 = *(void *)v73;
    uint64_t v70 = ML3TrackPropertyStoreItemID;
    uint64_t v68 = ML3TrackPropertySubscriptionStoreItemID;
    uint64_t v69 = ML3TrackPropertyStoreSagaID;
    uint64_t v66 = ML3TrackPropertyAlbumPersistentID;
    uint64_t v64 = ML3AlbumPropertyStoreAlbumID;
    uint64_t v63 = ML3AlbumPropertyStoreCloudID;
    uint64_t v62 = ML3TrackPropertyStorePlaylistID;
    uint64_t v67 = *(void *)v73;
    id v65 = v25;
LABEL_23:
    uint64_t v27 = 0;
    while (1)
    {
      if (*(void *)v73 != v26) {
        objc_enumerationMutation(v25);
      }
      uint64_t v28 = *(void **)(*((void *)&v72 + 1) + 8 * v27);
      id v29 = +[ML3Track newWithPersistentID:inLibrary:](ML3Track, "newWithPersistentID:inLibrary:", objc_msgSend(v28, "longLongValue", v58), *(void *)(a1 + 80));
      __int16 v30 = [v29 valueForProperty:v70];
      id v31 = v30;
      if (!v30 || ![v30 longLongValue])
      {
        uint64_t v32 = [v29 valueForProperty:v68];

        id v31 = (void *)v32;
      }

      uint64_t v33 = [*(id *)(a1 + 88) objectForKey:v31];
      if (v33)
      {
        __int16 v34 = (void *)v33;
        int v35 = [v29 valueForProperty:v69];
        if ((uint64_t)[v35 longLongValue] < 1)
        {
          [*(id *)(a1 + 40) addObject:v34];
          [*(id *)(a1 + 48) addObject:v28];
        }
        else
        {
          __int16 v36 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            id v37 = [v28 longLongValue];
            id v38 = [v31 longLongValue];
            id v39 = [v35 longLongValue];
            *(_DWORD *)long long buf = 134218496;
            id v81 = v37;
            __int16 v82 = 2048;
            double v83 = *(double *)&v38;
            uint64_t v26 = v67;
            __int16 v84 = 2048;
            id v85 = v39;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Not updating liked_state for track with persistentID: %lld, storeAdamID: %lld as it has a valid storeSagaID: %lld", buf, 0x20u);
          }
        }
        [*(id *)(a1 + 32) removeObject:v31];
        goto LABEL_46;
      }
      int v35 = [v29 valueForProperty:v66];
      id v40 = [v35 longLongValue];
      if (!v40)
      {
        __int16 v34 = 0;
        goto LABEL_46;
      }
      id v41 = v40;
      id v42 = +[ML3Album newWithPersistentID:v40 inLibrary:*(void *)(a1 + 80)];
      uint64_t v43 = [v42 valueForProperty:v64];
      __int16 v44 = [v42 valueForProperty:v63];
      if (!v43 || ![v43 longLongValue])
      {
        uint64_t v45 = [v29 valueForProperty:v62];

        uint64_t v43 = (void *)v45;
      }
      if ([v44 length])
      {
        id v46 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          id v47 = [v43 longLongValue];
          *(_DWORD *)long long buf = 134218242;
          id v81 = v47;
          __int16 v82 = 2114;
          double v83 = *(double *)&v44;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Skipping content taste for album with storeID=%lld, cloudUniversalLibraryID=%{public}@", buf, 0x16u);
        }

        __int16 v34 = 0;
      }
      else
      {
        if (![v43 longLongValue])
        {
          __int16 v34 = 0;
          goto LABEL_43;
        }
        __int16 v34 = [*(id *)(a1 + 88) objectForKey:v43];
        if (!v34 || ([v61 containsObject:v43] & 1) != 0) {
          goto LABEL_43;
        }
        [*(id *)(a1 + 56) addObject:v34];
        id v60 = *(void **)(a1 + 64);
        id v48 = +[NSNumber numberWithLongLong:v41];
        [v60 addObject:v48];

        [v61 addObject:v43];
      }
      [*(id *)(a1 + 32) removeObject:v43];
LABEL_43:

      id v25 = v65;
      uint64_t v26 = v67;
LABEL_46:

      if (v71 == (id)++v27)
      {
        id v49 = [v25 countByEnumeratingWithState:&v72 objects:v86 count:16];
        id v71 = v49;
        if (!v49) {
          goto LABEL_55;
        }
        goto LABEL_23;
      }
    }
  }
  if (v13)
  {
    uint64_t v14 = *(void **)(a1 + 72);
    *(_DWORD *)long long buf = 138543362;
    id v81 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ is cancelled", buf, 0xCu);
  }

  uint64_t v15 = *(void *)(a1 + 96);
  if (v15)
  {
    id v10 = *(void (**)(void))(v15 + 16);
    goto LABEL_11;
  }
LABEL_64:
}

void sub_1001180DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_100118134(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 int64ForColumnIndex:0];
  unsigned int v5 = [v3 intForColumnIndex:1];
  id v6 = [v3 stringForColumnIndex:2];
  id v7 = [v3 int64ForColumnIndex:3];

  if (v4)
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = +[NSNumber numberWithLongLong:v7];
    [v8 removeObject:v9];

    if ([v6 length])
    {
      id v10 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 134218242;
        id v22 = v7;
        __int16 v23 = 2114;
        *(void *)id v24 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Skipping content taste checks for album artist with storeID=%lld, cloudUniversalLibraryID=%{public}@", (uint8_t *)&v21, 0x16u);
      }
      goto LABEL_13;
    }
    unsigned __int8 v11 = *(void **)(a1 + 40);
    uint64_t v12 = +[NSNumber numberWithLongLong:v7];
    id v10 = [v11 objectForKey:v12];

    if (v10)
    {
      BOOL v13 = [v10 objectAtIndexedSubscript:0];
      unsigned int v14 = [v13 intValue];

      if (v5 == v14)
      {
LABEL_13:

        goto LABEL_14;
      }
      [*(id *)(a1 + 48) addObject:v10];
      uint64_t v15 = *(void **)(a1 + 56);
      id v16 = +[NSNumber numberWithLongLong:v4];
      [v15 addObject:v16];

      id v17 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 134218496;
        id v22 = v4;
        __int16 v23 = 1024;
        *(_DWORD *)id v24 = v5;
        *(_WORD *)&void v24[4] = 1024;
        *(_DWORD *)&void v24[6] = v14;
        uint64_t v18 = "Will update content taste for album artist with persistentID=%lld from %d to %d";
        id v19 = v17;
        uint32_t v20 = 24;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v21, v20);
      }
    }
    else
    {
      id v17 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 134217984;
        id v22 = v7;
        uint64_t v18 = "Could not find content taste for album artist with storeID=%lld";
        id v19 = v17;
        uint32_t v20 = 12;
        goto LABEL_11;
      }
    }

    goto LABEL_13;
  }
LABEL_14:
}

void sub_1001183F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2050000000;
  id v4 = (void *)qword_1001F3AA0;
  uint64_t v11 = qword_1001F3AA0;
  if (!qword_1001F3AA0)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100118CD4;
    v7[3] = &unk_1001BE9E8;
    void v7[4] = &v8;
    sub_100118CD4((uint64_t)v7);
    id v4 = (void *)v9[3];
  }
  unsigned int v5 = v4;
  _Block_object_dispose(&v8, 8);
  id v6 = objc_msgSend([v5 alloc], "initWithStoreItemID:additionalTrackMetadata:", objc_msgSend(v3, "longLongValue"), 0);
  [*(id *)(a1 + 32) addObject:v6];
}

void sub_1001184F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100118510(uint64_t a1)
{
  sub_100118B10();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPStoreItemLibraryImport");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3AA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPStoreItemLibraryImportClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICCloudContentTasteUpdateOperation.m", 42, @"Unable to find class %s", "MPStoreItemLibraryImport");

    __break(1u);
  }
}

void sub_1001185D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(a1 + 32) count];
      *(_DWORD *)long long buf = 134218242;
      id v29 = v8;
      __int16 v30 = 2114;
      double v31 = *(double *)&v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not import %ld album artists, error=%{public}@", buf, 0x16u);
    }

    uint64_t v9 = *(void *)(a1 + 96);
    if (v9)
    {
      uint64_t v10 = *(void (**)(void))(v9 + 16);
LABEL_11:
      v10();
    }
  }
  else if ([*(id *)(a1 + 40) isCancelled])
  {
    uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      id v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ is cancelled", buf, 0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 96);
    if (v13)
    {
      uint64_t v10 = *(void (**)(void))(v13 + 16);
      goto LABEL_11;
    }
  }
  else
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10011891C;
    void v22[3] = &unk_1001BE8F8;
    id v23 = *(id *)(a1 + 48);
    id v24 = *(id *)(a1 + 56);
    id v25 = *(id *)(a1 + 64);
    id v26 = *(id *)(a1 + 72);
    id v27 = *(id *)(a1 + 80);
    [v5 enumerateObjectsUsingBlock:v22];
    unsigned int v14 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [*(id *)(a1 + 80) count];
      +[NSDate timeIntervalSinceReferenceDate];
      double v17 = v16 - *(double *)(a1 + 112);
      *(_DWORD *)long long buf = 134218240;
      id v29 = v15;
      __int16 v30 = 2048;
      double v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Finished loading content taste for %lu album artists in %3f seconds", buf, 0x16u);
    }

    [*(id *)(a1 + 80) addObjectsFromArray:*(void *)(a1 + 88)];
    if ([*(id *)(a1 + 80) count])
    {
      uint64_t v18 = MSVArchivedDataWithRootObject();
      uint64_t v19 = *(void *)(*(void *)(a1 + 104) + 8);
      uint32_t v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;
    }
    uint64_t v21 = *(void *)(a1 + 96);
    if (v21) {
      (*(void (**)(uint64_t, void, void, void, void))(v21 + 16))(v21, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40), 0);
    }
  }
}

void sub_10011891C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[ML3AlbumArtist newWithPersistentID:inLibrary:](ML3AlbumArtist, "newWithPersistentID:inLibrary:", [v3 longLongValue], *(void *)(a1 + 32));
  id v5 = [v4 valueForProperty:ML3AlbumArtistPropertyCloudUniversalLibraryID];
  if ([v5 length])
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134218242;
      id v10 = [v3 longLongValue];
      __int16 v11 = 2114;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping content taste checks for album artist with persistentID=%lld, cloudUniversalLibraryID=%{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    id v6 = [v4 valueForProperty:ML3AlbumArtistPropertyStoreID];
    if (v6)
    {
      id v7 = [*(id *)(a1 + 40) objectForKey:v6];
      if (v7)
      {
        [*(id *)(a1 + 48) addObject:v7];
        [*(id *)(a1 + 56) addObject:v3];
        [*(id *)(a1 + 64) removeObject:v6];
      }
      else
      {
        id v8 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = 134217984;
          id v10 = [v6 longLongValue];
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Could not find content taste for album artist with storeID=%lld", (uint8_t *)&v9, 0xCu);
        }
      }
    }
  }
}

void sub_100118B10()
{
  v3[0] = 0;
  if (!qword_1001F3A98)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_100118C60;
    void v3[4] = &unk_1001BEA20;
    void v3[5] = v3;
    long long v4 = off_1001BEA08;
    uint64_t v5 = 0;
    qword_1001F3A98 = _sl_dlopen();
  }
  if (!qword_1001F3A98)
  {
    uint64_t v1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ICCloudContentTasteUpdateOperation.m", 39, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_100118C60()
{
  uint64_t result = _sl_dlopen();
  qword_1001F3A98 = result;
  return result;
}

void sub_100118CD4(uint64_t a1)
{
  sub_100118B10();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPStoreItemLibraryImportElement");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3AA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPStoreItemLibraryImportElementClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICCloudContentTasteUpdateOperation.m", 41, @"Unable to find class %s", "MPStoreItemLibraryImportElement");

    __break(1u);
  }
}

void sub_100118D9C(id a1, ML3DatabaseConnection *a2)
{
  if (([(ML3DatabaseConnection *)a2 executeUpdate:@"DELETE FROM _MLDatabaseProperties WHERE key=?" withParameters:&off_1001CCD78 error:0] & 1) == 0)
  {
    id v2 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "removing artists mapped to different entities failed", v3, 2u);
    }
  }
}

BOOL sub_100119144(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [v3 globalPlaylistID];
  if ([v4 length])
  {
    if (([*(id *)(a1 + 32) containsObject:v4] & 1) == 0)
    {
      [*(id *)(a1 + 32) addObject:v4];
LABEL_9:
      BOOL v7 = [v3 contentTasteType] != 0;
      goto LABEL_10;
    }
  }
  else
  {
    id v5 = [v3 storeID];
    if (v5)
    {
      id v6 = +[NSNumber numberWithLongLong:v5];
      if (([*(id *)(a1 + 40) containsObject:v6] & 1) == 0)
      {
        [*(id *)(a1 + 40) addObject:v6];

        goto LABEL_9;
      }
    }
  }
  BOOL v7 = 0;
LABEL_10:

  return v7;
}

void sub_10011A32C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 setIdentity:v2];
  id v4 = [objc_alloc((Class)ICStoreURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v3 setAuthenticationProvider:v4];
}

void sub_10011A3A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    BOOL v7 = [v5 urlForBagKey:ICURLBagKeyMediaContentTastePostURL];
    if (!v7)
    {
      double v17 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@ Error getting sync url", buf, 0xCu);
      }

      uint64_t v19 = +[NSError errorWithDomain:ICErrorDomain code:0 userInfo:0];
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = v19;

      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
      goto LABEL_41;
    }
    uint64_t v79 = 0;
    long long v80 = &v79;
    uint64_t v81 = 0x2020000000;
    char v82 = 0;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    id v91 = sub_1001167F8;
    unsigned int v92 = sub_100116808;
    id v93 = 0;
    uint64_t v73 = 0;
    long long v74 = &v73;
    uint64_t v75 = 0x3032000000;
    long long v76 = sub_1001167F8;
    long long v77 = sub_100116808;
    id v78 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = &v69;
    uint64_t v71 = 0x2020000000;
    uint64_t v72 = 0;
    id v8 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v7];
    double v55 = [v5 numberForBagKey:ICURLBagKeyMediaContentTasteRefreshIntervalInMins];
    [v55 doubleValue];
    double v10 = v9 * 60.0;
    if (v10 >= 2.22044605e-16) {
      double v11 = v10;
    }
    else {
      double v11 = 86400.0;
    }
    uint64_t v12 = *(void **)(a1 + 32);
    if (v12[1])
    {
      uint64_t v89 = v12[1];
      uint64_t v13 = +[NSArray arrayWithObjects:&v89 count:1];
      uint64_t v12 = *(void **)(a1 + 32);
    }
    else
    {
      uint64_t v13 = &__NSArray0__struct;
    }
    id v67 = 0;
    id v68 = 0;
    id v54 = v13;
    objc_msgSend(v12, "_getPBData:includedContentTasteItemUpdates:fromContentTasteUpdateItems:", &v68, &v67);
    id v22 = v68;
    id v56 = v67;
    if ([v22 length])
    {
      *((unsigned char *)v80 + 24) = 1;
      CFStringRef v23 = @"If-Match";
      CFStringRef v24 = @"POST";
    }
    else
    {
      CFStringRef v23 = @"If-None-Match";
      CFStringRef v24 = @"GET";
    }
    [v8 setHTTPMethod:v24];
    [v8 setCachePolicy:1];
    id v25 = +[ICCloudContentTasteResponseCacheManager sharedCloudContentTasteResponseCacheManager];
    id v26 = [v25 getCachedContentTasteResponseForConnectionConfiguration:*(void *)(*(void *)(a1 + 32) + 16)];

    uint64_t v57 = [v26 userInfo];
    objc_storeStrong((id *)(*(void *)&buf[8] + 40), v26);
    if (*(void *)(*(void *)&buf[8] + 40) && *(unsigned char *)(*(void *)(a1 + 32) + 24))
    {
      id v27 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = *(void *)(a1 + 32);
        *(_DWORD *)double v83 = 138543362;
        uint64_t v84 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@ invalidating cached response", v83, 0xCu);
      }

      id v29 = [v57 objectForKey:@"_MediaContentTasteUpdateResponseTimeIntervalSinceReferenceDate"];
      if (v29)
      {
        uint64_t v30 = [*(id *)(a1 + 32) _prepareCachedResponseFromResponse:*(void *)(*(void *)&buf[8] + 40) byAddingResponseTimeIntervalKey:0 withResponseTimeInterval:v29];
        double v31 = *(void **)(*(void *)&buf[8] + 40);
        *(void *)(*(void *)&buf[8] + 40) = v30;

        [*(id *)(a1 + 32) _setCachedContentTasteResponse:*(void *)(*(void *)&buf[8] + 40)];
      }
    }
    if (_os_feature_enabled_impl()) {
      [v8 setValue:@"1.0" forHTTPHeaderField:@"Api-Version"];
    }
    if ([v22 length])
    {
      *((unsigned char *)v80 + 24) = 1;
      [v8 setValue:@"application/x-protobuf" forHTTPHeaderField:@"Content-Type"];
      [v8 setHTTPBody:v22];
    }
    else if (v57)
    {
      uint64_t v32 = [v57 objectForKey:@"_MediaContentTasteUpdateResponseTimeIntervalSinceReferenceDate"];
      if (v32)
      {
        if (_NSIsNSNumber())
        {
          [v32 doubleValue];
          double v34 = v33;
          +[NSDate timeIntervalSinceReferenceDate];
          if (v35 - v34 < v11)
          {
            uint64_t v36 = [*(id *)(*(void *)&buf[8] + 40) data];
            id v37 = (void *)v74[5];
            v74[5] = v36;

            id v38 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v34];
            os_log_t loga = [*(id *)(*(void *)&buf[8] + 40) response];
            id v39 = +[ICCloudContentTasteUpdateResponse eTagValueFromContentTasteResponse:loga];
            id v40 = [v39 longLongValue];
            v70[3] = (uint64_t)v40;

            log = sub_1000EFE24();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v41 = *(void *)(a1 + 32);
              uint64_t v42 = v70[3];
              *(_DWORD *)double v83 = 138543874;
              uint64_t v84 = v41;
              __int16 v85 = 2114;
              int v86 = v38;
              __int16 v87 = 2048;
              uint64_t v88 = v42;
              _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "%{public}@ preparing cached response with date %{public}@, revisionID %llu", v83, 0x20u);
            }

            uint64_t v43 = v74[5];
            if (v43)
            {
              uint64_t v44 = [*(id *)(a1 + 32) _contentTasteUpdateResponseWithServerResponse:v43 expirationDate:v38 revisionID:v70[3] isCachedResponse:1];
              uint64_t v45 = *(void *)(a1 + 32);
              id v46 = *(void **)(v45 + 56);
              *(void *)(v45 + 56) = v44;
            }
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
            goto LABEL_40;
          }
        }
      }
    }
    id v47 = [v26 response];
    id v48 = +[ICCloudContentTasteUpdateResponse eTagValueFromContentTasteResponse:v47];

    [v8 setValue:v48 forHTTPHeaderField:v23];
    id v49 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v8 requestContext:*(void *)(a1 + 40)];
    uint64_t v50 = +[ICURLSessionManager defaultSession];
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    void v58[2] = sub_10011ACD0;
    v58[3] = &unk_1001BE7F0;
    uint64_t v51 = *(void *)(a1 + 32);
    double v65 = v11;
    void v58[4] = v51;
    id v61 = &v69;
    uint64_t v62 = buf;
    uint64_t v63 = &v73;
    uint64_t v64 = &v79;
    id v59 = v56;
    uint64_t v66 = *(void *)(a1 + 56);
    id v60 = *(id *)(a1 + 48);
    [v50 enqueueDataRequest:v49 withCompletionHandler:v58];

    id v38 = 0;
LABEL_40:

    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v73, 8);

    _Block_object_dispose(buf, 8);
    _Block_object_dispose(&v79, 8);
LABEL_41:

    goto LABEL_42;
  }
  unsigned int v14 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    double v16 = [*(id *)(v15 + 16) userIdentity];
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2114;
    id v91 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@ Error %{public}@ getting bag for identity %{public}@", buf, 0x20u);
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 40), a3);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
LABEL_42:
}

void sub_10011AC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_10011ACD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v63 = a3;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 40), a3);
  id v6 = +[NSDate date];
  BOOL v7 = [v6 dateByAddingTimeInterval:*(double *)(a1 + 88)];

  id v8 = [v5 urlResponse];
  id v9 = [v8 statusCode];

  double v10 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 40);
    *(_DWORD *)long long buf = 138544130;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v5;
    *(_WORD *)&unsigned char buf[22] = 2114;
    id v150 = v12;
    LOWORD(v151) = 2048;
    *(void *)((char *)&v151 + 2) = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ finished with response=%{public}@, error=%{public}@, responseErrorCode %ld", buf, 0x2Au);
  }

  if (*(void *)(*(void *)(a1 + 32) + 40))
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
    goto LABEL_32;
  }
  if (v9 == (id)304)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) response];
  }
  else
  {
    uint64_t v14 = [v5 bodyData];
    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8);
    double v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    [v5 urlResponse];
  uint64_t v13 = };
  double v17 = +[ICCloudContentTasteUpdateResponse eTagValueFromContentTasteResponse:v13];
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v17 longLongValue];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)
    && ![*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) length])
  {
    uint64_t v18 = [*(id *)(a1 + 32) _contentTasteUpdateResponseWithServerResponse:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) expirationDate:v7 revisionID:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) isCachedResponse:0];
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v20 = *(void *)(*(void *)(a1 + 72) + 8);
    id obj = *(id *)(v20 + 40);
    uint64_t v143 = 0;
    uint64_t v21 = [v18 contentTasteItems];
    [v19 _prepareContentTasteResponse:&obj withContentTasteItems:&v143 fromCachedContentTasteResponseItems:v21 includedContentTasteItems:*(void *)(a1 + 40)];
    objc_storeStrong((id *)(v20 + 40), obj);
  }
  [v7 timeIntervalSinceReferenceDate];
  uint64_t v62 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  if (v9 == (id)304)
  {
    uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    if (v22)
    {
      id v23 = [*(id *)(a1 + 32) _prepareCachedResponseFromResponse:v22 byAddingResponseTimeIntervalKey:1 withResponseTimeInterval:v62];
LABEL_16:
      [*(id *)(a1 + 32) _setCachedContentTasteResponse:v23];

      goto LABEL_17;
    }
  }
  if (v5)
  {
    id v24 = objc_alloc((Class)NSCachedURLResponse);
    id v25 = [v5 urlResponse];
    uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    CFStringRef v152 = @"_MediaContentTasteUpdateResponseTimeIntervalSinceReferenceDate";
    unint64_t v153 = v62;
    id v27 = +[NSDictionary dictionaryWithObjects:&v153 forKeys:&v152 count:1];
    id v23 = [v24 initWithResponse:v25 data:v26 userInfo:v27 storagePolicy:0];

    goto LABEL_16;
  }
LABEL_17:
  uint64_t v28 = [*(id *)(a1 + 32) _contentTasteUpdateResponseWithServerResponse:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) expirationDate:v7 revisionID:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) isCachedResponse:0];
  id v29 = *(void **)(*(void *)(a1 + 32) + 56);
  *(void *)(*(void *)(a1 + 32) + 56) = v28;

  uint64_t v30 = *(void **)(a1 + 32);
  id v142 = 0;
  id v141 = 0;
  id v140 = 0;
  [v30 _getStoreAdamIDLikedState:&v142 playlistGlobalIDLikedState:&v141 artistStoreAdamIDLikedState:&v140];
  id v31 = v142;
  id v32 = v141;
  id v33 = v140;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  id v150 = sub_1001167F8;
  *(void *)&long long v151 = sub_100116808;
  *((void *)&v151 + 1) = 0;
  uint64_t v134 = 0;
  uint64_t v135 = &v134;
  uint64_t v136 = 0x3032000000;
  uint64_t v137 = sub_1001167F8;
  uint64_t v138 = sub_100116808;
  id v139 = 0;
  v132[0] = 0;
  v132[1] = v132;
  v132[2] = 0x3032000000;
  v132[3] = sub_1001167F8;
  v132[4] = sub_100116808;
  id v133 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = &v126;
  uint64_t v128 = 0x3032000000;
  uint64_t v129 = sub_1001167F8;
  uint64_t v130 = sub_100116808;
  id v131 = 0;
  v124[0] = 0;
  v124[1] = v124;
  v124[2] = 0x3032000000;
  v124[3] = sub_1001167F8;
  v124[4] = sub_100116808;
  id v125 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = &v118;
  uint64_t v120 = 0x3032000000;
  uint64_t v121 = sub_1001167F8;
  uint64_t v122 = sub_100116808;
  id v123 = 0;
  v116[0] = 0;
  v116[1] = v116;
  v116[2] = 0x3032000000;
  v116[3] = sub_1001167F8;
  v116[4] = sub_100116808;
  id v117 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = &v110;
  uint64_t v112 = 0x3032000000;
  uint64_t v113 = sub_1001167F8;
  uint64_t v114 = sub_100116808;
  id v115 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = &v104;
  uint64_t v106 = 0x3032000000;
  uint64_t v107 = sub_1001167F8;
  uint64_t v108 = sub_100116808;
  id v109 = 0;
  uint64_t v98 = 0;
  id v99 = &v98;
  uint64_t v100 = 0x3032000000;
  id v101 = sub_1001167F8;
  unsigned int v102 = sub_100116808;
  id v103 = 0;
  double v34 = [*(id *)(*(void *)(a1 + 32) + 16) userIdentity];
  double v35 = +[ML3MusicLibrary musicLibraryForUserAccount:v34];

  uint64_t v145 = 0;
  v146 = &v145;
  uint64_t v147 = 0x2050000000;
  uint64_t v36 = (void *)qword_1001F3A90;
  uint64_t v148 = qword_1001F3A90;
  if (!qword_1001F3A90)
  {
    *(void *)int v154 = _NSConcreteStackBlock;
    *(void *)&v154[8] = 3221225472;
    *(void *)&v154[16] = sub_10011BA98;
    unint64_t v155 = &unk_1001BE9E8;
    unsigned int v156 = &v145;
    sub_10011BA98((uint64_t)v154);
    uint64_t v36 = (void *)v146[3];
  }
  id v37 = v36;
  _Block_object_dispose(&v145, 8);
  id v38 = [*(id *)(*(void *)(a1 + 32) + 16) userIdentity];
  uint64_t v39 = [v37 deviceMediaLibraryWithUserIdentity:v38];

  id v40 = objc_alloc((Class)ICAsyncBlockOperation);
  v91[0] = _NSConcreteStackBlock;
  v91[1] = 3221225472;
  v91[2] = sub_10011BB60;
  v91[3] = &unk_1001BE700;
  v91[4] = *(void *)(a1 + 32);
  id v61 = v33;
  id v92 = v61;
  id v41 = v35;
  id v93 = v41;
  id v42 = v39;
  id v94 = v42;
  uint64_t v95 = buf;
  long long v96 = &v134;
  unint64_t v97 = &v98;
  id v43 = [v40 initWithStartHandler:v91];
  id v44 = objc_alloc((Class)ICAsyncBlockOperation);
  v82[0] = _NSConcreteStackBlock;
  v82[1] = 3221225472;
  void v82[2] = sub_10011BC28;
  v82[3] = &unk_1001BE750;
  void v82[4] = *(void *)(a1 + 32);
  id v60 = v31;
  id v83 = v60;
  id v45 = v41;
  id v84 = v45;
  id v46 = v42;
  id v85 = v46;
  int v86 = v132;
  __int16 v87 = &v126;
  uint64_t v88 = v124;
  uint64_t v89 = &v118;
  id v90 = &v104;
  id v47 = [v44 initWithStartHandler:v82];
  id v48 = objc_alloc((Class)ICAsyncBlockOperation);
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472;
  v76[2] = sub_10011BCF4;
  v76[3] = &unk_1001BE7A0;
  void v76[4] = *(void *)(a1 + 32);
  id v59 = v32;
  id v77 = v59;
  id v49 = v45;
  id v78 = v49;
  id v50 = v46;
  id v79 = v50;
  long long v80 = v116;
  uint64_t v81 = &v110;
  id v51 = [v48 initWithStartHandler:v76];
  [*(id *)(*(void *)(a1 + 32) + 48) addOperation:v43];
  [*(id *)(*(void *)(a1 + 32) + 48) addOperation:v47];
  [*(id *)(*(void *)(a1 + 32) + 48) addOperation:v51];
  [*(id *)(*(void *)(a1 + 32) + 48) waitUntilAllOperationsAreFinished];
  unsigned int v52 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v53 = *(void **)(a1 + 32);
    unsigned int v54 = [v53 isCancelled];
    *(_DWORD *)int v154 = 138543618;
    *(void *)&v154[4] = v53;
    *(_WORD *)&v154[12] = 1024;
    *(_DWORD *)&v154[14] = v54;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished loading all content taste changes - isCancelled=%{BOOL}u", v154, 0x12u);
  }

  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0
    && ([(id)v135[5] count]
     || [(id)v127[5] count]
     || [(id)v119[5] count]
     || [(id)v111[5] count]
     || v105[5]
     || v99[5]))
  {
    v64[0] = _NSConcreteStackBlock;
    v64[1] = 3221225472;
    v64[2] = sub_10011BDB4;
    v64[3] = &unk_1001BE7C8;
    v64[4] = *(void *)(a1 + 32);
    uint64_t v66 = &v134;
    id v67 = buf;
    id v65 = v49;
    id v68 = &v110;
    uint64_t v69 = v116;
    uint64_t v70 = &v126;
    uint64_t v71 = v132;
    uint64_t v72 = &v118;
    uint64_t v73 = v124;
    long long v74 = &v104;
    uint64_t v75 = &v98;
    [v65 databaseConnectionAllowingWrites:1 withBlock:v64];
  }
  double v55 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v56 = *(void *)(a1 + 32);
    +[NSDate timeIntervalSinceReferenceDate];
    double v58 = v57 - *(double *)(a1 + 96);
    *(_DWORD *)int v154 = 138543618;
    *(void *)&v154[4] = v56;
    *(_WORD *)&v154[12] = 2048;
    *(double *)&v154[14] = v58;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished updating content taste for media entities in %3f seconds", v154, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
  _Block_object_dispose(&v98, 8);

  _Block_object_dispose(&v104, 8);
  _Block_object_dispose(&v110, 8);

  _Block_object_dispose(v116, 8);
  _Block_object_dispose(&v118, 8);

  _Block_object_dispose(v124, 8);
  _Block_object_dispose(&v126, 8);

  _Block_object_dispose(v132, 8);
  _Block_object_dispose(&v134, 8);

  _Block_object_dispose(buf, 8);
LABEL_32:
}

void sub_10011B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose((const void *)(v72 - 256), 8);
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose(&STACK[0x2B8], 8);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose((const void *)(v72 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_10011BA98(uint64_t a1)
{
  sub_100118B10();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001F3A90 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ICCloudContentTasteUpdateOperation.m", 40, @"Unable to find class %s", "MPMediaLibrary");

    __break(1u);
  }
}

void sub_10011BB60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10011C6C8;
  void v9[3] = &unk_1001BE6D8;
  long long v12 = *(_OWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 80);
  id v10 = v3;
  uint64_t v11 = v4;
  id v8 = v3;
  [v4 _updateContentTasteForAlbumArtistItems:v5 musicLibrary:v6 mediaLibrary:v7 withCompletion:v9];
}

void sub_10011BC28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10011C51C;
  v10[3] = &unk_1001BE728;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = v8;
  uint64_t v15 = *(void *)(a1 + 96);
  id v11 = v3;
  long long v12 = v4;
  id v9 = v3;
  [v4 _updateContentTasteForMediaItems:v5 musicLibrary:v6 mediaLibrary:v7 withCompletion:v10];
}

void sub_10011BCF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10011C3F4;
  void v9[3] = &unk_1001BE778;
  long long v12 = *(_OWORD *)(a1 + 64);
  id v10 = v3;
  id v11 = v4;
  id v8 = v3;
  [v4 _updateContentTasteForGlobalPlaylists:v5 musicLibrary:v6 mediaLibrary:v7 withCompletion:v9];
}

void sub_10011BDB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count])
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      v47[0] = ML3AlbumArtistPropertyLikedState;
      v47[1] = ML3AlbumArtistPropertyLikedStateChangedDate;
      uint64_t v5 = +[NSArray arrayWithObjects:v47 count:2];
      unsigned __int8 v6 = +[ML3AlbumArtist setDifferentValues:v4 forProperties:v5 forEntityPersistentIDs:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) inLibrary:*(void *)(a1 + 40) usingConnection:v3];

      if ((v6 & 1) == 0)
      {
        uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          uint64_t v8 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          uint64_t v40 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ Could not update content taste for album artists", buf, 0xCu);
        }
      }
    }
  }
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      v46[0] = ML3ContainerPropertyLikedState;
      v46[1] = ML3ContainerPropertyLikedStateChangedDate;
      id v10 = +[NSArray arrayWithObjects:v46 count:2];
      unsigned __int8 v11 = +[ML3Container setDifferentValues:v9 forProperties:v10 forEntityPersistentIDs:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) inLibrary:*(void *)(a1 + 40) usingConnection:v3];

      if ((v11 & 1) == 0)
      {
        long long v12 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          uint64_t v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@ Could not update content taste for playlists", buf, 0xCu);
        }
      }
    }
  }
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count])
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      v45[0] = ML3TrackPropertyLikedState;
      v45[1] = ML3TrackPropertyLikedStateChangedDate;
      uint64_t v15 = +[NSArray arrayWithObjects:v45 count:2];
      unsigned __int8 v16 = +[ML3Track setDifferentValues:v14 forProperties:v15 forEntityPersistentIDs:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) inLibrary:*(void *)(a1 + 40) usingConnection:v3];

      if ((v16 & 1) == 0)
      {
        double v17 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          uint64_t v40 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@ Could not update content taste for items", buf, 0xCu);
        }
      }
    }
  }
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    if ([*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) count])
    {
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
      v44[0] = ML3AlbumPropertyLikedState;
      v44[1] = ML3AlbumPropertyLikedStateChangedDate;
      uint64_t v20 = +[NSArray arrayWithObjects:v44 count:2];
      unsigned __int8 v21 = +[ML3Album setDifferentValues:v19 forProperties:v20 forEntityPersistentIDs:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) inLibrary:*(void *)(a1 + 40) usingConnection:v3];

      if ((v21 & 1) == 0)
      {
        uint64_t v22 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          uint64_t v40 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@ Could not update content taste for albums", buf, 0xCu);
        }
      }
    }
  }
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40);
    if (v24)
    {
      v43[0] = @"NonMediaItemStoreAdamIds";
      v43[1] = v24;
      id v25 = +[NSArray arrayWithObjects:v43 count:2];
      id v37 = 0;
      unsigned __int8 v26 = [v3 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES (?, ?)", v25, &v37 withParameters error];
      id v27 = v37;

      if ((v26 & 1) == 0)
      {
        uint64_t v28 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543618;
          uint64_t v40 = v29;
          __int16 v41 = 2114;
          id v42 = v27;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}@ Could not update non media item store adam IDs. error=%{public}@", buf, 0x16u);
        }
      }
    }
    else
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)) {
        goto LABEL_40;
      }
      id v27 = 0;
    }
    uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
    if (v30)
    {
      v38[0] = @"ArtistsMatchingDifferentStoreAdamIds";
      v38[1] = v30;
      id v31 = +[NSArray arrayWithObjects:v38 count:2];
      id v36 = v27;
      unsigned __int8 v32 = [v3 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES (?, ?)", v31, &v36 withParameters error];
      id v33 = v36;

      if ((v32 & 1) == 0)
      {
        double v34 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543618;
          uint64_t v40 = v35;
          __int16 v41 = 2114;
          id v42 = v33;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%{public}@ Could not update artist store adam IDs. error=%{public}@", buf, 0x16u);
        }
      }
    }
    else
    {
      id v33 = v27;
    }
  }
LABEL_40:
}

void sub_10011C3F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  id v10 = a4;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  [*(id *)(a1 + 32) finishWithError:v10];

  unsigned __int8 v11 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    int v13 = 138543362;
    uint64_t v14 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished processing content taste for playlists", (uint8_t *)&v13, 0xCu);
  }
}

void sub_10011C51C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v21 = a2;
  id v20 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  id v17 = a7;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a4);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a5);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), a6);
  [*(id *)(a1 + 32) finishWithError:v17];

  uint64_t v18 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v23 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished processing content taste for items/albums", buf, 0xCu);
  }
}

void sub_10011C6C8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  id v13 = a5;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a4);
  [*(id *)(a1 + 32) finishWithError:v13];

  id v14 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    int v16 = 138543362;
    uint64_t v17 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished processing content taste for album artists", (uint8_t *)&v16, 0xCu);
  }
}

void sub_10011CD28(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = a1[4];
      id v10 = objc_msgSend(v6, "msv_description");
      int v14 = 138543618;
      id v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ Finished request to edit collaboration error=%{public}@", (uint8_t *)&v14, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = a1[4];
    int v14 = 138543362;
    id v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Finished request to edit collaboration", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v12 = (uint64_t)[v5 responseCode];
  if (v12 > 399)
  {
    if (v12 == 404 || v12 == 400)
    {
      uint64_t v13 = 3;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  if (v12 != 200 && v12 != 204) {
LABEL_13:
  }
    uint64_t v13 = 2;
LABEL_14:
  [a1[4] setStatus:v13];
  if ([v5 responseCode] == (id)500) {
    [a1[4] setStatus:3];
  }
  [a1[4] setError:v6];
  if (!v6)
  {
    *((unsigned char *)a1[4] + 114) = [v5 updateRequired];
    *(void *)((char *)a1[4] + 122) = [a1[5] longLongValue];
  }
  [a1[6] endTransaction];
  [a1[4] finish];
}

void sub_10011D810(uint64_t a1, uint64_t a2, id *a3)
{
  id v14 = *a3;
  if ((uint64_t)[a3[1] longLongValue] < 1) {
    id v6 = 0;
  }
  else {
    id v6 = a3[1];
  }
  unint64_t v7 = (unint64_t)v6;
  [a3[2] doubleValue];
  uint64_t v8 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  id v9 = [(id)v8 earlierDate:*(void *)(a1 + 32)];

  if (v9 == (void *)v8)
  {

    uint64_t v8 = 0;
  }
  if (v7 | v8)
  {
    id v10 = +[NSMutableDictionary dictionaryWithCapacity:2];
    id v11 = v10;
    if (v7) {
      [v10 setObject:v7 forKey:@"daap.incrementplaycount"];
    }
    if (v8) {
      [v11 setObject:v8 forKey:ML3ContainerPropertyDatePlayed];
    }
    [*(id *)(a1 + 40) addObject:v14];
    [*(id *)(a1 + 48) addObject:v11];
    uint64_t v12 = *(void **)(a1 + 56);
    uint64_t v13 = +[NSNumber numberWithLongLong:a2];
    [v12 addObject:v13];
  }
}

void sub_10011D97C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134217984;
    id v13 = [v5 responseCode];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Bulk set containers properties response code: %lu", (uint8_t *)&v12, 0xCu);
  }

  if (v6)
  {
    uint64_t v8 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138543362;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Bulk set containers properties failed with error: %{public}@", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = (uint64_t)[v5 responseCode];
  if (v10 > 399)
  {
    if (v10 != 404 && v10 != 400) {
      goto LABEL_14;
    }
    uint64_t v11 = 3;
  }
  else
  {
    uint64_t v11 = 1;
    if (v10 != 200 && v10 != 204) {
LABEL_14:
    }
      uint64_t v11 = 2;
  }
  [v9 setStatus:v11];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_10011DB10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)ML3DatabasePrivacyContext);
  id v5 = [*(id *)(a1 + 32) clientIdentity];
  id v6 = [v4 initWithClientIdentity:v5];
  __int16 v16 = v3;
  [v3 setPrivacyContext:v6];

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id obj = *(id *)(a1 + 40);
  id v7 = [obj countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v19;
    uint64_t v10 = ML3ContainerPropertyPlayCountRecent;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(obj);
        }
        id v12 = [*(id *)(*((void *)&v18 + 1) + 8 * i) longLongValue];
        id v13 = +[ML3Container newWithPersistentID:v12 inLibrary:*(void *)(a1 + 48)];
        [v13 setValue:&off_1001CC878 forProperty:v10];
        id v14 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134217984;
          id v23 = v12;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Play data update succeeded for container with persistent ID: %lld", buf, 0xCu);
        }
      }
      id v8 = [obj countByEnumeratingWithState:&v18 objects:v24 count:16];
    }
    while (v8);
  }

  return 1;
}

void sub_10011E5E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 urlForBagKey:*(void *)(*(void *)(a1 + 32) + 8)];
  id v7 = (void *)v6;
  if (a2 && v6)
  {
    id v8 = [*(id *)(a1 + 32) _baseRequestWithURL:v6];
    id v9 = [objc_alloc((Class)ICStoreURLRequest) initWithURLRequest:v8 requestContext:*(void *)(a1 + 40)];
    uint64_t v10 = +[ICURLSessionManager defaultSession];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10011E7F0;
    v15[3] = &unk_1001BEA98;
    void v15[4] = *(void *)(a1 + 32);
    [v10 enqueueDataRequest:v9 withCompletionHandler:v15];

LABEL_9:
    goto LABEL_10;
  }
  uint64_t v11 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(v12 + 8);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v17 = v12;
    __int16 v18 = 2114;
    uint64_t v19 = v13;
    __int16 v20 = 2114;
    uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch URL from bag using key %{public}@. error=%{public}@", buf, 0x20u);
  }

  id v14 = *(void **)(a1 + 32);
  if (!v5)
  {
    id v8 = +[NSError errorWithDomain:ICErrorDomain code:-7200 userInfo:0];
    [v14 _finishWithError:v8];
    goto LABEL_9;
  }
  [v14 _finishWithError:v5];
LABEL_10:
}

void sub_10011E7F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "PlaybackPosition");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = [v5 parsedBodyDictionary];
      uint64_t v11 = objc_msgSend(v6, "msv_description");
      int v14 = 138544130;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      id v17 = v5;
      __int16 v18 = 2114;
      uint64_t v19 = v10;
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ request completed with response: %{public}@ body: %{public}@ error=%{public}@", (uint8_t *)&v14, 0x2Au);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = [v5 parsedBodyDictionary];
    int v14 = 138543874;
    uint64_t v15 = v12;
    __int16 v16 = 2114;
    id v17 = v5;
    __int16 v18 = 2114;
    uint64_t v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ request completed with response: %{public}@ body: %{public}@", (uint8_t *)&v14, 0x20u);
  }
  [*(id *)(a1 + 32) _finishWithResponse:v5 error:v6];
}

void sub_10011F250(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 134218240;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    id v12 = [v3 responseCode];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%p received response status code: %lu", (uint8_t *)&v9, 0x16u);
  }

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = (uint64_t)[v3 responseCode];
  if (v7 > 399)
  {
    if (v7 != 404 && v7 != 400) {
      goto LABEL_10;
    }
    uint64_t v8 = 3;
  }
  else
  {
    uint64_t v8 = 1;
    if (v7 != 200 && v7 != 204) {
LABEL_10:
    }
      uint64_t v8 = 2;
  }
  [v6 setStatus:v8];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_10011FA50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didCompleteAllCapabilitiesAsynchronousRequests];
}

void sub_10011FDDC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setIdentityStore:v3];
  [v4 setIdentity:*(void *)(a1 + 40)];
  [v4 setAllowsExpiredBags:1];
  id v5 = [objc_alloc((Class)ICURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v4 setAuthenticationProvider:v5];
}

void sub_10011FE74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v14 = 138543874;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v10;
      __int16 v18 = 2114;
      id v19 = v6;
      __int16 v11 = "%{public}@: Did complete %{public}@. Encountered error: %{public}@.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v14, 0x20u);
    }
  }
  else if (v8)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    int v14 = 138543874;
    uint64_t v15 = v12;
    __int16 v16 = 2114;
    uint64_t v17 = v13;
    __int16 v18 = 2114;
    id v19 = v5;
    __int16 v11 = "%{public}@: Did complete %{public}@. Received subscription status response %{public}@.";
    goto LABEL_6;
  }

  [*(id *)(a1 + 32) _updateWithSubscriptionStatusResponse:v5 error:v6];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100120228(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v14 = 138543618;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      id v17 = v5;
      uint64_t v10 = "%{public}@: Did complete user identity properties request. Encountered error: %{public}@.";
      __int16 v11 = v7;
      uint32_t v12 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, v12);
    }
  }
  else if (v8)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 138543362;
    uint64_t v15 = v13;
    uint64_t v10 = "%{public}@: Did complete user identity properties request.";
    __int16 v11 = v7;
    uint32_t v12 = 12;
    goto LABEL_6;
  }

  [*(id *)(a1 + 32) _updateWithIdentityProperties:v6 error:v5];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100120674(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setIdentityStore:v3];
  [v4 setIdentity:*(void *)(a1 + 40)];
  [v4 setAllowsExpiredBags:0];
  id v5 = [objc_alloc((Class)ICURLResponseAuthenticationProvider) initWithUserInteractionLevel:1];
  [v4 setAuthenticationProvider:v5];
}

void sub_10012070C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "Default");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Did complete bag request. Encountered error: %{public}@.", (uint8_t *)&v13, 0x16u);
    }
  }
  else if (v8)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    __int16 v11 = [v5 serverCorrelationKey];
    uint32_t v12 = [v5 serverEnvironment];
    int v13 = 138544130;
    uint64_t v14 = v10;
    __int16 v15 = 2114;
    id v16 = v5;
    __int16 v17 = 2114;
    __int16 v18 = v11;
    __int16 v19 = 2114;
    __int16 v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Did complete bag request. Received bag %{public}@ (serverCorrelationKey: %{public}@; serverEnvironment: %{public}@).",
      (uint8_t *)&v13,
      0x2Au);
  }
  [*(id *)(a1 + 32) _updateWithBag:v5 error:v6];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100120DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100120DE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (id *)(a1 + 40);
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  [*(id *)(a1 + 32) _didCompletePrivacyPromptOperation:WeakRetained withStatus:a2 error:v6];
}

void sub_100121660(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  id v5 = +[NSMutableArray array];
  id v6 = [v3 executeQuery:@"SELECT DISTINCT (fetchable_artwork_token), store_cloud_id FROM best_artwork_token LEFT OUTER JOIN artwork ON fetchable_artwork_token = artwork_token JOIN container ON entity_pid = container_pid AND entity_type = ? WHERE artwork_token IS NULL AND best_artwork_token.artwork_type = ? AND fetchable_artwork_source_type = ? GROUP BY fetchable_artwork_token", &off_1001CCDA8 withParameters];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012178C;
  void v9[3] = &unk_1001BEBB0;
  id v7 = *(id *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 48);
  id v10 = v7;
  id v11 = v5;
  id v8 = v5;
  [v6 enumerateRowsWithBlock:v9];
  [*(id *)(a1 + 40) importCloudArtworkForRequests:v8];
}

void sub_10012178C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [v3 stringForColumnIndex:0];
  id v4 = [v3 int64ForColumnIndex:1];

  id v5 = [[CloudArtworkImportRequest alloc] initWithClientIdentity:*(void *)(a1 + 32)];
  [(CloudArtworkImportRequest *)v5 setCloudID:v4];
  [(CloudArtworkImportRequest *)v5 setToken:v6];
  [(CloudArtworkImportRequest *)v5 setMediaType:8];
  [(CloudArtworkImportRequest *)v5 setArtworkType:5];
  [(CloudArtworkImportRequest *)v5 setAllowsCellularData:*(unsigned __int8 *)(a1 + 48)];
  [*(id *)(a1 + 40) addObject:v5];
}

void sub_100121938(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  [v3 setPrivacyContext:v4];

  id v5 = +[NSMutableArray array];
  id v6 = [v3 executeQuery:@"SELECT DISTINCT (fetchable_artwork_token), store_saga_id, media_type FROM best_artwork_token LEFT OUTER JOIN artwork ON fetchable_artwork_token = artwork_token JOIN item_store ON entity_pid = item_store.item_pid AND entity_type = ? JOIN item USING (item_pid) WHERE artwork_token IS NULL AND best_artwork_token.artwork_type = ? AND fetchable_artwork_source_type = ? GROUP BY fetchable_artwork_token", &off_1001CCD90 withParameters];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100121A64;
  void v9[3] = &unk_1001BEBB0;
  id v7 = *(id *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 48);
  id v10 = v7;
  id v11 = v5;
  id v8 = v5;
  [v6 enumerateRowsWithBlock:v9];
  [*(id *)(a1 + 40) importCloudArtworkForRequests:v8];
}

void sub_100121A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = [v3 stringForColumnIndex:0];
  id v4 = [v3 int64ForColumnIndex:1];
  id v5 = [v3 intForColumnIndex:2];

  id v6 = [[CloudArtworkImportRequest alloc] initWithClientIdentity:*(void *)(a1 + 32)];
  [(CloudArtworkImportRequest *)v6 setCloudID:v4];
  [(CloudArtworkImportRequest *)v6 setToken:v7];
  [(CloudArtworkImportRequest *)v6 setMediaType:v5];
  [(CloudArtworkImportRequest *)v6 setArtworkType:1];
  [(CloudArtworkImportRequest *)v6 setAllowsCellularData:*(unsigned __int8 *)(a1 + 48)];
  [*(id *)(a1 + 40) addObject:v6];
}

void sub_100122650(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1001226EC;
  v7[3] = &unk_1001BECC0;
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v6 = v5;
  [a3 cancelAllOperationsAndClearPendingChangesWithCompletionHandler:v7];
}

void sub_1001226EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100122780;
  v3[3] = &unk_1001BECC0;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

id sub_100122780(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) removeObjectForKey:*(void *)(a1 + 40)];
}

uint64_t sub_1001228D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100122E10(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ connection from pid %i was interrupted", (uint8_t *)&v5, 0x12u);
  }
}

void sub_100122ED4(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ connection from pid %i was invalidated", (uint8_t *)&v5, 0x12u);
  }
}

void sub_1001230B4(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    if (*(void *)(a1 + 64))
    {
      uint64_t v2 = *(void **)(a1 + 40);
      if (v2)
      {
        uint64_t v3 = [v2 userIdentity];
        int v4 = +[ICMusicSubscriptionStatusController sharedStatusController];
        int v5 = [*(id *)(a1 + 40) userIdentity];
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1001234E8;
        void v20[3] = &unk_1001BEE00;
        void v20[4] = *(void *)(a1 + 32);
        id v21 = v3;
        id v24 = *(id *)(a1 + 56);
        long long v25 = *(_OWORD *)(a1 + 64);
        id v22 = *(id *)(a1 + 40);
        id v6 = *(id *)(a1 + 48);
        uint64_t v7 = *(void *)(a1 + 80);
        id v23 = v6;
        uint64_t v26 = v7;
        id v8 = v3;
        [v4 getSubscriptionStatusForUserIdentity:v5 withCompletionHandler:v20];

LABEL_13:
        return;
      }
    }
    uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 64);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v32 = v11;
      __int16 v33 = 2048;
      uint64_t v34 = v10;
      __int16 v35 = 2114;
      uint64_t v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@ Cannot update content taste for artist with storeID %lld, configuration=%{public}@", buf, 0x20u);
    }

    int v13 = *(void **)(a1 + 56);
    if (v13)
    {
      uint64_t v14 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100123470;
      block[3] = &unk_1001BEC70;
      id v28 = v13;
      dispatch_async(v14, block);
      id v8 = v28;
      goto LABEL_13;
    }
  }
  else
  {
    __int16 v15 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v32 = v16;
      __int16 v33 = 2048;
      uint64_t v34 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ Music app is not installed - not running content taste update operation for artist with storeID %lld", buf, 0x16u);
    }

    __int16 v18 = *(void **)(a1 + 56);
    if (v18)
    {
      __int16 v19 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_1001233F8;
      v29[3] = &unk_1001BEC70;
      id v30 = v18;
      dispatch_async(v19, v29);
      id v8 = v30;
      goto LABEL_13;
    }
  }
}

void sub_1001233F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100123470(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001234E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([v5 hasCapability:512])
    {
      uint64_t v7 = [[ICCloudContentTasteUpdateItem alloc] initWithStoreItemID:*(void *)(a1 + 72) mediaContentTasteItem:8 contentTaste:*(void *)(a1 + 80) configuration:*(void *)(a1 + 48) timeStamp:*(void *)(a1 + 56)];
      id v8 = v7;
      if (*(void *)(a1 + 80) == 2 || !*(void *)(a1 + 88))
      {
        uint64_t v40 = *(void *)(a1 + 32);
        __int16 v41 = *(NSObject **)(v40 + 16);
        v50[0] = _NSConcreteStackBlock;
        v50[1] = 3221225472;
        v50[2] = sub_100123D1C;
        v50[3] = &unk_1001BEDD8;
        void v50[4] = v40;
        id v51 = v7;
        id v52 = *(id *)(a1 + 48);
        id v53 = *(id *)(a1 + 64);
        dispatch_async(v41, v50);

        id v15 = 0;
LABEL_31:

        goto LABEL_32;
      }
      uint64_t v9 = +[ICUserIdentityStore defaultIdentityStore];
      uint64_t v10 = *(void *)(a1 + 40);
      id v49 = 0;
      uint64_t v11 = [v9 getPropertiesForUserIdentity:v10 error:&v49];
      id v12 = v49;

      if (v11)
      {
        if ([v11 isActiveLocker])
        {
          int v13 = +[ICDServer server];
          uint64_t v14 = *(void *)(a1 + 48);
          id v48 = v12;
          id v46 = [v13 handlerWithType:0 configuration:v14 error:&v48];
          id v15 = v48;

          if (v46)
          {
            uint64_t v16 = sub_1000EFE24();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
            {
              uint64_t v17 = *(void *)(a1 + 32);
              __int16 v18 = ICNSStringForICMediaContentTaste();
              __int16 v19 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 72);
              *(_DWORD *)long long buf = 138543874;
              *(void *)&uint8_t buf[4] = v17;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v18;
              *(_WORD *)&unsigned char buf[22] = 2048;
              id v61 = v19;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "%{public}@ Got request to %{public}@ item with storeID=%lld and the locker bit is set for the account", buf, 0x20u);
            }
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x3032000000;
            id v61 = sub_100123D30;
            uint64_t v62 = sub_100123D40;
            id v63 = 0;
            __int16 v20 = [*(id *)(a1 + 48) userIdentity];
            id v45 = +[ML3MusicLibrary musicLibraryForUserAccount:v20];

            v47[0] = _NSConcreteStackBlock;
            v47[1] = 3221225472;
            void v47[2] = sub_100123D48;
            void v47[3] = &unk_1001BECE8;
            uint64_t v21 = *(void *)(a1 + 88);
            v47[4] = buf;
            void v47[5] = v21;
            [v45 performReadOnlyDatabaseTransactionWithBlock:v47];
            if ([*(id *)(*(void *)&buf[8] + 40) length])
            {
              v58[0] = @"liked_state";
              id v22 = [*(id *)(a1 + 32) _adjustedContentTasteForLibraryEndpoint:*(void *)(a1 + 80)];
              v59[0] = v22;
              v58[1] = @"liked_state_changed_date";
              id v23 = *(void **)(a1 + 56);
              id v24 = v23;
              if (!v23)
              {
                id v24 = +[NSDate date];
              }
              void v58[2] = @"cloud_universal_library_id";
              uint64_t v25 = *(void *)(*(void *)&buf[8] + 40);
              v59[1] = v24;
              void v59[2] = v25;
              uint64_t v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v59, v58, 3, v45);
              if (!v23) {

              }
              uint64_t v27 = *(void *)(a1 + 88);
              id v28 = [*(id *)(a1 + 48) clientIdentity];
              [v46 setAlbumArtistProperties:v26 withArtistPersistentID:v27 clientIdentity:v28 completionHandler:*(void *)(a1 + 64)];
            }
            else if (*(void *)(a1 + 80) == 1)
            {
              [v46 favoriteEntityWithPersistentID:*(void *)(a1 + 88) storeID:*(void *)(a1 + 72) entityType:2 time:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
            }
            else
            {
              [*(id *)(a1 + 32) _updateContentTasteForItem:v8 invalidatingLocalCache:0 configuration:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 64)];
            }

            _Block_object_dispose(buf, 8);
            goto LABEL_30;
          }
          id v12 = v15;
        }
      }
      else
      {
        id v42 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v43 = *(void *)(a1 + 32);
          uint64_t v44 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v43;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v44;
          *(_WORD *)&unsigned char buf[22] = 2114;
          id v61 = (uint64_t (*)(uint64_t, uint64_t))v12;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%{public}@ Could not get properties for %{public}@, error=%{public}@", buf, 0x20u);
        }
      }
      [*(id *)(a1 + 32) _updateContentTasteForItem:v8 invalidatingLocalCache:0 configuration:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 64)];
      id v15 = v12;
LABEL_30:

      goto LABEL_31;
    }
    uint64_t v34 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *(void *)(a1 + 32);
      uint64_t v36 = *(void *)(a1 + 40);
      id v37 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 72);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v35;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v36;
      *(_WORD *)&unsigned char buf[22] = 2048;
      id v61 = v37;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}@ %{public}@ is not subscribed to Cloud Music Library. Not running content taste operation for artist with storeID %lld ", buf, 0x20u);
    }

    id v38 = *(void **)(a1 + 64);
    if (v38)
    {
      uint64_t v39 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v54[0] = _NSConcreteStackBlock;
      v54[1] = 3221225472;
      v54[2] = sub_100123CA4;
      v54[3] = &unk_1001BEC70;
      id v55 = v38;
      dispatch_async(v39, v54);
      id v15 = v55;
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v29 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v31 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v31;
      *(_WORD *)&unsigned char buf[22] = 2114;
      id v61 = v6;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@ Could not get subscription status for %{public}@, error=%{public}@. Not running request", buf, 0x20u);
    }

    uint64_t v32 = *(void **)(a1 + 64);
    if (v32)
    {
      __int16 v33 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100123C2C;
      block[3] = &unk_1001BEC70;
      id v57 = v32;
      dispatch_async(v33, block);
      id v15 = v57;
LABEL_32:
    }
  }
}

void sub_100123C08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100123C2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100123CA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_100123D1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateContentTasteForItem:*(void *)(a1 + 40) invalidatingLocalCache:0 configuration:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 56)];
}

uint64_t sub_100123D30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100123D40(uint64_t a1)
{
}

uint64_t sub_100123D48(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = +[NSNumber numberWithLongLong:v3];
  id v12 = v5;
  id v6 = +[NSArray arrayWithObjects:&v12 count:1];
  uint64_t v7 = [v4 executeQuery:@"SELECT cloud_universal_library_id FROM album_artist WHERE album_artist_pid=?" withParameters:v6];

  uint64_t v8 = [v7 objectForFirstRowAndColumn];
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  return 1;
}

void sub_100123FF8(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    if (*(void *)(a1 + 64) && *(void *)(a1 + 40))
    {
      id v2 = [[ICCloudContentTasteUpdateItem alloc] initWithStoreItemID:*(void *)(a1 + 64) mediaContentTasteItem:3 contentTaste:*(void *)(a1 + 72) configuration:*(void *)(a1 + 40) timeStamp:*(void *)(a1 + 48)];
      if (*(void *)(a1 + 72) != 2 && *(void *)(a1 + 80))
      {
        uint64_t v3 = [*(id *)(a1 + 40) userIdentity];
        id v4 = +[ICUserIdentityStore defaultIdentityStore];
        id v42 = 0;
        id v5 = [v4 getPropertiesForUserIdentity:v3 error:&v42];
        id v6 = v42;

        if (v5)
        {
          if ([v5 isActiveLocker])
          {
            uint64_t v7 = +[ICDServer server];
            uint64_t v8 = *(void *)(a1 + 40);
            id v41 = v6;
            uint64_t v9 = [v7 handlerWithType:0 configuration:v8 error:&v41];
            id v10 = v41;

            if (v9)
            {
              uint64_t v11 = sub_1000EFE24();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
              {
                uint64_t v12 = *(void *)(a1 + 32);
                int v13 = ICNSStringForICMediaContentTaste();
                uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 80);
                uint64_t v15 = *(void *)(a1 + 64);
                *(_DWORD *)long long buf = 138544130;
                *(void *)&uint8_t buf[4] = v12;
                *(_WORD *)&unsigned char buf[12] = 2114;
                *(void *)&buf[14] = v13;
                *(_WORD *)&unsigned char buf[22] = 2048;
                id v50 = v14;
                LOWORD(v51) = 2048;
                *(void *)((char *)&v51 + 2) = v15;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%{public}@ Got request to %{public}@ album with persistentID=%lld, storeID=%lld and the locker bit is set for the account", buf, 0x2Au);
              }
              *(void *)long long buf = 0;
              *(void *)&uint8_t buf[8] = buf;
              *(void *)&uint8_t buf[16] = 0x3032000000;
              id v50 = sub_100123D30;
              *(void *)&long long v51 = sub_100123D40;
              *((void *)&v51 + 1) = 0;
              uint64_t v16 = [*(id *)(a1 + 40) userIdentity];
              uint64_t v17 = +[ML3MusicLibrary musicLibraryForUserAccount:v16];

              v40[0] = _NSConcreteStackBlock;
              v40[1] = 3221225472;
              void v40[2] = sub_100124798;
              v40[3] = &unk_1001BECE8;
              uint64_t v18 = *(void *)(a1 + 80);
              void v40[4] = buf;
              void v40[5] = v18;
              [v17 performReadOnlyDatabaseTransactionWithBlock:v40];
              if ([*(id *)(*(void *)&buf[8] + 40) length])
              {
                uint64_t v39 = v17;
                v47[0] = @"liked_state";
                __int16 v19 = [*(id *)(a1 + 32) _adjustedContentTasteForLibraryEndpoint:*(void *)(a1 + 72)];
                v48[0] = v19;
                v47[1] = @"liked_state_changed_date";
                __int16 v20 = *(void **)(a1 + 48);
                uint64_t v21 = v20;
                if (!v20)
                {
                  uint64_t v21 = +[NSDate date];
                }
                void v47[2] = @"cloud_library_id";
                uint64_t v22 = *(void *)(*(void *)&buf[8] + 40);
                v48[1] = v21;
                v48[2] = v22;
                id v23 = +[NSDictionary dictionaryWithObjects:v48 forKeys:v47 count:3];
                if (!v20) {

                }
                uint64_t v24 = *(void *)(a1 + 80);
                uint64_t v25 = [*(id *)(a1 + 40) clientIdentity];
                [v9 setAlbumEntityProperties:v23 withAlbumPersistentID:v24 clientIdentity:v25 completionHandler:*(void *)(a1 + 56)];

                uint64_t v17 = v39;
              }
              else if (*(void *)(a1 + 72) == 1)
              {
                [v9 favoriteEntityWithPersistentID:*(void *)(a1 + 80) storeID:*(void *)(a1 + 64) entityType:3 time:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
              }
              else
              {
                [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56)];
              }

              _Block_object_dispose(buf, 8);
              goto LABEL_31;
            }
            id v6 = v10;
          }
        }
        else
        {
          id v37 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v38 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 138543874;
            *(void *)&uint8_t buf[4] = v38;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v3;
            *(_WORD *)&unsigned char buf[22] = 2114;
            id v50 = (uint64_t (*)(uint64_t, uint64_t))v6;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%{public}@ Could not get properties for %{public}@, error=%{public}@", buf, 0x20u);
          }
        }
        [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56)];
        id v10 = v6;
LABEL_31:

        goto LABEL_32;
      }
      [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56)];
LABEL_32:

      return;
    }
    uint64_t v26 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 64);
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v27;
      *(_WORD *)&unsigned char buf[22] = 2114;
      id v50 = v29;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}@ Cannot update content taste for album with storeID %lld@, configuration=%{public}@", buf, 0x20u);
    }

    uint64_t v30 = *(void **)(a1 + 56);
    if (v30)
    {
      uint64_t v31 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100124720;
      block[3] = &unk_1001BEC70;
      uint64_t v44 = v30;
      dispatch_async(v31, block);
      id v2 = v44;
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v32 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%{public}@ Music app is not installed - not running content taste update operation for album with storeID %lld", buf, 0x16u);
    }

    uint64_t v35 = *(void **)(a1 + 56);
    if (v35)
    {
      uint64_t v36 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      void v45[2] = sub_1001246A8;
      v45[3] = &unk_1001BEC70;
      id v46 = v35;
      dispatch_async(v36, v45);
      id v2 = v46;
      goto LABEL_32;
    }
  }
}

void sub_100124684(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001246A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100124720(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100124798(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = +[NSNumber numberWithLongLong:v3];
  uint64_t v12 = v5;
  id v6 = +[NSArray arrayWithObjects:&v12 count:1];
  uint64_t v7 = [v4 executeQuery:@"SELECT cloud_library_id FROM album WHERE album_pid=?" withParameters:v6];

  uint64_t v8 = [v7 objectForFirstRowAndColumn];
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  return 1;
}

void sub_100124A64(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    if (*(void *)(a1 + 40) && *(void *)(a1 + 48))
    {
      id v2 = [[ICCloudContentTasteUpdateItem alloc] initWithGlobalPlaylistID:*(void *)(a1 + 40) contentTaste:*(void *)(a1 + 72) configuration:*(void *)(a1 + 48)];
      if (*(void *)(a1 + 72) == 2 || !*(void *)(a1 + 80))
      {
        uint64_t v29 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v30;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v2;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@ Posting content taste for item=%{public}@", buf, 0x16u);
        }

        [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 64)];
        goto LABEL_31;
      }
      uint64_t v3 = [*(id *)(a1 + 48) userIdentity];
      id v4 = +[ICUserIdentityStore defaultIdentityStore];
      id v45 = 0;
      id v5 = [v4 getPropertiesForUserIdentity:v3 error:&v45];
      id v6 = v45;

      if (v5)
      {
        if ([v5 isActiveLocker])
        {
          uint64_t v7 = +[ICDServer server];
          uint64_t v8 = *(void *)(a1 + 48);
          id v44 = v6;
          uint64_t v40 = [v7 handlerWithType:0 configuration:v8 error:&v44];
          id v9 = v44;

          if (v40)
          {
            id v10 = sub_1000EFE24();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
            {
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = ICNSStringForICMediaContentTaste();
              int v13 = *(void **)(a1 + 40);
              *(_DWORD *)long long buf = 138543874;
              *(void *)&uint8_t buf[4] = v11;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v12;
              *(_WORD *)&unsigned char buf[22] = 2114;
              id v53 = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}@ Got request to %{public}@ playlist with globalID=%{public}@ and the locker bit is set for the account", buf, 0x20u);
            }
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x2020000000;
            id v53 = 0;
            uint64_t v14 = [*(id *)(a1 + 48) userIdentity];
            uint64_t v39 = +[ML3MusicLibrary musicLibraryForUserAccount:v14];

            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_100125258;
            v41[3] = &unk_1001BED60;
            id v42 = *(id *)(a1 + 40);
            uint64_t v43 = buf;
            [v39 performReadOnlyDatabaseTransactionWithBlock:v41];
            if (*(void *)(*(void *)&buf[8] + 24))
            {
              v50[0] = @"liked_state";
              uint64_t v15 = [*(id *)(a1 + 32) _adjustedContentTasteForLibraryEndpoint:*(void *)(a1 + 72)];
              v51[0] = v15;
              v50[1] = @"liked_state_changed_date";
              uint64_t v16 = *(void *)(a1 + 56);
              if (v16)
              {
                uint64_t v17 = *(void *)(a1 + 56);
              }
              else
              {
                uint64_t v17 = +[NSDate date];
              }
              uint64_t v38 = (void *)v17;
              v51[1] = v17;
              uint64_t v35 = +[NSDictionary dictionaryWithObjects:v51 forKeys:v50 count:2];
              uint64_t v36 = *(void *)(a1 + 80);
              id v37 = [*(id *)(a1 + 48) clientIdentity];
              [v40 setPlaylistProperties:v35 trackList:0 forPlaylistPersistentID:v36 clientIdentity:v37 completionHandler:*(void *)(a1 + 64)];

              if (!v16) {
            }
              }
            else
            {
              if (*(void *)(a1 + 72) != 1)
              {
                [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 64)];
                goto LABEL_39;
              }
              uint64_t v33 = *(void *)(a1 + 80);
              uint64_t v34 = *(void *)(a1 + 40);
              uint64_t v15 = +[NSDate date];
              [v40 favoritePlaylistWithPersistentID:v33 globalID:v34 time:v15 completionHandler:*(void *)(a1 + 64)];
            }

LABEL_39:
            _Block_object_dispose(buf, 8);

            goto LABEL_30;
          }
          id v6 = v9;
        }
      }
      else
      {
        uint64_t v31 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v3;
          *(_WORD *)&unsigned char buf[22] = 2114;
          id v53 = v6;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%{public}@ Could not get properties for %{public}@, error=%{public}@", buf, 0x20u);
        }
      }
      [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 64)];
      id v9 = v6;
LABEL_30:

      goto LABEL_31;
    }
    uint64_t v18 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = *(void **)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v20;
      *(_WORD *)&unsigned char buf[22] = 2114;
      id v53 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@ Cannot update content taste for item with globalPlaylistID=%{public}@, configuration=%{public}@", buf, 0x20u);
    }

    uint64_t v22 = *(void **)(a1 + 64);
    if (v22)
    {
      id v23 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001251E0;
      block[3] = &unk_1001BEC70;
      id v47 = v22;
      dispatch_async(v23, block);
      id v2 = v47;
LABEL_31:
    }
  }
  else
  {
    uint64_t v24 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@ Music app is not installed - not running content taste update operation for playlist %{public}@", buf, 0x16u);
    }

    uint64_t v27 = *(void **)(a1 + 64);
    if (v27)
    {
      uint64_t v28 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_100125168;
      void v48[3] = &unk_1001BEC70;
      id v49 = v27;
      dispatch_async(v28, v48);
      id v2 = v49;
      goto LABEL_31;
    }
  }
}

void sub_100125148(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100125168(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001251E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100125258(uint64_t a1, void *a2)
{
  uint64_t v8 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = +[NSArray arrayWithObjects:&v8 count:1];
  id v5 = objc_msgSend(v3, "executeQuery:withParameters:", @"SELECT store_cloud_id FROM CONTAINER WHERE cloud_global_id=?", v4, v8);

  id v6 = [v5 objectForFirstRowAndColumn];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v6 longLongValue];

  return 1;
}

void sub_100125500(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    if (*(void *)(a1 + 72) && *(void *)(a1 + 40))
    {
      id v2 = [[ICCloudContentTasteUpdateItem alloc] initWithStoreItemID:*(void *)(a1 + 72) mediaContentTasteItem:*(void *)(a1 + 64) contentTaste:*(void *)(a1 + 80) configuration:*(void *)(a1 + 40) timeStamp:*(void *)(a1 + 48)];
      if (*(void *)(a1 + 80) == 2 || !*(void *)(a1 + 88))
      {
        uint64_t v31 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v2;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%{public}@ Posting content taste for item=%{public}@", buf, 0x16u);
        }

        [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56)];
        goto LABEL_31;
      }
      id v3 = [*(id *)(a1 + 40) userIdentity];
      id v4 = +[ICUserIdentityStore defaultIdentityStore];
      id v45 = 0;
      id v5 = [v4 getPropertiesForUserIdentity:v3 error:&v45];
      id v6 = v45;

      if (v5)
      {
        if ([v5 isActiveLocker])
        {
          uint64_t v7 = +[ICDServer server];
          uint64_t v8 = *(void *)(a1 + 40);
          id v44 = v6;
          id v41 = [v7 handlerWithType:0 configuration:v8 error:&v44];
          id v9 = v44;

          if (v41)
          {
            id v10 = sub_1000EFE24();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
            {
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = ICNSStringForICMediaContentTaste();
              uint64_t v13 = *(void *)(a1 + 72);
              *(_DWORD *)long long buf = 138543874;
              *(void *)&uint8_t buf[4] = v11;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v12;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}@ Got request to %{public}@ item with storeID=%lld and the locker bit is set for the account", buf, 0x20u);
            }
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x2020000000;
            *(void *)&unsigned char buf[24] = 0;
            uint64_t v14 = [*(id *)(a1 + 40) userIdentity];
            uint64_t v40 = +[ML3MusicLibrary musicLibraryForUserAccount:v14];

            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472;
            void v43[2] = sub_100125D58;
            v43[3] = &unk_1001BECE8;
            uint64_t v15 = *(void *)(a1 + 88);
            void v43[4] = buf;
            void v43[5] = v15;
            [v40 performReadOnlyDatabaseTransactionWithBlock:v43];
            if (*(void *)(*(void *)&buf[8] + 24))
            {
              v50[0] = @"item_stats.liked_state";
              uint64_t v38 = [*(id *)(a1 + 32) _adjustedContentTasteForLibraryEndpoint:*(void *)(a1 + 80)];
              v50[1] = @"item_stats.liked_state_changed_date";
              v51[0] = v38;
              uint64_t v16 = *(void *)(a1 + 48);
              if (v16)
              {
                uint64_t v17 = *(void **)(a1 + 48);
              }
              else
              {
                uint64_t v17 = +[NSDate date];
              }
              v51[1] = v17;
              uint64_t v35 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 2, v38);
              uint64_t v36 = *(void *)(*(void *)&buf[8] + 24);
              id v37 = [*(id *)(a1 + 40) clientIdentity];
              [v41 setItemProperties:v35 forSagaID:v36 clientIdentity:v37 completionHandler:*(void *)(a1 + 56)];

              if (!v16) {
            }
              }
            else if (*(void *)(a1 + 80) == 1)
            {
              [v41 favoriteEntityWithPersistentID:*(void *)(a1 + 88) storeID:*(void *)(a1 + 72) entityType:0 time:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
            }
            else
            {
              [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56)];
            }
            if (*(void *)(a1 + 80) == 1)
            {
              v42[0] = _NSConcreteStackBlock;
              v42[1] = 3221225472;
              v42[2] = sub_100125E58;
              v42[3] = &unk_1001BED10;
              v42[4] = buf;
              void v42[5] = 1;
              v42[6] = *(void *)(a1 + 88);
              [v40 performDatabaseTransactionWithBlock:v42];
            }

            _Block_object_dispose(buf, 8);
            goto LABEL_30;
          }
          id v6 = v9;
        }
      }
      else
      {
        uint64_t v33 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v34;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v3;
          *(_WORD *)&unsigned char buf[22] = 2114;
          *(void *)&unsigned char buf[24] = v6;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@ Could not get properties for %{public}@, error=%{public}@", buf, 0x20u);
        }
      }
      [*(id *)(a1 + 32) _updateContentTasteForItem:v2 invalidatingLocalCache:0 configuration:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56)];
      id v9 = v6;
LABEL_30:

      goto LABEL_31;
    }
    uint64_t v18 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 64);
      uint64_t v20 = *(void *)(a1 + 72);
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138544130;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2114;
      *(void *)&buf[30] = v22;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@ Cannot update content taste for item type %d with storeId=%lld, configuration=%{public}@", buf, 0x26u);
    }

    id v23 = *(void **)(a1 + 56);
    if (v23)
    {
      uint64_t v24 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100125CE0;
      block[3] = &unk_1001BEC70;
      id v47 = v23;
      dispatch_async(v24, block);
      id v2 = v47;
LABEL_31:
    }
  }
  else
  {
    uint64_t v25 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 64);
      uint64_t v28 = *(void *)(a1 + 72);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}@ Music app is not installed - not running content taste update operation for item %d, id %lld", buf, 0x1Cu);
    }

    uint64_t v29 = *(void **)(a1 + 56);
    if (v29)
    {
      uint64_t v30 = *(NSObject **)(*(void *)(a1 + 32) + 24);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_100125C68;
      void v48[3] = &unk_1001BEC70;
      id v49 = v29;
      dispatch_async(v30, v48);
      id v2 = v49;
      goto LABEL_31;
    }
  }
}

void sub_100125C48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100125C68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100125CE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7101 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100125D58(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = +[NSNumber numberWithLongLong:v3];
  id v10 = v5;
  id v6 = +[NSArray arrayWithObjects:&v10 count:1];
  uint64_t v7 = [v4 executeQuery:@"SELECT store_saga_id FROM item_store WHERE item_pid=?" withParameters:v6];

  uint64_t v8 = [v7 objectForFirstRowAndColumn];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v8 longLongValue];

  return 1;
}

uint64_t sub_100125E58(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSDate date];
  v11[0] = v4;
  v11[1] = &off_1001CC8F0;
  id v5 = +[NSArray arrayWithObjects:v11 count:2];
  [v3 executeUpdate:@"UPDATE container SET date_modified=? WHERE distinguished_kind=?" withParameters:v5 error:0];

  if (!*(void *)(*(void *)(a1[4] + 8) + 24) && a1[5] == 1)
  {
    id v6 = +[NSDate date];
    v10[1] = v6;
    uint64_t v7 = +[NSNumber numberWithLongLong:a1[6]];
    v10[2] = v7;
    uint64_t v8 = +[NSArray arrayWithObjects:v10 count:3];
    [v3 executeUpdate:@"UPDATE item SET in_my_library=?, date_added=? WHERE item_pid=?", v8, 0 withParameters error];
  }
  return 1;
}

void sub_100126108(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userIdentityStore];
  id v3 = [*(id *)(a1 + 32) userIdentity];
  id v12 = 0;
  id v4 = [v2 DSIDForUserIdentity:v3 outError:&v12];
  id v5 = v12;

  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (v6 || ![v4 longValue])
  {
    uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste_Oversize");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v14 = v8;
      __int16 v15 = 2048;
      uint64_t v16 = v9;
      __int16 v17 = 2114;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ Could not get DSID for configuration=%p, error=%{public}@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v7 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKey:v4];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001262D8;
    void v10[3] = &unk_1001BECC0;
    void v10[4] = *(void *)(a1 + 40);
    id v11 = v4;
    [v7 cancelAllOperationsAndClearPendingChangesWithCompletionHandler:v10];
  }
}

void sub_1001262D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10012636C;
  v3[3] = &unk_1001BECC0;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

id sub_10012636C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_10012643C(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(unsigned char *)(v2 + 40))
  {
    id v3 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      *(_DWORD *)long long buf = 138543362;
      uint64_t v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ updating content taste for media items", buf, 0xCu);
    }

    id v5 = (void *)a1[4];
    uint64_t v6 = a1[5];
    id v18 = 0;
    uint64_t v7 = [v5 _contentTasteRequestHandlerForConfiguration:v6 outError:&v18];
    id v8 = v18;
    uint64_t v9 = (void *)a1[6];
    if (v8 || !v7)
    {
      if (v9)
      {
        id v12 = *(NSObject **)(a1[4] + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100126638;
        block[3] = &unk_1001BEC48;
        id v17 = v9;
        id v16 = v8;
        dispatch_async(v12, block);
      }
    }
    else
    {
      [v7 updateContentTasteForReason:0 invalidatingLocalCache:1 completionHandler:v9];
    }
  }
  else
  {
    id v10 = (void *)a1[6];
    if (!v10) {
      return;
    }
    id v11 = *(NSObject **)(v2 + 24);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10012664C;
    v13[3] = &unk_1001BEC70;
    id v14 = v10;
    dispatch_async(v11, v13);
    id v8 = v14;
  }
}

uint64_t sub_100126638(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10012664C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ICErrorDomain code:-7002 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100126738(uint64_t a1)
{
  id v2 = objc_alloc((Class)ICConnectionConfiguration);
  id v3 = +[ICUserIdentity activeAccount];
  uint64_t v4 = +[ICUserIdentityStore defaultIdentityStore];
  id v5 = [v2 initWithUserIdentity:v3 userIdentityStore:v4];

  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v9 = 0;
  uint64_t v7 = [v6 _contentTasteRequestHandlerForConfiguration:v5 outError:&v9];
  id v8 = v7;
  if (!v9 && v7) {
    [v7 updateContentTasteForReason:1 invalidatingLocalCache:0 completionHandler:0];
  }
}

void *sub_100126874(void *result)
{
  if (*(unsigned char *)(result[4] + 40))
  {
    uint64_t v1 = result;
    id v2 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[4];
      int v4 = 138543362;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Music app is uninstalled - clearing all content taste handlers", (uint8_t *)&v4, 0xCu);
    }

    *(unsigned char *)(v1[4] + 40) = 0;
    return [(id)v1[4] _cancelAllContentTasteRequestHandlers];
  }
  return result;
}

void *sub_1001269B8(void *result)
{
  if (!*(unsigned char *)(result[4] + 40))
  {
    uint64_t v1 = result;
    id v2 = os_log_create("com.apple.amp.itunescloudd", "ContentTaste");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[4];
      int v4 = 138543362;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Music app is installed - starting a content taste update operation", (uint8_t *)&v4, 0xCu);
    }

    *(unsigned char *)(v1[4] + 40) = 1;
    return [(id)v1[4] _postContentTasteChangesForPendingItems];
  }
  return result;
}

id sub_100126B98(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelAllContentTasteRequestHandlers];
}

id sub_100126CAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _postContentTasteChangesForPendingItems];
}

void sub_100126E30(id a1)
{
  id v1 = [[CloudContentTasteUpdateRequestListener alloc] _init];
  uint64_t v2 = qword_1001F3AB0;
  qword_1001F3AB0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1001271D8(id a1)
{
  id v1 = objc_alloc_init(CloudArtworkImportSetupOperation);
  uint64_t v2 = qword_1001F3AC8;
  qword_1001F3AC8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100127860(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  if ((uint64_t)[v4 longLongValue] >= 1)
  {
    [*(id *)(a1 + 32) addObject:v4];
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 48)];
  }
}

void sub_1001278C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)id v17 = 134217984;
    *(void *)&void v17[4] = [v5 responseCode];
    uint64_t v9 = "Set album item properties response: %lu";
    id v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    *(_WORD *)id v17 = 0;
    uint64_t v9 = "Set album item properties received no response";
    id v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    uint32_t v12 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, v17, v12);
LABEL_7:

  if (v6)
  {
    uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v17 = 138543362;
      *(void *)&void v17[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Set album item properties response with error: %{public}@", v17, 0xCu);
    }
  }
  id v14 = *(void **)(a1 + 32);
  uint64_t v15 = (uint64_t)objc_msgSend(v5, "responseCode", *(_OWORD *)v17);
  if (v15 > 399)
  {
    if (v15 != 404 && v15 != 400) {
      goto LABEL_18;
    }
    uint64_t v16 = 3;
  }
  else
  {
    uint64_t v16 = 1;
    if (v15 != 200 && v15 != 204) {
LABEL_18:
    }
      uint64_t v16 = 2;
  }
  [v14 setStatus:v16];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100127EE8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  id v4 = a2;
  [v4 writeUInt32:v3 withCode:1835624804];
  [v4 writeUInt32:*(unsigned int *)(a1 + 40) withCode:1634353999];
}

void sub_100128D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100128D64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100128D74(uint64_t a1)
{
}

void sub_100128D7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100128E18(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  if ([v4 unsignedLongLongValue]) {
    objc_msgSend(*(id *)(a1 + 32), "addCloudItemID:idType:", objc_msgSend(v4, "unsignedLongLongValue"), 0);
  }
}

void sub_100128E84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100129B20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100129B44(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100129BA4(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  if ([v4 unsignedLongLongValue]) {
    objc_msgSend(*(id *)(a1 + 32), "addCloudItemID:idType:", objc_msgSend(v4, "unsignedLongLongValue"), 0);
  }
}

void sub_100129C10(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100129F08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 8);
    id v9 = v4;
    if (!v5)
    {
      id v6 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v7 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v6;

      id v5 = *(void **)(a1 + 8);
    }
    id v3 = [v5 addObject:v9];
    id v4 = v9;
  }

  return _objc_release_x1(v3, v4);
}

id sub_10012A49C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 userIdentityStore];
  id v3 = [v1 userIdentity];

  id v15 = 0;
  id v4 = [v2 getPropertiesForUserIdentity:v3 error:&v15];
  id v5 = v15;

  if (v5 || !v4)
  {
    id v6 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not get active account. Treating automatic downloads as disabled", buf, 2u);
    }
    id v10 = 0;
  }
  else
  {
    id v6 = [v4 DSID];
    uint64_t v7 = +[ACAccountStore ic_sharedAccountStore];
    uint64_t v14 = 0;
    id v8 = objc_msgSend(v7, "ic_storeAccountForStoreAccountID:error:", v6, &v14);
    uint64_t v9 = v14;

    if (v9 || !v8)
    {
      id v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [v6 longLongValue];
        *(_DWORD *)long long buf = 134218240;
        id v17 = v12;
        __int16 v18 = 1024;
        int v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Could not get account for DSID=%lld. Automatic Downloads are %{BOOL}u", buf, 0x12u);
      }
      id v10 = 0;
    }
    else
    {
      id v10 = objc_msgSend(v8, "ic_isAutomaticDownloadsEnabledForMediaKindMusic");
      id v11 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v17) = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Automatic Downloads are %{BOOL}u.", buf, 8u);
      }
    }
  }
  return v10;
}

void sub_10012A6EC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if ([v5 count])
  {
    id v8 = [v5 mutableCopy];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    void v28[2] = sub_10012AA34;
    void v28[3] = &unk_1001BEFD0;
    id v29 = v7;
    id v9 = v8;
    id v30 = v9;
    id v10 = v6;
    id v31 = v10;
    id v32 = v5;
    [v10 performDatabaseTransactionWithBlock:v28];
    id v11 = [v9 count];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        id v35 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found %lu adam ids that didn't map to a track without a cloud-id, attempting with cloud-id now...", buf, 0xCu);
      }

      uint64_t v14 = [v9 allValues];
      id v15 = [v14 mutableCopy];

      uint64_t v16 = ML3TrackPropertyStoreSagaID;
      id v17 = +[NSSet setWithArray:v15];
      __int16 v18 = +[ML3ContainmentPredicate predicateWithProperty:v16 values:v17];

      int v19 = +[ML3Track allItemsQueryWithLibrary:v10 predicate:v18 orderingTerms:&__NSArray0__struct usingSections:0];
      uint64_t v33 = v16;
      uint64_t v20 = +[NSArray arrayWithObjects:&v33 count:1];
      id v23 = _NSConcreteStackBlock;
      uint64_t v24 = 3221225472;
      uint64_t v25 = sub_10012B000;
      uint64_t v26 = &unk_1001BEF58;
      id v21 = v15;
      id v27 = v21;
      [v19 enumeratePersistentIDsAndProperties:v20 usingBlock:&v23];

      if (objc_msgSend(v21, "count", v23, v24, v25, v26))
      {
        uint64_t v22 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          id v35 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "The server returned cloud-ids that are not in the database, but should be: %{public}@", buf, 0xCu);
        }
      }
    }
  }
}

uint64_t sub_10012AA34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)ML3DatabasePrivacyContext) initWithClientIdentity:*(void *)(a1 + 32)];
  uint64_t v28 = v3;
  [v3 setPrivacyContext:v4];

  id v5 = objc_alloc_init((Class)NSMutableSet);
  id v6 = [*(id *)(a1 + 40) allValues];
  id v7 = +[NSSet setWithArray:v6];
  uint64_t v8 = ML3TrackPropertyStoreSagaID;
  id v30 = +[ML3ContainmentPredicate predicateWithProperty:ML3TrackPropertyStoreSagaID values:v7];

  id v29 = +[ML3Track queryWithLibrary:*(void *)(a1 + 48) predicate:v30];
  uint64_t v60 = v8;
  id v9 = +[NSArray arrayWithObjects:&v60 count:1];
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  void v51[2] = sub_10012B0D8;
  v51[3] = &unk_1001BEF58;
  id v10 = v5;
  id v52 = v10;
  [v29 enumeratePersistentIDsAndProperties:v9 usingBlock:v51];

  id v11 = *(void **)(a1 + 56);
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_10012B0EC;
  void v48[3] = &unk_1001BEF80;
  id v12 = v10;
  id v49 = v12;
  id v50 = *(id *)(a1 + 40);
  [v11 enumerateKeysAndObjectsUsingBlock:v48];
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v13 = +[ML3ComparisonPredicate predicateWithProperty:v8 equalToInt64:0];
    v59[0] = v13;
    uint64_t v14 = [*(id *)(a1 + 40) allKeys];
    id v15 = +[NSSet setWithArray:v14];
    uint64_t v16 = ML3TrackPropertySubscriptionStoreItemID;
    id v17 = +[ML3ContainmentPredicate predicateWithProperty:ML3TrackPropertySubscriptionStoreItemID values:v15];
    v59[1] = v17;
    __int16 v18 = +[NSArray arrayWithObjects:v59 count:2];
    int v19 = +[ML3AllCompoundPredicate predicateMatchingPredicates:v18];

    uint64_t v20 = +[ML3Track queryWithLibrary:*(void *)(a1 + 48) predicate:v19];
    uint64_t v42 = 0;
    uint64_t v43 = &v42;
    uint64_t v44 = 0x3032000000;
    id v45 = sub_10012B1E4;
    id v46 = sub_10012B1F4;
    id v47 = +[NSMutableArray array];
    uint64_t v36 = 0;
    id v37 = &v36;
    uint64_t v38 = 0x3032000000;
    uint64_t v39 = sub_10012B1E4;
    uint64_t v40 = sub_10012B1F4;
    id v41 = +[NSMutableArray array];
    uint64_t v58 = v16;
    id v21 = +[NSArray arrayWithObjects:&v58 count:1];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    void v31[2] = sub_10012B1FC;
    void v31[3] = &unk_1001BEFA8;
    id v32 = *(id *)(a1 + 56);
    id v33 = *(id *)(a1 + 40);
    uint64_t v34 = &v42;
    id v35 = &v36;
    [v20 enumeratePersistentIDsAndProperties:v21 usingBlock:v31];

    if ([(id)v43[5] count])
    {
      uint64_t v22 = os_log_create("com.apple.amp.itunescloudd", "CloudSync_Oversize");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = v37[5];
        uint64_t v24 = v43[5];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v55 = v23;
        __int16 v56 = 2114;
        uint64_t v57 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Setting sagaIDS=%{public}@ for trackPIDS=%{public}@", buf, 0x16u);
      }

      uint64_t v25 = v37[5];
      uint64_t v53 = v8;
      uint64_t v26 = +[NSArray arrayWithObjects:&v53 count:1];
      +[ML3Track setDifferentValues:v25 forProperties:v26 forEntityPersistentIDs:v43[5] inLibrary:*(void *)(a1 + 48) usingConnection:v28];
    }
    _Block_object_dispose(&v36, 8);

    _Block_object_dispose(&v42, 8);
  }

  return 1;
}

void sub_10012AFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10012B000(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  if (v4)
  {
    [*(id *)(a1 + 32) removeObject:v4];
    id v5 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134217984;
      id v7 = [v4 longLongValue];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found cloud-id already in library: %lld", (uint8_t *)&v6, 0xCu);
    }
  }
}

id *sub_10012B0D8(id *result, uint64_t a2, void *a3)
{
  if (*a3) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_10012B0EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) containsObject:v6])
  {
    id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      id v9 = [v6 longLongValue];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Track with cloud-id %lld is already in the library, no updates needed...", (uint8_t *)&v8, 0xCu);
    }

    [*(id *)(a1 + 40) removeObjectForKey:v5];
  }
}

uint64_t sub_10012B1E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10012B1F4(uint64_t a1)
{
}

void sub_10012B1FC(uint64_t a1, uint64_t a2, id *a3)
{
  id v5 = *a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) objectForKey:v5];
    [*(id *)(a1 + 40) removeObjectForKey:v5];
    if (v6 && (uint64_t)[v6 longLongValue] >= 1)
    {
      id v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      int v8 = +[NSNumber numberWithLongLong:a2];
      [v7 addObject:v8];

      id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      id v11 = v6;
      id v10 = +[NSArray arrayWithObjects:&v11 count:1];
      [v9 addObject:v10];
    }
  }
}

void sub_10012B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012B974(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10012B984(uint64_t a1)
{
}

void sub_10012B98C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    id v9 = v24 = v6;
    id v10 = *(void **)(a1 + 32);
    if ([v10 method]) {
      CFStringRef v11 = @"POST";
    }
    else {
      CFStringRef v11 = @"GET";
    }
    id v12 = [*(id *)(a1 + 32) action];
    uint64_t v13 = (objc_class *)objc_opt_class();
    uint64_t v14 = NSStringFromClass(v13);
    id v15 = [v5 responseCode];
    uint64_t v16 = [v5 responseData];
    *(_DWORD *)long long buf = 138545154;
    id v26 = v9;
    __int16 v27 = 2048;
    uint64_t v28 = v10;
    __int16 v29 = 2114;
    CFStringRef v30 = v11;
    __int16 v31 = 2114;
    id v32 = v12;
    __int16 v33 = 2114;
    uint64_t v34 = v14;
    __int16 v35 = 2048;
    id v36 = v5;
    __int16 v37 = 2048;
    id v38 = v15;
    __int16 v39 = 2048;
    id v40 = [v16 length];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p method=%{public}@ action=%{public}@> received response: <%{public}@: %p code=%ld, length=%{bytes}lu>", buf, 0x52u);

    id v6 = v24;
  }

  if (v6)
  {
    id v17 = os_log_create("com.apple.amp.itunescloudd", "CloudSync");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "SagaRemoveItemOperation failed with error: %{public}@", buf, 0xCu);
    }
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
  int v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v5;
  id v20 = v5;

  id v21 = *(void **)(a1 + 40);
  uint64_t v22 = (uint64_t)[v20 responseCode];
  if (v22 > 399)
  {
    if (v22 != 404 && v22 != 400) {
      goto LABEL_17;
    }
    uint64_t v23 = 3;
  }
  else
  {
    uint64_t v23 = 1;
    if (v22 != 200 && v22 != 204) {
LABEL_17:
    }
      uint64_t v23 = 2;
  }
  [v21 setStatus:v23];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10012C1A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSDate date];
  [v4 timeIntervalSince1970];
  uint64_t v6 = v5;

  [v3 writeUInt32:v6 withCode:1836282979];
  [v3 writeUInt32:*(unsigned int *)(a1 + 72) withCode:1836413810];
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  ICDAAPUtilitiesWriteContainer();
}

void sub_10012C2DC(id *a1)
{
  id v2 = a1[4];
  id v3 = a1[5];
  id v4 = a1[6];
  id v5 = a1[7];
  ICDAAPUtilitiesWriteContainer();
}

void sub_10012C3B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    objc_msgSend(v3, "writeSInt64:withCode:");
    goto LABEL_10;
  }
  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else if ([*(id *)(a1 + 40) length])
  {
    uint64_t v4 = *(void *)(a1 + 40);
  }
  else
  {
    if (![*(id *)(a1 + 48) length]) {
      goto LABEL_10;
    }
    uint64_t v4 = *(void *)(a1 + 48);
  }
  [v6 writeString:v4 withCode:1634353993];
LABEL_10:
  [*(id *)(a1 + 56) timeIntervalSince1970];
  [v6 writeUInt32:v5 withCode:1634036850];
}

void sub_10012CF98(id a1)
{
  id v1 = [ArtistImageRequestHandler alloc];
  id v4 = (id)objc_opt_new();
  id v2 = [(ArtistImageRequestHandler *)v1 initWithConfiguration:v4];
  id v3 = (void *)qword_1001F3AE0;
  qword_1001F3AE0 = (uint64_t)v2;
}

void sub_10012D0A8(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v2 = qword_1001F3AD0;
  qword_1001F3AD0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10012D244(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 writeUInt32:*(unsigned int *)(a1 + 72) withCode:1836413810];
  id v5 = *(id *)(a1 + 32);
  ICDAAPUtilitiesWriteContainer();
  if (*(void *)(a1 + 64) || [*(id *)(a1 + 40) length])
  {
    id v4 = *(id *)(a1 + 40);
    ICDAAPUtilitiesWriteContainer();
  }
}

void sub_10012D384(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if ((uint64_t)a1[5] < 1)
  {
    if ((uint64_t)a1[6] < 1) {
      [v3 writeString:a1[4] withCode:1634357319];
    }
    else {
      objc_msgSend(v3, "writeUInt32:withCode:");
    }
  }
  else
  {
    objc_msgSend(v3, "writeSInt64:withCode:");
  }
}

id sub_10012D410(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return [a2 writeSInt64:v2 withCode:1634029641];
  }
  else {
    return [a2 writeString:*(void *)(a1 + 32) withCode:1634357319];
  }
}

void sub_10012E858(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  id v4 = a2;
  [v4 writeUInt32:v3 withCode:1836413810];
  id v5 = *(id *)(a1 + 32);
  ICDAAPUtilitiesWriteContainer();
}

id sub_10012E914(uint64_t a1, void *a2)
{
  return [a2 writeString:*(void *)(a1 + 32) withCode:1634353993];
}

void sub_10012F1BC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  id v4 = a2;
  [v4 writeUInt32:v3 withCode:1836413810];
  id v5 = *(id *)(a1 + 32);
  ICDAAPUtilitiesWriteContainer();
}

id sub_10012F278(uint64_t a1, void *a2)
{
  return [a2 writeString:*(void *)(a1 + 32) withCode:1634353993];
}

void sub_100130838(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v13 = 134218242;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      id v16 = v3;
      id v7 = "ICDBackgroundTaskManager %p - jaliscoDeferredPushUpate - Failed - error=%{public}@";
      id v8 = v5;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      uint32_t v10 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v13, v10);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 134217984;
    uint64_t v14 = v11;
    id v7 = "ICDBackgroundTaskManager %p - jaliscoDeferredPushUpate - Succeeded";
    id v8 = v5;
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    uint32_t v10 = 12;
    goto LABEL_6;
  }

  (*(void (**)(void, id, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v3, v12);
}

void sub_100130B44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v13 = 134218242;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      id v16 = v3;
      id v7 = "ICDBackgroundTaskManager %p - sagaDeferredPushUpate - Failed - error=%{public}@";
      id v8 = v5;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      uint32_t v10 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v13, v10);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 134217984;
    uint64_t v14 = v11;
    id v7 = "ICDBackgroundTaskManager %p - sagaDeferredPushUpate - Succeeded";
    id v8 = v5;
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    uint32_t v10 = 12;
    goto LABEL_6;
  }

  (*(void (**)(void, id, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v3, v12);
}

void sub_100131394(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001313A8(uint64_t a1, void *a2)
{
  id v3 = [a2 name];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1001316C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001316F0(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained && xpc_activity_get_state(v3) == 2)
  {
    if (!xpc_activity_set_state(v3, 4))
    {
      id v5 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = a1[4];
        *(_DWORD *)long long buf = 134218242;
        id v14 = WeakRetained;
        __int16 v15 = 2114;
        id v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ICDBackgroundTaskManager %p - scheduleTask - Unable to perform asynchrounous work [%{public}@]", buf, 0x16u);
      }
    }
    id v7 = a1[5];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_1001318A4;
    void v8[3] = &unk_1001BF238;
    id v9 = WeakRetained;
    id v10 = a1[4];
    id v11 = a1[5];
    uint64_t v12 = v3;
    [v9 _handleTask:v7 completion:v8];
  }
}

void sub_1001318A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v13 = 134218242;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      uint64_t v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ICDBackgroundTaskManager %p - scheduleTask - Task failed [%{public}@]", (uint8_t *)&v13, 0x16u);
    }

    [*(id *)(a1 + 32) _scheduleTask:*(void *)(a1 + 48) withStartTime:XPC_ACTIVITY_INTERVAL_1_HOUR];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v13 = 134218242;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      uint64_t v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ICDBackgroundTaskManager %p - scheduleTask - Task succeeded [%{public}@]", (uint8_t *)&v13, 0x16u);
    }

    [*(id *)(a1 + 32) _stopTask:*(void *)(a1 + 48)];
  }
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 56), 5))
  {
    id v10 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = 134218242;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      uint64_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "ICDBackgroundTaskManager %p - scheduleTask - Unable to force task termination [%{public}@]", (uint8_t *)&v13, 0x16u);
    }
  }
}

void sub_100131B10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100131BDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10013237C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) _pollingRefreshIntervalSecondsUsingBag:v5];
  id v8 = [*(id *)(a1 + 32) _pollingGracePeriodSecondsForRefreshInterval:v7];
  uint64_t v9 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134218496;
    uint64_t v15 = v10;
    __int16 v16 = 2048;
    id v17 = v7;
    __int16 v18 = 2048;
    id v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ICDBackgroundTaskManager %p - startPeriodicPolling - Setting timer to perform periodic poll for %llds (+/- %llds)", buf, 0x20u);
  }

  uint64_t v11 = [*(id *)(a1 + 32) _periodicPollingActivityCriteriaWithRefreshInterval:v7 gracePeriod:v8];
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100132564;
  handler[3] = &unk_1001BF1E8;
  objc_copyWeak(&v13, (id *)buf);
  xpc_activity_register("com.apple.itunescloud.ICDBackgroundTaskManager.periodic-poll-activity", v11, handler);
  [*(id *)(a1 + 40) endTransaction];
  objc_destroyWeak(&v13);
  objc_destroyWeak((id *)buf);
}

void sub_10013253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100132564(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  xpc_activity_state_t state = xpc_activity_get_state(v3);

  if (state != 2)
  {
    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      id v19 = WeakRetained;
      uint64_t v15 = "ICDBackgroundTaskManager %p - periodicPolling - Ignoring activity [State != Run]";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
    }
LABEL_10:

    goto LABEL_11;
  }
  if (WeakRetained)
  {
    id v6 = [WeakRetained accountManager];
    id v7 = [v6 state];
    id v8 = [v7 supportedConfigurations];
    id v9 = [v8 count];

    uint64_t v10 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 134217984;
        id v19 = WeakRetained;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ICDBackgroundTaskManager %p - periodicPolling - Performing periodic sync", buf, 0xCu);
      }

      uint64_t v12 = [WeakRetained handlerCoordinator];
      id v13 = [WeakRetained accountManager];
      uint64_t v14 = [v13 state];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_1001327B8;
      void v16[3] = &unk_1001BF1C0;
      id v17 = WeakRetained;
      [v12 enumerateHandlersForAccountState:v14 usingBlock:v16];

      uint64_t v10 = v17;
      goto LABEL_10;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 134217984;
      id v19 = WeakRetained;
      uint64_t v15 = "ICDBackgroundTaskManager %p - periodicPolling - Ignoring polling [No configurations]";
      goto LABEL_9;
    }
    goto LABEL_10;
  }
LABEL_11:
}

void sub_1001327B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  double v5[2] = sub_100132860;
  v5[3] = &unk_1001BF198;
  id v6 = *(id *)(a1 + 32);
  id v7 = v3;
  id v4 = v3;
  [v4 updateLibraryWithReason:4 completionHandler:v5];
}

void sub_100132860(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_create("com.apple.amp.itunescloudd", "BackgroundTasks");
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = (objc_class *)objc_opt_class();
      id v8 = NSStringFromClass(v7);
      uint64_t v9 = *(void *)(a1 + 40);
      int v17 = 134218754;
      uint64_t v18 = v6;
      __int16 v19 = 2112;
      id v20 = v8;
      __int16 v21 = 2048;
      uint64_t v22 = v9;
      __int16 v23 = 2114;
      id v24 = v3;
      uint64_t v10 = "ICDBackgroundTaskManager %p - periodicPolling - Failed to update %@ %p [error] - error=%{public}@";
      BOOL v11 = v5;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 42;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v17, v13);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = (objc_class *)objc_opt_class();
    id v8 = NSStringFromClass(v15);
    uint64_t v16 = *(void *)(a1 + 40);
    int v17 = 134218498;
    uint64_t v18 = v14;
    __int16 v19 = 2112;
    id v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v16;
    uint64_t v10 = "ICDBackgroundTaskManager %p - periodicPolling - Updated %@ %p [no error]";
    BOOL v11 = v5;
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    uint32_t v13 = 32;
    goto LABEL_6;
  }
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t BackgroundTaskAgentAddJob()
{
  return _BackgroundTaskAgentAddJob();
}

uint64_t BackgroundTaskAgentInit()
{
  return _BackgroundTaskAgentInit();
}

uint64_t BackgroundTaskAgentRemoveJob()
{
  return _BackgroundTaskAgentRemoveJob();
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return _CC_MD5_Final(md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return _CC_MD5_Init(c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return _CC_MD5_Update(c, data, len);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return _CC_SHA1_Final(md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return _CC_SHA1_Init(c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA1_Update(c, data, len);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return _CC_SHA512_Final(md, c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA512_Update(c, data, len);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return _CFBundleGetIdentifier(bundle);
}

CFTypeID CFBundleGetTypeID(void)
{
  return _CFBundleGetTypeID();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyKeyList(applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

uint64_t CPSetPowerAssertionWithIdentifier()
{
  return _CPSetPowerAssertionWithIdentifier();
}

uint64_t CPSharedResourcesDirectory()
{
  return _CPSharedResourcesDirectory();
}

uint64_t ICBundleIdentifierForSystemApplicationType()
{
  return _ICBundleIdentifierForSystemApplicationType();
}

uint64_t ICCloudClientCreateArtworkInfoDictionary()
{
  return _ICCloudClientCreateArtworkInfoDictionary();
}

uint64_t ICCloudClientGetStringForAddToLibraryBehavior()
{
  return _ICCloudClientGetStringForAddToLibraryBehavior();
}

uint64_t ICCloudClientGetStringForAddToPlaylistBehavior()
{
  return _ICCloudClientGetStringForAddToPlaylistBehavior();
}

uint64_t ICCloudClientGetStringForRequestReason()
{
  return _ICCloudClientGetStringForRequestReason();
}

uint64_t ICCloudServerSupportedServiceForName()
{
  return _ICCloudServerSupportedServiceForName();
}

uint64_t ICCloudServerSupportedServiceGetName()
{
  return _ICCloudServerSupportedServiceGetName();
}

uint64_t ICCloudServiceCapabilitiesGetDescription()
{
  return _ICCloudServiceCapabilitiesGetDescription();
}

uint64_t ICCreateLoggableValueForDSID()
{
  return _ICCreateLoggableValueForDSID();
}

uint64_t ICDAAPUtilitiesCreateData()
{
  return _ICDAAPUtilitiesCreateData();
}

uint64_t ICDAAPUtilitiesCreateDataForContainer()
{
  return _ICDAAPUtilitiesCreateDataForContainer();
}

uint64_t ICDAAPUtilitiesCreateDataForItemKindContainer()
{
  return _ICDAAPUtilitiesCreateDataForItemKindContainer();
}

uint64_t ICDAAPUtilitiesWriteContainer()
{
  return _ICDAAPUtilitiesWriteContainer();
}

uint64_t ICDAAPUtilitiesWriteProperty()
{
  return _ICDAAPUtilitiesWriteProperty();
}

uint64_t ICGetCloudDAAPClientPrefix()
{
  return _ICGetCloudDAAPClientPrefix();
}

uint64_t ICNSStringForICMediaContentTaste()
{
  return _ICNSStringForICMediaContentTaste();
}

uint64_t ICNSStringForICMediaContentTasteItem()
{
  return _ICNSStringForICMediaContentTasteItem();
}

uint64_t ICPlaybackPositionEntityIdentifierForProperties()
{
  return _ICPlaybackPositionEntityIdentifierForProperties();
}

uint64_t ICSiriPostDynamiteClientStateChangedNotification()
{
  return _ICSiriPostDynamiteClientStateChangedNotification();
}

uint64_t ICSystemApplicationIsInstalled()
{
  return _ICSystemApplicationIsInstalled();
}

uint64_t ITDBPlaylistLimitFromSmartPlaylistLimit()
{
  return _ITDBPlaylistLimitFromSmartPlaylistLimit();
}

uint64_t ITDBTrackOrderForTrackOrder()
{
  return _ITDBTrackOrderForTrackOrder();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t ML3DatabaseImportDataForDAAPFilePaths()
{
  return _ML3DatabaseImportDataForDAAPFilePaths();
}

uint64_t ML3DeleteAssetsAtPaths()
{
  return _ML3DeleteAssetsAtPaths();
}

uint64_t ML3OfflineHLSFileExtensions()
{
  return _ML3OfflineHLSFileExtensions();
}

uint64_t MRMediaRemoteClearDefaultSupportedCommandsForApp()
{
  return _MRMediaRemoteClearDefaultSupportedCommandsForApp();
}

uint64_t MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID()
{
  return _MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
}

uint64_t MSVArchivedDataWithRootObject()
{
  return _MSVArchivedDataWithRootObject();
}

uint64_t MSVBundleIDForAuditToken()
{
  return _MSVBundleIDForAuditToken();
}

uint64_t MSVCreateTemporaryFileHandle()
{
  return _MSVCreateTemporaryFileHandle();
}

uint64_t MSVDeviceIsAppleTV()
{
  return _MSVDeviceIsAppleTV();
}

uint64_t MSVDeviceIsAudioAccessory()
{
  return _MSVDeviceIsAudioAccessory();
}

uint64_t MSVDeviceIsWatch()
{
  return _MSVDeviceIsWatch();
}

uint64_t MSVDeviceOSIsInternalInstall()
{
  return _MSVDeviceOSIsInternalInstall();
}

uint64_t MSVDeviceSupportsEnhancedMusic()
{
  return _MSVDeviceSupportsEnhancedMusic();
}

uint64_t MSVDeviceSupportsExtendedColorDisplay()
{
  return _MSVDeviceSupportsExtendedColorDisplay();
}

uint64_t MSVDeviceSupportsMediaDownloads()
{
  return _MSVDeviceSupportsMediaDownloads();
}

uint64_t MSVDeviceSupportsMultipleLibraries()
{
  return _MSVDeviceSupportsMultipleLibraries();
}

uint64_t MSVDeviceSupportsSideLoadedMediaContent()
{
  return _MSVDeviceSupportsSideLoadedMediaContent();
}

uint64_t MSVGetMaximumScreenSize()
{
  return _MSVGetMaximumScreenSize();
}

uint64_t MSVGzipCompressData()
{
  return _MSVGzipCompressData();
}

uint64_t MSVGzipCompressFile()
{
  return _MSVGzipCompressFile();
}

uint64_t MSVHasherDigestDataBlocksFromURL()
{
  return _MSVHasherDigestDataBlocksFromURL();
}

uint64_t MSVHasherSharedSeed()
{
  return _MSVHasherSharedSeed();
}

uint64_t MSVImageUtilitiesCreateDataImageDestination()
{
  return _MSVImageUtilitiesCreateDataImageDestination();
}

uint64_t MSVImageUtilitiesCreateImageSource()
{
  return _MSVImageUtilitiesCreateImageSource();
}

uint64_t MSVImageUtilitiesMakeBoundingBoxSize()
{
  return _MSVImageUtilitiesMakeBoundingBoxSize();
}

uint64_t MSVImageUtilitiesResizeSourceImageToJPEGDestination()
{
  return _MSVImageUtilitiesResizeSourceImageToJPEGDestination();
}

uint64_t MSVLogAddStateHandler()
{
  return _MSVLogAddStateHandler();
}

uint64_t MSVLogRemoveStateHandler()
{
  return _MSVLogRemoveStateHandler();
}

uint64_t MSVMediaLoggingDirectory()
{
  return _MSVMediaLoggingDirectory();
}

uint64_t MSVMobileHomeDirectory()
{
  return _MSVMobileHomeDirectory();
}

uint64_t MSVNanoIDCreateTaggedPointer()
{
  return _MSVNanoIDCreateTaggedPointer();
}

uint64_t MSVPropertyListDataClasses()
{
  return _MSVPropertyListDataClasses();
}

uint64_t MSVTCCIdentityForAuditToken()
{
  return _MSVTCCIdentityForAuditToken();
}

uint64_t MSVTCCIdentityForCurrentProcess()
{
  return _MSVTCCIdentityForCurrentProcess();
}

uint64_t MSVUnarchivedObjectOfClasses()
{
  return _MSVUnarchivedObjectOfClasses();
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return _NSMapGet(table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t NSStringFromICFavoriteMediaEntityType()
{
  return _NSStringFromICFavoriteMediaEntityType();
}

uint64_t NSStringFromMLMediaType()
{
  return _NSStringFromMLMediaType();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteFloatField()
{
  return _PBDataWriterWriteFloatField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return _PBDataWriterWriteInt64Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t PBRepeatedFloatAdd()
{
  return _PBRepeatedFloatAdd();
}

uint64_t PBRepeatedFloatClear()
{
  return _PBRepeatedFloatClear();
}

uint64_t PBRepeatedFloatCopy()
{
  return _PBRepeatedFloatCopy();
}

uint64_t PBRepeatedFloatHash()
{
  return _PBRepeatedFloatHash();
}

uint64_t PBRepeatedFloatIsEqual()
{
  return _PBRepeatedFloatIsEqual();
}

uint64_t PBRepeatedFloatNSArray()
{
  return _PBRepeatedFloatNSArray();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t TCCAccessCheckAuditToken()
{
  return _TCCAccessCheckAuditToken();
}

uint64_t TCCAccessCopyInformation()
{
  return _TCCAccessCopyInformation();
}

uint64_t TCCAccessSetForBundleIdWithOptions()
{
  return _TCCAccessSetForBundleIdWithOptions();
}

uint64_t TCCExpirationCopyInformationForService()
{
  return _TCCExpirationCopyInformationForService();
}

uint64_t TCCExpirationResetService()
{
  return _TCCExpirationResetService();
}

uint64_t TCCExpirationResetServiceForBundleIdentifier()
{
  return _TCCExpirationResetServiceForBundleIdentifier();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _NSIsNSArray()
{
  return __NSIsNSArray();
}

uint64_t _NSIsNSDictionary()
{
  return __NSIsNSDictionary();
}

uint64_t _NSIsNSNumber()
{
  return __NSIsNSNumber();
}

uint64_t _NSIsNSString()
{
  return __NSIsNSString();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

uint64_t ct_green_tea_logger_create()
{
  return _ct_green_tea_logger_create();
}

uint64_t ct_green_tea_logger_destroy()
{
  return _ct_green_tea_logger_destroy();
}

int deflate(z_streamp strm, int flush)
{
  return _deflate(strm, flush);
}

int deflateEnd(z_streamp strm)
{
  return _deflateEnd(strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return _deflateInit2_(strm, level, method, windowBits, memLevel, strategy, version, stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_barrier(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

lldiv_t div(uint64_t __x, uint64_t __y)
{
  lldiv_t v4 = _div(__x, __y);
  reuint64_t m = v4.rem;
  uint64_t quot = v4.quot;
  result.reuint64_t m = rem;
  result.uint64_t quot = quot;
  return result;
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

long double exp2(long double __x)
{
  return _exp2(__x);
}

void free(void *a1)
{
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return _getCTGreenTeaOsLogHandle();
}

int inflate(z_streamp strm, int flush)
{
  return _inflate(strm, flush);
}

int inflateEnd(z_streamp strm)
{
  return _inflateEnd(strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return _inflateInit2_(strm, windowBits, version, stream_size);
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  ldiv_t v4 = _ldiv(a1, a2);
  reuint64_t m = v4.rem;
  uint64_t quot = v4.quot;
  result.reuint64_t m = rem;
  result.uint64_t quot = quot;
  return result;
}

lldiv_t lldiv(uint64_t a1, uint64_t a2)
{
  lldiv_t v4 = _lldiv(a1, a2);
  reuint64_t m = v4.rem;
  uint64_t quot = v4.quot;
  result.reuint64_t m = rem;
  result.uint64_t quot = quot;
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

void xpc_activity_unregister(const char *identifier)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return _xpc_array_get_count(xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return _xpc_array_get_string(xarray, index);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_array(xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_double(xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return _xpc_int64_get_value(xint);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_transaction_exit_clean()
{
  return _xpc_transaction_exit_clean();
}

id objc_msgSend_APNSToken(void *a1, const char *a2, ...)
{
  return _[a1 APNSToken];
}

id objc_msgSend_DSID(void *a1, const char *a2, ...)
{
  return _[a1 DSID];
}

id objc_msgSend_DSIDForUserIdentity_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "DSIDForUserIdentity:outError:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_MIMEType(void *a1, const char *a2, ...)
{
  return _[a1 MIMEType];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLAssetWithURL_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLAssetWithURL:options:");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_URLQueryAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 URLQueryAllowedCharacterSet];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLWithString_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:relativeToURL:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__DAAPMediaKindFromJaliscoSupportedMediaKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_DAAPMediaKindFromJaliscoSupportedMediaKind:");
}

id objc_msgSend__HTTPMethodStringForICDRequestMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_HTTPMethodStringForICDRequestMethod:");
}

id objc_msgSend__ICCloudServerSupportedServiceForXPCListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ICCloudServerSupportedServiceForXPCListener:");
}

id objc_msgSend__activeConfigurationsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeConfigurationsWithCompletion:");
}

id objc_msgSend__addAllStoreArtistIDsToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAllStoreArtistIDsToSet:");
}

id objc_msgSend__addLibraryOperation_priority_noLibraryHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addLibraryOperation:priority:noLibraryHandler:");
}

id objc_msgSend__addSpecificStoreArtistIDsToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addSpecificStoreArtistIDsToSet:");
}

id objc_msgSend__adjustMergePreferenceWithUserIdentityProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustMergePreferenceWithUserIdentityProperties:");
}

id objc_msgSend__adjustOperationQueueStatusForMediaDownloads(void *a1, const char *a2, ...)
{
  return _[a1 _adjustOperationQueueStatusForMediaDownloads];
}

id objc_msgSend__adjustedContentTasteForLibraryEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustedContentTasteForLibraryEndpoint:");
}

id objc_msgSend__artistHeroImageUpdateFinished(void *a1, const char *a2, ...)
{
  return _[a1 _artistHeroImageUpdateFinished];
}

id objc_msgSend__artworkColorAnalysisOperationForArtworkAsset_library_artwork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_artworkColorAnalysisOperationForArtworkAsset:library:artwork:");
}

id objc_msgSend__artworkURLForInfoDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_artworkURLForInfoDictionary:");
}

id objc_msgSend__authenticateAndStartInitialImportWithMergePreference_userIdentityProperties_enableReason_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateAndStartInitialImportWithMergePreference:userIdentityProperties:enableReason:withCompletionHandler:");
}

id objc_msgSend__bagKey(void *a1, const char *a2, ...)
{
  return _[a1 _bagKey];
}

id objc_msgSend__baseBtaJobForDeferredPush(void *a1, const char *a2, ...)
{
  return _[a1 _baseBtaJobForDeferredPush];
}

id objc_msgSend__baseBtaJobForPeriodicPollCellularDataAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baseBtaJobForPeriodicPollCellularDataAllowed:");
}

id objc_msgSend__baseRequestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baseRequestWithURL:");
}

id objc_msgSend__beginObservingCloudServiceStatus(void *a1, const char *a2, ...)
{
  return _[a1 _beginObservingCloudServiceStatus];
}

id objc_msgSend__bodyDataForCloudIDs_itemKind_useLongIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForCloudIDs:itemKind:useLongIDs:");
}

id objc_msgSend__bodyDataForContainerIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForContainerIDs:");
}

id objc_msgSend__bodyDataForContainerIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForContainerIDs:properties:");
}

id objc_msgSend__bodyDataForDatabaseRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForDatabaseRevision:");
}

id objc_msgSend__bodyDataForDatabaseRevision_adamID_sagaID_playlistGlobalID_referralAlbumAdamID_referralPlaylistGlobalID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForDatabaseRevision:adamID:sagaID:playlistGlobalID:referralAlbumAdamID:referralPlaylistGlobalID:");
}

id objc_msgSend__bodyDataForDatabaseRevision_addToLibraryBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForDatabaseRevision:addToLibraryBehavior:");
}

id objc_msgSend__bodyDataForDatabaseRevision_addToPlaylistBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForDatabaseRevision:addToPlaylistBehavior:");
}

id objc_msgSend__bodyDataForDatabaseRevision_containerID_trackList_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForDatabaseRevision:containerID:trackList:properties:");
}

id objc_msgSend__bodyDataForDatabaseRevision_opaqueID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForDatabaseRevision:opaqueID:");
}

id objc_msgSend__bodyDataForDatabaseRevision_playlistProperties_trackList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForDatabaseRevision:playlistProperties:trackList:");
}

id objc_msgSend__bodyDataForItemIDs_properties_useLongIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForItemIDs:properties:useLongIDs:");
}

id objc_msgSend__bodyDataForItemIDs_useLongIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForItemIDs:useLongIDs:");
}

id objc_msgSend__bodyDataForItemKind_cloudLibraryIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForItemKind:cloudLibraryIDs:properties:");
}

id objc_msgSend__bodyDataForMetadataFilter_queryFilter_purchaseTokens_includeHiddenItems_includePreorders_paginationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForMetadataFilter:queryFilter:purchaseTokens:includeHiddenItems:includePreorders:paginationToken:");
}

id objc_msgSend__bodyDataForPlaylistName_seedItemIDs_itemIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForPlaylistName:seedItemIDs:itemIDs:");
}

id objc_msgSend__bodyDataForSagaIDs_itemKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataForSagaIDs:itemKind:");
}

id objc_msgSend__bodyDataWithAdditionalBodyFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataWithAdditionalBodyFields:");
}

id objc_msgSend__bodyDataWithStoreID_globalPlaylistID_albumCloudLibraryID_artistCloudLibraryID_time_serverDatabaseRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyDataWithStoreID:globalPlaylistID:albumCloudLibraryID:artistCloudLibraryID:time:serverDatabaseRevision:");
}

id objc_msgSend__buildStateChange(void *a1, const char *a2, ...)
{
  return _[a1 _buildStateChange];
}

id objc_msgSend__buildUserStateFromUserIdentity_storeRequestContext_tokensDictionary_ignoreResponseCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildUserStateFromUserIdentity:storeRequestContext:tokensDictionary:ignoreResponseCache:completion:");
}

id objc_msgSend__cacheContainerPath(void *a1, const char *a2, ...)
{
  return _[a1 _cacheContainerPath];
}

id objc_msgSend__cacheDirectoryPath(void *a1, const char *a2, ...)
{
  return _[a1 _cacheDirectoryPath];
}

id objc_msgSend__cacheMatchedRecommendations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheMatchedRecommendations:");
}

id objc_msgSend__cacheResponse_forContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheResponse:forContext:");
}

id objc_msgSend__canCompleteStartupSequence(void *a1, const char *a2, ...)
{
  return _[a1 _canCompleteStartupSequence];
}

id objc_msgSend__canEnableCloudMusicLibraryOnPlatformsWithSideLoadedMediaContentWithProperties_includeLocalContentCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canEnableCloudMusicLibraryOnPlatformsWithSideLoadedMediaContentWithProperties:includeLocalContentCheck:");
}

id objc_msgSend__canRunOperationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canRunOperationWithCompletionHandler:");
}

id objc_msgSend__cancelAllContentTasteRequestHandlers(void *a1, const char *a2, ...)
{
  return _[a1 _cancelAllContentTasteRequestHandlers];
}

id objc_msgSend__cellularDataAllowedForJaliscoMedia(void *a1, const char *a2, ...)
{
  return _[a1 _cellularDataAllowedForJaliscoMedia];
}

id objc_msgSend__cellularDataAllowedForMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellularDataAllowedForMediaType:");
}

id objc_msgSend__chapterArtworkURLsForData_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chapterArtworkURLsForData:baseURL:");
}

id objc_msgSend__chapterDataFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chapterDataFromURL:");
}

id objc_msgSend__checkForRecentRevocations(void *a1, const char *a2, ...)
{
  return _[a1 _checkForRecentRevocations];
}

id objc_msgSend__claimSingleWriterStatus(void *a1, const char *a2, ...)
{
  return _[a1 _claimSingleWriterStatus];
}

id objc_msgSend__cleanupExpiredApplicationMessages(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupExpiredApplicationMessages];
}

id objc_msgSend__clearAllCloudIDs(void *a1, const char *a2, ...)
{
  return _[a1 _clearAllCloudIDs];
}

id objc_msgSend__clearCacheForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearCacheForContext:");
}

id objc_msgSend__clearMLModelCache(void *a1, const char *a2, ...)
{
  return _[a1 _clearMLModelCache];
}

id objc_msgSend__clearRecommendationsData(void *a1, const char *a2, ...)
{
  return _[a1 _clearRecommendationsData];
}

id objc_msgSend__clientInfoForCloudDaemonOriginatedMusicKitRequestWithRequestingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientInfoForCloudDaemonOriginatedMusicKitRequestWithRequestingBundleIdentifier:");
}

id objc_msgSend__clientInfoForDeveloperTokenRequestWithRequestingApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientInfoForDeveloperTokenRequestWithRequestingApplicationBundleIdentifier:");
}

id objc_msgSend__clientInfoForUserTokenRequestWithRequestingApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientInfoForUserTokenRequestWithRequestingApplicationBundleIdentifier:");
}

id objc_msgSend__cloudSourcesToRemoveForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudSourcesToRemoveForReason:");
}

id objc_msgSend__completeStartupSequenceIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _completeStartupSequenceIfNeeded];
}

id objc_msgSend__computeLibraryRecommendationWithResponse_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeLibraryRecommendationWithResponse:completionHandler:");
}

id objc_msgSend__configurationForAccount_baseConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurationForAccount:baseConfiguration:");
}

id objc_msgSend__configurationsToActivateForChange_initialSetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurationsToActivateForChange:initialSetup:");
}

id objc_msgSend__configurationsToRemoveForChange_initialSetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurationsToRemoveForChange:initialSetup:");
}

id objc_msgSend__connectToLibraryWithCompletionHandler_allowRetry_forceBagReload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToLibraryWithCompletionHandler:allowRetry:forceBagReload:");
}

id objc_msgSend__connectionClientIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _connectionClientIdentity];
}

id objc_msgSend__containerPidsMatchingRequestGlobalPlaylistID(void *a1, const char *a2, ...)
{
  return _[a1 _containerPidsMatchingRequestGlobalPlaylistID];
}

id objc_msgSend__contentTasteRequestHandlerForConfiguration_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentTasteRequestHandlerForConfiguration:outError:");
}

id objc_msgSend__contentTasteUpdateResponseWithServerResponse_expirationDate_revisionID_isCachedResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentTasteUpdateResponseWithServerResponse:expirationDate:revisionID:isCachedResponse:");
}

id objc_msgSend__continueConnectingToLibraryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueConnectingToLibraryWithCompletionHandler:");
}

id objc_msgSend__createAPNSConnectionWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAPNSConnectionWithCompletion:");
}

id objc_msgSend__createApplicationMessagesForResult_artistNewContentResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createApplicationMessagesForResult:artistNewContentResponse:completion:");
}

id objc_msgSend__createBag(void *a1, const char *a2, ...)
{
  return _[a1 _createBag];
}

id objc_msgSend__createLocalNotificationDictionaryForRecommendationResult_storePlatformMetadata_recommendationID_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLocalNotificationDictionaryForRecommendationResult:storePlatformMetadata:recommendationID:identifier:");
}

id objc_msgSend__criteriaDictionaryWithPostFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_criteriaDictionaryWithPostFrequency:");
}

id objc_msgSend__currentDatabaseRevision(void *a1, const char *a2, ...)
{
  return _[a1 _currentDatabaseRevision];
}

id objc_msgSend__deauthenticateUnsupportedConfigurationsFromChange_initialSetup_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deauthenticateUnsupportedConfigurationsFromChange:initialSetup:completion:");
}

id objc_msgSend__deferredPushActivityCriteriaForTask_startTime_gracePeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deferredPushActivityCriteriaForTask:startTime:gracePeriod:");
}

id objc_msgSend__deferredPushGracePeriodSeconds(void *a1, const char *a2, ...)
{
  return _[a1 _deferredPushGracePeriodSeconds];
}

id objc_msgSend__deserializeResponseDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deserializeResponseDictionary:");
}

id objc_msgSend__determineResultsURLWhenReadyWithUpdateID_retryTimeout_responseStatusCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineResultsURLWhenReadyWithUpdateID:retryTimeout:responseStatusCode:");
}

id objc_msgSend__didCompleteAllCapabilitiesAsynchronousRequests(void *a1, const char *a2, ...)
{
  return _[a1 _didCompleteAllCapabilitiesAsynchronousRequests];
}

id objc_msgSend__didCompletePrivacyPromptOperation_withStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didCompletePrivacyPromptOperation:withStatus:error:");
}

id objc_msgSend__didCompleteWithPrivacyPromptStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didCompleteWithPrivacyPromptStatus:error:");
}

id objc_msgSend__didReceiveDarwinNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didReceiveDarwinNotification:");
}

id objc_msgSend__didReceiveDistributedNotification_withStreamEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didReceiveDistributedNotification:withStreamEvent:");
}

id objc_msgSend__didReceiveTelephonyCenterNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didReceiveTelephonyCenterNotification:");
}

id objc_msgSend__dispatchCompletionHandler_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchCompletionHandler:withError:");
}

id objc_msgSend__displayNotificationForBuilder_withReplyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayNotificationForBuilder:withReplyBlock:");
}

id objc_msgSend__downloadRequestsFromURL_uploadResponsesURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_downloadRequestsFromURL:uploadResponsesURL:");
}

id objc_msgSend__endObservingCloudServiceStatus(void *a1, const char *a2, ...)
{
  return _[a1 _endObservingCloudServiceStatus];
}

id objc_msgSend__enqueueCloudUpdateLibraryOperationForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueCloudUpdateLibraryOperationForReason:");
}

id objc_msgSend__enqueueFailedOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueFailedOperation:");
}

id objc_msgSend__enqueueSubscriptionStatusCheckForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueSubscriptionStatusCheckForReason:");
}

id objc_msgSend__ensureConnectionWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureConnectionWithCompletionHandler:");
}

id objc_msgSend__ensureDeviceIsRegistered(void *a1, const char *a2, ...)
{
  return _[a1 _ensureDeviceIsRegistered];
}

id objc_msgSend__ensureMusicSubscriptionKeysAreAvailableForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureMusicSubscriptionKeysAreAvailableForConfiguration:");
}

id objc_msgSend__ensureSubscriptionInformationIsUpToDateForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureSubscriptionInformationIsUpToDateForConfiguration:");
}

id objc_msgSend__ensureURLResolutionCacheFileExists(void *a1, const char *a2, ...)
{
  return _[a1 _ensureURLResolutionCacheFileExists];
}

id objc_msgSend__errorIsRecoverable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorIsRecoverable:");
}

id objc_msgSend__executeBlockForAllOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeBlockForAllOperations:");
}

id objc_msgSend__fetchAccountsWithForceRefresh_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAccountsWithForceRefresh:completion:");
}

id objc_msgSend__fetchAccountsWithForceRefresh_ignoreResponseCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAccountsWithForceRefresh:ignoreResponseCache:completion:");
}

id objc_msgSend__fetchAndCacheLatestAllArtistImagesMap(void *a1, const char *a2, ...)
{
  return _[a1 _fetchAndCacheLatestAllArtistImagesMap];
}

id objc_msgSend__fetchRecommendationsSetAndModelWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecommendationsSetAndModelWithCompletionHandler:");
}

id objc_msgSend__fetchSharedKeysForcingRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSharedKeysForcingRefresh:");
}

id objc_msgSend__fetchUpdatedAlbumsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedAlbumsWithCompletion:");
}

id objc_msgSend__fetchUpdatedAlbumsWithPaginationToken_responseFileURLs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedAlbumsWithPaginationToken:responseFileURLs:completion:");
}

id objc_msgSend__fetchUpdatedArtistsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedArtistsWithCompletion:");
}

id objc_msgSend__fetchUpdatedArtistsWithPaginationToken_responseFileURLs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedArtistsWithPaginationToken:responseFileURLs:completion:");
}

id objc_msgSend__fetchUpdatedPlaylistsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedPlaylistsWithCompletion:");
}

id objc_msgSend__fetchUpdatedTracksWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedTracksWithCompletion:");
}

id objc_msgSend__fetchUpdatedTracksWithPaginationToken_responseFileURLs_currentIncludesBookmarkable_cloudIDToLyricsTokenMap_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedTracksWithPaginationToken:responseFileURLs:currentIncludesBookmarkable:cloudIDToLyricsTokenMap:completion:");
}

id objc_msgSend__fetchUpdatedUserProfilesForUserStates_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpdatedUserProfilesForUserStates:completion:");
}

id objc_msgSend__finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishWithError:");
}

id objc_msgSend__finishWithResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishWithResponse:error:");
}

id objc_msgSend__getCachedResponseForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCachedResponseForContext:");
}

id objc_msgSend__getCurrentSubscriptionStatusForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCurrentSubscriptionStatusForReason:");
}

id objc_msgSend__getNetworkConstraints(void *a1, const char *a2, ...)
{
  return _[a1 _getNetworkConstraints];
}

id objc_msgSend__getPBData_includedContentTasteItemUpdates_fromContentTasteUpdateItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getPBData:includedContentTasteItemUpdates:fromContentTasteUpdateItems:");
}

id objc_msgSend__getStoreAdamIDLikedState_playlistGlobalIDLikedState_artistStoreAdamIDLikedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getStoreAdamIDLikedState:playlistGlobalIDLikedState:artistStoreAdamIDLikedState:");
}

id objc_msgSend__getTokenStatusesForDSIDs_forceRefresh_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getTokenStatusesForDSIDs:forceRefresh:completion:");
}

id objc_msgSend__getUserIdentitiesfromDefaultStore(void *a1, const char *a2, ...)
{
  return _[a1 _getUserIdentitiesfromDefaultStore];
}

id objc_msgSend__getUserStateFromIdentity_tokensDictionary_ignoreResponseCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getUserStateFromIdentity:tokensDictionary:ignoreResponseCache:completion:");
}

id objc_msgSend__handleApplicationRegistration_notificationName_streamEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleApplicationRegistration:notificationName:streamEvent:");
}

id objc_msgSend__handleApplicationRegistrationNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleApplicationRegistrationNotification:");
}

id objc_msgSend__handleClientConnectionInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleClientConnectionInterrupted:");
}

id objc_msgSend__handleClientConnectionInvalidated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleClientConnectionInvalidated:");
}

id objc_msgSend__handleClientConnectionSevered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleClientConnectionSevered:");
}

id objc_msgSend__handleCloudLibraryUpdateOperationFinishedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCloudLibraryUpdateOperationFinishedWithError:");
}

id objc_msgSend__handleFamilyCircleChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handleFamilyCircleChangedNotification];
}

id objc_msgSend__handleFamilyContentDeletionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFamilyContentDeletionEvent:");
}

id objc_msgSend__handleFamilyContentDeletionNotification_streamEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFamilyContentDeletionNotification:streamEvent:");
}

id objc_msgSend__handleFlushPlayActivityEvents(void *a1, const char *a2, ...)
{
  return _[a1 _handleFlushPlayActivityEvents];
}

id objc_msgSend__handleITunesStorePushMessage_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleITunesStorePushMessage:withCompletionHandler:");
}

id objc_msgSend__handleInAppMessagesUpdatedPushMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleInAppMessagesUpdatedPushMessage:");
}

id objc_msgSend__handleJaliscoDeferredPushUpdateTask_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleJaliscoDeferredPushUpdateTask:completion:");
}

id objc_msgSend__handleJaliscoPushMessage_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleJaliscoPushMessage:withCompletionHandler:");
}

id objc_msgSend__handleJobNamed_satisfied_invalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleJobNamed:satisfied:invalid:");
}

id objc_msgSend__handleLibraryEditOperationCompletionUpdatingLibrary_andSubscribedPlaylist_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLibraryEditOperationCompletionUpdatingLibrary:andSubscribedPlaylist:completion:");
}

id objc_msgSend__handleMusicEngagementPushMessage_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMusicEngagementPushMessage:withCompletionHandler:");
}

id objc_msgSend__handleMusicSocialPushMessage_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMusicSocialPushMessage:withCompletionHandler:");
}

id objc_msgSend__handlePlayActivityFlushInternalTestRequestNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handlePlayActivityFlushInternalTestRequestNotification];
}

id objc_msgSend__handlePrivacyAcknowledgementErrorWithMessage_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePrivacyAcknowledgementErrorWithMessage:underlyingError:");
}

id objc_msgSend__handleRecommendationsResponseModel_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRecommendationsResponseModel:completion:");
}

id objc_msgSend__handleRemoteAlertActionWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRemoteAlertActionWithResult:");
}

id objc_msgSend__handleSagaAuthentication_finishedForReason_explicitUserAction_shouldStartInitialImport_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSagaAuthentication:finishedForReason:explicitUserAction:shouldStartInitialImport:completionHandler:");
}

id objc_msgSend__handleSagaDeferredPushUpdateTask_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSagaDeferredPushUpdateTask:completion:");
}

id objc_msgSend__handleSagaPushMessage_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSagaPushMessage:withCompletionHandler:");
}

id objc_msgSend__handleStoreBookkeeperPushMessage_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStoreBookkeeperPushMessage:withCompletionHandler:");
}

id objc_msgSend__handleTask_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTask:completion:");
}

id objc_msgSend__handleUpdatedBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUpdatedBag:");
}

id objc_msgSend__handleUpdatedSubscriptionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUpdatedSubscriptionStatus:");
}

id objc_msgSend__handleUserIdentityStoreDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserIdentityStoreDidChangeNotification:");
}

id objc_msgSend__hasValidUserIdentity_forSourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasValidUserIdentity:forSourceType:");
}

id objc_msgSend__homeSharingPrefsNumberForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeSharingPrefsNumberForKey:");
}

id objc_msgSend__icCloudSourceToMLCloudSourceMap(void *a1, const char *a2, ...)
{
  return _[a1 _icCloudSourceToMLCloudSourceMap];
}

id objc_msgSend__icCloudSourceToMLCloudSourceMapDescription(void *a1, const char *a2, ...)
{
  return _[a1 _icCloudSourceToMLCloudSourceMapDescription];
}

id objc_msgSend__identifiersOfApplicationsWithExpiredAccessToMediaLibrary(void *a1, const char *a2, ...)
{
  return _[a1 _identifiersOfApplicationsWithExpiredAccessToMediaLibrary];
}

id objc_msgSend__identifiersOfApplicationsWithGrantedAccessToMediaLibrary(void *a1, const char *a2, ...)
{
  return _[a1 _identifiersOfApplicationsWithGrantedAccessToMediaLibrary];
}

id objc_msgSend__imageURLFromArtworkInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageURLFromArtworkInfo:");
}

id objc_msgSend__importAllItemArtworkWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importAllItemArtworkWithClientIdentity:");
}

id objc_msgSend__importDataFromResponseFileURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importDataFromResponseFileURLs:");
}

id objc_msgSend__importLyricsWithLyricsTokenMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importLyricsWithLyricsTokenMap:");
}

id objc_msgSend__importOriginalContainerArtworkWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importOriginalContainerArtworkWithClientIdentity:");
}

id objc_msgSend__importOriginalItemArtworkWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importOriginalItemArtworkWithClientIdentity:");
}

id objc_msgSend__importOriginalScreenshotsWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importOriginalScreenshotsWithClientIdentity:");
}

id objc_msgSend__importTracksFromRevision_toRevision_withItemsResponse_clientIdentity_itemsFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importTracksFromRevision:toRevision:withItemsResponse:clientIdentity:itemsFiles:");
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _[a1 _init];
}

id objc_msgSend__initWithAccounts_activeAccount_baseConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithAccounts:activeAccount:baseConfiguration:");
}

id objc_msgSend__initWithConfiguration_clientIdentity_persistentID_storeID_globalPlaylistID_albumCloudLibraryID_artistCloudLibraryID_entityType_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithConfiguration:clientIdentity:persistentID:storeID:globalPlaylistID:albumCloudLibraryID:artistCloudLibraryID:entityType:time:");
}

id objc_msgSend__initWithInitialState_finalState_computation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithInitialState:finalState:computation:");
}

id objc_msgSend__initializeAncillaryServices(void *a1, const char *a2, ...)
{
  return _[a1 _initializeAncillaryServices];
}

id objc_msgSend__initializeBTAHandlers(void *a1, const char *a2, ...)
{
  return _[a1 _initializeBTAHandlers];
}

id objc_msgSend__initializeMappings(void *a1, const char *a2, ...)
{
  return _[a1 _initializeMappings];
}

id objc_msgSend__initializeSocialFeaturesAvailabilityIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _initializeSocialFeaturesAvailabilityIfNeeded];
}

id objc_msgSend__initiateArtworkUpload(void *a1, const char *a2, ...)
{
  return _[a1 _initiateArtworkUpload];
}

id objc_msgSend__isClientAllowedToRequestCapabilitiesForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isClientAllowedToRequestCapabilitiesForConnection:");
}

id objc_msgSend__isClientAllowedToRequestRestrictedInformationForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isClientAllowedToRequestRestrictedInformationForConnection:");
}

id objc_msgSend__isEnabledWithURLBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEnabledWithURLBag:");
}

id objc_msgSend__isNativeMusicAppInstalled(void *a1, const char *a2, ...)
{
  return _[a1 _isNativeMusicAppInstalled];
}

id objc_msgSend__isSupportedJaliscoMediaKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSupportedJaliscoMediaKind:");
}

id objc_msgSend__isValidTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidTimeInterval:");
}

id objc_msgSend__keyValueStoreItemIdentifierForItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyValueStoreItemIdentifierForItem:");
}

id objc_msgSend__kvsEntityWithKVSKey_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_kvsEntityWithKVSKey:domain:");
}

id objc_msgSend__latestAllArtistImagesMap(void *a1, const char *a2, ...)
{
  return _[a1 _latestAllArtistImagesMap];
}

id objc_msgSend__library(void *a1, const char *a2, ...)
{
  return _[a1 _library];
}

id objc_msgSend__locked_userStatesChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_userStatesChanged:");
}

id objc_msgSend__managedHandlerClasses(void *a1, const char *a2, ...)
{
  return _[a1 _managedHandlerClasses];
}

id objc_msgSend__mediaContentTasteCacheFilePathForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaContentTasteCacheFilePathForAccount:");
}

id objc_msgSend__migrateToLatestUserVersionForConfigurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateToLatestUserVersionForConfigurations:");
}

id objc_msgSend__mlRemoveSourceAttributeFromICRemoveSource(void *a1, const char *a2, ...)
{
  return _[a1 _mlRemoveSourceAttributeFromICRemoveSource];
}

id objc_msgSend__nextEvaluateSyncRulesThrottleOperationTimeKey(void *a1, const char *a2, ...)
{
  return _[a1 _nextEvaluateSyncRulesThrottleOperationTimeKey];
}

id objc_msgSend__nextJaliscoMediaPollTimeKey(void *a1, const char *a2, ...)
{
  return _[a1 _nextJaliscoMediaPollTimeKey];
}

id objc_msgSend__notifyObserversForActiveUserIdentityChanged(void *a1, const char *a2, ...)
{
  return _[a1 _notifyObserversForActiveUserIdentityChanged];
}

id objc_msgSend__notifyServerStateUpdatedIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyServerStateUpdatedIfNeeded:");
}

id objc_msgSend__onQueue_addSyncBlockWithIdentifier_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_addSyncBlockWithIdentifier:block:");
}

id objc_msgSend__onQueue_retryPendingUpdateAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_retryPendingUpdateAttempt:");
}

id objc_msgSend__onQueue_scheduleBlockWithIdentifier_isCheckpoint_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_scheduleBlockWithIdentifier:isCheckpoint:block:");
}

id objc_msgSend__onQueue_sendRequest_withInternalResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_sendRequest:withInternalResponseHandler:");
}

id objc_msgSend__onQueue_setupRetrySourceForAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_setupRetrySourceForAttempt:");
}

id objc_msgSend__onQueue_teardownRetrySource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_teardownRetrySource");
}

id objc_msgSend__onboardingKitPrivacyIdentifierForPrivacyIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onboardingKitPrivacyIdentifierForPrivacyIdentifier:");
}

id objc_msgSend__optInMessageContentForPriorityMessageContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_optInMessageContentForPriorityMessageContent:");
}

id objc_msgSend__optInMessageForPriorityMessage_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_optInMessageForPriorityMessage:completion:");
}

id objc_msgSend__parseAuthorizedAccountTokenWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseAuthorizedAccountTokenWithBytes:length:");
}

id objc_msgSend__parseBrowseListingWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseBrowseListingWithBytes:length:");
}

id objc_msgSend__parseBulkCloudArtworkInfoResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseBulkCloudArtworkInfoResponseWithBytes:length:");
}

id objc_msgSend__parseBulkCloudLyricsInfoResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseBulkCloudLyricsInfoResponseWithBytes:length:");
}

id objc_msgSend__parseCloudArtworkInfoResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseCloudArtworkInfoResponseWithBytes:length:");
}

id objc_msgSend__parseCloudLyricsInfoResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseCloudLyricsInfoResponseWithBytes:length:");
}

id objc_msgSend__parseControlInterfacesResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseControlInterfacesResponseWithBytes:length:");
}

id objc_msgSend__parseControlPromptResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseControlPromptResponseWithBytes:length:");
}

id objc_msgSend__parseDeletedIDListingWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseDeletedIDListingWithBytes:length:");
}

id objc_msgSend__parseDictionaryCollectionWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseDictionaryCollectionWithBytes:length:");
}

id objc_msgSend__parseEditCommandResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseEditCommandResponseWithBytes:length:");
}

id objc_msgSend__parseErrorResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseErrorResponseWithBytes:length:");
}

id objc_msgSend__parseItemIDArrayWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseItemIDArrayWithBytes:length:");
}

id objc_msgSend__parseItemPropertyCountWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseItemPropertyCountWithBytes:length:");
}

id objc_msgSend__parseItemsResponseWithBytes_length_usingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseItemsResponseWithBytes:length:usingHandler:");
}

id objc_msgSend__parseListingCollectionWithBytes_length_usingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseListingCollectionWithBytes:length:usingHandler:");
}

id objc_msgSend__parseListingItemWithBytes_length_usingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseListingItemWithBytes:length:usingHandler:");
}

id objc_msgSend__parseLoginResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseLoginResponseWithBytes:length:");
}

id objc_msgSend__parsePlayStatusResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parsePlayStatusResponseWithBytes:length:");
}

id objc_msgSend__parseResponseCode_bytes_length_usingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseResponseCode:bytes:length:usingHandler:");
}

id objc_msgSend__parseResponseData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseResponseData:completion:");
}

id objc_msgSend__parseUpdateResponseWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseUpdateResponseWithBytes:length:");
}

id objc_msgSend__parseUpdateTypeWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseUpdateTypeWithBytes:length:");
}

id objc_msgSend__pendingChanges(void *a1, const char *a2, ...)
{
  return _[a1 _pendingChanges];
}

id objc_msgSend__performInitialJaliscoImportWithClientIdentity_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performInitialJaliscoImportWithClientIdentity:completion:");
}

id objc_msgSend__performInitialSagaImportWithClientIdentity_allowingNoisyAuthPrompt_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performInitialSagaImportWithClientIdentity:allowingNoisyAuthPrompt:completionHandler:");
}

id objc_msgSend__performJaliscoImportWithClientIdentity_byAddingMediaKind_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performJaliscoImportWithClientIdentity:byAddingMediaKind:completionHandler:");
}

id objc_msgSend__performMusicKitRequestWithURL_storeRequestContext_ignoreCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performMusicKitRequestWithURL:storeRequestContext:ignoreCache:completion:");
}

id objc_msgSend__performMusicUserProfileRequestWithUserProfileContext_ignoreCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performMusicUserProfileRequestWithUserProfileContext:ignoreCache:completion:");
}

id objc_msgSend__performNextItemsPageRequestWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performNextItemsPageRequestWithCompletion:");
}

id objc_msgSend__performNotificationSyncForLibraryWithUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performNotificationSyncForLibraryWithUID:");
}

id objc_msgSend__performPendingOperations(void *a1, const char *a2, ...)
{
  return _[a1 _performPendingOperations];
}

id objc_msgSend__performPeriodicSubscriptionTasks(void *a1, const char *a2, ...)
{
  return _[a1 _performPeriodicSubscriptionTasks];
}

id objc_msgSend__performRecommendationsRequest(void *a1, const char *a2, ...)
{
  return _[a1 _performRecommendationsRequest];
}

id objc_msgSend__performRecommendationsUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _performRecommendationsUpdate];
}

id objc_msgSend__performSyncWithBodyData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSyncWithBodyData:completion:");
}

id objc_msgSend__performSyncWithSyncAnchor_itemsToSync_conflictDetectionType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSyncWithSyncAnchor:itemsToSync:conflictDetectionType:completion:");
}

id objc_msgSend__performTokenRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTokenRequest:completionHandler:");
}

id objc_msgSend__periodicPollingActivityCriteriaWithRefreshInterval_gracePeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_periodicPollingActivityCriteriaWithRefreshInterval:gracePeriod:");
}

id objc_msgSend__pollingGracePeriodSecondsForRefreshInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pollingGracePeriodSecondsForRefreshInterval:");
}

id objc_msgSend__pollingRefreshIntervalSecondsUsingBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pollingRefreshIntervalSecondsUsingBag:");
}

id objc_msgSend__populateMetadataValues_fromDataSourceTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateMetadataValues:fromDataSourceTrack:");
}

id objc_msgSend__postContentTasteChanges_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postContentTasteChanges:withCompletionHandler:");
}

id objc_msgSend__postContentTasteChangesForPendingItems(void *a1, const char *a2, ...)
{
  return _[a1 _postContentTasteChangesForPendingItems];
}

id objc_msgSend__postLibraryUpdateProgressChangedForLibraryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postLibraryUpdateProgressChangedForLibraryType:");
}

id objc_msgSend__postPendingContentTasteChangesByAddingChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postPendingContentTasteChangesByAddingChange:completionHandler:");
}

id objc_msgSend__precacheHomeProperties(void *a1, const char *a2, ...)
{
  return _[a1 _precacheHomeProperties];
}

id objc_msgSend__prepareArchiveWithContentTasteReponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareArchiveWithContentTasteReponse:");
}

id objc_msgSend__prepareCachedResponseFromArchiveAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareCachedResponseFromArchiveAtPath:");
}

id objc_msgSend__prepareCachedResponseFromResponse_byAddingResponseTimeIntervalKey_withResponseTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareCachedResponseFromResponse:byAddingResponseTimeIntervalKey:withResponseTimeInterval:");
}

id objc_msgSend__prepareContentTasteResponse_withContentTasteItems_fromCachedContentTasteResponseItems_includedContentTasteItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareContentTasteResponse:withContentTasteItems:fromCachedContentTasteResponseItems:includedContentTasteItems:");
}

id objc_msgSend__prepareLibraryForInitialUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _prepareLibraryForInitialUpdate];
}

id objc_msgSend__prepareLibraryLoadErrorWithJaliscoError_sagaError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareLibraryLoadErrorWithJaliscoError:sagaError:");
}

id objc_msgSend__preprocessURLResolutionCacheDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preprocessURLResolutionCacheDictionary:");
}

id objc_msgSend__processActiveConfigurationChange_initialSetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processActiveConfigurationChange:initialSetup:");
}

id objc_msgSend__processItemsPageResponse_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processItemsPageResponse:withCompletion:");
}

id objc_msgSend__processSupportedConfigurationsChange_initialSetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSupportedConfigurationsChange:initialSetup:");
}

id objc_msgSend__queryFilterEncodedStringForDAAPNameString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryFilterEncodedStringForDAAPNameString:");
}

id objc_msgSend__queryFilterString(void *a1, const char *a2, ...)
{
  return _[a1 _queryFilterString];
}

id objc_msgSend__queryForTracksNeedingPushWithEntityRevisionAnchor_orderingTerms_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryForTracksNeedingPushWithEntityRevisionAnchor:orderingTerms:");
}

id objc_msgSend__recomputeInUsersLibraryForTrackPids_resetFavoriteState_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recomputeInUsersLibraryForTrackPids:resetFavoriteState:usingConnection:");
}

id objc_msgSend__refreshCapabilitiesWithPrivacyAcknowledgementPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshCapabilitiesWithPrivacyAcknowledgementPolicy:");
}

id objc_msgSend__refreshCloudServiceStatus(void *a1, const char *a2, ...)
{
  return _[a1 _refreshCloudServiceStatus];
}

id objc_msgSend__refreshStorefrontCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 _refreshStorefrontCountryCode];
}

id objc_msgSend__refreshStorefrontIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _refreshStorefrontIdentifier];
}

id objc_msgSend__registerAPNSToken_usingRequestContext_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerAPNSToken:usingRequestContext:withCompletion:");
}

id objc_msgSend__registerDeviceAndPerformInitialImportWithUserIdentityProperties_cloudLibraryEnableReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerDeviceAndPerformInitialImportWithUserIdentityProperties:cloudLibraryEnableReason:completionHandler:");
}

id objc_msgSend__registerFailureToRevokeMusicUserTokensForApplicationIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerFailureToRevokeMusicUserTokensForApplicationIdentifier:error:");
}

id objc_msgSend__registerFailureToRevokeMusicUserTokensForApplicationsWithIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerFailureToRevokeMusicUserTokensForApplicationsWithIdentifiers:error:");
}

id objc_msgSend__registerMediaKinds_usingRequestContext_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerMediaKinds:usingRequestContext:withCompletion:");
}

id objc_msgSend__reloadSubscriptionStatusAndEnableCloudMusicLibraryWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadSubscriptionStatusAndEnableCloudMusicLibraryWithReason:completionHandler:");
}

id objc_msgSend__removeCloudSourcesDescription(void *a1, const char *a2, ...)
{
  return _[a1 _removeCloudSourcesDescription];
}

id objc_msgSend__removeCloudSourcesForReason_withClientIdentity_byDisablingActiveLockerAccount_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeCloudSourcesForReason:withClientIdentity:byDisablingActiveLockerAccount:completionHandler:");
}

id objc_msgSend__removeUnavailableSubscriptionAssetsInLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeUnavailableSubscriptionAssetsInLibrary:");
}

id objc_msgSend__requestBagWithAsynchronousRequestsGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestBagWithAsynchronousRequestsGroup:");
}

id objc_msgSend__requestBody(void *a1, const char *a2, ...)
{
  return _[a1 _requestBody];
}

id objc_msgSend__requestBodyWithPlaylistCloudLibraryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestBodyWithPlaylistCloudLibraryID:");
}

id objc_msgSend__requestBodyWithPlaylistCloudLibraryID_sharingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestBodyWithPlaylistCloudLibraryID:sharingMode:");
}

id objc_msgSend__requestCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 _requestCapabilities];
}

id objc_msgSend__requestIdentityPropertiesWithAsynchronousRequestsGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestIdentityPropertiesWithAsynchronousRequestsGroup:");
}

id objc_msgSend__requestItemProperties(void *a1, const char *a2, ...)
{
  return _[a1 _requestItemProperties];
}

id objc_msgSend__requestItemVersion(void *a1, const char *a2, ...)
{
  return _[a1 _requestItemVersion];
}

id objc_msgSend__requestSubscriptionStatusWithAsynchronousRequestsGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestSubscriptionStatusWithAsynchronousRequestsGroup:");
}

id objc_msgSend__requestWithURL_URLBagKey_timeoutInterval_additionalBodyFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestWithURL:URLBagKey:timeoutInterval:additionalBodyFields:");
}

id objc_msgSend__requestingBundleIdentifierForOriginatingClientConnection_clientInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestingBundleIdentifierForOriginatingClientConnection:clientInfo:error:");
}

id objc_msgSend__resetInternalCloudLibraryState(void *a1, const char *a2, ...)
{
  return _[a1 _resetInternalCloudLibraryState];
}

id objc_msgSend__resizedImageDataFromLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resizedImageDataFromLocation:");
}

id objc_msgSend__resolveConflictBetweenClientPayloadPair_andServerPayloadPair_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolveConflictBetweenClientPayloadPair:andServerPayloadPair:");
}

id objc_msgSend__responseBodyForRequest_retryTimeout_debugName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_responseBodyForRequest:retryTimeout:debugName:");
}

id objc_msgSend__restoreCurrentTasks(void *a1, const char *a2, ...)
{
  return _[a1 _restoreCurrentTasks];
}

id objc_msgSend__retrievePreviousRecommendationMatchesFromCache(void *a1, const char *a2, ...)
{
  return _[a1 _retrievePreviousRecommendationMatchesFromCache];
}

id objc_msgSend__retryEnablingCloudMusicLibraryForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryEnablingCloudMusicLibraryForReason:");
}

id objc_msgSend__retryLoadingCloudLibraryForSecondaryAccountsOnAppleTV(void *a1, const char *a2, ...)
{
  return _[a1 _retryLoadingCloudLibraryForSecondaryAccountsOnAppleTV];
}

id objc_msgSend__revertFavoritingEntityTypeAlbum(void *a1, const char *a2, ...)
{
  return _[a1 _revertFavoritingEntityTypeAlbum];
}

id objc_msgSend__revertFavoritingEntityTypeArtist(void *a1, const char *a2, ...)
{
  return _[a1 _revertFavoritingEntityTypeArtist];
}

id objc_msgSend__revertFavoritingEntityTypePlaylist(void *a1, const char *a2, ...)
{
  return _[a1 _revertFavoritingEntityTypePlaylist];
}

id objc_msgSend__revertFavoritingEntityTypeTrack(void *a1, const char *a2, ...)
{
  return _[a1 _revertFavoritingEntityTypeTrack];
}

id objc_msgSend__revertPendingFavoriteEntityForPermanentlyFailedOperation(void *a1, const char *a2, ...)
{
  return _[a1 _revertPendingFavoriteEntityForPermanentlyFailedOperation];
}

id objc_msgSend__revokeMusicUserTokensForApplicationWithIdentifier_andUserIdentity_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_revokeMusicUserTokensForApplicationWithIdentifier:andUserIdentity:withCompletion:");
}

id objc_msgSend__revokeMusicUserTokensForApplicationsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_revokeMusicUserTokensForApplicationsWithIdentifiers:");
}

id objc_msgSend__runSagaAuthenticateOperationWithClientIdentity_mergePreference_allowNoisyPrompt_cloudLibraryEnableReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runSagaAuthenticateOperationWithClientIdentity:mergePreference:allowNoisyPrompt:cloudLibraryEnableReason:completionHandler:");
}

id objc_msgSend__sanitizedUserStatesForRemoteClientConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizedUserStatesForRemoteClientConnection:");
}

id objc_msgSend__saveCurrentTasks(void *a1, const char *a2, ...)
{
  return _[a1 _saveCurrentTasks];
}

id objc_msgSend__savePendingChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savePendingChanges:");
}

id objc_msgSend__scheduleJobNamed_withStartTime_baseBtaJob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleJobNamed:withStartTime:baseBtaJob:");
}

id objc_msgSend__scheduleNextPlayActivityFlushOperationWithCriteria_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleNextPlayActivityFlushOperationWithCriteria:");
}

id objc_msgSend__schedulePostingContentTasteForFailedItems(void *a1, const char *a2, ...)
{
  return _[a1 _schedulePostingContentTasteForFailedItems];
}

id objc_msgSend__scheduleTask_withStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleTask:withStartTime:");
}

id objc_msgSend__scheduleUpdatingContentTasteWithNewExpirationDate(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleUpdatingContentTasteWithNewExpirationDate];
}

id objc_msgSend__sendOptOutWithCUID_troveID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOptOutWithCUID:troveID:");
}

id objc_msgSend__serializableRequestBodyPropertyListWithItems_syncAnchor_conflictDetectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serializableRequestBodyPropertyListWithItems:syncAnchor:conflictDetectionType:");
}

id objc_msgSend__serializableUpdateItemPayloadDictionaryForEntity_withKey_withConflictDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serializableUpdateItemPayloadDictionaryForEntity:withKey:withConflictDetection:");
}

id objc_msgSend__serverDatabaseRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverDatabaseRevision:");
}

id objc_msgSend__setCachedContentTasteResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCachedContentTasteResponse:");
}

id objc_msgSend__setCloudIDsFromResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCloudIDsFromResponse:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setHomeSharingPrefsNumber_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHomeSharingPrefsNumber:forKey:");
}

id objc_msgSend__setOrRemoveObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOrRemoveObject:forKey:");
}

id objc_msgSend__setShadowOperationForRemoteExecution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShadowOperationForRemoteExecution:");
}

id objc_msgSend__setupCacheDirectoryStructureWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupCacheDirectoryStructureWithPath:");
}

id objc_msgSend__setupInternalQueues(void *a1, const char *a2, ...)
{
  return _[a1 _setupInternalQueues];
}

id objc_msgSend__setupKVO(void *a1, const char *a2, ...)
{
  return _[a1 _setupKVO];
}

id objc_msgSend__setupMPMediaLibraryFilteringForConfigurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupMPMediaLibraryFilteringForConfigurations:");
}

id objc_msgSend__setupNotificationHandlers(void *a1, const char *a2, ...)
{
  return _[a1 _setupNotificationHandlers];
}

id objc_msgSend__setupNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _setupNotifications];
}

id objc_msgSend__setupSigtermHandler(void *a1, const char *a2, ...)
{
  return _[a1 _setupSigtermHandler];
}

id objc_msgSend__setupXPCListenerForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupXPCListenerForService:");
}

id objc_msgSend__shouldBypassEnforcementOfPrivacyAcknowledgementForClientConnection_forIncomingCloudServiceCapabilitiesRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldBypassEnforcementOfPrivacyAcknowledgementForClientConnection:forIncomingCloudServiceCapabilitiesRequest:");
}

id objc_msgSend__shouldHandleDaemonStartupOrAccountChangedNotificationWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldHandleDaemonStartupOrAccountChangedNotificationWithProperties:");
}

id objc_msgSend__sizeForArtworkWithMediaType_artworkType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sizeForArtworkWithMediaType:artworkType:");
}

id objc_msgSend__sqlQueryStringForItemsNeedingPush(void *a1, const char *a2, ...)
{
  return _[a1 _sqlQueryStringForItemsNeedingPush];
}

id objc_msgSend__standardBodyDictionaryWithAdditionalFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_standardBodyDictionaryWithAdditionalFields:");
}

id objc_msgSend__startAncillaryServices(void *a1, const char *a2, ...)
{
  return _[a1 _startAncillaryServices];
}

id objc_msgSend__startGeniusRequestWithStartDate_retryTimeout_debugName_connectionResponseBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startGeniusRequestWithStartDate:retryTimeout:debugName:connectionResponseBlock:");
}

id objc_msgSend__startTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTask:");
}

id objc_msgSend__stateDump(void *a1, const char *a2, ...)
{
  return _[a1 _stateDump];
}

id objc_msgSend__stopAncillaryServices(void *a1, const char *a2, ...)
{
  return _[a1 _stopAncillaryServices];
}

id objc_msgSend__stopTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopTask:");
}

id objc_msgSend__storeRequestContext(void *a1, const char *a2, ...)
{
  return _[a1 _storeRequestContext];
}

id objc_msgSend__storeRequestContextFromUserIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeRequestContextFromUserIdentity:");
}

id objc_msgSend__storeRequestContextWithIdentity_applicationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeRequestContextWithIdentity:applicationIdentifier:");
}

id objc_msgSend__supportedJaliscoMediaKinds(void *a1, const char *a2, ...)
{
  return _[a1 _supportedJaliscoMediaKinds];
}

id objc_msgSend__supportedJaliscoMediaKindsWithSagaEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _supportedJaliscoMediaKindsWithSagaEnabled];
}

id objc_msgSend__supportedMediaKindsDatabasePropertyValue(void *a1, const char *a2, ...)
{
  return _[a1 _supportedMediaKindsDatabasePropertyValue];
}

id objc_msgSend__synchronize(void *a1, const char *a2, ...)
{
  return _[a1 _synchronize];
}

id objc_msgSend__synchronouslyLoadArtistUpdatePollingFrequencyFromBag(void *a1, const char *a2, ...)
{
  return _[a1 _synchronouslyLoadArtistUpdatePollingFrequencyFromBag];
}

id objc_msgSend__taskWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_taskWithName:");
}

id objc_msgSend__tearDownKVO(void *a1, const char *a2, ...)
{
  return _[a1 _tearDownKVO];
}

id objc_msgSend__tearDownNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _tearDownNotifications];
}

id objc_msgSend__timeIntervalForNextFlushOperationWithReplyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeIntervalForNextFlushOperationWithReplyBlock:");
}

id objc_msgSend__transitionAppleTVToParallelMultiUserLibraryManagementPolicy(void *a1, const char *a2, ...)
{
  return _[a1 _transitionAppleTVToParallelMultiUserLibraryManagementPolicy];
}

id objc_msgSend__tryEnablingCloudMusicLibraryForReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tryEnablingCloudMusicLibraryForReason:completionHandler:");
}

id objc_msgSend__tryEnablingICMLOnDevicesSupportingSideLoadedContentWithProperties_reason_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tryEnablingICMLOnDevicesSupportingSideLoadedContentWithProperties:reason:withCompletionHandler:");
}

id objc_msgSend__unsafeBackend(void *a1, const char *a2, ...)
{
  return _[a1 _unsafeBackend];
}

id objc_msgSend__unscheduleJobNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unscheduleJobNamed:");
}

id objc_msgSend__unscheduleTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unscheduleTask:");
}

id objc_msgSend__updateAccountServerCachedData(void *a1, const char *a2, ...)
{
  return _[a1 _updateAccountServerCachedData];
}

id objc_msgSend__updateAirPlaySettingsForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAirPlaySettingsForConfiguration:");
}

id objc_msgSend__updateAllArtistStoreIDsUsingAllArtistImagesMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAllArtistStoreIDsUsingAllArtistImagesMap:");
}

id objc_msgSend__updateAllowsExplicitContentSettingForConfiguration_automatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAllowsExplicitContentSettingForConfiguration:automatically:");
}

id objc_msgSend__updateAutomaticDownloadsPreference(void *a1, const char *a2, ...)
{
  return _[a1 _updateAutomaticDownloadsPreference];
}

id objc_msgSend__updateContentTasteForAlbumArtistItems_musicLibrary_mediaLibrary_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContentTasteForAlbumArtistItems:musicLibrary:mediaLibrary:withCompletion:");
}

id objc_msgSend__updateContentTasteForGlobalPlaylists_musicLibrary_mediaLibrary_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContentTasteForGlobalPlaylists:musicLibrary:mediaLibrary:withCompletion:");
}

id objc_msgSend__updateContentTasteForItem_invalidatingLocalCache_configuration_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContentTasteForItem:invalidatingLocalCache:configuration:withCompletionHandler:");
}

id objc_msgSend__updateContentTasteForMediaItems_musicLibrary_mediaLibrary_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContentTasteForMediaItems:musicLibrary:mediaLibrary:withCompletion:");
}

id objc_msgSend__updateDatabaseByResetingSyncEntityRevisionForItemsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDatabaseByResetingSyncEntityRevisionForItemsWithIdentifiers:");
}

id objc_msgSend__updateEnhancedAudioAvailabilityIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateEnhancedAudioAvailabilityIfNeeded];
}

id objc_msgSend__updateGlobalPlaylistsFromContainersPayloadAtPath_downloadPathForSubscribedContainersPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGlobalPlaylistsFromContainersPayloadAtPath:downloadPathForSubscribedContainersPayload:");
}

id objc_msgSend__updateHTTPCookieStoreForContentRestrictions(void *a1, const char *a2, ...)
{
  return _[a1 _updateHTTPCookieStoreForContentRestrictions];
}

id objc_msgSend__updateJaliscoLibraryWithClientIdentity_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateJaliscoLibraryWithClientIdentity:completion:");
}

id objc_msgSend__updateLibrary(void *a1, const char *a2, ...)
{
  return _[a1 _updateLibrary];
}

id objc_msgSend__updateMediaRemoteCommands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMediaRemoteCommands:");
}

id objc_msgSend__updateOptInIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _updateOptInIfNecessary];
}

id objc_msgSend__updateProgressWithItemsProgress_albumsProgress_artistsProgress_playlistProgress_importerProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProgressWithItemsProgress:albumsProgress:artistsProgress:playlistProgress:importerProgress:");
}

id objc_msgSend__updatePushNotificationsRegistration(void *a1, const char *a2, ...)
{
  return _[a1 _updatePushNotificationsRegistration];
}

id objc_msgSend__updateRegistrationForConfiguration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRegistrationForConfiguration:completion:");
}

id objc_msgSend__updateSagaLibraryWithReason_allowNoisyAuthPrompt_forConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSagaLibraryWithReason:allowNoisyAuthPrompt:forConfiguration:completionHandler:");
}

id objc_msgSend__updateSocialFeaturesAvailabilityIfNeededUsingBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSocialFeaturesAvailabilityIfNeededUsingBag:");
}

id objc_msgSend__updateSpecificArtistStoreIDsUsingAllArtistImagesMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSpecificArtistStoreIDsUsingAllArtistImagesMap:");
}

id objc_msgSend__updateStateWithChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStateWithChange:");
}

id objc_msgSend__updateSupportedConfigurationsDSIDs(void *a1, const char *a2, ...)
{
  return _[a1 _updateSupportedConfigurationsDSIDs];
}

id objc_msgSend__updateSupportedConfigurationsWithAccounts_activeConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSupportedConfigurationsWithAccounts:activeConfiguration:");
}

id objc_msgSend__updateUbiquitousDatabaseWithEntity_syncRevision_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUbiquitousDatabaseWithEntity:syncRevision:usingConnection:");
}

id objc_msgSend__updateWithBag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithBag:error:");
}

id objc_msgSend__updateWithCapabilities_error_privacyAcknowledgementPolicy_capabilitiesRequestOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithCapabilities:error:privacyAcknowledgementPolicy:capabilitiesRequestOperation:");
}

id objc_msgSend__updateWithIdentityProperties_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithIdentityProperties:error:");
}

id objc_msgSend__updateWithStorefrontIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithStorefrontIdentifier:error:");
}

id objc_msgSend__updateWithSubscriptionStatusResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithSubscriptionStatusResponse:error:");
}

id objc_msgSend__updatedUserStateFromState_withUserProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatedUserStateFromState:withUserProfile:");
}

id objc_msgSend__uploadArtworkAssetWithInfo_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadArtworkAssetWithInfo:completionHandler:");
}

id objc_msgSend__uploadArtworkAssetWithInfo_uploadResponsesURL_uploadResponseData_postUploadBackOffDelay_followupDownloadRequestsURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadArtworkAssetWithInfo:uploadResponsesURL:uploadResponseData:postUploadBackOffDelay:followupDownloadRequestsURL:");
}

id objc_msgSend__uploadLibrary(void *a1, const char *a2, ...)
{
  return _[a1 _uploadLibrary];
}

id objc_msgSend__urlResolutionCacheFilePath(void *a1, const char *a2, ...)
{
  return _[a1 _urlResolutionCacheFilePath];
}

id objc_msgSend__userIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _userIdentity];
}

id objc_msgSend__userIdentityForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userIdentityForAccount:");
}

id objc_msgSend__userStateAccessForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userStateAccessForConnection:");
}

id objc_msgSend__wasRestoredFromCloudBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wasRestoredFromCloudBackup:");
}

id objc_msgSend__wrapAndCacheResponseModelWithCompiledMLModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wrapAndCacheResponseModelWithCompiledMLModel:");
}

id objc_msgSend__writeURLResolutionCacheFileUsingBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeURLResolutionCacheFileUsingBag:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_acceptsGzipEncoding(void *a1, const char *a2, ...)
{
  return _[a1 acceptsGzipEncoding];
}

id objc_msgSend_accessQueue(void *a1, const char *a2, ...)
{
  return _[a1 accessQueue];
}

id objc_msgSend_accountDSID(void *a1, const char *a2, ...)
{
  return _[a1 accountDSID];
}

id objc_msgSend_accountManager(void *a1, const char *a2, ...)
{
  return _[a1 accountManager];
}

id objc_msgSend_accountlessHandler(void *a1, const char *a2, ...)
{
  return _[a1 accountlessHandler];
}

id objc_msgSend_acknowledgePrivacyPolicyForIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgePrivacyPolicyForIdentifier:completionHandler:");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_actionMetricsEvent(void *a1, const char *a2, ...)
{
  return _[a1 actionMetricsEvent];
}

id objc_msgSend_actionType(void *a1, const char *a2, ...)
{
  return _[a1 actionType];
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithContext:");
}

id objc_msgSend_activeAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeAccount];
}

id objc_msgSend_activeAccountDidChange(void *a1, const char *a2, ...)
{
  return _[a1 activeAccountDidChange];
}

id objc_msgSend_activeConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 activeConfiguration];
}

id objc_msgSend_activeConfigurationChanged(void *a1, const char *a2, ...)
{
  return _[a1 activeConfigurationChanged];
}

id objc_msgSend_activeConfigurationDSID(void *a1, const char *a2, ...)
{
  return _[a1 activeConfigurationDSID];
}

id objc_msgSend_activeLockerAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeLockerAccount];
}

id objc_msgSend_activeStoreAccountWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeStoreAccountWithError:");
}

id objc_msgSend_activeUser(void *a1, const char *a2, ...)
{
  return _[a1 activeUser];
}

id objc_msgSend_activityCriteriaForTask_startTimeInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityCriteriaForTask:startTimeInSeconds:");
}

id objc_msgSend_adamID(void *a1, const char *a2, ...)
{
  return _[a1 adamID];
}

id objc_msgSend_adamIDToSagaIDMap(void *a1, const char *a2, ...)
{
  return _[a1 adamIDToSagaIDMap];
}

id objc_msgSend_adamId(void *a1, const char *a2, ...)
{
  return _[a1 adamId];
}

id objc_msgSend_addActionDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addActionDetails:");
}

id objc_msgSend_addArtistContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addArtistContent:");
}

id objc_msgSend_addAsset_shouldPreloadKeys_waitForKeyIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAsset:shouldPreloadKeys:waitForKeyIdentifiers:");
}

id objc_msgSend_addBackgroundOperation_forLibraryType_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBackgroundOperation:forLibraryType:priority:");
}

id objc_msgSend_addBackgroundOperation_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBackgroundOperation:priority:");
}

id objc_msgSend_addBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBarrierBlock:");
}

id objc_msgSend_addCatalogContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCatalogContent:");
}

id objc_msgSend_addCloudItemID_idType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCloudItemID:idType:");
}

id objc_msgSend_addCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCompletionHandler:");
}

id objc_msgSend_addContentFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContentFeatures:");
}

id objc_msgSend_addContentPages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContentPages:");
}

id objc_msgSend_addContentParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContentParameters:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFinishBlock:");
}

id objc_msgSend_addGeniusPlaylistWithPersistentID_name_seedItemIDs_itemIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGeniusPlaylistWithPersistentID:name:seedItemIDs:itemIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_addImages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addImages:");
}

id objc_msgSend_addItemWithSagaID_toPlaylistWithPersistentID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItemWithSagaID:toPlaylistWithPersistentID:clientIdentity:completionHandler:");
}

id objc_msgSend_addItemWithSagaID_toPlaylistWithPersistentID_requestingBundleID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItemWithSagaID:toPlaylistWithPersistentID:requestingBundleID:clientIdentity:completionHandler:");
}

id objc_msgSend_addMessageActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessageActions:");
}

id objc_msgSend_addMessageEntry_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessageEntry:completion:");
}

id objc_msgSend_addNonLibraryOwnedPlaylistsWithGlobalIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNonLibraryOwnedPlaylistsWithGlobalIDs:completion:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperation_forLibraryType_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:forLibraryType:priority:");
}

id objc_msgSend_addOperation_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:priority:");
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationWithBlock:");
}

id objc_msgSend_addOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperations:");
}

id objc_msgSend_addPendingChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingChange:");
}

id objc_msgSend_addStoreItemIDs_andAddTracksToCloudLibrary_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStoreItemIDs:andAddTracksToCloudLibrary:withCompletion:");
}

id objc_msgSend_addStoreItemWithAdamID_referral_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStoreItemWithAdamID:referral:clientIdentity:completionHandler:");
}

id objc_msgSend_addStoreItemWithAdamID_referral_toPlaylistWithPersistentID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStoreItemWithAdamID:referral:toPlaylistWithPersistentID:clientIdentity:completionHandler:");
}

id objc_msgSend_addStoreItemWithOpaqueID_requestingBundleID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStoreItemWithOpaqueID:requestingBundleID:clientIdentity:completionHandler:");
}

id objc_msgSend_addStoreItemWithOpaqueID_toPlaylistWithPersistentID_requestingBundleID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStoreItemWithOpaqueID:toPlaylistWithPersistentID:requestingBundleID:clientIdentity:completionHandler:");
}

id objc_msgSend_addStorePlaylistWithGlobalID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStorePlaylistWithGlobalID:clientIdentity:completionHandler:");
}

id objc_msgSend_addSubrules_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubrules:");
}

id objc_msgSend_addTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:");
}

id objc_msgSend_addToLibraryWhenFavoritingBehavior(void *a1, const char *a2, ...)
{
  return _[a1 addToLibraryWhenFavoritingBehavior];
}

id objc_msgSend_addToPlaylistBehavior(void *a1, const char *a2, ...)
{
  return _[a1 addToPlaylistBehavior];
}

id objc_msgSend_addValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValue:");
}

id objc_msgSend_addedItems(void *a1, const char *a2, ...)
{
  return _[a1 addedItems];
}

id objc_msgSend_ageVerificationStateForUserIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageVerificationStateForUserIdentity:");
}

id objc_msgSend_aggregateLibraryRecommendationMetricsFromSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateLibraryRecommendationMetricsFromSnapshots:");
}

id objc_msgSend_album(void *a1, const char *a2, ...)
{
  return _[a1 album];
}

id objc_msgSend_albumAdamID(void *a1, const char *a2, ...)
{
  return _[a1 albumAdamID];
}

id objc_msgSend_albumArtistPersistentIDsToUpdate(void *a1, const char *a2, ...)
{
  return _[a1 albumArtistPersistentIDsToUpdate];
}

id objc_msgSend_albumMetadataDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 albumMetadataDescriptor];
}

id objc_msgSend_allArtistImagesMapCacheFilePathURL(void *a1, const char *a2, ...)
{
  return _[a1 allArtistImagesMapCacheFilePathURL];
}

id objc_msgSend_allArtistImagesMapURL(void *a1, const char *a2, ...)
{
  return _[a1 allArtistImagesMapURL];
}

id objc_msgSend_allGeniusPlaylistPropertiesWithML3ContainerProperties(void *a1, const char *a2, ...)
{
  return _[a1 allGeniusPlaylistPropertiesWithML3ContainerProperties];
}

id objc_msgSend_allGeniusTrackPropertiesWithML3TrackProperties(void *a1, const char *a2, ...)
{
  return _[a1 allGeniusTrackPropertiesWithML3TrackProperties];
}

id objc_msgSend_allHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHTTPHeaderFields];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allItems(void *a1, const char *a2, ...)
{
  return _[a1 allItems];
}

id objc_msgSend_allItemsQueryWithLibrary_predicate_orderingTerms_usingSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allItemsQueryWithLibrary:predicate:orderingTerms:usingSections:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allLibraries(void *a1, const char *a2, ...)
{
  return _[a1 allLibraries];
}

id objc_msgSend_allML3ContainerPropertiesWithGeniusPlaylistProperties(void *a1, const char *a2, ...)
{
  return _[a1 allML3ContainerPropertiesWithGeniusPlaylistProperties];
}

id objc_msgSend_allML3TrackPropertiesWithGeniusTrackProperties(void *a1, const char *a2, ...)
{
  return _[a1 allML3TrackPropertiesWithGeniusTrackProperties];
}

id objc_msgSend_allMediaDownloadLibraryIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 allMediaDownloadLibraryIdentifiers];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allStoreAccountsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allStoreAccountsWithError:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowLowAffinityRecommendations(void *a1, const char *a2, ...)
{
  return _[a1 allowLowAffinityRecommendations];
}

id objc_msgSend_allowNoisyAuthPrompt(void *a1, const char *a2, ...)
{
  return _[a1 allowNoisyAuthPrompt];
}

id objc_msgSend_allowsCellularData(void *a1, const char *a2, ...)
{
  return _[a1 allowsCellularData];
}

id objc_msgSend_allowsExplicitContent(void *a1, const char *a2, ...)
{
  return _[a1 allowsExplicitContent];
}

id objc_msgSend_allowsMusicVideos(void *a1, const char *a2, ...)
{
  return _[a1 allowsMusicVideos];
}

id objc_msgSend_alternateDSID(void *a1, const char *a2, ...)
{
  return _[a1 alternateDSID];
}

id objc_msgSend_amsPushHandler(void *a1, const char *a2, ...)
{
  return _[a1 amsPushHandler];
}

id objc_msgSend_anonymousListener(void *a1, const char *a2, ...)
{
  return _[a1 anonymousListener];
}

id objc_msgSend_anyInLibrary_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyInLibrary:predicate:");
}

id objc_msgSend_anyInLibrary_predicate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyInLibrary:predicate:options:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationMessage(void *a1, const char *a2, ...)
{
  return _[a1 applicationMessage];
}

id objc_msgSend_apsPayload(void *a1, const char *a2, ...)
{
  return _[a1 apsPayload];
}

id objc_msgSend_archiveRequest_withResponse_responseData_performanceMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveRequest:withResponse:responseData:performanceMetrics:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForBagKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForBagKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_artist(void *a1, const char *a2, ...)
{
  return _[a1 artist];
}

id objc_msgSend_artistAdamID(void *a1, const char *a2, ...)
{
  return _[a1 artistAdamID];
}

id objc_msgSend_artistContentAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artistContentAtIndex:");
}

id objc_msgSend_artistContentsCount(void *a1, const char *a2, ...)
{
  return _[a1 artistContentsCount];
}

id objc_msgSend_artistMetadataDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 artistMetadataDescriptor];
}

id objc_msgSend_artistName(void *a1, const char *a2, ...)
{
  return _[a1 artistName];
}

id objc_msgSend_artistNameLibraryMatchURL(void *a1, const char *a2, ...)
{
  return _[a1 artistNameLibraryMatchURL];
}

id objc_msgSend_artistPersistentIDsToUpdate(void *a1, const char *a2, ...)
{
  return _[a1 artistPersistentIDsToUpdate];
}

id objc_msgSend_artworkColorAnalysisAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 artworkColorAnalysisAccessQueue];
}

id objc_msgSend_artworkColorAnalysisOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 artworkColorAnalysisOperationQueue];
}

id objc_msgSend_artworkDataSource(void *a1, const char *a2, ...)
{
  return _[a1 artworkDataSource];
}

id objc_msgSend_artworkDownloadAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 artworkDownloadAccessQueue];
}

id objc_msgSend_artworkDownloadOperationMap(void *a1, const char *a2, ...)
{
  return _[a1 artworkDownloadOperationMap];
}

id objc_msgSend_artworkDownloadOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 artworkDownloadOperationQueue];
}

id objc_msgSend_artworkDownloadSession(void *a1, const char *a2, ...)
{
  return _[a1 artworkDownloadSession];
}

id objc_msgSend_artworkDownloadWatchdog(void *a1, const char *a2, ...)
{
  return _[a1 artworkDownloadWatchdog];
}

id objc_msgSend_artworkImporter(void *a1, const char *a2, ...)
{
  return _[a1 artworkImporter];
}

id objc_msgSend_artworkInfoDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 artworkInfoDictionaries];
}

id objc_msgSend_artworkInfos(void *a1, const char *a2, ...)
{
  return _[a1 artworkInfos];
}

id objc_msgSend_artworkMediaType(void *a1, const char *a2, ...)
{
  return _[a1 artworkMediaType];
}

id objc_msgSend_artworkRelativePathFromToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkRelativePathFromToken:");
}

id objc_msgSend_artworkToken(void *a1, const char *a2, ...)
{
  return _[a1 artworkToken];
}

id objc_msgSend_artworkTokenForArtistHeroURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkTokenForArtistHeroURL:");
}

id objc_msgSend_artworkTokenForChapterWithItemPID_retrievalTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkTokenForChapterWithItemPID:retrievalTime:");
}

id objc_msgSend_artworkTokenForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkTokenForSource:");
}

id objc_msgSend_artworkType(void *a1, const char *a2, ...)
{
  return _[a1 artworkType];
}

id objc_msgSend_artworkURLWithSize_cropStyle_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkURLWithSize:cropStyle:format:");
}

id objc_msgSend_artworkURLWithSize_cropStyle_format_preferP3ColorSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkURLWithSize:cropStyle:format:preferP3ColorSpace:");
}

id objc_msgSend_assetFileSize(void *a1, const char *a2, ...)
{
  return _[a1 assetFileSize];
}

id objc_msgSend_assetURL(void *a1, const char *a2, ...)
{
  return _[a1 assetURL];
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_audioQualityPreference(void *a1, const char *a2, ...)
{
  return _[a1 audioQualityPreference];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authenticateFailureCode(void *a1, const char *a2, ...)
{
  return _[a1 authenticateFailureCode];
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _[a1 authorizationStatus];
}

id objc_msgSend_autoPlayMode(void *a1, const char *a2, ...)
{
  return _[a1 autoPlayMode];
}

id objc_msgSend_automaticDownloadMediaKindsForMusic(void *a1, const char *a2, ...)
{
  return _[a1 automaticDownloadMediaKindsForMusic];
}

id objc_msgSend_automaticDownloadsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 automaticDownloadsEnabled];
}

id objc_msgSend_autoupdatingActiveAccount(void *a1, const char *a2, ...)
{
  return _[a1 autoupdatingActiveAccount];
}

id objc_msgSend_autoupdatingSharedLibrary(void *a1, const char *a2, ...)
{
  return _[a1 autoupdatingSharedLibrary];
}

id objc_msgSend_averagePlaysPerItemAdded(void *a1, const char *a2, ...)
{
  return _[a1 averagePlaysPerItemAdded];
}

id objc_msgSend_backgroundTaskManager(void *a1, const char *a2, ...)
{
  return _[a1 backgroundTaskManager];
}

id objc_msgSend_badgeActionMetricsEventForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeActionMetricsEventForIdentifier:");
}

id objc_msgSend_badgeActionMetricsEventPathForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeActionMetricsEventPathForIdentifier:");
}

id objc_msgSend_badgeAppWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeAppWithRequest:");
}

id objc_msgSend_badgeControllerProtocol(void *a1, const char *a2, ...)
{
  return _[a1 badgeControllerProtocol];
}

id objc_msgSend_badgeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 badgeIdentifier];
}

id objc_msgSend_bag(void *a1, const char *a2, ...)
{
  return _[a1 bag];
}

id objc_msgSend_bagForProfile_profileVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForProfile:profileVersion:");
}

id objc_msgSend_bagProfile(void *a1, const char *a2, ...)
{
  return _[a1 bagProfile];
}

id objc_msgSend_bagProfileVersion(void *a1, const char *a2, ...)
{
  return _[a1 bagProfileVersion];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseURL(void *a1, const char *a2, ...)
{
  return _[a1 baseURL];
}

id objc_msgSend_becomeActive(void *a1, const char *a2, ...)
{
  return _[a1 becomeActive];
}

id objc_msgSend_becomeInactiveWithDeauthentication_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeInactiveWithDeauthentication:completion:");
}

id objc_msgSend_beginCollaborationUsingPlaylistWithPersistentID_sharingMode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginCollaborationUsingPlaylistWithPersistentID:sharingMode:completion:");
}

id objc_msgSend_beginObservingBagWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginObservingBagWithHandler:");
}

id objc_msgSend_beginObservingSubscriptionStatusWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginObservingSubscriptionStatusWithHandler:");
}

id objc_msgSend_beginPerformUpdate(void *a1, const char *a2, ...)
{
  return _[a1 beginPerformUpdate];
}

id objc_msgSend_beginTransaction(void *a1, const char *a2, ...)
{
  return _[a1 beginTransaction];
}

id objc_msgSend_beginTransactionWithItemsToSyncWithDomain_enumerationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTransactionWithItemsToSyncWithDomain:enumerationBlock:");
}

id objc_msgSend_bitDepth(void *a1, const char *a2, ...)
{
  return _[a1 bitDepth];
}

id objc_msgSend_bitRate(void *a1, const char *a2, ...)
{
  return _[a1 bitRate];
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockOperationWithBlock:");
}

id objc_msgSend_bodyContentFormat(void *a1, const char *a2, ...)
{
  return _[a1 bodyContentFormat];
}

id objc_msgSend_bodyData(void *a1, const char *a2, ...)
{
  return _[a1 bodyData];
}

id objc_msgSend_bodyDataURL(void *a1, const char *a2, ...)
{
  return _[a1 bodyDataURL];
}

id objc_msgSend_bookmarkTime(void *a1, const char *a2, ...)
{
  return _[a1 bookmarkTime];
}

id objc_msgSend_bookmarkTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 bookmarkTimestamp];
}

id objc_msgSend_books(void *a1, const char *a2, ...)
{
  return _[a1 books];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLForKey_accountID_updateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:accountID:updateBlock:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buildFeatures(void *a1, const char *a2, ...)
{
  return _[a1 buildFeatures];
}

id objc_msgSend_buildIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 buildIdentifier];
}

id objc_msgSend_buildURLRequestWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildURLRequestWithCompletionHandler:");
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return _[a1 buildVersion];
}

id objc_msgSend_bulkArtistNameLibraryMatchBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 bulkArtistNameLibraryMatchBatchSize];
}

id objc_msgSend_bulkArtistNameLibraryMatchURL(void *a1, const char *a2, ...)
{
  return _[a1 bulkArtistNameLibraryMatchURL];
}

id objc_msgSend_bulkRefreshWaitInterval(void *a1, const char *a2, ...)
{
  return _[a1 bulkRefreshWaitInterval];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleRecordForAuditToken_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleRecordForAuditToken:error:");
}

id objc_msgSend_bypassBagSanityChecks(void *a1, const char *a2, ...)
{
  return _[a1 bypassBagSanityChecks];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cacheKey(void *a1, const char *a2, ...)
{
  return _[a1 cacheKey];
}

id objc_msgSend_cachedSharedControlsCapability(void *a1, const char *a2, ...)
{
  return _[a1 cachedSharedControlsCapability];
}

id objc_msgSend_cachingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 cachingEnabled];
}

id objc_msgSend_callCompletionHandlers(void *a1, const char *a2, ...)
{
  return _[a1 callCompletionHandlers];
}

id objc_msgSend_canShowCloudDownloadButtons(void *a1, const char *a2, ...)
{
  return _[a1 canShowCloudDownloadButtons];
}

id objc_msgSend_canShowCloudMusic(void *a1, const char *a2, ...)
{
  return _[a1 canShowCloudMusic];
}

id objc_msgSend_canShowCloudVideo(void *a1, const char *a2, ...)
{
  return _[a1 canShowCloudVideo];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllImports(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllImports];
}

id objc_msgSend_cancelAllImportsAndWaitForOperationsToFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllImportsAndWaitForOperationsToFinish:");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelAllOperationsAndClearPendingChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperationsAndClearPendingChangesWithCompletionHandler:");
}

id objc_msgSend_cancelAllOperationsAndWaitForOperationsToFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperationsAndWaitForOperationsToFinish:");
}

id objc_msgSend_cancelDownloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDownloads:");
}

id objc_msgSend_cancelImportOperation_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelImportOperation:completionHandler:");
}

id objc_msgSend_cancelOperationsByClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelOperationsByClass:");
}

id objc_msgSend_cancelOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelOperationsWithCompletionHandler:");
}

id objc_msgSend_cancelPendingChanges(void *a1, const char *a2, ...)
{
  return _[a1 cancelPendingChanges];
}

id objc_msgSend_cancelPendingChangesForLibraryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPendingChangesForLibraryType:");
}

id objc_msgSend_cancelPendingChangesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPendingChangesWithCompletion:");
}

id objc_msgSend_cancelRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelRequest:");
}

id objc_msgSend_cancelUpdatesForToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelUpdatesForToken:");
}

id objc_msgSend_canonicalResponseForResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canonicalResponseForResponse:");
}

id objc_msgSend_canonicalTimestampFromTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canonicalTimestampFromTimeInterval:");
}

id objc_msgSend_capabilitiesDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capabilitiesDidChange:");
}

id objc_msgSend_carrierBundleDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 carrierBundleDeviceIdentifier];
}

id objc_msgSend_catalogContentAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catalogContentAtIndex:");
}

id objc_msgSend_catalogContents(void *a1, const char *a2, ...)
{
  return _[a1 catalogContents];
}

id objc_msgSend_catalogContentsCount(void *a1, const char *a2, ...)
{
  return _[a1 catalogContentsCount];
}

id objc_msgSend_categoryWithIdentifier_actions_intentIdentifiers_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoryWithIdentifier:actions:intentIdentifiers:options:");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _[a1 center];
}

id objc_msgSend_changeLibraryManagementPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeLibraryManagementPolicy:");
}

id objc_msgSend_changeLibraryManagementPolicy_withAccountsStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeLibraryManagementPolicy:withAccountsStateChange:");
}

id objc_msgSend_channelLayoutDescription(void *a1, const char *a2, ...)
{
  return _[a1 channelLayoutDescription];
}

id objc_msgSend_checkInDatabaseConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkInDatabaseConnection:");
}

id objc_msgSend_checkoutReaderConnection(void *a1, const char *a2, ...)
{
  return _[a1 checkoutReaderConnection];
}

id objc_msgSend_cleanupArtworkWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupArtworkWithOptions:");
}

id objc_msgSend_cleanupArtworkWithOptions_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupArtworkWithOptions:usingConnection:");
}

id objc_msgSend_clearAllCloudKVSData(void *a1, const char *a2, ...)
{
  return _[a1 clearAllCloudKVSData];
}

id objc_msgSend_clearAllGeniusData(void *a1, const char *a2, ...)
{
  return _[a1 clearAllGeniusData];
}

id objc_msgSend_clearArtistContents(void *a1, const char *a2, ...)
{
  return _[a1 clearArtistContents];
}

id objc_msgSend_clearBadgeActionMetricsEventForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearBadgeActionMetricsEventForIdentifier:");
}

id objc_msgSend_clearCatalogContents(void *a1, const char *a2, ...)
{
  return _[a1 clearCatalogContents];
}

id objc_msgSend_clearContentFeatures(void *a1, const char *a2, ...)
{
  return _[a1 clearContentFeatures];
}

id objc_msgSend_clearJaliscoAccountID(void *a1, const char *a2, ...)
{
  return _[a1 clearJaliscoAccountID];
}

id objc_msgSend_clearJaliscoLastExcludedMediaKinds(void *a1, const char *a2, ...)
{
  return _[a1 clearJaliscoLastExcludedMediaKinds];
}

id objc_msgSend_clearLocationFromLibrary_persistentIDs_disableKeepLocal_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:");
}

id objc_msgSend_clearNeedsUpdateForTokens(void *a1, const char *a2, ...)
{
  return _[a1 clearNeedsUpdateForTokens];
}

id objc_msgSend_clearSagaClientFeaturesVersion(void *a1, const char *a2, ...)
{
  return _[a1 clearSagaClientFeaturesVersion];
}

id objc_msgSend_clearSagaCloudLibraryCUID(void *a1, const char *a2, ...)
{
  return _[a1 clearSagaCloudLibraryCUID];
}

id objc_msgSend_clearSagaCloudLibraryTroveID(void *a1, const char *a2, ...)
{
  return _[a1 clearSagaCloudLibraryTroveID];
}

id objc_msgSend_clearShouldForceServerToUseDAAPDebugFeatures(void *a1, const char *a2, ...)
{
  return _[a1 clearShouldForceServerToUseDAAPDebugFeatures];
}

id objc_msgSend_clearValues(void *a1, const char *a2, ...)
{
  return _[a1 clearValues];
}

id objc_msgSend_clientFeaturesVersion(void *a1, const char *a2, ...)
{
  return _[a1 clientFeaturesVersion];
}

id objc_msgSend_clientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentifier];
}

id objc_msgSend_clientIdentity(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentity];
}

id objc_msgSend_clientInfo(void *a1, const char *a2, ...)
{
  return _[a1 clientInfo];
}

id objc_msgSend_clientInfoForMusicKitRequestWithClientIdentifier_clientVersion_bundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInfoForMusicKitRequestWithClientIdentifier:clientVersion:bundleIdentifier:");
}

id objc_msgSend_clientInterface(void *a1, const char *a2, ...)
{
  return _[a1 clientInterface];
}

id objc_msgSend_clientVersion(void *a1, const char *a2, ...)
{
  return _[a1 clientVersion];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return _[a1 closeFile];
}

id objc_msgSend_cloudAddRequestWithDatabaseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudAddRequestWithDatabaseID:");
}

id objc_msgSend_cloudAlbumID(void *a1, const char *a2, ...)
{
  return _[a1 cloudAlbumID];
}

id objc_msgSend_cloudArtworkInfoDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 cloudArtworkInfoDictionaries];
}

id objc_msgSend_cloudBadgingService(void *a1, const char *a2, ...)
{
  return _[a1 cloudBadgingService];
}

id objc_msgSend_cloudEntity(void *a1, const char *a2, ...)
{
  return _[a1 cloudEntity];
}

id objc_msgSend_cloudID(void *a1, const char *a2, ...)
{
  return _[a1 cloudID];
}

id objc_msgSend_cloudIDToLyricsTokenMap(void *a1, const char *a2, ...)
{
  return _[a1 cloudIDToLyricsTokenMap];
}

id objc_msgSend_cloudLibraryStateReason(void *a1, const char *a2, ...)
{
  return _[a1 cloudLibraryStateReason];
}

id objc_msgSend_cloudPlaylistID(void *a1, const char *a2, ...)
{
  return _[a1 cloudPlaylistID];
}

id objc_msgSend_cloudServiceStatusMonitor(void *a1, const char *a2, ...)
{
  return _[a1 cloudServiceStatusMonitor];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_codecString(void *a1, const char *a2, ...)
{
  return _[a1 codecString];
}

id objc_msgSend_collaborationAllowed(void *a1, const char *a2, ...)
{
  return _[a1 collaborationAllowed];
}

id objc_msgSend_collaborationCloudLibraryID(void *a1, const char *a2, ...)
{
  return _[a1 collaborationCloudLibraryID];
}

id objc_msgSend_collaborationGlobalID(void *a1, const char *a2, ...)
{
  return _[a1 collaborationGlobalID];
}

id objc_msgSend_collaborationInviteURL(void *a1, const char *a2, ...)
{
  return _[a1 collaborationInviteURL];
}

id objc_msgSend_collaborationInviteURLExpirationDate(void *a1, const char *a2, ...)
{
  return _[a1 collaborationInviteURLExpirationDate];
}

id objc_msgSend_collaborationMode(void *a1, const char *a2, ...)
{
  return _[a1 collaborationMode];
}

id objc_msgSend_commitUniversalPlaybackPositions_context_domain_domainVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitUniversalPlaybackPositions:context:domain:domainVersion:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compileModelAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compileModelAtURL:error:");
}

id objc_msgSend_completedUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 completedUnitCount];
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _[a1 completionHandler];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_computation(void *a1, const char *a2, ...)
{
  return _[a1 computation];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationFromSourceConfiguration_userIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationFromSourceConfiguration:userIdentity:");
}

id objc_msgSend_conflictedKeys(void *a1, const char *a2, ...)
{
  return _[a1 conflictedKeys];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectWithCompletionHandler:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connectionGroup(void *a1, const char *a2, ...)
{
  return _[a1 connectionGroup];
}

id objc_msgSend_connectionQueue(void *a1, const char *a2, ...)
{
  return _[a1 connectionQueue];
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _[a1 connectionState];
}

id objc_msgSend_constraintsForSystemApplicationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintsForSystemApplicationType:");
}

id objc_msgSend_containerCloudID(void *a1, const char *a2, ...)
{
  return _[a1 containerCloudID];
}

id objc_msgSend_containerID(void *a1, const char *a2, ...)
{
  return _[a1 containerID];
}

id objc_msgSend_containerIDs(void *a1, const char *a2, ...)
{
  return _[a1 containerIDs];
}

id objc_msgSend_containerQueryWithContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerQueryWithContainer:");
}

id objc_msgSend_containerType(void *a1, const char *a2, ...)
{
  return _[a1 containerType];
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return _[a1 containingBundleRecord];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contentFeatures(void *a1, const char *a2, ...)
{
  return _[a1 contentFeatures];
}

id objc_msgSend_contentFeaturesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentFeaturesAtIndex:");
}

id objc_msgSend_contentFeaturesCount(void *a1, const char *a2, ...)
{
  return _[a1 contentFeaturesCount];
}

id objc_msgSend_contentPages(void *a1, const char *a2, ...)
{
  return _[a1 contentPages];
}

id objc_msgSend_contentParameters(void *a1, const char *a2, ...)
{
  return _[a1 contentParameters];
}

id objc_msgSend_contentTasteItem(void *a1, const char *a2, ...)
{
  return _[a1 contentTasteItem];
}

id objc_msgSend_contentTasteItems(void *a1, const char *a2, ...)
{
  return _[a1 contentTasteItems];
}

id objc_msgSend_contentTasteType(void *a1, const char *a2, ...)
{
  return _[a1 contentTasteType];
}

id objc_msgSend_contentTasteUpdateOperation_finishedByInvalidatingCache_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentTasteUpdateOperation:finishedByInvalidatingCache:error:");
}

id objc_msgSend_contentTasteUpdateResponse(void *a1, const char *a2, ...)
{
  return _[a1 contentTasteUpdateResponse];
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_controllerWithUserIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerWithUserIdentity:");
}

id objc_msgSend_convertedPlaylistCloudLibraryID(void *a1, const char *a2, ...)
{
  return _[a1 convertedPlaylistCloudLibraryID];
}

id objc_msgSend_convertedPlaylistGlobalID(void *a1, const char *a2, ...)
{
  return _[a1 convertedPlaylistGlobalID];
}

id objc_msgSend_cookieWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cookieWithProperties:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithBlock:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countOfEntities(void *a1, const char *a2, ...)
{
  return _[a1 countOfEntities];
}

id objc_msgSend_createBag(void *a1, const char *a2, ...)
{
  return _[a1 createBag];
}

id objc_msgSend_createCFUserNotification(void *a1, const char *a2, ...)
{
  return _[a1 createCFUserNotification];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createFeatureProviderDictionaryFromNewContentResponse_withLibraryArtistSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFeatureProviderDictionaryFromNewContentResponse:withLibraryArtistSnapshots:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createPlaylistWithPersistentID_properties_trackList_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPlaylistWithPersistentID:properties:trackList:clientIdentity:completionHandler:");
}

id objc_msgSend_createPlaylistWithPersistentID_properties_trackList_requestingBundleID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPlaylistWithPersistentID:properties:trackList:requestingBundleID:clientIdentity:completionHandler:");
}

id objc_msgSend_cuid(void *a1, const char *a2, ...)
{
  return _[a1 cuid];
}

id objc_msgSend_cumulativePlayCount(void *a1, const char *a2, ...)
{
  return _[a1 cumulativePlayCount];
}

id objc_msgSend_cumulativeSkipCount(void *a1, const char *a2, ...)
{
  return _[a1 cumulativeSkipCount];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentDatabaseRevision(void *a1, const char *a2, ...)
{
  return _[a1 currentDatabaseRevision];
}

id objc_msgSend_currentDeviceFavoriteSongsPlaylist(void *a1, const char *a2, ...)
{
  return _[a1 currentDeviceFavoriteSongsPlaylist];
}

id objc_msgSend_currentDeviceInfo(void *a1, const char *a2, ...)
{
  return _[a1 currentDeviceInfo];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentItemCount(void *a1, const char *a2, ...)
{
  return _[a1 currentItemCount];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentPaginationToken(void *a1, const char *a2, ...)
{
  return _[a1 currentPaginationToken];
}

id objc_msgSend_currentRevision(void *a1, const char *a2, ...)
{
  return _[a1 currentRevision];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentTasks(void *a1, const char *a2, ...)
{
  return _[a1 currentTasks];
}

id objc_msgSend_currentThermalLevel(void *a1, const char *a2, ...)
{
  return _[a1 currentThermalLevel];
}

id objc_msgSend_currentUpdateOperation(void *a1, const char *a2, ...)
{
  return _[a1 currentUpdateOperation];
}

id objc_msgSend_daapQueryFilterString(void *a1, const char *a2, ...)
{
  return _[a1 daapQueryFilterString];
}

id objc_msgSend_daemonDefaults(void *a1, const char *a2, ...)
{
  return _[a1 daemonDefaults];
}

id objc_msgSend_daemonOptionsForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonOptionsForConfiguration:");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataByInflatingWithNoZipHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataByInflatingWithNoZipHeader:");
}

id objc_msgSend_dataForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataForKey:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_databaseConnectionAllowingWrites_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseConnectionAllowingWrites:withBlock:");
}

id objc_msgSend_databaseID(void *a1, const char *a2, ...)
{
  return _[a1 databaseID];
}

id objc_msgSend_databasePath(void *a1, const char *a2, ...)
{
  return _[a1 databasePath];
}

id objc_msgSend_databaseRevision(void *a1, const char *a2, ...)
{
  return _[a1 databaseRevision];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_daysSinceLastPlayedDate(void *a1, const char *a2, ...)
{
  return _[a1 daysSinceLastPlayedDate];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decodeArrayOfObjectsOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeArrayOfObjectsOfClass:forKey:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decodeTCCIdentityForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeTCCIdentityForKey:");
}

id objc_msgSend_decreasePriority(void *a1, const char *a2, ...)
{
  return _[a1 decreasePriority];
}

id objc_msgSend_decreasePriorityForAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 decreasePriorityForAllOperations];
}

id objc_msgSend_decreaseQualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 decreaseQualityOfService];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultIdentityStore(void *a1, const char *a2, ...)
{
  return _[a1 defaultIdentityStore];
}

id objc_msgSend_defaultInfo(void *a1, const char *a2, ...)
{
  return _[a1 defaultInfo];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultMediaLibrary(void *a1, const char *a2, ...)
{
  return _[a1 defaultMediaLibrary];
}

id objc_msgSend_defaultOverrideHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 defaultOverrideHTTPHeaderFields];
}

id objc_msgSend_defaultRenderer(void *a1, const char *a2, ...)
{
  return _[a1 defaultRenderer];
}

id objc_msgSend_defaultSession(void *a1, const char *a2, ...)
{
  return _[a1 defaultSession];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteAllEntitiesFromLibraryWithDeletionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllEntitiesFromLibraryWithDeletionType:");
}

id objc_msgSend_deleteAllEntitiesFromLibraryWithDeletionType_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllEntitiesFromLibraryWithDeletionType:usingConnection:");
}

id objc_msgSend_deleteAutomaticDownloadsKey(void *a1, const char *a2, ...)
{
  return _[a1 deleteAutomaticDownloadsKey];
}

id objc_msgSend_deleteDB(void *a1, const char *a2, ...)
{
  return _[a1 deleteDB];
}

id objc_msgSend_deleteDatabaseProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteDatabaseProperty:");
}

id objc_msgSend_deleteFromLibrary(void *a1, const char *a2, ...)
{
  return _[a1 deleteFromLibrary];
}

id objc_msgSend_deleteFromLibrary_deletionType_persistentIDs_count_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteFromLibrary:deletionType:persistentIDs:count:usingConnection:");
}

id objc_msgSend_deleteHandlerForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHandlerForConfiguration:");
}

id objc_msgSend_deleteInteractionsWithGroupIdentifiers_bundleID_protectionClass_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteInteractionsWithGroupIdentifiers:bundleID:protectionClass:completionHandler:");
}

id objc_msgSend_deletePlaybackPositionEntitiesFromLibraryWithIdentifier_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletePlaybackPositionEntitiesFromLibraryWithIdentifier:clientIdentity:");
}

id objc_msgSend_deletePlaybackPositionWithRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletePlaybackPositionWithRequestContext:");
}

id objc_msgSend_deletedKeys(void *a1, const char *a2, ...)
{
  return _[a1 deletedKeys];
}

id objc_msgSend_deliverSubscriptionStatusResponse_forRemoteRequestWithUniqueIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverSubscriptionStatusResponse:forRemoteRequestWithUniqueIdentifier:error:");
}

id objc_msgSend_deprioritizeAlbumArtistHeroImageForPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeAlbumArtistHeroImageForPersistentID:");
}

id objc_msgSend_deprioritizeArtistHeroImageForPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeArtistHeroImageForPersistentID:");
}

id objc_msgSend_deprioritizeContainerArtworkForSagaID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeContainerArtworkForSagaID:");
}

id objc_msgSend_deprioritizeImportArtworkForCloudID_artworkType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeImportArtworkForCloudID:artworkType:");
}

id objc_msgSend_deprioritizeItemArtworkForPurchaseHistoryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeItemArtworkForPurchaseHistoryID:");
}

id objc_msgSend_deprioritizeItemArtworkForSagaID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeItemArtworkForSagaID:");
}

id objc_msgSend_deprioritizeScreenshotForPurchaseHistoryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeScreenshotForPurchaseHistoryID:");
}

id objc_msgSend_deprioritizeScreenshotForSagaID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeScreenshotForSagaID:");
}

id objc_msgSend_deprioritizeSubscriptionContainerArtworkForPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeSubscriptionContainerArtworkForPersistentID:");
}

id objc_msgSend_deprioritizeSubscriptionItemArtworkForPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeSubscriptionItemArtworkForPersistentID:");
}

id objc_msgSend_deprioritizeSubscriptionScreenshotForPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprioritizeSubscriptionScreenshotForPersistentID:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionWithLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionWithLocale:");
}

id objc_msgSend_developerToken(void *a1, const char *a2, ...)
{
  return _[a1 developerToken];
}

id objc_msgSend_deviceGUID(void *a1, const char *a2, ...)
{
  return _[a1 deviceGUID];
}

id objc_msgSend_deviceInfo(void *a1, const char *a2, ...)
{
  return _[a1 deviceInfo];
}

id objc_msgSend_deviceMediaLibraryWithUserIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceMediaLibraryWithUserIdentity:");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _[a1 deviceName];
}

id objc_msgSend_dictRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictRepresentation];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryForBagKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForBagKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_dictionaryWithSharedKeySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithSharedKeySet:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_disableActiveLockerAccount(void *a1, const char *a2, ...)
{
  return _[a1 disableActiveLockerAccount];
}

id objc_msgSend_disableCloudLibraryWithClientIdentity_reason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCloudLibraryWithClientIdentity:reason:completionHandler:");
}

id objc_msgSend_disableLockerAccountWithDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableLockerAccountWithDSID:completionHandler:");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _[a1 disconnect];
}

id objc_msgSend_displayType(void *a1, const char *a2, ...)
{
  return _[a1 displayType];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downPinCollectionsForClasses_configuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downPinCollectionsForClasses:configuration:");
}

id objc_msgSend_downloadManager(void *a1, const char *a2, ...)
{
  return _[a1 downloadManager];
}

id objc_msgSend_downloadResourcesForMessageWithIdentifier_bundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadResourcesForMessageWithIdentifier:bundleIdentifier:completion:");
}

id objc_msgSend_downloaderAccountID(void *a1, const char *a2, ...)
{
  return _[a1 downloaderAccountID];
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return _[a1 dsid];
}

id objc_msgSend_eTagValueFromContentTasteResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eTagValueFromContentTasteResponse:");
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_editCollaborationWithPersistentID_properties_trackEdits_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editCollaborationWithPersistentID:properties:trackEdits:completion:");
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBoolValueForSetting:");
}

id objc_msgSend_elementCodeForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementCodeForProperty:");
}

id objc_msgSend_emptyAllTables(void *a1, const char *a2, ...)
{
  return _[a1 emptyAllTables];
}

id objc_msgSend_enableCloudLibraryWithClientIdentity_startInitialImport_enableCloudLibraryPolicy_isExplicitUserAction_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCloudLibraryWithClientIdentity:startInitialImport:enableCloudLibraryPolicy:isExplicitUserAction:completionHandler:");
}

id objc_msgSend_enableReason(void *a1, const char *a2, ...)
{
  return _[a1 enableReason];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_enabledTopics(void *a1, const char *a2, ...)
{
  return _[a1 enabledTopics];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInt_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeTCCIdentity_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeTCCIdentity:forKey:");
}

id objc_msgSend_endArray(void *a1, const char *a2, ...)
{
  return _[a1 endArray];
}

id objc_msgSend_endCollaborationWithPersistentID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endCollaborationWithPersistentID:completion:");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endObservingBagWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endObservingBagWithToken:");
}

id objc_msgSend_endObservingCloudServiceStatusWithToken_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endObservingCloudServiceStatusWithToken:completionHandler:");
}

id objc_msgSend_endObservingSubscriptionStatusWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endObservingSubscriptionStatusWithToken:");
}

id objc_msgSend_endPerformUpdate(void *a1, const char *a2, ...)
{
  return _[a1 endPerformUpdate];
}

id objc_msgSend_endReasonType(void *a1, const char *a2, ...)
{
  return _[a1 endReasonType];
}

id objc_msgSend_endTransaction(void *a1, const char *a2, ...)
{
  return _[a1 endTransaction];
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return _[a1 endpoint];
}

id objc_msgSend_enhancedAudioConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 enhancedAudioConfiguration];
}

id objc_msgSend_enhancedAudioKeyManager(void *a1, const char *a2, ...)
{
  return _[a1 enhancedAudioKeyManager];
}

id objc_msgSend_enhancedAudioSharedContentKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 enhancedAudioSharedContentKeyPath];
}

id objc_msgSend_enqueueBlockForTransactionCommit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlockForTransactionCommit:");
}

id objc_msgSend_enqueueChildOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueChildOperation:");
}

id objc_msgSend_enqueueData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueData:");
}

id objc_msgSend_enqueueDataRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueDataRequest:withCompletionHandler:");
}

id objc_msgSend_enqueueDownloadRequest_toDestination_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueDownloadRequest:toDestination:withCompletionHandler:");
}

id objc_msgSend_enqueueMetricsEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueMetricsEvent:");
}

id objc_msgSend_enqueuerProperties(void *a1, const char *a2, ...)
{
  return _[a1 enqueuerProperties];
}

id objc_msgSend_entity(void *a1, const char *a2, ...)
{
  return _[a1 entity];
}

id objc_msgSend_enumerateBackgroundOperationsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateBackgroundOperationsUsingBlock:");
}

id objc_msgSend_enumerateCloudItemIDsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateCloudItemIDsUsingBlock:");
}

id objc_msgSend_enumerateHandlersForAccountState_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateHandlersForAccountState:usingBlock:");
}

id objc_msgSend_enumerateItemsInResponseData_usingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateItemsInResponseData:usingHandler:");
}

id objc_msgSend_enumerateItemsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateItemsUsingBlock:");
}

id objc_msgSend_enumerateKeyEntriesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeyEntriesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateOperationsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateOperationsUsingBlock:");
}

id objc_msgSend_enumeratePathsToDeleteFromLibrary_persistentIDs_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePathsToDeleteFromLibrary:persistentIDs:usingBlock:");
}

id objc_msgSend_enumeratePersistentIDsAfterRevision_revisionTrackingCode_maximumRevisionType_forMediaTypes_inUsersLibrary_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePersistentIDsAfterRevision:revisionTrackingCode:maximumRevisionType:forMediaTypes:inUsersLibrary:usingBlock:");
}

id objc_msgSend_enumeratePersistentIDsAndProperties_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePersistentIDsAndProperties:usingBlock:");
}

id objc_msgSend_enumeratePersistentIDsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePersistentIDsUsingBlock:");
}

id objc_msgSend_enumerateRawItemsInResponseData_usingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRawItemsInResponseData:usingHandler:");
}

id objc_msgSend_enumerateRowsWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRowsWithBlock:");
}

id objc_msgSend_enumeratorAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtPath:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralSessionConfiguration];
}

id objc_msgSend_equivalencySourceAdamID(void *a1, const char *a2, ...)
{
  return _[a1 equivalencySourceAdamID];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_eventDate(void *a1, const char *a2, ...)
{
  return _[a1 eventDate];
}

id objc_msgSend_eventTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 eventTimeZone];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executeQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:");
}

id objc_msgSend_executeQuery_withParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:withParameters:");
}

id objc_msgSend_executeUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeUpdate:");
}

id objc_msgSend_executeUpdate_withParameters_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeUpdate:withParameters:error:");
}

id objc_msgSend_existsInLibrary(void *a1, const char *a2, ...)
{
  return _[a1 existsInLibrary];
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_externalID(void *a1, const char *a2, ...)
{
  return _[a1 externalID];
}

id objc_msgSend_failedToConnect(void *a1, const char *a2, ...)
{
  return _[a1 failedToConnect];
}

id objc_msgSend_failureCount(void *a1, const char *a2, ...)
{
  return _[a1 failureCount];
}

id objc_msgSend_familyID(void *a1, const char *a2, ...)
{
  return _[a1 familyID];
}

id objc_msgSend_familyMemberStoreID(void *a1, const char *a2, ...)
{
  return _[a1 familyMemberStoreID];
}

id objc_msgSend_favoriteAlbumWithPersistentID_cloudLibraryID_time_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoriteAlbumWithPersistentID:cloudLibraryID:time:completionHandler:");
}

id objc_msgSend_favoriteArtistWithPersistentID_cloudLibraryID_time_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoriteArtistWithPersistentID:cloudLibraryID:time:completionHandler:");
}

id objc_msgSend_favoriteEntityWithPersistentID_sagaID_entityType_time_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoriteEntityWithPersistentID:sagaID:entityType:time:completionHandler:");
}

id objc_msgSend_favoriteEntityWithPersistentID_storeID_entityType_time_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoriteEntityWithPersistentID:storeID:entityType:time:completionHandler:");
}

id objc_msgSend_favoritePlaylistWithPersistentID_globalID_time_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoritePlaylistWithPersistentID:globalID:time:completionHandler:");
}

id objc_msgSend_featureName(void *a1, const char *a2, ...)
{
  return _[a1 featureName];
}

id objc_msgSend_featureValueForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureValueForName:");
}

id objc_msgSend_fetchConfigurationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConfigurationWithCompletionHandler:");
}

id objc_msgSend_fetchEnhancedAudioOfflineKeys(void *a1, const char *a2, ...)
{
  return _[a1 fetchEnhancedAudioOfflineKeys];
}

id objc_msgSend_fetchMissingOfflineKeys(void *a1, const char *a2, ...)
{
  return _[a1 fetchMissingOfflineKeys];
}

id objc_msgSend_fetchMusicUserProfileWithStoreRequestContext_ignoreCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMusicUserProfileWithStoreRequestContext:ignoreCache:completion:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandleForWritingToURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForWritingToURL:error:");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithPathComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPathComponents:");
}

id objc_msgSend_finalState(void *a1, const char *a2, ...)
{
  return _[a1 finalState];
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _[a1 finish];
}

id objc_msgSend_finishDecoding(void *a1, const char *a2, ...)
{
  return _[a1 finishDecoding];
}

id objc_msgSend_finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithError:");
}

id objc_msgSend_finishedUpdateOperationForLibraryType_withResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedUpdateOperationForLibraryType:withResponse:");
}

id objc_msgSend_firstName(void *a1, const char *a2, ...)
{
  return _[a1 firstName];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flushPendingPlayActivityEventsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushPendingPlayActivityEventsWithCompletionHandler:");
}

id objc_msgSend_followupUpdateOpertion(void *a1, const char *a2, ...)
{
  return _[a1 followupUpdateOpertion];
}

id objc_msgSend_geniusPlaylistPropertyForML3ContainerProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geniusPlaylistPropertyForML3ContainerProperty:");
}

id objc_msgSend_geniusTrackPropertyForML3TrackProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geniusTrackPropertyForML3TrackProperty:");
}

id objc_msgSend_geniusValueForML3ContainerProperty_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geniusValueForML3ContainerProperty:value:");
}

id objc_msgSend_geniusValueForML3TrackProperty_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geniusValueForML3TrackProperty:value:");
}

id objc_msgSend_geniusValueForMLValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geniusValueForMLValue:");
}

id objc_msgSend_getAccountNotificationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAccountNotificationsWithCompletionHandler:");
}

id objc_msgSend_getBagForRequestContext_forceRefetch_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBagForRequestContext:forceRefetch:withCompletionHandler:");
}

id objc_msgSend_getBagForRequestContext_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBagForRequestContext:withCompletionHandler:");
}

id objc_msgSend_getCachedContentTasteResponseForConnectionConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCachedContentTasteResponseForConnectionConfiguration:");
}

id objc_msgSend_getCookieWithName_userIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCookieWithName:userIdentifier:");
}

id objc_msgSend_getCurrentInstallDisposition(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentInstallDisposition];
}

id objc_msgSend_getKeyStatusForAccountUniqueIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKeyStatusForAccountUniqueIdentifier:error:");
}

id objc_msgSend_getLocalPlaybackPositionForEntityIdentifiers_forDomain_fromLibraryWithIdentifier_clientIdentity_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalPlaybackPositionForEntityIdentifiers:forDomain:fromLibraryWithIdentifier:clientIdentity:completionBlock:");
}

id objc_msgSend_getPlayActivityEvents_storeAccountID_limit_returningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPlayActivityEvents:storeAccountID:limit:returningError:");
}

id objc_msgSend_getPreExistingStoreIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 getPreExistingStoreIdentifiers];
}

id objc_msgSend_getPropertiesForUserIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPropertiesForUserIdentity:completionHandler:");
}

id objc_msgSend_getPropertiesForUserIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPropertiesForUserIdentity:error:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getResultsRequest(void *a1, const char *a2, ...)
{
  return _[a1 getResultsRequest];
}

id objc_msgSend_getStoreAccounts_returningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStoreAccounts:returningError:");
}

id objc_msgSend_getSubscriptionStatusForUserIdentity_bypassingCache_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSubscriptionStatusForUserIdentity:bypassingCache:withCompletionHandler:");
}

id objc_msgSend_getSubscriptionStatusForUserIdentity_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSubscriptionStatusForUserIdentity:withCompletionHandler:");
}

id objc_msgSend_getSubscriptionStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSubscriptionStatusWithCompletionHandler:");
}

id objc_msgSend_getTokenStatusForDSIDs_forcingRefresh_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTokenStatusForDSIDs:forcingRefresh:completion:");
}

id objc_msgSend_getUserStatesForcingRefresh_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUserStatesForcingRefresh:withReply:");
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValue:");
}

id objc_msgSend_getValuesForProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValuesForProperties:");
}

id objc_msgSend_getVerificationContextForUserIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getVerificationContextForUserIdentity:error:");
}

id objc_msgSend_globalIDToSagaIDMap(void *a1, const char *a2, ...)
{
  return _[a1 globalIDToSagaIDMap];
}

id objc_msgSend_globalPlaylistID(void *a1, const char *a2, ...)
{
  return _[a1 globalPlaylistID];
}

id objc_msgSend_globalSerialQueue(void *a1, const char *a2, ...)
{
  return _[a1 globalSerialQueue];
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return _[a1 handle];
}

id objc_msgSend_handleAccountStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAccountStateChange:");
}

id objc_msgSend_handleContentTasteChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 handleContentTasteChangedNotification];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleMusicAppInstalled(void *a1, const char *a2, ...)
{
  return _[a1 handleMusicAppInstalled];
}

id objc_msgSend_handleMusicAppRemoved(void *a1, const char *a2, ...)
{
  return _[a1 handleMusicAppRemoved];
}

id objc_msgSend_handleMusicAppRemovedWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMusicAppRemovedWithCompletion:");
}

id objc_msgSend_handleNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotification:");
}

id objc_msgSend_handleNotificationResponse_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotificationResponse:bag:");
}

id objc_msgSend_handleSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSuccess:");
}

id objc_msgSend_handlerCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 handlerCoordinator];
}

id objc_msgSend_handlerForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlerForConfiguration:");
}

id objc_msgSend_handlerProvider(void *a1, const char *a2, ...)
{
  return _[a1 handlerProvider];
}

id objc_msgSend_handlerWithType_configuration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlerWithType:configuration:error:");
}

id objc_msgSend_handlers(void *a1, const char *a2, ...)
{
  return _[a1 handlers];
}

id objc_msgSend_hasActiveDownloads(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveDownloads];
}

id objc_msgSend_hasAddToLibraryWhenFavoritingBehavior(void *a1, const char *a2, ...)
{
  return _[a1 hasAddToLibraryWhenFavoritingBehavior];
}

id objc_msgSend_hasAddToPlaylistBehavior(void *a1, const char *a2, ...)
{
  return _[a1 hasAddToPlaylistBehavior];
}

id objc_msgSend_hasAtLeastOneRow(void *a1, const char *a2, ...)
{
  return _[a1 hasAtLeastOneRow];
}

id objc_msgSend_hasBeenPlayed(void *a1, const char *a2, ...)
{
  return _[a1 hasBeenPlayed];
}

id objc_msgSend_hasBeenPreviouslyToggled(void *a1, const char *a2, ...)
{
  return _[a1 hasBeenPreviouslyToggled];
}

id objc_msgSend_hasCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCapability:");
}

id objc_msgSend_hasClientFeaturesVersion(void *a1, const char *a2, ...)
{
  return _[a1 hasClientFeaturesVersion];
}

id objc_msgSend_hasDeveloperToken(void *a1, const char *a2, ...)
{
  return _[a1 hasDeveloperToken];
}

id objc_msgSend_hasError(void *a1, const char *a2, ...)
{
  return _[a1 hasError];
}

id objc_msgSend_hasInfoForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasInfoForProperty:");
}

id objc_msgSend_hasModel(void *a1, const char *a2, ...)
{
  return _[a1 hasModel];
}

id objc_msgSend_hasNeedsResetSync(void *a1, const char *a2, ...)
{
  return _[a1 hasNeedsResetSync];
}

id objc_msgSend_hasOfflinePlaybackKeys(void *a1, const char *a2, ...)
{
  return _[a1 hasOfflinePlaybackKeys];
}

id objc_msgSend_hasOperationsOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOperationsOfClass:");
}

id objc_msgSend_hasOriginalArtworkForRelativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOriginalArtworkForRelativePath:");
}

id objc_msgSend_hasPendingPlayActivityEvents_returningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPendingPlayActivityEvents:returningError:");
}

id objc_msgSend_hasPendingPlayEvents(void *a1, const char *a2, ...)
{
  return _[a1 hasPendingPlayEvents];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProperNetworkConditionsToPlayMedia(void *a1, const char *a2, ...)
{
  return _[a1 hasProperNetworkConditionsToPlayMedia];
}

id objc_msgSend_hasProperNetworkConditionsToShowCloudMedia(void *a1, const char *a2, ...)
{
  return _[a1 hasProperNetworkConditionsToShowCloudMedia];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTokenCollection(void *a1, const char *a2, ...)
{
  return _[a1 hasTokenCollection];
}

id objc_msgSend_hasUserToken(void *a1, const char *a2, ...)
{
  return _[a1 hasUserToken];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashedDSID(void *a1, const char *a2, ...)
{
  return _[a1 hashedDSID];
}

id objc_msgSend_hideItemsWithPurchaseHistoryIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideItemsWithPurchaseHistoryIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_homeUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 homeUserIdentifiers];
}

id objc_msgSend_householdID(void *a1, const char *a2, ...)
{
  return _[a1 householdID];
}

id objc_msgSend_iCloudPersonID(void *a1, const char *a2, ...)
{
  return _[a1 iCloudPersonID];
}

id objc_msgSend_ic_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_DSID");
}

id objc_msgSend_ic_URLByAppendingQueryParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_URLByAppendingQueryParameters:");
}

id objc_msgSend_ic_activeStoreAccountWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_activeStoreAccountWithError:");
}

id objc_msgSend_ic_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_altDSID");
}

id objc_msgSend_ic_arrayValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_arrayValueForKey:");
}

id objc_msgSend_ic_cloudClientErrorWithCode_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_cloudClientErrorWithCode:userInfo:");
}

id objc_msgSend_ic_dataValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_dataValueForKey:");
}

id objc_msgSend_ic_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_defaultSessionConfiguration");
}

id objc_msgSend_ic_dictionaryValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_dictionaryValueForKey:");
}

id objc_msgSend_ic_intValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_intValueForKey:");
}

id objc_msgSend_ic_integerValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_integerValueForKey:");
}

id objc_msgSend_ic_isAutomaticDownloadsEnabledForMediaKindMusic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isAutomaticDownloadsEnabledForMediaKindMusic");
}

id objc_msgSend_ic_numberValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_numberValueForKey:");
}

id objc_msgSend_ic_referencesSameFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_referencesSameFile:");
}

id objc_msgSend_ic_sharedAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_sharedAccountStore");
}

id objc_msgSend_ic_sharedRequestOperationQueueWithQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_sharedRequestOperationQueueWithQualityOfService:");
}

id objc_msgSend_ic_storeAccountForStoreAccountID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_storeAccountForStoreAccountID:error:");
}

id objc_msgSend_ic_stringValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_stringValueForKey:");
}

id objc_msgSend_icd_isConnectionAllowedForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_isConnectionAllowedForService:");
}

id objc_msgSend_icd_preferredVideoQuality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_preferredVideoQuality");
}

id objc_msgSend_icd_sagaCloudFavoriteSongAddToLibraryBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_sagaCloudFavoriteSongAddToLibraryBehavior");
}

id objc_msgSend_icd_sagaDatabaseUserVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_sagaDatabaseUserVersion");
}

id objc_msgSend_icd_setPreferredVideoQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_setPreferredVideoQuality:");
}

id objc_msgSend_icd_setSagaCloudAddToPlaylistBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_setSagaCloudAddToPlaylistBehavior:");
}

id objc_msgSend_icd_setSagaCloudFavoriteSongAddToLibraryBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_setSagaCloudFavoriteSongAddToLibraryBehavior:");
}

id objc_msgSend_icd_setSagaDatabaseUserVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icd_setSagaDatabaseUserVersion:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifiers(void *a1, const char *a2, ...)
{
  return _[a1 identifiers];
}

id objc_msgSend_identity(void *a1, const char *a2, ...)
{
  return _[a1 identity];
}

id objc_msgSend_identityStore(void *a1, const char *a2, ...)
{
  return _[a1 identityStore];
}

id objc_msgSend_ignoreMinRefreshInterval(void *a1, const char *a2, ...)
{
  return _[a1 ignoreMinRefreshInterval];
}

id objc_msgSend_images(void *a1, const char *a2, ...)
{
  return _[a1 images];
}

id objc_msgSend_importAlbumArtistHeroImageForPersistentID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importAlbumArtistHeroImageForPersistentID:clientIdentity:completionHandler:");
}

id objc_msgSend_importAllItemArtworkAndScreenshotsWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importAllItemArtworkAndScreenshotsWithClientIdentity:");
}

id objc_msgSend_importAllItemArtworkWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importAllItemArtworkWithClientIdentity:");
}

id objc_msgSend_importArtistHeroImageForPersistentID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importArtistHeroImageForPersistentID:clientIdentity:completionHandler:");
}

id objc_msgSend_importArtworkForCloudID_artworkType_token_mediaType_allowsCellularData_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importArtworkForCloudID:artworkType:token:mediaType:allowsCellularData:clientIdentity:completionHandler:");
}

id objc_msgSend_importArtworkTokenForEntityPersistentID_entityType_artworkToken_artworkType_sourceType_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:usingConnection:");
}

id objc_msgSend_importCloudArtworkForRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importCloudArtworkForRequests:");
}

id objc_msgSend_importContainerArtworkForPersistentID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importContainerArtworkForPersistentID:clientIdentity:completionHandler:");
}

id objc_msgSend_importContainerArtworkForSagaID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importContainerArtworkForSagaID:clientIdentity:completionHandler:");
}

id objc_msgSend_importExistingOriginalArtworkWithArtworkToken_artworkType_sourceType_mediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importExistingOriginalArtworkWithArtworkToken:artworkType:sourceType:mediaType:");
}

id objc_msgSend_importItemArtworkForPersistentID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importItemArtworkForPersistentID:clientIdentity:completionHandler:");
}

id objc_msgSend_importItemArtworkForPurchaseHistoryID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importItemArtworkForPurchaseHistoryID:clientIdentity:completionHandler:");
}

id objc_msgSend_importItemArtworkForSagaID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importItemArtworkForSagaID:clientIdentity:completionHandler:");
}

id objc_msgSend_importOriginalArtworkFromFileURL_withArtworkToken_artworkType_sourceType_mediaType_shouldPerformColorAnalysis_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importOriginalArtworkFromFileURL:withArtworkToken:artworkType:sourceType:mediaType:shouldPerformColorAnalysis:completion:");
}

id objc_msgSend_importOriginalArtworkFromImageData_withArtworkToken_artworkType_sourceType_mediaType_shouldPerformColorAnalysis_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importOriginalArtworkFromImageData:withArtworkToken:artworkType:sourceType:mediaType:shouldPerformColorAnalysis:completion:");
}

id objc_msgSend_importScreenshotForPersistentID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importScreenshotForPersistentID:clientIdentity:completionHandler:");
}

id objc_msgSend_importScreenshotForPurchaseHistoryID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importScreenshotForPurchaseHistoryID:clientIdentity:completionHandler:");
}

id objc_msgSend_importScreenshotForSagaID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importScreenshotForSagaID:clientIdentity:completionHandler:");
}

id objc_msgSend_importTracksUpToRevision_clientIdentity_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importTracksUpToRevision:clientIdentity:withCompletionHandler:");
}

id objc_msgSend_importer(void *a1, const char *a2, ...)
{
  return _[a1 importer];
}

id objc_msgSend_includeCloudLibraryDAAPDebugFeature(void *a1, const char *a2, ...)
{
  return _[a1 includeCloudLibraryDAAPDebugFeature];
}

id objc_msgSend_includeFlavors(void *a1, const char *a2, ...)
{
  return _[a1 includeFlavors];
}

id objc_msgSend_includeHiddenItems(void *a1, const char *a2, ...)
{
  return _[a1 includeHiddenItems];
}

id objc_msgSend_includePreorders(void *a1, const char *a2, ...)
{
  return _[a1 includePreorders];
}

id objc_msgSend_includesBookmarkable(void *a1, const char *a2, ...)
{
  return _[a1 includesBookmarkable];
}

id objc_msgSend_increasePriority(void *a1, const char *a2, ...)
{
  return _[a1 increasePriority];
}

id objc_msgSend_increasePriorityForAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 increasePriorityForAllOperations];
}

id objc_msgSend_increaseQualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 increaseQualityOfService];
}

id objc_msgSend_incrementRevisionWithLibrary_persistentID_deletionType_revisionType_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementRevisionWithLibrary:persistentID:deletionType:revisionType:usingConnection:");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initUnboundedArchiveWithDirectoryPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initUnboundedArchiveWithDirectoryPath:");
}

id objc_msgSend_initUsingLocalDeviceLibraryDestinationWithImportElements_referralObject_usingLocalLibraryDestination_usingCloudLibraryDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initUsingLocalDeviceLibraryDestinationWithImportElements:referralObject:usingLocalLibraryDestination:usingCloudLibraryDestination:");
}

id objc_msgSend_initWithAccountManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountManager:");
}

id objc_msgSend_initWithAccountManager_handlerCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountManager:handlerCoordinator:");
}

id objc_msgSend_initWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAction:");
}

id objc_msgSend_initWithAction_databaseID_databaseRevision_opaqueID_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAction:databaseID:databaseRevision:opaqueID:bundleID:");
}

id objc_msgSend_initWithAdamID_date_score_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAdamID:date:score:");
}

id objc_msgSend_initWithApplicationMessage_bundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationMessage:bundleIdentifier:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithArtworkImporter_clientIdentity_operationQueue_artistPersistentIDsToUpdate_albumArtistPersistentIDsToUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArtworkImporter:clientIdentity:operationQueue:artistPersistentIDsToUpdate:albumArtistPersistentIDsToUpdate:");
}

id objc_msgSend_initWithArtworkResponseDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArtworkResponseDictionary:");
}

id objc_msgSend_initWithArtworkURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArtworkURL:");
}

id objc_msgSend_initWithAssertURL_artworkMediaType_artworkType_artworkToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssertURL:artworkMediaType:artworkType:artworkToken:");
}

id objc_msgSend_initWithBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBag:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBlock:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleIdentifier_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:queue:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientIdentity:");
}

id objc_msgSend_initWithClientInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientInfo:");
}

id objc_msgSend_initWithClientInfo_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientInfo:options:");
}

id objc_msgSend_initWithCode_headerFields_data_MIMEType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCode:headerFields:data:MIMEType:error:");
}

id objc_msgSend_initWithColorAnalysis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithColorAnalysis:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConfiguration_CUID_troveID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:CUID:troveID:");
}

id objc_msgSend_initWithConfiguration_adamID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:adamID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_adamID_playlistPersistentID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:adamID:playlistPersistentID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_adamID_playlistPersistentID_referralAlbumAdamID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:adamID:playlistPersistentID:referralAlbumAdamID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_adamID_playlistPersistentID_referralPlaylistGlobalID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:adamID:playlistPersistentID:referralPlaylistGlobalID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_adamID_referralAlbumAdamID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:adamID:referralAlbumAdamID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_adamID_referralPlaylistGlobalID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:adamID:referralPlaylistGlobalID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:bag:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_addToLibraryBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:addToLibraryBehavior:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_addToPlaylistBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:addToPlaylistBehavior:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_albumPersistentID_albumItemProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:albumPersistentID:albumItemProperties:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_albumPersistentID_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:albumPersistentID:properties:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_collaborationPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:collaborationPersistentID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_collaborationPersistentID_properties_trackEdits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:collaborationPersistentID:properties:trackEdits:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:dictionary:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_globalPlaylistID_invitationURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:globalPlaylistID:invitationURL:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_itemPurchaseHistoryIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:itemPurchaseHistoryIDs:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_itemSagaIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:itemSagaIDs:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_opaqueID_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:opaqueID:bundleID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_opaqueID_bundleID_playlistPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:opaqueID:bundleID:playlistPersistentID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_albumCloudLibraryID_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:albumCloudLibraryID:time:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_artistCloudLibraryID_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:artistCloudLibraryID:time:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_globalPlaylistID_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:globalPlaylistID:time:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:properties:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_socialProfileID_approval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:socialProfileID:approval:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_socialProfileIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:socialProfileIDs:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_persistentID_storeID_entityType_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:persistentID:storeID:entityType:time:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_playlistGlobalID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:playlistGlobalID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_playlistPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:playlistPersistentID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_playlistPersistentID_properties_trackList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:playlistPersistentID:properties:trackList:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_playlistPersistentID_properties_trackList_requestingBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:playlistPersistentID:properties:trackList:requestingBundleID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_playlistPersistentID_sharingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:playlistPersistentID:sharingMode:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_playlistSagaIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:playlistSagaIDs:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_purchaseHistoryID_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:purchaseHistoryID:properties:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:reason:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_reason_updateTaskHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:reason:updateTaskHelper:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_sagaID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:sagaID:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_sagaID_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:sagaID:properties:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_sagaIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:sagaIDs:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_seedID_numberOfItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:seedID:numberOfItems:");
}

id objc_msgSend_initWithConfiguration_clientIdentity_subscribedPlaylistSagaIDs_ignoreMinRefreshInterval_requestReason_pinnedOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientIdentity:subscribedPlaylistSagaIDs:ignoreMinRefreshInterval:requestReason:pinnedOnly:");
}

id objc_msgSend_initWithConfiguration_cloudIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:cloudIDs:");
}

id objc_msgSend_initWithConfiguration_geniusPlaylistPersistentID_playlistName_seedItemIDs_itemIDs_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:geniusPlaylistPersistentID:playlistName:seedItemIDs:itemIDs:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_itemSagaID_playlistPersistentID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:itemSagaID:playlistPersistentID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_itemSagaID_playlistPersistentID_clientIdentity_requestingBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:itemSagaID:playlistPersistentID:clientIdentity:requestingBundleID:");
}

id objc_msgSend_initWithConfiguration_maxConcurrentRequests_qualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:maxConcurrentRequests:qualityOfService:");
}

id objc_msgSend_initWithConfiguration_mergeToCloudLibraryPreference_allowNoisyAuthPrompt_enableLibraryReason_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:mergeToCloudLibraryPreference:allowNoisyAuthPrompt:enableLibraryReason:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_playlistPersistentID_properties_trackList_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:playlistPersistentID:properties:trackList:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_playlistPersistentID_properties_trackList_requestingBundleID_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:playlistPersistentID:properties:trackList:requestingBundleID:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_prefix_loggable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:prefix:loggable:");
}

id objc_msgSend_initWithConfiguration_progressObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:progressObserver:");
}

id objc_msgSend_initWithConfiguration_reason_supportedMediaKindsHandler_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:reason:supportedMediaKindsHandler:clientIdentity:");
}

id objc_msgSend_initWithConfiguration_sourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:sourceType:");
}

id objc_msgSend_initWithConfiguration_updateTaskHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:updateTaskHelper:");
}

id objc_msgSend_initWithConnection_serverInitiatedReset_clientInitiatedReset_clientFeaturesVersion_clientIdentity_fromRevision_toRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:serverInitiatedReset:clientInitiatedReset:clientFeaturesVersion:clientIdentity:fromRevision:toRevision:");
}

id objc_msgSend_initWithConnection_supportedMediaKindsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:supportedMediaKindsHandler:");
}

id objc_msgSend_initWithContentItemSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentItemSnapshot:");
}

id objc_msgSend_initWithContentTasteUpdateItem_invalidateLocalCache_configuration_operationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentTasteUpdateItem:invalidateLocalCache:configuration:operationIdentifier:");
}

id objc_msgSend_initWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfFile:options:error:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:options:error:");
}

id objc_msgSend_initWithContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:completionHandler:");
}

id objc_msgSend_initWithDSID_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDSID:altDSID:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDatabaseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:");
}

id objc_msgSend_initWithDatabaseID_albumArtistCloudLibraryIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:albumArtistCloudLibraryIDs:properties:");
}

id objc_msgSend_initWithDatabaseID_albumCloudLibraryIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:albumCloudLibraryIDs:properties:");
}

id objc_msgSend_initWithDatabaseID_cloudIDs_itemKind_useLongIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:cloudIDs:itemKind:useLongIDs:");
}

id objc_msgSend_initWithDatabaseID_containerIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:containerIDs:");
}

id objc_msgSend_initWithDatabaseID_containerIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:containerIDs:properties:");
}

id objc_msgSend_initWithDatabaseID_databaseRevision_adamID_sagaID_playlistGlobalID_containerID_referralAlbumAdamID_referralPlaylistGlobalID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:databaseRevision:adamID:sagaID:playlistGlobalID:containerID:referralAlbumAdamID:referralPlaylistGlobalID:");
}

id objc_msgSend_initWithDatabaseID_databaseRevision_addToLibraryBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:databaseRevision:addToLibraryBehavior:");
}

id objc_msgSend_initWithDatabaseID_databaseRevision_addToPlaylistBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:databaseRevision:addToPlaylistBehavior:");
}

id objc_msgSend_initWithDatabaseID_databaseRevision_containerID_trackList_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:databaseRevision:containerID:trackList:properties:");
}

id objc_msgSend_initWithDatabaseID_databaseRevision_playlistProperties_trackList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:databaseRevision:playlistProperties:trackList:");
}

id objc_msgSend_initWithDatabaseID_databaseRevision_playlistProperties_trackList_requestingBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:databaseRevision:playlistProperties:trackList:requestingBundleID:");
}

id objc_msgSend_initWithDatabaseID_globalPlaylistID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:globalPlaylistID:");
}

id objc_msgSend_initWithDatabaseID_globalPlaylistID_invitationURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:globalPlaylistID:invitationURL:");
}

id objc_msgSend_initWithDatabaseID_globalPlaylistID_socialProfileID_approval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:globalPlaylistID:socialProfileID:approval:");
}

id objc_msgSend_initWithDatabaseID_globalPlaylistID_socialProfileIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:globalPlaylistID:socialProfileIDs:");
}

id objc_msgSend_initWithDatabaseID_itemIDs_properties_useLongIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:itemIDs:properties:useLongIDs:");
}

id objc_msgSend_initWithDatabaseID_itemIDs_useLongIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:itemIDs:useLongIDs:");
}

id objc_msgSend_initWithDatabaseID_metadataFilter_queryFilter_purchaseTokens_includeHiddenItems_includePreorders_paginationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:metadataFilter:queryFilter:purchaseTokens:includeHiddenItems:includePreorders:paginationToken:");
}

id objc_msgSend_initWithDatabaseID_paginationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:paginationToken:");
}

id objc_msgSend_initWithDatabaseID_playlistName_seedItemIDs_itemIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:playlistName:seedItemIDs:itemIDs:");
}

id objc_msgSend_initWithDatabaseID_playlistSagaID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:playlistSagaID:");
}

id objc_msgSend_initWithDatabaseID_playlistSagaID_cloudLibraryRevision_properties_trackEdits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:playlistSagaID:cloudLibraryRevision:properties:trackEdits:");
}

id objc_msgSend_initWithDatabaseID_playlistSagaID_sharingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:playlistSagaID:sharingMode:");
}

id objc_msgSend_initWithDatabaseID_sagaIDs_itemKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:sagaIDs:itemKind:");
}

id objc_msgSend_initWithDatabaseID_seedID_numberOfItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:seedID:numberOfItems:");
}

id objc_msgSend_initWithDatabaseRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseRevision:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDeveloperToken_clientInfo_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeveloperToken:clientInfo:options:");
}

id objc_msgSend_initWithDeveloperToken_userToken_userTokenFetchingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeveloperToken:userToken:userTokenFetchingError:");
}

id objc_msgSend_initWithDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:error:");
}

id objc_msgSend_initWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionaryRepresentation:");
}

id objc_msgSend_initWithDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithDownloaderAccountID_purchaserAccountID_familyID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDownloaderAccountID:purchaserAccountID:familyID:");
}

id objc_msgSend_initWithEntity_artworkType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntity:artworkType:");
}

id objc_msgSend_initWithEntity_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntity:clientIdentity:");
}

id objc_msgSend_initWithEntityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntityType:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithGlobalPlaylistID_contentTaste_configuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGlobalPlaylistID:contentTaste:configuration:");
}

id objc_msgSend_initWithHandlerProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandlerProvider:");
}

id objc_msgSend_initWithIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentity:");
}

id objc_msgSend_initWithIdentity_identityStore_clientInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentity:identityStore:clientInfo:");
}

id objc_msgSend_initWithInfo_timeout_forResponseOnQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInfo:timeout:forResponseOnQueue:withHandler:");
}

id objc_msgSend_initWithKeyOptions_valueOptions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyOptions:valueOptions:capacity:");
}

id objc_msgSend_initWithKindsToExclude_supportedMediaKindsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKindsToExclude:supportedMediaKindsHandler:");
}

id objc_msgSend_initWithLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibrary:");
}

id objc_msgSend_initWithLibraryIdentifier_domain_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryIdentifier:domain:clientIdentity:");
}

id objc_msgSend_initWithLibraryManagementPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryManagementPolicy:");
}

id objc_msgSend_initWithLibraryManagementPolicy_backgroundTaskScheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryManagementPolicy:backgroundTaskScheduler:");
}

id objc_msgSend_initWithLibraryPath_trackData_playlistData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryPath:trackData:playlistData:");
}

id objc_msgSend_initWithLibraryPath_trackData_playlistData_albumArtistData_albumData_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryPath:trackData:playlistData:albumArtistData:albumData:clientIdentity:");
}

id objc_msgSend_initWithLibraryPath_trackData_playlistData_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryPath:trackData:playlistData:clientIdentity:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithLookupItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLookupItems:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMediaAPIResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMediaAPIResponse:");
}

id objc_msgSend_initWithMessageUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessageUserInfo:");
}

id objc_msgSend_initWithNSError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNSError:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithNewArtistContentResponseModel_andMLModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNewArtistContentResponseModel:andMLModel:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOperation:");
}

id objc_msgSend_initWithOperationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOperationQueue:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithOutputFileHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOutputFileHandle:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPersistentID_inLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentID:inLibrary:");
}

id objc_msgSend_initWithPlayActivityTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlayActivityTable:");
}

id objc_msgSend_initWithPrivacyIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivacyIdentifier:");
}

id objc_msgSend_initWithPrivacyIdentifier_identity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivacyIdentifier:identity:");
}

id objc_msgSend_initWithProperties_relationships_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperties:relationships:");
}

id objc_msgSend_initWithProtobufData_type_isResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtobufData:type:isResponse:");
}

id objc_msgSend_initWithRemoteRequestOperationResponse_remoteRequestOperationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRemoteRequestOperationResponse:remoteRequestOperationError:");
}

id objc_msgSend_initWithRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:");
}

id objc_msgSend_initWithRequestContext_allowsExplicitContent_isAutomatic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:allowsExplicitContent:isAutomatic:");
}

id objc_msgSend_initWithRequestContext_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:completionBlock:");
}

id objc_msgSend_initWithRequestContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:completionHandler:");
}

id objc_msgSend_initWithRequestContext_keyStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:keyStore:");
}

id objc_msgSend_initWithRequestContext_mediaKindsToAdd_mediaKindsToRemove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:mediaKindsToAdd:mediaKindsToRemove:");
}

id objc_msgSend_initWithRequestContext_notificationType_notificationParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:notificationType:notificationParameters:");
}

id objc_msgSend_initWithRequestContext_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:token:");
}

id objc_msgSend_initWithResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResponse:");
}

id objc_msgSend_initWithResponse_data_userInfo_storagePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResponse:data:userInfo:storagePolicy:");
}

id objc_msgSend_initWithResponseDictionary_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResponseDictionary:forDomain:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithServiceName_viewControllerClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:viewControllerClassName:");
}

id objc_msgSend_initWithShape_dataType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShape:dataType:error:");
}

id objc_msgSend_initWithSong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSong:");
}

id objc_msgSend_initWithSourceType_configuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSourceType:configuration:");
}

id objc_msgSend_initWithSourceURL_preferredImageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSourceURL:preferredImageSize:");
}

id objc_msgSend_initWithStartHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartHandler:");
}

id objc_msgSend_initWithStoreID_globalPlaylistID_albumCloudLibraryID_artistCloudLibraryID_entityType_time_databaseID_databaseRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreID:globalPlaylistID:albumCloudLibraryID:artistCloudLibraryID:entityType:time:databaseID:databaseRevision:");
}

id objc_msgSend_initWithStoreItemID_additionalTrackMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreItemID:additionalTrackMetadata:");
}

id objc_msgSend_initWithStoreItemID_mediaContentTasteItem_contentTaste_configuration_timeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreItemID:mediaContentTasteItem:contentTaste:configuration:timeStamp:");
}

id objc_msgSend_initWithStoreRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreRequestContext:");
}

id objc_msgSend_initWithStoreRequestContext_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreRequestContext:params:");
}

id objc_msgSend_initWithStoreRequestContext_subscriptionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreRequestContext:subscriptionStatus:");
}

id objc_msgSend_initWithStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStream:");
}

id objc_msgSend_initWithSubscribedPlaylistCloudIDs_cloudLibraryConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscribedPlaylistCloudIDs:cloudLibraryConnection:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithSystemApplicationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSystemApplicationType:");
}

id objc_msgSend_initWithTemporaryFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTemporaryFileURL:");
}

id objc_msgSend_initWithTitle_andStoreAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:andStoreAdamID:");
}

id objc_msgSend_initWithToken_artworkType_musicLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithToken:artworkType:musicLibrary:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_requestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:requestContext:");
}

id objc_msgSend_initWithURLRequest_requestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLRequest:requestContext:");
}

id objc_msgSend_initWithURLRequest_requestContext_resumeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLRequest:requestContext:resumeData:");
}

id objc_msgSend_initWithURLSession_configuration_cloudID_artworkToken_artworkType_sourceType_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLSession:configuration:cloudID:artworkToken:artworkType:sourceType:clientIdentity:");
}

id objc_msgSend_initWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedChar:");
}

id objc_msgSend_initWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedLong:");
}

id objc_msgSend_initWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedLongLong:");
}

id objc_msgSend_initWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedShort:");
}

id objc_msgSend_initWithUserIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserIdentity:");
}

id objc_msgSend_initWithUserIdentity_userIdentityStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserIdentity:userIdentityStore:");
}

id objc_msgSend_initWithUserIdentity_userIdentityStore_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserIdentity:userIdentityStore:clientIdentity:");
}

id objc_msgSend_initWithUserInteractionLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserInteractionLevel:");
}

id objc_msgSend_initWithVerificationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVerificationContext:");
}

id objc_msgSend_initialState(void *a1, const char *a2, ...)
{
  return _[a1 initialState];
}

id objc_msgSend_inputStreamWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputStreamWithData:");
}

id objc_msgSend_inputStreamWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputStreamWithURL:");
}

id objc_msgSend_insertPlayActivityEvent_returningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertPlayActivityEvent:returningError:");
}

id objc_msgSend_insertPropertiesForUserIdentity_andPostAccountChangeNotification_usingBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertPropertiesForUserIdentity:andPostAccountChangeNotification:usingBlock:completionHandler:");
}

id objc_msgSend_insertPropertiesForUserIdentity_usingBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertPropertiesForUserIdentity:usingBlock:completionHandler:");
}

id objc_msgSend_instanceMethodForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceMethodForSelector:");
}

id objc_msgSend_int64ForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "int64ForColumnIndex:");
}

id objc_msgSend_int64ValueForBagKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "int64ValueForBagKey:");
}

id objc_msgSend_int64ValueForFirstRowAndColumn(void *a1, const char *a2, ...)
{
  return _[a1 int64ValueForFirstRowAndColumn];
}

id objc_msgSend_intForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intForColumnIndex:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interestDictionary(void *a1, const char *a2, ...)
{
  return _[a1 interestDictionary];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 internalOperationQueue];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateCachedSubscriptionStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateCachedSubscriptionStatusWithCompletionHandler:");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isActiveLocker(void *a1, const char *a2, ...)
{
  return _[a1 isActiveLocker];
}

id objc_msgSend_isActiveUser(void *a1, const char *a2, ...)
{
  return _[a1 isActiveUser];
}

id objc_msgSend_isAppleTV(void *a1, const char *a2, ...)
{
  return _[a1 isAppleTV];
}

id objc_msgSend_isAudioAccessory(void *a1, const char *a2, ...)
{
  return _[a1 isAudioAccessory];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCellularDataRestrictedForMusic(void *a1, const char *a2, ...)
{
  return _[a1 isCellularDataRestrictedForMusic];
}

id objc_msgSend_isCellularDataRestrictedForStoreApps(void *a1, const char *a2, ...)
{
  return _[a1 isCellularDataRestrictedForStoreApps];
}

id objc_msgSend_isCellularDataRestrictedForVideos(void *a1, const char *a2, ...)
{
  return _[a1 isCellularDataRestrictedForVideos];
}

id objc_msgSend_isCharging(void *a1, const char *a2, ...)
{
  return _[a1 isCharging];
}

id objc_msgSend_isCollaborativePlaylist(void *a1, const char *a2, ...)
{
  return _[a1 isCollaborativePlaylist];
}

id objc_msgSend_isCurrentDeviceValidHomeAccessory(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentDeviceValidHomeAccessory];
}

id objc_msgSend_isCurrentNetworkLinkHighQuality(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentNetworkLinkHighQuality];
}

id objc_msgSend_isDeviceClassCUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceClassCUnlocked];
}

id objc_msgSend_isDeviceSetupComplete(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceSetupComplete];
}

id objc_msgSend_isEnablingCloudLibraryDestructive(void *a1, const char *a2, ...)
{
  return _[a1 isEnablingCloudLibraryDestructive];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExplicit(void *a1, const char *a2, ...)
{
  return _[a1 isExplicit];
}

id objc_msgSend_isExplicitSettingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isExplicitSettingEnabled];
}

id objc_msgSend_isExplicitUserAction(void *a1, const char *a2, ...)
{
  return _[a1 isExplicitUserAction];
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isIPhone(void *a1, const char *a2, ...)
{
  return _[a1 isIPhone];
}

id objc_msgSend_isIPod(void *a1, const char *a2, ...)
{
  return _[a1 isIPod];
}

id objc_msgSend_isInitialImport(void *a1, const char *a2, ...)
{
  return _[a1 isInitialImport];
}

id objc_msgSend_isInitialUpdate(void *a1, const char *a2, ...)
{
  return _[a1 isInitialUpdate];
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return _[a1 isInternalBuild];
}

id objc_msgSend_isMac(void *a1, const char *a2, ...)
{
  return _[a1 isMac];
}

id objc_msgSend_isManageable(void *a1, const char *a2, ...)
{
  return _[a1 isManageable];
}

id objc_msgSend_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 isManagedAppleID];
}

id objc_msgSend_isMatchEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isMatchEnabled];
}

id objc_msgSend_isMediaKindDisabledForJaliscoLibrary_clientIdentity_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMediaKindDisabledForJaliscoLibrary:clientIdentity:completion:");
}

id objc_msgSend_isMediaSyncingSupported(void *a1, const char *a2, ...)
{
  return _[a1 isMediaSyncingSupported];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isNSArray__(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNSArray__");
}

id objc_msgSend_isNSData__(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNSData__");
}

id objc_msgSend_isNSString__(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNSString__");
}

id objc_msgSend_isNetworkActivityIndicatorVisible(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkActivityIndicatorVisible];
}

id objc_msgSend_isOffline(void *a1, const char *a2, ...)
{
  return _[a1 isOffline];
}

id objc_msgSend_isOnboarded(void *a1, const char *a2, ...)
{
  return _[a1 isOnboarded];
}

id objc_msgSend_isPersistent(void *a1, const char *a2, ...)
{
  return _[a1 isPersistent];
}

id objc_msgSend_isPhoneNumberAccessRestricted(void *a1, const char *a2, ...)
{
  return _[a1 isPhoneNumberAccessRestricted];
}

id objc_msgSend_isPrivateListeningEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isPrivateListeningEnabled];
}

id objc_msgSend_isPrivateListeningEnabledForCurrentAccessory(void *a1, const char *a2, ...)
{
  return _[a1 isPrivateListeningEnabledForCurrentAccessory];
}

id objc_msgSend_isROSDevice(void *a1, const char *a2, ...)
{
  return _[a1 isROSDevice];
}

id objc_msgSend_isRemoteServerLikelyReachable(void *a1, const char *a2, ...)
{
  return _[a1 isRemoteServerLikelyReachable];
}

id objc_msgSend_isRemoteServerReachable(void *a1, const char *a2, ...)
{
  return _[a1 isRemoteServerReachable];
}

id objc_msgSend_isSBEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSBEnabled];
}

id objc_msgSend_isSetupAssistantComplete(void *a1, const char *a2, ...)
{
  return _[a1 isSetupAssistantComplete];
}

id objc_msgSend_isSetupCompleted(void *a1, const char *a2, ...)
{
  return _[a1 isSetupCompleted];
}

id objc_msgSend_isSiriInitiated(void *a1, const char *a2, ...)
{
  return _[a1 isSiriInitiated];
}

id objc_msgSend_isSpatialized(void *a1, const char *a2, ...)
{
  return _[a1 isSpatialized];
}

id objc_msgSend_isStartupSequenceCompleted(void *a1, const char *a2, ...)
{
  return _[a1 isStartupSequenceCompleted];
}

id objc_msgSend_isToggled(void *a1, const char *a2, ...)
{
  return _[a1 isToggled];
}

id objc_msgSend_isUpdatingCloudLibraryWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUpdatingCloudLibraryWithCompletion:");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isWatch(void *a1, const char *a2, ...)
{
  return _[a1 isWatch];
}

id objc_msgSend_isWiFiAssociated(void *a1, const char *a2, ...)
{
  return _[a1 isWiFiAssociated];
}

id objc_msgSend_itemAdamID(void *a1, const char *a2, ...)
{
  return _[a1 itemAdamID];
}

id objc_msgSend_itemDuration(void *a1, const char *a2, ...)
{
  return _[a1 itemDuration];
}

id objc_msgSend_itemEndTime(void *a1, const char *a2, ...)
{
  return _[a1 itemEndTime];
}

id objc_msgSend_itemForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemForIdentifier:");
}

id objc_msgSend_itemIDs(void *a1, const char *a2, ...)
{
  return _[a1 itemIDs];
}

id objc_msgSend_itemKind(void *a1, const char *a2, ...)
{
  return _[a1 itemKind];
}

id objc_msgSend_itemPersistentIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 itemPersistentIdentifier];
}

id objc_msgSend_itemPositionUUID(void *a1, const char *a2, ...)
{
  return _[a1 itemPositionUUID];
}

id objc_msgSend_itemStartTime(void *a1, const char *a2, ...)
{
  return _[a1 itemStartTime];
}

id objc_msgSend_itemType(void *a1, const char *a2, ...)
{
  return _[a1 itemType];
}

id objc_msgSend_itemUUID(void *a1, const char *a2, ...)
{
  return _[a1 itemUUID];
}

id objc_msgSend_jaliscoAccountID(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoAccountID];
}

id objc_msgSend_jaliscoChangedMediaTypes(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoChangedMediaTypes];
}

id objc_msgSend_jaliscoGetSortedMediaKinds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jaliscoGetSortedMediaKinds:");
}

id objc_msgSend_jaliscoHasCloudGeniusData(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoHasCloudGeniusData];
}

id objc_msgSend_jaliscoLastExcludedMediaKinds(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoLastExcludedMediaKinds];
}

id objc_msgSend_jaliscoLastLibraryUpdateTime(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoLastLibraryUpdateTime];
}

id objc_msgSend_jaliscoLastSupportedMediaKinds(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoLastSupportedMediaKinds];
}

id objc_msgSend_jaliscoLibrary(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoLibrary];
}

id objc_msgSend_jaliscoLibraryWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jaliscoLibraryWithReason:");
}

id objc_msgSend_jaliscoNeedsUpdateForTokens(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoNeedsUpdateForTokens];
}

id objc_msgSend_jaliscoOnDiskDatabaseRevision(void *a1, const char *a2, ...)
{
  return _[a1 jaliscoOnDiskDatabaseRevision];
}

id objc_msgSend_joinCollaborationWithGlobalPlaylistID_invitationURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "joinCollaborationWithGlobalPlaylistID:invitationURL:completion:");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyData(void *a1, const char *a2, ...)
{
  return _[a1 keyData];
}

id objc_msgSend_keyValueStorePayloadWithEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyValueStorePayloadWithEntity:");
}

id objc_msgSend_kindWithVariants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kindWithVariants:");
}

id objc_msgSend_knownAccountDSIDs(void *a1, const char *a2, ...)
{
  return _[a1 knownAccountDSIDs];
}

id objc_msgSend_knownActiveAccountDSID(void *a1, const char *a2, ...)
{
  return _[a1 knownActiveAccountDSID];
}

id objc_msgSend_lastDevicePlaybackDate(void *a1, const char *a2, ...)
{
  return _[a1 lastDevicePlaybackDate];
}

id objc_msgSend_lastError(void *a1, const char *a2, ...)
{
  return _[a1 lastError];
}

id objc_msgSend_lastKnownExplicitContentAllowed(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownExplicitContentAllowed];
}

id objc_msgSend_lastKnownLocalStoreAccountProperties(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownLocalStoreAccountProperties];
}

id objc_msgSend_lastKnownMusicSubscriptionType(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownMusicSubscriptionType];
}

id objc_msgSend_lastKnownMusicVideosAllowed(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownMusicVideosAllowed];
}

id objc_msgSend_lastName(void *a1, const char *a2, ...)
{
  return _[a1 lastName];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastPlayedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastPlayedDate];
}

id objc_msgSend_lastSyncedDomainVersion(void *a1, const char *a2, ...)
{
  return _[a1 lastSyncedDomainVersion];
}

id objc_msgSend_lastSyncedEntityRevision(void *a1, const char *a2, ...)
{
  return _[a1 lastSyncedEntityRevision];
}

id objc_msgSend_lastUpdatedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdatedDate];
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_legacyScore(void *a1, const char *a2, ...)
{
  return _[a1 legacyScore];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_library(void *a1, const char *a2, ...)
{
  return _[a1 library];
}

id objc_msgSend_libraryAddedDate(void *a1, const char *a2, ...)
{
  return _[a1 libraryAddedDate];
}

id objc_msgSend_libraryBagKey(void *a1, const char *a2, ...)
{
  return _[a1 libraryBagKey];
}

id objc_msgSend_libraryContainerPath(void *a1, const char *a2, ...)
{
  return _[a1 libraryContainerPath];
}

id objc_msgSend_libraryDAAPConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 libraryDAAPConfiguration];
}

id objc_msgSend_libraryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 libraryIdentifier];
}

id objc_msgSend_libraryManagementPolicy(void *a1, const char *a2, ...)
{
  return _[a1 libraryManagementPolicy];
}

id objc_msgSend_libraryUID(void *a1, const char *a2, ...)
{
  return _[a1 libraryUID];
}

id objc_msgSend_libraryUpdateRequired(void *a1, const char *a2, ...)
{
  return _[a1 libraryUpdateRequired];
}

id objc_msgSend_libraryWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryWithIdentifier:");
}

id objc_msgSend_lightweightSubscriptionStatus(void *a1, const char *a2, ...)
{
  return _[a1 lightweightSubscriptionStatus];
}

id objc_msgSend_linkItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkItemAtURL:toURL:error:");
}

id objc_msgSend_listCloudServerOperations(void *a1, const char *a2, ...)
{
  return _[a1 listCloudServerOperations];
}

id objc_msgSend_loadArtworkInfoForContainerSagaIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArtworkInfoForContainerSagaIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_loadArtworkInfoForPurchaseHistoryIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArtworkInfoForPurchaseHistoryIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_loadArtworkInfoForSagaIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArtworkInfoForSagaIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_loadArtworkInfoForSubscriptionContainerPersistentIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArtworkInfoForSubscriptionContainerPersistentIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_loadArtworkInfoForSubscriptionItemPersistentIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArtworkInfoForSubscriptionItemPersistentIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_loadBooksForStoreIDs_clientIdentity_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadBooksForStoreIDs:clientIdentity:withCompletionHandler:");
}

id objc_msgSend_loadGeniusItemsForSagaID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadGeniusItemsForSagaID:clientIdentity:completionHandler:");
}

id objc_msgSend_loadLastKnownEnableICMLStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadLastKnownEnableICMLStatusWithCompletionHandler:");
}

id objc_msgSend_loadMissingArtworkWithClientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadMissingArtworkWithClientIdentity:");
}

id objc_msgSend_loadScreenshotInfoForPurchaseHistoryIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadScreenshotInfoForPurchaseHistoryIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_loadScreenshotInfoForSagaIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadScreenshotInfoForSagaIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_loadScreenshotInfoForSubscriptionPersistentIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadScreenshotInfoForSubscriptionPersistentIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_localDatabaseRevision(void *a1, const char *a2, ...)
{
  return _[a1 localDatabaseRevision];
}

id objc_msgSend_localStoreAccountProperties(void *a1, const char *a2, ...)
{
  return _[a1 localStoreAccountProperties];
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_logCategory(void *a1, const char *a2, ...)
{
  return _[a1 logCategory];
}

id objc_msgSend_logCloudAddRequestDescription(void *a1, const char *a2, ...)
{
  return _[a1 logCloudAddRequestDescription];
}

id objc_msgSend_logEvent_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logEvent:payload:");
}

id objc_msgSend_loginRequestInFlight(void *a1, const char *a2, ...)
{
  return _[a1 loginRequestInFlight];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_lyricsDisplayedCharacterCount(void *a1, const char *a2, ...)
{
  return _[a1 lyricsDisplayedCharacterCount];
}

id objc_msgSend_lyricsID(void *a1, const char *a2, ...)
{
  return _[a1 lyricsID];
}

id objc_msgSend_lyricsInfoDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 lyricsInfoDictionaries];
}

id objc_msgSend_lyricsLanguage(void *a1, const char *a2, ...)
{
  return _[a1 lyricsLanguage];
}

id objc_msgSend_machServiceListener(void *a1, const char *a2, ...)
{
  return _[a1 machServiceListener];
}

id objc_msgSend_machServiceName(void *a1, const char *a2, ...)
{
  return _[a1 machServiceName];
}

id objc_msgSend_main(void *a1, const char *a2, ...)
{
  return _[a1 main];
}

id objc_msgSend_mainScreenSize(void *a1, const char *a2, ...)
{
  return _[a1 mainScreenSize];
}

id objc_msgSend_mapProperty_toCode_valueType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapProperty:toCode:valueType:");
}

id objc_msgSend_mappedDataWithContentsOfTemporaryFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mappedDataWithContentsOfTemporaryFileURL:error:");
}

id objc_msgSend_maxConcurrentOperationCount(void *a1, const char *a2, ...)
{
  return _[a1 maxConcurrentOperationCount];
}

id objc_msgSend_maxRetryCount(void *a1, const char *a2, ...)
{
  return _[a1 maxRetryCount];
}

id objc_msgSend_maxSupportedSize(void *a1, const char *a2, ...)
{
  return _[a1 maxSupportedSize];
}

id objc_msgSend_maxSyncRetryIntervalSeconds(void *a1, const char *a2, ...)
{
  return _[a1 maxSyncRetryIntervalSeconds];
}

id objc_msgSend_mediaAPIRequestURL(void *a1, const char *a2, ...)
{
  return _[a1 mediaAPIRequestURL];
}

id objc_msgSend_mediaFilter(void *a1, const char *a2, ...)
{
  return _[a1 mediaFilter];
}

id objc_msgSend_mediaFolderPathByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaFolderPathByAppendingPathComponent:");
}

id objc_msgSend_mediaKinds(void *a1, const char *a2, ...)
{
  return _[a1 mediaKinds];
}

id objc_msgSend_mediaLibraryAccessApplicationIdentifiersWithTCCAcceptanceDates(void *a1, const char *a2, ...)
{
  return _[a1 mediaLibraryAccessApplicationIdentifiersWithTCCAcceptanceDates];
}

id objc_msgSend_mediaPlayerBundle(void *a1, const char *a2, ...)
{
  return _[a1 mediaPlayerBundle];
}

id objc_msgSend_mediaType(void *a1, const char *a2, ...)
{
  return _[a1 mediaType];
}

id objc_msgSend_mediaUserStateCenterServer(void *a1, const char *a2, ...)
{
  return _[a1 mediaUserStateCenterServer];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeToCloudLibraryPreference(void *a1, const char *a2, ...)
{
  return _[a1 mergeToCloudLibraryPreference];
}

id objc_msgSend_messageEntriesForBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageEntriesForBundleIdentifier:completion:");
}

id objc_msgSend_messageEntryWithIdentifier_bundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageEntryWithIdentifier:bundleIdentifier:completion:");
}

id objc_msgSend_metadataDictionary(void *a1, const char *a2, ...)
{
  return _[a1 metadataDictionary];
}

id objc_msgSend_metadataFilter(void *a1, const char *a2, ...)
{
  return _[a1 metadataFilter];
}

id objc_msgSend_metadataKeys(void *a1, const char *a2, ...)
{
  return _[a1 metadataKeys];
}

id objc_msgSend_metadataWithItemIdentifier_keyValueStorePayload_failuresOkay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataWithItemIdentifier:keyValueStorePayload:failuresOkay:");
}

id objc_msgSend_metadataWithPlaybackPositionKey_failuresOkay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataWithPlaybackPositionKey:failuresOkay:");
}

id objc_msgSend_method(void *a1, const char *a2, ...)
{
  return _[a1 method];
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return _[a1 metrics];
}

id objc_msgSend_migrateExistingArtworkToken_newArtworkToken_newSourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateExistingArtworkToken:newArtworkToken:newSourceType:");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mlModel(void *a1, const char *a2, ...)
{
  return _[a1 mlModel];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _[a1 model];
}

id objc_msgSend_modelWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelWithContentsOfURL:error:");
}

id objc_msgSend_moduleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 moduleIdentifier];
}

id objc_msgSend_msv_analyticSignature(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_analyticSignature");
}

id objc_msgSend_msv_compactDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_compactDescription");
}

id objc_msgSend_msv_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_description");
}

id objc_msgSend_msv_errorByRemovingUnsafeUserInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_errorByRemovingUnsafeUserInfo");
}

id objc_msgSend_msv_errorWithDomain_code_debugDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_errorWithDomain:code:debugDescription:");
}

id objc_msgSend_msv_errorWithDomain_code_underlyingError_debugDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_errorWithDomain:code:underlyingError:debugDescription:");
}

id objc_msgSend_msv_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_filter:");
}

id objc_msgSend_msv_map_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_map:");
}

id objc_msgSend_msv_uploadTaskWithRequest_fromData_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "msv_uploadTaskWithRequest:fromData:completionHandler:");
}

id objc_msgSend_multiArrayValue(void *a1, const char *a2, ...)
{
  return _[a1 multiArrayValue];
}

id objc_msgSend_music(void *a1, const char *a2, ...)
{
  return _[a1 music];
}

id objc_msgSend_musicLibrary(void *a1, const char *a2, ...)
{
  return _[a1 musicLibrary];
}

id objc_msgSend_musicLibraryForUserAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "musicLibraryForUserAccount:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_needsResetSync(void *a1, const char *a2, ...)
{
  return _[a1 needsResetSync];
}

id objc_msgSend_needsUpdateForTokens(void *a1, const char *a2, ...)
{
  return _[a1 needsUpdateForTokens];
}

id objc_msgSend_networkAvailabilityService(void *a1, const char *a2, ...)
{
  return _[a1 networkAvailabilityService];
}

id objc_msgSend_networkType(void *a1, const char *a2, ...)
{
  return _[a1 networkType];
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_newImporter(void *a1, const char *a2, ...)
{
  return _[a1 newImporter];
}

id objc_msgSend_newWithPersistentID_inLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithPersistentID:inLibrary:");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_notificationCenter_didChangeSettings_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationCenter:didChangeSettings:bag:");
}

id objc_msgSend_notificationWithName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationWithName:object:userInfo:");
}

id objc_msgSend_notificationsManager_didReceiveActiveUserIdentityDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveActiveUserIdentityDidChangeNotification:");
}

id objc_msgSend_notificationsManager_didReceiveAllowsExplicitContentDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveAllowsExplicitContentDidChangeNotification:");
}

id objc_msgSend_notificationsManager_didReceiveAllowsMusicVideosDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveAllowsMusicVideosDidChangeNotification:");
}

id objc_msgSend_notificationsManager_didReceiveApplicationInstallationNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveApplicationInstallationNotification:");
}

id objc_msgSend_notificationsManager_didReceiveAuthServiceTokenDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveAuthServiceTokenDidChangeNotification:");
}

id objc_msgSend_notificationsManager_didReceiveFamilyDeletionEventNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveFamilyDeletionEventNotification:");
}

id objc_msgSend_notificationsManager_didReceiveHandlerCoordinatorFinishedInitializationNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveHandlerCoordinatorFinishedInitializationNotification:");
}

id objc_msgSend_notificationsManager_didReceiveNotificationChangingUserState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveNotificationChangingUserState:");
}

id objc_msgSend_notificationsManager_didReceiveSubscriptionStatusDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveSubscriptionStatusDidChangeNotification:");
}

id objc_msgSend_notificationsManager_didReceiveUserIdentityStoreDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManager:didReceiveUserIdentityStoreDidChangeNotification:");
}

id objc_msgSend_notificationsManagerDidReceiveBuddySetupDoneDarwinNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceiveBuddySetupDoneDarwinNotification:");
}

id objc_msgSend_notificationsManagerDidReceiveCellularDataRestrictionDidChangeDarwinNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceiveCellularDataRestrictionDidChangeDarwinNotification:");
}

id objc_msgSend_notificationsManagerDidReceiveCloudAuthenticationDidChangeDarwinNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceiveCloudAuthenticationDidChangeDarwinNotification:");
}

id objc_msgSend_notificationsManagerDidReceiveFamilyCircleChangedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceiveFamilyCircleChangedNotification:");
}

id objc_msgSend_notificationsManagerDidReceiveFirstUnlockNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceiveFirstUnlockNotification:");
}

id objc_msgSend_notificationsManagerDidReceiveLibraryImportDidFinishDarwinNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceiveLibraryImportDidFinishDarwinNotification:");
}

id objc_msgSend_notificationsManagerDidReceiveMusicSettingsChangedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceiveMusicSettingsChangedNotification:");
}

id objc_msgSend_notificationsManagerDidReceivePhoneNumberChangedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidReceivePhoneNumberChangedNotification:");
}

id objc_msgSend_notificationsManagerDidRecieveICPlayActivityFlushInternalTestRequestNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsManagerDidRecieveICPlayActivityFlushInternalTestRequestNotification:");
}

id objc_msgSend_notifyCloudLibraryAvailabilityDidChange(void *a1, const char *a2, ...)
{
  return _[a1 notifyCloudLibraryAvailabilityDidChange];
}

id objc_msgSend_notifyContentsDidChange(void *a1, const char *a2, ...)
{
  return _[a1 notifyContentsDidChange];
}

id objc_msgSend_notifyEntitiesAddedOrRemoved(void *a1, const char *a2, ...)
{
  return _[a1 notifyEntitiesAddedOrRemoved];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberForBagKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberForBagKey:");
}

id objc_msgSend_numberForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberForColumnIndex:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForFirstRowAndColumn(void *a1, const char *a2, ...)
{
  return _[a1 objectForFirstRowAndColumn];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForSetting:");
}

id objc_msgSend_objectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsPassingTest:");
}

id objc_msgSend_onDiskRevision(void *a1, const char *a2, ...)
{
  return _[a1 onDiskRevision];
}

id objc_msgSend_opaqueID(void *a1, const char *a2, ...)
{
  return _[a1 opaqueID];
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_operationCount(void *a1, const char *a2, ...)
{
  return _[a1 operationCount];
}

id objc_msgSend_operationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 operationIdentifier];
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _[a1 operationQueue];
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _[a1 operations];
}

id objc_msgSend_originalArtworkDirectory(void *a1, const char *a2, ...)
{
  return _[a1 originalArtworkDirectory];
}

id objc_msgSend_originalFileURL(void *a1, const char *a2, ...)
{
  return _[a1 originalFileURL];
}

id objc_msgSend_originatingClientConnection(void *a1, const char *a2, ...)
{
  return _[a1 originatingClientConnection];
}

id objc_msgSend_outputStreamToFileAtPath_append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputStreamToFileAtPath:append:");
}

id objc_msgSend_oversizeLogCategory(void *a1, const char *a2, ...)
{
  return _[a1 oversizeLogCategory];
}

id objc_msgSend_parse(void *a1, const char *a2, ...)
{
  return _[a1 parse];
}

id objc_msgSend_parseErrorInResponseData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseErrorInResponseData:");
}

id objc_msgSend_parseItemWithBytes_length_valuesOut_valuesCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseItemWithBytes:length:valuesOut:valuesCapacity:");
}

id objc_msgSend_parseResponseData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseData:");
}

id objc_msgSend_parsedBodyDictionary(void *a1, const char *a2, ...)
{
  return _[a1 parsedBodyDictionary];
}

id objc_msgSend_parserSuccess(void *a1, const char *a2, ...)
{
  return _[a1 parserSuccess];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForResourceFileOrFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResourceFileOrFolder:");
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_payloadDataForUpdateResponseKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadDataForUpdateResponseKey:");
}

id objc_msgSend_payloadDownloadPathOverride(void *a1, const char *a2, ...)
{
  return _[a1 payloadDownloadPathOverride];
}

id objc_msgSend_pendingBackgroundTasksData(void *a1, const char *a2, ...)
{
  return _[a1 pendingBackgroundTasksData];
}

id objc_msgSend_pendingChanges(void *a1, const char *a2, ...)
{
  return _[a1 pendingChanges];
}

id objc_msgSend_pendingChangesCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 pendingChangesCoordinator];
}

id objc_msgSend_pendingInvalidationKeyStorePath(void *a1, const char *a2, ...)
{
  return _[a1 pendingInvalidationKeyStorePath];
}

id objc_msgSend_performBlockAfterDeviceSetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAfterDeviceSetup:");
}

id objc_msgSend_performDatabaseTransactionWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performDatabaseTransactionWithBlock:");
}

id objc_msgSend_performImport_fromSource_withProgressBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performImport:fromSource:withProgressBlock:completionHandler:");
}

id objc_msgSend_performLibraryAnalysisFromResponse_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performLibraryAnalysisFromResponse:withCompletionHandler:");
}

id objc_msgSend_performMaintenanceTasksForDatabaseAtPath_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMaintenanceTasksForDatabaseAtPath:withCompletionHandler:");
}

id objc_msgSend_performReadOnlyDatabaseTransactionWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performReadOnlyDatabaseTransactionWithBlock:");
}

id objc_msgSend_performRequestOnOperationQueue_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRequestOnOperationQueue:withCompletionHandler:");
}

id objc_msgSend_performRequestWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRequestWithCompletionHandler:");
}

id objc_msgSend_performRequestWithResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRequestWithResponseHandler:");
}

id objc_msgSend_performStoreAlbumArtistLibraryImport_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performStoreAlbumArtistLibraryImport:withCompletion:");
}

id objc_msgSend_performSubscriptionStatusRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSubscriptionStatusRequest:withCompletionHandler:");
}

id objc_msgSend_performSubscriptionStatusRequest_withStatusHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSubscriptionStatusRequest:withStatusHandler:");
}

id objc_msgSend_performTransactionWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTransactionWithBlock:");
}

id objc_msgSend_performUpdate(void *a1, const char *a2, ...)
{
  return _[a1 performUpdate];
}

id objc_msgSend_performUpdateWithClientIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performUpdateWithClientIdentity:error:");
}

id objc_msgSend_performUpdateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performUpdateWithCompletionHandler:");
}

id objc_msgSend_performWithResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithResponseHandler:");
}

id objc_msgSend_performanceMetrics(void *a1, const char *a2, ...)
{
  return _[a1 performanceMetrics];
}

id objc_msgSend_persistPlaybackPositionWithContext_isCheckpoint_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistPlaybackPositionWithContext:isCheckpoint:completionHandler:");
}

id objc_msgSend_persistentID(void *a1, const char *a2, ...)
{
  return _[a1 persistentID];
}

id objc_msgSend_personalizedContainerID(void *a1, const char *a2, ...)
{
  return _[a1 personalizedContainerID];
}

id objc_msgSend_playActivityEvents(void *a1, const char *a2, ...)
{
  return _[a1 playActivityEvents];
}

id objc_msgSend_playCount(void *a1, const char *a2, ...)
{
  return _[a1 playCount];
}

id objc_msgSend_playDataBatchIntervalInMinutes(void *a1, const char *a2, ...)
{
  return _[a1 playDataBatchIntervalInMinutes];
}

id objc_msgSend_playbackFormatPreference(void *a1, const char *a2, ...)
{
  return _[a1 playbackFormatPreference];
}

id objc_msgSend_playbackPositionDomain(void *a1, const char *a2, ...)
{
  return _[a1 playbackPositionDomain];
}

id objc_msgSend_playbackPositionKey(void *a1, const char *a2, ...)
{
  return _[a1 playbackPositionKey];
}

id objc_msgSend_playbackPositionService(void *a1, const char *a2, ...)
{
  return _[a1 playbackPositionService];
}

id objc_msgSend_playlistCloudLibraryID(void *a1, const char *a2, ...)
{
  return _[a1 playlistCloudLibraryID];
}

id objc_msgSend_playlistGlobalID(void *a1, const char *a2, ...)
{
  return _[a1 playlistGlobalID];
}

id objc_msgSend_playlistSagaID(void *a1, const char *a2, ...)
{
  return _[a1 playlistSagaID];
}

id objc_msgSend_playlistShareURL(void *a1, const char *a2, ...)
{
  return _[a1 playlistShareURL];
}

id objc_msgSend_playlistVersionHash(void *a1, const char *a2, ...)
{
  return _[a1 playlistVersionHash];
}

id objc_msgSend_positionType(void *a1, const char *a2, ...)
{
  return _[a1 positionType];
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_powerAssertionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 powerAssertionIdentifier];
}

id objc_msgSend_predicateMatchingPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingPredicates:");
}

id objc_msgSend_predicateWithProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:");
}

id objc_msgSend_predicateWithProperty_equalToInt64_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:equalToInt64:");
}

id objc_msgSend_predicateWithProperty_equalToInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:equalToInteger:");
}

id objc_msgSend_predicateWithProperty_equalToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:equalToValue:");
}

id objc_msgSend_predicateWithProperty_mask_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:mask:value:");
}

id objc_msgSend_predicateWithProperty_value_comparison_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:value:comparison:");
}

id objc_msgSend_predicateWithProperty_values_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:values:");
}

id objc_msgSend_predictionFromFeatures_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predictionFromFeatures:error:");
}

id objc_msgSend_preferredVideoQuality(void *a1, const char *a2, ...)
{
  return _[a1 preferredVideoQuality];
}

id objc_msgSend_prefetchSKDs(void *a1, const char *a2, ...)
{
  return _[a1 prefetchSKDs];
}

id objc_msgSend_preflightImport(void *a1, const char *a2, ...)
{
  return _[a1 preflightImport];
}

id objc_msgSend_presentWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentWithCompletion:");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privacyAcknowledgementPolicy(void *a1, const char *a2, ...)
{
  return _[a1 privacyAcknowledgementPolicy];
}

id objc_msgSend_privacyAcknowledgementRequiredForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privacyAcknowledgementRequiredForIdentifier:");
}

id objc_msgSend_privacyAcknowledgementRequiredForMedia(void *a1, const char *a2, ...)
{
  return _[a1 privacyAcknowledgementRequiredForMedia];
}

id objc_msgSend_privacyAcknowledgementRequiredForMusic(void *a1, const char *a2, ...)
{
  return _[a1 privacyAcknowledgementRequiredForMusic];
}

id objc_msgSend_privacyConsciousDescription(void *a1, const char *a2, ...)
{
  return _[a1 privacyConsciousDescription];
}

id objc_msgSend_privacyConsciousDictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 privacyConsciousDictionaryRepresentation];
}

id objc_msgSend_processAddedItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processAddedItems:");
}

id objc_msgSend_processDAAPFileAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processDAAPFileAtURL:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processKeyWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processKeyWithIdentifier:");
}

id objc_msgSend_processPendingChangesUsingLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPendingChangesUsingLibrary:");
}

id objc_msgSend_processPendingKeyInvalidations(void *a1, const char *a2, ...)
{
  return _[a1 processPendingKeyInvalidations];
}

id objc_msgSend_processedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 processedItemCount];
}

id objc_msgSend_profileName(void *a1, const char *a2, ...)
{
  return _[a1 profileName];
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _[a1 progress];
}

id objc_msgSend_prohibitArtworkPrefetch(void *a1, const char *a2, ...)
{
  return _[a1 prohibitArtworkPrefetch];
}

id objc_msgSend_prohibitLibraryUpload(void *a1, const char *a2, ...)
{
  return _[a1 prohibitLibraryUpload];
}

id objc_msgSend_propertyListObjectWithPlayActivityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListObjectWithPlayActivityEvent:");
}

id objc_msgSend_propertyListRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 propertyListRepresentation];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_propertySetWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertySetWithProperties:");
}

id objc_msgSend_providedAudioQuality(void *a1, const char *a2, ...)
{
  return _[a1 providedAudioQuality];
}

id objc_msgSend_publicToken(void *a1, const char *a2, ...)
{
  return _[a1 publicToken];
}

id objc_msgSend_publishPlaylistWithSagaID_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publishPlaylistWithSagaID:clientIdentity:completionHandler:");
}

id objc_msgSend_pullPlaybackPositionWithRequestContext_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pullPlaybackPositionWithRequestContext:completionBlock:");
}

id objc_msgSend_purchaseClientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 purchaseClientIdentifier];
}

id objc_msgSend_purchaseTokens(void *a1, const char *a2, ...)
{
  return _[a1 purchaseTokens];
}

id objc_msgSend_purchasedAdamID(void *a1, const char *a2, ...)
{
  return _[a1 purchasedAdamID];
}

id objc_msgSend_purchaserAccountID(void *a1, const char *a2, ...)
{
  return _[a1 purchaserAccountID];
}

id objc_msgSend_pushEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 pushEnvironment];
}

id objc_msgSend_pushNotificationState(void *a1, const char *a2, ...)
{
  return _[a1 pushNotificationState];
}

id objc_msgSend_pushPlaybackPositionWithContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushPlaybackPositionWithContext:completionHandler:");
}

id objc_msgSend_qualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfService];
}

id objc_msgSend_queryFilter(void *a1, const char *a2, ...)
{
  return _[a1 queryFilter];
}

id objc_msgSend_queryFilterPercentEscaped(void *a1, const char *a2, ...)
{
  return _[a1 queryFilterPercentEscaped];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryStoreIDs(void *a1, const char *a2, ...)
{
  return _[a1 queryStoreIDs];
}

id objc_msgSend_queryWithLibrary_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryWithLibrary:predicate:");
}

id objc_msgSend_queryWithLibrary_predicate_usingSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryWithLibrary:predicate:usingSections:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queueGroupingID(void *a1, const char *a2, ...)
{
  return _[a1 queueGroupingID];
}

id objc_msgSend_radioAdamID(void *a1, const char *a2, ...)
{
  return _[a1 radioAdamID];
}

id objc_msgSend_raise(void *a1, const char *a2, ...)
{
  return _[a1 raise];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rePinCollectionsForClasses_configuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rePinCollectionsForClasses:configuration:");
}

id objc_msgSend_reactionString(void *a1, const char *a2, ...)
{
  return _[a1 reactionString];
}

id objc_msgSend_readUbiquitousDatabaseMetadataValuesForIdentifiers_forDomain_clientIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readUbiquitousDatabaseMetadataValuesForIdentifiers:forDomain:clientIdentity:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_reasonHintType(void *a1, const char *a2, ...)
{
  return _[a1 reasonHintType];
}

id objc_msgSend_recoId(void *a1, const char *a2, ...)
{
  return _[a1 recoId];
}

id objc_msgSend_recommendationData(void *a1, const char *a2, ...)
{
  return _[a1 recommendationData];
}

id objc_msgSend_referencePositionUUID(void *a1, const char *a2, ...)
{
  return _[a1 referencePositionUUID];
}

id objc_msgSend_refreshEnhancedAudioSharedKeys(void *a1, const char *a2, ...)
{
  return _[a1 refreshEnhancedAudioSharedKeys];
}

id objc_msgSend_refreshSharedKeys(void *a1, const char *a2, ...)
{
  return _[a1 refreshSharedKeys];
}

id objc_msgSend_refreshSocialProfilesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshSocialProfilesWithReply:");
}

id objc_msgSend_refreshSubscriptionUsingRequestContext_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshSubscriptionUsingRequestContext:withCompletionHandler:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_registrationStateForAccountDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registrationStateForAccountDSID:");
}

id objc_msgSend_releaseDate(void *a1, const char *a2, ...)
{
  return _[a1 releaseDate];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteRequestOperation(void *a1, const char *a2, ...)
{
  return _[a1 remoteRequestOperation];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllPendingChanges(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPendingChanges];
}

id objc_msgSend_removeAllPendingChangesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllPendingChangesWithCompletion:");
}

id objc_msgSend_removeAllUbiquitousMetadataUsingClientIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllUbiquitousMetadataUsingClientIdentity:error:");
}

id objc_msgSend_removeCachedContentTasteResponseForConnectionConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCachedContentTasteResponseForConnectionConfiguration:");
}

id objc_msgSend_removeCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInString:");
}

id objc_msgSend_removeCloudSouceAttributes(void *a1, const char *a2, ...)
{
  return _[a1 removeCloudSouceAttributes];
}

id objc_msgSend_removeCloudSourcesWithAttributes_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCloudSourcesWithAttributes:completionHandler:");
}

id objc_msgSend_removeCollaborators_fromCollaborationWithPersistentID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCollaborators:fromCollaborationWithPersistentID:completion:");
}

id objc_msgSend_removeContentTasteOperationsForConnectionConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeContentTasteOperationsForConnectionConfiguration:");
}

id objc_msgSend_removeCookiesWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCookiesWithProperties:");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeItemsWithFamilyAccountID_purchaserAccountID_downloaderAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemsWithFamilyAccountID:purchaserAccountID:downloaderAccountID:");
}

id objc_msgSend_removeItemsWithSagaIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemsWithSagaIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_removeKeyForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeKeyForIdentifier:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeLibraryWithClientIdentity_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLibraryWithClientIdentity:completion:");
}

id objc_msgSend_removeMessageEntryWithIdentifier_forBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMessageEntryWithIdentifier:forBundleIdentifier:completion:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeOrphanedCollectionsInLibrary_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeOrphanedCollectionsInLibrary:usingConnection:");
}

id objc_msgSend_removePendingAddedItemsForPermanentlyFailedOperation(void *a1, const char *a2, ...)
{
  return _[a1 removePendingAddedItemsForPermanentlyFailedOperation];
}

id objc_msgSend_removePendingChanges(void *a1, const char *a2, ...)
{
  return _[a1 removePendingChanges];
}

id objc_msgSend_removePlayActivityEvents_returningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePlayActivityEvents:returningError:");
}

id objc_msgSend_removePlaylistsWithSagaIDs_clientIdentity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePlaylistsWithSagaIDs:clientIdentity:completionHandler:");
}

id objc_msgSend_removeSource_usingConnection_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSource:usingConnection:withCompletionHandler:");
}

id objc_msgSend_removeSource_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSource:withCompletionHandler:");
}

id objc_msgSend_renewalDate(void *a1, const char *a2, ...)
{
  return _[a1 renewalDate];
}

id objc_msgSend_repeatPlayMode(void *a1, const char *a2, ...)
{
  return _[a1 repeatPlayMode];
}

id objc_msgSend_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
}

id objc_msgSend_reportingAdamID(void *a1, const char *a2, ...)
{
  return _[a1 reportingAdamID];
}

id objc_msgSend_requestCapabilitiesWithPrivacyPromptPolicy_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCapabilitiesWithPrivacyPromptPolicy:completionHandler:");
}

id objc_msgSend_requestItem(void *a1, const char *a2, ...)
{
  return _[a1 requestItem];
}

id objc_msgSend_requestPersonalizationStyle(void *a1, const char *a2, ...)
{
  return _[a1 requestPersonalizationStyle];
}

id objc_msgSend_requestReason(void *a1, const char *a2, ...)
{
  return _[a1 requestReason];
}

id objc_msgSend_requestURLForBaseURL_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestURLForBaseURL:sessionID:");
}

id objc_msgSend_requestWithDatabaseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDatabaseID:");
}

id objc_msgSend_requestWithDatabaseID_albumArtistCloudLibraryIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDatabaseID:albumArtistCloudLibraryIDs:properties:");
}

id objc_msgSend_requestWithDatabaseID_albumCloudLibraryIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDatabaseID:albumCloudLibraryIDs:properties:");
}

id objc_msgSend_requestWithDatabaseID_containerIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDatabaseID:containerIDs:");
}

id objc_msgSend_requestWithDatabaseID_containerIDs_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDatabaseID:containerIDs:properties:");
}

id objc_msgSend_requestWithDatabaseID_databaseRevision_adamID_containerID_referralAlbumAdamID_referralPlaylistGlobalID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDatabaseID:databaseRevision:adamID:containerID:referralAlbumAdamID:referralPlaylistGlobalID:");
}

id objc_msgSend_requestWithDatabaseID_databaseRevision_addToLibraryBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDatabaseID:databaseRevision:addToLibraryBehavior:");
}