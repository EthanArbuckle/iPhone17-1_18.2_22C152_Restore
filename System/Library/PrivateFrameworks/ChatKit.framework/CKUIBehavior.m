@interface CKUIBehavior
+ (BOOL)_shouldUseClarityUI;
+ (BOOL)isPreferredContentSizeCategoryGreaterThanOrEqualTo:(id)a3;
+ (id)font:(id)a3 adjustedForMaxSizeCategory:(id)a4;
+ (id)fontWithStyle:(id)a3 adjustedForMaxSizeCategory:(id)a4;
+ (id)orderedContentSizeCategories;
+ (id)sharedBehaviors;
+ (void)testOverrideClearSharedBehaviors;
- (BOOL)_isVerticallyCompact;
- (BOOL)alwaysShowSelectionInConversationList;
- (BOOL)areBannersSupported;
- (BOOL)attributionViewShouldCenterInTranscript;
- (BOOL)automaticallyShowsKeyboard;
- (BOOL)browserButtonShouldUseExternalMenu;
- (BOOL)browserButtonShouldUseMenu;
- (BOOL)calculatesWidthForAttachmentBalloons;
- (BOOL)cameraIsAllowlisted;
- (BOOL)canAccessContacts;
- (BOOL)canAccessPhotos;
- (BOOL)canPluginBalloonsUseOpaqueMask;
- (BOOL)canPresentOverKeyboard;
- (BOOL)canShowContactPhotosInConversationList;
- (BOOL)canTapAssociatedAcknowledgment;
- (BOOL)canUseWindowedSendAnimation;
- (BOOL)ckShouldUpdate_breadcrumbTranscriptTextAttributes;
- (BOOL)ckShouldUpdate_drawerTranscriptTextAttributes;
- (BOOL)ckShouldUpdate_leftStatusTranscriptTextAttributes;
- (BOOL)ckShouldUpdate_leftTranscriptButtonTextAttributes;
- (BOOL)ckShouldUpdate_rightStatusTranscriptTextAttributes;
- (BOOL)ckShouldUpdate_rightTranscriptButtonTextAttributes;
- (BOOL)ckShouldUpdate_senderTranscriptTextAttributes;
- (BOOL)ckShouldUpdate_stewieTranscriptEmergencyServiceAttributes;
- (BOOL)ckShouldUpdate_stewieTranscriptEmergencyUserAttributes;
- (BOOL)ckShouldUpdate_transcriptAvailabilityDeemphasizedFontAttributes;
- (BOOL)ckShouldUpdate_transcriptAvailabilityFontAttributes;
- (BOOL)ckShouldUpdate_transcriptEmergencyEmphasizedFontAttributes;
- (BOOL)ckShouldUpdate_transcriptEmphasizedFontAttributes;
- (BOOL)ckShouldUpdate_transcriptEmphasizedPreferredFontAttributes;
- (BOOL)ckShouldUpdate_transcriptErrorStampPreferredFontAttributes;
- (BOOL)ckShouldUpdate_transcriptGroupModificationErrorEmphasizedFontAttributes;
- (BOOL)ckShouldUpdate_transcriptGroupModificationErrorRegularFontAttributes;
- (BOOL)ckShouldUpdate_transcriptNotifyAnywayFontAttributes;
- (BOOL)ckShouldUpdate_transcriptRegularFontAttributes;
- (BOOL)ckShouldUpdate_transcriptRegularPreferredFontAttributes;
- (BOOL)ckShouldUpdate_transcriptSMSEmphasizedFontAttributes;
- (BOOL)ckShouldUpdate_transcriptSatelliteFontAttributes;
- (BOOL)ckShouldUpdate_transcriptiMessageEmphasizedFontAttributes;
- (BOOL)ckShouldUpdateaccessibilityBottomConversationListSpace;
- (BOOL)ckShouldUpdateaddContactFont;
- (BOOL)ckShouldUpdateappLabelFont;
- (BOOL)ckShouldUpdateattachmentBalloonRichIconInsets;
- (BOOL)ckShouldUpdateattachmentSubtitleTextFont;
- (BOOL)ckShouldUpdateattachmentTextFont;
- (BOOL)ckShouldUpdateattributionCountViewFont;
- (BOOL)ckShouldUpdateaudioBalloonAlignmentInsets;
- (BOOL)ckShouldUpdateaudioBalloonProgressInset;
- (BOOL)ckShouldUpdateaudioBalloonSpeedFont;
- (BOOL)ckShouldUpdateaudioBalloonTimeFont;
- (BOOL)ckShouldUpdateaudioBalloonTimeInset;
- (BOOL)ckShouldUpdateaudioBalloonTranscriptionFont;
- (BOOL)ckShouldUpdateaudioHintFont;
- (BOOL)ckShouldUpdateavatarNameEmergencyFont;
- (BOOL)ckShouldUpdateavatarNameFont;
- (BOOL)ckShouldUpdateavatarStackTitleFont;
- (BOOL)ckShouldUpdateballoonParagraphStyle;
- (BOOL)ckShouldUpdateballoonSubjectFont;
- (BOOL)ckShouldUpdateballoonTextContainerInset;
- (BOOL)ckShouldUpdateballoonTextFont;
- (BOOL)ckShouldUpdatebigEmojiFont;
- (BOOL)ckShouldUpdatebottomConversationListSpace;
- (BOOL)ckShouldUpdatebottomTranscriptSpace;
- (BOOL)ckShouldUpdatebrowserCellFont;
- (BOOL)ckShouldUpdatebusinessDescriptionVCTextViewFont;
- (BOOL)ckShouldUpdatebusinessInfoViewDescriptionTextFont;
- (BOOL)ckShouldUpdatebusinessInfoViewGreetingTextFont;
- (BOOL)ckShouldUpdatebusinessInfoViewTitleLabelFont;
- (BOOL)ckShouldUpdatecenterTranscriptButtonTextAttributes;
- (BOOL)ckShouldUpdatecharacterCountFont;
- (BOOL)ckShouldUpdatecharacterCountSatelliteFont;
- (BOOL)ckShouldUpdatecontactAttachmentNameFont;
- (BOOL)ckShouldUpdatecontactAttachmentOrgFont;
- (BOOL)ckShouldUpdatecontactPhotoTranscriptInsets;
- (BOOL)ckShouldUpdatecontextMenuCancelScheduledMessageIcon;
- (BOOL)ckShouldUpdatecontextMenuUndoSendIcon;
- (BOOL)ckShouldUpdateconversationCellSummaryBoldPreviewTextAttributes;
- (BOOL)ckShouldUpdateconversationCellSummaryPreviewTextAttributes;
- (BOOL)ckShouldUpdateconversationListBoldSummaryFont;
- (BOOL)ckShouldUpdateconversationListCellBackgroundPadding;
- (BOOL)ckShouldUpdateconversationListCellLeftMargin;
- (BOOL)ckShouldUpdateconversationListCellMaxSummaryLength;
- (BOOL)ckShouldUpdateconversationListCellRightMargin;
- (BOOL)ckShouldUpdateconversationListCellRoundSelectorLeftInset;
- (BOOL)ckShouldUpdateconversationListCellRoundSelectorRightInset;
- (BOOL)ckShouldUpdateconversationListCellSummaryNumberOfLines;
- (BOOL)ckShouldUpdateconversationListCellUsesLargeTextLayout;
- (BOOL)ckShouldUpdateconversationListDateFont;
- (BOOL)ckShouldUpdateconversationListDropTargetInstructionFont;
- (BOOL)ckShouldUpdateconversationListFacetimeAudioIcon;
- (BOOL)ckShouldUpdateconversationListFacetimeVideoIcon;
- (BOOL)ckShouldUpdateconversationListFocusFilterBannerCollapsedDisabledIcon;
- (BOOL)ckShouldUpdateconversationListFocusFilterBannerCollapsedEnabledIcon;
- (BOOL)ckShouldUpdateconversationListFocusFilterBannerDisabledIcon;
- (BOOL)ckShouldUpdateconversationListFocusFilterBannerEnabledIcon;
- (BOOL)ckShouldUpdateconversationListFocusFilterBannerShouldUseAccessabilityLayout;
- (BOOL)ckShouldUpdateconversationListFocusFilterBannerTitleFont;
- (BOOL)ckShouldUpdateconversationListFocusFilterBannerTitleValueFont;
- (BOOL)ckShouldUpdateconversationListGroupCountFont;
- (BOOL)ckShouldUpdateconversationListLargeTitleReducedFont;
- (BOOL)ckShouldUpdateconversationListLargeTitleStandardFont;
- (BOOL)ckShouldUpdateconversationListPinnedConversationNameFont;
- (BOOL)ckShouldUpdateconversationListSenderBodyLeading;
- (BOOL)ckShouldUpdateconversationListSenderFont;
- (BOOL)ckShouldUpdateconversationListSharePlayIcon;
- (BOOL)ckShouldUpdateconversationListSummaryBodyLeading;
- (BOOL)ckShouldUpdateconversationListSummaryFont;
- (BOOL)ckShouldUpdatedefaultBalloonTextFont;
- (BOOL)ckShouldUpdatedownloadButtonFont;
- (BOOL)ckShouldUpdateencryptedServiceIcon;
- (BOOL)ckShouldUpdateentryViewAppButtonName;
- (BOOL)ckShouldUpdateentryViewArrowButtonName;
- (BOOL)ckShouldUpdateentryViewAudioButtonName;
- (BOOL)ckShouldUpdateentryViewDictationButtonName;
- (BOOL)ckShouldUpdateentryViewKeyboardButtonName;
- (BOOL)ckShouldUpdateentryViewPhotoButtonName;
- (BOOL)ckShouldUpdateentryViewPlusButtonName;
- (BOOL)ckShouldUpdateentryViewSendButtonName;
- (BOOL)ckShouldUpdateentryViewTextOneLineHeight;
- (BOOL)ckShouldUpdateentryViewlayoutMetrics;
- (BOOL)ckShouldUpdateextraLargeTranscriptSpace;
- (BOOL)ckShouldUpdatefacetimeAudioIcon;
- (BOOL)ckShouldUpdatefilterCellTitleFont;
- (BOOL)ckShouldUpdatehawkingWarningIcon;
- (BOOL)ckShouldUpdateheaderFont;
- (BOOL)ckShouldUpdateiCloudTextFont;
- (BOOL)ckShouldUpdateisAccessibilityPreferredContentSizeCategory;
- (BOOL)ckShouldUpdatelargeTextTopConversationListSpace;
- (BOOL)ckShouldUpdatelargeTranscriptSpace;
- (BOOL)ckShouldUpdatelocationBoldButtonFont;
- (BOOL)ckShouldUpdatelocationButtonFont;
- (BOOL)ckShouldUpdatelocationShareActionIcon;
- (BOOL)ckShouldUpdatelocationSubtitleFont;
- (BOOL)ckShouldUpdatemediumLargeTranscriptSpace;
- (BOOL)ckShouldUpdatemediumTranscriptSpace;
- (BOOL)ckShouldUpdatemessageAcknowledgmentVoteCountFont;
- (BOOL)ckShouldUpdatemessageStampWarningIconRed;
- (BOOL)ckShouldUpdatemessageStatusWarningIconRed;
- (BOOL)ckShouldUpdateminTranscriptSpace;
- (BOOL)ckShouldUpdatemultipleBigEmojiFont;
- (BOOL)ckShouldUpdatenameFieldFont;
- (BOOL)ckShouldUpdatenavBarGlyphFont;
- (BOOL)ckShouldUpdatenavBarUnifiedCallButtonJoinTextFont;
- (BOOL)ckShouldUpdatenavbarDefaultLabelFont;
- (BOOL)ckShouldUpdatenavbarSubtitleFont;
- (BOOL)ckShouldUpdatenavbarToLabelFont;
- (BOOL)ckShouldUpdatenavigationHeaderJoinLabelFont;
- (BOOL)ckShouldUpdatenickNameTranscriptTextAttributes;
- (BOOL)ckShouldUpdatenicknameDescriptionFont;
- (BOOL)ckShouldUpdatenicknameLabelFont;
- (BOOL)ckShouldUpdatenicknameUpdatesSubtitleFont;
- (BOOL)ckShouldUpdatenicknameUpdatesTitleFont;
- (BOOL)ckShouldUpdatenoAvatarTitleFont;
- (BOOL)ckShouldUpdatenotifyAnywayBottomTranscriptSpace;
- (BOOL)ckShouldUpdateobscuredBalloonMinimumSizeForAdult;
- (BOOL)ckShouldUpdateobscuredBalloonMinimumSizeForChild;
- (BOOL)ckShouldUpdatephishingWarningTextAttributes;
- (BOOL)ckShouldUpdatepinningOnboardingSubtitleLabelFont;
- (BOOL)ckShouldUpdatepreviewTitleFont;
- (BOOL)ckShouldUpdatereaderFont;
- (BOOL)ckShouldUpdaterecipientNameFont;
- (BOOL)ckShouldUpdatereplyBalloonTextContainerInset;
- (BOOL)ckShouldUpdatereplyBalloonTextFont;
- (BOOL)ckShouldUpdatereplyButtonFont;
- (BOOL)ckShouldUpdatereplyPreviewContactIconName;
- (BOOL)ckShouldUpdatereplyPreviewDocumentIconName;
- (BOOL)ckShouldUpdatereplyPreviewLocationIconName;
- (BOOL)ckShouldUpdatereplySenderTranscriptTextAttributes;
- (BOOL)ckShouldUpdatesatelliteAvailabilityIndicatorBottomTranscriptSpace;
- (BOOL)ckShouldUpdatesatelliteAvailabilityIndicatorIcon;
- (BOOL)ckShouldUpdatesatelliteServiceIcon;
- (BOOL)ckShouldUpdatesatelliteSuppressedNotificationBottomTranscriptSpace;
- (BOOL)ckShouldUpdatescreenTimeConversationListSummaryIcon;
- (BOOL)ckShouldUpdatesearchAttachmentResultDateLabelFont;
- (BOOL)ckShouldUpdatesearchAttachmentResultLabelFont;
- (BOOL)ckShouldUpdatesearchDetailsHeaderFont;
- (BOOL)ckShouldUpdatesearchDetailsHeaderFontIdentity;
- (BOOL)ckShouldUpdatesearchHeaderButtonFont;
- (BOOL)ckShouldUpdatesearchHeaderFont;
- (BOOL)ckShouldUpdatesearchIndexingSubtitleFont;
- (BOOL)ckShouldUpdatesearchIndexingTitleFont;
- (BOOL)ckShouldUpdatesearchMessagesBalloonFont;
- (BOOL)ckShouldUpdatesearchMessagesDMConversationFont;
- (BOOL)ckShouldUpdatesearchMessagesDateFont;
- (BOOL)ckShouldUpdatesearchMessagesGroupConversationFont;
- (BOOL)ckShouldUpdatesearchMessagesSenderFont;
- (BOOL)ckShouldUpdatesearchResultLabelBoldFont;
- (BOOL)ckShouldUpdatesearchResultLabelFont;
- (BOOL)ckShouldUpdateselfReplyTranscriptSpace;
- (BOOL)ckShouldUpdatesendMenuListItemFont;
- (BOOL)ckShouldUpdatesenderSummaryConversationListSpace;
- (BOOL)ckShouldUpdatesensitiveLabelFont;
- (BOOL)ckShouldUpdateshowsSendAnimation;
- (BOOL)ckShouldUpdatesingleBigAssetFont;
- (BOOL)ckShouldUpdatesingleBigEmojiFont;
- (BOOL)ckShouldUpdatesmallTranscriptSpace;
- (BOOL)ckShouldUpdatestatusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen;
- (BOOL)ckShouldUpdatestatusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen;
- (BOOL)ckShouldUpdatestatusCommSafetySensitiveReceiveButtonTranscriptText;
- (BOOL)ckShouldUpdatestatusCommSafetySensitiveReceiveMultiButtonTranscriptText;
- (BOOL)ckShouldUpdatestatusSaveButtonTranscriptText;
- (BOOL)ckShouldUpdatestickerDetailsCellSubtitleFont;
- (BOOL)ckShouldUpdatestickerDetailsCellTimestampFont;
- (BOOL)ckShouldUpdatestickerDetailsCellTitleFont;
- (BOOL)ckShouldUpdatesummaryDateConversationListSpace;
- (BOOL)ckShouldUpdatesyncProgressLabelFont;
- (BOOL)ckShouldUpdatesystemUIFontExcessiveLineHeightCharacterSet;
- (BOOL)ckShouldUpdatetapbackPickerSizingFont;
- (BOOL)ckShouldUpdatetextAlignmentRectInsetsScaleFactor;
- (BOOL)ckShouldUpdatetextBalloonMinHeight;
- (BOOL)ckShouldUpdatetextReplyPreviewBalloonMinHeight;
- (BOOL)ckShouldUpdatetimestampsPushBalloons;
- (BOOL)ckShouldUpdatetoFieldPreferredHeight;
- (BOOL)ckShouldUpdatetopConversationListSpace;
- (BOOL)ckShouldUpdatetopTranscriptSpace;
- (BOOL)ckShouldUpdatetranscriptAvailabilityFont;
- (BOOL)ckShouldUpdatetranscriptBodyBoldTextFont;
- (BOOL)ckShouldUpdatetranscriptBoldFont;
- (BOOL)ckShouldUpdatetranscriptBoldPreferredFont;
- (BOOL)ckShouldUpdatetranscriptBoldTextAlignmentInsets;
- (BOOL)ckShouldUpdatetranscriptBoldTextHeight;
- (BOOL)ckShouldUpdatetranscriptButtonTextFont;
- (BOOL)ckShouldUpdatetranscriptDrawerFont;
- (BOOL)ckShouldUpdatetranscriptDrawerGestureAcceleration;
- (BOOL)ckShouldUpdatetranscriptEditingSelectionImageBaseConfiguration;
- (BOOL)ckShouldUpdatetranscriptErrorStampFont;
- (BOOL)ckShouldUpdatetranscriptErrorStampPreferredFont;
- (BOOL)ckShouldUpdatetranscriptFooterNoteBodyFont;
- (BOOL)ckShouldUpdatetranscriptFooterNoteTitleFont;
- (BOOL)ckShouldUpdatetranscriptJunkHeaderButtonFont;
- (BOOL)ckShouldUpdatetranscriptJunkHeaderTitleFont;
- (BOOL)ckShouldUpdatetranscriptLightFont;
- (BOOL)ckShouldUpdatetranscriptLoadingViewTextFont;
- (BOOL)ckShouldUpdatetranscriptMessageStatusDateFont;
- (BOOL)ckShouldUpdatetranscriptMessageStatusFont;
- (BOOL)ckShouldUpdatetranscriptNotifyAnywayFont;
- (BOOL)ckShouldUpdatetranscriptRegularFont;
- (BOOL)ckShouldUpdatetranscriptRegularPreferredFont;
- (BOOL)ckShouldUpdatetranscriptSenderFont;
- (BOOL)ckShouldUpdatetranscriptTextFont;
- (BOOL)ckShouldUpdatetranscriptTextFontLanguageAwareOutsets;
- (BOOL)ckShouldUpdatetranscriptTextFontStyle;
- (BOOL)ckShouldUpdatetuConversationBalloonActionButtonFont;
- (BOOL)ckShouldUpdatetuConversationBalloonActionButtonFontStyle;
- (BOOL)ckShouldUpdatetuConversationBalloonSubtitleFont;
- (BOOL)ckShouldUpdatetuConversationBalloonTitleFont;
- (BOOL)ckShouldUpdatetuConversationViewActionButtonFont;
- (BOOL)ckShouldUpdateunavailabilityIndicatorBottomTranscriptSpace;
- (BOOL)ckShouldUpdateunavailabilityIndicatorDeemphasizedIcon;
- (BOOL)ckShouldUpdateunavailabilityIndicatorIcon;
- (BOOL)ckShouldUpdateunencryptedServiceIcon;
- (BOOL)ckShouldUpdatewelcomeViewCancelButtonFont;
- (BOOL)ckShouldUpdatewelcomeViewConfirmButtonFont;
- (BOOL)ckShouldUpdatewelcomeViewTitleLabelFont;
- (BOOL)ckShouldUpdatewhatsNewFeatureViewDescriptionLabelFont;
- (BOOL)ckShouldUpdatewhatsNewFeatureViewTitleLabelFont;
- (BOOL)ckShouldUpdatewhatsNewViewBulletPointSymbolLabelFont;
- (BOOL)ckShouldUpdatewhatsNewViewBulletPointTextLabelFont;
- (BOOL)ckShouldUpdatewhatsNewViewDescriptionLabelFont;
- (BOOL)ckShouldUpdatexsTranscriptSpace;
- (BOOL)contactPhotosEnabled;
- (BOOL)converastionListAlwaysSupportsLargeTitles;
- (BOOL)conversationListCellUsesLargeTextLayout;
- (BOOL)conversationListFocusFilterBannerShouldUseAccessabilityLayout;
- (BOOL)conversationListFocusFilterBannerShowsKeylines;
- (BOOL)conversationListHidesSearchBarWhenScrolling;
- (BOOL)conversationListSearchHidesNavigationBarDuringPresentation;
- (BOOL)conversationListShouldManuallyApplyBottomSafeAreaInsetForIsRecentlyDeletedModal:(BOOL)a3;
- (BOOL)conversationListShowsSearchOnAppear;
- (BOOL)darkUIEnabled;
- (BOOL)detailsSeperatorsFollowLayoutMargins;
- (BOOL)disableTranscriptClickyOrbContextMenu;
- (BOOL)disableTranscriptInteractions;
- (BOOL)disableTranscriptOrb;
- (BOOL)disableTranscriptTimestamps;
- (BOOL)effectPickerPresentsSelectionView;
- (BOOL)effectPickerShowsCloseButton;
- (BOOL)enableBalloonTextSelection;
- (BOOL)entryFieldShouldUseBackdropView;
- (BOOL)entryFieldShouldUseNewPhotoUI;
- (BOOL)entryViewBackgroundShouldUseVariableBlur;
- (BOOL)entryViewButtonWantsVibrancy;
- (BOOL)entryViewCoverHasOuterStroke;
- (BOOL)entryViewFollowsKeyboardLayoutGuide;
- (BOOL)entryViewSupportsBrowserButton;
- (BOOL)entryViewSupportsPhotoButton;
- (BOOL)entryViewSupportsPlusButton;
- (BOOL)entryViewSupportsSingleBigEmojiFont;
- (BOOL)faceTimeAudioIsAllowlisted;
- (BOOL)faceTimeVideoIsAllowlisted;
- (BOOL)forceMinTranscriptMarginInsets;
- (BOOL)forcesUnknownFiltering;
- (BOOL)fullScreenBalloonForceWindowedPresentation;
- (BOOL)fullScreenBalloonWantsWindowedPresentation;
- (BOOL)handlesBalloonViewTitleTapsSeparately;
- (BOOL)hidesUnreadIndicatorWhenEditing;
- (BOOL)hyphenatesTextContent;
- (BOOL)includeKeyboardInEntryViewHeight;
- (BOOL)isAccessibilityPreferredContentSizeCategory;
- (BOOL)isAppStripInKeyboard;
- (BOOL)isEntryViewCollapsable;
- (BOOL)isEntryViewFirstResponderOnViewAppearance;
- (BOOL)isEntryViewInputAccessory;
- (BOOL)isMentionSuggestionViewInKeyboard;
- (BOOL)isProximityMonitoringSupported;
- (BOOL)isRunningInStoreDemoMode;
- (BOOL)isSendButtonEnabledOnPlatform;
- (BOOL)isSizeConstrained;
- (BOOL)joystickUsesWindow;
- (BOOL)keyboardSizeDeterminesAppCardDetentHeight;
- (BOOL)knockoutViewShouldUseBackgroundColor;
- (BOOL)longPressHidesAssociatedAcknowledgments;
- (BOOL)lowClearanceInLandscape;
- (BOOL)mailIsAllowlisted;
- (BOOL)messageEntryViewUsesAbbreviatedServiceNames;
- (BOOL)opensLocationsInMapsApp;
- (BOOL)phoneIsAllowlisted;
- (BOOL)photoPickerShouldZoomOnSelection;
- (BOOL)photoPickerUsesVitality;
- (BOOL)photosIsAllowlisted;
- (BOOL)platformSupportsMentioning;
- (BOOL)playButtonPunchesOutArrow;
- (BOOL)playsInlineVideo;
- (BOOL)presentForwardingUIModally;
- (BOOL)presentsAutocompleteInAPopover;
- (BOOL)presentsFullscreenInViewService;
- (BOOL)presentsLoadingIndicatorCover;
- (BOOL)presentsQuickLookController;
- (BOOL)promptsForReadReceiptsSetting;
- (BOOL)recipientSelectionCollapsedHeightIncludesNavigationBar;
- (BOOL)recipientSelectionSearchControllerHidesInfoButton;
- (BOOL)recipientSelectionSearchControllerRequiresFlexibleMargins;
- (BOOL)recipientSelectionShouldSlideToField;
- (BOOL)recipientSelectionViewRequiresMainScreenBounds;
- (BOOL)recordsRecentContact;
- (BOOL)replyShouldShowKeyboard;
- (BOOL)replyTranscriptBackgroundDoesSupportTransparentBlurVisualEffect;
- (BOOL)resetsIdleTimer;
- (BOOL)restoringDraftShouldShowKeyboard;
- (BOOL)scrollToBottomStopsAtTopOfLastBubble;
- (BOOL)searchControllerObscuresConversationList;
- (BOOL)searchSectionHeadersPinToBounds;
- (BOOL)shouldAdjustWidthForSendFailure;
- (BOOL)shouldAlignRecipientGlyphsWithMargins;
- (BOOL)shouldAnimateGifsInPhotoGrid;
- (BOOL)shouldAnimateStickerOnSave;
- (BOOL)shouldAutomaticallyCheckAvailabilityOfAlternateAddresses;
- (BOOL)shouldBackfillTranscript;
- (BOOL)shouldDisableSendButtonClickInteraction;
- (BOOL)shouldDismissSideMountedPanel;
- (BOOL)shouldFillAndStrokeAttachmentBalloon;
- (BOOL)shouldGrabBackgroundAssertion;
- (BOOL)shouldHideStatusBarForFullScreenEffects;
- (BOOL)shouldInsetForStatusBar;
- (BOOL)shouldInsetForStatusBarWithSafeArea;
- (BOOL)shouldLoadInitialViewingMessageCount;
- (BOOL)shouldPopoverSuggestionsBanner;
- (BOOL)shouldRefreshAlternateAddressesSheet;
- (BOOL)shouldScrollToSavedSticker;
- (BOOL)shouldShowAvatarForWidth:(double)a3;
- (BOOL)shouldShowContactPhotosInTranscript;
- (BOOL)shouldShowDisclosureChevronInRecipientAtoms;
- (BOOL)shouldShowPluginDividerLineWithPluginShelf;
- (BOOL)shouldShowSearchBarInConversationList;
- (BOOL)shouldSizeInitialViewingMessageCount;
- (BOOL)shouldSuppressRotationInNewCompose;
- (BOOL)shouldUnreadIndicatorChangeOnSelection;
- (BOOL)shouldUseDynamicGradient;
- (BOOL)shouldUseDynamicScrolling;
- (BOOL)shouldUseRotisserieScrolling;
- (BOOL)shouldUseSendAnimation;
- (BOOL)shouldUseSimpleTimestampsInTranscript;
- (BOOL)shouldUseTranslucentBars;
- (BOOL)showMMSSetup;
- (BOOL)showPendingInConversationList;
- (BOOL)showsBalloonBadges;
- (BOOL)showsBalloonChevron;
- (BOOL)showsCompositionPanel;
- (BOOL)showsConversationListCellChevronImage;
- (BOOL)showsFileSizeInSubtitle;
- (BOOL)showsHoverToDeleteButton;
- (BOOL)showsHoverToDeleteButtonForNewCompose;
- (BOOL)showsLoadMoreItem;
- (BOOL)showsNoMessagesDialog;
- (BOOL)showsPlaceCardForBalloonViewTitleTap;
- (BOOL)showsProgressInNavigationBar;
- (BOOL)showsReplyButtonsInTranscript;
- (BOOL)showsSendAnimation;
- (BOOL)showsVCalViewer;
- (BOOL)stickerSavingEnabled;
- (BOOL)supportsContiguousAttachments;
- (BOOL)supportsConversationListEditing;
- (BOOL)supportsEntryViewPlusButtonLongPress;
- (BOOL)supportsFoundInSuggestions;
- (BOOL)supportsOrbPreviewsInConversationList;
- (BOOL)supportsPassbookAttachments;
- (BOOL)suppressPinActivityForState:(id)a3;
- (BOOL)timestampsPushBalloons;
- (BOOL)transcriptCanUseOpaqueMask;
- (BOOL)transcriptCellsNeedVibrancy;
- (BOOL)transcriptMinBottomInsetIsEntryViewHeight;
- (BOOL)useMacToolbar;
- (BOOL)useSelectedAppearanceForConversationCellState:(id)a3 traitCollection:(id)a4;
- (BOOL)useSingleLineForContactVCardNames;
- (BOOL)usesActionMenu;
- (BOOL)usesDataDetectorsUI;
- (BOOL)usesEntryView;
- (BOOL)usesFannedBubbleStyle;
- (BOOL)usesNavigationBarControls;
- (BOOL)usesPersistentConversationSelection;
- (BOOL)usesPopovers;
- (BOOL)usesUncollapsedSplitview;
- (BOOL)wantsUniversalThreeColumn;
- (CGPoint)messageAcknowledgmentTranscriptBalloonRelativePosition;
- (CGPoint)messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset;
- (CGPoint)messageHighlightButtonRelativePositionToTranscriptMessageBalloon;
- (CGPoint)messageHighlightTranscriptBalloonRelativePosition;
- (CGPoint)replyButtonRelativePosition;
- (CGPoint)transcriptTypingIndicatorLargeBubbleGrowOffset;
- (CGPoint)transcriptTypingIndicatorLargeBubbleOffset;
- (CGPoint)transcriptTypingIndicatorMediumBubbleOffset;
- (CGRect)extensionIconBadgeRectForOrientation:(char)a3;
- (CGRect)ktStringAttachmentPadding;
- (CGRect)transcriptTypingIndicatorSmallBubbleFrame;
- (CGSize)_audioButtonSize;
- (CGSize)_dictationButtonSize;
- (CGSize)_heightClampedScaleWithAspectRatio:(double)a3 width:(double)a4 imageSize:(CGSize)a5;
- (CGSize)aggregateAcknowledgmentTranscriptBalloonSize;
- (CGSize)appIconSize;
- (CGSize)attachmentBalloonSize;
- (CGSize)attachmentBrowserDefaultSizeForSquare;
- (CGSize)attributionCollapseButtonSize;
- (CGSize)attributionCountViewImageSize;
- (CGSize)attributionIconSize;
- (CGSize)attributionStickerDetailsViewAvatarSize;
- (CGSize)attributionStickerDetailsViewButtonSize;
- (CGSize)attributionStickerDetailsViewImageSize;
- (CGSize)attributionViewAvatarSize;
- (CGSize)audioButtonSize;
- (CGSize)audioProgressViewSize;
- (CGSize)avatarCollapsedSize;
- (CGSize)avatarCutoutSize;
- (CGSize)avatarSize;
- (CGSize)balloonMaskSize;
- (CGSize)balloonMaskSizeWithBalloonDescriptor:(CKBalloonDescriptor_t *)a3;
- (CGSize)balloonMaskSizeWithTailShape:(char)a3 isMultiline:(BOOL)a4;
- (CGSize)balloonMaskTailSizeForTailShape:(char)a3;
- (CGSize)bannerCellSize;
- (CGSize)browserButtonSize;
- (CGSize)businessBannerSize;
- (CGSize)clearPluginButtonSize;
- (CGSize)contactImageSize;
- (CGSize)deletedReplyBalloonMaskSizeWithTailShape:(char)a3;
- (CGSize)detonatedItemBalloonViewSize;
- (CGSize)detonatedItemDocumentIconSize;
- (CGSize)dictationButtonSize;
- (CGSize)documentIconSize;
- (CGSize)emojiStickerTranscriptBalloonSize;
- (CGSize)endingReplyIndicatorSize;
- (CGSize)entryViewLinkViewSize;
- (CGSize)entryViewPlusButtonSize;
- (CGSize)generationPluginButtonSize;
- (CGSize)groupAvatarViewSize;
- (CGSize)iMessageAppIconSize;
- (CGSize)locationOfferMapThumbnailFillSizeForWidth:(double)a3;
- (CGSize)locationShareBalloonSizeForWidth:(double)a3 offerState:(int64_t)a4;
- (CGSize)mapThumbnailFillSizeForWidth:(double)a3;
- (CGSize)mediaObjectCachedIconSize;
- (CGSize)messageAcknowledgmentAnchorBubbleOffset;
- (CGSize)messageAcknowledgmentAnchorBubbleSize;
- (CGSize)messageAcknowledgmentButtonSize;
- (CGSize)messageAcknowledgmentIntermediateBubbleSize;
- (CGSize)messageAcknowledgmentPickerBarAcknowledgmentImageSize;
- (CGSize)messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize;
- (CGSize)messageAcknowledgmentPickerBarOffsetFromBalloon;
- (CGSize)messageAcknowledgmentPickerBarSize;
- (CGSize)messageAcknowledgmentPillBubbleSize;
- (CGSize)messageAcknowledgmentTranscriptBalloonSize;
- (CGSize)messageAcknowledgmentVotingAvatarSize;
- (CGSize)messageHighlightButtonVisibleViewSize;
- (CGSize)messageHighlightTranscriptBalloonSize;
- (CGSize)minimumSizeThatFitsExtensionIconBadge:(BOOL)a3;
- (CGSize)multilineBalloonMaskSize;
- (CGSize)navBarUnifiedCallButtonSize;
- (CGSize)obscuredBalloonMinimumSizeForAdult;
- (CGSize)obscuredBalloonMinimumSizeForChild;
- (CGSize)photoSheetProgressIndicatorSize;
- (CGSize)pinnedConversationActivityBroadShadowDarkOffset;
- (CGSize)pinnedConversationActivityBroadShadowLightOffset;
- (CGSize)pinnedConversationActivityTightShadowDarkOffset;
- (CGSize)pinnedConversationActivityTightShadowLightOffset;
- (CGSize)previewBalloonSizeThatFits:(CGSize)a3;
- (CGSize)replyBalloonMaskSize;
- (CGSize)replyBalloonMaskSizeWithTailShape:(char)a3 isMultiline:(BOOL)a4;
- (CGSize)replyDeleteBalloonMaskSize;
- (CGSize)replyMultilineBalloonMaskSize;
- (CGSize)replySkinnyBalloonMaskSize;
- (CGSize)roundBalloonMaskSizeWithTailShape:(char)a3;
- (CGSize)searchAttachmentsThumbnailAlignmentSize;
- (CGSize)searchMessagesAvatarSize;
- (CGSize)sendMenuListItemIconSize;
- (CGSize)signInSplashImageSize;
- (CGSize)skinnyBalloonMaskSize;
- (CGSize)skinnyBalloonMaskSizeWithTailShape:(char)a3;
- (CGSize)skinnyReplyBalloonMaskSizeWithTailShape:(char)a3;
- (CGSize)stickerPopoverSize;
- (CGSize)stickerReactionSize;
- (CGSize)stickerSizeScaledWithInitialSize:(CGSize)a3 imageScale:(double)a4 userScale:(double)a5 rectifiedScreenScale:(double)a6 maxWidth:(double)a7;
- (CGSize)taillessBalloonMaskSize;
- (CGSize)taillessMultilineBalloonMaskSize;
- (CGSize)taillessSkinnyBalloonMaskSize;
- (CGSize)thumbnailFillSizeForWidth:(double)a3 imageSize:(CGSize)a4;
- (CGSize)thumbnailSizeForAppIconInCollaborationLinks;
- (CGSize)transcriptCustomStatusImageDefaultSize;
- (CGSize)transcriptDownloadingPendingMessagesViewDefaultSize;
- (CGSize)transcriptTypingIndicatorDefaultSize;
- (CGSize)transcriptTypingIndicatorLargeBubbleSize;
- (CGSize)transcriptTypingIndicatorMediumBubbleSize;
- (CGSize)tuConversationBalloonButtonAsIconSize;
- (CGSize)tuConversationBalloonFacetimeIconSize;
- (CGSize)unconstrainedAspectFillSizeForWidth:(double)a3 imageSize:(CGSize)a4;
- (CGSize)unreadIndicatorImageViewSize;
- (CKMessageEntryViewLayoutMetrics)entryViewlayoutMetrics;
- (CKUITheme)theme;
- (Class)audioBalloonCellClass;
- (Class)audioBalloonClass;
- (Class)audioBalloonViewClass;
- (Class)businessChatControllerClass;
- (Class)chatControllerClass;
- (Class)composeChatControllerClass;
- (Class)contactBalloonViewClass;
- (Class)conversationListControllerClass;
- (Class)conversationListNavigationControllerClass;
- (Class)conversationListTableViewClass;
- (Class)entryRecordingViewClass;
- (Class)entryViewBackgroundClass;
- (Class)modalTranscriptControllerClass;
- (Class)navigationBarClass;
- (Class)transcriptCollectionViewControllerClass;
- (Class)transcriptTitleViewClass;
- (Class)windowClass;
- (NSArray)acceptableUTIs;
- (NSArray)entryViewDashedLinePattern;
- (NSArray)messageAcknowledgmentPickerBarAcknowledgmentOrder;
- (NSArray)sendMenuBackdropBackgroundEffects;
- (NSAttributedString)statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen;
- (NSAttributedString)statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen;
- (NSAttributedString)statusCommSafetySensitiveReceiveButtonTranscriptText;
- (NSAttributedString)statusCommSafetySensitiveReceiveMultiButtonTranscriptText;
- (NSAttributedString)statusSaveButtonTranscriptText;
- (NSDateFormatter)locationRelativeDateFormatter;
- (NSDateFormatter)timestampDateFormatter;
- (NSDictionary)centerTranscriptButtonTextAttributes;
- (NSDictionary)conversationCellSummaryBoldPreviewTextAttributes;
- (NSDictionary)conversationCellSummaryPreviewTextAttributes;
- (NSDictionary)drawerTranscriptTextAttributes;
- (NSDictionary)leftStatusTranscriptTextAttributes;
- (NSDictionary)leftTranscriptButtonTextAttributes;
- (NSDictionary)nickNameTranscriptTextAttributes;
- (NSDictionary)phishingWarningTextAttributes;
- (NSDictionary)replySenderTranscriptTextAttributes;
- (NSDictionary)rightStatusTranscriptTextAttributes;
- (NSDictionary)rightTranscriptButtonTextAttributes;
- (NSDictionary)senderTranscriptTextAttributes;
- (NSDictionary)stewieTranscriptEmergencyServiceAttributes;
- (NSDictionary)stewieTranscriptEmergencyUserAttributes;
- (NSDictionary)transcriptAvailabilityDeemphasizedFontAttributes;
- (NSDictionary)transcriptAvailabilityFontAttributes;
- (NSDictionary)transcriptEmergencyEmphasizedFontAttributes;
- (NSDictionary)transcriptEmphasizedFontAttributes;
- (NSDictionary)transcriptEmphasizedPreferredFontAttributes;
- (NSDictionary)transcriptErrorStampFontAttributes;
- (NSDictionary)transcriptErrorStampPreferredFontAttributes;
- (NSDictionary)transcriptGroupModificationErrorEmphasizedFontAttributes;
- (NSDictionary)transcriptGroupModificationErrorRegularFontAttributes;
- (NSDictionary)transcriptNotifyAnywayFontAttributes;
- (NSDictionary)transcriptRegularFontAttributes;
- (NSDictionary)transcriptRegularPreferredFontAttributes;
- (NSDictionary)transcriptSMSEmphasizedFontAttributes;
- (NSDictionary)transcriptSatelliteFontAttributes;
- (NSDictionary)transcriptiMessageEmphasizedFontAttributes;
- (NSDirectionalEdgeInsets)searchConversationSectionInsets;
- (NSDirectionalEdgeInsets)searchDetailsResultsInsets;
- (NSDirectionalEdgeInsets)searchMessagesContentInsets;
- (NSDirectionalEdgeInsets)searchMessagesSectionInsets;
- (NSDirectionalEdgeInsets)searchResultsInsets;
- (NSDirectionalEdgeInsets)tuConversationBalloonContentStackedLayoutJoinButtonInsets;
- (NSDirectionalEdgeInsets)tuConversationBalloonContentStandardLayoutJoinButtonInsets;
- (NSParagraphStyle)balloonParagraphStyle;
- (NSString)balloonName;
- (NSString)conversationListOptionsButtonImageName;
- (NSString)detailsGroupHeaderCellChevronDownName;
- (NSString)detailsGroupHeaderCellChevronForwardName;
- (NSString)entryViewAppButtonName;
- (NSString)entryViewArrowButtonName;
- (NSString)entryViewAudioButtonName;
- (NSString)entryViewDictationButtonName;
- (NSString)entryViewKeyboardButtonName;
- (NSString)entryViewPhotoButtonName;
- (NSString)entryViewPlusButtonName;
- (NSString)entryViewSendButtonName;
- (NSString)messageAcknowledgmentPickerBarBubbleName;
- (NSString)messageAcknowledgmentPickerBarBubbleTailName;
- (NSString)navBarInfoImageName;
- (NSString)replyPreviewContactIconName;
- (NSString)replyPreviewDocumentIconName;
- (NSString)replyPreviewLocationIconName;
- (NSString)skinnyBalloonName;
- (NSString)skinnyTaillessBalloonName;
- (NSString)strokedBalloonName;
- (NSString)strokedTaillessBalloonName;
- (NSString)taillessBallonName;
- (NSString)transcriptTextFontStyle;
- (NSString)tuConversationBalloonActionButtonFontStyle;
- (UIBackgroundConfiguration)obscurableBalloonWarningButtonBackgroundConfigurationObscured;
- (UIBackgroundConfiguration)obscurableBalloonWarningButtonBackgroundConfigurationRevealed;
- (UIBlurEffect)conversationListFocusFilterBannerBlurEffect;
- (UIBlurEffect)sendMenuPopoverBlurEffectForPresenting;
- (UIButtonConfiguration)appButtonConfiguration;
- (UIButtonConfiguration)audioButtonConfiguration;
- (UIButtonConfiguration)clearPluginButtonConfiguration;
- (UIButtonConfiguration)dictationButtonConfiguration;
- (UIButtonConfiguration)generationPluginButtonConfiguration;
- (UIButtonConfiguration)messageEditingConfirmButtonBaseConfiguration;
- (UIButtonConfiguration)messageEditingRejectButtonBaseConfiguration;
- (UIButtonConfiguration)nicknameUpdatesButtonConfiguration;
- (UIButtonConfiguration)obscurableBalloonShowButtonConfiguration;
- (UIButtonConfiguration)obscurableBalloonWarningButtonConfiguration;
- (UIButtonConfiguration)sendButtonConfiguration;
- (UIButtonConfiguration)stickerSaveButtonConfiguration;
- (UIButtonConfiguration)stickerViewButtonConfiguration;
- (UIButtonConfiguration)transcriptLabelAccessoryButtonConfiguration;
- (UIColor)conversationListSIMLabelBackgroundColor;
- (UIColor)conversationListSIMLabelTextColor;
- (UIColor)defaultRichCardChinColor;
- (UIColor)entryViewDictationButtonColor;
- (UIColor)entryViewPlusButtonDefaultBackgroundColor;
- (UIColor)entryViewPlusButtonSendMenuOpenBackgroundColor;
- (UIColor)generationButtonHighlightedBackgroundColor;
- (UIColor)generationButtonHighlightedTintColor;
- (UIColor)generationButtonRegularBackgroundColor;
- (UIColor)generationButtonRegularTintColor;
- (UIColor)imageBalloonSelectionOverlayColor;
- (UIColor)messageHighlightButtonSelectedBackgroundColor;
- (UIColor)messageHighlightButtonUnselectedBackgroundColor;
- (UIColor)messageHighlightGlyphColor;
- (UIColor)messageHighlightGoldColor;
- (UIColor)obscurableBalloonBadgeTintColor;
- (UIColor)obscurableBalloonElementTintColor;
- (UIColor)pluginBalloonSelectionOverlayColor;
- (UIColor)searchMessagesConversationLabelColor;
- (UIColor)searchMessagesFromMeUnannotatedLabelColor;
- (UIColor)searchMessagesSenderLabelColor;
- (UIColor)sendMenuBackdropBackgroundColor;
- (UIColor)sendMenuListItemTextColor;
- (UIColor)sendMenuPopoverDimmingViewActiveBackgroundColor;
- (UIColor)sendMenuPopoverDimmingViewInactiveBackgroundColor;
- (UIColor)sendMenuPresentPopoverBackdropViewBackgroundColor;
- (UIColor)sensitiveLabelColor;
- (UIColor)signInActivityIndicatorColor;
- (UIColor)signInTintColor;
- (UIColor)stickerDetailsCellBackgroundColor;
- (UIColor)suggestedRepliesViewBackgroundColor;
- (UIColor)syncBarHairlineColor;
- (UIColor)syncProgressColor;
- (UIColor)syncProgressTrackColor;
- (UIEdgeInsets)_replyBalloonTextContainerInset;
- (UIEdgeInsets)additionalComposeRecipientLayoutMargins;
- (UIEdgeInsets)appCardContainerViewControllerChildEdgeInsetsIfPresentedBySendMenuPopover;
- (UIEdgeInsets)attachmentBalloonAlignmentRectInsets;
- (UIEdgeInsets)attachmentBalloonAlignmentRectInsetsWithTailShape:(char)a3;
- (UIEdgeInsets)attachmentBalloonRichIconInsets;
- (UIEdgeInsets)attachmentBrowserFeedLayoutSectionInset;
- (UIEdgeInsets)attachmentBrowserGridSectionInset;
- (UIEdgeInsets)attachmentReplyPreviewBalloonAlignmentRectInsets;
- (UIEdgeInsets)attributionViewCollapsedModeInsets;
- (UIEdgeInsets)audioBalloonAlignmentInsets;
- (UIEdgeInsets)audioReplyPreviewBalloonAlignmentInsets;
- (UIEdgeInsets)balloonLineFragmentInsets;
- (UIEdgeInsets)balloonMaskAlignmentRectInsets;
- (UIEdgeInsets)balloonMaskAlignmentRectInsetsWithTailShape:(char)a3;
- (UIEdgeInsets)balloonMaskFrameInsets;
- (UIEdgeInsets)balloonMaskFrameInsetsWithBalloonShape:(char)a3;
- (UIEdgeInsets)balloonTextContainerInset;
- (UIEdgeInsets)balloonTranscriptInsets;
- (UIEdgeInsets)bigEmojiAlignmentRectInsets;
- (UIEdgeInsets)bigEmojiBalloonMaskAlignmentRectInsets;
- (UIEdgeInsets)callButtonImageInsets;
- (UIEdgeInsets)contactPhotoTranscriptInsets;
- (UIEdgeInsets)contentInsetsForConversationListSearchBarForLayoutMargins:(UIEdgeInsets)result isRTL:(BOOL)a4;
- (UIEdgeInsets)conversationListPinnedCellTitleLabelVerticalPadding;
- (UIEdgeInsets)defaultAVPlayerViewContorllerControlsInsets;
- (UIEdgeInsets)detailsContactCellButtonEdgeInsets;
- (UIEdgeInsets)detailsTableViewInsets;
- (UIEdgeInsets)entryViewHorizontalCoverInsets;
- (UIEdgeInsets)entryViewVerticalCoverInsets;
- (UIEdgeInsets)entryViewVerticalTextFieldInsets;
- (UIEdgeInsets)extensionBalloonContentInsetsForOrientation:(char)a3;
- (UIEdgeInsets)imageSendLaterInsets;
- (UIEdgeInsets)landscapeKeyboardInsets;
- (UIEdgeInsets)linkPreviewSendLaterInsets;
- (UIEdgeInsets)messageAcknowledgmentTranscriptGlyphInset;
- (UIEdgeInsets)messageEntryContentViewPhotoPluginInsets;
- (UIEdgeInsets)messageEntryContentViewPluginInsets;
- (UIEdgeInsets)messageEntryContentViewSendLaterDateInsets;
- (UIEdgeInsets)messageEntryContentViewSendLaterInsets;
- (UIEdgeInsets)messageHighlightButtonInsets;
- (UIEdgeInsets)minTranscriptMarginInsets;
- (UIEdgeInsets)minimumPlayButtonInsets;
- (UIEdgeInsets)phishingWarningEdgeInsets;
- (UIEdgeInsets)photoPickerSectionInsets;
- (UIEdgeInsets)pluginBalloonInsetsForMessageFromMe:(BOOL)a3;
- (UIEdgeInsets)quickActionPinButtonImageInsets;
- (UIEdgeInsets)quickActionSaveButtonImageInsets;
- (UIEdgeInsets)readerInsets;
- (UIEdgeInsets)replyBalloonTextContainerInset;
- (UIEdgeInsets)replyButtonEdgeInsets;
- (UIEdgeInsets)replySenderTranscriptInsets;
- (UIEdgeInsets)retractedReplyStampInsets;
- (UIEdgeInsets)searchDetailsSectionMarginInsets;
- (UIEdgeInsets)searchSectionInsets;
- (UIEdgeInsets)searchSectionMarginInsets;
- (UIEdgeInsets)senderTranscriptInsets;
- (UIEdgeInsets)stampTranscriptInsets;
- (UIEdgeInsets)taillessAttachmentBalloonAlignmentRectInsets;
- (UIEdgeInsets)taillessBalloonMaskAlignmentRectInsets;
- (UIEdgeInsets)tapbackCancelButtonGlyphInsets;
- (UIEdgeInsets)tapbackEmojiInputGlyphInsets;
- (UIEdgeInsets)tapbackEmojiTailGlyphInsets;
- (UIEdgeInsets)tapbackQuickLookSourcePointInsets;
- (UIEdgeInsets)textReplyPreviewBalloonAlignmentRectInsets;
- (UIEdgeInsets)thumbnailContentAlignmentInsetsForOrientation:(char)a3;
- (UIEdgeInsets)toFieldScrollViewInsets;
- (UIEdgeInsets)transcriptBoldTextAlignmentInsets;
- (UIEdgeInsets)transcriptButtonContentEdgeInsets;
- (UIEdgeInsets)transcriptCustomStatusImageEdgeInsets;
- (UIEdgeInsets)transcriptStatusItemEdgeInsets;
- (UIEdgeInsets)transcriptTextFontLanguageAwareOutsets;
- (UIFont)addContactFont;
- (UIFont)appLabelFont;
- (UIFont)attachmentSubtitleTextFont;
- (UIFont)attachmentTextFont;
- (UIFont)attributionCountViewFont;
- (UIFont)attributionStickerDetailsViewSenderNameFont;
- (UIFont)attributionStickerDetailsViewStickerPackNameFont;
- (UIFont)audioBalloonSpeedFont;
- (UIFont)audioBalloonTimeFont;
- (UIFont)audioBalloonTranscriptionFont;
- (UIFont)audioHintFont;
- (UIFont)avatarNameEmergencyFont;
- (UIFont)avatarNameFont;
- (UIFont)avatarStackTitleFont;
- (UIFont)balloonSubjectFont;
- (UIFont)balloonTextFont;
- (UIFont)bigEmojiFont;
- (UIFont)browserCellFont;
- (UIFont)businessDescriptionVCTextViewFont;
- (UIFont)businessInfoViewDescriptionTextFont;
- (UIFont)businessInfoViewGreetingTextFont;
- (UIFont)businessInfoViewTitleLabelFont;
- (UIFont)characterCountFont;
- (UIFont)characterCountSatelliteFont;
- (UIFont)contactAttachmentNameFont;
- (UIFont)contactAttachmentOrgFont;
- (UIFont)conversationListBoldSummaryFont;
- (UIFont)conversationListDateFont;
- (UIFont)conversationListDropTargetInstructionFont;
- (UIFont)conversationListFocusFilterBannerTitleFont;
- (UIFont)conversationListFocusFilterBannerTitleValueFont;
- (UIFont)conversationListGroupCountFont;
- (UIFont)conversationListLargeTitleReducedFont;
- (UIFont)conversationListLargeTitleStandardFont;
- (UIFont)conversationListPinnedConversationNameFont;
- (UIFont)conversationListSenderFont;
- (UIFont)conversationListSummaryFont;
- (UIFont)defaultBalloonTextFont;
- (UIFont)detailsGroupHeaderCellChevronFont;
- (UIFont)detailsGroupHeaderCellSubtitleFont;
- (UIFont)detailsGroupHeaderCellTitleFont;
- (UIFont)downloadButtonFont;
- (UIFont)emojiStickerTranscriptCellFont;
- (UIFont)filterCellTitleFont;
- (UIFont)headerFont;
- (UIFont)iCloudTextFont;
- (UIFont)locationBoldButtonFont;
- (UIFont)locationButtonFont;
- (UIFont)locationSubtitleFont;
- (UIFont)mentionsCellNameFont;
- (UIFont)messageAcknowledgmentVoteCountFont;
- (UIFont)multipleBigEmojiFont;
- (UIFont)nameFieldFont;
- (UIFont)navBarUnifiedCallButtonJoinTextFont;
- (UIFont)navbarDefaultLabelFont;
- (UIFont)navbarSubtitleFont;
- (UIFont)navbarToLabelFont;
- (UIFont)navigationHeaderJoinLabelFont;
- (UIFont)nicknameDescriptionFont;
- (UIFont)nicknameLabelFont;
- (UIFont)nicknameUpdatesSubtitleFont;
- (UIFont)nicknameUpdatesTitleFont;
- (UIFont)noAvatarTitleFont;
- (UIFont)pinningOnboardingSubtitleLabelFont;
- (UIFont)previewTitleFont;
- (UIFont)readerFont;
- (UIFont)recipientNameFont;
- (UIFont)replyBalloonTextFont;
- (UIFont)replyButtonFont;
- (UIFont)searchAttachmentResultDateLabelFont;
- (UIFont)searchAttachmentResultLabelFont;
- (UIFont)searchDetailsHeaderFont;
- (UIFont)searchDetailsHeaderFontIdentity;
- (UIFont)searchDetailsSubHeaderFont;
- (UIFont)searchHeaderButtonFont;
- (UIFont)searchHeaderFont;
- (UIFont)searchIndexingSubtitleFont;
- (UIFont)searchIndexingTitleFont;
- (UIFont)searchMessagesBalloonFont;
- (UIFont)searchMessagesDMConversationFont;
- (UIFont)searchMessagesDateFont;
- (UIFont)searchMessagesGroupConversationFont;
- (UIFont)searchMessagesSenderFont;
- (UIFont)searchResultLabelBoldFont;
- (UIFont)searchResultLabelFont;
- (UIFont)sendMenuListItemFont;
- (UIFont)sensitiveLabelFont;
- (UIFont)signInTitleFont;
- (UIFont)singleBigAssetFont;
- (UIFont)singleBigEmojiFont;
- (UIFont)stickerDetailsCellSubtitleFont;
- (UIFont)stickerDetailsCellTimestampFont;
- (UIFont)stickerDetailsCellTitleFont;
- (UIFont)syncProgressLabelFont;
- (UIFont)tapbackPickerSizingFont;
- (UIFont)transcriptAvailabilityFont;
- (UIFont)transcriptBodyBoldTextFont;
- (UIFont)transcriptBoldFont;
- (UIFont)transcriptBoldPreferredFont;
- (UIFont)transcriptFooterNoteBodyFont;
- (UIFont)transcriptFooterNoteTitleFont;
- (UIFont)transcriptJunkHeaderButtonFont;
- (UIFont)transcriptJunkHeaderTitleFont;
- (UIFont)transcriptLightFont;
- (UIFont)transcriptLoadingViewTextFont;
- (UIFont)transcriptMessageStatusDateFont;
- (UIFont)transcriptMessageStatusFont;
- (UIFont)transcriptNotifyAnywayFont;
- (UIFont)transcriptRegularFont;
- (UIFont)transcriptRegularPreferredFont;
- (UIFont)transcriptTextFont;
- (UIFont)tuConversationBalloonActionButtonFont;
- (UIFont)tuConversationBalloonSubtitleFont;
- (UIFont)tuConversationBalloonTitleFont;
- (UIFont)tuConversationViewActionButtonFont;
- (UIFont)welcomeViewCancelButtonFont;
- (UIFont)welcomeViewConfirmButtonFont;
- (UIFont)welcomeViewTitleLabelFont;
- (UIFont)whatsNewFeatureViewDescriptionLabelFont;
- (UIFont)whatsNewFeatureViewTitleLabelFont;
- (UIFont)whatsNewViewBulletPointSymbolLabelFont;
- (UIFont)whatsNewViewBulletPointTextLabelFont;
- (UIFont)whatsNewViewDescriptionLabelFont;
- (UIImage)attributionCollapseButtonImage;
- (UIImage)businessFallbackImage;
- (UIImage)businessVerifiedImageLarge;
- (UIImage)businessVerifiedImageSmall;
- (UIImage)chevronImage;
- (UIImage)contextMenuCancelScheduledMessageIcon;
- (UIImage)contextMenuUndoSendIcon;
- (UIImage)conversationListFacetimeAudioIcon;
- (UIImage)conversationListFacetimeVideoIcon;
- (UIImage)conversationListFocusFilterBannerCollapsedDisabledIcon;
- (UIImage)conversationListFocusFilterBannerCollapsedEnabledIcon;
- (UIImage)conversationListFocusFilterBannerDisabledIcon;
- (UIImage)conversationListFocusFilterBannerEnabledIcon;
- (UIImage)conversationListMuteIndicatorImage;
- (UIImage)conversationListSharePlayIcon;
- (UIImage)conversationListSlashSatelliteIndicatorImage;
- (UIImage)defaultWaveformImage;
- (UIImage)detailsImage;
- (UIImage)detailsViewFaceTimeVideoImage;
- (UIImage)detailsViewMessagesImage;
- (UIImage)detailsViewPhoneImage;
- (UIImage)disabledFacetimeAudioImage;
- (UIImage)disabledFacetimeVideoImage;
- (UIImage)dndActionImage;
- (UIImage)enabledExpanseImage;
- (UIImage)enabledExpanseImagePill;
- (UIImage)enabledFacetimeAudioImage;
- (UIImage)enabledFacetimeAudioImagePill;
- (UIImage)enabledFacetimeVideoImage;
- (UIImage)enabledFacetimeVideoImagePill;
- (UIImage)encryptedServiceIcon;
- (UIImage)facetimeAudioIcon;
- (UIImage)forwardImage;
- (UIImage)genericDocumentIcon;
- (UIImage)grayA1AckImage;
- (UIImage)grayA2AckImage;
- (UIImage)grayExclamationLeftAckImage;
- (UIImage)grayExclamationRightAckImage;
- (UIImage)grayH1AckImage;
- (UIImage)grayH2AckImage;
- (UIImage)grayHaAckImage;
- (UIImage)grayHeartAckImage;
- (UIImage)grayQuestionMarkDotAckImage;
- (UIImage)grayQuestionMarkGlyphAckImage;
- (UIImage)grayThumbsDownAckImage;
- (UIImage)grayThumbsUpAckImage;
- (UIImage)hawkingWarningIcon;
- (UIImage)livePhotoBadgeImage;
- (UIImage)locationShareActionIcon;
- (UIImage)messageAcknowledgmentPickerBarBubbleImage;
- (UIImage)messageEditingBlueConfirmButtonImage;
- (UIImage)messageEditingConfirmDisabledButtonImage;
- (UIImage)messageEditingGreenConfirmButtonImage;
- (UIImage)messageEditingRejectButtonImage;
- (UIImage)messageHighlightButtonImageHighlightOff;
- (UIImage)messageHighlightButtonImageHighlightOn;
- (UIImage)messageHighlightImage;
- (UIImage)messageReplyImage;
- (UIImage)messageStampWarningIconRed;
- (UIImage)messageStatusWarningIconRed;
- (UIImage)muteButtonImage;
- (UIImage)navBarAudioFillImage;
- (UIImage)navBarAudioImage;
- (UIImage)navBarHeaderAudioImage;
- (UIImage)navBarHeaderChevronImage;
- (UIImage)navBarHeaderChevronImageNoAvatar;
- (UIImage)navBarHeaderExpanseImage;
- (UIImage)navBarHeaderOpaqueChevronImage;
- (UIImage)navBarHeaderOpaqueChevronImageNoAvatar;
- (UIImage)navBarHeaderVideoImage;
- (UIImage)navBarInfoImage;
- (UIImage)navBarSharePlayImage;
- (UIImage)navBarVideoFillImage;
- (UIImage)navBarVideoImage;
- (UIImage)navbarJoinPillAudioImage;
- (UIImage)navbarJoinPillSharePlayImage;
- (UIImage)navbarJoinPillVideoImage;
- (UIImage)newComposeImage;
- (UIImage)obscurableBalloonObscuredContentBadgeImage;
- (UIImage)optionsImage;
- (UIImage)pinnedAdHocConversationRadiantShadowImage;
- (UIImage)pinnedConversationFilteredByFocusIndicatorImage;
- (UIImage)playButtonArrowImage;
- (UIImage)playButtonImage;
- (UIImage)quickPinButtonImage;
- (UIImage)quickSaveButtonImage;
- (UIImage)readDNDImage;
- (UIImage)redHeartAckImage;
- (UIImage)replyImage;
- (UIImage)satelliteAvailabilityIndicatorIcon;
- (UIImage)satelliteServiceIcon;
- (UIImage)screenTimeConversationListSummaryIcon;
- (UIImage)signInAppIconImage;
- (UIImage)transcriptEditingSelectedImage;
- (UIImage)transcriptEditingUnselectedImage;
- (UIImage)trashImage;
- (UIImage)unDNDActionImage;
- (UIImage)unavailabilityIndicatorDeemphasizedIcon;
- (UIImage)unavailabilityIndicatorIcon;
- (UIImage)unencryptedServiceIcon;
- (UIImage)unmuteButtonImage;
- (UIImage)unreadDNDImage;
- (UIImage)unreadIndicatorMutedImage;
- (UIImage)unreadIndicatorSelectedImage;
- (UIImage)unreadIndicatorTintedImage;
- (UIImage)unreadIndicatorUntintedImage;
- (UIImage)whatsNewViewApplePayImage;
- (UIImage)whiteA1AckImage;
- (UIImage)whiteA2AckImage;
- (UIImage)whiteExclamationLeftAckImage;
- (UIImage)whiteExclamationRightAckImage;
- (UIImage)whiteH1AckImage;
- (UIImage)whiteH2AckImage;
- (UIImage)whiteHaAckImage;
- (UIImage)whiteHeartAckImage;
- (UIImage)whiteQuestionMarkDotAckImage;
- (UIImage)whiteQuestionMarkGlyphAckImage;
- (UIImage)whiteThumbsDownAckImage;
- (UIImage)whiteThumbsUpAckImage;
- (UIImageSymbolConfiguration)transcriptEditingSelectionImageBaseConfiguration;
- (UIImageSymbolConfiguration)tuConversationBalloonIconConfiguration;
- (UIViewPropertyAnimator)entryViewSendMenuContentViewWidthAnimator;
- (UIViewPropertyAnimator)entryViewSendMenuContentViewWidthDismissAnimator;
- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonAppearanceAnimator;
- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonDismissBlurAnimator;
- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonDismissScaleAnimator;
- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonSymbolDisappearanceOpacityAnimator;
- (UIViewPropertyAnimator)entryViewSendMenuPresentationStateAnimator;
- (UIViewPropertyAnimator)sendMenuAppearanceCollectionViewUpdateAnimator;
- (UIViewPropertyAnimator)sendMenuAppearanceXPositionAnimator;
- (UIViewPropertyAnimator)sendMenuAppearanceYPositionAnimator;
- (UIViewPropertyAnimator)sendMenuBackdropAnimator;
- (UIViewPropertyAnimator)sendMenuIconBlurAppearanceAnimator;
- (UIViewPropertyAnimator)sendMenuIconBlurDismissAnimator;
- (UIViewPropertyAnimator)sendMenuPlusButtonPortalViewPositionAnimator;
- (UIViewPropertyAnimator)sendMenuSelectionScaleAnimator;
- (UIViewPropertyAnimator)sendMenuStatusBarAnimator;
- (UIViewPropertyAnimator)sendMenuTextBlurAnimator;
- (UIViewPropertyAnimator)sendMenuTextBlurDismissAnimator;
- (UIVisualEffect)sendMenuPresentPopoverEffect;
- (UIVisualEffect)transcriptTextVibrancyEffect;
- (__CFCharacterSet)systemUIFontExcessiveLineHeightCharacterSet;
- (char)attachmentBalloonFillColor;
- (char)attachmentBalloonStrokeColor;
- (char)entryViewButtonDefaultColor;
- (double)_entryViewAudioButtonCoverSpace;
- (double)_entryViewDictationButtonCoverSpace;
- (double)_entryViewLinkViewDiscardButtonEdgeInset;
- (double)_transcriptAnimationScaleFactor;
- (double)accessibilityBottomConversationListSpace;
- (double)actionMenuWindowLevel;
- (double)additionalQuickReplyListPadding;
- (double)appDrawerTitleIconHeight;
- (double)appDrawerTitleIconWidth;
- (double)arrowButtonRightPadding;
- (double)attachmentBrowserGridInterItemSpacing;
- (double)attachmentBrowserGridMinimumLineSpacing;
- (double)attachmentBrowserHeaderLabelPadding;
- (double)attributionCollapseButtonLeadingInset;
- (double)attributionCountAndImageViewPadding;
- (double)attributionViewAdditionalTopOffset;
- (double)attributionViewHeight;
- (double)attributionViewMaxWidth;
- (double)attributionViewMinPadding;
- (double)attributionVoteCountTrailingInset;
- (double)audioBalloonHorizontalSpacing;
- (double)audioBalloonProgressInset;
- (double)audioBalloonTimeInset;
- (double)audioBalloonVerticalSpacing;
- (double)audioBalloonWaveformTimeSpace;
- (double)audioHintViewPadding;
- (double)audioRecordingViewButtonSpacing;
- (double)audioRecordingViewDurationSpacing;
- (double)audioRecordingViewLeadingButtonPadding;
- (double)audioRecordingViewMaximumDBLevel;
- (double)audioRecordingViewMinimumDBLevel;
- (double)audioRecordingViewPadding;
- (double)audioRecordingViewPaddingFloat;
- (double)audioRecordingViewTimeBetweenWaveformSegments;
- (double)audioRecordingViewWaveformSpacing;
- (double)audioReplyPreviewBalloonInset;
- (double)audioWaveformGapWidth;
- (double)audioWaveformHeight;
- (double)audioWaveformViewHeight;
- (double)avatarContactImageNameMargin;
- (double)avatarNameWidth;
- (double)avatarSpacingMargin;
- (double)avatarTitleOffset;
- (double)avatarVerticalOffset;
- (double)balloonBalloonTranscriptSpace:(unsigned __int8)a3;
- (double)balloonContiguousSpace;
- (double)balloonLineFragmentPadding;
- (double)balloonMaskTailHeight;
- (double)balloonMaskTailWidth;
- (double)balloonMaxWidthForTranscriptWidth:(double)a3 marginInsets:(UIEdgeInsets)a4 shouldShowPluginButtons:(BOOL)a5 shouldShowCharacterCount:(BOOL)a6 shouldCoverSendButton:(BOOL)a7;
- (double)balloonMaxWidthPercent;
- (double)balloonNonContiguousSpace;
- (double)balloonResetAnimationDuration;
- (double)balloonSelectionLoadMoreSpinnerHeight;
- (double)balloonSelectionMaxScrollSpeed;
- (double)balloonSelectionScrollThresholdBottom;
- (double)balloonSelectionScrollThresholdTop;
- (double)bannerAdditionalOffset;
- (double)bannerTitleAdditionalOffset;
- (double)blurBoundOutsetPadding;
- (double)bottomConversationListSpace;
- (double)bottomTranscriptSpace;
- (double)browserSwitcherCollapsedGrabberHeaderHeight;
- (double)browserSwitcherCompactGrabberVisibleHeight;
- (double)browserSwitcherEdgeGestureWidth;
- (double)browserSwitcherExpandThreshold;
- (double)browserSwitcherExpandedGrabberHeaderHeight;
- (double)browserSwitcherGutterWidth;
- (double)browserSwitcherScrollerHeight;
- (double)bubbleLeftInsetForQuicktationInEntryView;
- (double)businessBrandingAnimationDuration;
- (double)businessBrandingBannerInset;
- (double)businessSquareToolbarLogoHeight;
- (double)callButtonLongPressDuration;
- (double)callButtonSize;
- (double)cameraAppsMinimizedDockHeight;
- (double)catchUpButtonPadding;
- (double)chatChromeBottomInset;
- (double)chatMagnifiedChromeBottomInset;
- (double)composeBalloonCornerRadius;
- (double)composeBalloonMaxWidthForEntryContentViewWidth:(double)a3;
- (double)contactBalloonHeight;
- (double)contactBalloonInnerItemSpacing;
- (double)contactBalloonMinWidth;
- (double)contactBalloonNameOrgSpacing;
- (double)contactBalloonOrgBottomSpacing;
- (double)contactBalloonTopNameSpacing;
- (double)contactPhotoBalloonMargin;
- (double)conversationCellLeadingSeparatorInsetForEnvironment:(id)a3;
- (double)conversationListAccessoryIndicatorToSummaryLabelPadding;
- (double)conversationListBottomTipSectionPadding;
- (double)conversationListButtonToTitleSpacing;
- (double)conversationListCellAdditionalLeftMarginForAvatarView;
- (double)conversationListCellAdditionalLeftMarginWhenEditing;
- (double)conversationListCellBackgroundPadding;
- (double)conversationListCellHighlightViewToUnreadIndicatorPadding;
- (double)conversationListCellLargeTextLeftMargin;
- (double)conversationListCellLargeTextSenderSummaryInterspacing;
- (double)conversationListCellLeftMargin;
- (double)conversationListCellRightMargin;
- (double)conversationListCellRoundSelectorLeftInset;
- (double)conversationListCellRoundSelectorRightInset;
- (double)conversationListCellTypingIndicatorScale;
- (double)conversationListComposeButtonSpacing;
- (double)conversationListContactImageDiameter;
- (double)conversationListContactImageTrailingSpace;
- (double)conversationListEditingTableMarginWidth;
- (double)conversationListFocusFilterBannerBottomPadding;
- (double)conversationListFocusFilterBannerTopPadding;
- (double)conversationListMinimumWidthForHiddenContactImage;
- (double)conversationListMultipleContactsImageDiameter;
- (double)conversationListPinnedCellSelectedBackgroundCornerRadius;
- (double)conversationListPinnedConversationPreviewFontSizeOverrideLarge;
- (double)conversationListPinnedConversationPreviewFontSizeOverrideStandard;
- (double)conversationListSIMLabelBaseBuffer;
- (double)conversationListSIMLabelBaseRadius;
- (double)conversationListSIMLabelHeightTextSizeRatio;
- (double)conversationListSenderBodyLeading;
- (double)conversationListSenderToDateHorizontalPadding;
- (double)conversationListSummaryBodyLeading;
- (double)conversationListTableMarginWidth;
- (double)conversationListTotalLastPinNameToFirstCellSpacing;
- (double)conversationListWidthForInterfaceOrientation:(int64_t)a3;
- (double)curveValueForSwipeWithVelocity:(CGPoint)a3 t:(double)a4;
- (double)defaultNavigationBarHeightValueWantsMinimumSafeAreas:(BOOL)a3;
- (double)defaultNavigationBarNoContactPhotoCollapsedHeightValue;
- (double)defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding;
- (double)defaultToolbarHeight;
- (double)detailsAddButtonDiameter;
- (double)detailsAvatarCornerRadius;
- (double)detailsAvatarCutoutDiameter;
- (double)detailsAvatarDiameter;
- (double)detailsAvatarPancakeViewOverlapOffset;
- (double)detailsAvatarPancakeViewWidth2Avatars;
- (double)detailsAvatarPancakeViewWidth3Avatars;
- (double)detailsCellLabelPadding;
- (double)detailsContactAvatarLabelSpacing;
- (double)detailsContactCellButtonHeight;
- (double)detailsContactCellButtonWidth;
- (double)detailsContactCellMinimumHeight;
- (double)detailsDownloadAttachmentsHeaderiCloudImageAlphaForDarkMode;
- (double)detailsDownloadAttachmentsHeaderiCloudImageAlphaForLightMode;
- (double)detailsExpanseActivityDescriptionVerticalPadding;
- (double)detailsExpanseActivityImageInsetPadding;
- (double)detailsExpanseCellHeight;
- (double)detailsExpanseDescriptionLabelHeight;
- (double)detailsExpanseImageFallbackDimension;
- (double)detailsExpanseScreenShareCellHeight;
- (double)detailsExpanseScreenShareIconHorizontalInsetPadding;
- (double)detailsExpanseScreenShareIconVerticalInsetPadding;
- (double)detailsGroupHeaderCellAvatarViewRightMargin;
- (double)detailsGroupHeaderCellInterTextVerticalSpacing;
- (double)detailsGroupHeaderCellSubtitleViewRightMargin;
- (double)detailsSectionHeaderPaddingAbove;
- (double)detailsSectionHeaderPaddingLeading;
- (double)detailsShareLocationCornerRadius;
- (double)detailsTUConversationCellButtonHeight;
- (double)detailsTUConversationCellButtonMinWidth;
- (double)detailsTUConversationDetailsSummaryImageDiameter;
- (double)detailsViewContactImageDiameter;
- (double)detailsViewMapHeight;
- (double)disabledNavigationButtonStrokeWidth;
- (double)disabledNavigationButtonWidth;
- (double)dividerHeight;
- (double)dragBalloonCornerRadius;
- (double)dragBalloonHeightReducedAttractorThreshold;
- (double)dragBalloonTailCropWidth;
- (double)dragBalloonWidthIncreasedAttractorThreshold;
- (double)dragEdgeLayoutIntentPadding;
- (double)dragPinchGestureScaleFactor;
- (double)dragTranscriptScrollDisplayLinkMaxDelta;
- (double)dragTranscriptScrollThreshold;
- (double)editingCheckmarkLeadingPadding;
- (double)editingCheckmarkTrailingPadding;
- (double)editingTransitionAnimationDuration;
- (double)emojiPreviewMaxWidth;
- (double)emojiStickerDropPreviewMaxDimension;
- (double)emojiStickerImageGenerationFontSize;
- (double)emojiStickerInlinePreviewMaxDimension;
- (double)emojiTapbackScaleFactor;
- (double)entryContentViewTextLeftOffset;
- (double)entryFieldCoverLineWidth;
- (double)entryViewAppButtonImagePointSize;
- (double)entryViewAttachmentHorizontalOffset;
- (double)entryViewAttachmentVerticalOffset;
- (double)entryViewAudioButtonCoverSpace;
- (double)entryViewBackgroundAlpha;
- (double)entryViewCoverMinHeight;
- (double)entryViewDictationButtonCoverSpace;
- (double)entryViewGenerationButtonDiameter;
- (double)entryViewGenerationButtonMargin;
- (double)entryViewLeftInsetForRecordedAudioCancelButton;
- (double)entryViewLinkViewDiscardButtonDiameter;
- (double)entryViewLinkViewDiscardButtonEdgeInset;
- (double)entryViewLinkViewDiscardButtonExtraHitTestPadding;
- (double)entryViewMaxExtensionShelfHeight;
- (double)entryViewMaxHandWritingPluginShelfHeight;
- (double)entryViewMaxHeight;
- (double)entryViewMaxPluginShelfHeight;
- (double)entryViewMaxSendLaterHeight;
- (double)entryViewMinPluginShelfHeight;
- (double)entryViewNonCollapsableLeftPadding;
- (double)entryViewPlusButtonLongPressDuration;
- (double)entryViewPlusButtonToTextFieldPadding;
- (double)entryViewSendButtonCoverSpace;
- (double)entryViewTaillessBalloonCornerRadius;
- (double)entryViewTaillessBalloonMaskMinHeight;
- (double)entryViewTaillessBalloonMaskRightImageSpacing;
- (double)entryViewTextOneLineHeight;
- (double)entryViewWithSendMenuBottomContentInsetWithKeyboardVisible;
- (double)entryViewWithSendMenuBottomContentInsetWithoutKeyboardVisible;
- (double)extensionBalloonMaximumHeight;
- (double)extensionIconBadgePaddingAroundBalloon;
- (double)extraLargeTranscriptSpace;
- (double)extraTallExtensionBalloonMaximumHeight;
- (double)fadeInBubbleAnimationDuration;
- (double)fadeInReplyPreviewAnimationDuration;
- (double)finalReplyIndicatorScale;
- (double)horizontalBalloonBadgeInset;
- (double)initialReplyIndicatorBlurRadius;
- (double)initialReplyIndicatorScale;
- (double)ktStatusCellImagePadding;
- (double)largeTextTopConversationListSpace;
- (double)largeTranscriptSpace;
- (double)locationShareBalloonAdditionalVertPadding;
- (double)locationShareBalloonButtonHeight;
- (double)locationShareBalloonContactImageDiameter;
- (double)locationShareBalloonLabelMaxHeightForOfferState:(int64_t)a3;
- (double)locationShareBalloonLabelPadding;
- (double)locationShareBalloonMaxVisibleMapHeight;
- (double)locationShareOneHourTimeInterval;
- (double)locationValidInterval;
- (double)mapPreviewMaxWidth;
- (double)maxAudioRecordingDuration;
- (double)maxConversationListWidth;
- (double)maxNavigationBarCollapsedHeightValueForMinimumSafeArea;
- (double)maxNavigationBarExpandedHeightValue;
- (double)maxNavigationBarHeightValue;
- (double)maxNavigationBarHeightValueWantsMinimumSafeAreasLocationLabelPadding;
- (double)maxPulseReplyIndicatorScale;
- (double)maxStickerReactionRotation;
- (double)maxTranscriptPortraitHeight;
- (double)maxTranscriptPortraitWidth;
- (double)mediumLargeTranscriptSpace;
- (double)mediumTranscriptSpace;
- (double)messageAcknowledgementVotingViewHeight;
- (double)messageAcknowledgementVotingViewMaxWidth;
- (double)messageAcknowledgementVotingViewMinPadding;
- (double)messageAcknowledgmentButtonMargin;
- (double)messageAcknowledgmentPhotoCarouselXOffsetScalar;
- (double)messageAcknowledgmentPhotoGridXOffsetScalar;
- (double)messageAcknowledgmentPhotoGridYOffsetScalar;
- (double)messageAcknowledgmentPickerBarArrowPadding;
- (double)messageAcknowledgmentPickerBarArrowWidth;
- (double)messageAcknowledgmentPickerBarItemSectionPush;
- (double)messageAcknowledgmentPickerBarItemSectionScaleFactor;
- (double)messageAcknowledgmentPickerBarPadding;
- (double)messageAcknowledgmentPickerMinHorizontalMargin;
- (double)messageEditingAnimateInDamping;
- (double)messageEditingAnimateInDuration;
- (double)messageEditingAnimateOutDamping;
- (double)messageEditingAnimateOutDuration;
- (double)messageEditingBalloonToNavBarMinimumPadding;
- (double)messageEditingButtonInternalPadding;
- (double)messageEditingCompactTrailingEdgeToButtonPadding;
- (double)messageEditingKeyboardToBalloonMinimumPadding;
- (double)messageEditingKeyboardToBalloonPreferredPadding;
- (double)messageEditingNonCompactBalloonPillEdgeToRightButtonPadding;
- (double)messageEditingNonCompactBalloonToLeftButtonPadding;
- (double)messageEditingNonCompactLeftEdgeToButtonMinimumPadding;
- (double)messageEditingNonCompactRightEdgeToButtonPadding;
- (double)messageEntryContentViewClearOffsetFromRight;
- (double)messageEntryContentViewClearOffsetFromTop;
- (double)messageEntryContentViewGenerationOffsetFromBottom;
- (double)messageEntryContentViewGenerationOffsetFromLeft;
- (double)messageHighlightButtonGlyphPointSize;
- (double)messageHighlightButtonGlyphSymbolPointSize;
- (double)messageHighlightGlyphSymbolPointSize;
- (double)messageHighlightTranscriptBalloonBorderWidth;
- (double)messageHighlightTranscriptBalloonBottomPadding;
- (double)minAudioRecordingDuration;
- (double)minConversationListWidth;
- (double)minNavigationBarHeightValue;
- (double)minStickerReactionRotation;
- (double)minTranscriptSpace;
- (double)minimumWaveformHeight;
- (double)muteEightHourTimeInterval;
- (double)muteOneHourTimeInterval;
- (double)navBarButtonSymbolImageFontSize;
- (double)navBarSubtitleFontLeadingValueForContentSizeCategory:(id)a3;
- (double)navBarSubtitleFontTrackingValueForContentSizeCategory:(id)a3;
- (double)navBarTitleViewAXFontSizePadding;
- (double)navbarButtonImagePointSize;
- (double)navbarSubtitleBottomPadding;
- (double)navigationBarBackButtonMargin;
- (double)navigationBarDefaultHeight;
- (double)navigationBarHeaderButtonVerticalOffset;
- (double)navigationBarLeftItemVerticalCenterOffset;
- (double)navigationBarTitleViewHeightWithContactPhoto;
- (double)navigationBarTitleViewVerticalOffsetWantsMinimumSafeAreas:(BOOL)a3;
- (double)notifyAnywayBottomTranscriptSpace;
- (double)obscurableBalloonHorizontalPadding;
- (double)obscurableBalloonVerticalPadding;
- (double)onBoardingKitWelcomeControllerHeaderViewIconSize;
- (double)paddleDividerInset;
- (double)paddleOverlayRadius;
- (double)photoPickerInterItemSpacing;
- (double)photoPickerMaxPhotoHeight;
- (double)photoPickerMaxPhotoWidthForAlertWidth:(double)a3;
- (double)photoPickerMaxPopoverPhotoHeight;
- (double)photoPickerMaxZoomedPhotoHeightForAlertWidth:(double)a3;
- (double)photoPickerPopoverWidth;
- (double)photoSheetVideoIconPadding;
- (double)pinnedConversationActivityBroadShadowDarkOpacity;
- (double)pinnedConversationActivityBroadShadowDarkRadius;
- (double)pinnedConversationActivityBroadShadowLightOpacity;
- (double)pinnedConversationActivityBroadShadowLightRadius;
- (double)pinnedConversationActivitySnapshotContentScaleMostRecent;
- (double)pinnedConversationActivitySnapshotContentScaleNonRecent;
- (double)pinnedConversationActivitySnapshotContentScaleSecondMostRecent;
- (double)pinnedConversationActivityTightShadowDarkOpacity;
- (double)pinnedConversationActivityTightShadowDarkRadius;
- (double)pinnedConversationActivityTightShadowLightOpacity;
- (double)pinnedConversationActivityTightShadowLightRadius;
- (double)pinnedConversationCheckmarkStrokeRatio;
- (double)pinnedConversationDefaultAccessorySize;
- (double)pinnedConversationViewTitleLabelToEdgePaddingWhenNoUnreadIndicator;
- (double)pluginDividerLineInsetsWithPluginShelf;
- (double)presentationControllerWindowLevel;
- (double)previewBalloonMaxWidthForBalloonMaxWidth:(double)a3;
- (double)previewMaxWidth;
- (double)previewTitleBarHeight;
- (double)progressThresholdForTitleUpdateAnimation;
- (double)quickReplyListBottomTranscriptSpace;
- (double)quickReplyListTopTranscriptSpace;
- (double)raiseToTalkAutoSendMaxDuration;
- (double)raiseToTalkErrorMaxDuration;
- (double)readerContentInset;
- (double)recipientSelectionBackgroundPlatterCornerRadius;
- (double)recipientSelectionBackgroundPlatterVerticalInset;
- (double)replyBalloonMinHeight;
- (double)replyButtonAnimationDuration;
- (double)replyButtonBackgroundBlurRadius;
- (double)replyButtonBorderWidth;
- (double)replyButtonHorizontalOriginOffsetPercent;
- (double)replyButtonPadding;
- (double)replyButtonTouchAlpha;
- (double)replyButtonTouchScale;
- (double)replyButtonVerticalOriginOffsetPercent;
- (double)replyEntryViewBackagroundAlpha;
- (double)replyIndicatorPulseAnimationDuration;
- (double)replyIndicatorResetAnimationDuration;
- (double)replyLineBracketRadius;
- (double)replyLineViewContactImageLayoutHorizontalPadding;
- (double)replyLineViewHorizontalPadding;
- (double)replyLineViewMaxWidth;
- (double)replyLineViewVerticalPadding;
- (double)replyLineWidth;
- (double)replyPreviewBalloonAlpha;
- (double)replyPreviewBalloonMinWidth;
- (double)replyPreviewImageDiameter;
- (double)replyToSelfButtonOffset;
- (double)replyTranscriptBackgroundBlurAnimationTime;
- (double)replyTranscriptBackgroundBlurRadius;
- (double)replyTranscriptUpdateBannerAnimateInTime;
- (double)replyTranscriptUpdateBannerAnimateOutTime;
- (double)resizeMessageEntryViewAnimationDuration;
- (double)resumeToConversationListTimeInterval;
- (double)satelliteAvailabilityIndicatorBottomTranscriptSpace;
- (double)satelliteSuppressedNotificationBottomTranscriptSpace;
- (double)scheduledImageBalloonAlpha;
- (double)scrollInNewMessageAnimationDuration;
- (double)searchAttachmentsCellCornerRadius;
- (double)searchAttachmentsCellDatePadding;
- (double)searchAttachmentsCellPadding;
- (double)searchAttachmentsImageTopPadding;
- (double)searchAttachmentsInterItemSpacing;
- (double)searchAttachmentsTitleTopPadding;
- (double)searchCellPreferredWidth;
- (double)searchCollaborationInterItemSpacing;
- (double)searchConversationAvatarCellInterItemSpacing;
- (double)searchConversationCellPadding;
- (double)searchConversationMinAvatarLabelSpacing;
- (double)searchDetailsLeadingAndTrailingMaxPadding;
- (double)searchDetailsPhotosShowAllSectionMarginHorizonalInset;
- (double)searchDetailsSeeAllButtonTrailingMargin;
- (double)searchDropdownAvatarDiameter;
- (double)searchHeaderHeight;
- (double)searchHighlightsInterItemSpacing;
- (double)searchLeadingAndTrailingMaxPadding;
- (double)searchLinksCellCornerRadius;
- (double)searchLinksFractionalHeightScale;
- (double)searchLinksFractionalWidthScale;
- (double)searchLinksInterItemSpacing;
- (double)searchLinksThumbnailWidth;
- (double)searchLocationCellCornerRadius;
- (double)searchLocationsInterItemSpacing;
- (double)searchMessageCellHeightForDisplayScale:(double)a3;
- (double)searchMessagesBalloonToChevronSpacing;
- (double)searchMessagesBottomSpacing;
- (double)searchMessagesConversationToSenderSpacing;
- (double)searchMessagesHorizontalBalloonMargin;
- (double)searchMessagesInterGroupSpacing;
- (double)searchMessagesSenderToBalloonSpacing;
- (double)searchMessagesTopSpacing;
- (double)searchPassesInterItemSpacing;
- (double)searchPhotosCellCornerRadius;
- (double)searchPhotosCellZKWAndDetailsCornerRadius;
- (double)searchPhotosInterItemSpacing;
- (double)searchPhotosInterItemSpacingDetailsView;
- (double)searchPhotosSeeAllCellCornerRadius;
- (double)searchPhotosSegmentedControlBottomPadding;
- (double)searchPhotosThumbnailWidth;
- (double)searchPhotosZKWAndDetailsInterItemSpacing;
- (double)searchResultAvatarSize;
- (double)searchResultsCellCornerRadius;
- (double)searchResultsDetailsItemFractionalHeight;
- (double)searchResultsDetailsTitleHeaderTextLeadingMargin;
- (double)searchResultsInterItemSpacing;
- (double)searchResultsInterItemSpacingDetailsView;
- (double)searchResultsItemFractionalHeight;
- (double)searchResultsTitleHeaderAXBottomPadding;
- (double)searchResultsTitleHeaderAXTopPadding;
- (double)searchResultsTitleHeaderBottomPadding;
- (double)searchResultsTitleHeaderDetailsTopPadding;
- (double)searchResultsTitleHeaderInterItemSpacing;
- (double)searchResultsTitleHeaderTextLeadingMargin;
- (double)searchResultsTitleHeaderTopPadding;
- (double)searchSectionTitleVertPadding;
- (double)searchSeeAllButtonTrailingMargin;
- (double)searchSuggestionsImageToTextPadding;
- (double)searchSuggestionsSeparatorLeadingInset;
- (double)selfReplyTranscriptSpace;
- (double)sendAnimationDuration;
- (double)sendButtonSize;
- (double)sendMenuAppearAnimationIconBlurInitialRadius;
- (double)sendMenuAppearAnimationTextBlurInitialRadius;
- (double)sendMenuCollectionViewBottomContentInset;
- (double)sendMenuDismissAnimationIconBlurFinalRadius;
- (double)sendMenuDismissAnimationTextBlurFinalRadius;
- (double)sendMenuEntryViewContentWidthMultiplier;
- (double)sendMenuEntryViewHorizontalPositionAdjustment;
- (double)sendMenuListItemIconToEdgePadding;
- (double)sendMenuListItemIconToLabelPadding;
- (double)sendMenuListItemIconVerticalPadding;
- (double)sendMenuPopoverPresentingAppCornerRadius;
- (double)sendMenuPreferredNumberOfItemsToDisplayOnOpen;
- (double)sendMenuPrototypeCellMaximumWidth;
- (double)sendMenuTextOpacityAppearanceAnimationDelay;
- (double)sendProgressTitleTransitionProgressThreshold;
- (double)senderSummaryConversationListSpace;
- (double)sensitiveLabelPadding;
- (double)signInAuthKitViewHeight;
- (double)signInAuthKitViewWidth;
- (double)signInContainerWidth;
- (double)signInPrivacyLinkHeight;
- (double)signInPrivacyWidthMultiplier;
- (double)signInSplashImageBottomPadding;
- (double)signInSplashImageTopPadding;
- (double)signInTitleBottomPadding;
- (double)skinnyBalloonWidthDifference;
- (double)smallTranscriptSpace;
- (double)spaceBetweenQuickReplyRows;
- (double)stackBalloonVerticalInset;
- (double)stickerDisplaySizeScale;
- (double)stickerDropPreviewMaxDimension;
- (double)stickerDropPreviewMaxWidthForImageSize:(CGSize)a3 isEmoji:(BOOL)a4 displayScale:(double)a5;
- (double)stickerInlinePreviewMaxDimension;
- (double)stickerInlinePreviewMaxWidthForImageSize:(CGSize)a3 isEmoji:(BOOL)a4 displayScale:(double)a5;
- (double)stickerReactionHorizontalOverlapPercentage;
- (double)stickerReactionOddRowInset;
- (double)stickerReactionTextBalloonAdditionalVerticalPadding;
- (double)stickerReactionTranscriptPaddingPercentage;
- (double)stickerReactionVerticalOverlapPercentage;
- (double)stickerScreenScale;
- (double)stickersCellCornerRadius;
- (double)suggestedActionsMenuAdditionalHeightWithChatBotActionButton:(id)a3;
- (double)suggestedRepliesViewMaxWidth;
- (double)summaryDateConversationListSpace;
- (double)swipeToReplyConfirmThreshold;
- (double)swipeToReplyShowIndicatorThreshold;
- (double)syncBarFooterHeight;
- (double)syncProgressLeadingPadding;
- (double)syncProgressTopPadding;
- (double)syncProgressTrailingPadding;
- (double)tapbackDismissalDuration;
- (double)textAlignmentRectInsetsScaleFactor;
- (double)textBalloonMinHeight;
- (double)textReplyPreviewBalloonMinHeight;
- (double)throwMessageAnimationDuration;
- (double)tipCellCornerRadius;
- (double)tipCellLeadingInset;
- (double)tipCellMicaAnimationPadding;
- (double)tipCellMicaAnimationSize;
- (double)tipCellTrailingInset;
- (double)toFieldInterItemSpacing;
- (double)toFieldPreferredHeight;
- (double)toFieldXOffset;
- (double)toFieldYOffset;
- (double)topConversationListSpace;
- (double)topTranscriptSpace;
- (double)totalTopSpacingFromSearchBarToPinnedItems:(BOOL)a3;
- (double)transcriptBoldTextHeight;
- (double)transcriptContactImageDiameter;
- (double)transcriptCustomStatusImagePadding;
- (double)transcriptDrawerContactImageDiameter;
- (double)transcriptDrawerContactImagePadding;
- (double)transcriptDrawerGestureAcceleration;
- (double)transcriptDrawerOverlapForMarginInsets:(UIEdgeInsets)a3;
- (double)transcriptDrawerSpace;
- (double)transcriptDrawerWidthForMarginInsets:(UIEdgeInsets)a3;
- (double)transcriptHeaderChevronRotationAnimationSpeed;
- (double)transcriptHeaderViewMaxRows;
- (double)transcriptJunkHeaderButtonHeight;
- (double)transcriptQuickActionButtonDiameter;
- (double)transcriptQuickActionButtonHorizontalSpacing;
- (double)transcriptReplyPreviewContextContactAlpha;
- (double)transcriptReplyPreviewContextContactImageDiameter;
- (double)transcriptResortTimeout;
- (double)transcriptScrollToBottomDuration;
- (double)transcriptScrollToBottomThreshold;
- (double)transcriptTypingIndicatorLargeBubbleGrowBeginTime;
- (double)transcriptTypingIndicatorThinkingDotDiameter;
- (double)transcriptTypingIndicatorThinkingDotSpace;
- (double)transcriptWaveformWidthForDuration:(double)a3;
- (double)tuConversationBalloonAvatarDimensions;
- (double)tuConversationBalloonContentBottomPadding;
- (double)tuConversationBalloonContentCompressedMinWidth;
- (double)tuConversationBalloonContentMinHeight;
- (double)tuConversationBalloonContentStandardMinWidth;
- (double)tuConversationBalloonContentTopPadding;
- (double)tuConversationBalloonFaceTimeIconDimensions;
- (double)tuConversationBalloonIconDimensions;
- (double)tuConversationBalloonImageDimensions;
- (double)tuConversationBalloonInteritemSpacing;
- (double)tuConversationBalloonJoinButtonHeight;
- (double)tuConversationBalloonJoinButtonLeadingPadding;
- (double)tuConversationBalloonJoinButtonMaxWidth;
- (double)tuConversationBalloonJoinButtonMinWidth;
- (double)tuConversationBalloonJoinButtonTrailingPadding;
- (double)tuConversationBalloonLabelLeadingPadding;
- (double)tuConversationBalloonLabelTrailingPadding;
- (double)tuConversationBalloonSessionImageTrailingPadding;
- (double)tuConversationButtonInteritemSpacing;
- (double)tuConversationButtonTitleHorizontalSpacing;
- (double)tuConversationButtonTitleVerticalSpacing;
- (double)tuConversationIconPointSize;
- (double)tuConversationInsetPadding;
- (double)tuConversationInteritemSpacing;
- (double)tuConversationJoinButtonCornerRadius;
- (double)tuConversationJoinButtonHeight;
- (double)tuConversationJoinButtonMinWidth;
- (double)unavailabilityIndicatorBottomTranscriptSpace;
- (double)updateTranscriptInsetsAnimationDuration;
- (double)verticalBalloonBadgeInset;
- (double)videoControllerWindowLevel;
- (double)waveformDefaultImagePowerLevelCount;
- (double)waveformHeight;
- (double)waveformMaxWidth;
- (double)waveformMaxWidthDuration;
- (double)waveformMinDbPowerLevel;
- (double)waveformMinLinearPowerLevel;
- (double)waveformViewHeight;
- (double)waveformWidth;
- (double)welcomeViewContentViewLeadingAnchorLayoutConstraintConstant;
- (double)welcomeViewContentViewTopAnchorLayoutConstraintConstant;
- (double)whatsNewViewBulletPointSymbolLeadingAnchorLayoutConstraintConstant;
- (double)whatsNewViewBulletPointTextTrailingAnchorLayoutConstraintConstant;
- (double)xsTranscriptSpace;
- (id)__ck_localizedString:(id)a3;
- (id)_balloonParagraphStyle;
- (id)_balloonSubjectFont;
- (id)_balloonTextFont;
- (id)_breadcrumbTranscriptTextAttributes;
- (id)_drawerTranscriptTextAttributes;
- (id)_entryViewDictationButtonColor;
- (id)_entryViewlayoutMetrics;
- (id)_leftStatusTranscriptTextAttributes;
- (id)_leftTranscriptButtonTextAttributes;
- (id)_messageEditingConfirmButtonImageWithButtonColor:(id)a3;
- (id)_replyBalloonTextFont;
- (id)_rightStatusTranscriptTextAttributes;
- (id)_rightTranscriptButtonTextAttributes;
- (id)_senderTranscriptTextAttributes;
- (id)_stewieTranscriptEmergencyServiceAttributes;
- (id)_stewieTranscriptEmergencyUserAttributes;
- (id)_suggestedRepliesViewBackgroundColor;
- (id)_transcriptAvailabilityDeemphasizedFontAttributes;
- (id)_transcriptAvailabilityFontAttributes;
- (id)_transcriptEmergencyEmphasizedFontAttributes;
- (id)_transcriptEmphasizedFontAttributes;
- (id)_transcriptEmphasizedPreferredFontAttributes;
- (id)_transcriptErrorStampPreferredFontAttributes;
- (id)_transcriptGroupModificationErrorEmphasizedFontAttributes;
- (id)_transcriptGroupModificationErrorRegularFontAttributes;
- (id)_transcriptLabelAccessoryButtonConfiguration;
- (id)_transcriptNotifyAnywayFontAttributes;
- (id)_transcriptRegularFontAttributes;
- (id)_transcriptRegularPreferredFontAttributes;
- (id)_transcriptSMSEmphasizedFontAttributes;
- (id)_transcriptSatelliteFontAttributes;
- (id)_transcriptiMessageEmphasizedFontAttributes;
- (id)aggregateAcknowledgmentBottomMiddleName:(BOOL)a3;
- (id)aggregateAcknowledgmentBottomTopName:(BOOL)a3;
- (id)aggregateAcknowledgmentMiddleName:(BOOL)a3;
- (id)aggregateAcknowledgmentStackBackgroundName2:(BOOL)a3;
- (id)aggregateAcknowledgmentStackBackgroundName3:(BOOL)a3;
- (id)aggregateAcknowledgmentStackName2:(BOOL)a3;
- (id)aggregateAcknowledgmentStackName3:(BOOL)a3;
- (id)aggregateAcknowledgmentTopBackgroundName:(BOOL)a3;
- (id)aggregateAcknowledgmentTopName:(BOOL)a3;
- (id)appMenuAnimojiStickersIconForTraitCollection:(id)a3;
- (id)appMenuApplePayIconForTraitCollection:(id)a3;
- (id)appMenuAudioMessagesIconForTraitCollection:(id)a3;
- (id)appMenuEffectsIconForTraitCollection:(id)a3;
- (id)appMenuEmojiIconForTraitCollection:(id)a3;
- (id)appMenuHashtagImagesIconForTraitCollection:(id)a3;
- (id)appMenuPhotosIconForTraitCollection:(id)a3;
- (id)appMenuTapToRadarIconForTraitCollection:(id)a3;
- (id)audioButtonName;
- (id)background_chevronImage;
- (id)black_chevronImage;
- (id)blue_chevronImage;
- (id)breadcrumbTranscriptTextAttributes;
- (id)business_chevronImage;
- (id)chevronImageForColorType:(char)a3;
- (id)configurationForNoExistingConversations:(id)a3;
- (id)conversationListMoveSelectedToRecentlyDeletedButtonItemWithTarget:(id)a3 action:(SEL)a4;
- (id)dictationButtonName;
- (id)disabledNavigationButtonStrokeColor;
- (id)fullscreenPickerActionLayoutAxisPrioritiesForWidth:(double)a3;
- (id)gray_chevronImage;
- (id)green_chevronImage;
- (id)imageNameForBalloonDescriptor:(CKBalloonDescriptor_t *)a3;
- (id)imageNameForBalloonDescriptorWithFilledStyle:(CKBalloonDescriptor_t *)a3;
- (id)imageNameForBalloonDescriptorWithStrokedStyle:(CKBalloonDescriptor_t *)a3;
- (id)imageNamed:(id)a3 pointSize:(double)a4 insets:(UIEdgeInsets)a5;
- (id)imageNamed:(id)a3 pointSize:(double)a4 insets:(UIEdgeInsets)a5 color:(id)a6;
- (id)impactBalloonName;
- (id)impactSkinnyBalloonName;
- (id)largeMessageAcknowledgmentPollingImageNameForAcknowledgmentType:(int64_t)a3;
- (id)mentionTranscriptFontFromOrignalFont:(id)a3;
- (id)messageAcknowledgmentImageNameForType:(int64_t)a3;
- (id)messageAcknowledgmentPollingImageNameForAcknowledgmentType:(int64_t)a3;
- (id)message_editing_black_chevronImage;
- (id)multilineBalloonName;
- (id)multilineStrokedBalloonName;
- (id)multilineStrokedTaillessBalloonName;
- (id)multilineTaillessBalloonName;
- (id)multiwayGrayChevronImage;
- (id)multiway_chevronImage;
- (id)navBarExpanseImageName;
- (id)navBarGlyphFont;
- (id)navBarHeaderChevronImageDefault;
- (id)navBarHeaderOpaqueChevronImageDefault;
- (id)navBarSubtitleAttributedStringAttributesForContentSizeCategory:(id)a3;
- (id)navBarSubtitleFontForContentSizeCategory:(id)a3;
- (id)navBarSubtitleParagraphStyleForContentSizeCategory:(id)a3;
- (id)newEntryViewPlusButtonIconImageView;
- (id)newSendMenuDismissPopoverAnimator;
- (id)newSendMenuDismissPopoverCenterXAnimator;
- (id)newSendMenuDismissPopoverCenterYAnimator;
- (id)newSendMenuDismissPopoverHeightAnimator;
- (id)newSendMenuDismissPopoverPlusCenterXAnimator;
- (id)newSendMenuDismissPopoverPlusCenterYAnimator;
- (id)newSendMenuDismissPopoverPlusIconBlurRadiusAnimator;
- (id)newSendMenuDismissPopoverPlusIconOpacityAnimator;
- (id)newSendMenuDismissPopoverPlusIconScaleXAnimator;
- (id)newSendMenuDismissPopoverPlusIconScaleYAnimator;
- (id)newSendMenuDismissPopoverWidthAnimator;
- (id)newSendMenuPopoverLayoutConfiguration;
- (id)newSendMenuPresentAppInPopoverCenterXAnimator;
- (id)newSendMenuPresentAppInPopoverCenterYAnimator;
- (id)newSendMenuPresentAppInPopoverHeightAnimator;
- (id)newSendMenuPresentAppInPopoverOpacityAnimator;
- (id)newSendMenuPresentAppInPopoverWidthAnimator;
- (id)newSendMenuPresentPopoverAnimator;
- (id)newSendMenuPresentPopoverCenterXAnimator;
- (id)newSendMenuPresentPopoverCenterYAnimator;
- (id)newSendMenuPresentPopoverHeightAnimator;
- (id)newSendMenuPresentPopoverPlusCenterXAnimator;
- (id)newSendMenuPresentPopoverPlusCenterYAnimator;
- (id)newSendMenuPresentPopoverPlusIconBlurRadiusAnimator;
- (id)newSendMenuPresentPopoverPlusIconOpacityAnimator;
- (id)newSendMenuPresentPopoverPlusIconScaleXAnimator;
- (id)newSendMenuPresentPopoverPlusIconScaleYAnimator;
- (id)newSendMenuPresentPopoverWidthAnimator;
- (id)newSendMenuTransitionToAppAnimator;
- (id)opaque_orb_gray_chevronImage;
- (id)pasteConfigurationDisablingKeyboardStickers:(BOOL)a3;
- (id)pending_blue_chevronImage;
- (id)red_chevronImage;
- (id)replyBalloonName;
- (id)replyDeleteBalloonName;
- (id)replyMultilineBalloonName;
- (id)replySkinnyBalloonName;
- (id)replyStrokedBalloonName;
- (id)replyStrokedMultilineBalloonName;
- (id)replyStrokedSkinnyBalloonName;
- (id)reply_blue_chevronImage;
- (id)reply_gray_chevronImage;
- (id)reply_green_chevronImage;
- (id)roundBalloonName;
- (id)siriLogoImage;
- (id)siri_chevronImage;
- (id)stewie_chevronImage;
- (id)systemGrayChevronImage;
- (id)transcriptButtonTextFont;
- (id)transcriptDrawerFont;
- (id)transcriptErrorStampFont;
- (id)transcriptErrorStampPreferredFont;
- (id)transcriptSenderFont;
- (id)whiteChevronImage;
- (id)white_chevronImage;
- (int64_t)HUDStyle;
- (int64_t)_syncBarBlurEffectStyle;
- (int64_t)conversationListLayoutPinnedSectionNumberOfColumns;
- (int64_t)conversationListSeparatorStyle;
- (int64_t)detailsActionViewStyle;
- (int64_t)detailsGroupChevronImageScale;
- (int64_t)groupRecipientSelectionPresentationStyle;
- (int64_t)locationShareEODHour;
- (int64_t)maxNumExtensionRemoteViewControllers;
- (int64_t)maximumEmojiCountForMultipleBigEmojiFont;
- (int64_t)obscurableBalloonBlurMaterial;
- (int64_t)obscurableBalloonBlurMaterialInterfaceStyle;
- (int64_t)obscurableBalloonButtonBlurMaterial;
- (int64_t)playButtonBackdropStyle;
- (int64_t)replyBalloonMaximumNumberOfLines;
- (int64_t)sendMenuPlusSymbolScale;
- (int64_t)syncBarBlurEffectStyle;
- (int64_t)syncProgressBarStyle;
- (int64_t)transcriptContentInsetBehavior;
- (int64_t)transcriptLoadingIndicatorStyle;
- (unint64_t)_conversationListScrollingBatchSize;
- (unint64_t)_conversationListScrollingPaddingRowCount;
- (unint64_t)_defaultConversationLoadMoreCount;
- (unint64_t)_defaultConversationViewingMessageCount;
- (unint64_t)appIconPrefetchLimit;
- (unint64_t)browserViewControllerSheetDetentStyle;
- (unint64_t)commonRepliesLoadLimit;
- (unint64_t)contactsSettingsCacheSize;
- (unint64_t)contentRectEdgeForConversationListSearchBarInsetsWithRTL:(BOOL)a3;
- (unint64_t)conversationCacheSize;
- (unint64_t)conversationListCellMaxSummaryLength;
- (unint64_t)conversationListCellSummaryNumberOfLines;
- (unint64_t)conversationListScrollingBatchSize;
- (unint64_t)conversationListScrollingPaddingRowCount;
- (unint64_t)defaultConversationLoadMoreCount;
- (unint64_t)defaultConversationSummaryMessageCount;
- (unint64_t)defaultConversationViewingMessageCount;
- (unint64_t)detailsSectionCount;
- (unint64_t)initialConversationSizingMessageCount;
- (unint64_t)initialConversationViewingMessageCount;
- (unint64_t)maxNumLiveBrowserViewsToKeepInViewHierarchy;
- (unint64_t)maxNumberOfItemsPerAppDrawerPage;
- (unint64_t)maximumNumberOfPinnedConversations;
- (unint64_t)messageAcknowledgmentVotingStackSize;
- (unint64_t)messageCountToLoadForPinnedConversationsIfNecessary;
- (unint64_t)minBalloonsForTranscriptHeight;
- (unint64_t)numberOfAssetsInPhotoPicker;
- (unint64_t)numberOfButtonsInPhotoPicker;
- (unint64_t)searchDefaultMaxResults;
- (unint64_t)searchMessagesMaxSummaryLength;
- (unint64_t)suggestedAcknowledgementCount;
- (unint64_t)suggestedAppStripLimit;
- (unint64_t)suggestedMinimumRecentsCount;
- (unint64_t)supportedInterfaceOrientations;
- (unint64_t)waveformGapWidth;
- (unint64_t)waveformMaxPowerLevelsCount;
- (unint64_t)waveformMinPowerLevelsCount;
- (unint64_t)waveformPowerLevelWidth;
- (unint64_t)waveformPowerLevelWidthIncrement;
- (void)invalidateTranscriptDrawerWidth;
- (void)prewarmAcknowledgementsImage;
- (void)setHUDStyle:(int64_t)a3;
- (void)setupNavBarAppearanceWithNavigationController:(id)a3;
- (void)setupNavBarAppearanceWithNavigationController:(id)a3 withBackgroundColor:(id)a4;
- (void)updateMessageEditingConfirmButtonConfiguration:(id)a3 forButtonColor:(char)a4 isEnabled:(BOOL)a5;
@end

@implementation CKUIBehavior

- (BOOL)darkUIEnabled
{
  if (darkUIEnabled_once != -1) {
    dispatch_once(&darkUIEnabled_once, &__block_literal_global_138_0);
  }
  return 0;
}

- (BOOL)useSelectedAppearanceForConversationCellState:(id)a3 traitCollection:(id)a4
{
  return [a3 isSelected];
}

- (unint64_t)conversationListCellSummaryNumberOfLines
{
  CKPreferredContentSizeCategory();
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellSummaryNumberOfLines_sContentSizeCategory_conversationListCellSummaryNumberOfLines, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellSummaryNumberOfLines](self, "ckShouldUpdateconversationListCellSummaryNumberOfLines")|| v10|| conversationListCellSummaryNumberOfLines_sIsBoldTextEnabled_conversationListCellSummaryNumberOfLines != IsBoldTextEnabled|| *(double *)&conversationListCellSummaryNumberOfLines_sTextFontSize_conversationListCellSummaryNumberOfLines != v5|| *(double *)&conversationListCellSummaryNumberOfLines_sCustomTextFontSize_conversationListCellSummaryNumberOfLines != v6|| (objc_msgSend((id)conversationListCellSummaryNumberOfLines_sCustomTextFontName_conversationListCellSummaryNumberOfLines, "isEqualToString:", v9, *(double *)&conversationListCellSummaryNumberOfLines_sCustomTextFontSize_conversationListCellSummaryNumberOfLines) & 1) == 0)
  {
    conversationListCellSummaryNumberOfLines_sBehavior = 1;
    objc_storeStrong((id *)&conversationListCellSummaryNumberOfLines_sContentSizeCategory_conversationListCellSummaryNumberOfLines, v3);
    conversationListCellSummaryNumberOfLines_sIsBoldTextEnabled_conversationListCellSummaryNumberOfLines = IsBoldTextEnabled;
    conversationListCellSummaryNumberOfLines_sTextFontSize_conversationListCellSummaryNumberOfLines = *(void *)&v5;
    conversationListCellSummaryNumberOfLines_sCustomTextFontSize_conversationListCellSummaryNumberOfLines = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellSummaryNumberOfLines_sCustomTextFontName_conversationListCellSummaryNumberOfLines, v8);
  }
  if (conversationListCellSummaryNumberOfLines_sBehavior) {
    unint64_t v11 = 2;
  }
  else {
    unint64_t v11 = 0;
  }

  return v11;
}

- (UIFont)conversationListDateFont
{
  CKPreferredContentSizeCategory();
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    v9 = v8;
  }
  else {
    v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListDateFont_sContentSizeCategory_conversationListDateFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateconversationListDateFont]
    || v11
    || conversationListDateFont_sIsIncreaseContrastEnabled_conversationListDateFont != v4
    || conversationListDateFont_sIsBoldTextEnabled_conversationListDateFont != IsBoldTextEnabled
    || (uint64_t v12 = conversationListDateFont_sTextFontSize_conversationListDateFont,
        *(double *)&conversationListDateFont_sTextFontSize_conversationListDateFont != v6)
    || (uint64_t v12 = conversationListDateFont_sCustomTextFontSize_conversationListDateFont,
        *(double *)&conversationListDateFont_sCustomTextFontSize_conversationListDateFont != v7)
    || (objc_msgSend((id)conversationListDateFont_sCustomTextFontName_conversationListDateFont, "isEqualToString:", v10, *(double *)&conversationListDateFont_sCustomTextFontSize_conversationListDateFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self conversationListSummaryFont];
    v14 = (void *)conversationListDateFont_sBehavior;
    conversationListDateFont_sBehavior = v13;

    objc_storeStrong((id *)&conversationListDateFont_sContentSizeCategory_conversationListDateFont, v3);
    conversationListDateFont_sIsIncreaseContrastEnabled_conversationListDateFont = v4;
    conversationListDateFont_sIsBoldTextEnabled_conversationListDateFont = IsBoldTextEnabled;
    conversationListDateFont_sTextFontSize_conversationListDateFont = *(void *)&v6;
    conversationListDateFont_sCustomTextFontSize_conversationListDateFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListDateFont_sCustomTextFontName_conversationListDateFont, v9);
  }
  v15 = (UIFont *)(id)conversationListDateFont_sBehavior;

  return v15;
}

- (UIFont)conversationListSenderFont
{
  CKPreferredContentSizeCategory();
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    v9 = v8;
  }
  else {
    v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListSenderFont_sContentSizeCategory_conversationListSenderFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateconversationListSenderFont]
    || v11
    || conversationListSenderFont_sIsIncreaseContrastEnabled_conversationListSenderFont != v4
    || conversationListSenderFont_sIsBoldTextEnabled_conversationListSenderFont != IsBoldTextEnabled
    || (uint64_t v12 = conversationListSenderFont_sTextFontSize_conversationListSenderFont,
        *(double *)&conversationListSenderFont_sTextFontSize_conversationListSenderFont != v6)
    || (uint64_t v12 = conversationListSenderFont_sCustomTextFontSize_conversationListSenderFont,
        *(double *)&conversationListSenderFont_sCustomTextFontSize_conversationListSenderFont != v7)
    || (objc_msgSend((id)conversationListSenderFont_sCustomTextFontName_conversationListSenderFont, "isEqualToString:", v10, *(double *)&conversationListSenderFont_sCustomTextFontSize_conversationListSenderFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F438A0], *(double *)&v12);
    v14 = (void *)conversationListSenderFont_sBehavior;
    conversationListSenderFont_sBehavior = v13;

    objc_storeStrong((id *)&conversationListSenderFont_sContentSizeCategory_conversationListSenderFont, v3);
    conversationListSenderFont_sIsIncreaseContrastEnabled_conversationListSenderFont = v4;
    conversationListSenderFont_sIsBoldTextEnabled_conversationListSenderFont = IsBoldTextEnabled;
    conversationListSenderFont_sTextFontSize_conversationListSenderFont = *(void *)&v6;
    conversationListSenderFont_sCustomTextFontSize_conversationListSenderFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListSenderFont_sCustomTextFontName_conversationListSenderFont, v9);
  }
  v15 = (UIFont *)(id)conversationListSenderFont_sBehavior;

  return v15;
}

- (BOOL)conversationListCellUsesLargeTextLayout
{
  CKPreferredContentSizeCategory();
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellUsesLargeTextLayout_sContentSizeCategory_conversationListCellUsesLargeTextLayout, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellUsesLargeTextLayout](self, "ckShouldUpdateconversationListCellUsesLargeTextLayout")|| v10|| conversationListCellUsesLargeTextLayout_sIsBoldTextEnabled_conversationListCellUsesLargeTextLayout != IsBoldTextEnabled|| (uint64_t v11 = conversationListCellUsesLargeTextLayout_sTextFontSize_conversationListCellUsesLargeTextLayout, *(double *)&conversationListCellUsesLargeTextLayout_sTextFontSize_conversationListCellUsesLargeTextLayout != v5)|| (uint64_t v11 = conversationListCellUsesLargeTextLayout_sCustomTextFontSize_conversationListCellUsesLargeTextLayout, *(double *)&conversationListCellUsesLargeTextLayout_sCustomTextFontSize_conversationListCellUsesLargeTextLayout != v6)|| (objc_msgSend((id)conversationListCellUsesLargeTextLayout_sCustomTextFontName_conversationListCellUsesLargeTextLayout, "isEqualToString:", v9, *(double *)&conversationListCellUsesLargeTextLayout_sCustomTextFontSize_conversationListCellUsesLargeTextLayout) & 1) == 0)
  {
    conversationListCellUsesLargeTextLayout_sBehavior = [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    objc_storeStrong((id *)&conversationListCellUsesLargeTextLayout_sContentSizeCategory_conversationListCellUsesLargeTextLayout, v3);
    conversationListCellUsesLargeTextLayout_sIsBoldTextEnabled_conversationListCellUsesLargeTextLayout = IsBoldTextEnabled;
    conversationListCellUsesLargeTextLayout_sTextFontSize_conversationListCellUsesLargeTextLayout = *(void *)&v5;
    conversationListCellUsesLargeTextLayout_sCustomTextFontSize_conversationListCellUsesLargeTextLayout = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellUsesLargeTextLayout_sCustomTextFontName_conversationListCellUsesLargeTextLayout, v8);
  }
  char v12 = conversationListCellUsesLargeTextLayout_sBehavior;

  return v12;
}

- (BOOL)ckShouldUpdateconversationListCellUsesLargeTextLayout
{
  return 0;
}

- (BOOL)isAccessibilityPreferredContentSizeCategory
{
  CKPreferredContentSizeCategory();
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)isAccessibilityPreferredContentSizeCategory_sContentSizeCategory_isAccessibilityPreferredContentSizeCategory, v3);
  if (-[CKUIBehavior ckShouldUpdateisAccessibilityPreferredContentSizeCategory](self, "ckShouldUpdateisAccessibilityPreferredContentSizeCategory")|| v10|| isAccessibilityPreferredContentSizeCategory_sIsBoldTextEnabled_isAccessibilityPreferredContentSizeCategory != IsBoldTextEnabled|| *(double *)&isAccessibilityPreferredContentSizeCategory_sTextFontSize_isAccessibilityPreferredContentSizeCategory != v5|| *(double *)&isAccessibilityPreferredContentSizeCategory_sCustomTextFontSize_isAccessibilityPreferredContentSizeCategory != v6|| (objc_msgSend((id)isAccessibilityPreferredContentSizeCategory_sCustomTextFontName_isAccessibilityPreferredContentSizeCategory, "isEqualToString:", v9, *(double *)&isAccessibilityPreferredContentSizeCategory_sCustomTextFontSize_isAccessibilityPreferredContentSizeCategory) & 1) == 0)
  {
    CKPreferredContentSizeCategory();
    uint64_t v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    BOOL IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v11);

    isAccessibilityPreferredContentSizeCategory_sBehavior = IsAccessibilityCategory;
    objc_storeStrong((id *)&isAccessibilityPreferredContentSizeCategory_sContentSizeCategory_isAccessibilityPreferredContentSizeCategory, v3);
    isAccessibilityPreferredContentSizeCategory_sIsBoldTextEnabled_isAccessibilityPreferredContentSizeCategory = IsBoldTextEnabled;
    isAccessibilityPreferredContentSizeCategory_sTextFontSize_isAccessibilityPreferredContentSizeCategory = *(void *)&v5;
    isAccessibilityPreferredContentSizeCategory_sCustomTextFontSize_isAccessibilityPreferredContentSizeCategory = *(void *)&v6;
    objc_storeStrong((id *)&isAccessibilityPreferredContentSizeCategory_sCustomTextFontName_isAccessibilityPreferredContentSizeCategory, v8);
  }
  char v13 = isAccessibilityPreferredContentSizeCategory_sBehavior;

  return v13;
}

- (unint64_t)conversationListCellMaxSummaryLength
{
  CKPreferredContentSizeCategory();
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellMaxSummaryLength_sContentSizeCategory_conversationListCellMaxSummaryLength, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellMaxSummaryLength](self, "ckShouldUpdateconversationListCellMaxSummaryLength")|| v10|| conversationListCellMaxSummaryLength_sIsBoldTextEnabled_conversationListCellMaxSummaryLength != IsBoldTextEnabled|| *(double *)&conversationListCellMaxSummaryLength_sTextFontSize_conversationListCellMaxSummaryLength != v5|| *(double *)&conversationListCellMaxSummaryLength_sCustomTextFontSize_conversationListCellMaxSummaryLength != v6|| (objc_msgSend((id)conversationListCellMaxSummaryLength_sCustomTextFontName_conversationListCellMaxSummaryLength, "isEqualToString:", v9, *(double *)&conversationListCellMaxSummaryLength_sCustomTextFontSize_conversationListCellMaxSummaryLength) & 1) == 0)
  {
    conversationListCellMaxSummaryLength_sBehavior = 1;
    objc_storeStrong((id *)&conversationListCellMaxSummaryLength_sContentSizeCategory_conversationListCellMaxSummaryLength, v3);
    conversationListCellMaxSummaryLength_sIsBoldTextEnabled_conversationListCellMaxSummaryLength = IsBoldTextEnabled;
    conversationListCellMaxSummaryLength_sTextFontSize_conversationListCellMaxSummaryLength = *(void *)&v5;
    conversationListCellMaxSummaryLength_sCustomTextFontSize_conversationListCellMaxSummaryLength = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellMaxSummaryLength_sCustomTextFontName_conversationListCellMaxSummaryLength, v8);
  }
  if (conversationListCellMaxSummaryLength_sBehavior) {
    unint64_t v11 = 200;
  }
  else {
    unint64_t v11 = 0;
  }

  return v11;
}

- (UIFont)conversationListSummaryFont
{
  CKPreferredContentSizeCategory();
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    v9 = v8;
  }
  else {
    v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListSummaryFont_sContentSizeCategory_conversationListSummaryFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateconversationListSummaryFont]
    || v11
    || conversationListSummaryFont_sIsIncreaseContrastEnabled_conversationListSummaryFont != v4
    || conversationListSummaryFont_sIsBoldTextEnabled_conversationListSummaryFont != IsBoldTextEnabled
    || (uint64_t v12 = conversationListSummaryFont_sTextFontSize_conversationListSummaryFont,
        *(double *)&conversationListSummaryFont_sTextFontSize_conversationListSummaryFont != v6)
    || (uint64_t v12 = conversationListSummaryFont_sCustomTextFontSize_conversationListSummaryFont,
        *(double *)&conversationListSummaryFont_sCustomTextFontSize_conversationListSummaryFont != v7)
    || (objc_msgSend((id)conversationListSummaryFont_sCustomTextFontName_conversationListSummaryFont, "isEqualToString:", v10, *(double *)&conversationListSummaryFont_sCustomTextFontSize_conversationListSummaryFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    v14 = (void *)conversationListSummaryFont_sBehavior;
    conversationListSummaryFont_sBehavior = v13;

    objc_storeStrong((id *)&conversationListSummaryFont_sContentSizeCategory_conversationListSummaryFont, v3);
    conversationListSummaryFont_sIsIncreaseContrastEnabled_conversationListSummaryFont = v4;
    conversationListSummaryFont_sIsBoldTextEnabled_conversationListSummaryFont = IsBoldTextEnabled;
    conversationListSummaryFont_sTextFontSize_conversationListSummaryFont = *(void *)&v6;
    conversationListSummaryFont_sCustomTextFontSize_conversationListSummaryFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListSummaryFont_sCustomTextFontName_conversationListSummaryFont, v9);
  }
  v15 = (UIFont *)(id)conversationListSummaryFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateconversationListSummaryFont
{
  return 0;
}

- (BOOL)ckShouldUpdateconversationListCellMaxSummaryLength
{
  return 0;
}

- (BOOL)ckShouldUpdateisAccessibilityPreferredContentSizeCategory
{
  return 0;
}

- (BOOL)ckShouldUpdateconversationListSenderFont
{
  return 0;
}

- (BOOL)ckShouldUpdateconversationListDateFont
{
  return 0;
}

- (BOOL)ckShouldUpdateconversationListCellSummaryNumberOfLines
{
  return 0;
}

- (unint64_t)conversationListScrollingPaddingRowCount
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __56__CKUIBehavior_conversationListScrollingPaddingRowCount__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (conversationListScrollingPaddingRowCount_once != -1) {
    dispatch_once(&conversationListScrollingPaddingRowCount_once, block);
  }
  return conversationListScrollingPaddingRowCount_sBehavior;
}

+ (id)sharedBehaviors
{
  v3 = (void *)sSharedBehaviors;
  if (sSharedBehaviors) {
    goto LABEL_15;
  }
  int v4 = [MEMORY[0x1E4F42948] currentDevice];
  uint64_t v5 = [v4 userInterfaceIdiom];

  if (CKIsRunningInMacCatalyst() && CKIsRunningUnitTests()) {
    goto LABEL_11;
  }
  if (v5 != 4)
  {
    if (v5 != 5)
    {
      if (!CKIsRunningInSiri()
        && !CKIsRunningInMessagesNotificationViewService()
        && CKIsRunningInMessagesNotificationExtension())
      {
        objc_msgSend((id)MEMORY[0x192FBA860](@"UNUserNotificationCenter", @"UserNotifications"), "supportsContentExtensions");
      }
      [a1 _shouldUseClarityUI];
    }
LABEL_11:
    double v6 = (objc_class *)objc_opt_class();
    goto LABEL_12;
  }
  double v6 = 0;
LABEL_12:
  if (testOverrideCKUIBehaviorClass) {
    double v6 = (objc_class *)testOverrideCKUIBehaviorClass;
  }
  id v7 = objc_alloc_init(v6);
  v8 = (void *)sSharedBehaviors;
  sSharedBehaviors = (uint64_t)v7;

  [(id)sSharedBehaviors setHUDStyle:1];
  v3 = (void *)sSharedBehaviors;
LABEL_15:

  return v3;
}

- (BOOL)showsHoverToDeleteButton
{
  if (showsHoverToDeleteButton_once != -1) {
    dispatch_once(&showsHoverToDeleteButton_once, &__block_literal_global_470_0);
  }
  return 0;
}

- (BOOL)showsConversationListCellChevronImage
{
  if (showsConversationListCellChevronImage_once != -1) {
    dispatch_once(&showsConversationListCellChevronImage_once, &__block_literal_global_468);
  }
  return showsConversationListCellChevronImage_sBehavior;
}

- (CKUITheme)theme
{
  if (theme_once != -1) {
    dispatch_once(&theme_once, &__block_literal_global_89_0);
  }
  v2 = (void *)theme_sBehavior;

  return (CKUITheme *)v2;
}

- (UIImage)chevronImage
{
  if (chevronImage_once != -1) {
    dispatch_once(&chevronImage_once, &__block_literal_global_376);
  }
  v2 = (void *)chevronImage_sBehavior;

  return (UIImage *)v2;
}

+ (BOOL)_shouldUseClarityUI
{
  if (_shouldUseClarityUI_onceToken != -1) {
    dispatch_once(&_shouldUseClarityUI_onceToken, &__block_literal_global_96);
  }
  return _shouldUseClarityUI_sIsClarityBoardEnabled;
}

- (id)__ck_localizedString:(id)a3
{
  id v3 = a3;
  int v4 = CKFrameworkBundle();
  uint64_t v5 = [v4 localizedStringForKey:v3 value:&stru_1EDE4CA38 table:@"ChatKit"];

  return v5;
}

- (UIFont)balloonTextFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    v9 = v8;
  }
  else {
    v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)balloonTextFont_sContentSizeCategory_balloonTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateballoonTextFont]
    || v11
    || balloonTextFont_sIsIncreaseContrastEnabled_balloonTextFont != v4
    || balloonTextFont_sIsBoldTextEnabled_balloonTextFont != IsBoldTextEnabled
    || (uint64_t v12 = balloonTextFont_sTextFontSize_balloonTextFont,
        *(double *)&balloonTextFont_sTextFontSize_balloonTextFont != v6)
    || (uint64_t v12 = balloonTextFont_sCustomTextFontSize_balloonTextFont,
        *(double *)&balloonTextFont_sCustomTextFontSize_balloonTextFont != v7)
    || (objc_msgSend((id)balloonTextFont_sCustomTextFontName_balloonTextFont, "isEqualToString:", v10, *(double *)&balloonTextFont_sCustomTextFontSize_balloonTextFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self _balloonTextFont];
    v14 = (void *)balloonTextFont_sBehavior;
    balloonTextFont_sBehavior = v13;

    objc_storeStrong((id *)&balloonTextFont_sContentSizeCategory_balloonTextFont, v3);
    balloonTextFont_sIsIncreaseContrastEnabled_balloonTextFont = v4;
    balloonTextFont_sIsBoldTextEnabled_balloonTextFont = IsBoldTextEnabled;
    balloonTextFont_sTextFontSize_balloonTextFont = *(void *)&v6;
    balloonTextFont_sCustomTextFontSize_balloonTextFont = *(void *)&v7;
    objc_storeStrong((id *)&balloonTextFont_sCustomTextFontName_balloonTextFont, v9);
  }
  v15 = (UIFont *)(id)balloonTextFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateballoonTextFont
{
  return 0;
}

- (unint64_t)maximumNumberOfPinnedConversations
{
  if (maximumNumberOfPinnedConversations_once != -1) {
    dispatch_once(&maximumNumberOfPinnedConversations_once, &__block_literal_global_425);
  }
  return maximumNumberOfPinnedConversations_sBehavior;
}

- (id)_balloonTextFont
{
  return (id)objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F43870]);
}

- (BOOL)canShowContactPhotosInConversationList
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_canShowContactPhotosInConversationList__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (canShowContactPhotosInConversationList_once != -1) {
    dispatch_once(&canShowContactPhotosInConversationList_once, block);
  }
  return canShowContactPhotosInConversationList_sBehavior;
}

- (BOOL)contactPhotosEnabled
{
  return CKConversationListContactPhotosEnabled() != 0;
}

- (BOOL)hidesUnreadIndicatorWhenEditing
{
  if (hidesUnreadIndicatorWhenEditing_once != -1) {
    dispatch_once(&hidesUnreadIndicatorWhenEditing_once, &__block_literal_global_466);
  }
  return 0;
}

- (double)conversationListContactImageDiameter
{
  if (conversationListContactImageDiameter_once != -1) {
    dispatch_once(&conversationListContactImageDiameter_once, &__block_literal_global_486);
  }
  return *(double *)&conversationListContactImageDiameter_sBehavior;
}

- (BOOL)showsNoMessagesDialog
{
  if (showsNoMessagesDialog_once != -1) {
    dispatch_once(&showsNoMessagesDialog_once, &__block_literal_global_464_0);
  }
  return 0;
}

- (BOOL)alwaysShowSelectionInConversationList
{
  if (alwaysShowSelectionInConversationList_once != -1) {
    dispatch_once(&alwaysShowSelectionInConversationList_once, &__block_literal_global_440);
  }
  return 0;
}

- (BOOL)showPendingInConversationList
{
  if (showPendingInConversationList_once != -1) {
    dispatch_once(&showPendingInConversationList_once, &__block_literal_global_460);
  }
  return showPendingInConversationList_sBehavior;
}

- (BOOL)conversationListShowsSearchOnAppear
{
  if (conversationListShowsSearchOnAppear_once != -1) {
    dispatch_once(&conversationListShowsSearchOnAppear_once, &__block_literal_global_446);
  }
  return 0;
}

- (BOOL)conversationListSearchHidesNavigationBarDuringPresentation
{
  if (conversationListSearchHidesNavigationBarDuringPresentation_once != -1) {
    dispatch_once(&conversationListSearchHidesNavigationBarDuringPresentation_once, &__block_literal_global_448);
  }
  return conversationListSearchHidesNavigationBarDuringPresentation_sBehavior;
}

- (CGSize)unreadIndicatorImageViewSize
{
  if (unreadIndicatorImageViewSize_once != -1) {
    dispatch_once(&unreadIndicatorImageViewSize_once, &__block_literal_global_545_0);
  }
  double v2 = *(double *)&unreadIndicatorImageViewSize_sBehavior_0;
  double v3 = *(double *)&unreadIndicatorImageViewSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

- (double)topConversationListSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)topConversationListSpace_sContentSizeCategory_topConversationListSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetopConversationListSpace]
    || v10
    || topConversationListSpace_sIsBoldTextEnabled_topConversationListSpace != IsBoldTextEnabled
    || (uint64_t v11 = topConversationListSpace_sTextFontSize_topConversationListSpace,
        *(double *)&topConversationListSpace_sTextFontSize_topConversationListSpace != v5)
    || (uint64_t v11 = topConversationListSpace_sCustomTextFontSize_topConversationListSpace,
        *(double *)&topConversationListSpace_sCustomTextFontSize_topConversationListSpace != v6)
    || (objc_msgSend((id)topConversationListSpace_sCustomTextFontName_topConversationListSpace, "isEqualToString:", v9, *(double *)&topConversationListSpace_sCustomTextFontSize_topConversationListSpace) & 1) == 0)
  {
    [(CKUIBehavior *)self conversationListSenderBodyLeading];
    double v13 = v12 * 0.6;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v14 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v14 = 1.0;
    }
    *(double *)&topConversationListSpace_sBehavior = round(v13 * v14) / v14;
    objc_storeStrong((id *)&topConversationListSpace_sContentSizeCategory_topConversationListSpace, v3);
    topConversationListSpace_sIsBoldTextEnabled_topConversationListSpace = IsBoldTextEnabled;
    topConversationListSpace_sTextFontSize_topConversationListSpace = *(void *)&v5;
    topConversationListSpace_sCustomTextFontSize_topConversationListSpace = *(void *)&v6;
    objc_storeStrong((id *)&topConversationListSpace_sCustomTextFontName_topConversationListSpace, v8);
  }
  double v15 = *(double *)&topConversationListSpace_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatetopConversationListSpace
{
  return 0;
}

- (double)senderSummaryConversationListSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)senderSummaryConversationListSpace_sContentSizeCategory_senderSummaryConversationListSpace, v3);
  if (-[CKUIBehavior ckShouldUpdatesenderSummaryConversationListSpace](self, "ckShouldUpdatesenderSummaryConversationListSpace")|| v10|| senderSummaryConversationListSpace_sIsBoldTextEnabled_senderSummaryConversationListSpace != IsBoldTextEnabled|| (uint64_t v11 = senderSummaryConversationListSpace_sTextFontSize_senderSummaryConversationListSpace, *(double *)&senderSummaryConversationListSpace_sTextFontSize_senderSummaryConversationListSpace != v5)|| (uint64_t v11 = senderSummaryConversationListSpace_sCustomTextFontSize_senderSummaryConversationListSpace, *(double *)&senderSummaryConversationListSpace_sCustomTextFontSize_senderSummaryConversationListSpace != v6)|| (objc_msgSend((id)senderSummaryConversationListSpace_sCustomTextFontName_senderSummaryConversationListSpace, "isEqualToString:", v9, *(double *)&senderSummaryConversationListSpace_sCustomTextFontSize_senderSummaryConversationListSpace) & 1) == 0)
  {
    [(CKUIBehavior *)self conversationListSummaryBodyLeading];
    double v13 = v12 * 0.475;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v14 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v14 = 1.0;
    }
    *(double *)&senderSummaryConversationListSpace_sBehavior = round(v13 * v14) / v14;
    objc_storeStrong((id *)&senderSummaryConversationListSpace_sContentSizeCategory_senderSummaryConversationListSpace, v3);
    senderSummaryConversationListSpace_sIsBoldTextEnabled_senderSummaryConversationListSpace = IsBoldTextEnabled;
    senderSummaryConversationListSpace_sTextFontSize_senderSummaryConversationListSpace = *(void *)&v5;
    senderSummaryConversationListSpace_sCustomTextFontSize_senderSummaryConversationListSpace = *(void *)&v6;
    objc_storeStrong((id *)&senderSummaryConversationListSpace_sCustomTextFontName_senderSummaryConversationListSpace, v8);
  }
  double v15 = *(double *)&senderSummaryConversationListSpace_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesenderSummaryConversationListSpace
{
  return 0;
}

- (double)bottomConversationListSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)bottomConversationListSpace_sContentSizeCategory_bottomConversationListSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatebottomConversationListSpace]
    || v10
    || bottomConversationListSpace_sIsBoldTextEnabled_bottomConversationListSpace != IsBoldTextEnabled
    || (uint64_t v11 = bottomConversationListSpace_sTextFontSize_bottomConversationListSpace,
        *(double *)&bottomConversationListSpace_sTextFontSize_bottomConversationListSpace != v5)
    || (uint64_t v11 = bottomConversationListSpace_sCustomTextFontSize_bottomConversationListSpace,
        *(double *)&bottomConversationListSpace_sCustomTextFontSize_bottomConversationListSpace != v6)
    || (objc_msgSend((id)bottomConversationListSpace_sCustomTextFontName_bottomConversationListSpace, "isEqualToString:", v9, *(double *)&bottomConversationListSpace_sCustomTextFontSize_bottomConversationListSpace) & 1) == 0)
  {
    [(CKUIBehavior *)self conversationListSummaryBodyLeading];
    double v13 = v12 * 0.6;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v14 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v14 = 1.0;
    }
    *(double *)&bottomConversationListSpace_sBehavior = round(v13 * v14) / v14;
    objc_storeStrong((id *)&bottomConversationListSpace_sContentSizeCategory_bottomConversationListSpace, v3);
    bottomConversationListSpace_sIsBoldTextEnabled_bottomConversationListSpace = IsBoldTextEnabled;
    bottomConversationListSpace_sTextFontSize_bottomConversationListSpace = *(void *)&v5;
    bottomConversationListSpace_sCustomTextFontSize_bottomConversationListSpace = *(void *)&v6;
    objc_storeStrong((id *)&bottomConversationListSpace_sCustomTextFontName_bottomConversationListSpace, v8);
  }
  double v15 = *(double *)&bottomConversationListSpace_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatebottomConversationListSpace
{
  return 0;
}

- (double)conversationListSummaryBodyLeading
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListSummaryBodyLeading_sContentSizeCategory_conversationListSummaryBodyLeading, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListSummaryBodyLeading](self, "ckShouldUpdateconversationListSummaryBodyLeading")|| v10|| conversationListSummaryBodyLeading_sIsBoldTextEnabled_conversationListSummaryBodyLeading != IsBoldTextEnabled|| (uint64_t v11 = conversationListSummaryBodyLeading_sTextFontSize_conversationListSummaryBodyLeading, *(double *)&conversationListSummaryBodyLeading_sTextFontSize_conversationListSummaryBodyLeading != v5)|| (uint64_t v11 = conversationListSummaryBodyLeading_sCustomTextFontSize_conversationListSummaryBodyLeading, *(double *)&conversationListSummaryBodyLeading_sCustomTextFontSize_conversationListSummaryBodyLeading != v6)|| (objc_msgSend((id)conversationListSummaryBodyLeading_sCustomTextFontName_conversationListSummaryBodyLeading, "isEqualToString:", v9, *(double *)&conversationListSummaryBodyLeading_sCustomTextFontSize_conversationListSummaryBodyLeading) & 1) == 0)
  {
    double v12 = [(CKUIBehavior *)self conversationListSummaryFont];
    [v12 _bodyLeading];
    conversationListSummaryBodyLeading_sBehavior = v13;

    objc_storeStrong((id *)&conversationListSummaryBodyLeading_sContentSizeCategory_conversationListSummaryBodyLeading, v3);
    conversationListSummaryBodyLeading_sIsBoldTextEnabled_conversationListSummaryBodyLeading = IsBoldTextEnabled;
    conversationListSummaryBodyLeading_sTextFontSize_conversationListSummaryBodyLeading = *(void *)&v5;
    conversationListSummaryBodyLeading_sCustomTextFontSize_conversationListSummaryBodyLeading = *(void *)&v6;
    objc_storeStrong((id *)&conversationListSummaryBodyLeading_sCustomTextFontName_conversationListSummaryBodyLeading, v8);
  }
  double v14 = *(double *)&conversationListSummaryBodyLeading_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateconversationListSummaryBodyLeading
{
  return 0;
}

- (double)conversationListSenderToDateHorizontalPadding
{
  if (conversationListSenderToDateHorizontalPadding_once != -1) {
    dispatch_once(&conversationListSenderToDateHorizontalPadding_once, &__block_literal_global_436_0);
  }
  return *(double *)&conversationListSenderToDateHorizontalPadding_sBehavior;
}

- (double)conversationListSenderBodyLeading
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    v8 = v7;
  }
  else {
    v8 = @"None";
  }
  v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListSenderBodyLeading_sContentSizeCategory_conversationListSenderBodyLeading, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListSenderBodyLeading](self, "ckShouldUpdateconversationListSenderBodyLeading")|| v10|| conversationListSenderBodyLeading_sIsBoldTextEnabled_conversationListSenderBodyLeading != IsBoldTextEnabled|| (uint64_t v11 = conversationListSenderBodyLeading_sTextFontSize_conversationListSenderBodyLeading, *(double *)&conversationListSenderBodyLeading_sTextFontSize_conversationListSenderBodyLeading != v5)|| (uint64_t v11 = conversationListSenderBodyLeading_sCustomTextFontSize_conversationListSenderBodyLeading, *(double *)&conversationListSenderBodyLeading_sCustomTextFontSize_conversationListSenderBodyLeading != v6)|| (objc_msgSend((id)conversationListSenderBodyLeading_sCustomTextFontName_conversationListSenderBodyLeading, "isEqualToString:", v9, *(double *)&conversationListSenderBodyLeading_sCustomTextFontSize_conversationListSenderBodyLeading) & 1) == 0)
  {
    double v12 = [(CKUIBehavior *)self conversationListSenderFont];
    [v12 _bodyLeading];
    conversationListSenderBodyLeading_sBehavior = v13;

    objc_storeStrong((id *)&conversationListSenderBodyLeading_sContentSizeCategory_conversationListSenderBodyLeading, v3);
    conversationListSenderBodyLeading_sIsBoldTextEnabled_conversationListSenderBodyLeading = IsBoldTextEnabled;
    conversationListSenderBodyLeading_sTextFontSize_conversationListSenderBodyLeading = *(void *)&v5;
    conversationListSenderBodyLeading_sCustomTextFontSize_conversationListSenderBodyLeading = *(void *)&v6;
    objc_storeStrong((id *)&conversationListSenderBodyLeading_sCustomTextFontName_conversationListSenderBodyLeading, v8);
  }
  double v14 = *(double *)&conversationListSenderBodyLeading_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateconversationListSenderBodyLeading
{
  return 0;
}

- (BOOL)useMacToolbar
{
  if (useMacToolbar_once != -1) {
    dispatch_once(&useMacToolbar_once, &__block_literal_global_298);
  }
  return 0;
}

- (Class)navigationBarClass
{
  if (navigationBarClass_once != -1) {
    dispatch_once(&navigationBarClass_once, &__block_literal_global_414_0);
  }
  double v2 = (void *)navigationBarClass_sBehavior;

  return (Class)v2;
}

- (Class)conversationListNavigationControllerClass
{
  if (conversationListNavigationControllerClass_once != -1) {
    dispatch_once(&conversationListNavigationControllerClass_once, &__block_literal_global_420);
  }
  double v2 = (void *)conversationListNavigationControllerClass_sBehavior;

  return (Class)v2;
}

- (double)conversationCellLeadingSeparatorInsetForEnvironment:(id)a3
{
  id v4 = a3;
  if ([(CKUIBehavior *)self conversationListCellUsesLargeTextLayout])
  {
    [(CKUIBehavior *)self conversationListCellLargeTextLeftMargin];
    double v6 = v5;
  }
  else
  {
    double v7 = [v4 container];
    [v7 contentSize];
    BOOL v8 = -[CKUIBehavior shouldShowAvatarForWidth:](self, "shouldShowAvatarForWidth:");

    [(CKUIBehavior *)self conversationListCellLeftMargin];
    double v6 = v9;
    if (v8)
    {
      [(CKUIBehavior *)self conversationListContactImageDiameter];
      double v11 = v6 + v10;
      [(CKUIBehavior *)self conversationListContactImageTrailingSpace];
      double v6 = v11 + v12;
    }
  }

  return v6;
}

- (double)conversationListCellLeftMargin
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellLeftMargin_sContentSizeCategory_conversationListCellLeftMargin, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellLeftMargin](self, "ckShouldUpdateconversationListCellLeftMargin")|| v10|| conversationListCellLeftMargin_sIsBoldTextEnabled_conversationListCellLeftMargin != IsBoldTextEnabled|| *(double *)&conversationListCellLeftMargin_sTextFontSize_conversationListCellLeftMargin != v5|| *(double *)&conversationListCellLeftMargin_sCustomTextFontSize_conversationListCellLeftMargin != v6|| (objc_msgSend((id)conversationListCellLeftMargin_sCustomTextFontName_conversationListCellLeftMargin, "isEqualToString:", v9, *(double *)&conversationListCellLeftMargin_sCustomTextFontSize_conversationListCellLeftMargin) & 1) == 0)
  {
    conversationListCellLeftMargin_sBehavior = 0x403A000000000000;
    objc_storeStrong((id *)&conversationListCellLeftMargin_sContentSizeCategory_conversationListCellLeftMargin, v3);
    conversationListCellLeftMargin_sIsBoldTextEnabled_conversationListCellLeftMargin = IsBoldTextEnabled;
    conversationListCellLeftMargin_sTextFontSize_conversationListCellLeftMargin = *(void *)&v5;
    conversationListCellLeftMargin_sCustomTextFontSize_conversationListCellLeftMargin = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellLeftMargin_sCustomTextFontName_conversationListCellLeftMargin, v8);
  }
  double v11 = *(double *)&conversationListCellLeftMargin_sBehavior;

  return v11;
}

- (BOOL)ckShouldUpdateconversationListCellLeftMargin
{
  return 0;
}

- (BOOL)shouldShowAvatarForWidth:(double)a3
{
  [(CKUIBehavior *)self conversationListMinimumWidthForHiddenContactImage];
  double v6 = v5;
  if (![(CKUIBehavior *)self canShowContactPhotosInConversationList]
    || v6 >= a3)
  {
    return 0;
  }

  return [(CKUIBehavior *)self contactPhotosEnabled];
}

- (double)conversationListMinimumWidthForHiddenContactImage
{
  if (conversationListMinimumWidthForHiddenContactImage_once != -1) {
    dispatch_once(&conversationListMinimumWidthForHiddenContactImage_once, &__block_literal_global_484);
  }
  return *(double *)&conversationListMinimumWidthForHiddenContactImage_sBehavior;
}

- (double)conversationListContactImageTrailingSpace
{
  if (conversationListContactImageTrailingSpace_once != -1) {
    dispatch_once(&conversationListContactImageTrailingSpace_once, &__block_literal_global_488);
  }
  return *(double *)&conversationListContactImageTrailingSpace_sBehavior;
}

- (int64_t)conversationListSeparatorStyle
{
  if (conversationListSeparatorStyle_once != -1) {
    dispatch_once(&conversationListSeparatorStyle_once, &__block_literal_global_314_0);
  }
  return conversationListSeparatorStyle_sBehavior;
}

- (BOOL)shouldUseTranslucentBars
{
  if (shouldUseTranslucentBars_once != -1) {
    dispatch_once(&shouldUseTranslucentBars_once, &__block_literal_global_130_0);
  }
  return shouldUseTranslucentBars_sBehavior;
}

- (void)setupNavBarAppearanceWithNavigationController:(id)a3 withBackgroundColor:(id)a4
{
  id v10 = a3;
  id v5 = a4;
  double v6 = [v10 navigationBar];
  double v7 = [v6 standardAppearance];
  BOOL v8 = (void *)[v7 copy];

  [v8 configureWithOpaqueBackground];
  [v8 setShadowColor:0];
  [v8 setShadowImage:0];
  if (v5) {
    [v8 setBackgroundColor:v5];
  }
  double v9 = [v10 navigationBar];
  [v9 setScrollEdgeAppearance:v8];
}

- (void)setupNavBarAppearanceWithNavigationController:(id)a3
{
}

- (Class)conversationListControllerClass
{
  if (conversationListControllerClass_once != -1) {
    dispatch_once(&conversationListControllerClass_once, &__block_literal_global_411);
  }
  double v2 = (void *)conversationListControllerClass_sBehavior;

  return (Class)v2;
}

void __28__CKUIBehavior_chevronImage__block_invoke()
{
  id v5 = [MEMORY[0x1E4F42A80] systemImageNamed:@"chevron.forward"];
  v0 = (void *)MEMORY[0x1E4F42A98];
  v1 = [MEMORY[0x1E4FB08E0] _preferredFontForTextStyle:*MEMORY[0x1E4F43870] variant:1024];
  double v2 = [v0 configurationWithFont:v1 scale:1];
  uint64_t v3 = [v5 imageWithSymbolConfiguration:v2];
  id v4 = (void *)chevronImage_sBehavior;
  chevronImage_sBehavior = v3;
}

void __54__CKUIBehavior_canShowContactPhotosInConversationList__block_invoke(uint64_t a1)
{
  id v4 = [MEMORY[0x1E4F42D90] mainScreen];
  [v4 _referenceBounds];
  if (v2 <= 320.0) {
    char v3 = 0;
  }
  else {
    char v3 = [*(id *)(a1 + 32) conversationListCellUsesLargeTextLayout] ^ 1;
  }
  canShowContactPhotosInConversationList_sBehavior = v3;
}

void __42__CKUIBehavior_maxTranscriptPortraitWidth__block_invoke(uint64_t a1)
{
  double v2 = [MEMORY[0x1E4F42D90] mainScreen];
  [v2 _referenceBounds];
  double v4 = v3;
  [*(id *)(a1 + 32) conversationListWidthForInterfaceOrientation:1];
  double v6 = v4 - v5;

  maxTranscriptPortraitWidth_sBehavior = *(void *)&v6;
}

uint64_t __40__CKUIBehavior_maxConversationListWidth__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) conversationListWidthForInterfaceOrientation:1];
  double v3 = v2;
  uint64_t result = [*(id *)(a1 + 32) conversationListWidthForInterfaceOrientation:4];
  if (v3 >= v5) {
    double v5 = v3;
  }
  maxConversationListWidth_sBehavior = *(void *)&v5;
  return result;
}

uint64_t __40__CKUIBehavior_minConversationListWidth__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) conversationListWidthForInterfaceOrientation:1];
  double v3 = v2;
  uint64_t result = [*(id *)(a1 + 32) conversationListWidthForInterfaceOrientation:4];
  if (v3 < v5) {
    double v5 = v3;
  }
  minConversationListWidth_sBehavior = *(void *)&v5;
  return result;
}

- (double)conversationListWidthForInterfaceOrientation:(int64_t)a3
{
  double result = 320.0;
  if ((unint64_t)(a3 - 3) >= 2) {
    return 0.0;
  }
  return result;
}

- (BOOL)conversationListShouldManuallyApplyBottomSafeAreaInsetForIsRecentlyDeletedModal:(BOOL)a3
{
  return 0;
}

- (double)previewMaxWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __31__CKUIBehavior_previewMaxWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (previewMaxWidth_once != -1) {
    dispatch_once(&previewMaxWidth_once, block);
  }
  return *(double *)&previewMaxWidth_sBehavior;
}

- (BOOL)wantsUniversalThreeColumn
{
  if (wantsUniversalThreeColumn_once != -1) {
    dispatch_once(&wantsUniversalThreeColumn_once, &__block_literal_global_174_0);
  }
  return wantsUniversalThreeColumn_sBehavior;
}

- (unint64_t)contentRectEdgeForConversationListSearchBarInsetsWithRTL:(BOOL)a3
{
  if (a3) {
    return 8;
  }
  else {
    return 2;
  }
}

- (UIEdgeInsets)contentInsetsForConversationListSearchBarForLayoutMargins:(UIEdgeInsets)result isRTL:(BOOL)a4
{
  double v4 = 0.0;
  if (a4) {
    result.left = 0.0;
  }
  else {
    result.right = 0.0;
  }
  double v5 = 0.0;
  result.bottom = v5;
  result.top = v4;
  return result;
}

- (BOOL)supportsConversationListEditing
{
  if (supportsConversationListEditing_once != -1) {
    dispatch_once(&supportsConversationListEditing_once, &__block_literal_global_476);
  }
  return supportsConversationListEditing_sBehavior;
}

- (BOOL)forcesUnknownFiltering
{
  if (forcesUnknownFiltering_once != -1) {
    dispatch_once(&forcesUnknownFiltering_once, &__block_literal_global_480);
  }
  return 0;
}

- (BOOL)searchControllerObscuresConversationList
{
  if (searchControllerObscuresConversationList_once != -1) {
    dispatch_once(&searchControllerObscuresConversationList_once, &__block_literal_global_474);
  }
  return searchControllerObscuresConversationList_sBehavior;
}

uint64_t __56__CKUIBehavior_conversationListScrollingPaddingRowCount__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _conversationListScrollingPaddingRowCount];
  conversationListScrollingPaddingRowCount_sBehavior = result;
  return result;
}

- (unint64_t)_conversationListScrollingPaddingRowCount
{
  return 128;
}

void __74__CKUIBehavior_conversationListSearchHidesNavigationBarDuringPresentation__block_invoke()
{
  conversationListSearchHidesNavigationBarDuringPresentation_sBehavior = 1;
}

void __65__CKUIBehavior_conversationListMinimumWidthForHiddenContactImage__block_invoke()
{
  conversationListMinimumWidthForHiddenContactImage_sBehavior = 0x4074000000000000;
}

void __61__CKUIBehavior_conversationListSenderToDateHorizontalPadding__block_invoke()
{
  conversationListSenderToDateHorizontalPadding_sBehavior = 0x4000000000000000;
}

void __59__CKUIBehavior_conversationListHidesSearchBarWhenScrolling__block_invoke()
{
  conversationListHidesSearchBarWhenScrolling_sBehavior = 1;
}

void __57__CKUIBehavior_conversationListContactImageTrailingSpace__block_invoke()
{
  conversationListContactImageTrailingSpace_sBehavior = 0x4028000000000000;
}

void __56__CKUIBehavior_searchControllerObscuresConversationList__block_invoke()
{
  searchControllerObscuresConversationList_sBehavior = 1;
}

void __55__CKUIBehavior_conversationListBottomTipSectionPadding__block_invoke()
{
  conversationListBottomTipSectionPadding_sBehavior = 0x4020000000000000;
}

void __53__CKUIBehavior_showsConversationListCellChevronImage__block_invoke()
{
  showsConversationListCellChevronImage_sBehavior = 1;
}

void __53__CKUIBehavior_entryViewPlusButtonToTextFieldPadding__block_invoke()
{
  entryViewPlusButtonToTextFieldPadding_sBehavior = 0x4028000000000000;
}

void __47__CKUIBehavior_supportsConversationListEditing__block_invoke()
{
  supportsConversationListEditing_sBehavior = 1;
}

void __46__CKUIBehavior_conversationListSeparatorStyle__block_invoke()
{
  conversationListSeparatorStyle_sBehavior = 1;
}

void __44__CKUIBehavior_entryViewCoverHasOuterStroke__block_invoke()
{
  entryViewCoverHasOuterStroke_sBehavior = 1;
}

void __42__CKUIBehavior_balloonLineFragmentPadding__block_invoke()
{
  balloonLineFragmentPadding_sBehavior = 0x4014000000000000;
}

void __41__CKUIBehavior_contactsSettingsCacheSize__block_invoke()
{
  contactsSettingsCacheSize_sBehavior = 1;
}

void __40__CKUIBehavior_shouldUseTranslucentBars__block_invoke()
{
  shouldUseTranslucentBars_sBehavior = 1;
}

void __36__CKUIBehavior_balloonMaskTailWidth__block_invoke()
{
  balloonMaskTailWidth_sBehavior = 0x4018000000000000;
}

uint64_t __54__CKUIBehavior_defaultConversationViewingMessageCount__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _defaultConversationViewingMessageCount];
  defaultConversationViewingMessageCount_sBehavior = result;
  return result;
}

- (unint64_t)_defaultConversationViewingMessageCount
{
  unint64_t v2 = IMGetCachedDomainIntForKeyWithDefaultValue();
  double v3 = [MEMORY[0x1E4F42948] currentDevice];
  uint64_t v4 = [v3 _graphicsQuality];

  if (v4 == 10) {
    return 25;
  }
  else {
    return v2;
  }
}

- (double)minConversationListWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __40__CKUIBehavior_minConversationListWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (minConversationListWidth_once != -1) {
    dispatch_once(&minConversationListWidth_once, block);
  }
  return *(double *)&minConversationListWidth_sBehavior;
}

- (double)maxConversationListWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __40__CKUIBehavior_maxConversationListWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (maxConversationListWidth_once != -1) {
    dispatch_once(&maxConversationListWidth_once, block);
  }
  return *(double *)&maxConversationListWidth_sBehavior;
}

void __41__CKUIBehavior_wantsUniversalThreeColumn__block_invoke()
{
  v0 = [MEMORY[0x1E4F42948] currentDevice];
  BOOL v1 = [v0 userInterfaceIdiom] == 1;

  wantsUniversalThreeColumn_sBehavior = v1;
}

uint64_t __31__CKUIBehavior_previewMaxWidth__block_invoke(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  [v2 maxTranscriptPortraitWidth];
  double v4 = v3;
  [*(id *)(a1 + 32) minTranscriptMarginInsets];
  objc_msgSend(v2, "balloonMaxWidthForTranscriptWidth:marginInsets:shouldShowPluginButtons:shouldShowCharacterCount:shouldCoverSendButton:isStewieMode:", 1, 1, 0, 0, v4, v5, v6, v7, v8);
  uint64_t result = objc_msgSend(v2, "previewBalloonMaxWidthForBalloonMaxWidth:");
  previewMaxWidth_sBehavior = v10;
  return result;
}

- (UIEdgeInsets)minTranscriptMarginInsets
{
  if (minTranscriptMarginInsets_once != -1) {
    dispatch_once(&minTranscriptMarginInsets_once, &__block_literal_global_752_0);
  }
  double v2 = *(double *)&minTranscriptMarginInsets_sBehavior_1;
  double v3 = *(double *)&minTranscriptMarginInsets_sBehavior_3;
  double v4 = 0.0;
  double v5 = 0.0;
  result.right = v3;
  result.bottom = v5;
  result.left = v2;
  result.top = v4;
  return result;
}

- (double)maxTranscriptPortraitWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __42__CKUIBehavior_maxTranscriptPortraitWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (maxTranscriptPortraitWidth_once != -1) {
    dispatch_once(&maxTranscriptPortraitWidth_once, block);
  }
  return *(double *)&maxTranscriptPortraitWidth_sBehavior;
}

- (double)balloonMaxWidthForTranscriptWidth:(double)a3 marginInsets:(UIEdgeInsets)a4 shouldShowPluginButtons:(BOOL)a5 shouldShowCharacterCount:(BOOL)a6 shouldCoverSendButton:(BOOL)a7
{
  double right = a4.right;
  double left = a4.left;
  +[CKMessageEntryView contentViewInsetsForMarginInsets:shouldShowPluginButtons:shouldShowCharacterCount:shouldCoverSendButton:isStewieMode:](CKMessageEntryView, "contentViewInsetsForMarginInsets:shouldShowPluginButtons:shouldShowCharacterCount:shouldCoverSendButton:isStewieMode:", a5, a6, a7, 0, a4.top, a4.left, a4.bottom, a4.right);
  double v29 = v13;
  double v30 = v12;
  [(CKUIBehavior *)self balloonLineFragmentInsets];
  double v15 = v14;
  double v17 = v16;
  [(CKUIBehavior *)self balloonMaskAlignmentRectInsetsWithTailShape:1];
  double v19 = v18;
  double v21 = v20;
  double v22 = 1.0;
  if (!a7)
  {
    [(CKUIBehavior *)self balloonMaxWidthPercent];
    double v22 = v23;
  }
  double v24 = a3 - (left + right);
  if ([(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory])
  {
    [(CKUIBehavior *)self messageAcknowledgmentTranscriptBalloonSize];
    double v26 = v25;
    [(CKUIBehavior *)self messageAcknowledgmentTranscriptBalloonRelativePosition];
    return v24 - (v26 - v27);
  }
  else
  {
    double result = v19 + v21 + a3 - (v30 + v29) - (v15 + v17);
    if (result >= v24 * v22) {
      return v24 * v22;
    }
  }
  return result;
}

- (UIEdgeInsets)balloonMaskAlignmentRectInsetsWithTailShape:(char)a3
{
  if (a3 == 2) {
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    [(CKUIBehavior *)self balloonMaskAlignmentRectInsets];
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_5:
    double v3 = *MEMORY[0x1E4F437F8];
    double v4 = *(double *)(MEMORY[0x1E4F437F8] + 8);
    double v5 = *(double *)(MEMORY[0x1E4F437F8] + 16);
    double v6 = *(double *)(MEMORY[0x1E4F437F8] + 24);
  }
  else
  {
    [(CKUIBehavior *)self taillessBalloonMaskAlignmentRectInsets];
  }
LABEL_7:
  result.double right = v6;
  result.bottom = v5;
  result.double left = v4;
  result.top = v3;
  return result;
}

- (UIEdgeInsets)balloonMaskAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__CKUIBehavior_balloonMaskAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (balloonMaskAlignmentRectInsets_once != -1) {
    dispatch_once(&balloonMaskAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&balloonMaskAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&balloonMaskAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&balloonMaskAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&balloonMaskAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.bottom = v4;
  result.double left = v3;
  result.top = v2;
  return result;
}

- (double)previewBalloonMaxWidthForBalloonMaxWidth:(double)a3
{
  [(CKUIBehavior *)self balloonLineFragmentInsets];
  double v6 = v5;
  double v8 = v7;
  [(CKUIBehavior *)self balloonMaskAlignmentRectInsetsWithTailShape:1];
  double v10 = v9;
  double v12 = v11;
  [(CKUIBehavior *)self balloonMaskTailWidth];
  double v14 = v13;
  [(CKUIBehavior *)self balloonLineFragmentInsets];
  double v16 = v15;
  double v18 = v17;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v19 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v19 = 1.0;
  }
  return ceil((v14 + v6 + v8 + a3 - (v10 + v12) - (v16 + v18)) * v19) / v19;
}

- (UIEdgeInsets)balloonLineFragmentInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__CKUIBehavior_balloonLineFragmentInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (balloonLineFragmentInsets_once != -1) {
    dispatch_once(&balloonLineFragmentInsets_once, block);
  }
  double v2 = *(double *)&balloonLineFragmentInsets_sBehavior_1;
  double v3 = *(double *)&balloonLineFragmentInsets_sBehavior_3;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v3;
  result.bottom = v5;
  result.double left = v2;
  result.top = v4;
  return result;
}

void __46__CKUIBehavior_balloonMaskAlignmentRectInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double v2 = v1;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v3 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  double v4 = 1.0;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v3 = 1.0;
  }
  double v5 = ceil(v3 * 8.0) / v3;
  double v6 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v6 = 1.0;
  }
  double v7 = ceil(v6 * 12.0) / v6;
  double v8 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v8 = 1.0;
  }
  double v9 = ceil(v8 * 9.0) / v8;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 != 0.0) {
    double v4 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  }
  balloonMaskAlignmentRectInsets_sBehavior_0 = *(void *)&v5;
  balloonMaskAlignmentRectInsets_sBehavior_1 = *(void *)&v7;
  balloonMaskAlignmentRectInsets_sBehavior_2 = *(void *)&v9;
  *(double *)&balloonMaskAlignmentRectInsets_sBehavior_3 = ceil((v2 + 12.0) * v4) / v4;
}

- (double)balloonMaskTailWidth
{
  if (balloonMaskTailWidth_once != -1) {
    dispatch_once(&balloonMaskTailWidth_once, &__block_literal_global_1041);
  }
  return *(double *)&balloonMaskTailWidth_sBehavior;
}

- (double)balloonMaxWidthPercent
{
  if (balloonMaxWidthPercent_once != -1) {
    dispatch_once(&balloonMaxWidthPercent_once, &__block_literal_global_820);
  }
  return *(double *)&balloonMaxWidthPercent_sBehavior;
}

void __38__CKUIBehavior_isEntryViewCollapsable__block_invoke()
{
  v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v1 = [v0 isSendMenuEnabled];

  isEntryViewCollapsable_sBehavior = v1 ^ 1;
}

void __48__CKUIBehavior_entryViewVerticalTextFieldInsets__block_invoke(uint64_t a1)
{
  double v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isSendMenuEnabled];

  double v4 = 7.25;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "entryFieldCoverLineWidth", 7.25);
    double v4 = v5 + 7.25;
  }
  entryViewVerticalTextFieldInsets_sBehavior_0 = *(void *)&v4;
  entryViewVerticalTextFieldInsets_sBehavior_2 = *(void *)&v4;
}

void __46__CKUIBehavior_entryViewHorizontalCoverInsets__block_invoke()
{
  v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v1 = [v0 isSendMenuEnabled];

  double v2 = 16.0;
  double v3 = 14.0;
  if (v1) {
    double v2 = 14.0;
  }
  else {
    double v3 = 15.0;
  }
  entryViewHorizontalCoverInsets_sBehavior_0 = 0;
  entryViewHorizontalCoverInsets_sBehavior_1 = *(void *)&v3;
  entryViewHorizontalCoverInsets_sBehavior_2 = 0;
  entryViewHorizontalCoverInsets_sBehavior_3 = *(void *)&v2;
}

uint64_t __39__CKUIBehavior_entryViewCoverMinHeight__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) entryViewCoverHasOuterStroke];
  if (result)
  {
    uint64_t result = [*(id *)(a1 + 32) entryFieldCoverLineWidth];
    double v4 = v3 * 2.0 + 35.0;
  }
  else
  {
    double v4 = 35.0;
  }
  entryViewCoverMinHeight_sBehavior = *(void *)&v4;
  return result;
}

- (double)entryFieldCoverLineWidth
{
  if (entryFieldCoverLineWidth_once != -1) {
    dispatch_once(&entryFieldCoverLineWidth_once, &__block_literal_global_1495);
  }
  return *(double *)&entryFieldCoverLineWidth_sBehavior;
}

- (double)sendButtonSize
{
  if (sendButtonSize_once != -1) {
    dispatch_once(&sendButtonSize_once, &__block_literal_global_1487);
  }
  return *(double *)&sendButtonSize_sBehavior;
}

- (double)entryViewSendButtonCoverSpace
{
  if (entryViewSendButtonCoverSpace_once != -1) {
    dispatch_once(&entryViewSendButtonCoverSpace_once, &__block_literal_global_1516);
  }
  return *(double *)&entryViewSendButtonCoverSpace_sBehavior;
}

- (BOOL)entryViewCoverHasOuterStroke
{
  if (entryViewCoverHasOuterStroke_once != -1) {
    dispatch_once(&entryViewCoverHasOuterStroke_once, &__block_literal_global_1497);
  }
  return entryViewCoverHasOuterStroke_sBehavior;
}

uint64_t __50__CKUIBehavior_entryViewNonCollapsableLeftPadding__block_invoke(uint64_t a1)
{
  double v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isSendMenuEnabled];

  double v4 = *(void **)(a1 + 32);
  if (v3)
  {
    [v4 entryViewPlusButtonSize];
    double v6 = v5;
    [*(id *)(a1 + 32) entryViewPlusButtonToTextFieldPadding];
    double v8 = v7;
    uint64_t result = [*(id *)(a1 + 32) entryViewHorizontalCoverInsets];
    double v11 = v8 + v6 + v10;
  }
  else
  {
    [v4 browserButtonSize];
    double v13 = v12;
    uint64_t result = [*(id *)(a1 + 32) entryViewHorizontalCoverInsets];
    double v11 = v13 + v14 * 2.0;
  }
  entryViewNonCollapsableLeftPadding_sBehavior = *(void *)&v11;
  return result;
}

- (double)entryViewPlusButtonToTextFieldPadding
{
  if (entryViewPlusButtonToTextFieldPadding_once != -1) {
    dispatch_once(&entryViewPlusButtonToTextFieldPadding_once, &__block_literal_global_1501);
  }
  return *(double *)&entryViewPlusButtonToTextFieldPadding_sBehavior;
}

- (CGSize)entryViewPlusButtonSize
{
  if (entryViewPlusButtonSize_once != -1) {
    dispatch_once(&entryViewPlusButtonSize_once, &__block_literal_global_1489);
  }
  double v2 = *(double *)&entryViewPlusButtonSize_sBehavior_0;
  double v3 = *(double *)&entryViewPlusButtonSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

- (UIEdgeInsets)entryViewHorizontalCoverInsets
{
  if (entryViewHorizontalCoverInsets_once != -1) {
    dispatch_once(&entryViewHorizontalCoverInsets_once, &__block_literal_global_1503);
  }
  double v2 = *(double *)&entryViewHorizontalCoverInsets_sBehavior_0;
  double v3 = *(double *)&entryViewHorizontalCoverInsets_sBehavior_1;
  double v4 = *(double *)&entryViewHorizontalCoverInsets_sBehavior_2;
  double v5 = *(double *)&entryViewHorizontalCoverInsets_sBehavior_3;
  result.double right = v5;
  result.bottom = v4;
  result.double left = v3;
  result.top = v2;
  return result;
}

- (BOOL)isEntryViewCollapsable
{
  if (isEntryViewCollapsable_once != -1) {
    dispatch_once(&isEntryViewCollapsable_once, &__block_literal_global_1395);
  }
  return isEntryViewCollapsable_sBehavior;
}

- (UIEdgeInsets)entryViewVerticalCoverInsets
{
  if (entryViewVerticalCoverInsets_once != -1) {
    dispatch_once(&entryViewVerticalCoverInsets_once, &__block_literal_global_1499);
  }
  double v2 = *(double *)&entryViewVerticalCoverInsets_sBehavior_0;
  double v3 = *(double *)&entryViewVerticalCoverInsets_sBehavior_2;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.bottom = v3;
  result.double left = v4;
  result.top = v2;
  return result;
}

- (double)entryViewNonCollapsableLeftPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __50__CKUIBehavior_entryViewNonCollapsableLeftPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewNonCollapsableLeftPadding_once != -1) {
    dispatch_once(&entryViewNonCollapsableLeftPadding_once, block);
  }
  return *(double *)&entryViewNonCollapsableLeftPadding_sBehavior;
}

- (UIFont)characterCountFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)characterCountFont_sContentSizeCategory_characterCountFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatecharacterCountFont]
    || v11
    || characterCountFont_sIsIncreaseContrastEnabled_characterCountFont != v4
    || characterCountFont_sIsBoldTextEnabled_characterCountFont != IsBoldTextEnabled
    || (uint64_t v12 = characterCountFont_sTextFontSize_characterCountFont,
        *(double *)&characterCountFont_sTextFontSize_characterCountFont != v6)
    || (uint64_t v12 = characterCountFont_sCustomTextFontSize_characterCountFont,
        *(double *)&characterCountFont_sCustomTextFontSize_characterCountFont != v7)
    || (objc_msgSend((id)characterCountFont_sCustomTextFontName_characterCountFont, "isEqualToString:", v10, *(double *)&characterCountFont_sCustomTextFontSize_characterCountFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "defaultFontForTextStyle:", *MEMORY[0x1E4F43888], *(double *)&v12);
    double v14 = (void *)characterCountFont_sBehavior;
    characterCountFont_sBehavior = v13;

    objc_storeStrong((id *)&characterCountFont_sContentSizeCategory_characterCountFont, v3);
    characterCountFont_sIsIncreaseContrastEnabled_characterCountFont = v4;
    characterCountFont_sIsBoldTextEnabled_characterCountFont = IsBoldTextEnabled;
    characterCountFont_sTextFontSize_characterCountFont = *(void *)&v6;
    characterCountFont_sCustomTextFontSize_characterCountFont = *(void *)&v7;
    objc_storeStrong((id *)&characterCountFont_sCustomTextFontName_characterCountFont, v9);
  }
  double v15 = (UIFont *)(id)characterCountFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatecharacterCountFont
{
  return 0;
}

uint64_t __41__CKUIBehavior_balloonLineFragmentInsets__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) balloonLineFragmentPadding];
  balloonLineFragmentInsets_sBehavior_1 = v2;
  balloonLineFragmentInsets_sBehavior_3 = v2;
  return result;
}

- (double)entryViewCoverMinHeight
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_entryViewCoverMinHeight__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewCoverMinHeight_once != -1) {
    dispatch_once(&entryViewCoverMinHeight_once, block);
  }
  return *(double *)&entryViewCoverMinHeight_sBehavior;
}

- (UIEdgeInsets)entryViewVerticalTextFieldInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __48__CKUIBehavior_entryViewVerticalTextFieldInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewVerticalTextFieldInsets_once != -1) {
    dispatch_once(&entryViewVerticalTextFieldInsets_once, block);
  }
  double v2 = *(double *)&entryViewVerticalTextFieldInsets_sBehavior_0;
  double v3 = *(double *)&entryViewVerticalTextFieldInsets_sBehavior_2;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.bottom = v3;
  result.double left = v4;
  result.top = v2;
  return result;
}

- (double)balloonLineFragmentPadding
{
  if (balloonLineFragmentPadding_once != -1) {
    dispatch_once(&balloonLineFragmentPadding_once, &__block_literal_global_1085);
  }
  return *(double *)&balloonLineFragmentPadding_sBehavior;
}

void __21__CKUIBehavior_theme__block_invoke()
{
  int v0 = CKIsRunningInMessagesNotificationExtension();
  int v1 = off_1E561E470;
  if (v0) {
    int v1 = off_1E561E490;
  }
  id v2 = objc_alloc_init(*v1);
  double v3 = (void *)theme_sBehavior;
  theme_sBehavior = (uint64_t)v2;
}

- (double)conversationListBottomTipSectionPadding
{
  if (conversationListBottomTipSectionPadding_once != -1) {
    dispatch_once(&conversationListBottomTipSectionPadding_once, &__block_literal_global_337_0);
  }
  return *(double *)&conversationListBottomTipSectionPadding_sBehavior;
}

void __38__CKUIBehavior_balloonMaxWidthPercent__block_invoke()
{
  balloonMaxWidthPercent_sBehavior = 0x3FEB333333333333;
}

void __50__CKUIBehavior_conversationListSIMLabelBaseRadius__block_invoke()
{
  conversationListSIMLabelBaseRadius_sBehavior = 0x40019999A0000000;
}

void __44__CKUIBehavior_unreadIndicatorImageViewSize__block_invoke()
{
  unreadIndicatorImageViewSize_sBehavior_0 = 0x4026000000000000;
  unreadIndicatorImageViewSize_sBehavior_1 = 0x4026000000000000;
}

void __41__CKUIBehavior_minTranscriptMarginInsets__block_invoke()
{
  minTranscriptMarginInsets_sBehavior_1 = 0x4030000000000000;
  minTranscriptMarginInsets_sBehavior_3 = 0x4030000000000000;
}

void __39__CKUIBehavior_entryViewPlusButtonSize__block_invoke()
{
  entryViewPlusButtonSize_sBehavior_0 = 0x4041000000000000;
  entryViewPlusButtonSize_sBehavior_1 = 0x4041000000000000;
}

- (BOOL)shouldSuppressRotationInNewCompose
{
  if (shouldSuppressRotationInNewCompose_once != -1) {
    dispatch_once(&shouldSuppressRotationInNewCompose_once, &__block_literal_global_111);
  }
  return shouldSuppressRotationInNewCompose_sBehavior;
}

- (BOOL)usesUncollapsedSplitview
{
  if (usesUncollapsedSplitview_once != -1) {
    dispatch_once(&usesUncollapsedSplitview_once, &__block_literal_global_109);
  }
  return usesUncollapsedSplitview_sBehavior;
}

uint64_t __54__CKUIBehavior_initialConversationViewingMessageCount__block_invoke(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) shouldLoadInitialViewingMessageCount];
  double v3 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t result = [v3 minBalloonsForTranscriptHeight];
  }
  else {
    uint64_t result = [v3 defaultConversationViewingMessageCount];
  }
  initialConversationViewingMessageCount_sBehavior = result;
  return result;
}

- (BOOL)shouldLoadInitialViewingMessageCount
{
  if (shouldLoadInitialViewingMessageCount_once != -1) {
    dispatch_once(&shouldLoadInitialViewingMessageCount_once, &__block_literal_global_268_0);
  }
  return 0;
}

- (unint64_t)defaultConversationViewingMessageCount
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_defaultConversationViewingMessageCount__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (defaultConversationViewingMessageCount_once != -1) {
    dispatch_once(&defaultConversationViewingMessageCount_once, block);
  }
  return defaultConversationViewingMessageCount_sBehavior;
}

- (unint64_t)initialConversationViewingMessageCount
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_initialConversationViewingMessageCount__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (initialConversationViewingMessageCount_once != -1) {
    dispatch_once(&initialConversationViewingMessageCount_once, block);
  }
  return initialConversationViewingMessageCount_sBehavior;
}

void __44__CKUIBehavior_entryViewVerticalCoverInsets__block_invoke()
{
  entryViewVerticalCoverInsets_sBehavior_0 = 0x4014000000000000;
  entryViewVerticalCoverInsets_sBehavior_2 = 0x4010000000000000;
}

- (BOOL)conversationListHidesSearchBarWhenScrolling
{
  if (conversationListHidesSearchBarWhenScrolling_once != -1) {
    dispatch_once(&conversationListHidesSearchBarWhenScrolling_once, &__block_literal_global_444);
  }
  return conversationListHidesSearchBarWhenScrolling_sBehavior;
}

- (void)setHUDStyle:(int64_t)a3
{
  if (self->_HUDStyle != a3)
  {
    self->_HUDStyle = a3;
    id v4 = [(CKUIBehavior *)self theme];
    [v4 setHUDStyle:self->_HUDStyle];
  }
}

double __45__CKUIBehavior_entryViewSendButtonCoverSpace__block_invoke()
{
  if (CKPixelWidth_once_7 != -1) {
    dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
  }
  double result = *(double *)&CKPixelWidth_sPixel_7 + 4.5;
  *(double *)&entryViewSendButtonCoverSpace_sBehavior = *(double *)&CKPixelWidth_sPixel_7 + 4.5;
  return result;
}

double __30__CKUIBehavior_sendButtonSize__block_invoke()
{
  if (CKPixelWidth_once_7 != -1) {
    dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
  }
  double result = *(double *)&CKPixelWidth_sPixel_7 + 27.0;
  *(double *)&sendButtonSize_sBehavior = *(double *)&CKPixelWidth_sPixel_7 + 27.0;
  return result;
}

void __35__CKUIBehavior__shouldUseClarityUI__block_invoke()
{
  id v0 = (id)objc_opt_new();
  _shouldUseClarityUI_sIsClarityBoardEnabled = [v0 isClarityBoardEnabled];
}

uint64_t __57__CKUIBehavior_conversationListNavigationControllerClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  conversationListNavigationControllerClass_sBehavior = result;
  return result;
}

uint64_t __50__CKUIBehavior_maximumNumberOfPinnedConversations__block_invoke()
{
  uint64_t result = [MEMORY[0x1E4F6BD70] maximumNumberOfPinnedConversations];
  maximumNumberOfPinnedConversations_sBehavior = result;
  return result;
}

uint64_t __47__CKUIBehavior_conversationListControllerClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  conversationListControllerClass_sBehavior = result;
  return result;
}

uint64_t __34__CKUIBehavior_navigationBarClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  navigationBarClass_sBehavior = result;
  return result;
}

uint64_t __27__CKUIBehavior_windowClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  windowClass_sBehavior = result;
  return result;
}

- (Class)windowClass
{
  if (windowClass_once != -1) {
    dispatch_once(&windowClass_once, &__block_literal_global_423);
  }
  int v2 = (void *)windowClass_sBehavior;

  return (Class)v2;
}

- (CKMessageEntryViewLayoutMetrics)entryViewlayoutMetrics
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewlayoutMetrics_sContentSizeCategory_entryViewlayoutMetrics, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewlayoutMetrics]
    || v10
    || entryViewlayoutMetrics_sIsBoldTextEnabled_entryViewlayoutMetrics != IsBoldTextEnabled
    || (uint64_t v11 = entryViewlayoutMetrics_sTextFontSize_entryViewlayoutMetrics,
        *(double *)&entryViewlayoutMetrics_sTextFontSize_entryViewlayoutMetrics != v5)
    || (uint64_t v11 = entryViewlayoutMetrics_sCustomTextFontSize_entryViewlayoutMetrics,
        *(double *)&entryViewlayoutMetrics_sCustomTextFontSize_entryViewlayoutMetrics != v6)
    || (objc_msgSend((id)entryViewlayoutMetrics_sCustomTextFontName_entryViewlayoutMetrics, "isEqualToString:", v9, *(double *)&entryViewlayoutMetrics_sCustomTextFontSize_entryViewlayoutMetrics) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self _entryViewlayoutMetrics];
    uint64_t v13 = (void *)entryViewlayoutMetrics_sBehavior;
    entryViewlayoutMetrics_sBehavior = v12;

    objc_storeStrong((id *)&entryViewlayoutMetrics_sContentSizeCategory_entryViewlayoutMetrics, v3);
    entryViewlayoutMetrics_sIsBoldTextEnabled_entryViewlayoutMetrics = IsBoldTextEnabled;
    entryViewlayoutMetrics_sTextFontSize_entryViewlayoutMetrics = *(void *)&v5;
    entryViewlayoutMetrics_sCustomTextFontSize_entryViewlayoutMetrics = *(void *)&v6;
    objc_storeStrong((id *)&entryViewlayoutMetrics_sCustomTextFontName_entryViewlayoutMetrics, v8);
  }
  double v14 = (CKMessageEntryViewLayoutMetrics *)(id)entryViewlayoutMetrics_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateentryViewlayoutMetrics
{
  return 0;
}

- (id)_entryViewlayoutMetrics
{
  if (CKIsRunningInIMTranscoderAgent())
  {
    int v2 = 0;
  }
  else
  {
    int v2 = +[CKMessageEntryViewLayoutMetrics cachedMetricsRecalculatingIfNecessary];
  }

  return v2;
}

- (unint64_t)contactsSettingsCacheSize
{
  if (contactsSettingsCacheSize_once != -1) {
    dispatch_once(&contactsSettingsCacheSize_once, &__block_literal_global_107);
  }
  if (contactsSettingsCacheSize_sBehavior) {
    return 50;
  }
  else {
    return 0;
  }
}

uint64_t __40__CKUIBehavior_isRunningInStoreDemoMode__block_invoke()
{
  uint64_t result = [MEMORY[0x1E4F42738] isRunningInStoreDemoMode];
  isRunningInStoreDemoMode_sBehavior = result;
  return result;
}

- (BOOL)isRunningInStoreDemoMode
{
  if (isRunningInStoreDemoMode_once != -1) {
    dispatch_once(&isRunningInStoreDemoMode_once, &__block_literal_global_301_0);
  }
  return isRunningInStoreDemoMode_sBehavior;
}

void __50__CKUIBehavior_shouldSuppressRotationInNewCompose__block_invoke()
{
  if (CKIsGeneralIdiom_onceToken != -1) {
    dispatch_once(&CKIsGeneralIdiom_onceToken, &__block_literal_global_5991);
  }
  shouldSuppressRotationInNewCompose_sBehavior = CKIsGeneralIdiom_sGeneralIdiom;
}

void __45__CKUIBehavior_showPendingInConversationList__block_invoke()
{
  if (CKIsGeneralIdiom_onceToken != -1) {
    dispatch_once(&CKIsGeneralIdiom_onceToken, &__block_literal_global_5991);
  }
  showPendingInConversationList_sBehavior = CKIsGeneralIdiom_sGeneralIdiom;
}

void __40__CKUIBehavior_usesUncollapsedSplitview__block_invoke()
{
  if (CKIsGeneralIdiom_onceToken != -1) {
    dispatch_once(&CKIsGeneralIdiom_onceToken, &__block_literal_global_5991);
  }
  usesUncollapsedSplitview_sBehavior = CKIsGeneralIdiom_sGeneralIdiom;
}

double __40__CKUIBehavior_entryFieldCoverLineWidth__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = ceil(v0) / v0;
  entryFieldCoverLineWidth_sBehavior = *(void *)&result;
  return result;
}

- (double)conversationListSIMLabelBaseRadius
{
  if (conversationListSIMLabelBaseRadius_once != -1) {
    dispatch_once(&conversationListSIMLabelBaseRadius_once, &__block_literal_global_1015);
  }
  return *(double *)&conversationListSIMLabelBaseRadius_sBehavior;
}

double __52__CKUIBehavior_conversationListContactImageDiameter__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = ceil(v0 * 45.0) / v0;
  conversationListContactImageDiameter_sBehavior = *(void *)&result;
  return result;
}

- (BOOL)converastionListAlwaysSupportsLargeTitles
{
  if (converastionListAlwaysSupportsLargeTitles_once != -1) {
    dispatch_once(&converastionListAlwaysSupportsLargeTitles_once, &__block_literal_global_442_0);
  }
  return 0;
}

+ (void)testOverrideClearSharedBehaviors
{
  int v2 = (void *)sSharedBehaviors;
  sSharedBehaviors = 0;
}

- (double)muteOneHourTimeInterval
{
  if (muteOneHourTimeInterval_once != -1) {
    dispatch_once(&muteOneHourTimeInterval_once, &__block_literal_global_93_0);
  }
  return *(double *)&muteOneHourTimeInterval_sBehavior;
}

void __39__CKUIBehavior_muteOneHourTimeInterval__block_invoke()
{
  muteOneHourTimeInterval_sBehavior = 0x40AC200000000000;
}

- (double)muteEightHourTimeInterval
{
  if (muteEightHourTimeInterval_once != -1) {
    dispatch_once(&muteEightHourTimeInterval_once, &__block_literal_global_95_0);
  }
  return *(double *)&muteEightHourTimeInterval_sBehavior;
}

void __41__CKUIBehavior_muteEightHourTimeInterval__block_invoke()
{
  muteEightHourTimeInterval_sBehavior = 0x40DC200000000000;
}

- (double)locationShareOneHourTimeInterval
{
  if (locationShareOneHourTimeInterval_once != -1) {
    dispatch_once(&locationShareOneHourTimeInterval_once, &__block_literal_global_97_0);
  }
  return *(double *)&locationShareOneHourTimeInterval_sBehavior;
}

void __48__CKUIBehavior_locationShareOneHourTimeInterval__block_invoke()
{
  locationShareOneHourTimeInterval_sBehavior = 0x40AC200000000000;
}

- (int64_t)locationShareEODHour
{
  if (locationShareEODHour_once != -1) {
    dispatch_once(&locationShareEODHour_once, &__block_literal_global_99);
  }
  if (locationShareEODHour_sBehavior) {
    return 4;
  }
  else {
    return 0;
  }
}

void __36__CKUIBehavior_locationShareEODHour__block_invoke()
{
  locationShareEODHour_sBehavior = 1;
}

- (double)locationValidInterval
{
  if (locationValidInterval_once != -1) {
    dispatch_once(&locationValidInterval_once, &__block_literal_global_101_0);
  }
  return *(double *)&locationValidInterval_sBehavior;
}

void __37__CKUIBehavior_locationValidInterval__block_invoke()
{
  locationValidInterval_sBehavior = 0x4072C00000000000;
}

- (double)raiseToTalkAutoSendMaxDuration
{
  if (raiseToTalkAutoSendMaxDuration_once != -1) {
    dispatch_once(&raiseToTalkAutoSendMaxDuration_once, &__block_literal_global_103);
  }
  return *(double *)&raiseToTalkAutoSendMaxDuration_sBehavior;
}

void __46__CKUIBehavior_raiseToTalkAutoSendMaxDuration__block_invoke()
{
  raiseToTalkAutoSendMaxDuration_sBehavior = 0x402E000000000000;
}

- (double)raiseToTalkErrorMaxDuration
{
  if (raiseToTalkErrorMaxDuration_once != -1) {
    dispatch_once(&raiseToTalkErrorMaxDuration_once, &__block_literal_global_105_0);
  }
  return *(double *)&raiseToTalkErrorMaxDuration_sBehavior;
}

void __43__CKUIBehavior_raiseToTalkErrorMaxDuration__block_invoke()
{
  raiseToTalkErrorMaxDuration_sBehavior = 0x3F9EB851EB851EB8;
}

- (BOOL)lowClearanceInLandscape
{
  if (lowClearanceInLandscape_once != -1) {
    dispatch_once(&lowClearanceInLandscape_once, &__block_literal_global_113);
  }
  return lowClearanceInLandscape_sBehavior;
}

void __39__CKUIBehavior_lowClearanceInLandscape__block_invoke()
{
  if (CKIsGeneralIdiom_onceToken != -1) {
    dispatch_once(&CKIsGeneralIdiom_onceToken, &__block_literal_global_5991);
  }
  lowClearanceInLandscape_sBehavior = CKIsGeneralIdiom_sGeneralIdiom ^ 1;
}

- (BOOL)presentsQuickLookController
{
  if (presentsQuickLookController_once != -1) {
    dispatch_once(&presentsQuickLookController_once, &__block_literal_global_115_0);
  }
  return presentsQuickLookController_sBehavior;
}

void __43__CKUIBehavior_presentsQuickLookController__block_invoke()
{
  presentsQuickLookController_sBehavior = 1;
}

- (BOOL)usesPopovers
{
  if (usesPopovers_once != -1) {
    dispatch_once(&usesPopovers_once, &__block_literal_global_117);
  }
  return 0;
}

- (BOOL)canPresentOverKeyboard
{
  if (canPresentOverKeyboard_once != -1) {
    dispatch_once(&canPresentOverKeyboard_once, &__block_literal_global_119);
  }
  return canPresentOverKeyboard_sBehavior;
}

uint64_t __38__CKUIBehavior_canPresentOverKeyboard__block_invoke()
{
  uint64_t result = CKIsRunningInMessagesTranscriptExtension();
  canPresentOverKeyboard_sBehavior = result == 0;
  return result;
}

- (BOOL)fullScreenBalloonWantsWindowedPresentation
{
  if (fullScreenBalloonWantsWindowedPresentation_once != -1) {
    dispatch_once(&fullScreenBalloonWantsWindowedPresentation_once, &__block_literal_global_121_0);
  }
  return fullScreenBalloonWantsWindowedPresentation_sBehavior;
}

void __58__CKUIBehavior_fullScreenBalloonWantsWindowedPresentation__block_invoke()
{
  fullScreenBalloonWantsWindowedPresentation_sBehavior = 1;
}

- (BOOL)fullScreenBalloonForceWindowedPresentation
{
  if (fullScreenBalloonForceWindowedPresentation_once != -1) {
    dispatch_once(&fullScreenBalloonForceWindowedPresentation_once, &__block_literal_global_123);
  }
  return fullScreenBalloonForceWindowedPresentation_sBehavior;
}

void __58__CKUIBehavior_fullScreenBalloonForceWindowedPresentation__block_invoke()
{
  fullScreenBalloonForceWindowedPresentation_sBehavior = 1;
}

- (BOOL)canUseWindowedSendAnimation
{
  if (canUseWindowedSendAnimation_once != -1) {
    dispatch_once(&canUseWindowedSendAnimation_once, &__block_literal_global_125);
  }
  return canUseWindowedSendAnimation_sBehavior;
}

void __43__CKUIBehavior_canUseWindowedSendAnimation__block_invoke()
{
  if (CKIsRunningInMessagesTranscriptExtension())
  {
    canUseWindowedSendAnimation_sBehavior = 0;
  }
  else
  {
    id v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    canUseWindowedSendAnimation_sBehavior = [v0 isEntryViewInTranscriptEnabled] ^ 1;
  }
}

- (BOOL)shouldGrabBackgroundAssertion
{
  if (shouldGrabBackgroundAssertion_once != -1) {
    dispatch_once(&shouldGrabBackgroundAssertion_once, &__block_literal_global_128_0);
  }
  return shouldGrabBackgroundAssertion_sBehavior;
}

void __45__CKUIBehavior_shouldGrabBackgroundAssertion__block_invoke()
{
  shouldGrabBackgroundAssertion_sBehavior = 1;
}

- (BOOL)resetsIdleTimer
{
  if (resetsIdleTimer_once != -1) {
    dispatch_once(&resetsIdleTimer_once, &__block_literal_global_132_0);
  }
  return resetsIdleTimer_sBehavior;
}

void __31__CKUIBehavior_resetsIdleTimer__block_invoke()
{
  resetsIdleTimer_sBehavior = 1;
}

- (BOOL)promptsForReadReceiptsSetting
{
  if (promptsForReadReceiptsSetting_once != -1) {
    dispatch_once(&promptsForReadReceiptsSetting_once, &__block_literal_global_134_0);
  }
  return promptsForReadReceiptsSetting_sBehavior;
}

void __45__CKUIBehavior_promptsForReadReceiptsSetting__block_invoke()
{
  promptsForReadReceiptsSetting_sBehavior = 1;
}

- (BOOL)isSizeConstrained
{
  if (isSizeConstrained_once != -1) {
    dispatch_once(&isSizeConstrained_once, &__block_literal_global_136_0);
  }
  return 0;
}

- (BOOL)automaticallyShowsKeyboard
{
  if (automaticallyShowsKeyboard_once != -1) {
    dispatch_once(&automaticallyShowsKeyboard_once, &__block_literal_global_140_0);
  }
  return automaticallyShowsKeyboard_sBehavior;
}

void __42__CKUIBehavior_automaticallyShowsKeyboard__block_invoke()
{
  automaticallyShowsKeyboard_sBehavior = 1;
}

- (BOOL)ckShouldUpdateshowsSendAnimation
{
  return 0;
}

- (BOOL)showsSendAnimation
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)showsSendAnimation_sContentSizeCategory_showsSendAnimation, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateshowsSendAnimation]
    || v10
    || showsSendAnimation_sIsBoldTextEnabled_showsSendAnimation != IsBoldTextEnabled
    || (uint64_t v11 = showsSendAnimation_sTextFontSize_showsSendAnimation,
        *(double *)&showsSendAnimation_sTextFontSize_showsSendAnimation != v5)
    || (uint64_t v11 = showsSendAnimation_sCustomTextFontSize_showsSendAnimation,
        *(double *)&showsSendAnimation_sCustomTextFontSize_showsSendAnimation != v6)
    || (objc_msgSend((id)showsSendAnimation_sCustomTextFontName_showsSendAnimation, "isEqualToString:", v9, *(double *)&showsSendAnimation_sCustomTextFontSize_showsSendAnimation) & 1) == 0)
  {
    showsSendAnimation_sBehavior = ![(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    objc_storeStrong((id *)&showsSendAnimation_sContentSizeCategory_showsSendAnimation, v3);
    showsSendAnimation_sIsBoldTextEnabled_showsSendAnimation = IsBoldTextEnabled;
    showsSendAnimation_sTextFontSize_showsSendAnimation = *(void *)&v5;
    showsSendAnimation_sCustomTextFontSize_showsSendAnimation = *(void *)&v6;
    objc_storeStrong((id *)&showsSendAnimation_sCustomTextFontName_showsSendAnimation, v8);
  }
  char v12 = showsSendAnimation_sBehavior;

  return v12;
}

- (BOOL)showsCompositionPanel
{
  if (showsCompositionPanel_once != -1) {
    dispatch_once(&showsCompositionPanel_once, &__block_literal_global_145_0);
  }
  return showsCompositionPanel_sBehavior;
}

void __37__CKUIBehavior_showsCompositionPanel__block_invoke()
{
  showsCompositionPanel_sBehavior = 1;
}

- (BOOL)recordsRecentContact
{
  if (recordsRecentContact_once != -1) {
    dispatch_once(&recordsRecentContact_once, &__block_literal_global_147_0);
  }
  return recordsRecentContact_sBehavior;
}

void __36__CKUIBehavior_recordsRecentContact__block_invoke()
{
  recordsRecentContact_sBehavior = 1;
}

- (BOOL)presentForwardingUIModally
{
  if (presentForwardingUIModally_once != -1) {
    dispatch_once(&presentForwardingUIModally_once, &__block_literal_global_149_1);
  }
  return presentForwardingUIModally_sBehavior;
}

void __42__CKUIBehavior_presentForwardingUIModally__block_invoke()
{
  presentForwardingUIModally_sBehavior = 1;
}

- (BOOL)usesActionMenu
{
  if (usesActionMenu_once != -1) {
    dispatch_once(&usesActionMenu_once, &__block_literal_global_151_0);
  }
  return usesActionMenu_sBehavior;
}

uint64_t __30__CKUIBehavior_usesActionMenu__block_invoke()
{
  uint64_t result = CKIsRunningInMessagesViewService();
  if (result || (uint64_t result = CKIsRunningInMessagesNotificationExtension(), result))
  {
    BOOL v1 = 0;
  }
  else
  {
    uint64_t result = CKIsRunningInMessagesTranscriptExtension();
    BOOL v1 = result == 0;
  }
  usesActionMenu_sBehavior = v1;
  return result;
}

- (BOOL)joystickUsesWindow
{
  if (joystickUsesWindow_once != -1) {
    dispatch_once(&joystickUsesWindow_once, &__block_literal_global_153_0);
  }
  return joystickUsesWindow_sBehavior;
}

uint64_t __34__CKUIBehavior_joystickUsesWindow__block_invoke()
{
  uint64_t result = CKIsRunningInMessagesViewService();
  joystickUsesWindow_sBehavior = result == 0;
  return result;
}

- (BOOL)isProximityMonitoringSupported
{
  if (isProximityMonitoringSupported_once != -1) {
    dispatch_once(&isProximityMonitoringSupported_once, &__block_literal_global_155_1);
  }
  return isProximityMonitoringSupported_sBehavior;
}

uint64_t __46__CKUIBehavior_isProximityMonitoringSupported__block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  isProximityMonitoringSupported_sBehavior = result;
  return result;
}

- (BOOL)usesEntryView
{
  if (usesEntryView_once != -1) {
    dispatch_once(&usesEntryView_once, &__block_literal_global_160);
  }
  return usesEntryView_sBehavior;
}

void __29__CKUIBehavior_usesEntryView__block_invoke()
{
  usesEntryView_sBehavior = 1;
}

- (BOOL)usesNavigationBarControls
{
  if (usesNavigationBarControls_once != -1) {
    dispatch_once(&usesNavigationBarControls_once, &__block_literal_global_162);
  }
  return usesNavigationBarControls_sBehavior;
}

void __41__CKUIBehavior_usesNavigationBarControls__block_invoke()
{
  usesNavigationBarControls_sBehavior = 1;
}

- (BOOL)disableTranscriptOrb
{
  if (disableTranscriptOrb_once != -1) {
    dispatch_once(&disableTranscriptOrb_once, &__block_literal_global_164);
  }
  return disableTranscriptOrb_sBehavior;
}

void __36__CKUIBehavior_disableTranscriptOrb__block_invoke()
{
  disableTranscriptOrb_sBehavior = 1;
}

- (BOOL)supportsFoundInSuggestions
{
  if (supportsFoundInSuggestions_once != -1) {
    dispatch_once(&supportsFoundInSuggestions_once, &__block_literal_global_166);
  }
  return supportsFoundInSuggestions_sBehavior;
}

void __42__CKUIBehavior_supportsFoundInSuggestions__block_invoke()
{
  supportsFoundInSuggestions_sBehavior = 1;
}

- (double)resumeToConversationListTimeInterval
{
  if (resumeToConversationListTimeInterval_once != -1) {
    dispatch_once(&resumeToConversationListTimeInterval_once, &__block_literal_global_168);
  }
  return *(double *)&resumeToConversationListTimeInterval_sBehavior;
}

void __52__CKUIBehavior_resumeToConversationListTimeInterval__block_invoke()
{
  resumeToConversationListTimeInterval_sBehavior = 0x407E000000000000;
}

- (double)maxNavigationBarHeightValue
{
  if (maxNavigationBarHeightValue_once != -1) {
    dispatch_once(&maxNavigationBarHeightValue_once, &__block_literal_global_170);
  }
  return *(double *)&maxNavigationBarHeightValue_sBehavior;
}

void __43__CKUIBehavior_maxNavigationBarHeightValue__block_invoke()
{
  maxNavigationBarHeightValue_sBehavior = 0x4050800000000000;
}

- (double)minNavigationBarHeightValue
{
  if (minNavigationBarHeightValue_once != -1) {
    dispatch_once(&minNavigationBarHeightValue_once, &__block_literal_global_172);
  }
  return *(double *)&minNavigationBarHeightValue_sBehavior;
}

void __43__CKUIBehavior_minNavigationBarHeightValue__block_invoke()
{
  minNavigationBarHeightValue_sBehavior = 0x4046000000000000;
}

- (unint64_t)browserViewControllerSheetDetentStyle
{
  return 0;
}

- (double)navigationBarTitleViewVerticalOffsetWantsMinimumSafeAreas:(BOOL)a3
{
  BOOL v3 = a3;
  double v5 = [MEMORY[0x1E4F42948] currentDevice];
  uint64_t v6 = [v5 userInterfaceIdiom];

  double result = 0.0;
  if (!v6)
  {
    int v8 = CKIsRunningInMessagesTranscriptExtension();
    double result = 15.0;
    if (!v8)
    {
      double result = 0.0;
      if (v3)
      {
        BOOL v9 = [(CKUIBehavior *)self contactPhotosEnabled];
        double result = 0.0;
        if (v9) {
          return 4.0;
        }
      }
    }
  }
  return result;
}

- (double)navigationBarTitleViewHeightWithContactPhoto
{
  if (navigationBarTitleViewHeightWithContactPhoto_once != -1) {
    dispatch_once(&navigationBarTitleViewHeightWithContactPhoto_once, &__block_literal_global_176_0);
  }
  return *(double *)&navigationBarTitleViewHeightWithContactPhoto_sBehavior;
}

void __60__CKUIBehavior_navigationBarTitleViewHeightWithContactPhoto__block_invoke()
{
  navigationBarTitleViewHeightWithContactPhoto_sBehavior = 0x4053800000000000;
}

- (double)navigationBarBackButtonMargin
{
  if (navigationBarBackButtonMargin_once != -1) {
    dispatch_once(&navigationBarBackButtonMargin_once, &__block_literal_global_178);
  }
  return *(double *)&navigationBarBackButtonMargin_sBehavior;
}

void __45__CKUIBehavior_navigationBarBackButtonMargin__block_invoke()
{
  navigationBarBackButtonMargin_sBehavior = 0x4030000000000000;
}

- (double)navigationBarLeftItemVerticalCenterOffset
{
  if (navigationBarLeftItemVerticalCenterOffset_once != -1) {
    dispatch_once(&navigationBarLeftItemVerticalCenterOffset_once, &__block_literal_global_180);
  }
  return *(double *)&navigationBarLeftItemVerticalCenterOffset_sBehavior;
}

void __57__CKUIBehavior_navigationBarLeftItemVerticalCenterOffset__block_invoke()
{
  navigationBarLeftItemVerticalCenterOffset_sBehavior = 0x403C000000000000;
}

- (double)navigationBarHeaderButtonVerticalOffset
{
  if (navigationBarHeaderButtonVerticalOffset_once != -1) {
    dispatch_once(&navigationBarHeaderButtonVerticalOffset_once, &__block_literal_global_182);
  }
  return *(double *)&navigationBarHeaderButtonVerticalOffset_sBehavior;
}

void __55__CKUIBehavior_navigationBarHeaderButtonVerticalOffset__block_invoke()
{
  navigationBarHeaderButtonVerticalOffset_sBehavior = 0x4026000000000000;
}

- (double)transcriptHeaderChevronRotationAnimationSpeed
{
  if (transcriptHeaderChevronRotationAnimationSpeed_once != -1) {
    dispatch_once(&transcriptHeaderChevronRotationAnimationSpeed_once, &__block_literal_global_184_0);
  }
  return *(double *)&transcriptHeaderChevronRotationAnimationSpeed_sBehavior;
}

void __61__CKUIBehavior_transcriptHeaderChevronRotationAnimationSpeed__block_invoke()
{
  transcriptHeaderChevronRotationAnimationSpeed_sBehavior = 0x3FC999999999999ALL;
}

- (double)defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding
{
  if (defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding_once != -1) {
    dispatch_once(&defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding_once, &__block_literal_global_186);
  }
  return *(double *)&defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding_sBehavior;
}

void __79__CKUIBehavior_defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding__block_invoke()
{
  defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding_sBehavior = 0x4020000000000000;
}

- (double)maxNavigationBarHeightValueWantsMinimumSafeAreasLocationLabelPadding
{
  if (maxNavigationBarHeightValueWantsMinimumSafeAreasLocationLabelPadding_once != -1) {
    dispatch_once(&maxNavigationBarHeightValueWantsMinimumSafeAreasLocationLabelPadding_once, &__block_literal_global_188);
  }
  return *(double *)&maxNavigationBarHeightValueWantsMinimumSafeAreasLocationLabelPadding_sBehavior;
}

void __84__CKUIBehavior_maxNavigationBarHeightValueWantsMinimumSafeAreasLocationLabelPadding__block_invoke()
{
  maxNavigationBarHeightValueWantsMinimumSafeAreasLocationLabelPadding_sBehavior = 0x4024000000000000;
}

- (double)navBarTitleViewAXFontSizePadding
{
  if (navBarTitleViewAXFontSizePadding_once != -1) {
    dispatch_once(&navBarTitleViewAXFontSizePadding_once, &__block_literal_global_190_0);
  }
  return *(double *)&navBarTitleViewAXFontSizePadding_sBehavior;
}

void __48__CKUIBehavior_navBarTitleViewAXFontSizePadding__block_invoke()
{
  navBarTitleViewAXFontSizePadding_sBehavior = 0x4024000000000000;
}

- (double)defaultNavigationBarNoContactPhotoCollapsedHeightValue
{
  if (![(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory]) {
    return 44.0;
  }
  [(CKUIBehavior *)self defaultNavigationBarNoContactPhotoCollapsedHeightValueAXPadding];
  return v3 + 44.0;
}

- (double)defaultNavigationBarHeightValueWantsMinimumSafeAreas:(BOOL)a3
{
  [(CKUIBehavior *)self navigationBarTitleViewVerticalOffsetWantsMinimumSafeAreas:a3];
  return v3 + 80.0;
}

- (double)maxNavigationBarCollapsedHeightValueForMinimumSafeArea
{
  if (maxNavigationBarCollapsedHeightValueForMinimumSafeArea_once != -1) {
    dispatch_once(&maxNavigationBarCollapsedHeightValueForMinimumSafeArea_once, &__block_literal_global_192);
  }
  return *(double *)&maxNavigationBarCollapsedHeightValueForMinimumSafeArea_sBehavior;
}

void __70__CKUIBehavior_maxNavigationBarCollapsedHeightValueForMinimumSafeArea__block_invoke()
{
  maxNavigationBarCollapsedHeightValueForMinimumSafeArea_sBehavior = 0x4056800000000000;
}

- (double)maxNavigationBarExpandedHeightValue
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__CKUIBehavior_maxNavigationBarExpandedHeightValue__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (maxNavigationBarExpandedHeightValue_once != -1) {
    dispatch_once(&maxNavigationBarExpandedHeightValue_once, block);
  }
  return *(double *)&maxNavigationBarExpandedHeightValue_sBehavior;
}

void __51__CKUIBehavior_maxNavigationBarExpandedHeightValue__block_invoke(uint64_t a1)
{
  int v2 = +[CKUIBehavior sharedBehaviors];
  if ([v2 isAccessibilityPreferredContentSizeCategory]) {
    double v3 = 132.0;
  }
  else {
    double v3 = 128.0;
  }

  id v4 = [MEMORY[0x1E4F42948] currentDevice];
  uint64_t v5 = [v4 userInterfaceIdiom];

  if (!v5 && CKIsRunningInMessagesTranscriptExtension())
  {
    [*(id *)(a1 + 32) navigationBarTitleViewVerticalOffsetWantsMinimumSafeAreas:0];
    double v3 = v3 + v6;
  }
  maxNavigationBarExpandedHeightValue_sBehavior = *(void *)&v3;
}

- (double)disabledNavigationButtonWidth
{
  if (disabledNavigationButtonWidth_once != -1) {
    dispatch_once(&disabledNavigationButtonWidth_once, &__block_literal_global_195);
  }
  return *(double *)&disabledNavigationButtonWidth_sBehavior;
}

void __45__CKUIBehavior_disabledNavigationButtonWidth__block_invoke()
{
  disabledNavigationButtonWidth_sBehavior = 0x4036000000000000;
}

- (double)disabledNavigationButtonStrokeWidth
{
  if (disabledNavigationButtonStrokeWidth_once != -1) {
    dispatch_once(&disabledNavigationButtonStrokeWidth_once, &__block_literal_global_197_0);
  }
  return *(double *)&disabledNavigationButtonStrokeWidth_sBehavior;
}

void __51__CKUIBehavior_disabledNavigationButtonStrokeWidth__block_invoke()
{
  disabledNavigationButtonStrokeWidth_sBehavior = 0x3FF0000000000000;
}

- (id)disabledNavigationButtonStrokeColor
{
  if (disabledNavigationButtonStrokeColor_once != -1) {
    dispatch_once(&disabledNavigationButtonStrokeColor_once, &__block_literal_global_199);
  }
  int v2 = (void *)disabledNavigationButtonStrokeColor_sBehavior;

  return v2;
}

void __51__CKUIBehavior_disabledNavigationButtonStrokeColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] colorWithRed:0.898039216 green:0.898039216 blue:0.917647059 alpha:1.0];
  BOOL v1 = (void *)disabledNavigationButtonStrokeColor_sBehavior;
  disabledNavigationButtonStrokeColor_sBehavior = v0;
}

- (double)navBarButtonSymbolImageFontSize
{
  if (navBarButtonSymbolImageFontSize_once != -1) {
    dispatch_once(&navBarButtonSymbolImageFontSize_once, &__block_literal_global_202);
  }
  return *(double *)&navBarButtonSymbolImageFontSize_sBehavior;
}

void __47__CKUIBehavior_navBarButtonSymbolImageFontSize__block_invoke()
{
  navBarButtonSymbolImageFontSize_sBehavior = 0x4031000000000000;
}

- (NSString)conversationListOptionsButtonImageName
{
  if (conversationListOptionsButtonImageName_once != -1) {
    dispatch_once(&conversationListOptionsButtonImageName_once, &__block_literal_global_204);
  }
  int v2 = (void *)conversationListOptionsButtonImageName_sBehavior;

  return (NSString *)v2;
}

void __54__CKUIBehavior_conversationListOptionsButtonImageName__block_invoke()
{
  uint64_t v0 = (void *)conversationListOptionsButtonImageName_sBehavior;
  conversationListOptionsButtonImageName_sBehavior = @"ellipsis.circle";
}

- (double)navbarButtonImagePointSize
{
  if (navbarButtonImagePointSize_once != -1) {
    dispatch_once(&navbarButtonImagePointSize_once, &__block_literal_global_209);
  }
  return *(double *)&navbarButtonImagePointSize_sBehavior;
}

void __42__CKUIBehavior_navbarButtonImagePointSize__block_invoke()
{
  navbarButtonImagePointSize_sBehavior = 0x403E000000000000;
}

- (UIImage)enabledFacetimeAudioImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__CKUIBehavior_enabledFacetimeAudioImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (enabledFacetimeAudioImage_once != -1) {
    dispatch_once(&enabledFacetimeAudioImage_once, block);
  }
  return (UIImage *)(id)enabledFacetimeAudioImage_sBehavior;
}

void __41__CKUIBehavior_enabledFacetimeAudioImage__block_invoke(uint64_t a1)
{
  BOOL v1 = *(void **)(a1 + 32);
  [v1 navbarButtonImagePointSize];
  uint64_t v2 = objc_msgSend(v1, "imageNamed:pointSize:insets:", @"phone.circle.fill");
  double v3 = (void *)enabledFacetimeAudioImage_sBehavior;
  enabledFacetimeAudioImage_sBehavior = v2;
}

- (UIImage)enabledFacetimeAudioImagePill
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __45__CKUIBehavior_enabledFacetimeAudioImagePill__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (enabledFacetimeAudioImagePill_once != -1) {
    dispatch_once(&enabledFacetimeAudioImagePill_once, block);
  }
  return (UIImage *)(id)enabledFacetimeAudioImagePill_sBehavior;
}

void __45__CKUIBehavior_enabledFacetimeAudioImagePill__block_invoke(uint64_t a1)
{
  uint64_t v1 = objc_msgSend(*(id *)(a1 + 32), "imageNamed:pointSize:insets:", @"phone.fill", 18.0, *MEMORY[0x1E4F437F8], *(double *)(MEMORY[0x1E4F437F8] + 8), *(double *)(MEMORY[0x1E4F437F8] + 16), *(double *)(MEMORY[0x1E4F437F8] + 24));
  uint64_t v2 = (void *)enabledFacetimeAudioImagePill_sBehavior;
  enabledFacetimeAudioImagePill_sBehavior = v1;
}

- (UIImage)enabledFacetimeVideoImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__CKUIBehavior_enabledFacetimeVideoImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (enabledFacetimeVideoImage_once != -1) {
    dispatch_once(&enabledFacetimeVideoImage_once, block);
  }
  return (UIImage *)(id)enabledFacetimeVideoImage_sBehavior;
}

void __41__CKUIBehavior_enabledFacetimeVideoImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 navbarButtonImagePointSize];
  uint64_t v2 = objc_msgSend(v1, "imageNamed:pointSize:insets:", @"video.circle.fill");
  double v3 = (void *)enabledFacetimeVideoImage_sBehavior;
  enabledFacetimeVideoImage_sBehavior = v2;
}

- (UIImage)enabledFacetimeVideoImagePill
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __45__CKUIBehavior_enabledFacetimeVideoImagePill__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (enabledFacetimeVideoImagePill_once != -1) {
    dispatch_once(&enabledFacetimeVideoImagePill_once, block);
  }
  return (UIImage *)(id)enabledFacetimeVideoImagePill_sBehavior;
}

void __45__CKUIBehavior_enabledFacetimeVideoImagePill__block_invoke(uint64_t a1)
{
  uint64_t v1 = objc_msgSend(*(id *)(a1 + 32), "imageNamed:pointSize:insets:", @"video.fill", 18.0, *MEMORY[0x1E4F437F8], *(double *)(MEMORY[0x1E4F437F8] + 8), *(double *)(MEMORY[0x1E4F437F8] + 16), *(double *)(MEMORY[0x1E4F437F8] + 24));
  uint64_t v2 = (void *)enabledFacetimeVideoImagePill_sBehavior;
  enabledFacetimeVideoImagePill_sBehavior = v1;
}

- (UIImage)enabledExpanseImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __35__CKUIBehavior_enabledExpanseImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (enabledExpanseImage_once != -1) {
    dispatch_once(&enabledExpanseImage_once, block);
  }
  return (UIImage *)(id)enabledExpanseImage_sBehavior;
}

void __35__CKUIBehavior_enabledExpanseImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 navbarButtonImagePointSize];
  uint64_t v2 = objc_msgSend(v1, "imageNamed:pointSize:insets:", @"person.2.circle.fill");
  double v3 = (void *)enabledExpanseImage_sBehavior;
  enabledExpanseImage_sBehavior = v2;
}

- (UIImage)enabledExpanseImagePill
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_enabledExpanseImagePill__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (enabledExpanseImagePill_once != -1) {
    dispatch_once(&enabledExpanseImagePill_once, block);
  }
  return (UIImage *)(id)enabledExpanseImagePill_sBehavior;
}

void __39__CKUIBehavior_enabledExpanseImagePill__block_invoke(uint64_t a1)
{
  uint64_t v1 = objc_msgSend(*(id *)(a1 + 32), "imageNamed:pointSize:insets:", @"shareplay", 18.0, *MEMORY[0x1E4F437F8], *(double *)(MEMORY[0x1E4F437F8] + 8), *(double *)(MEMORY[0x1E4F437F8] + 16), *(double *)(MEMORY[0x1E4F437F8] + 24));
  uint64_t v2 = (void *)enabledExpanseImagePill_sBehavior;
  enabledExpanseImagePill_sBehavior = v1;
}

- (NSString)navBarInfoImageName
{
  if (navBarInfoImageName_once != -1) {
    dispatch_once(&navBarInfoImageName_once, &__block_literal_global_229);
  }
  uint64_t v2 = (void *)navBarInfoImageName_sBehavior;

  return (NSString *)v2;
}

void __35__CKUIBehavior_navBarInfoImageName__block_invoke()
{
  uint64_t v0 = (void *)navBarInfoImageName_sBehavior;
  navBarInfoImageName_sBehavior = @"info.circle.fill";
}

- (id)navBarExpanseImageName
{
  if (navBarExpanseImageName_once != -1) {
    dispatch_once(&navBarExpanseImageName_once, &__block_literal_global_234);
  }
  uint64_t v2 = (void *)navBarExpanseImageName_sBehavior;

  return v2;
}

void __38__CKUIBehavior_navBarExpanseImageName__block_invoke()
{
  uint64_t v0 = (void *)navBarExpanseImageName_sBehavior;
  navBarExpanseImageName_sBehavior = @"person.2.circle.fill";
}

- (UIImage)navBarInfoImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __31__CKUIBehavior_navBarInfoImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (navBarInfoImage_once != -1) {
    dispatch_once(&navBarInfoImage_once, block);
  }
  return (UIImage *)(id)navBarInfoImage_sBehavior;
}

void __31__CKUIBehavior_navBarInfoImage__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v5 = [v2 navBarInfoImageName];
  [*(id *)(a1 + 32) navbarButtonImagePointSize];
  uint64_t v3 = objc_msgSend(v2, "imageNamed:pointSize:insets:", v5);
  id v4 = (void *)navBarInfoImage_sBehavior;
  navBarInfoImage_sBehavior = v3;
}

- (UIImage)navbarJoinPillVideoImage
{
  if (navbarJoinPillVideoImage_once != -1) {
    dispatch_once(&navbarJoinPillVideoImage_once, &__block_literal_global_236);
  }
  uint64_t v2 = (void *)navbarJoinPillVideoImage_sBehavior;

  return (UIImage *)v2;
}

void __40__CKUIBehavior_navbarJoinPillVideoImage__block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:weight:", *MEMORY[0x1E4F438C0], *MEMORY[0x1E4FB09B8]);
  uint64_t v1 = [MEMORY[0x1E4F42A98] configurationWithFont:v0 scale:1];
  uint64_t v2 = [MEMORY[0x1E4F42A80] systemImageNamed:@"video.fill" withConfiguration:v1];
  uint64_t v3 = [v2 imageWithRenderingMode:2];

  id v4 = (void *)navbarJoinPillVideoImage_sBehavior;
  navbarJoinPillVideoImage_sBehavior = v3;
}

- (UIImage)navbarJoinPillAudioImage
{
  if (navbarJoinPillAudioImage_once != -1) {
    dispatch_once(&navbarJoinPillAudioImage_once, &__block_literal_global_241);
  }
  uint64_t v2 = (void *)navbarJoinPillAudioImage_sBehavior;

  return (UIImage *)v2;
}

void __40__CKUIBehavior_navbarJoinPillAudioImage__block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:weight:", *MEMORY[0x1E4F438C0], *MEMORY[0x1E4FB09B8]);
  uint64_t v1 = [MEMORY[0x1E4F42A98] configurationWithFont:v0 scale:1];
  uint64_t v2 = [MEMORY[0x1E4F42A80] systemImageNamed:@"phone.fill" withConfiguration:v1];
  uint64_t v3 = [v2 imageWithRenderingMode:2];

  id v4 = (void *)navbarJoinPillAudioImage_sBehavior;
  navbarJoinPillAudioImage_sBehavior = v3;
}

- (UIImage)navbarJoinPillSharePlayImage
{
  if (navbarJoinPillSharePlayImage_once != -1) {
    dispatch_once(&navbarJoinPillSharePlayImage_once, &__block_literal_global_243);
  }
  uint64_t v2 = (void *)navbarJoinPillSharePlayImage_sBehavior;

  return (UIImage *)v2;
}

void __44__CKUIBehavior_navbarJoinPillSharePlayImage__block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:weight:", *MEMORY[0x1E4F438C0], *MEMORY[0x1E4FB09B8]);
  uint64_t v1 = [MEMORY[0x1E4F42A98] configurationWithFont:v0 scale:1];
  uint64_t v2 = [MEMORY[0x1E4F42A80] systemImageNamed:@"shareplay" withConfiguration:v1];
  uint64_t v3 = [v2 imageWithRenderingMode:2];

  id v4 = (void *)navbarJoinPillSharePlayImage_sBehavior;
  navbarJoinPillSharePlayImage_sBehavior = v3;
}

- (id)imageNamed:(id)a3 pointSize:(double)a4 insets:(UIEdgeInsets)a5
{
  double right = a5.right;
  double bottom = a5.bottom;
  double left = a5.left;
  double top = a5.top;
  NSComparisonResult v10 = (void *)MEMORY[0x1E4F42A98];
  id v11 = a3;
  char v12 = [v10 configurationWithPointSize:a4];
  uint64_t v13 = [MEMORY[0x1E4F42A80] systemImageNamed:v11];

  double v14 = [v13 imageWithSymbolConfiguration:v12];

  double v15 = objc_msgSend(v14, "imageWithContentInsets:", top, left, bottom, right);

  return v15;
}

- (id)imageNamed:(id)a3 pointSize:(double)a4 insets:(UIEdgeInsets)a5 color:(id)a6
{
  double right = a5.right;
  double bottom = a5.bottom;
  double left = a5.left;
  double top = a5.top;
  id v13 = a6;
  double v14 = -[CKUIBehavior imageNamed:pointSize:insets:](self, "imageNamed:pointSize:insets:", a3, a4, top, left, bottom, right);
  double v15 = [v14 imageWithRenderingMode:2];
  double v16 = [v15 ckImageWithTintColor:v13];

  return v16;
}

- (UIImage)disabledFacetimeAudioImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __42__CKUIBehavior_disabledFacetimeAudioImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (disabledFacetimeAudioImage_once != -1) {
    dispatch_once(&disabledFacetimeAudioImage_once, block);
  }
  return (UIImage *)(id)disabledFacetimeAudioImage_sBehavior;
}

void __42__CKUIBehavior_disabledFacetimeAudioImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 navbarButtonImagePointSize];
  uint64_t v2 = objc_msgSend(v1, "imageNamed:pointSize:insets:", @"phone.circle");
  uint64_t v3 = [v2 imageWithRenderingMode:2];
  id v4 = [MEMORY[0x1E4F428B8] systemMidGrayColor];
  uint64_t v5 = [v3 _flatImageWithColor:v4];

  double v6 = (void *)disabledFacetimeAudioImage_sBehavior;
  disabledFacetimeAudioImage_sBehavior = v5;
}

- (UIImage)disabledFacetimeVideoImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __42__CKUIBehavior_disabledFacetimeVideoImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (disabledFacetimeVideoImage_once != -1) {
    dispatch_once(&disabledFacetimeVideoImage_once, block);
  }
  return (UIImage *)(id)disabledFacetimeVideoImage_sBehavior;
}

void __42__CKUIBehavior_disabledFacetimeVideoImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 navbarButtonImagePointSize];
  uint64_t v2 = objc_msgSend(v1, "imageNamed:pointSize:insets:", @"video.circle");
  uint64_t v3 = [v2 imageWithRenderingMode:2];
  id v4 = [MEMORY[0x1E4F428B8] systemMidGrayColor];
  uint64_t v5 = [v3 _flatImageWithColor:v4];

  double v6 = (void *)disabledFacetimeVideoImage_sBehavior;
  disabledFacetimeVideoImage_sBehavior = v5;
}

- (BOOL)_isVerticallyCompact
{
  uint64_t v2 = [MEMORY[0x1E4F42D90] mainScreen];
  [v2 bounds];
  BOOL v3 = _UIUserInterfaceSizeClassForHeight() == 1;

  return v3;
}

- (double)navigationBarDefaultHeight
{
  if ([(CKUIBehavior *)self contactPhotosEnabled])
  {
    BOOL v3 = [MEMORY[0x1E4F42D90] mainScreen];
    [v3 _referenceBounds];
    if (v4 <= 320.0
      || [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory]|| [(CKUIBehavior *)self _isVerticallyCompact])
    {
      [(CKUIBehavior *)self minNavigationBarHeightValue];
    }
    else
    {
      [(CKUIBehavior *)self maxNavigationBarHeightValue];
    }
    double v6 = v5;

    return v6;
  }
  else
  {
    [(CKUIBehavior *)self minNavigationBarHeightValue];
  }
  return result;
}

+ (id)orderedContentSizeCategories
{
  if (orderedContentSizeCategories_onceToken != -1) {
    dispatch_once(&orderedContentSizeCategories_onceToken, &__block_literal_global_252);
  }
  uint64_t v2 = (void *)orderedContentSizeCategories__contentSizeCategories;

  return v2;
}

void __44__CKUIBehavior_orderedContentSizeCategories__block_invoke()
{
  v8[12] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F437C8];
  v8[0] = *MEMORY[0x1E4F437A8];
  v8[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4F437B0];
  v8[2] = *MEMORY[0x1E4F437B8];
  v8[3] = v1;
  uint64_t v2 = *MEMORY[0x1E4F43798];
  v8[4] = *MEMORY[0x1E4F437A0];
  v8[5] = v2;
  uint64_t v3 = *MEMORY[0x1E4F43780];
  v8[6] = *MEMORY[0x1E4F43790];
  v8[7] = v3;
  uint64_t v4 = *MEMORY[0x1E4F43770];
  v8[8] = *MEMORY[0x1E4F43778];
  v8[9] = v4;
  uint64_t v5 = *MEMORY[0x1E4F43760];
  v8[10] = *MEMORY[0x1E4F43768];
  v8[11] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:12];
  double v7 = (void *)orderedContentSizeCategories__contentSizeCategories;
  orderedContentSizeCategories__contentSizeCategories = v6;
}

+ (BOOL)isPreferredContentSizeCategoryGreaterThanOrEqualTo:(id)a3
{
  id v3 = a3;
  uint64_t v4 = +[CKUIBehavior orderedContentSizeCategories];
  uint64_t v5 = CKPreferredContentSizeCategory();
  uint64_t v6 = [v4 indexOfObject:v5];
  uint64_t v7 = [v4 indexOfObject:v3];

  return v6 >= v7;
}

+ (id)fontWithStyle:(id)a3 adjustedForMaxSizeCategory:(id)a4
{
  id v6 = a4;
  uint64_t v7 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", a3);
  int v8 = CKPreferredContentSizeCategory();
  BOOL v9 = [a1 orderedContentSizeCategories];
  unint64_t v10 = [v9 indexOfObject:v8];
  id v11 = [a1 orderedContentSizeCategories];
  unint64_t v12 = [v11 indexOfObject:v6];

  if (v10 > v12)
  {
    id v13 = [MEMORY[0x1E4F42F80] traitCollectionWithPreferredContentSizeCategory:v6];
    uint64_t v14 = [v7 _fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:v13];

    uint64_t v7 = (void *)v14;
  }

  return v7;
}

+ (id)font:(id)a3 adjustedForMaxSizeCategory:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  int v8 = CKPreferredContentSizeCategory();
  BOOL v9 = [a1 orderedContentSizeCategories];
  unint64_t v10 = [v9 indexOfObject:v8];
  id v11 = [a1 orderedContentSizeCategories];
  unint64_t v12 = [v11 indexOfObject:v7];

  if (v10 > v12)
  {
    id v13 = [MEMORY[0x1E4F42F80] traitCollectionWithPreferredContentSizeCategory:v7];
    uint64_t v14 = [v6 _fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:v13];

    id v6 = (id)v14;
  }

  return v6;
}

- (double)transcriptHeaderViewMaxRows
{
  if (transcriptHeaderViewMaxRows_once != -1) {
    dispatch_once(&transcriptHeaderViewMaxRows_once, &__block_literal_global_256_0);
  }
  return *(double *)&transcriptHeaderViewMaxRows_sBehavior;
}

void __43__CKUIBehavior_transcriptHeaderViewMaxRows__block_invoke()
{
  transcriptHeaderViewMaxRows_sBehavior = 0x4012000000000000;
}

- (unint64_t)supportedInterfaceOrientations
{
  if (supportedInterfaceOrientations_once != -1) {
    dispatch_once(&supportedInterfaceOrientations_once, &__block_literal_global_258);
  }
  if (supportedInterfaceOrientations_sBehavior) {
    return 26;
  }
  else {
    return 0;
  }
}

void __46__CKUIBehavior_supportedInterfaceOrientations__block_invoke()
{
  supportedInterfaceOrientations_sBehavior = 1;
}

- (unint64_t)messageCountToLoadForPinnedConversationsIfNecessary
{
  if (messageCountToLoadForPinnedConversationsIfNecessary_once != -1) {
    dispatch_once(&messageCountToLoadForPinnedConversationsIfNecessary_once, &__block_literal_global_260);
  }
  if (messageCountToLoadForPinnedConversationsIfNecessary_sBehavior) {
    return 10;
  }
  else {
    return 0;
  }
}

void __67__CKUIBehavior_messageCountToLoadForPinnedConversationsIfNecessary__block_invoke()
{
  messageCountToLoadForPinnedConversationsIfNecessary_sBehavior = 1;
}

- (BOOL)shouldSizeInitialViewingMessageCount
{
  if (shouldSizeInitialViewingMessageCount_once != -1) {
    dispatch_once(&shouldSizeInitialViewingMessageCount_once, &__block_literal_global_270);
  }
  return 0;
}

- (unint64_t)defaultConversationLoadMoreCount
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __48__CKUIBehavior_defaultConversationLoadMoreCount__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (defaultConversationLoadMoreCount_once != -1) {
    dispatch_once(&defaultConversationLoadMoreCount_once, block);
  }
  return defaultConversationLoadMoreCount_sBehavior;
}

uint64_t __48__CKUIBehavior_defaultConversationLoadMoreCount__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _defaultConversationLoadMoreCount];
  defaultConversationLoadMoreCount_sBehavior = result;
  return result;
}

- (unint64_t)_defaultConversationLoadMoreCount
{
  return 50;
}

- (unint64_t)minBalloonsForTranscriptHeight
{
  id v3 = [MEMORY[0x1E4F42D90] mainScreen];
  [v3 bounds];
  double v6 = fmax(v4, v5);

  double v7 = v6 + -84.0;
  [(CKUIBehavior *)self topTranscriptSpace];
  double v9 = v8;
  [(CKUIBehavior *)self balloonMaskSizeWithTailShape:0 isMultiline:0];
  double v11 = v10;
  [(CKUIBehavior *)self balloonBalloonTranscriptSpace:2];
  double v13 = v12;
  [(CKUIBehavior *)self bottomTranscriptSpace];
  return vcvtpd_u64_f64((v7 - (v9 + v14 - v13)) / (v11 + v13));
}

- (unint64_t)defaultConversationSummaryMessageCount
{
  if (defaultConversationSummaryMessageCount_once != -1) {
    dispatch_once(&defaultConversationSummaryMessageCount_once, &__block_literal_global_272);
  }
  return defaultConversationSummaryMessageCount_sBehavior;
}

void __54__CKUIBehavior_defaultConversationSummaryMessageCount__block_invoke()
{
  defaultConversationSummaryMessageCount_sBehavior = 1;
}

- (unint64_t)initialConversationSizingMessageCount
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __53__CKUIBehavior_initialConversationSizingMessageCount__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (initialConversationSizingMessageCount_once != -1) {
    dispatch_once(&initialConversationSizingMessageCount_once, block);
  }
  return initialConversationSizingMessageCount_sBehavior;
}

uint64_t __53__CKUIBehavior_initialConversationSizingMessageCount__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) minBalloonsForTranscriptHeight];
  initialConversationSizingMessageCount_sBehavior = result;
  return result;
}

- (unint64_t)conversationCacheSize
{
  if (conversationCacheSize_once != -1) {
    dispatch_once(&conversationCacheSize_once, &__block_literal_global_274_0);
  }
  return conversationCacheSize_sBehavior;
}

void __37__CKUIBehavior_conversationCacheSize__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42948] currentDevice];
  uint64_t v1 = [v0 _graphicsQuality];

  uint64_t v2 = 8;
  if (v1 == 10) {
    uint64_t v2 = 4;
  }
  conversationCacheSize_sBehavior = v2;
}

- (unint64_t)commonRepliesLoadLimit
{
  if (commonRepliesLoadLimit_once != -1) {
    dispatch_once(&commonRepliesLoadLimit_once, &__block_literal_global_276);
  }
  if (commonRepliesLoadLimit_sBehavior) {
    return 3;
  }
  else {
    return 0;
  }
}

void __38__CKUIBehavior_commonRepliesLoadLimit__block_invoke()
{
  commonRepliesLoadLimit_sBehavior = 1;
}

- (NSDateFormatter)timestampDateFormatter
{
  return (NSDateFormatter *)+[CKDateUtilities timestampDateFormatter];
}

- (NSDateFormatter)locationRelativeDateFormatter
{
  if (locationRelativeDateFormatter_once != -1) {
    dispatch_once(&locationRelativeDateFormatter_once, &__block_literal_global_279_0);
  }
  uint64_t v2 = (void *)locationRelativeDateFormatter_sBehavior;

  return (NSDateFormatter *)v2;
}

void __45__CKUIBehavior_locationRelativeDateFormatter__block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v0 setTimeStyle:0];
  [v0 setDateStyle:1];
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1CA20], "__ck_currentLocale");
  [v0 setLocale:v1];

  uint64_t v2 = (void *)locationRelativeDateFormatter_sBehavior;
  locationRelativeDateFormatter_sBehavior = (uint64_t)v0;
}

- (BOOL)canAccessContacts
{
  if (canAccessContacts_once != -1) {
    dispatch_once(&canAccessContacts_once, &__block_literal_global_283_0);
  }
  return canAccessContacts_sBehavior;
}

uint64_t __33__CKUIBehavior_canAccessContacts__block_invoke()
{
  uint64_t result = [MEMORY[0x1E4F1B980] authorizationStatusForEntityType:0];
  canAccessContacts_sBehavior = result == 3;
  return result;
}

- (BOOL)canAccessPhotos
{
  if (canAccessPhotos_once != -1) {
    dispatch_once(&canAccessPhotos_once, &__block_literal_global_286);
  }
  return canAccessPhotos_sBehavior;
}

uint64_t __31__CKUIBehavior_canAccessPhotos__block_invoke()
{
  id v0 = (void *)sSharedBehaviors_block_invoke___ALAssetsLibraryClass;
  if (!sSharedBehaviors_block_invoke___ALAssetsLibraryClass)
  {
    id v0 = (void *)MEMORY[0x192FBA860](@"ALAssetsLibrary", @"AssetsLibrary");
    sSharedBehaviors_block_invoke___ALAssetsLibraryClass = (uint64_t)v0;
  }
  uint64_t result = [v0 authorizationStatus];
  canAccessPhotos_sBehavior = result == 3;
  return result;
}

- (double)presentationControllerWindowLevel
{
  if (presentationControllerWindowLevel_once != -1) {
    dispatch_once(&presentationControllerWindowLevel_once, &__block_literal_global_294_0);
  }
  return *(double *)&presentationControllerWindowLevel_sBehavior;
}

double __49__CKUIBehavior_presentationControllerWindowLevel__block_invoke()
{
  double result = *MEMORY[0x1E4F43C70] + 2.0;
  *(double *)&presentationControllerWindowLevel_sBehavior = result;
  return result;
}

- (double)videoControllerWindowLevel
{
  if (videoControllerWindowLevel_once != -1) {
    dispatch_once(&videoControllerWindowLevel_once, &__block_literal_global_296_0);
  }
  return *(double *)&videoControllerWindowLevel_sBehavior;
}

double __42__CKUIBehavior_videoControllerWindowLevel__block_invoke()
{
  double result = *MEMORY[0x1E4F43C70] + 2.0;
  *(double *)&videoControllerWindowLevel_sBehavior = result;
  return result;
}

- (double)actionMenuWindowLevel
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__CKUIBehavior_actionMenuWindowLevel__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (actionMenuWindowLevel_once != -1) {
    dispatch_once(&actionMenuWindowLevel_once, block);
  }
  return *(double *)&actionMenuWindowLevel_sBehavior;
}

double __37__CKUIBehavior_actionMenuWindowLevel__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) videoControllerWindowLevel];
  double result = v1 + 1.0;
  actionMenuWindowLevel_sBehavior = *(void *)&result;
  return result;
}

- (BOOL)phoneIsAllowlisted
{
  return 1;
}

- (BOOL)faceTimeVideoIsAllowlisted
{
  return 1;
}

- (BOOL)faceTimeAudioIsAllowlisted
{
  return 1;
}

- (BOOL)mailIsAllowlisted
{
  return 1;
}

- (BOOL)cameraIsAllowlisted
{
  return [MEMORY[0x1E4F42A90] isSourceTypeAvailable:1];
}

- (BOOL)photosIsAllowlisted
{
  if ([MEMORY[0x1E4F42A90] isSourceTypeAvailable:0]) {
    return 1;
  }
  id v3 = (void *)MEMORY[0x1E4F42A90];

  return [v3 isSourceTypeAvailable:2];
}

- (unint64_t)maxNumLiveBrowserViewsToKeepInViewHierarchy
{
  if (maxNumLiveBrowserViewsToKeepInViewHierarchy_once != -1) {
    dispatch_once(&maxNumLiveBrowserViewsToKeepInViewHierarchy_once, &__block_literal_global_304_1);
  }
  return maxNumLiveBrowserViewsToKeepInViewHierarchy_sBehavior;
}

void __59__CKUIBehavior_maxNumLiveBrowserViewsToKeepInViewHierarchy__block_invoke()
{
  maxNumLiveBrowserViewsToKeepInViewHierarchy_sBehavior = 1;
}

- (unint64_t)maxNumberOfItemsPerAppDrawerPage
{
  if (maxNumberOfItemsPerAppDrawerPage_once != -1) {
    dispatch_once(&maxNumberOfItemsPerAppDrawerPage_once, &__block_literal_global_306);
  }
  if (maxNumberOfItemsPerAppDrawerPage_sBehavior) {
    return 12;
  }
  else {
    return 0;
  }
}

void __48__CKUIBehavior_maxNumberOfItemsPerAppDrawerPage__block_invoke()
{
  maxNumberOfItemsPerAppDrawerPage_sBehavior = 1;
}

- (CGSize)appIconSize
{
  if (appIconSize_once != -1) {
    dispatch_once(&appIconSize_once, &__block_literal_global_308_0);
  }
  double v2 = *(double *)&appIconSize_sBehavior_0;
  double v3 = *(double *)&appIconSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __27__CKUIBehavior_appIconSize__block_invoke()
{
  id v0 = [MEMORY[0x1E4F42948] currentDevice];
  uint64_t v1 = [v0 userInterfaceIdiom];

  if (CKIsBigIdiom_onceToken != -1) {
    dispatch_once(&CKIsBigIdiom_onceToken, &__block_literal_global_5993);
  }
  if (CKIsBigIdiom_sBig)
  {
    double v2 = 74.0;
    double v3 = 55.0;
  }
  else if (v1)
  {
    double v4 = [MEMORY[0x1E4F42948] currentDevice];
    uint64_t v5 = [v4 userInterfaceIdiom];

    double v3 = 50.0;
    double v2 = 0.0;
    if ((v5 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
      double v2 = 67.0;
    }
    else {
      double v3 = 0.0;
    }
  }
  else
  {
    double v2 = 60.0;
    double v3 = 45.0;
  }
  appIconSize_sBehavior_0 = *(void *)&v2;
  appIconSize_sBehavior_1 = *(void *)&v3;
}

- (CGSize)iMessageAppIconSize
{
  if (iMessageAppIconSize_once != -1) {
    dispatch_once(&iMessageAppIconSize_once, &__block_literal_global_310);
  }
  double v2 = *(double *)&iMessageAppIconSize_sBehavior_0;
  double v3 = *(double *)&iMessageAppIconSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __35__CKUIBehavior_iMessageAppIconSize__block_invoke()
{
  iMessageAppIconSize_sBehavior_0 = 0x4040000000000000;
  iMessageAppIconSize_sBehavior_1 = 0x4038000000000000;
}

- (BOOL)showMMSSetup
{
  if (showMMSSetup_once != -1) {
    dispatch_once(&showMMSSetup_once, &__block_literal_global_312);
  }
  return showMMSSetup_sBehavior;
}

void __28__CKUIBehavior_showMMSSetup__block_invoke()
{
  showMMSSetup_sBehavior = 1;
}

- (double)maxTranscriptPortraitHeight
{
  if (maxTranscriptPortraitHeight_once != -1) {
    dispatch_once(&maxTranscriptPortraitHeight_once, &__block_literal_global_316_0);
  }
  return *(double *)&maxTranscriptPortraitHeight_sBehavior;
}

void __43__CKUIBehavior_maxTranscriptPortraitHeight__block_invoke()
{
  id v0 = [MEMORY[0x1E4F42D90] mainScreen];
  [v0 _referenceBounds];
  double v2 = v1;
  if (CKIsGeneralIdiom_onceToken != -1) {
    dispatch_once(&CKIsGeneralIdiom_onceToken, &__block_literal_global_5991);
  }
  if (CKIsGeneralIdiom_sGeneralIdiom)
  {
    double v3 = [MEMORY[0x1E4F42948] currentDevice];
    uint64_t v4 = [v3 userInterfaceIdiom];

    double v5 = 0.0;
    if ((v4 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
      double v5 = 20.0;
    }
  }
  else
  {
    double v5 = 20.0;
  }
  double v6 = v2 * 0.5 - v5;

  maxTranscriptPortraitHeight_sBehavior = *(void *)&v6;
}

- (UIEdgeInsets)landscapeKeyboardInsets
{
  if (landscapeKeyboardInsets_once != -1) {
    dispatch_once(&landscapeKeyboardInsets_once, &__block_literal_global_318);
  }
  double v2 = *(double *)&landscapeKeyboardInsets_sBehavior_0;
  double v3 = *(double *)&landscapeKeyboardInsets_sBehavior_1;
  double v4 = *(double *)&landscapeKeyboardInsets_sBehavior_2;
  double v5 = *(double *)&landscapeKeyboardInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __39__CKUIBehavior_landscapeKeyboardInsets__block_invoke()
{
  if (CKIsRunningInMessagesNotificationExtension()
    || ([MEMORY[0x1E4F43058] keyWindow],
        id v0 = objc_claimAutoreleasedReturnValue(),
        [v0 traitCollection],
        double v1 = objc_claimAutoreleasedReturnValue(),
        uint64_t v2 = [v1 horizontalSizeClass],
        v1,
        v0,
        v2 != 2))
  {
    double v12 = (void *)MEMORY[0x1E4F42B20];
    double v13 = [MEMORY[0x1E4F42B30] sharedInputModeController];
    double v14 = [v13 currentInputMode];
    [v12 deviceSpecificPaddingForInterfaceOrientation:4 inputMode:v14];
    double v16 = v15;
    double v18 = v17;
    double v20 = v19;
    double v22 = v21;

    double v23 = +[CKUIBehavior sharedBehaviors];
    [v23 entryViewHorizontalCoverInsets];
    double v25 = v24;
    double v27 = v26;
    double v29 = v28;
    double v31 = v30;

    double v5 = v16 - v25;
    double v7 = v18 - v27;
    double v9 = v20 - v29;
    double v11 = v22 - v31;
  }
  else
  {
    double v3 = [MEMORY[0x1E4F43058] keyWindow];
    [v3 safeAreaInsets];
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
  }
  landscapeKeyboardInsets_sBehavior_0 = *(void *)&v5;
  landscapeKeyboardInsets_sBehavior_1 = *(void *)&v7;
  landscapeKeyboardInsets_sBehavior_2 = *(void *)&v9;
  landscapeKeyboardInsets_sBehavior_3 = *(void *)&v11;
}

- (BOOL)ckShouldUpdatelargeTextTopConversationListSpace
{
  return 0;
}

- (double)largeTextTopConversationListSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)largeTextTopConversationListSpace_sContentSizeCategory_largeTextTopConversationListSpace, v3);
  if (-[CKUIBehavior ckShouldUpdatelargeTextTopConversationListSpace](self, "ckShouldUpdatelargeTextTopConversationListSpace")|| v10|| largeTextTopConversationListSpace_sIsBoldTextEnabled_largeTextTopConversationListSpace != IsBoldTextEnabled|| (uint64_t v11 = largeTextTopConversationListSpace_sTextFontSize_largeTextTopConversationListSpace, *(double *)&largeTextTopConversationListSpace_sTextFontSize_largeTextTopConversationListSpace != v5)|| (uint64_t v11 = largeTextTopConversationListSpace_sCustomTextFontSize_largeTextTopConversationListSpace, *(double *)&largeTextTopConversationListSpace_sCustomTextFontSize_largeTextTopConversationListSpace != v6)|| (objc_msgSend((id)largeTextTopConversationListSpace_sCustomTextFontName_largeTextTopConversationListSpace, "isEqualToString:", v9, *(double *)&largeTextTopConversationListSpace_sCustomTextFontSize_largeTextTopConversationListSpace) & 1) == 0)
  {
    double v12 = [(CKUIBehavior *)self conversationListSenderFont];
    [v12 pointSize];
    double v14 = v13 * 0.226415094;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&largeTextTopConversationListSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&largeTextTopConversationListSpace_sContentSizeCategory_largeTextTopConversationListSpace, v3);
    largeTextTopConversationListSpace_sIsBoldTextEnabled_largeTextTopConversationListSpace = IsBoldTextEnabled;
    largeTextTopConversationListSpace_sTextFontSize_largeTextTopConversationListSpace = *(void *)&v5;
    largeTextTopConversationListSpace_sCustomTextFontSize_largeTextTopConversationListSpace = *(void *)&v6;
    objc_storeStrong((id *)&largeTextTopConversationListSpace_sCustomTextFontName_largeTextTopConversationListSpace, v8);
  }
  double v16 = *(double *)&largeTextTopConversationListSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateaccessibilityBottomConversationListSpace
{
  return 0;
}

- (double)accessibilityBottomConversationListSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)accessibilityBottomConversationListSpace_sContentSizeCategory_accessibilityBottomConversationListSpace, v3);
  if (-[CKUIBehavior ckShouldUpdateaccessibilityBottomConversationListSpace](self, "ckShouldUpdateaccessibilityBottomConversationListSpace")|| v10|| accessibilityBottomConversationListSpace_sIsBoldTextEnabled_accessibilityBottomConversationListSpace != IsBoldTextEnabled|| (uint64_t v11 = accessibilityBottomConversationListSpace_sTextFontSize_accessibilityBottomConversationListSpace, *(double *)&accessibilityBottomConversationListSpace_sTextFontSize_accessibilityBottomConversationListSpace != v5)|| (uint64_t v11 = accessibilityBottomConversationListSpace_sCustomTextFontSize_accessibilityBottomConversationListSpace, *(double *)&accessibilityBottomConversationListSpace_sCustomTextFontSize_accessibilityBottomConversationListSpace != v6)|| (objc_msgSend((id)accessibilityBottomConversationListSpace_sCustomTextFontName_accessibilityBottomConversationListSpace, "isEqualToString:", v9, *(double *)&accessibilityBottomConversationListSpace_sCustomTextFontSize_accessibilityBottomConversationListSpace) & 1) == 0)
  {
    double v12 = [(CKUIBehavior *)self conversationListDateFont];
    [v12 pointSize];
    double v14 = v13 * 0.448979592;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&accessibilityBottomConversationListSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&accessibilityBottomConversationListSpace_sContentSizeCategory_accessibilityBottomConversationListSpace, v3);
    accessibilityBottomConversationListSpace_sIsBoldTextEnabled_accessibilityBottomConversationListSpace = IsBoldTextEnabled;
    accessibilityBottomConversationListSpace_sTextFontSize_accessibilityBottomConversationListSpace = *(void *)&v5;
    accessibilityBottomConversationListSpace_sCustomTextFontSize_accessibilityBottomConversationListSpace = *(void *)&v6;
    objc_storeStrong((id *)&accessibilityBottomConversationListSpace_sCustomTextFontName_accessibilityBottomConversationListSpace, v8);
  }
  double v16 = *(double *)&accessibilityBottomConversationListSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatesummaryDateConversationListSpace
{
  return 0;
}

- (double)summaryDateConversationListSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)summaryDateConversationListSpace_sContentSizeCategory_summaryDateConversationListSpace, v3);
  if (-[CKUIBehavior ckShouldUpdatesummaryDateConversationListSpace](self, "ckShouldUpdatesummaryDateConversationListSpace")|| v10|| summaryDateConversationListSpace_sIsBoldTextEnabled_summaryDateConversationListSpace != IsBoldTextEnabled|| *(double *)&summaryDateConversationListSpace_sTextFontSize_summaryDateConversationListSpace != v5|| *(double *)&summaryDateConversationListSpace_sCustomTextFontSize_summaryDateConversationListSpace != v6|| (objc_msgSend((id)summaryDateConversationListSpace_sCustomTextFontName_summaryDateConversationListSpace, "isEqualToString:", v9, *(double *)&summaryDateConversationListSpace_sCustomTextFontSize_summaryDateConversationListSpace) & 1) == 0)
  {
    objc_storeStrong((id *)&summaryDateConversationListSpace_sContentSizeCategory_summaryDateConversationListSpace, v3);
    summaryDateConversationListSpace_sIsBoldTextEnabled_summaryDateConversationListSpace = IsBoldTextEnabled;
    summaryDateConversationListSpace_sTextFontSize_summaryDateConversationListSpace = *(void *)&v5;
    summaryDateConversationListSpace_sCustomTextFontSize_summaryDateConversationListSpace = *(void *)&v6;
    objc_storeStrong((id *)&summaryDateConversationListSpace_sCustomTextFontName_summaryDateConversationListSpace, v8);
  }

  return 0.0;
}

- (BOOL)ckShouldUpdateconversationListCellBackgroundPadding
{
  return 0;
}

- (double)conversationListCellBackgroundPadding
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellBackgroundPadding_sContentSizeCategory_conversationListCellBackgroundPadding, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellBackgroundPadding](self, "ckShouldUpdateconversationListCellBackgroundPadding")|| v10|| conversationListCellBackgroundPadding_sIsBoldTextEnabled_conversationListCellBackgroundPadding != IsBoldTextEnabled|| *(double *)&conversationListCellBackgroundPadding_sTextFontSize_conversationListCellBackgroundPadding != v5|| *(double *)&conversationListCellBackgroundPadding_sCustomTextFontSize_conversationListCellBackgroundPadding != v6|| (objc_msgSend((id)conversationListCellBackgroundPadding_sCustomTextFontName_conversationListCellBackgroundPadding, "isEqualToString:", v9, *(double *)&conversationListCellBackgroundPadding_sCustomTextFontSize_conversationListCellBackgroundPadding) & 1) == 0)
  {
    objc_storeStrong((id *)&conversationListCellBackgroundPadding_sContentSizeCategory_conversationListCellBackgroundPadding, v3);
    conversationListCellBackgroundPadding_sIsBoldTextEnabled_conversationListCellBackgroundPadding = IsBoldTextEnabled;
    conversationListCellBackgroundPadding_sTextFontSize_conversationListCellBackgroundPadding = *(void *)&v5;
    conversationListCellBackgroundPadding_sCustomTextFontSize_conversationListCellBackgroundPadding = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellBackgroundPadding_sCustomTextFontName_conversationListCellBackgroundPadding, v8);
  }

  return 0.0;
}

- (double)conversationListTableMarginWidth
{
  if (conversationListTableMarginWidth_once != -1) {
    dispatch_once(&conversationListTableMarginWidth_once, &__block_literal_global_323);
  }
  return *(double *)&conversationListTableMarginWidth_sBehavior;
}

void __48__CKUIBehavior_conversationListTableMarginWidth__block_invoke()
{
  conversationListTableMarginWidth_sBehavior = 0x403C000000000000;
}

- (double)conversationListEditingTableMarginWidth
{
  if (conversationListEditingTableMarginWidth_once != -1) {
    dispatch_once(&conversationListEditingTableMarginWidth_once, &__block_literal_global_325_1);
  }
  return *(double *)&conversationListEditingTableMarginWidth_sBehavior;
}

void __55__CKUIBehavior_conversationListEditingTableMarginWidth__block_invoke()
{
  conversationListEditingTableMarginWidth_sBehavior = 0x404B000000000000;
}

- (double)conversationListComposeButtonSpacing
{
  if (conversationListComposeButtonSpacing_once != -1) {
    dispatch_once(&conversationListComposeButtonSpacing_once, &__block_literal_global_327);
  }
  return *(double *)&conversationListComposeButtonSpacing_sBehavior;
}

void __52__CKUIBehavior_conversationListComposeButtonSpacing__block_invoke()
{
  conversationListComposeButtonSpacing_sBehavior = 0x4038000000000000;
}

- (double)conversationListButtonToTitleSpacing
{
  if (conversationListButtonToTitleSpacing_once != -1) {
    dispatch_once(&conversationListButtonToTitleSpacing_once, &__block_literal_global_329);
  }
  return *(double *)&conversationListButtonToTitleSpacing_sBehavior;
}

void __52__CKUIBehavior_conversationListButtonToTitleSpacing__block_invoke()
{
  conversationListButtonToTitleSpacing_sBehavior = 0x4032000000000000;
}

- (int64_t)conversationListLayoutPinnedSectionNumberOfColumns
{
  if (conversationListLayoutPinnedSectionNumberOfColumns_once != -1) {
    dispatch_once(&conversationListLayoutPinnedSectionNumberOfColumns_once, &__block_literal_global_331);
  }
  if (conversationListLayoutPinnedSectionNumberOfColumns_sBehavior) {
    return 3;
  }
  else {
    return 0;
  }
}

void __66__CKUIBehavior_conversationListLayoutPinnedSectionNumberOfColumns__block_invoke()
{
  conversationListLayoutPinnedSectionNumberOfColumns_sBehavior = 1;
}

- (double)conversationListPinnedCellSelectedBackgroundCornerRadius
{
  if (conversationListPinnedCellSelectedBackgroundCornerRadius_once != -1) {
    dispatch_once(&conversationListPinnedCellSelectedBackgroundCornerRadius_once, &__block_literal_global_333);
  }
  return *(double *)&conversationListPinnedCellSelectedBackgroundCornerRadius_sBehavior;
}

void __72__CKUIBehavior_conversationListPinnedCellSelectedBackgroundCornerRadius__block_invoke()
{
  conversationListPinnedCellSelectedBackgroundCornerRadius_sBehavior = 0x4020000000000000;
}

- (UIEdgeInsets)conversationListPinnedCellTitleLabelVerticalPadding
{
  if (conversationListPinnedCellTitleLabelVerticalPadding_once != -1) {
    dispatch_once(&conversationListPinnedCellTitleLabelVerticalPadding_once, &__block_literal_global_335);
  }
  double v2 = *(double *)&conversationListPinnedCellTitleLabelVerticalPadding_sBehavior_0;
  double v3 = *(double *)&conversationListPinnedCellTitleLabelVerticalPadding_sBehavior_2;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v3;
  result.double left = v4;
  result.double top = v2;
  return result;
}

void __67__CKUIBehavior_conversationListPinnedCellTitleLabelVerticalPadding__block_invoke()
{
  conversationListPinnedCellTitleLabelVerticalPadding_sBehavior_0 = 0x4018000000000000;
  conversationListPinnedCellTitleLabelVerticalPadding_sBehavior_2 = 0x4020000000000000;
}

- (double)conversationListCellAdditionalLeftMarginWhenEditing
{
  if (conversationListCellAdditionalLeftMarginWhenEditing_once != -1) {
    dispatch_once(&conversationListCellAdditionalLeftMarginWhenEditing_once, &__block_literal_global_339_1);
  }
  return *(double *)&conversationListCellAdditionalLeftMarginWhenEditing_sBehavior;
}

void __67__CKUIBehavior_conversationListCellAdditionalLeftMarginWhenEditing__block_invoke()
{
  conversationListCellAdditionalLeftMarginWhenEditing_sBehavior = 0x403A000000000000;
}

- (double)conversationListCellAdditionalLeftMarginForAvatarView
{
  if (conversationListCellAdditionalLeftMarginForAvatarView_once != -1) {
    dispatch_once(&conversationListCellAdditionalLeftMarginForAvatarView_once, &__block_literal_global_341_0);
  }
  return 0.0;
}

- (double)conversationListCellLargeTextLeftMargin
{
  if (conversationListCellLargeTextLeftMargin_once != -1) {
    dispatch_once(&conversationListCellLargeTextLeftMargin_once, &__block_literal_global_343_0);
  }
  return *(double *)&conversationListCellLargeTextLeftMargin_sBehavior;
}

void __55__CKUIBehavior_conversationListCellLargeTextLeftMargin__block_invoke()
{
  conversationListCellLargeTextLeftMargin_sBehavior = 0x402E000000000000;
}

- (BOOL)ckShouldUpdateconversationListCellRightMargin
{
  return 0;
}

- (double)conversationListCellRightMargin
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellRightMargin_sContentSizeCategory_conversationListCellRightMargin, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellRightMargin](self, "ckShouldUpdateconversationListCellRightMargin")|| v10|| conversationListCellRightMargin_sIsBoldTextEnabled_conversationListCellRightMargin != IsBoldTextEnabled|| *(double *)&conversationListCellRightMargin_sTextFontSize_conversationListCellRightMargin != v5|| *(double *)&conversationListCellRightMargin_sCustomTextFontSize_conversationListCellRightMargin != v6|| (objc_msgSend((id)conversationListCellRightMargin_sCustomTextFontName_conversationListCellRightMargin, "isEqualToString:", v9, *(double *)&conversationListCellRightMargin_sCustomTextFontSize_conversationListCellRightMargin) & 1) == 0)
  {
    conversationListCellRightMargin_sBehavior = 0x4030000000000000;
    objc_storeStrong((id *)&conversationListCellRightMargin_sContentSizeCategory_conversationListCellRightMargin, v3);
    conversationListCellRightMargin_sIsBoldTextEnabled_conversationListCellRightMargin = IsBoldTextEnabled;
    conversationListCellRightMargin_sTextFontSize_conversationListCellRightMargin = *(void *)&v5;
    conversationListCellRightMargin_sCustomTextFontSize_conversationListCellRightMargin = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellRightMargin_sCustomTextFontName_conversationListCellRightMargin, v8);
  }
  double v11 = *(double *)&conversationListCellRightMargin_sBehavior;

  return v11;
}

- (double)conversationListCellLargeTextSenderSummaryInterspacing
{
  if (conversationListCellLargeTextSenderSummaryInterspacing_once != -1) {
    dispatch_once(&conversationListCellLargeTextSenderSummaryInterspacing_once, &__block_literal_global_345_0);
  }
  return 0.0;
}

- (double)conversationListCellTypingIndicatorScale
{
  if (conversationListCellTypingIndicatorScale_once != -1) {
    dispatch_once(&conversationListCellTypingIndicatorScale_once, &__block_literal_global_347_1);
  }
  return *(double *)&conversationListCellTypingIndicatorScale_sBehavior;
}

void __56__CKUIBehavior_conversationListCellTypingIndicatorScale__block_invoke()
{
  conversationListCellTypingIndicatorScale_sBehavior = 0x3FE999999999999ALL;
}

- (CGSize)transcriptTypingIndicatorDefaultSize
{
  if (transcriptTypingIndicatorDefaultSize_once != -1) {
    dispatch_once(&transcriptTypingIndicatorDefaultSize_once, &__block_literal_global_349_0);
  }
  double v2 = *(double *)&transcriptTypingIndicatorDefaultSize_sBehavior_0;
  double v3 = *(double *)&transcriptTypingIndicatorDefaultSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __52__CKUIBehavior_transcriptTypingIndicatorDefaultSize__block_invoke()
{
  transcriptTypingIndicatorDefaultSize_sBehavior_0 = 0x4053A00000000000;
  transcriptTypingIndicatorDefaultSize_sBehavior_1 = 0x4041800000000000;
}

- (CGRect)transcriptTypingIndicatorSmallBubbleFrame
{
  if (transcriptTypingIndicatorSmallBubbleFrame_once != -1) {
    dispatch_once(&transcriptTypingIndicatorSmallBubbleFrame_once, &__block_literal_global_351_1);
  }
  double v2 = *(double *)&transcriptTypingIndicatorSmallBubbleFrame_sBehavior_0;
  double v3 = *(double *)&transcriptTypingIndicatorSmallBubbleFrame_sBehavior_1;
  double v4 = *(double *)&transcriptTypingIndicatorSmallBubbleFrame_sBehavior_2;
  double v5 = *(double *)&transcriptTypingIndicatorSmallBubbleFrame_sBehavior_3;
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

void __57__CKUIBehavior_transcriptTypingIndicatorSmallBubbleFrame__block_invoke()
{
  transcriptTypingIndicatorSmallBubbleFrame_sBehavior_0 = 0x4000000000000000;
  transcriptTypingIndicatorSmallBubbleFrame_sBehavior_1 = 0x4041800000000000;
  transcriptTypingIndicatorSmallBubbleFrame_sBehavior_2 = 0x4016000000000000;
  transcriptTypingIndicatorSmallBubbleFrame_sBehavior_3 = 0x4016000000000000;
}

- (CGSize)transcriptTypingIndicatorMediumBubbleSize
{
  if (transcriptTypingIndicatorMediumBubbleSize_once != -1) {
    dispatch_once(&transcriptTypingIndicatorMediumBubbleSize_once, &__block_literal_global_353_0);
  }
  double v2 = *(double *)&transcriptTypingIndicatorMediumBubbleSize_sBehavior_0;
  double v3 = *(double *)&transcriptTypingIndicatorMediumBubbleSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __57__CKUIBehavior_transcriptTypingIndicatorMediumBubbleSize__block_invoke()
{
  transcriptTypingIndicatorMediumBubbleSize_sBehavior_0 = 0x4027000000000000;
  transcriptTypingIndicatorMediumBubbleSize_sBehavior_1 = 0x4027000000000000;
}

- (CGPoint)transcriptTypingIndicatorMediumBubbleOffset
{
  if (transcriptTypingIndicatorMediumBubbleOffset_once != -1) {
    dispatch_once(&transcriptTypingIndicatorMediumBubbleOffset_once, &__block_literal_global_355_0);
  }
  double v2 = *(double *)&transcriptTypingIndicatorMediumBubbleOffset_sBehavior_0;
  double v3 = *(double *)&transcriptTypingIndicatorMediumBubbleOffset_sBehavior_1;
  result.y = v3;
  result.x = v2;
  return result;
}

void __59__CKUIBehavior_transcriptTypingIndicatorMediumBubbleOffset__block_invoke()
{
  transcriptTypingIndicatorMediumBubbleOffset_sBehavior_0 = 0x401C000000000000;
  transcriptTypingIndicatorMediumBubbleOffset_sBehavior_1 = 0xC01E000000000000;
}

- (CGSize)transcriptTypingIndicatorLargeBubbleSize
{
  if (transcriptTypingIndicatorLargeBubbleSize_once != -1) {
    dispatch_once(&transcriptTypingIndicatorLargeBubbleSize_once, &__block_literal_global_357_0);
  }
  double v2 = *(double *)&transcriptTypingIndicatorLargeBubbleSize_sBehavior_0;
  double v3 = *(double *)&transcriptTypingIndicatorLargeBubbleSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __56__CKUIBehavior_transcriptTypingIndicatorLargeBubbleSize__block_invoke()
{
  transcriptTypingIndicatorLargeBubbleSize_sBehavior_0 = 0x404CC00000000000;
  transcriptTypingIndicatorLargeBubbleSize_sBehavior_1 = 0x4041800000000000;
}

- (CGPoint)transcriptTypingIndicatorLargeBubbleOffset
{
  if (transcriptTypingIndicatorLargeBubbleOffset_once != -1) {
    dispatch_once(&transcriptTypingIndicatorLargeBubbleOffset_once, &__block_literal_global_359_0);
  }
  double v2 = *(double *)&transcriptTypingIndicatorLargeBubbleOffset_sBehavior_0;
  double v3 = *(double *)&transcriptTypingIndicatorLargeBubbleOffset_sBehavior_1;
  result.y = v3;
  result.x = v2;
  return result;
}

void __58__CKUIBehavior_transcriptTypingIndicatorLargeBubbleOffset__block_invoke()
{
  transcriptTypingIndicatorLargeBubbleOffset_sBehavior_0 = 0x4030000000000000;
  transcriptTypingIndicatorLargeBubbleOffset_sBehavior_1 = 0xC039800000000000;
}

- (CGPoint)transcriptTypingIndicatorLargeBubbleGrowOffset
{
  if (transcriptTypingIndicatorLargeBubbleGrowOffset_once != -1) {
    dispatch_once(&transcriptTypingIndicatorLargeBubbleGrowOffset_once, &__block_literal_global_361_0);
  }
  double v2 = *(double *)&transcriptTypingIndicatorLargeBubbleGrowOffset_sBehavior_0;
  double v3 = *(double *)&transcriptTypingIndicatorLargeBubbleGrowOffset_sBehavior_1;
  result.y = v3;
  result.x = v2;
  return result;
}

void __62__CKUIBehavior_transcriptTypingIndicatorLargeBubbleGrowOffset__block_invoke()
{
  transcriptTypingIndicatorLargeBubbleGrowOffset_sBehavior_0 = 0x4014000000000000;
  transcriptTypingIndicatorLargeBubbleGrowOffset_sBehavior_1 = 0xC018000000000000;
}

- (double)transcriptTypingIndicatorLargeBubbleGrowBeginTime
{
  if (transcriptTypingIndicatorLargeBubbleGrowBeginTime_once != -1) {
    dispatch_once(&transcriptTypingIndicatorLargeBubbleGrowBeginTime_once, &__block_literal_global_363_0);
  }
  return *(double *)&transcriptTypingIndicatorLargeBubbleGrowBeginTime_sBehavior;
}

void __65__CKUIBehavior_transcriptTypingIndicatorLargeBubbleGrowBeginTime__block_invoke()
{
  transcriptTypingIndicatorLargeBubbleGrowBeginTime_sBehavior = 0x3FBEB851EB851EB8;
}

- (double)transcriptTypingIndicatorThinkingDotDiameter
{
  if (transcriptTypingIndicatorThinkingDotDiameter_once != -1) {
    dispatch_once(&transcriptTypingIndicatorThinkingDotDiameter_once, &__block_literal_global_365_0);
  }
  return *(double *)&transcriptTypingIndicatorThinkingDotDiameter_sBehavior;
}

void __60__CKUIBehavior_transcriptTypingIndicatorThinkingDotDiameter__block_invoke()
{
  transcriptTypingIndicatorThinkingDotDiameter_sBehavior = 0x4021000000000000;
}

- (double)transcriptTypingIndicatorThinkingDotSpace
{
  if (transcriptTypingIndicatorThinkingDotSpace_once != -1) {
    dispatch_once(&transcriptTypingIndicatorThinkingDotSpace_once, &__block_literal_global_367_0);
  }
  return *(double *)&transcriptTypingIndicatorThinkingDotSpace_sBehavior;
}

void __57__CKUIBehavior_transcriptTypingIndicatorThinkingDotSpace__block_invoke()
{
  transcriptTypingIndicatorThinkingDotSpace_sBehavior = 0x4029000000000000;
}

- (CGSize)transcriptDownloadingPendingMessagesViewDefaultSize
{
  if (transcriptDownloadingPendingMessagesViewDefaultSize_once != -1) {
    dispatch_once(&transcriptDownloadingPendingMessagesViewDefaultSize_once, &__block_literal_global_369_0);
  }
  double v2 = *(double *)&transcriptDownloadingPendingMessagesViewDefaultSize_sBehavior_0;
  double v3 = *(double *)&transcriptDownloadingPendingMessagesViewDefaultSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __67__CKUIBehavior_transcriptDownloadingPendingMessagesViewDefaultSize__block_invoke()
{
  transcriptDownloadingPendingMessagesViewDefaultSize_sBehavior_0 = 0x4053A00000000000;
  transcriptDownloadingPendingMessagesViewDefaultSize_sBehavior_1 = 0x4041800000000000;
}

- (BOOL)ckShouldUpdatenavbarToLabelFont
{
  return 0;
}

- (UIFont)navbarToLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)navbarToLabelFont_sContentSizeCategory_navbarToLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenavbarToLabelFont]
    || v11
    || navbarToLabelFont_sIsIncreaseContrastEnabled_navbarToLabelFont != v4
    || navbarToLabelFont_sIsBoldTextEnabled_navbarToLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = navbarToLabelFont_sTextFontSize_navbarToLabelFont,
        *(double *)&navbarToLabelFont_sTextFontSize_navbarToLabelFont != v6)
    || (uint64_t v12 = navbarToLabelFont_sCustomTextFontSize_navbarToLabelFont,
        *(double *)&navbarToLabelFont_sCustomTextFontSize_navbarToLabelFont != v7)
    || (objc_msgSend((id)navbarToLabelFont_sCustomTextFontName_navbarToLabelFont, "isEqualToString:", v10, *(double *)&navbarToLabelFont_sCustomTextFontSize_navbarToLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    double v14 = (void *)navbarToLabelFont_sBehavior;
    navbarToLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&navbarToLabelFont_sContentSizeCategory_navbarToLabelFont, v3);
    navbarToLabelFont_sIsIncreaseContrastEnabled_navbarToLabelFont = v4;
    navbarToLabelFont_sIsBoldTextEnabled_navbarToLabelFont = IsBoldTextEnabled;
    navbarToLabelFont_sTextFontSize_navbarToLabelFont = *(void *)&v6;
    navbarToLabelFont_sCustomTextFontSize_navbarToLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&navbarToLabelFont_sCustomTextFontName_navbarToLabelFont, v9);
  }
  double v15 = (UIFont *)(id)navbarToLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatenavbarDefaultLabelFont
{
  return 0;
}

- (UIFont)navbarDefaultLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)navbarDefaultLabelFont_sContentSizeCategory_navbarDefaultLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenavbarDefaultLabelFont]
    || v11
    || navbarDefaultLabelFont_sIsIncreaseContrastEnabled_navbarDefaultLabelFont != v4
    || navbarDefaultLabelFont_sIsBoldTextEnabled_navbarDefaultLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = navbarDefaultLabelFont_sTextFontSize_navbarDefaultLabelFont,
        *(double *)&navbarDefaultLabelFont_sTextFontSize_navbarDefaultLabelFont != v6)
    || (uint64_t v12 = navbarDefaultLabelFont_sCustomTextFontSize_navbarDefaultLabelFont,
        *(double *)&navbarDefaultLabelFont_sCustomTextFontSize_navbarDefaultLabelFont != v7)
    || (objc_msgSend((id)navbarDefaultLabelFont_sCustomTextFontName_navbarDefaultLabelFont, "isEqualToString:", v10, *(double *)&navbarDefaultLabelFont_sCustomTextFontSize_navbarDefaultLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    double v14 = (void *)navbarDefaultLabelFont_sBehavior;
    navbarDefaultLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&navbarDefaultLabelFont_sContentSizeCategory_navbarDefaultLabelFont, v3);
    navbarDefaultLabelFont_sIsIncreaseContrastEnabled_navbarDefaultLabelFont = v4;
    navbarDefaultLabelFont_sIsBoldTextEnabled_navbarDefaultLabelFont = IsBoldTextEnabled;
    navbarDefaultLabelFont_sTextFontSize_navbarDefaultLabelFont = *(void *)&v6;
    navbarDefaultLabelFont_sCustomTextFontSize_navbarDefaultLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&navbarDefaultLabelFont_sCustomTextFontName_navbarDefaultLabelFont, v9);
  }
  double v15 = (UIFont *)(id)navbarDefaultLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatenavbarSubtitleFont
{
  return 0;
}

- (UIFont)navbarSubtitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)navbarSubtitleFont_sContentSizeCategory_navbarSubtitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenavbarSubtitleFont]
    || v11
    || navbarSubtitleFont_sIsIncreaseContrastEnabled_navbarSubtitleFont != v4
    || navbarSubtitleFont_sIsBoldTextEnabled_navbarSubtitleFont != IsBoldTextEnabled
    || *(double *)&navbarSubtitleFont_sTextFontSize_navbarSubtitleFont != v6
    || *(double *)&navbarSubtitleFont_sCustomTextFontSize_navbarSubtitleFont != v7
    || (objc_msgSend((id)navbarSubtitleFont_sCustomTextFontName_navbarSubtitleFont, "isEqualToString:", v10, *(double *)&navbarSubtitleFont_sCustomTextFontSize_navbarSubtitleFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:10.0 weight:*MEMORY[0x1E4FB09D8]];
    uint64_t v13 = (void *)navbarSubtitleFont_sBehavior;
    navbarSubtitleFont_sBehavior = v12;

    objc_storeStrong((id *)&navbarSubtitleFont_sContentSizeCategory_navbarSubtitleFont, v3);
    navbarSubtitleFont_sIsIncreaseContrastEnabled_navbarSubtitleFont = v4;
    navbarSubtitleFont_sIsBoldTextEnabled_navbarSubtitleFont = IsBoldTextEnabled;
    navbarSubtitleFont_sTextFontSize_navbarSubtitleFont = *(void *)&v6;
    navbarSubtitleFont_sCustomTextFontSize_navbarSubtitleFont = *(void *)&v7;
    objc_storeStrong((id *)&navbarSubtitleFont_sCustomTextFontName_navbarSubtitleFont, v9);
  }
  double v14 = (UIFont *)(id)navbarSubtitleFont_sBehavior;

  return v14;
}

- (id)navBarSubtitleAttributedStringAttributesForContentSizeCategory:(id)a3
{
  v14[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = [(CKUIBehavior *)self navBarSubtitleFontForContentSizeCategory:v4];
  double v6 = [(CKUIBehavior *)self navBarSubtitleParagraphStyleForContentSizeCategory:v4];
  [(CKUIBehavior *)self navBarSubtitleFontTrackingValueForContentSizeCategory:v4];
  double v8 = v7;

  uint64_t v9 = *MEMORY[0x1E4FB0738];
  v13[0] = *MEMORY[0x1E4FB06F8];
  v13[1] = v9;
  v14[0] = v5;
  v14[1] = v6;
  v13[2] = *MEMORY[0x1E4FB07F8];
  NSComparisonResult v10 = [NSNumber numberWithDouble:v8];
  v14[2] = v10;
  NSComparisonResult v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3];

  return v11;
}

- (id)navBarSubtitleFontForContentSizeCategory:(id)a3
{
  double v3 = (NSString *)a3;
  id v4 = (NSString *)*MEMORY[0x1E4F437A0];
  if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F437A0]) == NSOrderedAscending)
  {
    double v5 = 10.0;
  }
  else if (UIContentSizeCategoryCompareToCategory(v3, v4))
  {
    double v5 = 14.0;
    if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43798])
      && UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43790]))
    {
      double v6 = (NSString *)*MEMORY[0x1E4F43760];
      if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43760]) == NSOrderedAscending)
      {
        double v5 = 19.0;
      }
      else if (UIContentSizeCategoryCompareToCategory(v3, v6))
      {
        double v5 = 10.0;
      }
      else
      {
        double v5 = 19.0;
      }
    }
  }
  else
  {
    double v5 = 12.0;
  }
  double v7 = [MEMORY[0x1E4FB08E0] systemFontOfSize:v5 weight:*MEMORY[0x1E4FB09D8]];

  return v7;
}

- (id)navBarSubtitleParagraphStyleForContentSizeCategory:(id)a3
{
  id v4 = a3;
  double v5 = [(CKUIBehavior *)self navBarSubtitleFontForContentSizeCategory:v4];
  [v5 pointSize];
  double v7 = v6;
  [(CKUIBehavior *)self navBarSubtitleFontLeadingValueForContentSizeCategory:v4];
  double v9 = v8;

  double v10 = v9 - v7;
  NSComparisonResult v11 = [MEMORY[0x1E4FB0850] defaultParagraphStyle];
  uint64_t v12 = (void *)[v11 mutableCopy];

  [v12 setAlignment:1];
  [v12 setLineBreakMode:4];
  if (v10 > 0.0) {
    [v12 setLineSpacing:v10];
  }

  return v12;
}

- (double)navBarSubtitleFontTrackingValueForContentSizeCategory:(id)a3
{
  double v3 = (NSString *)a3;
  id v4 = (NSString *)*MEMORY[0x1E4F437A0];
  if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F437A0]) == NSOrderedAscending)
  {
    double v6 = 0.12;
  }
  else if (UIContentSizeCategoryCompareToCategory(v3, v4))
  {
    if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43798]))
    {
      if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43790]))
      {
        double v5 = (NSString *)*MEMORY[0x1E4F43760];
        if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43760]) == NSOrderedAscending) {
          double v6 = -0.45;
        }
        else {
          double v6 = dbl_18F81CB60[UIContentSizeCategoryCompareToCategory(v3, v5) == NSOrderedSame];
        }
      }
      else
      {
        double v6 = -0.31;
      }
    }
    else
    {
      double v6 = -0.15;
    }
  }
  else
  {
    double v6 = 0.0;
  }

  return v6;
}

- (double)navBarSubtitleFontLeadingValueForContentSizeCategory:(id)a3
{
  double v3 = (NSString *)a3;
  id v4 = (NSString *)*MEMORY[0x1E4F437A0];
  if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F437A0]) == NSOrderedAscending)
  {
    double v6 = 11.0;
  }
  else if (UIContentSizeCategoryCompareToCategory(v3, v4))
  {
    if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43798]))
    {
      if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43790]))
      {
        double v5 = (NSString *)*MEMORY[0x1E4F43760];
        if (UIContentSizeCategoryCompareToCategory(v3, (UIContentSizeCategory)*MEMORY[0x1E4F43760]) == NSOrderedAscending)
        {
          double v6 = 20.0;
        }
        else if (UIContentSizeCategoryCompareToCategory(v3, v5))
        {
          double v6 = 11.0;
        }
        else
        {
          double v6 = 20.0;
        }
      }
      else
      {
        double v6 = 17.0;
      }
    }
    else
    {
      double v6 = 15.0;
    }
  }
  else
  {
    double v6 = 13.0;
  }

  return v6;
}

- (double)navbarSubtitleBottomPadding
{
  if (navbarSubtitleBottomPadding_once != -1) {
    dispatch_once(&navbarSubtitleBottomPadding_once, &__block_literal_global_374);
  }
  return *(double *)&navbarSubtitleBottomPadding_sBehavior;
}

void __43__CKUIBehavior_navbarSubtitleBottomPadding__block_invoke()
{
  navbarSubtitleBottomPadding_sBehavior = 0x4026000000000000;
}

- (UIImage)conversationListMuteIndicatorImage
{
  if (conversationListMuteIndicatorImage_once != -1) {
    dispatch_once(&conversationListMuteIndicatorImage_once, &__block_literal_global_381_0);
  }
  double v2 = (void *)conversationListMuteIndicatorImage_sBehavior;

  return (UIImage *)v2;
}

void __50__CKUIBehavior_conversationListMuteIndicatorImage__block_invoke()
{
  id v5 = [MEMORY[0x1E4F42A80] systemImageNamed:@"bell.slash.fill"];
  id v0 = (void *)MEMORY[0x1E4F42A98];
  double v1 = [MEMORY[0x1E4FB08E0] _preferredFontForTextStyle:*MEMORY[0x1E4F43878] variant:1024];
  double v2 = [v0 configurationWithFont:v1 scale:1];
  uint64_t v3 = [v5 imageWithSymbolConfiguration:v2];
  id v4 = (void *)conversationListMuteIndicatorImage_sBehavior;
  conversationListMuteIndicatorImage_sBehavior = v3;
}

- (UIImage)conversationListSlashSatelliteIndicatorImage
{
  if (conversationListSlashSatelliteIndicatorImage_once != -1) {
    dispatch_once(&conversationListSlashSatelliteIndicatorImage_once, &__block_literal_global_386);
  }
  double v2 = (void *)conversationListSlashSatelliteIndicatorImage_sBehavior;

  return (UIImage *)v2;
}

void __60__CKUIBehavior_conversationListSlashSatelliteIndicatorImage__block_invoke()
{
  id v5 = [MEMORY[0x1E4F42A80] _systemImageNamed:@"satellite.slash.fill"];
  id v0 = (void *)MEMORY[0x1E4F42A98];
  double v1 = [MEMORY[0x1E4FB08E0] _preferredFontForTextStyle:*MEMORY[0x1E4F43878] variant:1024];
  double v2 = [v0 configurationWithFont:v1 scale:1];
  uint64_t v3 = [v5 imageWithSymbolConfiguration:v2];
  id v4 = (void *)conversationListSlashSatelliteIndicatorImage_sBehavior;
  conversationListSlashSatelliteIndicatorImage_sBehavior = v3;
}

- (NSArray)acceptableUTIs
{
  if (acceptableUTIs_once != -1) {
    dispatch_once(&acceptableUTIs_once, &__block_literal_global_391_0);
  }
  double v2 = (void *)acceptableUTIs_sBehavior;

  return (NSArray *)v2;
}

void __30__CKUIBehavior_acceptableUTIs__block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  [v0 addObject:@"com.apple.cloudkit.sharingsupport.pre"];
  [v0 addObject:@"com.apple.cloudkit.sharingsupport.post"];
  [v0 addObject:@"com.apple.cloudkit.sharingsupport.container"];
  double v1 = [NSString readableTypeIdentifiersForItemProvider];
  [v0 addObjectsFromArray:v1];

  double v2 = [MEMORY[0x1E4F1CB10] readableTypeIdentifiersForItemProvider];
  [v0 addObjectsFromArray:v2];

  uint64_t v3 = [MEMORY[0x1E4F42A80] readableTypeIdentifiersForItemProvider];
  [v0 addObjectsFromArray:v3];

  id v4 = [(id)*MEMORY[0x1E4F443C8] identifier];
  [v0 addObject:v4];

  id v5 = +[CKMediaObjectManager sharedInstance];
  double v6 = [v5 allUTITypes];
  [v0 addObjectsFromArray:v6];

  double v7 = MEMORY[0x192FBAB10]([v0 addObject:@"com.apple.live-photo-bundle"]);
  [v0 addObject:v7];

  uint64_t v8 = [v0 allObjects];

  double v9 = (void *)acceptableUTIs_sBehavior;
  acceptableUTIs_sBehavior = v8;
}

- (id)pasteConfigurationDisablingKeyboardStickers:(BOOL)a3
{
  BOOL v3 = a3;
  id v4 = [(CKUIBehavior *)self acceptableUTIs];
  id v5 = (void *)[v4 mutableCopy];

  if (v3)
  {
    double v6 = [(id)*MEMORY[0x1E4F44460] identifier];
    [v5 removeObject:v6];
  }
  double v7 = (void *)[objc_alloc(MEMORY[0x1E4F42C48]) initWithAcceptableTypeIdentifiers:v5];

  return v7;
}

- (BOOL)ckShouldUpdatefilterCellTitleFont
{
  return 0;
}

- (UIFont)filterCellTitleFont
{
  CKPreferredContentSizeCategory();
  BOOL v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [(__CFString *)v8 length];
  double v10 = @"None";
  if (v9) {
    double v10 = v8;
  }
  obj = v10;
  NSComparisonResult v11 = v10;
  NSComparisonResult v12 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)filterCellTitleFont_sContentSizeCategory_filterCellTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatefilterCellTitleFont]
    || v12
    || filterCellTitleFont_sIsIncreaseContrastEnabled_filterCellTitleFont != v4
    || filterCellTitleFont_sIsBoldTextEnabled_filterCellTitleFont != IsBoldTextEnabled
    || *(double *)&filterCellTitleFont_sTextFontSize_filterCellTitleFont != v6
    || *(double *)&filterCellTitleFont_sCustomTextFontSize_filterCellTitleFont != v7
    || (objc_msgSend((id)filterCellTitleFont_sCustomTextFontName_filterCellTitleFont, "isEqualToString:", v11, *(double *)&filterCellTitleFont_sCustomTextFontSize_filterCellTitleFont) & 1) == 0)
  {
    if (CKIsBigIdiom_onceToken != -1) {
      dispatch_once(&CKIsBigIdiom_onceToken, &__block_literal_global_5993);
    }
    uint64_t v13 = [MEMORY[0x1E4FB08E8] preferredFontDescriptorWithTextStyle:*MEMORY[0x1E4F43870] addingSymbolicTraits:0x8000 options:2 * (CKIsBigIdiom_sBig == 0)];
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)filterCellTitleFont_sBehavior;
    filterCellTitleFont_sBehavior = v14;

    objc_storeStrong((id *)&filterCellTitleFont_sContentSizeCategory_filterCellTitleFont, v3);
    filterCellTitleFont_sIsIncreaseContrastEnabled_filterCellTitleFont = v4;
    filterCellTitleFont_sIsBoldTextEnabled_filterCellTitleFont = IsBoldTextEnabled;
    filterCellTitleFont_sTextFontSize_filterCellTitleFont = *(void *)&v6;
    filterCellTitleFont_sCustomTextFontSize_filterCellTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&filterCellTitleFont_sCustomTextFontName_filterCellTitleFont, obj);
  }
  double v16 = (UIFont *)(id)filterCellTitleFont_sBehavior;

  return v16;
}

- (Class)modalTranscriptControllerClass
{
  if (modalTranscriptControllerClass_once != -1) {
    dispatch_once(&modalTranscriptControllerClass_once, &__block_literal_global_417);
  }
  double v2 = (void *)modalTranscriptControllerClass_sBehavior;

  return (Class)v2;
}

uint64_t __46__CKUIBehavior_modalTranscriptControllerClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  modalTranscriptControllerClass_sBehavior = result;
  return result;
}

- (BOOL)suppressPinActivityForState:(id)a3
{
  id v3 = a3;
  if ([v3 isSelected]) {
    char v4 = 1;
  }
  else {
    char v4 = [v3 isHighlighted];
  }

  return v4;
}

- (BOOL)shouldUnreadIndicatorChangeOnSelection
{
  if (shouldUnreadIndicatorChangeOnSelection_once != -1) {
    dispatch_once(&shouldUnreadIndicatorChangeOnSelection_once, &__block_literal_global_428);
  }
  return 0;
}

- (double)conversationListCellHighlightViewToUnreadIndicatorPadding
{
  if (conversationListCellHighlightViewToUnreadIndicatorPadding_once != -1) {
    dispatch_once(&conversationListCellHighlightViewToUnreadIndicatorPadding_once, &__block_literal_global_430);
  }
  return *(double *)&conversationListCellHighlightViewToUnreadIndicatorPadding_sBehavior;
}

void __73__CKUIBehavior_conversationListCellHighlightViewToUnreadIndicatorPadding__block_invoke()
{
  conversationListCellHighlightViewToUnreadIndicatorPadding_sBehavior = 0x4008000000000000;
}

- (double)pinnedConversationViewTitleLabelToEdgePaddingWhenNoUnreadIndicator
{
  if (pinnedConversationViewTitleLabelToEdgePaddingWhenNoUnreadIndicator_once != -1) {
    dispatch_once(&pinnedConversationViewTitleLabelToEdgePaddingWhenNoUnreadIndicator_once, &__block_literal_global_432);
  }
  return *(double *)&pinnedConversationViewTitleLabelToEdgePaddingWhenNoUnreadIndicator_sBehavior;
}

void __82__CKUIBehavior_pinnedConversationViewTitleLabelToEdgePaddingWhenNoUnreadIndicator__block_invoke()
{
  pinnedConversationViewTitleLabelToEdgePaddingWhenNoUnreadIndicator_sBehavior = 0x4008000000000000;
}

- (double)pinnedConversationDefaultAccessorySize
{
  if (pinnedConversationDefaultAccessorySize_once != -1) {
    dispatch_once(&pinnedConversationDefaultAccessorySize_once, &__block_literal_global_434);
  }
  return *(double *)&pinnedConversationDefaultAccessorySize_sBehavior;
}

void __54__CKUIBehavior_pinnedConversationDefaultAccessorySize__block_invoke()
{
  pinnedConversationDefaultAccessorySize_sBehavior = 0x403B000000000000;
}

- (double)pinnedConversationCheckmarkStrokeRatio
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_pinnedConversationCheckmarkStrokeRatio__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (pinnedConversationCheckmarkStrokeRatio_once != -1) {
    dispatch_once(&pinnedConversationCheckmarkStrokeRatio_once, block);
  }
  return *(double *)&pinnedConversationCheckmarkStrokeRatio_sBehavior;
}

double __54__CKUIBehavior_pinnedConversationCheckmarkStrokeRatio__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) pinnedConversationDefaultAccessorySize];
  double result = 2.5 / v1;
  pinnedConversationCheckmarkStrokeRatio_sBehavior = *(void *)&result;
  return result;
}

- (double)conversationListTotalLastPinNameToFirstCellSpacing
{
  if (conversationListTotalLastPinNameToFirstCellSpacing_once != -1) {
    dispatch_once(&conversationListTotalLastPinNameToFirstCellSpacing_once, &__block_literal_global_438);
  }
  return *(double *)&conversationListTotalLastPinNameToFirstCellSpacing_sBehavior;
}

void __66__CKUIBehavior_conversationListTotalLastPinNameToFirstCellSpacing__block_invoke()
{
  conversationListTotalLastPinNameToFirstCellSpacing_sBehavior = 0x4030000000000000;
}

- (double)totalTopSpacingFromSearchBarToPinnedItems:(BOOL)a3
{
  double result = 10.0;
  if (a3) {
    return 15.0;
  }
  return result;
}

- (id)conversationListMoveSelectedToRecentlyDeletedButtonItemWithTarget:(id)a3 action:(SEL)a4
{
  id v5 = (objc_class *)MEMORY[0x1E4F427C0];
  id v6 = a3;
  id v7 = [v5 alloc];
  uint64_t v8 = CKFrameworkBundle();
  uint64_t v9 = [v8 localizedStringForKey:@"DELETE" value:&stru_1EDE4CA38 table:@"ChatKit"];
  double v10 = (void *)[v7 initWithTitle:v9 style:0 target:v6 action:a4];

  return v10;
}

- (BOOL)usesPersistentConversationSelection
{
  double v2 = [(id)*MEMORY[0x1E4F43630] windows];
  id v3 = [v2 firstObject];
  char v4 = [v3 traitCollection];

  uint64_t v5 = usesPersistentConversationSelection_sUserInterfaceHorizontalSizeClass_usesPersistentConversationSelection;
  if (v5 != [v4 horizontalSizeClass])
  {
    usesPersistentConversationSelection_sBehavior = [v4 horizontalSizeClass] == 2;
    usesPersistentConversationSelection_sUserInterfaceHorizontalSizeClass_usesPersistentConversationSelection = [v4 horizontalSizeClass];
    [v4 verticalSizeClass];
  }
  char v6 = usesPersistentConversationSelection_sBehavior;

  return v6;
}

- (BOOL)shouldShowSearchBarInConversationList
{
  if (shouldShowSearchBarInConversationList_once != -1) {
    dispatch_once(&shouldShowSearchBarInConversationList_once, &__block_literal_global_462_0);
  }
  return shouldShowSearchBarInConversationList_sBehavior;
}

void __53__CKUIBehavior_shouldShowSearchBarInConversationList__block_invoke()
{
  shouldShowSearchBarInConversationList_sBehavior = 1;
}

- (BOOL)showsHoverToDeleteButtonForNewCompose
{
  if (showsHoverToDeleteButtonForNewCompose_once != -1) {
    dispatch_once(&showsHoverToDeleteButtonForNewCompose_once, &__block_literal_global_472);
  }
  return 0;
}

- (BOOL)supportsOrbPreviewsInConversationList
{
  if (supportsOrbPreviewsInConversationList_once != -1) {
    dispatch_once(&supportsOrbPreviewsInConversationList_once, &__block_literal_global_478);
  }
  return supportsOrbPreviewsInConversationList_sBehavior;
}

void __53__CKUIBehavior_supportsOrbPreviewsInConversationList__block_invoke()
{
  supportsOrbPreviewsInConversationList_sBehavior = 1;
}

- (unint64_t)conversationListScrollingBatchSize
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __50__CKUIBehavior_conversationListScrollingBatchSize__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (conversationListScrollingBatchSize_once != -1) {
    dispatch_once(&conversationListScrollingBatchSize_once, block);
  }
  return conversationListScrollingBatchSize_sBehavior;
}

uint64_t __50__CKUIBehavior_conversationListScrollingBatchSize__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _conversationListScrollingBatchSize];
  conversationListScrollingBatchSize_sBehavior = result;
  return result;
}

- (unint64_t)_conversationListScrollingBatchSize
{
  return 16;
}

- (BOOL)shouldDismissSideMountedPanel
{
  if (shouldDismissSideMountedPanel_once != -1) {
    dispatch_once(&shouldDismissSideMountedPanel_once, &__block_literal_global_482);
  }
  return 0;
}

- (BOOL)ckShouldUpdateconversationListCellRoundSelectorLeftInset
{
  return 0;
}

- (double)conversationListCellRoundSelectorLeftInset
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  uint64_t v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellRoundSelectorLeftInset_sContentSizeCategory_conversationListCellRoundSelectorLeftInset, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellRoundSelectorLeftInset](self, "ckShouldUpdateconversationListCellRoundSelectorLeftInset")|| v10|| conversationListCellRoundSelectorLeftInset_sIsBoldTextEnabled_conversationListCellRoundSelectorLeftInset != IsBoldTextEnabled|| *(double *)&conversationListCellRoundSelectorLeftInset_sTextFontSize_conversationListCellRoundSelectorLeftInset != v5|| *(double *)&conversationListCellRoundSelectorLeftInset_sCustomTextFontSize_conversationListCellRoundSelectorLeftInset != v6|| (objc_msgSend((id)conversationListCellRoundSelectorLeftInset_sCustomTextFontName_conversationListCellRoundSelectorLeftInset, "isEqualToString:", v9, *(double *)&conversationListCellRoundSelectorLeftInset_sCustomTextFontSize_conversationListCellRoundSelectorLeftInset) & 1) == 0)
  {
    objc_storeStrong((id *)&conversationListCellRoundSelectorLeftInset_sContentSizeCategory_conversationListCellRoundSelectorLeftInset, v3);
    conversationListCellRoundSelectorLeftInset_sIsBoldTextEnabled_conversationListCellRoundSelectorLeftInset = IsBoldTextEnabled;
    conversationListCellRoundSelectorLeftInset_sTextFontSize_conversationListCellRoundSelectorLeftInset = *(void *)&v5;
    conversationListCellRoundSelectorLeftInset_sCustomTextFontSize_conversationListCellRoundSelectorLeftInset = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellRoundSelectorLeftInset_sCustomTextFontName_conversationListCellRoundSelectorLeftInset, v8);
  }

  return 0.0;
}

- (BOOL)ckShouldUpdateconversationListCellRoundSelectorRightInset
{
  return 0;
}

- (double)conversationListCellRoundSelectorRightInset
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  uint64_t v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListCellRoundSelectorRightInset_sContentSizeCategory_conversationListCellRoundSelectorRightInset, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListCellRoundSelectorRightInset](self, "ckShouldUpdateconversationListCellRoundSelectorRightInset")|| v10|| conversationListCellRoundSelectorRightInset_sIsBoldTextEnabled_conversationListCellRoundSelectorRightInset != IsBoldTextEnabled|| *(double *)&conversationListCellRoundSelectorRightInset_sTextFontSize_conversationListCellRoundSelectorRightInset != v5|| *(double *)&conversationListCellRoundSelectorRightInset_sCustomTextFontSize_conversationListCellRoundSelectorRightInset != v6|| (objc_msgSend((id)conversationListCellRoundSelectorRightInset_sCustomTextFontName_conversationListCellRoundSelectorRightInset, "isEqualToString:", v9, *(double *)&conversationListCellRoundSelectorRightInset_sCustomTextFontSize_conversationListCellRoundSelectorRightInset) & 1) == 0)
  {
    objc_storeStrong((id *)&conversationListCellRoundSelectorRightInset_sContentSizeCategory_conversationListCellRoundSelectorRightInset, v3);
    conversationListCellRoundSelectorRightInset_sIsBoldTextEnabled_conversationListCellRoundSelectorRightInset = IsBoldTextEnabled;
    conversationListCellRoundSelectorRightInset_sTextFontSize_conversationListCellRoundSelectorRightInset = *(void *)&v5;
    conversationListCellRoundSelectorRightInset_sCustomTextFontSize_conversationListCellRoundSelectorRightInset = *(void *)&v6;
    objc_storeStrong((id *)&conversationListCellRoundSelectorRightInset_sCustomTextFontName_conversationListCellRoundSelectorRightInset, v8);
  }

  return 0.0;
}

- (double)conversationListMultipleContactsImageDiameter
{
  if (conversationListMultipleContactsImageDiameter_once != -1) {
    dispatch_once(&conversationListMultipleContactsImageDiameter_once, &__block_literal_global_490);
  }
  return *(double *)&conversationListMultipleContactsImageDiameter_sBehavior;
}

double __61__CKUIBehavior_conversationListMultipleContactsImageDiameter__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = ceil(v0 * 26.0) / v0;
  conversationListMultipleContactsImageDiameter_sBehavior = *(void *)&result;
  return result;
}

- (double)conversationListAccessoryIndicatorToSummaryLabelPadding
{
  if (conversationListAccessoryIndicatorToSummaryLabelPadding_once != -1) {
    dispatch_once(&conversationListAccessoryIndicatorToSummaryLabelPadding_once, &__block_literal_global_492);
  }
  return *(double *)&conversationListAccessoryIndicatorToSummaryLabelPadding_sBehavior;
}

void __71__CKUIBehavior_conversationListAccessoryIndicatorToSummaryLabelPadding__block_invoke()
{
  conversationListAccessoryIndicatorToSummaryLabelPadding_sBehavior = 0x4008000000000000;
}

- (BOOL)ckShouldUpdateconversationListLargeTitleStandardFont
{
  return 0;
}

- (UIFont)conversationListLargeTitleStandardFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  uint64_t v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListLargeTitleStandardFont_sContentSizeCategory_conversationListLargeTitleStandardFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListLargeTitleStandardFont](self, "ckShouldUpdateconversationListLargeTitleStandardFont")|| v10|| conversationListLargeTitleStandardFont_sIsBoldTextEnabled_conversationListLargeTitleStandardFont != IsBoldTextEnabled|| (uint64_t v11 = conversationListLargeTitleStandardFont_sTextFontSize_conversationListLargeTitleStandardFont, *(double *)&conversationListLargeTitleStandardFont_sTextFontSize_conversationListLargeTitleStandardFont != v5)|| (uint64_t v11 = conversationListLargeTitleStandardFont_sCustomTextFontSize_conversationListLargeTitleStandardFont, *(double *)&conversationListLargeTitleStandardFont_sCustomTextFontSize_conversationListLargeTitleStandardFont != v6)|| (objc_msgSend((id)conversationListLargeTitleStandardFont_sCustomTextFontName_conversationListLargeTitleStandardFont, "isEqualToString:", v9, *(double *)&conversationListLargeTitleStandardFont_sCustomTextFontSize_conversationListLargeTitleStandardFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_emphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F438E0], *(double *)&v11);
    uint64_t v13 = (void *)conversationListLargeTitleStandardFont_sBehavior;
    conversationListLargeTitleStandardFont_sBehavior = v12;

    objc_storeStrong((id *)&conversationListLargeTitleStandardFont_sContentSizeCategory_conversationListLargeTitleStandardFont, v3);
    conversationListLargeTitleStandardFont_sIsBoldTextEnabled_conversationListLargeTitleStandardFont = IsBoldTextEnabled;
    conversationListLargeTitleStandardFont_sTextFontSize_conversationListLargeTitleStandardFont = *(void *)&v5;
    conversationListLargeTitleStandardFont_sCustomTextFontSize_conversationListLargeTitleStandardFont = *(void *)&v6;
    objc_storeStrong((id *)&conversationListLargeTitleStandardFont_sCustomTextFontName_conversationListLargeTitleStandardFont, v8);
  }
  uint64_t v14 = (UIFont *)(id)conversationListLargeTitleStandardFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateconversationListLargeTitleReducedFont
{
  return 0;
}

- (UIFont)conversationListLargeTitleReducedFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  uint64_t v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListLargeTitleReducedFont_sContentSizeCategory_conversationListLargeTitleReducedFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListLargeTitleReducedFont](self, "ckShouldUpdateconversationListLargeTitleReducedFont")|| v10|| conversationListLargeTitleReducedFont_sIsBoldTextEnabled_conversationListLargeTitleReducedFont != IsBoldTextEnabled|| (uint64_t v11 = conversationListLargeTitleReducedFont_sTextFontSize_conversationListLargeTitleReducedFont, *(double *)&conversationListLargeTitleReducedFont_sTextFontSize_conversationListLargeTitleReducedFont != v5)|| (uint64_t v11 = conversationListLargeTitleReducedFont_sCustomTextFontSize_conversationListLargeTitleReducedFont, *(double *)&conversationListLargeTitleReducedFont_sCustomTextFontSize_conversationListLargeTitleReducedFont != v6)|| (objc_msgSend((id)conversationListLargeTitleReducedFont_sCustomTextFontName_conversationListLargeTitleReducedFont, "isEqualToString:", v9, *(double *)&conversationListLargeTitleReducedFont_sCustomTextFontSize_conversationListLargeTitleReducedFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_emphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F438E8], *(double *)&v11);
    uint64_t v13 = (void *)conversationListLargeTitleReducedFont_sBehavior;
    conversationListLargeTitleReducedFont_sBehavior = v12;

    objc_storeStrong((id *)&conversationListLargeTitleReducedFont_sContentSizeCategory_conversationListLargeTitleReducedFont, v3);
    conversationListLargeTitleReducedFont_sIsBoldTextEnabled_conversationListLargeTitleReducedFont = IsBoldTextEnabled;
    conversationListLargeTitleReducedFont_sTextFontSize_conversationListLargeTitleReducedFont = *(void *)&v5;
    conversationListLargeTitleReducedFont_sCustomTextFontSize_conversationListLargeTitleReducedFont = *(void *)&v6;
    objc_storeStrong((id *)&conversationListLargeTitleReducedFont_sCustomTextFontName_conversationListLargeTitleReducedFont, v8);
  }
  uint64_t v14 = (UIFont *)(id)conversationListLargeTitleReducedFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateconversationListBoldSummaryFont
{
  return 0;
}

- (UIFont)conversationListBoldSummaryFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListBoldSummaryFont_sContentSizeCategory_conversationListBoldSummaryFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListBoldSummaryFont](self, "ckShouldUpdateconversationListBoldSummaryFont")|| v11|| conversationListBoldSummaryFont_sIsIncreaseContrastEnabled_conversationListBoldSummaryFont != v4|| conversationListBoldSummaryFont_sIsBoldTextEnabled_conversationListBoldSummaryFont != IsBoldTextEnabled|| (uint64_t v12 = conversationListBoldSummaryFont_sTextFontSize_conversationListBoldSummaryFont, *(double *)&conversationListBoldSummaryFont_sTextFontSize_conversationListBoldSummaryFont != v6)|| (uint64_t v12 = conversationListBoldSummaryFont_sCustomTextFontSize_conversationListBoldSummaryFont, *(double *)&conversationListBoldSummaryFont_sCustomTextFontSize_conversationListBoldSummaryFont != v7)|| (objc_msgSend((id)conversationListBoldSummaryFont_sCustomTextFontName_conversationListBoldSummaryFont, "isEqualToString:", v10, *(double *)&conversationListBoldSummaryFont_sCustomTextFontSize_conversationListBoldSummaryFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438C8], 2, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)conversationListBoldSummaryFont_sBehavior;
    conversationListBoldSummaryFont_sBehavior = v14;

    objc_storeStrong((id *)&conversationListBoldSummaryFont_sContentSizeCategory_conversationListBoldSummaryFont, v3);
    conversationListBoldSummaryFont_sIsIncreaseContrastEnabled_conversationListBoldSummaryFont = v4;
    conversationListBoldSummaryFont_sIsBoldTextEnabled_conversationListBoldSummaryFont = IsBoldTextEnabled;
    conversationListBoldSummaryFont_sTextFontSize_conversationListBoldSummaryFont = *(void *)&v6;
    conversationListBoldSummaryFont_sCustomTextFontSize_conversationListBoldSummaryFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListBoldSummaryFont_sCustomTextFontName_conversationListBoldSummaryFont, v9);
  }
  double v16 = (UIFont *)(id)conversationListBoldSummaryFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateconversationListDropTargetInstructionFont
{
  return 0;
}

- (UIFont)conversationListDropTargetInstructionFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListDropTargetInstructionFont_sContentSizeCategory_conversationListDropTargetInstructionFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListDropTargetInstructionFont](self, "ckShouldUpdateconversationListDropTargetInstructionFont")|| v11|| conversationListDropTargetInstructionFont_sIsIncreaseContrastEnabled_conversationListDropTargetInstructionFont != v4|| conversationListDropTargetInstructionFont_sIsBoldTextEnabled_conversationListDropTargetInstructionFont != IsBoldTextEnabled|| *(double *)&conversationListDropTargetInstructionFont_sTextFontSize_conversationListDropTargetInstructionFont != v6|| *(double *)&conversationListDropTargetInstructionFont_sCustomTextFontSize_conversationListDropTargetInstructionFont != v7|| (objc_msgSend((id)conversationListDropTargetInstructionFont_sCustomTextFontName_conversationListDropTargetInstructionFont, "isEqualToString:", v10, *(double *)&conversationListDropTargetInstructionFont_sCustomTextFontSize_conversationListDropTargetInstructionFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:13.0];
    uint64_t v13 = (void *)conversationListDropTargetInstructionFont_sBehavior;
    conversationListDropTargetInstructionFont_sBehavior = v12;

    objc_storeStrong((id *)&conversationListDropTargetInstructionFont_sContentSizeCategory_conversationListDropTargetInstructionFont, v3);
    conversationListDropTargetInstructionFont_sIsIncreaseContrastEnabled_conversationListDropTargetInstructionFont = v4;
    conversationListDropTargetInstructionFont_sIsBoldTextEnabled_conversationListDropTargetInstructionFont = IsBoldTextEnabled;
    conversationListDropTargetInstructionFont_sTextFontSize_conversationListDropTargetInstructionFont = *(void *)&v6;
    conversationListDropTargetInstructionFont_sCustomTextFontSize_conversationListDropTargetInstructionFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListDropTargetInstructionFont_sCustomTextFontName_conversationListDropTargetInstructionFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)conversationListDropTargetInstructionFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateconversationListGroupCountFont
{
  return 0;
}

- (UIFont)conversationListGroupCountFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListGroupCountFont_sContentSizeCategory_conversationListGroupCountFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListGroupCountFont](self, "ckShouldUpdateconversationListGroupCountFont")|| v11|| conversationListGroupCountFont_sIsIncreaseContrastEnabled_conversationListGroupCountFont != v4|| conversationListGroupCountFont_sIsBoldTextEnabled_conversationListGroupCountFont != IsBoldTextEnabled|| (uint64_t v12 = conversationListGroupCountFont_sTextFontSize_conversationListGroupCountFont, *(double *)&conversationListGroupCountFont_sTextFontSize_conversationListGroupCountFont != v6)|| (uint64_t v12 = conversationListGroupCountFont_sCustomTextFontSize_conversationListGroupCountFont, *(double *)&conversationListGroupCountFont_sCustomTextFontSize_conversationListGroupCountFont != v7)|| (objc_msgSend((id)conversationListGroupCountFont_sCustomTextFontName_conversationListGroupCountFont, "isEqualToString:", v10, *(double *)&conversationListGroupCountFont_sCustomTextFontSize_conversationListGroupCountFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self conversationListSummaryFont];
    uint64_t v14 = (void *)conversationListGroupCountFont_sBehavior;
    conversationListGroupCountFont_sBehavior = v13;

    objc_storeStrong((id *)&conversationListGroupCountFont_sContentSizeCategory_conversationListGroupCountFont, v3);
    conversationListGroupCountFont_sIsIncreaseContrastEnabled_conversationListGroupCountFont = v4;
    conversationListGroupCountFont_sIsBoldTextEnabled_conversationListGroupCountFont = IsBoldTextEnabled;
    conversationListGroupCountFont_sTextFontSize_conversationListGroupCountFont = *(void *)&v6;
    conversationListGroupCountFont_sCustomTextFontSize_conversationListGroupCountFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListGroupCountFont_sCustomTextFontName_conversationListGroupCountFont, v9);
  }
  double v15 = (UIFont *)(id)conversationListGroupCountFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateconversationListPinnedConversationNameFont
{
  return 0;
}

- (UIFont)conversationListPinnedConversationNameFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListPinnedConversationNameFont_sContentSizeCategory_conversationListPinnedConversationNameFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListPinnedConversationNameFont](self, "ckShouldUpdateconversationListPinnedConversationNameFont")|| v11|| conversationListPinnedConversationNameFont_sIsIncreaseContrastEnabled_conversationListPinnedConversationNameFont != v4|| conversationListPinnedConversationNameFont_sIsBoldTextEnabled_conversationListPinnedConversationNameFont != IsBoldTextEnabled|| (uint64_t v12 = conversationListPinnedConversationNameFont_sTextFontSize_conversationListPinnedConversationNameFont, *(double *)&conversationListPinnedConversationNameFont_sTextFontSize_conversationListPinnedConversationNameFont != v6)|| (uint64_t v12 = conversationListPinnedConversationNameFont_sCustomTextFontSize_conversationListPinnedConversationNameFont, *(double *)&conversationListPinnedConversationNameFont_sCustomTextFontSize_conversationListPinnedConversationNameFont != v7)|| (objc_msgSend((id)conversationListPinnedConversationNameFont_sCustomTextFontName_conversationListPinnedConversationNameFont, "isEqualToString:", v10, *(double *)&conversationListPinnedConversationNameFont_sCustomTextFontSize_conversationListPinnedConversationNameFont) & 1) == 0)
  {
    uint64_t v13 = +[CKUIBehavior fontWithStyle:adjustedForMaxSizeCategory:](CKUIBehavior, "fontWithStyle:adjustedForMaxSizeCategory:", *MEMORY[0x1E4F43880], *MEMORY[0x1E4F43790], *(double *)&v12);
    uint64_t v14 = (void *)conversationListPinnedConversationNameFont_sBehavior;
    conversationListPinnedConversationNameFont_sBehavior = v13;

    objc_storeStrong((id *)&conversationListPinnedConversationNameFont_sContentSizeCategory_conversationListPinnedConversationNameFont, v3);
    conversationListPinnedConversationNameFont_sIsIncreaseContrastEnabled_conversationListPinnedConversationNameFont = v4;
    conversationListPinnedConversationNameFont_sIsBoldTextEnabled_conversationListPinnedConversationNameFont = IsBoldTextEnabled;
    conversationListPinnedConversationNameFont_sTextFontSize_conversationListPinnedConversationNameFont = *(void *)&v6;
    conversationListPinnedConversationNameFont_sCustomTextFontSize_conversationListPinnedConversationNameFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListPinnedConversationNameFont_sCustomTextFontName_conversationListPinnedConversationNameFont, v9);
  }
  double v15 = (UIFont *)(id)conversationListPinnedConversationNameFont_sBehavior;

  return v15;
}

- (double)conversationListPinnedConversationPreviewFontSizeOverrideStandard
{
  if (conversationListPinnedConversationPreviewFontSizeOverrideStandard_once != -1) {
    dispatch_once(&conversationListPinnedConversationPreviewFontSizeOverrideStandard_once, &__block_literal_global_494);
  }
  return 0.0;
}

- (double)conversationListPinnedConversationPreviewFontSizeOverrideLarge
{
  if (conversationListPinnedConversationPreviewFontSizeOverrideLarge_once != -1) {
    dispatch_once(&conversationListPinnedConversationPreviewFontSizeOverrideLarge_once, &__block_literal_global_496);
  }
  return 0.0;
}

- (BOOL)conversationListFocusFilterBannerShowsKeylines
{
  if (conversationListFocusFilterBannerShowsKeylines_once != -1) {
    dispatch_once(&conversationListFocusFilterBannerShowsKeylines_once, &__block_literal_global_498);
  }
  return conversationListFocusFilterBannerShowsKeylines_sBehavior;
}

void __62__CKUIBehavior_conversationListFocusFilterBannerShowsKeylines__block_invoke()
{
  conversationListFocusFilterBannerShowsKeylines_sBehavior = 1;
}

- (BOOL)ckShouldUpdateconversationListFocusFilterBannerTitleFont
{
  return 0;
}

- (UIFont)conversationListFocusFilterBannerTitleFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFocusFilterBannerTitleFont_sContentSizeCategory_conversationListFocusFilterBannerTitleFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListFocusFilterBannerTitleFont](self, "ckShouldUpdateconversationListFocusFilterBannerTitleFont")|| v11|| conversationListFocusFilterBannerTitleFont_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerTitleFont != v4|| conversationListFocusFilterBannerTitleFont_sIsBoldTextEnabled_conversationListFocusFilterBannerTitleFont != IsBoldTextEnabled|| (uint64_t v12 = conversationListFocusFilterBannerTitleFont_sTextFontSize_conversationListFocusFilterBannerTitleFont, *(double *)&conversationListFocusFilterBannerTitleFont_sTextFontSize_conversationListFocusFilterBannerTitleFont != v6)|| (uint64_t v12 = conversationListFocusFilterBannerTitleFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleFont, *(double *)&conversationListFocusFilterBannerTitleFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleFont != v7)|| (objc_msgSend((id)conversationListFocusFilterBannerTitleFont_sCustomTextFontName_conversationListFocusFilterBannerTitleFont, "isEqualToString:", v10, *(double *)&conversationListFocusFilterBannerTitleFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438C8], 0x8000, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)conversationListFocusFilterBannerTitleFont_sBehavior;
    conversationListFocusFilterBannerTitleFont_sBehavior = v14;

    objc_storeStrong((id *)&conversationListFocusFilterBannerTitleFont_sContentSizeCategory_conversationListFocusFilterBannerTitleFont, v3);
    conversationListFocusFilterBannerTitleFont_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerTitleFont = v4;
    conversationListFocusFilterBannerTitleFont_sIsBoldTextEnabled_conversationListFocusFilterBannerTitleFont = IsBoldTextEnabled;
    conversationListFocusFilterBannerTitleFont_sTextFontSize_conversationListFocusFilterBannerTitleFont = *(void *)&v6;
    conversationListFocusFilterBannerTitleFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFocusFilterBannerTitleFont_sCustomTextFontName_conversationListFocusFilterBannerTitleFont, v9);
  }
  double v16 = (UIFont *)(id)conversationListFocusFilterBannerTitleFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateconversationListFocusFilterBannerTitleValueFont
{
  return 0;
}

- (UIFont)conversationListFocusFilterBannerTitleValueFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFocusFilterBannerTitleValueFont_sContentSizeCategory_conversationListFocusFilterBannerTitleValueFont, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListFocusFilterBannerTitleValueFont](self, "ckShouldUpdateconversationListFocusFilterBannerTitleValueFont")|| v11|| conversationListFocusFilterBannerTitleValueFont_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerTitleValueFont != v4|| conversationListFocusFilterBannerTitleValueFont_sIsBoldTextEnabled_conversationListFocusFilterBannerTitleValueFont != IsBoldTextEnabled|| (uint64_t v12 = conversationListFocusFilterBannerTitleValueFont_sTextFontSize_conversationListFocusFilterBannerTitleValueFont, *(double *)&conversationListFocusFilterBannerTitleValueFont_sTextFontSize_conversationListFocusFilterBannerTitleValueFont != v6)|| (uint64_t v12 = conversationListFocusFilterBannerTitleValueFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleValueFont, *(double *)&conversationListFocusFilterBannerTitleValueFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleValueFont != v7)|| (objc_msgSend((id)conversationListFocusFilterBannerTitleValueFont_sCustomTextFontName_conversationListFocusFilterBannerTitleValueFont, "isEqualToString:", v10, *(double *)&conversationListFocusFilterBannerTitleValueFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleValueFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438C8], 32770, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)conversationListFocusFilterBannerTitleValueFont_sBehavior;
    conversationListFocusFilterBannerTitleValueFont_sBehavior = v14;

    objc_storeStrong((id *)&conversationListFocusFilterBannerTitleValueFont_sContentSizeCategory_conversationListFocusFilterBannerTitleValueFont, v3);
    conversationListFocusFilterBannerTitleValueFont_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerTitleValueFont = v4;
    conversationListFocusFilterBannerTitleValueFont_sIsBoldTextEnabled_conversationListFocusFilterBannerTitleValueFont = IsBoldTextEnabled;
    conversationListFocusFilterBannerTitleValueFont_sTextFontSize_conversationListFocusFilterBannerTitleValueFont = *(void *)&v6;
    conversationListFocusFilterBannerTitleValueFont_sCustomTextFontSize_conversationListFocusFilterBannerTitleValueFont = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFocusFilterBannerTitleValueFont_sCustomTextFontName_conversationListFocusFilterBannerTitleValueFont, v9);
  }
  double v16 = (UIFont *)(id)conversationListFocusFilterBannerTitleValueFont_sBehavior;

  return v16;
}

- (double)conversationListFocusFilterBannerTopPadding
{
  if (conversationListFocusFilterBannerTopPadding_once != -1) {
    dispatch_once(&conversationListFocusFilterBannerTopPadding_once, &__block_literal_global_500);
  }
  return *(double *)&conversationListFocusFilterBannerTopPadding_sBehavior;
}

void __59__CKUIBehavior_conversationListFocusFilterBannerTopPadding__block_invoke()
{
  conversationListFocusFilterBannerTopPadding_sBehavior = 0x4026000000000000;
}

- (double)conversationListFocusFilterBannerBottomPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __62__CKUIBehavior_conversationListFocusFilterBannerBottomPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (conversationListFocusFilterBannerBottomPadding_once != -1) {
    dispatch_once(&conversationListFocusFilterBannerBottomPadding_once, block);
  }
  return *(double *)&conversationListFocusFilterBannerBottomPadding_sBehavior;
}

uint64_t __62__CKUIBehavior_conversationListFocusFilterBannerBottomPadding__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) conversationListFocusFilterBannerTopPadding];
  conversationListFocusFilterBannerBottomPadding_sBehavior = v2;
  return result;
}

- (BOOL)ckShouldUpdateconversationListFocusFilterBannerShouldUseAccessabilityLayout
{
  return 0;
}

- (BOOL)conversationListFocusFilterBannerShouldUseAccessabilityLayout
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  uint64_t v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListFocusFilterBannerShouldUseAccessabilityLayout](self, "ckShouldUpdateconversationListFocusFilterBannerShouldUseAccessabilityLayout")|| v10|| conversationListFocusFilterBannerShouldUseAccessabilityLayout_sIsBoldTextEnabled_conversationListFocusFilterBannerShouldUseAccessabilityLayout != IsBoldTextEnabled|| (uint64_t v11 = conversationListFocusFilterBannerShouldUseAccessabilityLayout_sTextFontSize_conversationListFocusFilterBannerShouldUseAccessabilityLayout, *(double *)&conversationListFocusFilterBannerShouldUseAccessabilityLayout_sTextFontSize_conversationListFocusFilterBannerShouldUseAccessabilityLayout != v5)|| (uint64_t v11 = conversationListFocusFilterBannerShouldUseAccessabilityLayout_sCustomTextFontSize_conversationListFocusFilterBannerShouldUseAccessabilityLayout, *(double *)&conversationListFocusFilterBannerShouldUseAccessabilityLayout_sCustomTextFontSize_conversationListFocusFilterBannerShouldUseAccessabilityLayout != v6)|| (objc_msgSend((id)conversationListFocusFilterBannerShouldUseAccessabilityLayout_sCustomTextFontName_conversationListFocusFilterBannerShouldUseAccessabilityLayout, "isEqualToString:", v9, *(double *)&conversationListFocusFilterBannerShouldUseAccessabilityLayout_sCustomTextFontSize_conversationListFocusFilterBannerShouldUseAccessabilityLayout) & 1) == 0)
  {
    conversationListFocusFilterBannerShouldUseAccessabilityLayout_sBehavior = +[CKUIBehavior isPreferredContentSizeCategoryGreaterThanOrEqualTo:](CKUIBehavior, "isPreferredContentSizeCategoryGreaterThanOrEqualTo:", *MEMORY[0x1E4F43778], *(double *)&v11);
    objc_storeStrong((id *)&conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout, v3);
    conversationListFocusFilterBannerShouldUseAccessabilityLayout_sIsBoldTextEnabled_conversationListFocusFilterBannerShouldUseAccessabilityLayout = IsBoldTextEnabled;
    conversationListFocusFilterBannerShouldUseAccessabilityLayout_sTextFontSize_conversationListFocusFilterBannerShouldUseAccessabilityLayout = *(void *)&v5;
    conversationListFocusFilterBannerShouldUseAccessabilityLayout_sCustomTextFontSize_conversationListFocusFilterBannerShouldUseAccessabilityLayout = *(void *)&v6;
    objc_storeStrong((id *)&conversationListFocusFilterBannerShouldUseAccessabilityLayout_sCustomTextFontName_conversationListFocusFilterBannerShouldUseAccessabilityLayout, v8);
  }
  char v12 = conversationListFocusFilterBannerShouldUseAccessabilityLayout_sBehavior;

  return v12;
}

- (double)pinnedConversationActivityBroadShadowLightRadius
{
  if (pinnedConversationActivityBroadShadowLightRadius_once != -1) {
    dispatch_once(&pinnedConversationActivityBroadShadowLightRadius_once, &__block_literal_global_502);
  }
  return *(double *)&pinnedConversationActivityBroadShadowLightRadius_sBehavior;
}

void __64__CKUIBehavior_pinnedConversationActivityBroadShadowLightRadius__block_invoke()
{
  pinnedConversationActivityBroadShadowLightRadius_sBehavior = 0x4032000000000000;
}

- (double)pinnedConversationActivityBroadShadowDarkRadius
{
  if (pinnedConversationActivityBroadShadowDarkRadius_once != -1) {
    dispatch_once(&pinnedConversationActivityBroadShadowDarkRadius_once, &__block_literal_global_504);
  }
  return *(double *)&pinnedConversationActivityBroadShadowDarkRadius_sBehavior;
}

void __63__CKUIBehavior_pinnedConversationActivityBroadShadowDarkRadius__block_invoke()
{
  pinnedConversationActivityBroadShadowDarkRadius_sBehavior = 0x4024000000000000;
}

- (double)pinnedConversationActivityTightShadowLightRadius
{
  if (pinnedConversationActivityTightShadowLightRadius_once != -1) {
    dispatch_once(&pinnedConversationActivityTightShadowLightRadius_once, &__block_literal_global_506);
  }
  return *(double *)&pinnedConversationActivityTightShadowLightRadius_sBehavior;
}

void __64__CKUIBehavior_pinnedConversationActivityTightShadowLightRadius__block_invoke()
{
  pinnedConversationActivityTightShadowLightRadius_sBehavior = 0x4010000000000000;
}

- (double)pinnedConversationActivityTightShadowDarkRadius
{
  if (pinnedConversationActivityTightShadowDarkRadius_once != -1) {
    dispatch_once(&pinnedConversationActivityTightShadowDarkRadius_once, &__block_literal_global_508);
  }
  return *(double *)&pinnedConversationActivityTightShadowDarkRadius_sBehavior;
}

void __63__CKUIBehavior_pinnedConversationActivityTightShadowDarkRadius__block_invoke()
{
  pinnedConversationActivityTightShadowDarkRadius_sBehavior = 0x4010000000000000;
}

- (double)pinnedConversationActivityBroadShadowLightOpacity
{
  if (pinnedConversationActivityBroadShadowLightOpacity_once != -1) {
    dispatch_once(&pinnedConversationActivityBroadShadowLightOpacity_once, &__block_literal_global_510);
  }
  return *(double *)&pinnedConversationActivityBroadShadowLightOpacity_sBehavior;
}

void __65__CKUIBehavior_pinnedConversationActivityBroadShadowLightOpacity__block_invoke()
{
  pinnedConversationActivityBroadShadowLightOpacity_sBehavior = 0x3FCD70A3D70A3D71;
}

- (double)pinnedConversationActivityBroadShadowDarkOpacity
{
  if (pinnedConversationActivityBroadShadowDarkOpacity_once != -1) {
    dispatch_once(&pinnedConversationActivityBroadShadowDarkOpacity_once, &__block_literal_global_512_0);
  }
  return *(double *)&pinnedConversationActivityBroadShadowDarkOpacity_sBehavior;
}

void __64__CKUIBehavior_pinnedConversationActivityBroadShadowDarkOpacity__block_invoke()
{
  pinnedConversationActivityBroadShadowDarkOpacity_sBehavior = 0x3FE147AE147AE148;
}

- (double)pinnedConversationActivityTightShadowLightOpacity
{
  if (pinnedConversationActivityTightShadowLightOpacity_once != -1) {
    dispatch_once(&pinnedConversationActivityTightShadowLightOpacity_once, &__block_literal_global_514_0);
  }
  return *(double *)&pinnedConversationActivityTightShadowLightOpacity_sBehavior;
}

void __65__CKUIBehavior_pinnedConversationActivityTightShadowLightOpacity__block_invoke()
{
  pinnedConversationActivityTightShadowLightOpacity_sBehavior = 0x3FA47AE147AE147BLL;
}

- (double)pinnedConversationActivityTightShadowDarkOpacity
{
  if (pinnedConversationActivityTightShadowDarkOpacity_once != -1) {
    dispatch_once(&pinnedConversationActivityTightShadowDarkOpacity_once, &__block_literal_global_516_0);
  }
  return *(double *)&pinnedConversationActivityTightShadowDarkOpacity_sBehavior;
}

void __64__CKUIBehavior_pinnedConversationActivityTightShadowDarkOpacity__block_invoke()
{
  pinnedConversationActivityTightShadowDarkOpacity_sBehavior = 0x3FD5C28F5C28F5C3;
}

- (CGSize)pinnedConversationActivityBroadShadowLightOffset
{
  if (pinnedConversationActivityBroadShadowLightOffset_once != -1) {
    dispatch_once(&pinnedConversationActivityBroadShadowLightOffset_once, &__block_literal_global_518_0);
  }
  double v2 = *(double *)&pinnedConversationActivityBroadShadowLightOffset_sBehavior_1;
  double v3 = 0.0;
  result.height = v2;
  result.width = v3;
  return result;
}

void __64__CKUIBehavior_pinnedConversationActivityBroadShadowLightOffset__block_invoke()
{
  pinnedConversationActivityBroadShadowLightOffset_sBehavior_1 = 0x4020000000000000;
}

- (CGSize)pinnedConversationActivityBroadShadowDarkOffset
{
  if (pinnedConversationActivityBroadShadowDarkOffset_once != -1) {
    dispatch_once(&pinnedConversationActivityBroadShadowDarkOffset_once, &__block_literal_global_520_0);
  }
  double v2 = *(double *)&pinnedConversationActivityBroadShadowDarkOffset_sBehavior_1;
  double v3 = 0.0;
  result.height = v2;
  result.width = v3;
  return result;
}

void __63__CKUIBehavior_pinnedConversationActivityBroadShadowDarkOffset__block_invoke()
{
  pinnedConversationActivityBroadShadowDarkOffset_sBehavior_1 = 0x4018000000000000;
}

- (CGSize)pinnedConversationActivityTightShadowLightOffset
{
  if (pinnedConversationActivityTightShadowLightOffset_once != -1) {
    dispatch_once(&pinnedConversationActivityTightShadowLightOffset_once, &__block_literal_global_522_0);
  }
  double v3 = *((double *)&pinnedConversationActivityTightShadowLightOffset_sBehavior + 1);
  double v2 = *(double *)&pinnedConversationActivityTightShadowLightOffset_sBehavior;
  result.height = v3;
  result.width = v2;
  return result;
}

__n128 __64__CKUIBehavior_pinnedConversationActivityTightShadowLightOffset__block_invoke()
{
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB30];
  pinnedConversationActivityTightShadowLightOffset_sBehavior = *MEMORY[0x1E4F1DB30];
  return result;
}

- (CGSize)pinnedConversationActivityTightShadowDarkOffset
{
  if (pinnedConversationActivityTightShadowDarkOffset_once != -1) {
    dispatch_once(&pinnedConversationActivityTightShadowDarkOffset_once, &__block_literal_global_524_0);
  }
  double v3 = *((double *)&pinnedConversationActivityTightShadowDarkOffset_sBehavior + 1);
  double v2 = *(double *)&pinnedConversationActivityTightShadowDarkOffset_sBehavior;
  result.height = v3;
  result.width = v2;
  return result;
}

__n128 __63__CKUIBehavior_pinnedConversationActivityTightShadowDarkOffset__block_invoke()
{
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB30];
  pinnedConversationActivityTightShadowDarkOffset_sBehavior = *MEMORY[0x1E4F1DB30];
  return result;
}

- (double)pinnedConversationActivitySnapshotContentScaleMostRecent
{
  if (pinnedConversationActivitySnapshotContentScaleMostRecent_once != -1) {
    dispatch_once(&pinnedConversationActivitySnapshotContentScaleMostRecent_once, &__block_literal_global_526_0);
  }
  return *(double *)&pinnedConversationActivitySnapshotContentScaleMostRecent_sBehavior;
}

void __72__CKUIBehavior_pinnedConversationActivitySnapshotContentScaleMostRecent__block_invoke()
{
  pinnedConversationActivitySnapshotContentScaleMostRecent_sBehavior = 0x3FF0000000000000;
}

- (double)pinnedConversationActivitySnapshotContentScaleSecondMostRecent
{
  if (pinnedConversationActivitySnapshotContentScaleSecondMostRecent_once != -1) {
    dispatch_once(&pinnedConversationActivitySnapshotContentScaleSecondMostRecent_once, &__block_literal_global_528_0);
  }
  return *(double *)&pinnedConversationActivitySnapshotContentScaleSecondMostRecent_sBehavior;
}

void __78__CKUIBehavior_pinnedConversationActivitySnapshotContentScaleSecondMostRecent__block_invoke()
{
  pinnedConversationActivitySnapshotContentScaleSecondMostRecent_sBehavior = 0x3FE999999999999ALL;
}

- (double)pinnedConversationActivitySnapshotContentScaleNonRecent
{
  if (pinnedConversationActivitySnapshotContentScaleNonRecent_once != -1) {
    dispatch_once(&pinnedConversationActivitySnapshotContentScaleNonRecent_once, &__block_literal_global_530_0);
  }
  return *(double *)&pinnedConversationActivitySnapshotContentScaleNonRecent_sBehavior;
}

void __71__CKUIBehavior_pinnedConversationActivitySnapshotContentScaleNonRecent__block_invoke()
{
  pinnedConversationActivitySnapshotContentScaleNonRecent_sBehavior = 0x3FE8000000000000;
}

- (UIBlurEffect)conversationListFocusFilterBannerBlurEffect
{
  if (conversationListFocusFilterBannerBlurEffect_once != -1) {
    dispatch_once(&conversationListFocusFilterBannerBlurEffect_once, &__block_literal_global_532_0);
  }
  double v2 = (void *)conversationListFocusFilterBannerBlurEffect_sBehavior;

  return (UIBlurEffect *)v2;
}

void __59__CKUIBehavior_conversationListFocusFilterBannerBlurEffect__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F427D8] effectWithStyle:1100];
  double v1 = (void *)conversationListFocusFilterBannerBlurEffect_sBehavior;
  conversationListFocusFilterBannerBlurEffect_sBehavior = v0;
}

- (UIImage)newComposeImage
{
  if (newComposeImage_once != -1) {
    dispatch_once(&newComposeImage_once, &__block_literal_global_535);
  }
  double v2 = (void *)newComposeImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_newComposeImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Messages-Compose"];
  uint64_t v0 = [v2 imageWithRenderingMode:2];
  double v1 = (void *)newComposeImage_sBehavior;
  newComposeImage_sBehavior = v0;
}

- (UIImage)optionsImage
{
  if (optionsImage_once != -1) {
    dispatch_once(&optionsImage_once, &__block_literal_global_540);
  }
  id v2 = (void *)optionsImage_sBehavior;

  return (UIImage *)v2;
}

void __28__CKUIBehavior_optionsImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Messages-More"];
  uint64_t v0 = [v2 imageWithRenderingMode:2];
  double v1 = (void *)optionsImage_sBehavior;
  optionsImage_sBehavior = v0;
}

- (UIImage)readDNDImage
{
  if (readDNDImage_once != -1) {
    dispatch_once(&readDNDImage_once, &__block_literal_global_547_0);
  }
  id v2 = (void *)readDNDImage_sBehavior;

  return (UIImage *)v2;
}

void __28__CKUIBehavior_readDNDImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] _systemImageNamed:@"moon.fill"];
  double v1 = (void *)readDNDImage_sBehavior;
  readDNDImage_sBehavior = v0;
}

- (UIImage)unreadDNDImage
{
  if (unreadDNDImage_once != -1) {
    dispatch_once(&unreadDNDImage_once, &__block_literal_global_552_0);
  }
  id v2 = (void *)unreadDNDImage_sBehavior;

  return (UIImage *)v2;
}

void __30__CKUIBehavior_unreadDNDImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] _systemImageNamed:@"moon.circle.fill"];
  double v1 = (void *)unreadDNDImage_sBehavior;
  unreadDNDImage_sBehavior = v0;
}

- (UIImage)unreadIndicatorMutedImage
{
  if (unreadIndicatorMutedImage_once != -1) {
    dispatch_once(&unreadIndicatorMutedImage_once, &__block_literal_global_557_0);
  }
  id v2 = (void *)unreadIndicatorMutedImage_sBehavior;

  return (UIImage *)v2;
}

void __41__CKUIBehavior_unreadIndicatorMutedImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"bell.slash.fill"];
  double v1 = +[CKUIBehavior sharedBehaviors];
  id v2 = [v1 theme];
  double v3 = [v2 accessoryIndicatorTintColor];

  uint64_t v4 = [v0 imageWithTintColor:v3 renderingMode:1];

  double v5 = (void *)unreadIndicatorMutedImage_sBehavior;
  unreadIndicatorMutedImage_sBehavior = v4;
}

- (UIImage)unreadIndicatorSelectedImage
{
  if (unreadIndicatorSelectedImage_once != -1) {
    dispatch_once(&unreadIndicatorSelectedImage_once, &__block_literal_global_559_0);
  }
  id v2 = (void *)unreadIndicatorSelectedImage_sBehavior;

  return (UIImage *)v2;
}

void __44__CKUIBehavior_unreadIndicatorSelectedImage__block_invoke()
{
  uint64_t v0 = UIImageGetUnreadIndicator();
  double v1 = +[CKUIBehavior sharedBehaviors];
  id v2 = [v1 theme];
  double v3 = [v2 readSelectedIndicatorColor];

  uint64_t v4 = [v0 imageWithTintColor:v3 renderingMode:1];

  double v5 = (void *)unreadIndicatorSelectedImage_sBehavior;
  unreadIndicatorSelectedImage_sBehavior = v4;
}

- (UIImage)unreadIndicatorUntintedImage
{
  if (unreadIndicatorUntintedImage_once != -1) {
    dispatch_once(&unreadIndicatorUntintedImage_once, &__block_literal_global_561_0);
  }
  id v2 = (void *)unreadIndicatorUntintedImage_sBehavior;

  return (UIImage *)v2;
}

void __44__CKUIBehavior_unreadIndicatorUntintedImage__block_invoke()
{
  uint64_t v0 = UIImageGetUnreadIndicator();
  uint64_t v1 = [v0 imageWithRenderingMode:2];

  id v2 = (void *)unreadIndicatorUntintedImage_sBehavior;
  unreadIndicatorUntintedImage_sBehavior = v1;
}

- (UIImage)unreadIndicatorTintedImage
{
  if (unreadIndicatorTintedImage_once != -1) {
    dispatch_once(&unreadIndicatorTintedImage_once, &__block_literal_global_563_0);
  }
  id v2 = (void *)unreadIndicatorTintedImage_sBehavior;

  return (UIImage *)v2;
}

void __42__CKUIBehavior_unreadIndicatorTintedImage__block_invoke()
{
  uint64_t v0 = UIImageGetUnreadIndicator();
  uint64_t v1 = +[CKUIBehavior sharedBehaviors];
  id v2 = [v1 theme];
  double v3 = [v2 unreadIndicatorColor];

  uint64_t v4 = [v0 imageWithTintColor:v3 renderingMode:1];

  double v5 = (void *)unreadIndicatorTintedImage_sBehavior;
  unreadIndicatorTintedImage_sBehavior = v4;
}

- (UIImage)detailsImage
{
  if (detailsImage_once != -1) {
    dispatch_once(&detailsImage_once, &__block_literal_global_565_0);
  }
  return 0;
}

- (UIImage)trashImage
{
  if (trashImage_once != -1) {
    dispatch_once(&trashImage_once, &__block_literal_global_567_0);
  }
  id v2 = (void *)trashImage_sBehavior;

  return (UIImage *)v2;
}

void __26__CKUIBehavior_trashImage__block_invoke()
{
  id v7 = [MEMORY[0x1E4F42A80] systemImageNamed:@"trash"];
  uint64_t v0 = [MEMORY[0x1E4F42A98] configurationWithScale:0];
  uint64_t v1 = [v7 imageWithSymbolConfiguration:v0];
  id v2 = +[CKUIBehavior sharedBehaviors];
  double v3 = [v2 theme];
  uint64_t v4 = [v3 appTintColor];
  uint64_t v5 = [v1 _flatImageWithColor:v4];
  double v6 = (void *)trashImage_sBehavior;
  trashImage_sBehavior = v5;
}

- (UIImage)messageAcknowledgmentPickerBarBubbleImage
{
  if (messageAcknowledgmentPickerBarBubbleImage_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarBubbleImage_once, &__block_literal_global_572);
  }
  return 0;
}

- (UIImage)defaultWaveformImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__CKUIBehavior_defaultWaveformImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (defaultWaveformImage_once != -1) {
    dispatch_once(&defaultWaveformImage_once, block);
  }
  return (UIImage *)(id)defaultWaveformImage_sBehavior;
}

void __36__CKUIBehavior_defaultWaveformImage__block_invoke(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F42A80] ckImageNamed:@"DefaultWaveformImage"];
  [*(id *)(a1 + 32) waveformDefaultImagePowerLevelCount];
  double v4 = v3 * (double)(unint64_t)[*(id *)(a1 + 32) waveformPowerLevelWidthIncrement];
  [*(id *)(a1 + 32) waveformHeight];
  double v6 = v5;
  id v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42A58]), "initWithBounds:", 0.0, 0.0, v4, v5);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __36__CKUIBehavior_defaultWaveformImage__block_invoke_2;
  v10[3] = &unk_1E5626FF0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  id v11 = v2;
  double v14 = v4;
  double v15 = v6;
  uint64_t v8 = [v7 imageWithActions:v10];

  uint64_t v9 = (void *)defaultWaveformImage_sBehavior;
  defaultWaveformImage_sBehavior = v8;
}

uint64_t __36__CKUIBehavior_defaultWaveformImage__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "drawInRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

- (UIImage)quickSaveButtonImage
{
  if (quickSaveButtonImage_once != -1) {
    dispatch_once(&quickSaveButtonImage_once, &__block_literal_global_579_0);
  }
  id v2 = (void *)quickSaveButtonImage_sBehavior;

  return (UIImage *)v2;
}

void __36__CKUIBehavior_quickSaveButtonImage__block_invoke()
{
  id v3 = [MEMORY[0x1E4F42A80] systemImageNamed:@"square.and.arrow.down"];
  uint64_t v0 = [MEMORY[0x1E4F42A98] configurationWithPointSize:6 weight:16.0];
  uint64_t v1 = [v3 imageWithSymbolConfiguration:v0];
  id v2 = (void *)quickSaveButtonImage_sBehavior;
  quickSaveButtonImage_sBehavior = v1;
}

- (UIImage)quickPinButtonImage
{
  if (quickPinButtonImage_once != -1) {
    dispatch_once(&quickPinButtonImage_once, &__block_literal_global_584);
  }
  id v2 = (void *)quickPinButtonImage_sBehavior;

  return (UIImage *)v2;
}

void __35__CKUIBehavior_quickPinButtonImage__block_invoke()
{
  id v3 = [MEMORY[0x1E4F42A80] systemImageNamed:@"pin"];
  uint64_t v0 = [MEMORY[0x1E4F42A98] configurationWithPointSize:6 weight:16.0];
  uint64_t v1 = [v3 imageWithSymbolConfiguration:v0];
  id v2 = (void *)quickPinButtonImage_sBehavior;
  quickPinButtonImage_sBehavior = v1;
}

- (UIImage)pinnedAdHocConversationRadiantShadowImage
{
  if (pinnedAdHocConversationRadiantShadowImage_once != -1) {
    dispatch_once(&pinnedAdHocConversationRadiantShadowImage_once, &__block_literal_global_589_0);
  }
  id v2 = (void *)pinnedAdHocConversationRadiantShadowImage_sBehavior;

  return (UIImage *)v2;
}

void __57__CKUIBehavior_pinnedAdHocConversationRadiantShadowImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F42A80] systemImageNamed:@"circle.fill"];
  uint64_t v0 = [v2 imageWithRenderingMode:2];
  uint64_t v1 = (void *)pinnedAdHocConversationRadiantShadowImage_sBehavior;
  pinnedAdHocConversationRadiantShadowImage_sBehavior = v0;
}

- (UIImage)pinnedConversationFilteredByFocusIndicatorImage
{
  if (pinnedConversationFilteredByFocusIndicatorImage_once != -1) {
    dispatch_once(&pinnedConversationFilteredByFocusIndicatorImage_once, &__block_literal_global_594_0);
  }
  id v2 = (void *)pinnedConversationFilteredByFocusIndicatorImage_sBehavior;

  return (UIImage *)v2;
}

void __63__CKUIBehavior_pinnedConversationFilteredByFocusIndicatorImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F42A80] systemImageNamed:@"moon.fill"];
  uint64_t v0 = [v2 imageWithRenderingMode:2];
  uint64_t v1 = (void *)pinnedConversationFilteredByFocusIndicatorImage_sBehavior;
  pinnedConversationFilteredByFocusIndicatorImage_sBehavior = v0;
}

- (BOOL)ckShouldUpdatenicknameLabelFont
{
  return 0;
}

- (UIFont)nicknameLabelFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)nicknameLabelFont_sContentSizeCategory_nicknameLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenicknameLabelFont]
    || v11
    || nicknameLabelFont_sIsIncreaseContrastEnabled_nicknameLabelFont != v4
    || nicknameLabelFont_sIsBoldTextEnabled_nicknameLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = nicknameLabelFont_sTextFontSize_nicknameLabelFont,
        *(double *)&nicknameLabelFont_sTextFontSize_nicknameLabelFont != v6)
    || (uint64_t v12 = nicknameLabelFont_sCustomTextFontSize_nicknameLabelFont,
        *(double *)&nicknameLabelFont_sCustomTextFontSize_nicknameLabelFont != v7)
    || (objc_msgSend((id)nicknameLabelFont_sCustomTextFontName_nicknameLabelFont, "isEqualToString:", v10, *(double *)&nicknameLabelFont_sCustomTextFontSize_nicknameLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F43870], 2, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)nicknameLabelFont_sBehavior;
    nicknameLabelFont_sBehavior = v14;

    objc_storeStrong((id *)&nicknameLabelFont_sContentSizeCategory_nicknameLabelFont, v3);
    nicknameLabelFont_sIsIncreaseContrastEnabled_nicknameLabelFont = v4;
    nicknameLabelFont_sIsBoldTextEnabled_nicknameLabelFont = IsBoldTextEnabled;
    nicknameLabelFont_sTextFontSize_nicknameLabelFont = *(void *)&v6;
    nicknameLabelFont_sCustomTextFontSize_nicknameLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&nicknameLabelFont_sCustomTextFontName_nicknameLabelFont, v9);
  }
  double v16 = (UIFont *)(id)nicknameLabelFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatenicknameDescriptionFont
{
  return 0;
}

- (UIFont)nicknameDescriptionFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)nicknameDescriptionFont_sContentSizeCategory_nicknameDescriptionFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenicknameDescriptionFont]
    || v11
    || nicknameDescriptionFont_sIsIncreaseContrastEnabled_nicknameDescriptionFont != v4
    || nicknameDescriptionFont_sIsBoldTextEnabled_nicknameDescriptionFont != IsBoldTextEnabled
    || (uint64_t v12 = nicknameDescriptionFont_sTextFontSize_nicknameDescriptionFont,
        *(double *)&nicknameDescriptionFont_sTextFontSize_nicknameDescriptionFont != v6)
    || (uint64_t v12 = nicknameDescriptionFont_sCustomTextFontSize_nicknameDescriptionFont,
        *(double *)&nicknameDescriptionFont_sCustomTextFontSize_nicknameDescriptionFont != v7)
    || (objc_msgSend((id)nicknameDescriptionFont_sCustomTextFontName_nicknameDescriptionFont, "isEqualToString:", v10, *(double *)&nicknameDescriptionFont_sCustomTextFontSize_nicknameDescriptionFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)nicknameDescriptionFont_sBehavior;
    nicknameDescriptionFont_sBehavior = v14;

    objc_storeStrong((id *)&nicknameDescriptionFont_sContentSizeCategory_nicknameDescriptionFont, v3);
    nicknameDescriptionFont_sIsIncreaseContrastEnabled_nicknameDescriptionFont = v4;
    nicknameDescriptionFont_sIsBoldTextEnabled_nicknameDescriptionFont = IsBoldTextEnabled;
    nicknameDescriptionFont_sTextFontSize_nicknameDescriptionFont = *(void *)&v6;
    nicknameDescriptionFont_sCustomTextFontSize_nicknameDescriptionFont = *(void *)&v7;
    objc_storeStrong((id *)&nicknameDescriptionFont_sCustomTextFontName_nicknameDescriptionFont, v9);
  }
  double v16 = (UIFont *)(id)nicknameDescriptionFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatepinningOnboardingSubtitleLabelFont
{
  return 0;
}

- (UIFont)pinningOnboardingSubtitleLabelFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)pinningOnboardingSubtitleLabelFont_sContentSizeCategory_pinningOnboardingSubtitleLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatepinningOnboardingSubtitleLabelFont](self, "ckShouldUpdatepinningOnboardingSubtitleLabelFont")|| v11|| pinningOnboardingSubtitleLabelFont_sIsIncreaseContrastEnabled_pinningOnboardingSubtitleLabelFont != v4|| pinningOnboardingSubtitleLabelFont_sIsBoldTextEnabled_pinningOnboardingSubtitleLabelFont != IsBoldTextEnabled|| (uint64_t v12 = pinningOnboardingSubtitleLabelFont_sTextFontSize_pinningOnboardingSubtitleLabelFont, *(double *)&pinningOnboardingSubtitleLabelFont_sTextFontSize_pinningOnboardingSubtitleLabelFont != v6)|| (uint64_t v12 = pinningOnboardingSubtitleLabelFont_sCustomTextFontSize_pinningOnboardingSubtitleLabelFont, *(double *)&pinningOnboardingSubtitleLabelFont_sCustomTextFontSize_pinningOnboardingSubtitleLabelFont != v7)|| (objc_msgSend((id)pinningOnboardingSubtitleLabelFont_sCustomTextFontName_pinningOnboardingSubtitleLabelFont, "isEqualToString:", v10, *(double *)&pinningOnboardingSubtitleLabelFont_sCustomTextFontSize_pinningOnboardingSubtitleLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)pinningOnboardingSubtitleLabelFont_sBehavior;
    pinningOnboardingSubtitleLabelFont_sBehavior = v14;

    objc_storeStrong((id *)&pinningOnboardingSubtitleLabelFont_sContentSizeCategory_pinningOnboardingSubtitleLabelFont, v3);
    pinningOnboardingSubtitleLabelFont_sIsIncreaseContrastEnabled_pinningOnboardingSubtitleLabelFont = v4;
    pinningOnboardingSubtitleLabelFont_sIsBoldTextEnabled_pinningOnboardingSubtitleLabelFont = IsBoldTextEnabled;
    pinningOnboardingSubtitleLabelFont_sTextFontSize_pinningOnboardingSubtitleLabelFont = *(void *)&v6;
    pinningOnboardingSubtitleLabelFont_sCustomTextFontSize_pinningOnboardingSubtitleLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&pinningOnboardingSubtitleLabelFont_sCustomTextFontName_pinningOnboardingSubtitleLabelFont, v9);
  }
  double v16 = (UIFont *)(id)pinningOnboardingSubtitleLabelFont_sBehavior;

  return v16;
}

- (Class)transcriptCollectionViewControllerClass
{
  if (transcriptCollectionViewControllerClass_once != -1) {
    dispatch_once(&transcriptCollectionViewControllerClass_once, &__block_literal_global_596);
  }
  id v2 = (void *)transcriptCollectionViewControllerClass_sBehavior;

  return (Class)v2;
}

uint64_t __55__CKUIBehavior_transcriptCollectionViewControllerClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  transcriptCollectionViewControllerClass_sBehavior = result;
  return result;
}

- (Class)chatControllerClass
{
  if (chatControllerClass_once != -1) {
    dispatch_once(&chatControllerClass_once, &__block_literal_global_599_0);
  }
  id v2 = (void *)chatControllerClass_sBehavior;

  return (Class)v2;
}

uint64_t __35__CKUIBehavior_chatControllerClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  chatControllerClass_sBehavior = result;
  return result;
}

- (Class)composeChatControllerClass
{
  if (composeChatControllerClass_once != -1) {
    dispatch_once(&composeChatControllerClass_once, &__block_literal_global_602);
  }
  id v2 = (void *)composeChatControllerClass_sBehavior;

  return (Class)v2;
}

uint64_t __42__CKUIBehavior_composeChatControllerClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  composeChatControllerClass_sBehavior = result;
  return result;
}

- (Class)businessChatControllerClass
{
  if (businessChatControllerClass_once != -1) {
    dispatch_once(&businessChatControllerClass_once, &__block_literal_global_605);
  }
  id v2 = (void *)businessChatControllerClass_sBehavior;

  return (Class)v2;
}

uint64_t __43__CKUIBehavior_businessChatControllerClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  businessChatControllerClass_sBehavior = result;
  return result;
}

- (BOOL)shouldBackfillTranscript
{
  if (shouldBackfillTranscript_once != -1) {
    dispatch_once(&shouldBackfillTranscript_once, &__block_literal_global_608);
  }
  return shouldBackfillTranscript_sBehavior;
}

void __40__CKUIBehavior_shouldBackfillTranscript__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42948] currentDevice];
  uint64_t v1 = [v0 _graphicsQuality];

  if (v1 == 10) {
    char v2 = IMIsRunningInMessagesComposeViewService() ^ 1;
  }
  else {
    char v2 = 1;
  }
  shouldBackfillTranscript_sBehavior = v2;
}

- (BOOL)shouldUseSendAnimation
{
  if (shouldUseSendAnimation_once != -1) {
    dispatch_once(&shouldUseSendAnimation_once, &__block_literal_global_610);
  }
  return 0;
}

- (double)sendAnimationDuration
{
  if (sendAnimationDuration_once != -1) {
    dispatch_once(&sendAnimationDuration_once, &__block_literal_global_612);
  }
  return *(double *)&sendAnimationDuration_sBehavior;
}

void __37__CKUIBehavior_sendAnimationDuration__block_invoke()
{
  sendAnimationDuration_sBehavior = 0x3FD99999A0000000;
}

- (double)transcriptResortTimeout
{
  if (transcriptResortTimeout_once != -1) {
    dispatch_once(&transcriptResortTimeout_once, &__block_literal_global_614);
  }
  return *(double *)&transcriptResortTimeout_sBehavior;
}

void __39__CKUIBehavior_transcriptResortTimeout__block_invoke()
{
  transcriptResortTimeout_sBehavior = 0x4072C00000000000;
}

- (BOOL)showsProgressInNavigationBar
{
  if (showsProgressInNavigationBar_once != -1) {
    dispatch_once(&showsProgressInNavigationBar_once, &__block_literal_global_616);
  }
  return showsProgressInNavigationBar_sBehavior;
}

void __44__CKUIBehavior_showsProgressInNavigationBar__block_invoke()
{
  showsProgressInNavigationBar_sBehavior = 1;
}

- (double)sendProgressTitleTransitionProgressThreshold
{
  if (sendProgressTitleTransitionProgressThreshold_once != -1) {
    dispatch_once(&sendProgressTitleTransitionProgressThreshold_once, &__block_literal_global_618_0);
  }
  return *(double *)&sendProgressTitleTransitionProgressThreshold_sBehavior;
}

void __60__CKUIBehavior_sendProgressTitleTransitionProgressThreshold__block_invoke()
{
  sendProgressTitleTransitionProgressThreshold_sBehavior = 0x3FE0000000000000;
}

- (BOOL)shouldHideStatusBarForFullScreenEffects
{
  if (shouldHideStatusBarForFullScreenEffects_once != -1) {
    dispatch_once(&shouldHideStatusBarForFullScreenEffects_once, &__block_literal_global_620_0);
  }
  return shouldHideStatusBarForFullScreenEffects_sBehavior;
}

void __55__CKUIBehavior_shouldHideStatusBarForFullScreenEffects__block_invoke()
{
  shouldHideStatusBarForFullScreenEffects_sBehavior = 1;
}

- (BOOL)effectPickerPresentsSelectionView
{
  if (effectPickerPresentsSelectionView_once != -1) {
    dispatch_once(&effectPickerPresentsSelectionView_once, &__block_literal_global_622_0);
  }
  return 0;
}

- (BOOL)effectPickerShowsCloseButton
{
  if (effectPickerShowsCloseButton_once != -1) {
    dispatch_once(&effectPickerShowsCloseButton_once, &__block_literal_global_624_0);
  }
  return 0;
}

- (int64_t)transcriptContentInsetBehavior
{
  if (transcriptContentInsetBehavior_once != -1) {
    dispatch_once(&transcriptContentInsetBehavior_once, &__block_literal_global_626);
  }
  if (transcriptContentInsetBehavior_sBehavior) {
    return 2;
  }
  else {
    return 0;
  }
}

void __46__CKUIBehavior_transcriptContentInsetBehavior__block_invoke()
{
  transcriptContentInsetBehavior_sBehavior = 1;
}

- (double)progressThresholdForTitleUpdateAnimation
{
  return 0.2;
}

- (double)_transcriptAnimationScaleFactor
{
  return 1.0;
}

- (double)fadeInBubbleAnimationDuration
{
  [(CKUIBehavior *)self _transcriptAnimationScaleFactor];
  return v2 * 0.5;
}

- (double)fadeInReplyPreviewAnimationDuration
{
  return 0.3;
}

- (double)scrollInNewMessageAnimationDuration
{
  [(CKUIBehavior *)self _transcriptAnimationScaleFactor];
  return v2 * 0.3;
}

- (double)throwMessageAnimationDuration
{
  [(CKUIBehavior *)self _transcriptAnimationScaleFactor];
  return v2 * 0.5;
}

- (double)resizeMessageEntryViewAnimationDuration
{
  [(CKUIBehavior *)self _transcriptAnimationScaleFactor];
  return v2 * 0.1;
}

- (double)editingTransitionAnimationDuration
{
  [(CKUIBehavior *)self _transcriptAnimationScaleFactor];
  return v2 * 0.3;
}

- (double)updateTranscriptInsetsAnimationDuration
{
  [(CKUIBehavior *)self _transcriptAnimationScaleFactor];
  return v2 * 0.2;
}

- (UIImage)messageEditingRejectButtonImage
{
  v14[2] = *MEMORY[0x1E4F143B8];
  double v2 = [MEMORY[0x1E4F42A98] configurationWithTextStyle:*MEMORY[0x1E4F438F0] scale:3];
  id v3 = (void *)MEMORY[0x1E4F428B8];
  int v4 = [MEMORY[0x1E4F428B8] systemGray2Color];
  double v5 = [MEMORY[0x1E4F428B8] systemGray5Color];
  double v6 = [v3 dynamicColorWithLightColor:v4 darkColor:v5];

  double v7 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v8 = [MEMORY[0x1E4F428B8] systemWhiteColor];
  v14[0] = v8;
  v14[1] = v6;
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
  NSComparisonResult v10 = [v7 configurationWithPaletteColors:v9];

  NSComparisonResult v11 = [v2 configurationByApplyingConfiguration:v10];
  uint64_t v12 = [MEMORY[0x1E4F42A80] systemImageNamed:@"xmark.circle.fill" withConfiguration:v11];

  return (UIImage *)v12;
}

- (UIImage)messageEditingBlueConfirmButtonImage
{
  id v3 = [MEMORY[0x1E4F428B8] systemBlueColor];
  int v4 = [(CKUIBehavior *)self _messageEditingConfirmButtonImageWithButtonColor:v3];

  return (UIImage *)v4;
}

- (UIImage)messageEditingGreenConfirmButtonImage
{
  id v3 = [MEMORY[0x1E4F428B8] systemGreenColor];
  int v4 = [(CKUIBehavior *)self _messageEditingConfirmButtonImageWithButtonColor:v3];

  return (UIImage *)v4;
}

- (id)_messageEditingConfirmButtonImageWithButtonColor:(id)a3
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v4 = *MEMORY[0x1E4F438F0];
  id v5 = a3;
  double v6 = [v3 configurationWithTextStyle:v4 scale:3];
  double v7 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v8 = [MEMORY[0x1E4F428B8] systemWhiteColor];
  v14[0] = v8;
  v14[1] = v5;
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
  NSComparisonResult v10 = [v7 configurationWithPaletteColors:v9];

  NSComparisonResult v11 = [v6 configurationByApplyingConfiguration:v10];
  uint64_t v12 = [MEMORY[0x1E4F42A80] systemImageNamed:@"checkmark.circle.fill" withConfiguration:v11];

  return v12;
}

- (UIImage)messageEditingConfirmDisabledButtonImage
{
  v11[2] = *MEMORY[0x1E4F143B8];
  double v2 = [MEMORY[0x1E4F42A98] configurationWithTextStyle:*MEMORY[0x1E4F438F0] scale:3];
  id v3 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v4 = [MEMORY[0x1E4F428B8] systemWhiteColor];
  v11[0] = v4;
  id v5 = [MEMORY[0x1E4F428B8] systemGray5Color];
  v11[1] = v5;
  double v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:2];
  double v7 = [v3 configurationWithPaletteColors:v6];

  uint64_t v8 = [v2 configurationByApplyingConfiguration:v7];
  uint64_t v9 = [MEMORY[0x1E4F42A80] systemImageNamed:@"checkmark.circle.fill" withConfiguration:v8];

  return (UIImage *)v9;
}

- (UIButtonConfiguration)messageEditingRejectButtonBaseConfiguration
{
  double v2 = [MEMORY[0x1E4F427E8] plainButtonConfiguration];
  id v3 = [MEMORY[0x1E4F428B8] clearColor];
  uint64_t v4 = [v2 background];
  [v4 setBackgroundColor:v3];

  objc_msgSend(v2, "setContentInsets:", *MEMORY[0x1E4F424F0], *(double *)(MEMORY[0x1E4F424F0] + 8), *(double *)(MEMORY[0x1E4F424F0] + 16), *(double *)(MEMORY[0x1E4F424F0] + 24));

  return (UIButtonConfiguration *)v2;
}

- (UIButtonConfiguration)messageEditingConfirmButtonBaseConfiguration
{
  double v2 = [MEMORY[0x1E4F427E8] plainButtonConfiguration];
  id v3 = [MEMORY[0x1E4F428B8] clearColor];
  uint64_t v4 = [v2 background];
  [v4 setBackgroundColor:v3];

  objc_msgSend(v2, "setContentInsets:", *MEMORY[0x1E4F424F0], *(double *)(MEMORY[0x1E4F424F0] + 8), *(double *)(MEMORY[0x1E4F424F0] + 16), *(double *)(MEMORY[0x1E4F424F0] + 24));

  return (UIButtonConfiguration *)v2;
}

- (void)updateMessageEditingConfirmButtonConfiguration:(id)a3 forButtonColor:(char)a4 isEnabled:(BOOL)a5
{
  int v6 = a4;
  id v10 = a3;
  if (a5)
  {
    if (v6) {
      [(CKUIBehavior *)self messageEditingBlueConfirmButtonImage];
    }
    else {
    uint64_t v8 = [(CKUIBehavior *)self messageEditingGreenConfirmButtonImage];
    }
  }
  else
  {
    uint64_t v8 = [(CKUIBehavior *)self messageEditingConfirmDisabledButtonImage];
  }
  uint64_t v9 = (void *)v8;
  [v10 setImage:v8];
}

- (BOOL)ckShouldUpdatereaderFont
{
  return 0;
}

- (UIFont)readerFont
{
  CKPreferredContentSizeCategory();
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)readerFont_sContentSizeCategory_readerFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatereaderFont]
    || v11
    || readerFont_sIsIncreaseContrastEnabled_readerFont != v4
    || readerFont_sIsBoldTextEnabled_readerFont != IsBoldTextEnabled
    || (uint64_t v12 = readerFont_sTextFontSize_readerFont, *(double *)&readerFont_sTextFontSize_readerFont != v6)
    || (uint64_t v12 = readerFont_sCustomTextFontSize_readerFont, *(double *)&readerFont_sCustomTextFontSize_readerFont != v7)
    || (objc_msgSend((id)readerFont_sCustomTextFontName_readerFont, "isEqualToString:", v10, *(double *)&readerFont_sCustomTextFontSize_readerFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    uint64_t v14 = (void *)readerFont_sBehavior;
    readerFont_sBehavior = v13;

    objc_storeStrong((id *)&readerFont_sContentSizeCategory_readerFont, v3);
    readerFont_sIsIncreaseContrastEnabled_readerFont = v4;
    readerFont_sIsBoldTextEnabled_readerFont = IsBoldTextEnabled;
    readerFont_sTextFontSize_readerFont = *(void *)&v6;
    readerFont_sCustomTextFontSize_readerFont = *(void *)&v7;
    objc_storeStrong((id *)&readerFont_sCustomTextFontName_readerFont, v9);
  }
  double v15 = (UIFont *)(id)readerFont_sBehavior;

  return v15;
}

- (double)readerContentInset
{
  if (readerContentInset_once != -1) {
    dispatch_once(&readerContentInset_once, &__block_literal_global_635_0);
  }
  return *(double *)&readerContentInset_sBehavior;
}

void __34__CKUIBehavior_readerContentInset__block_invoke()
{
  readerContentInset_sBehavior = 0x402E000000000000;
}

- (UIEdgeInsets)readerInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __28__CKUIBehavior_readerInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (readerInsets_once != -1) {
    dispatch_once(&readerInsets_once, block);
  }
  double v2 = *(double *)&readerInsets_sBehavior_0;
  double v3 = *(double *)&readerInsets_sBehavior_2;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v3;
  result.double left = v4;
  result.double top = v2;
  return result;
}

uint64_t __28__CKUIBehavior_readerInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) readerContentInset];
  uint64_t v3 = v2;
  uint64_t result = [*(id *)(a1 + 32) readerContentInset];
  readerInsets_sBehavior_0 = v3;
  readerInsets_sBehavior_2 = v5;
  return result;
}

- (UIImage)forwardImage
{
  if (forwardImage_once != -1) {
    dispatch_once(&forwardImage_once, &__block_literal_global_637_0);
  }
  uint64_t v2 = (void *)forwardImage_sBehavior;

  return (UIImage *)v2;
}

void __28__CKUIBehavior_forwardImage__block_invoke()
{
  id v5 = [MEMORY[0x1E4F42A80] systemImageNamed:@"arrowshape.turn.up.forward"];
  uint64_t v0 = +[CKUIBehavior sharedBehaviors];
  uint64_t v1 = [v0 theme];
  uint64_t v2 = [v1 appTintColor];
  uint64_t v3 = [v5 _flatImageWithColor:v2];
  double v4 = (void *)forwardImage_sBehavior;
  forwardImage_sBehavior = v3;
}

- (BOOL)ckShouldUpdatestatusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen
{
  return 0;
}

- (NSAttributedString)statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sContentSizeCategory_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen, v3);
  uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdatestatusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen](self, "ckShouldUpdatestatusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen")|| v11|| statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sIsIncreaseContrastEnabled_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen != v4|| statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sIsBoldTextEnabled_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen != IsBoldTextEnabled|| *(double *)&statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sTextFontSize_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen != v6|| *(double *)&statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sCustomTextFontSize_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen != v7|| (objc_msgSend((id)statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sCustomTextFontName_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen, "isEqualToString:", v10, *(double *)&statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sCustomTextFontSize_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen) & 1) == 0)
  {
    id v13 = objc_alloc(MEMORY[0x1E4F28B18]);
    uint64_t v14 = IMSharedUtilitiesFrameworkBundle();
    double v15 = [v14 localizedStringForKey:@"MESSAGE_SOMEONE_SUBTEXT" value:&stru_1EDE4CA38 table:@"CommSafetyLocalizable"];
    double v16 = [(CKUIBehavior *)self centerTranscriptButtonTextAttributes];
    uint64_t v17 = [v13 initWithString:v15 attributes:v16];

    uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v18 = (void *)statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sBehavior;
    statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sBehavior = v17;

    objc_storeStrong((id *)&statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sContentSizeCategory_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen, v3);
    statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sIsIncreaseContrastEnabled_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen = v4;
    statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sIsBoldTextEnabled_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen = IsBoldTextEnabled;
    statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sTextFontSize_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen = *(void *)&v6;
    statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sCustomTextFontSize_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen = *(void *)&v7;
    objc_storeStrong((id *)&statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen_sCustomTextFontName_statusCommSafetyMessageSomeoneButtonTranscriptTextOverThirteen, v9);
  }
  double v19 = (NSAttributedString *)(id)v12[66];

  return v19;
}

- (BOOL)ckShouldUpdatestatusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen
{
  return 0;
}

- (NSAttributedString)statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sContentSizeCategory_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen, v3);
  uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdatestatusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen](self, "ckShouldUpdatestatusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen")|| v11|| statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sIsIncreaseContrastEnabled_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen != v4|| statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sIsBoldTextEnabled_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen != IsBoldTextEnabled|| *(double *)&statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sTextFontSize_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen != v6|| *(double *)&statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sCustomTextFontSize_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen != v7|| (objc_msgSend((id)statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sCustomTextFontName_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen, "isEqualToString:", v10, *(double *)&statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sCustomTextFontSize_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen) & 1) == 0)
  {
    id v13 = objc_alloc(MEMORY[0x1E4F28B18]);
    uint64_t v14 = IMSharedUtilitiesFrameworkBundle();
    double v15 = [v14 localizedStringForKey:@"MESSAGE_GROWNUP_SUBTEXT" value:&stru_1EDE4CA38 table:@"CommSafetyLocalizable"];
    double v16 = [(CKUIBehavior *)self centerTranscriptButtonTextAttributes];
    uint64_t v17 = [v13 initWithString:v15 attributes:v16];

    uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v18 = (void *)statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sBehavior;
    statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sBehavior = v17;

    objc_storeStrong((id *)&statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sContentSizeCategory_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen, v3);
    statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sIsIncreaseContrastEnabled_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen = v4;
    statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sIsBoldTextEnabled_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen = IsBoldTextEnabled;
    statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sTextFontSize_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen = *(void *)&v6;
    statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sCustomTextFontSize_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen = *(void *)&v7;
    objc_storeStrong((id *)&statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen_sCustomTextFontName_statusCommSafetyMessageGrownupButtonTranscriptTextUnderThirteen, v9);
  }
  double v19 = (NSAttributedString *)(id)v12[69];

  return v19;
}

- (BOOL)ckShouldUpdatestatusCommSafetySensitiveReceiveButtonTranscriptText
{
  return 0;
}

- (NSAttributedString)statusCommSafetySensitiveReceiveButtonTranscriptText
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)statusCommSafetySensitiveReceiveButtonTranscriptText_sContentSizeCategory_statusCommSafetySensitiveReceiveButtonTranscriptText, v3);
  if (-[CKUIBehavior ckShouldUpdatestatusCommSafetySensitiveReceiveButtonTranscriptText](self, "ckShouldUpdatestatusCommSafetySensitiveReceiveButtonTranscriptText")|| v11|| statusCommSafetySensitiveReceiveButtonTranscriptText_sIsIncreaseContrastEnabled_statusCommSafetySensitiveReceiveButtonTranscriptText != v4|| statusCommSafetySensitiveReceiveButtonTranscriptText_sIsBoldTextEnabled_statusCommSafetySensitiveReceiveButtonTranscriptText != IsBoldTextEnabled|| *(double *)&statusCommSafetySensitiveReceiveButtonTranscriptText_sTextFontSize_statusCommSafetySensitiveReceiveButtonTranscriptText != v6|| *(double *)&statusCommSafetySensitiveReceiveButtonTranscriptText_sCustomTextFontSize_statusCommSafetySensitiveReceiveButtonTranscriptText != v7|| (objc_msgSend((id)statusCommSafetySensitiveReceiveButtonTranscriptText_sCustomTextFontName_statusCommSafetySensitiveReceiveButtonTranscriptText, "isEqualToString:", v10, *(double *)&statusCommSafetySensitiveReceiveButtonTranscriptText_sCustomTextFontSize_statusCommSafetySensitiveReceiveButtonTranscriptText) & 1) == 0)
  {
    id v12 = objc_alloc(MEMORY[0x1E4F28B18]);
    id v13 = IMSharedUtilitiesFrameworkBundle();
    uint64_t v14 = [v13 localizedStringForKey:@"VIEW_PHOTO" value:&stru_1EDE4CA38 table:@"CommSafetyLocalizable"];
    uint64_t v15 = [v12 initWithString:v14 attributes:0];

    double v16 = (void *)statusCommSafetySensitiveReceiveButtonTranscriptText_sBehavior;
    statusCommSafetySensitiveReceiveButtonTranscriptText_sBehavior = v15;

    objc_storeStrong((id *)&statusCommSafetySensitiveReceiveButtonTranscriptText_sContentSizeCategory_statusCommSafetySensitiveReceiveButtonTranscriptText, v3);
    statusCommSafetySensitiveReceiveButtonTranscriptText_sIsIncreaseContrastEnabled_statusCommSafetySensitiveReceiveButtonTranscriptText = v4;
    statusCommSafetySensitiveReceiveButtonTranscriptText_sIsBoldTextEnabled_statusCommSafetySensitiveReceiveButtonTranscriptText = IsBoldTextEnabled;
    statusCommSafetySensitiveReceiveButtonTranscriptText_sTextFontSize_statusCommSafetySensitiveReceiveButtonTranscriptText = *(void *)&v6;
    statusCommSafetySensitiveReceiveButtonTranscriptText_sCustomTextFontSize_statusCommSafetySensitiveReceiveButtonTranscriptText = *(void *)&v7;
    objc_storeStrong((id *)&statusCommSafetySensitiveReceiveButtonTranscriptText_sCustomTextFontName_statusCommSafetySensitiveReceiveButtonTranscriptText, v9);
  }
  uint64_t v17 = (NSAttributedString *)(id)statusCommSafetySensitiveReceiveButtonTranscriptText_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatestatusCommSafetySensitiveReceiveMultiButtonTranscriptText
{
  return 0;
}

- (NSAttributedString)statusCommSafetySensitiveReceiveMultiButtonTranscriptText
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sContentSizeCategory_statusCommSafetySensitiveReceiveMultiButtonTranscriptText, v3);
  if (-[CKUIBehavior ckShouldUpdatestatusCommSafetySensitiveReceiveMultiButtonTranscriptText](self, "ckShouldUpdatestatusCommSafetySensitiveReceiveMultiButtonTranscriptText")|| v11|| statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sIsIncreaseContrastEnabled_statusCommSafetySensitiveReceiveMultiButtonTranscriptText != v4|| statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sIsBoldTextEnabled_statusCommSafetySensitiveReceiveMultiButtonTranscriptText != IsBoldTextEnabled|| *(double *)&statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sTextFontSize_statusCommSafetySensitiveReceiveMultiButtonTranscriptText != v6|| *(double *)&statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sCustomTextFontSize_statusCommSafetySensitiveReceiveMultiButtonTranscriptText != v7|| (objc_msgSend((id)statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sCustomTextFontName_statusCommSafetySensitiveReceiveMultiButtonTranscriptText, "isEqualToString:", v10, *(double *)&statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sCustomTextFontSize_statusCommSafetySensitiveReceiveMultiButtonTranscriptText) & 1) == 0)
  {
    id v12 = objc_alloc(MEMORY[0x1E4F28B18]);
    id v13 = IMSharedUtilitiesFrameworkBundle();
    uint64_t v14 = [v13 localizedStringForKey:@"VIEW_PHOTOS" value:&stru_1EDE4CA38 table:@"CommSafetyLocalizable"];
    uint64_t v15 = [v12 initWithString:v14 attributes:0];

    double v16 = (void *)statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sBehavior;
    statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sBehavior = v15;

    objc_storeStrong((id *)&statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sContentSizeCategory_statusCommSafetySensitiveReceiveMultiButtonTranscriptText, v3);
    statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sIsIncreaseContrastEnabled_statusCommSafetySensitiveReceiveMultiButtonTranscriptText = v4;
    statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sIsBoldTextEnabled_statusCommSafetySensitiveReceiveMultiButtonTranscriptText = IsBoldTextEnabled;
    statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sTextFontSize_statusCommSafetySensitiveReceiveMultiButtonTranscriptText = *(void *)&v6;
    statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sCustomTextFontSize_statusCommSafetySensitiveReceiveMultiButtonTranscriptText = *(void *)&v7;
    objc_storeStrong((id *)&statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sCustomTextFontName_statusCommSafetySensitiveReceiveMultiButtonTranscriptText, v9);
  }
  uint64_t v17 = (NSAttributedString *)(id)statusCommSafetySensitiveReceiveMultiButtonTranscriptText_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatesensitiveLabelFont
{
  return 0;
}

- (UIFont)sensitiveLabelFont
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)sensitiveLabelFont_sContentSizeCategory_sensitiveLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesensitiveLabelFont]
    || v11
    || sensitiveLabelFont_sIsIncreaseContrastEnabled_sensitiveLabelFont != v4
    || sensitiveLabelFont_sIsBoldTextEnabled_sensitiveLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = sensitiveLabelFont_sTextFontSize_sensitiveLabelFont,
        *(double *)&sensitiveLabelFont_sTextFontSize_sensitiveLabelFont != v6)
    || (uint64_t v12 = sensitiveLabelFont_sCustomTextFontSize_sensitiveLabelFont,
        *(double *)&sensitiveLabelFont_sCustomTextFontSize_sensitiveLabelFont != v7)
    || (objc_msgSend((id)sensitiveLabelFont_sCustomTextFontName_sensitiveLabelFont, "isEqualToString:", v10, *(double *)&sensitiveLabelFont_sCustomTextFontSize_sensitiveLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    uint64_t v14 = (void *)sensitiveLabelFont_sBehavior;
    sensitiveLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&sensitiveLabelFont_sContentSizeCategory_sensitiveLabelFont, v3);
    sensitiveLabelFont_sIsIncreaseContrastEnabled_sensitiveLabelFont = v4;
    sensitiveLabelFont_sIsBoldTextEnabled_sensitiveLabelFont = IsBoldTextEnabled;
    sensitiveLabelFont_sTextFontSize_sensitiveLabelFont = *(void *)&v6;
    sensitiveLabelFont_sCustomTextFontSize_sensitiveLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&sensitiveLabelFont_sCustomTextFontName_sensitiveLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)sensitiveLabelFont_sBehavior;

  return v15;
}

- (UIColor)sensitiveLabelColor
{
  if (sensitiveLabelColor_once != -1) {
    dispatch_once(&sensitiveLabelColor_once, &__block_literal_global_658_0);
  }
  uint64_t v2 = (void *)sensitiveLabelColor_sBehavior;

  return (UIColor *)v2;
}

void __35__CKUIBehavior_sensitiveLabelColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] secondaryLabelColor];
  uint64_t v1 = (void *)sensitiveLabelColor_sBehavior;
  sensitiveLabelColor_sBehavior = v0;
}

- (double)sensitiveLabelPadding
{
  if (sensitiveLabelPadding_once != -1) {
    dispatch_once(&sensitiveLabelPadding_once, &__block_literal_global_660);
  }
  return *(double *)&sensitiveLabelPadding_sBehavior;
}

void __37__CKUIBehavior_sensitiveLabelPadding__block_invoke()
{
  sensitiveLabelPadding_sBehavior = 0x4034000000000000;
}

- (UIColor)obscurableBalloonElementTintColor
{
  if (obscurableBalloonElementTintColor_once != -1) {
    dispatch_once(&obscurableBalloonElementTintColor_once, &__block_literal_global_662);
  }
  uint64_t v2 = (void *)obscurableBalloonElementTintColor_sBehavior;

  return (UIColor *)v2;
}

void __49__CKUIBehavior_obscurableBalloonElementTintColor__block_invoke()
{
  id v2 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v0 = [v2 colorWithAlphaComponent:0.8];
  uint64_t v1 = (void *)obscurableBalloonElementTintColor_sBehavior;
  obscurableBalloonElementTintColor_sBehavior = v0;
}

- (UIColor)obscurableBalloonBadgeTintColor
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __47__CKUIBehavior_obscurableBalloonBadgeTintColor__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (obscurableBalloonBadgeTintColor_once != -1) {
    dispatch_once(&obscurableBalloonBadgeTintColor_once, block);
  }
  return (UIColor *)(id)obscurableBalloonBadgeTintColor_sBehavior;
}

void __47__CKUIBehavior_obscurableBalloonBadgeTintColor__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) sensitiveLabelColor];
  id v2 = (void *)obscurableBalloonBadgeTintColor_sBehavior;
  obscurableBalloonBadgeTintColor_sBehavior = v1;
}

- (double)obscurableBalloonHorizontalPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __50__CKUIBehavior_obscurableBalloonHorizontalPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (obscurableBalloonHorizontalPadding_once != -1) {
    dispatch_once(&obscurableBalloonHorizontalPadding_once, block);
  }
  return *(double *)&obscurableBalloonHorizontalPadding_sBehavior;
}

void __50__CKUIBehavior_obscurableBalloonHorizontalPadding__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double v2 = v1;
  uint64_t v3 = [MEMORY[0x1E4F42738] sharedApplication];
  uint64_t v4 = [v3 userInterfaceLayoutDirection];

  double v5 = 7.0;
  if (v4 == 1) {
    double v5 = v2 + 7.0;
  }
  obscurableBalloonHorizontalPadding_sBehavior = *(void *)&v5;
}

- (double)obscurableBalloonVerticalPadding
{
  if (obscurableBalloonVerticalPadding_once != -1) {
    dispatch_once(&obscurableBalloonVerticalPadding_once, &__block_literal_global_664);
  }
  return *(double *)&obscurableBalloonVerticalPadding_sBehavior;
}

void __48__CKUIBehavior_obscurableBalloonVerticalPadding__block_invoke()
{
  obscurableBalloonVerticalPadding_sBehavior = 0x401C000000000000;
}

- (int64_t)obscurableBalloonBlurMaterial
{
  if (obscurableBalloonBlurMaterial_once != -1) {
    dispatch_once(&obscurableBalloonBlurMaterial_once, &__block_literal_global_666);
  }
  if (obscurableBalloonBlurMaterial_sBehavior) {
    return 12;
  }
  else {
    return 0;
  }
}

void __45__CKUIBehavior_obscurableBalloonBlurMaterial__block_invoke()
{
  obscurableBalloonBlurMaterial_sBehavior = 1;
}

- (int64_t)obscurableBalloonButtonBlurMaterial
{
  if (obscurableBalloonButtonBlurMaterial_once != -1) {
    dispatch_once(&obscurableBalloonButtonBlurMaterial_once, &__block_literal_global_668);
  }
  if (obscurableBalloonButtonBlurMaterial_sBehavior) {
    return 16;
  }
  else {
    return 0;
  }
}

void __51__CKUIBehavior_obscurableBalloonButtonBlurMaterial__block_invoke()
{
  obscurableBalloonButtonBlurMaterial_sBehavior = 1;
}

- (int64_t)obscurableBalloonBlurMaterialInterfaceStyle
{
  if (obscurableBalloonBlurMaterialInterfaceStyle_once != -1) {
    dispatch_once(&obscurableBalloonBlurMaterialInterfaceStyle_once, &__block_literal_global_670);
  }
  return obscurableBalloonBlurMaterialInterfaceStyle_sBehavior;
}

void __59__CKUIBehavior_obscurableBalloonBlurMaterialInterfaceStyle__block_invoke()
{
  obscurableBalloonBlurMaterialInterfaceStyle_sBehavior = 1;
}

- (UIButtonConfiguration)obscurableBalloonShowButtonConfiguration
{
  if (obscurableBalloonShowButtonConfiguration_once != -1) {
    dispatch_once(&obscurableBalloonShowButtonConfiguration_once, &__block_literal_global_672);
  }
  double v2 = (void *)obscurableBalloonShowButtonConfiguration_sBehavior;

  return (UIButtonConfiguration *)v2;
}

void __56__CKUIBehavior_obscurableBalloonShowButtonConfiguration__block_invoke()
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F427E8] plainButtonConfiguration];
  double v1 = [MEMORY[0x1E4F427B0] clearConfiguration];
  double v2 = [MEMORY[0x1E4F42A98] configurationWithScale:1];
  uint64_t v3 = [MEMORY[0x1E4F428B8] secondarySystemFillColor];
  [v1 setBackgroundColor:v3];

  [v0 setBackground:v1];
  uint64_t v4 = [MEMORY[0x1E4F42A80] systemImageNamed:@"eye.fill" withConfiguration:v2];
  [v0 setImage:v4];

  [v0 setImagePlacement:2];
  double v5 = [MEMORY[0x1E4F428B8] labelColor];
  [v0 setBaseForegroundColor:v5];

  [v0 setCornerStyle:4];
  [v0 setImagePadding:6.0];
  id v6 = objc_alloc(MEMORY[0x1E4F28B18]);
  double v7 = IMSharedUtilitiesFrameworkBundle();
  uint64_t v8 = [v7 localizedStringForKey:@"SENSITIVE_CONTENT_SHOW_BUTTON_TITLE" value:&stru_1EDE4CA38 table:@"CommSafetyLocalizable"];
  uint64_t v13 = *MEMORY[0x1E4FB06F8];
  uint64_t v9 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43870]);
  v14[0] = v9;
  id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
  NSComparisonResult v11 = (void *)[v6 initWithString:v8 attributes:v10];
  [v0 setAttributedTitle:v11];

  uint64_t v12 = (void *)obscurableBalloonShowButtonConfiguration_sBehavior;
  obscurableBalloonShowButtonConfiguration_sBehavior = (uint64_t)v0;
}

- (UIButtonConfiguration)obscurableBalloonWarningButtonConfiguration
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __59__CKUIBehavior_obscurableBalloonWarningButtonConfiguration__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (obscurableBalloonWarningButtonConfiguration_once != -1) {
    dispatch_once(&obscurableBalloonWarningButtonConfiguration_once, block);
  }
  return (UIButtonConfiguration *)(id)obscurableBalloonWarningButtonConfiguration_sBehavior;
}

void __59__CKUIBehavior_obscurableBalloonWarningButtonConfiguration__block_invoke(uint64_t a1)
{
  double v2 = [MEMORY[0x1E4F427E8] plainButtonConfiguration];
  uint64_t v3 = [MEMORY[0x1E4F42A98] configurationWithScale:2];
  uint64_t v4 = [MEMORY[0x1E4F42A80] systemImageNamed:@"exclamationmark.triangle.fill" withConfiguration:v3];
  [v2 setImage:v4];

  double v5 = [MEMORY[0x1E4F428B8] labelColor];
  [v2 setBaseForegroundColor:v5];

  [v2 setCornerStyle:4];
  id v6 = [*(id *)(a1 + 32) sensitiveLabelFont];
  [v6 _scaledValueForValue:1.0];
  double v8 = v7;

  [v2 contentInsets];
  [v2 setContentInsets:v9 - v8];

  id v10 = (void *)obscurableBalloonWarningButtonConfiguration_sBehavior;
  obscurableBalloonWarningButtonConfiguration_sBehavior = (uint64_t)v2;
}

- (UIBackgroundConfiguration)obscurableBalloonWarningButtonBackgroundConfigurationObscured
{
  if (obscurableBalloonWarningButtonBackgroundConfigurationObscured_once != -1) {
    dispatch_once(&obscurableBalloonWarningButtonBackgroundConfigurationObscured_once, &__block_literal_global_684);
  }
  double v2 = (void *)obscurableBalloonWarningButtonBackgroundConfigurationObscured_sBehavior;

  return (UIBackgroundConfiguration *)v2;
}

void __77__CKUIBehavior_obscurableBalloonWarningButtonBackgroundConfigurationObscured__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F427B0] clearConfiguration];
  double v1 = [MEMORY[0x1E4F428B8] secondarySystemFillColor];
  [v0 setBackgroundColor:v1];

  double v2 = (void *)obscurableBalloonWarningButtonBackgroundConfigurationObscured_sBehavior;
  obscurableBalloonWarningButtonBackgroundConfigurationObscured_sBehavior = (uint64_t)v0;
}

- (UIBackgroundConfiguration)obscurableBalloonWarningButtonBackgroundConfigurationRevealed
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __77__CKUIBehavior_obscurableBalloonWarningButtonBackgroundConfigurationRevealed__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (obscurableBalloonWarningButtonBackgroundConfigurationRevealed_once != -1) {
    dispatch_once(&obscurableBalloonWarningButtonBackgroundConfigurationRevealed_once, block);
  }
  return (UIBackgroundConfiguration *)(id)obscurableBalloonWarningButtonBackgroundConfigurationRevealed_sBehavior;
}

void __77__CKUIBehavior_obscurableBalloonWarningButtonBackgroundConfigurationRevealed__block_invoke(uint64_t a1)
{
  double v2 = [MEMORY[0x1E4F427B0] clearConfiguration];
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F427D8], "effectWithStyle:", objc_msgSend(*(id *)(a1 + 32), "obscurableBalloonButtonBlurMaterial"));
  [v2 setVisualEffect:v3];

  uint64_t v4 = (void *)obscurableBalloonWarningButtonBackgroundConfigurationRevealed_sBehavior;
  obscurableBalloonWarningButtonBackgroundConfigurationRevealed_sBehavior = (uint64_t)v2;
}

- (UIImage)obscurableBalloonObscuredContentBadgeImage
{
  if (obscurableBalloonObscuredContentBadgeImage_once != -1) {
    dispatch_once(&obscurableBalloonObscuredContentBadgeImage_once, &__block_literal_global_686);
  }
  double v2 = (void *)obscurableBalloonObscuredContentBadgeImage_sBehavior;

  return (UIImage *)v2;
}

void __58__CKUIBehavior_obscurableBalloonObscuredContentBadgeImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A98] configurationWithTextStyle:*MEMORY[0x1E4F43870]];
  uint64_t v1 = [MEMORY[0x1E4F42A80] systemImageNamed:@"eye.slash.fill" withConfiguration:v0];

  double v2 = (void *)obscurableBalloonObscuredContentBadgeImage_sBehavior;
  obscurableBalloonObscuredContentBadgeImage_sBehavior = v1;
}

- (BOOL)ckShouldUpdateobscuredBalloonMinimumSizeForAdult
{
  return 0;
}

- (CGSize)obscuredBalloonMinimumSizeForAdult
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)obscuredBalloonMinimumSizeForAdult_sContentSizeCategory_obscuredBalloonMinimumSizeForAdult, v3);
  uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdateobscuredBalloonMinimumSizeForAdult](self, "ckShouldUpdateobscuredBalloonMinimumSizeForAdult")|| v10|| obscuredBalloonMinimumSizeForAdult_sIsBoldTextEnabled_obscuredBalloonMinimumSizeForAdult != IsBoldTextEnabled|| (uint64_t v11 = obscuredBalloonMinimumSizeForAdult_sTextFontSize_obscuredBalloonMinimumSizeForAdult, *(double *)&obscuredBalloonMinimumSizeForAdult_sTextFontSize_obscuredBalloonMinimumSizeForAdult != v5)|| (uint64_t v11 = obscuredBalloonMinimumSizeForAdult_sCustomTextFontSize_obscuredBalloonMinimumSizeForAdult, *(double *)&obscuredBalloonMinimumSizeForAdult_sCustomTextFontSize_obscuredBalloonMinimumSizeForAdult != v6)|| (objc_msgSend((id)obscuredBalloonMinimumSizeForAdult_sCustomTextFontName_obscuredBalloonMinimumSizeForAdult, "isEqualToString:", v9, *(double *)&obscuredBalloonMinimumSizeForAdult_sCustomTextFontSize_obscuredBalloonMinimumSizeForAdult) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self sensitiveLabelFont];
    [v13 _scaledValueForValue:120.0];
    double v15 = v14;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v16 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v16 = 1.0;
    }
    double v17 = round(v15 * v16) / v16;
    double v18 = [(CKUIBehavior *)self sensitiveLabelFont];
    [v18 _scaledValueForValue:120.0];
    double v20 = v19;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v21 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v21 = 1.0;
    }
    obscuredBalloonMinimumSizeForAdult_sBehavior_0 = *(void *)&v17;
    *(double *)&obscuredBalloonMinimumSizeForAdult_sBehavior_1 = round(v20 * v21) / v21;

    objc_storeStrong((id *)&obscuredBalloonMinimumSizeForAdult_sContentSizeCategory_obscuredBalloonMinimumSizeForAdult, v3);
    obscuredBalloonMinimumSizeForAdult_sIsBoldTextEnabled_obscuredBalloonMinimumSizeForAdult = IsBoldTextEnabled;
    obscuredBalloonMinimumSizeForAdult_sTextFontSize_obscuredBalloonMinimumSizeForAdult = *(void *)&v5;
    obscuredBalloonMinimumSizeForAdult_sCustomTextFontSize_obscuredBalloonMinimumSizeForAdult = *(void *)&v6;
    objc_storeStrong((id *)&obscuredBalloonMinimumSizeForAdult_sCustomTextFontName_obscuredBalloonMinimumSizeForAdult, v8);
  }
  uint64_t v22 = obscuredBalloonMinimumSizeForAdult_sBehavior_0;
  double v23 = *((double *)v12 + 110);

  double v24 = *(double *)&v22;
  double v25 = v23;
  result.height = v25;
  result.width = v24;
  return result;
}

- (BOOL)ckShouldUpdateobscuredBalloonMinimumSizeForChild
{
  return 0;
}

- (CGSize)obscuredBalloonMinimumSizeForChild
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)obscuredBalloonMinimumSizeForChild_sContentSizeCategory_obscuredBalloonMinimumSizeForChild, v3);
  uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdateobscuredBalloonMinimumSizeForChild](self, "ckShouldUpdateobscuredBalloonMinimumSizeForChild")|| v10|| obscuredBalloonMinimumSizeForChild_sIsBoldTextEnabled_obscuredBalloonMinimumSizeForChild != IsBoldTextEnabled|| (uint64_t v11 = obscuredBalloonMinimumSizeForChild_sTextFontSize_obscuredBalloonMinimumSizeForChild, *(double *)&obscuredBalloonMinimumSizeForChild_sTextFontSize_obscuredBalloonMinimumSizeForChild != v5)|| (uint64_t v11 = obscuredBalloonMinimumSizeForChild_sCustomTextFontSize_obscuredBalloonMinimumSizeForChild, *(double *)&obscuredBalloonMinimumSizeForChild_sCustomTextFontSize_obscuredBalloonMinimumSizeForChild != v6)|| (objc_msgSend((id)obscuredBalloonMinimumSizeForChild_sCustomTextFontName_obscuredBalloonMinimumSizeForChild, "isEqualToString:", v9, *(double *)&obscuredBalloonMinimumSizeForChild_sCustomTextFontSize_obscuredBalloonMinimumSizeForChild) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self sensitiveLabelFont];
    [v13 _scaledValueForValue:120.0];
    double v15 = v14;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v16 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v16 = 1.0;
    }
    double v17 = round(v15 * v16) / v16;
    double v18 = [(CKUIBehavior *)self sensitiveLabelFont];
    [v18 _scaledValueForValue:120.0];
    double v20 = v19;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v21 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v21 = 1.0;
    }
    obscuredBalloonMinimumSizeForChild_sBehavior_0 = *(void *)&v17;
    *(double *)&obscuredBalloonMinimumSizeForChild_sBehavior_1 = round(v20 * v21) / v21;

    objc_storeStrong((id *)&obscuredBalloonMinimumSizeForChild_sContentSizeCategory_obscuredBalloonMinimumSizeForChild, v3);
    obscuredBalloonMinimumSizeForChild_sIsBoldTextEnabled_obscuredBalloonMinimumSizeForChild = IsBoldTextEnabled;
    obscuredBalloonMinimumSizeForChild_sTextFontSize_obscuredBalloonMinimumSizeForChild = *(void *)&v5;
    obscuredBalloonMinimumSizeForChild_sCustomTextFontSize_obscuredBalloonMinimumSizeForChild = *(void *)&v6;
    objc_storeStrong((id *)&obscuredBalloonMinimumSizeForChild_sCustomTextFontName_obscuredBalloonMinimumSizeForChild, v8);
  }
  uint64_t v22 = obscuredBalloonMinimumSizeForChild_sBehavior_0;
  double v23 = *((double *)v12 + 114);

  double v24 = *(double *)&v22;
  double v25 = v23;
  result.height = v25;
  result.width = v24;
  return result;
}

- (Class)transcriptTitleViewClass
{
  if (transcriptTitleViewClass_once != -1) {
    dispatch_once(&transcriptTitleViewClass_once, &__block_literal_global_691_0);
  }
  return 0;
}

- (BOOL)showsLoadMoreItem
{
  if (showsLoadMoreItem_once != -1) {
    dispatch_once(&showsLoadMoreItem_once, &__block_literal_global_693_0);
  }
  return showsLoadMoreItem_sBehavior;
}

uint64_t __33__CKUIBehavior_showsLoadMoreItem__block_invoke()
{
  uint64_t result = CKIsRunningInMessagesNotificationExtension();
  showsLoadMoreItem_sBehavior = result == 0;
  return result;
}

- (BOOL)shouldShowContactPhotosInTranscript
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__CKUIBehavior_shouldShowContactPhotosInTranscript__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (shouldShowContactPhotosInTranscript_once != -1) {
    dispatch_once(&shouldShowContactPhotosInTranscript_once, block);
  }
  return shouldShowContactPhotosInTranscript_sBehavior;
}

uint64_t __51__CKUIBehavior_shouldShowContactPhotosInTranscript__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) canAccessContacts];
  shouldShowContactPhotosInTranscript_sBehavior = result;
  return result;
}

- (BOOL)shouldUseDynamicScrolling
{
  if (UIAccessibilityIsReduceMotionEnabled()) {
    return 0;
  }
  else {
    return ![(CKUIBehavior *)self shouldUseRotisserieScrolling];
  }
}

- (BOOL)shouldUseRotisserieScrolling
{
  return 0;
}

- (BOOL)showsReplyButtonsInTranscript
{
  return 0;
}

- (BOOL)ckShouldUpdatetimestampsPushBalloons
{
  return 0;
}

- (BOOL)timestampsPushBalloons
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)timestampsPushBalloons_sContentSizeCategory_timestampsPushBalloons, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetimestampsPushBalloons]
    || v10
    || timestampsPushBalloons_sIsBoldTextEnabled_timestampsPushBalloons != IsBoldTextEnabled
    || (uint64_t v11 = timestampsPushBalloons_sTextFontSize_timestampsPushBalloons,
        *(double *)&timestampsPushBalloons_sTextFontSize_timestampsPushBalloons != v5)
    || (uint64_t v11 = timestampsPushBalloons_sCustomTextFontSize_timestampsPushBalloons,
        *(double *)&timestampsPushBalloons_sCustomTextFontSize_timestampsPushBalloons != v6)
    || (objc_msgSend((id)timestampsPushBalloons_sCustomTextFontName_timestampsPushBalloons, "isEqualToString:", v9, *(double *)&timestampsPushBalloons_sCustomTextFontSize_timestampsPushBalloons) & 1) == 0)
  {
    timestampsPushBalloons_sBehavior = [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    objc_storeStrong((id *)&timestampsPushBalloons_sContentSizeCategory_timestampsPushBalloons, v3);
    timestampsPushBalloons_sIsBoldTextEnabled_timestampsPushBalloons = IsBoldTextEnabled;
    timestampsPushBalloons_sTextFontSize_timestampsPushBalloons = *(void *)&v5;
    timestampsPushBalloons_sCustomTextFontSize_timestampsPushBalloons = *(void *)&v6;
    objc_storeStrong((id *)&timestampsPushBalloons_sCustomTextFontName_timestampsPushBalloons, v8);
  }
  char v12 = timestampsPushBalloons_sBehavior;

  return v12;
}

- (BOOL)shouldInsetForStatusBar
{
  if (shouldInsetForStatusBar_once != -1) {
    dispatch_once(&shouldInsetForStatusBar_once, &__block_literal_global_695_0);
  }
  return 0;
}

- (BOOL)usesDataDetectorsUI
{
  if (usesDataDetectorsUI_once != -1) {
    dispatch_once(&usesDataDetectorsUI_once, &__block_literal_global_697_0);
  }
  return usesDataDetectorsUI_sBehavior;
}

void __35__CKUIBehavior_usesDataDetectorsUI__block_invoke()
{
  usesDataDetectorsUI_sBehavior = 1;
}

- (BOOL)transcriptCanUseOpaqueMask
{
  if (transcriptCanUseOpaqueMask_once != -1) {
    dispatch_once(&transcriptCanUseOpaqueMask_once, &__block_literal_global_699_0);
  }
  return transcriptCanUseOpaqueMask_sBehavior;
}

void __42__CKUIBehavior_transcriptCanUseOpaqueMask__block_invoke()
{
  uint64_t v0 = +[CKUIBehavior sharedBehaviors];
  uint64_t v1 = [v0 theme];
  double v2 = [v1 transcriptBackgroundColor];

  double v5 = 0.0;
  int v3 = [v2 getRed:0 green:0 blue:0 alpha:&v5] ^ 1;
  if (v5 >= 1.0) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }

  transcriptCanUseOpaqueMask_sBehavior = v4;
}

- (BOOL)scrollToBottomStopsAtTopOfLastBubble
{
  if (scrollToBottomStopsAtTopOfLastBubble_once != -1) {
    dispatch_once(&scrollToBottomStopsAtTopOfLastBubble_once, &__block_literal_global_701_0);
  }
  return 0;
}

- (BOOL)supportsContiguousAttachments
{
  if (supportsContiguousAttachments_once != -1) {
    dispatch_once(&supportsContiguousAttachments_once, &__block_literal_global_703_0);
  }
  return supportsContiguousAttachments_sBehavior;
}

void __45__CKUIBehavior_supportsContiguousAttachments__block_invoke()
{
  supportsContiguousAttachments_sBehavior = 1;
}

- (BOOL)shouldUseSimpleTimestampsInTranscript
{
  if (shouldUseSimpleTimestampsInTranscript_once != -1) {
    dispatch_once(&shouldUseSimpleTimestampsInTranscript_once, &__block_literal_global_705_0);
  }
  return 0;
}

- (BOOL)transcriptCellsNeedVibrancy
{
  if (transcriptCellsNeedVibrancy_once != -1) {
    dispatch_once(&transcriptCellsNeedVibrancy_once, &__block_literal_global_707_0);
  }
  return 0;
}

- (int64_t)transcriptLoadingIndicatorStyle
{
  if (transcriptLoadingIndicatorStyle_once_0 != -1) {
    dispatch_once(&transcriptLoadingIndicatorStyle_once_0, &__block_literal_global_709_0);
  }
  if (transcriptLoadingIndicatorStyle_sBehavior_0) {
    return 100;
  }
  else {
    return 0;
  }
}

void __47__CKUIBehavior_transcriptLoadingIndicatorStyle__block_invoke()
{
  transcriptLoadingIndicatorStyle_sBehavior_0 = 1;
}

- (BOOL)disableTranscriptClickyOrbContextMenu
{
  if (disableTranscriptClickyOrbContextMenu_once != -1) {
    dispatch_once(&disableTranscriptClickyOrbContextMenu_once, &__block_literal_global_711_0);
  }
  return 0;
}

- (BOOL)disableTranscriptInteractions
{
  if (disableTranscriptInteractions_once != -1) {
    dispatch_once(&disableTranscriptInteractions_once, &__block_literal_global_713_0);
  }
  return 0;
}

- (BOOL)disableTranscriptTimestamps
{
  if (disableTranscriptTimestamps_once != -1) {
    dispatch_once(&disableTranscriptTimestamps_once, &__block_literal_global_715_0);
  }
  return 0;
}

- (BOOL)presentsLoadingIndicatorCover
{
  if (presentsLoadingIndicatorCover_once != -1) {
    dispatch_once(&presentsLoadingIndicatorCover_once, &__block_literal_global_717_0);
  }
  return 0;
}

- (double)transcriptQuickActionButtonDiameter
{
  if (transcriptQuickActionButtonDiameter_once != -1) {
    dispatch_once(&transcriptQuickActionButtonDiameter_once, &__block_literal_global_719_0);
  }
  return *(double *)&transcriptQuickActionButtonDiameter_sBehavior;
}

void __51__CKUIBehavior_transcriptQuickActionButtonDiameter__block_invoke()
{
  transcriptQuickActionButtonDiameter_sBehavior = 0x4041800000000000;
}

- (double)transcriptQuickActionButtonHorizontalSpacing
{
  if (transcriptQuickActionButtonHorizontalSpacing_once != -1) {
    dispatch_once(&transcriptQuickActionButtonHorizontalSpacing_once, &__block_literal_global_721);
  }
  return *(double *)&transcriptQuickActionButtonHorizontalSpacing_sBehavior;
}

void __60__CKUIBehavior_transcriptQuickActionButtonHorizontalSpacing__block_invoke()
{
  transcriptQuickActionButtonHorizontalSpacing_sBehavior = 0x402C000000000000;
}

- (double)transcriptContactImageDiameter
{
  if (transcriptContactImageDiameter_once != -1) {
    dispatch_once(&transcriptContactImageDiameter_once, &__block_literal_global_723);
  }
  return *(double *)&transcriptContactImageDiameter_sBehavior;
}

void __46__CKUIBehavior_transcriptContactImageDiameter__block_invoke()
{
  transcriptContactImageDiameter_sBehavior = 0x403E000000000000;
}

- (double)detailsViewContactImageDiameter
{
  if (detailsViewContactImageDiameter_once != -1) {
    dispatch_once(&detailsViewContactImageDiameter_once, &__block_literal_global_725);
  }
  return *(double *)&detailsViewContactImageDiameter_sBehavior;
}

void __47__CKUIBehavior_detailsViewContactImageDiameter__block_invoke()
{
  detailsViewContactImageDiameter_sBehavior = 0x4042800000000000;
}

- (double)transcriptReplyPreviewContextContactImageDiameter
{
  if (transcriptReplyPreviewContextContactImageDiameter_once != -1) {
    dispatch_once(&transcriptReplyPreviewContextContactImageDiameter_once, &__block_literal_global_727);
  }
  return *(double *)&transcriptReplyPreviewContextContactImageDiameter_sBehavior;
}

void __65__CKUIBehavior_transcriptReplyPreviewContextContactImageDiameter__block_invoke()
{
  transcriptReplyPreviewContextContactImageDiameter_sBehavior = 0x4034000000000000;
}

- (double)transcriptReplyPreviewContextContactAlpha
{
  if (transcriptReplyPreviewContextContactAlpha_once != -1) {
    dispatch_once(&transcriptReplyPreviewContextContactAlpha_once, &__block_literal_global_729);
  }
  return *(double *)&transcriptReplyPreviewContextContactAlpha_sBehavior;
}

void __57__CKUIBehavior_transcriptReplyPreviewContextContactAlpha__block_invoke()
{
  transcriptReplyPreviewContextContactAlpha_sBehavior = 0x3FE0000000000000;
}

- (double)transcriptDrawerContactImageDiameter
{
  if (transcriptDrawerContactImageDiameter_once != -1) {
    dispatch_once(&transcriptDrawerContactImageDiameter_once, &__block_literal_global_731_0);
  }
  return *(double *)&transcriptDrawerContactImageDiameter_sBehavior;
}

void __52__CKUIBehavior_transcriptDrawerContactImageDiameter__block_invoke()
{
  transcriptDrawerContactImageDiameter_sBehavior = 0x4040000000000000;
}

- (double)transcriptDrawerContactImagePadding
{
  if (transcriptDrawerContactImagePadding_once != -1) {
    dispatch_once(&transcriptDrawerContactImagePadding_once, &__block_literal_global_733);
  }
  return *(double *)&transcriptDrawerContactImagePadding_sBehavior;
}

void __51__CKUIBehavior_transcriptDrawerContactImagePadding__block_invoke()
{
  transcriptDrawerContactImagePadding_sBehavior = 0x4024000000000000;
}

- (CGSize)mediaObjectCachedIconSize
{
  if (mediaObjectCachedIconSize_once != -1) {
    dispatch_once(&mediaObjectCachedIconSize_once, &__block_literal_global_735);
  }
  double v2 = *(double *)&mediaObjectCachedIconSize_sBehavior_0;
  double v3 = *(double *)&mediaObjectCachedIconSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __41__CKUIBehavior_mediaObjectCachedIconSize__block_invoke()
{
  mediaObjectCachedIconSize_sBehavior_0 = 0x404E000000000000;
  mediaObjectCachedIconSize_sBehavior_1 = 0x404E000000000000;
}

- (BOOL)ckShouldUpdatetranscriptBoldTextAlignmentInsets
{
  return 0;
}

- (UIEdgeInsets)transcriptBoldTextAlignmentInsets
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptBoldTextAlignmentInsets_sContentSizeCategory_transcriptBoldTextAlignmentInsets, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptBoldTextAlignmentInsets](self, "ckShouldUpdatetranscriptBoldTextAlignmentInsets")|| v10|| transcriptBoldTextAlignmentInsets_sIsBoldTextEnabled_transcriptBoldTextAlignmentInsets != IsBoldTextEnabled|| *(double *)&transcriptBoldTextAlignmentInsets_sTextFontSize_transcriptBoldTextAlignmentInsets != v5|| *(double *)&transcriptBoldTextAlignmentInsets_sCustomTextFontSize_transcriptBoldTextAlignmentInsets != v6|| (objc_msgSend((id)transcriptBoldTextAlignmentInsets_sCustomTextFontName_transcriptBoldTextAlignmentInsets, "isEqualToString:", v9, *(double *)&transcriptBoldTextAlignmentInsets_sCustomTextFontSize_transcriptBoldTextAlignmentInsets) & 1) == 0)
  {
    uint64_t v11 = +[CKUIBehavior sharedBehaviors];
    char v12 = [v11 transcriptBoldFont];
    CKTranscriptTextSizeForFont(v12, 0, (uint64_t)v20);

    transcriptBoldTextAlignmentInsets_sBehavior = v20[0];
    *(_OWORD *)&qword_1E924A450 = v20[1];
    objc_storeStrong((id *)&transcriptBoldTextAlignmentInsets_sContentSizeCategory_transcriptBoldTextAlignmentInsets, v3);
    transcriptBoldTextAlignmentInsets_sIsBoldTextEnabled_transcriptBoldTextAlignmentInsets = IsBoldTextEnabled;
    transcriptBoldTextAlignmentInsets_sTextFontSize_transcriptBoldTextAlignmentInsets = *(void *)&v5;
    transcriptBoldTextAlignmentInsets_sCustomTextFontSize_transcriptBoldTextAlignmentInsets = *(void *)&v6;
    objc_storeStrong((id *)&transcriptBoldTextAlignmentInsets_sCustomTextFontName_transcriptBoldTextAlignmentInsets, v8);
  }
  unsigned long long v13 = transcriptBoldTextAlignmentInsets_sBehavior;
  uint64_t v14 = qword_1E924A450;
  double v15 = unk_1E924A458;

  *(void *)&double v17 = v13 >> 64;
  *(void *)&double v16 = v13;
  double v18 = *(double *)&v14;
  double v19 = v15;
  result.double right = v19;
  result.double bottom = v18;
  result.double left = v17;
  result.double top = v16;
  return result;
}

- (BOOL)ckShouldUpdatetranscriptBoldTextHeight
{
  return 0;
}

- (double)transcriptBoldTextHeight
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptBoldTextHeight_sContentSizeCategory_transcriptBoldTextHeight, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptBoldTextHeight]
    || v10
    || transcriptBoldTextHeight_sIsBoldTextEnabled_transcriptBoldTextHeight != IsBoldTextEnabled
    || (uint64_t v11 = transcriptBoldTextHeight_sTextFontSize_transcriptBoldTextHeight,
        *(double *)&transcriptBoldTextHeight_sTextFontSize_transcriptBoldTextHeight != v5)
    || (uint64_t v11 = transcriptBoldTextHeight_sCustomTextFontSize_transcriptBoldTextHeight,
        *(double *)&transcriptBoldTextHeight_sCustomTextFontSize_transcriptBoldTextHeight != v6)
    || (objc_msgSend((id)transcriptBoldTextHeight_sCustomTextFontName_transcriptBoldTextHeight, "isEqualToString:", v9, *(double *)&transcriptBoldTextHeight_sCustomTextFontSize_transcriptBoldTextHeight) & 1) == 0)
  {
    uint64_t v16 = 0;
    char v12 = +[CKUIBehavior sharedBehaviors];
    unsigned long long v13 = [v12 transcriptBoldFont];
    CKTranscriptTextSizeForFont(v13, (double *)&v16, 0);

    transcriptBoldTextHeight_sBehavior = v16;
    objc_storeStrong((id *)&transcriptBoldTextHeight_sContentSizeCategory_transcriptBoldTextHeight, v3);
    transcriptBoldTextHeight_sIsBoldTextEnabled_transcriptBoldTextHeight = IsBoldTextEnabled;
    transcriptBoldTextHeight_sTextFontSize_transcriptBoldTextHeight = *(void *)&v5;
    transcriptBoldTextHeight_sCustomTextFontSize_transcriptBoldTextHeight = *(void *)&v6;
    objc_storeStrong((id *)&transcriptBoldTextHeight_sCustomTextFontName_transcriptBoldTextHeight, v8);
  }
  double v14 = *(double *)&transcriptBoldTextHeight_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatestatusSaveButtonTranscriptText
{
  return 0;
}

- (NSAttributedString)statusSaveButtonTranscriptText
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)statusSaveButtonTranscriptText_sContentSizeCategory_statusSaveButtonTranscriptText, v3);
  char v12 = &minimumWaveformHeight_once_0;
  if (-[CKUIBehavior ckShouldUpdatestatusSaveButtonTranscriptText](self, "ckShouldUpdatestatusSaveButtonTranscriptText")|| v11|| statusSaveButtonTranscriptText_sIsIncreaseContrastEnabled_statusSaveButtonTranscriptText != v4|| statusSaveButtonTranscriptText_sIsBoldTextEnabled_statusSaveButtonTranscriptText != IsBoldTextEnabled|| *(double *)&statusSaveButtonTranscriptText_sTextFontSize_statusSaveButtonTranscriptText != v6|| *(double *)&statusSaveButtonTranscriptText_sCustomTextFontSize_statusSaveButtonTranscriptText != v7|| (objc_msgSend((id)statusSaveButtonTranscriptText_sCustomTextFontName_statusSaveButtonTranscriptText, "isEqualToString:", v10, *(double *)&statusSaveButtonTranscriptText_sCustomTextFontSize_statusSaveButtonTranscriptText) & 1) == 0)
  {
    id v13 = objc_alloc(MEMORY[0x1E4F28B18]);
    double v14 = CKFrameworkBundle();
    double v15 = [v14 localizedStringForKey:@"KEEP" value:&stru_1EDE4CA38 table:@"ChatKit"];
    uint64_t v16 = [(CKUIBehavior *)self centerTranscriptButtonTextAttributes];
    uint64_t v17 = [v13 initWithString:v15 attributes:v16];

    char v12 = &minimumWaveformHeight_once_0;
    double v18 = (void *)statusSaveButtonTranscriptText_sBehavior;
    statusSaveButtonTranscriptText_sBehavior = v17;

    objc_storeStrong((id *)&statusSaveButtonTranscriptText_sContentSizeCategory_statusSaveButtonTranscriptText, v3);
    statusSaveButtonTranscriptText_sIsIncreaseContrastEnabled_statusSaveButtonTranscriptText = v4;
    statusSaveButtonTranscriptText_sIsBoldTextEnabled_statusSaveButtonTranscriptText = IsBoldTextEnabled;
    statusSaveButtonTranscriptText_sTextFontSize_statusSaveButtonTranscriptText = *(void *)&v6;
    statusSaveButtonTranscriptText_sCustomTextFontSize_statusSaveButtonTranscriptText = *(void *)&v7;
    objc_storeStrong((id *)&statusSaveButtonTranscriptText_sCustomTextFontName_statusSaveButtonTranscriptText, v9);
  }
  double v19 = (NSAttributedString *)(id)v12[13];

  return v19;
}

- (UIEdgeInsets)transcriptStatusItemEdgeInsets
{
  if (transcriptStatusItemEdgeInsets_once != -1) {
    dispatch_once(&transcriptStatusItemEdgeInsets_once, &__block_literal_global_740);
  }
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

- (CGSize)transcriptCustomStatusImageDefaultSize
{
  if (transcriptCustomStatusImageDefaultSize_once != -1) {
    dispatch_once(&transcriptCustomStatusImageDefaultSize_once, &__block_literal_global_742);
  }
  double v2 = *(double *)&transcriptCustomStatusImageDefaultSize_sBehavior_0;
  double v3 = *(double *)&transcriptCustomStatusImageDefaultSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __54__CKUIBehavior_transcriptCustomStatusImageDefaultSize__block_invoke()
{
  transcriptCustomStatusImageDefaultSize_sBehavior_0 = 0x403B000000000000;
  transcriptCustomStatusImageDefaultSize_sBehavior_1 = 0x4034000000000000;
}

- (double)transcriptCustomStatusImagePadding
{
  if (transcriptCustomStatusImagePadding_once != -1) {
    dispatch_once(&transcriptCustomStatusImagePadding_once, &__block_literal_global_744);
  }
  return *(double *)&transcriptCustomStatusImagePadding_sBehavior;
}

void __50__CKUIBehavior_transcriptCustomStatusImagePadding__block_invoke()
{
  transcriptCustomStatusImagePadding_sBehavior = 0x4010000000000000;
}

- (UIEdgeInsets)transcriptCustomStatusImageEdgeInsets
{
  if (transcriptCustomStatusImageEdgeInsets_once != -1) {
    dispatch_once(&transcriptCustomStatusImageEdgeInsets_once, &__block_literal_global_746);
  }
  double v2 = *(double *)&transcriptCustomStatusImageEdgeInsets_sBehavior_0;
  double v3 = *(double *)&transcriptCustomStatusImageEdgeInsets_sBehavior_1;
  double v4 = *(double *)&transcriptCustomStatusImageEdgeInsets_sBehavior_2;
  double v5 = *(double *)&transcriptCustomStatusImageEdgeInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __53__CKUIBehavior_transcriptCustomStatusImageEdgeInsets__block_invoke()
{
  transcriptCustomStatusImageEdgeInsets_sBehavior_0 = 0x3FF0000000000000;
  transcriptCustomStatusImageEdgeInsets_sBehavior_1 = 0x3FF0000000000000;
  transcriptCustomStatusImageEdgeInsets_sBehavior_2 = 0x3FF0000000000000;
  transcriptCustomStatusImageEdgeInsets_sBehavior_3 = 0x3FF0000000000000;
}

- (UIEdgeInsets)transcriptButtonContentEdgeInsets
{
  if (transcriptButtonContentEdgeInsets_once != -1) {
    dispatch_once(&transcriptButtonContentEdgeInsets_once, &__block_literal_global_748);
  }
  double v2 = *(double *)&transcriptButtonContentEdgeInsets_sBehavior_0;
  double v3 = *(double *)&transcriptButtonContentEdgeInsets_sBehavior_1;
  double v4 = *(double *)&transcriptButtonContentEdgeInsets_sBehavior_2;
  double v5 = *(double *)&transcriptButtonContentEdgeInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __49__CKUIBehavior_transcriptButtonContentEdgeInsets__block_invoke()
{
  transcriptButtonContentEdgeInsets_sBehavior_0 = 0x4018000000000000;
  transcriptButtonContentEdgeInsets_sBehavior_1 = 0x4018000000000000;
  transcriptButtonContentEdgeInsets_sBehavior_2 = 0x4018000000000000;
  transcriptButtonContentEdgeInsets_sBehavior_3 = 0x4018000000000000;
}

- (BOOL)forceMinTranscriptMarginInsets
{
  if (forceMinTranscriptMarginInsets_once != -1) {
    dispatch_once(&forceMinTranscriptMarginInsets_once, &__block_literal_global_750);
  }
  return 0;
}

- (double)mapPreviewMaxWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __34__CKUIBehavior_mapPreviewMaxWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (mapPreviewMaxWidth_once != -1) {
    dispatch_once(&mapPreviewMaxWidth_once, block);
  }
  return *(double *)&mapPreviewMaxWidth_sBehavior;
}

uint64_t __34__CKUIBehavior_mapPreviewMaxWidth__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) previewMaxWidth];
  mapPreviewMaxWidth_sBehavior = v2;
  return result;
}

- (double)emojiPreviewMaxWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__CKUIBehavior_emojiPreviewMaxWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (emojiPreviewMaxWidth_once != -1) {
    dispatch_once(&emojiPreviewMaxWidth_once, block);
  }
  return *(double *)&emojiPreviewMaxWidth_sBehavior;
}

double __36__CKUIBehavior_emojiPreviewMaxWidth__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double result = v1 * 1.5 + 56.0;
  emojiPreviewMaxWidth_sBehavior = *(void *)&result;
  return result;
}

- (double)stickerInlinePreviewMaxDimension
{
  if (stickerInlinePreviewMaxDimension_once != -1) {
    dispatch_once(&stickerInlinePreviewMaxDimension_once, &__block_literal_global_754);
  }
  return *(double *)&stickerInlinePreviewMaxDimension_sBehavior;
}

void __48__CKUIBehavior_stickerInlinePreviewMaxDimension__block_invoke()
{
  stickerInlinePreviewMaxDimension_sBehavior = 0x4064000000000000;
}

- (double)emojiStickerInlinePreviewMaxDimension
{
  if (emojiStickerInlinePreviewMaxDimension_once != -1) {
    dispatch_once(&emojiStickerInlinePreviewMaxDimension_once, &__block_literal_global_756);
  }
  return *(double *)&emojiStickerInlinePreviewMaxDimension_sBehavior;
}

void __53__CKUIBehavior_emojiStickerInlinePreviewMaxDimension__block_invoke()
{
  emojiStickerInlinePreviewMaxDimension_sBehavior = 0x4058000000000000;
}

- (CGSize)stickerReactionSize
{
  if (stickerReactionSize_once != -1) {
    dispatch_once(&stickerReactionSize_once, &__block_literal_global_758);
  }
  double v2 = *(double *)&stickerReactionSize_sBehavior_0;
  double v3 = *(double *)&stickerReactionSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __35__CKUIBehavior_stickerReactionSize__block_invoke()
{
  stickerReactionSize_sBehavior_0 = 0x4048000000000000;
  stickerReactionSize_sBehavior_1 = 0x4048000000000000;
}

- (CGSize)stickerPopoverSize
{
  if (stickerPopoverSize_once != -1) {
    dispatch_once(&stickerPopoverSize_once, &__block_literal_global_760);
  }
  double v2 = *(double *)&stickerPopoverSize_sBehavior_0;
  double v3 = *(double *)&stickerPopoverSize_sBehavior_1;
  result.height = v3;
  result.width = v2;
  return result;
}

void __34__CKUIBehavior_stickerPopoverSize__block_invoke()
{
  stickerPopoverSize_sBehavior_0 = 0x4078900000000000;
  stickerPopoverSize_sBehavior_1 = 0x4085400000000000;
}

- (double)stickerReactionTextBalloonAdditionalVerticalPadding
{
  if (stickerReactionTextBalloonAdditionalVerticalPadding_once != -1) {
    dispatch_once(&stickerReactionTextBalloonAdditionalVerticalPadding_once, &__block_literal_global_762_0);
  }
  return *(double *)&stickerReactionTextBalloonAdditionalVerticalPadding_sBehavior;
}

void __67__CKUIBehavior_stickerReactionTextBalloonAdditionalVerticalPadding__block_invoke()
{
  stickerReactionTextBalloonAdditionalVerticalPadding_sBehavior = 0x4014000000000000;
}

- (double)stickerReactionTranscriptPaddingPercentage
{
  if (stickerReactionTranscriptPaddingPercentage_once != -1) {
    dispatch_once(&stickerReactionTranscriptPaddingPercentage_once, &__block_literal_global_764_0);
  }
  return *(double *)&stickerReactionTranscriptPaddingPercentage_sBehavior;
}

void __58__CKUIBehavior_stickerReactionTranscriptPaddingPercentage__block_invoke()
{
  stickerReactionTranscriptPaddingPercentage_sBehavior = 0x3FE8000000000000;
}

- (double)stickerReactionHorizontalOverlapPercentage
{
  if (stickerReactionHorizontalOverlapPercentage_once != -1) {
    dispatch_once(&stickerReactionHorizontalOverlapPercentage_once, &__block_literal_global_766);
  }
  return *(double *)&stickerReactionHorizontalOverlapPercentage_sBehavior;
}

void __58__CKUIBehavior_stickerReactionHorizontalOverlapPercentage__block_invoke()
{
  stickerReactionHorizontalOverlapPercentage_sBehavior = 0x3FD0000000000000;
}

- (double)stickerReactionVerticalOverlapPercentage
{
  if (stickerReactionVerticalOverlapPercentage_once != -1) {
    dispatch_once(&stickerReactionVerticalOverlapPercentage_once, &__block_literal_global_768);
  }
  return *(double *)&stickerReactionVerticalOverlapPercentage_sBehavior;
}

void __56__CKUIBehavior_stickerReactionVerticalOverlapPercentage__block_invoke()
{
  stickerReactionVerticalOverlapPercentage_sBehavior = 0x3FD6666666666666;
}

- (double)stickerReactionOddRowInset
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __42__CKUIBehavior_stickerReactionOddRowInset__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (stickerReactionOddRowInset_once != -1) {
    dispatch_once(&stickerReactionOddRowInset_once, block);
  }
  return *(double *)&stickerReactionOddRowInset_sBehavior;
}

double __42__CKUIBehavior_stickerReactionOddRowInset__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) stickerReactionSize];
  double result = v1 / 5.0;
  stickerReactionOddRowInset_sBehavior = *(void *)&result;
  return result;
}

- (double)maxStickerReactionRotation
{
  if (maxStickerReactionRotation_once != -1) {
    dispatch_once(&maxStickerReactionRotation_once, &__block_literal_global_770);
  }
  return *(double *)&maxStickerReactionRotation_sBehavior;
}

void __42__CKUIBehavior_maxStickerReactionRotation__block_invoke()
{
  maxStickerReactionRotation_sBehavior = 0x4024000000000000;
}

- (double)minStickerReactionRotation
{
  if (minStickerReactionRotation_once != -1) {
    dispatch_once(&minStickerReactionRotation_once, &__block_literal_global_772);
  }
  return *(double *)&minStickerReactionRotation_sBehavior;
}

void __42__CKUIBehavior_minStickerReactionRotation__block_invoke()
{
  minStickerReactionRotation_sBehavior = 0x4008000000000000;
}

- (double)stickerDropPreviewMaxDimension
{
  if (stickerDropPreviewMaxDimension_once != -1) {
    dispatch_once(&stickerDropPreviewMaxDimension_once, &__block_literal_global_774);
  }
  return *(double *)&stickerDropPreviewMaxDimension_sBehavior;
}

void __46__CKUIBehavior_stickerDropPreviewMaxDimension__block_invoke()
{
  stickerDropPreviewMaxDimension_sBehavior = 0x4072C00000000000;
}

- (double)emojiStickerDropPreviewMaxDimension
{
  if (emojiStickerDropPreviewMaxDimension_once != -1) {
    dispatch_once(&emojiStickerDropPreviewMaxDimension_once, &__block_literal_global_776);
  }
  return *(double *)&emojiStickerDropPreviewMaxDimension_sBehavior;
}

void __51__CKUIBehavior_emojiStickerDropPreviewMaxDimension__block_invoke()
{
  emojiStickerDropPreviewMaxDimension_sBehavior = 0x4072C00000000000;
}

- (BOOL)shouldAnimateStickerOnSave
{
  if (shouldAnimateStickerOnSave_once != -1) {
    dispatch_once(&shouldAnimateStickerOnSave_once, &__block_literal_global_778);
  }
  return shouldAnimateStickerOnSave_sBehavior;
}

uint64_t __42__CKUIBehavior_shouldAnimateStickerOnSave__block_invoke()
{
  uint64_t result = CKIsRunningInMacCatalyst();
  shouldAnimateStickerOnSave_sBehavior = result == 0;
  return result;
}

- (BOOL)shouldScrollToSavedSticker
{
  if (shouldScrollToSavedSticker_once != -1) {
    dispatch_once(&shouldScrollToSavedSticker_once, &__block_literal_global_780);
  }
  return shouldScrollToSavedSticker_sBehavior;
}

uint64_t __42__CKUIBehavior_shouldScrollToSavedSticker__block_invoke()
{
  uint64_t result = CKIsRunningInMacCatalyst();
  shouldScrollToSavedSticker_sBehavior = result == 0;
  return result;
}

- (double)stickerInlinePreviewMaxWidthForImageSize:(CGSize)a3 isEmoji:(BOOL)a4 displayScale:(double)a5
{
  double height = a3.height;
  double width = a3.width;
  if (a4) {
    [(CKUIBehavior *)self emojiStickerInlinePreviewMaxDimension];
  }
  else {
    [(CKUIBehavior *)self stickerInlinePreviewMaxDimension];
  }
  if (width < height && height > result) {
    return round(width / height * result * a5) / a5;
  }
  return result;
}

- (double)stickerDropPreviewMaxWidthForImageSize:(CGSize)a3 isEmoji:(BOOL)a4 displayScale:(double)a5
{
  double height = a3.height;
  double width = a3.width;
  if (a4) {
    [(CKUIBehavior *)self emojiStickerDropPreviewMaxDimension];
  }
  else {
    [(CKUIBehavior *)self stickerDropPreviewMaxDimension];
  }
  if (width < height && height > result) {
    return round(width / height * result * a5) / a5;
  }
  return result;
}

- (UIEdgeInsets)balloonTranscriptInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_balloonTranscriptInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (balloonTranscriptInsets_once != -1) {
    dispatch_once(&balloonTranscriptInsets_once, block);
  }
  double v2 = *(double *)&balloonTranscriptInsets_sBehavior_1;
  double v3 = *(double *)&balloonTranscriptInsets_sBehavior_3;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v3;
  result.double bottom = v5;
  result.double left = v2;
  result.double top = v4;
  return result;
}

double __39__CKUIBehavior_balloonTranscriptInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double v3 = -v2;
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double result = -v4;
  balloonTranscriptInsets_sBehavior_1 = *(void *)&v3;
  balloonTranscriptInsets_sBehavior_3 = *(void *)&result;
  return result;
}

- (UIEdgeInsets)senderTranscriptInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __38__CKUIBehavior_senderTranscriptInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (senderTranscriptInsets_once != -1) {
    dispatch_once(&senderTranscriptInsets_once, block);
  }
  double v2 = *(double *)&senderTranscriptInsets_sBehavior_0;
  double v3 = *(double *)&senderTranscriptInsets_sBehavior_1;
  double v4 = *(double *)&senderTranscriptInsets_sBehavior_2;
  double v5 = *(double *)&senderTranscriptInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

double __38__CKUIBehavior_senderTranscriptInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) stampTranscriptInsets];
  uint64_t v3 = v2;
  double v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  [*(id *)(a1 + 32) balloonMaskAlignmentRectInsetsWithTailShape:1];
  double result = v5 + v10;
  senderTranscriptInsets_sBehavior_0 = v3;
  *(double *)&senderTranscriptInsets_sBehavior_1 = v5 + v10;
  senderTranscriptInsets_sBehavior_2 = v7;
  senderTranscriptInsets_sBehavior_3 = v9;
  return result;
}

- (UIEdgeInsets)replySenderTranscriptInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__CKUIBehavior_replySenderTranscriptInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (replySenderTranscriptInsets_once != -1) {
    dispatch_once(&replySenderTranscriptInsets_once, block);
  }
  double v2 = *(double *)&replySenderTranscriptInsets_sBehavior_0;
  double v3 = *(double *)&replySenderTranscriptInsets_sBehavior_1;
  double v4 = *(double *)&replySenderTranscriptInsets_sBehavior_2;
  double v5 = *(double *)&replySenderTranscriptInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

double __43__CKUIBehavior_replySenderTranscriptInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) stampTranscriptInsets];
  uint64_t v3 = v2;
  double v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  [*(id *)(a1 + 32) balloonMaskAlignmentRectInsetsWithTailShape:1];
  double result = v5 + v10;
  replySenderTranscriptInsets_sBehavior_0 = v3;
  *(double *)&replySenderTranscriptInsets_sBehavior_1 = v5 + v10;
  replySenderTranscriptInsets_sBehavior_2 = v7;
  replySenderTranscriptInsets_sBehavior_3 = v9;
  return result;
}

- (UIEdgeInsets)stampTranscriptInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__CKUIBehavior_stampTranscriptInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (stampTranscriptInsets_once != -1) {
    dispatch_once(&stampTranscriptInsets_once, block);
  }
  double v2 = *(double *)&stampTranscriptInsets_sBehavior_0;
  double v3 = *(double *)&stampTranscriptInsets_sBehavior_1;
  double v4 = *(double *)&stampTranscriptInsets_sBehavior_2;
  double v5 = *(double *)&stampTranscriptInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

double __37__CKUIBehavior_stampTranscriptInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonTranscriptInsets];
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double v11 = v10;
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double result = v9 + v12;
  *(double *)&stampTranscriptInsets_sBehavior_0 = v3 + 0.0;
  *(double *)&stampTranscriptInsets_sBehavior_1 = v5 + v11;
  *(double *)&stampTranscriptInsets_sBehavior_2 = v7 + 0.0;
  stampTranscriptInsets_sBehavior_3 = *(void *)&result;
  return result;
}

- (UIVisualEffect)transcriptTextVibrancyEffect
{
  if (transcriptTextVibrancyEffect_once != -1) {
    dispatch_once(&transcriptTextVibrancyEffect_once, &__block_literal_global_782);
  }
  return 0;
}

- (BOOL)ckShouldUpdatecontactPhotoTranscriptInsets
{
  return 0;
}

- (UIEdgeInsets)contactPhotoTranscriptInsets
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)contactPhotoTranscriptInsets_sContentSizeCategory_contactPhotoTranscriptInsets, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatecontactPhotoTranscriptInsets]
    || v10
    || contactPhotoTranscriptInsets_sIsBoldTextEnabled_contactPhotoTranscriptInsets != IsBoldTextEnabled
    || (uint64_t v11 = contactPhotoTranscriptInsets_sTextFontSize_contactPhotoTranscriptInsets,
        *(double *)&contactPhotoTranscriptInsets_sTextFontSize_contactPhotoTranscriptInsets != v5)
    || (uint64_t v11 = contactPhotoTranscriptInsets_sCustomTextFontSize_contactPhotoTranscriptInsets,
        *(double *)&contactPhotoTranscriptInsets_sCustomTextFontSize_contactPhotoTranscriptInsets != v6)
    || (objc_msgSend((id)contactPhotoTranscriptInsets_sCustomTextFontName_contactPhotoTranscriptInsets, "isEqualToString:", v9, *(double *)&contactPhotoTranscriptInsets_sCustomTextFontSize_contactPhotoTranscriptInsets) & 1) == 0)
  {
    BOOL v12 = [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    double v13 = -4.0;
    if (v12) {
      double v13 = -16.0;
    }
    contactPhotoTranscriptInsets_sBehavior_0 = 0;
    contactPhotoTranscriptInsets_sBehavior_1 = *(void *)&v13;
    contactPhotoTranscriptInsets_sBehavior_2 = 0;
    contactPhotoTranscriptInsets_sBehavior_3 = 0xC010000000000000;
    objc_storeStrong((id *)&contactPhotoTranscriptInsets_sContentSizeCategory_contactPhotoTranscriptInsets, v3);
    contactPhotoTranscriptInsets_sIsBoldTextEnabled_contactPhotoTranscriptInsets = IsBoldTextEnabled;
    contactPhotoTranscriptInsets_sTextFontSize_contactPhotoTranscriptInsets = *(void *)&v5;
    contactPhotoTranscriptInsets_sCustomTextFontSize_contactPhotoTranscriptInsets = *(void *)&v6;
    objc_storeStrong((id *)&contactPhotoTranscriptInsets_sCustomTextFontName_contactPhotoTranscriptInsets, v8);
  }
  uint64_t v14 = contactPhotoTranscriptInsets_sBehavior_0;
  uint64_t v15 = contactPhotoTranscriptInsets_sBehavior_1;
  uint64_t v16 = contactPhotoTranscriptInsets_sBehavior_2;
  uint64_t v17 = contactPhotoTranscriptInsets_sBehavior_3;

  double v18 = *(double *)&v14;
  double v19 = *(double *)&v15;
  double v20 = *(double *)&v16;
  double v21 = *(double *)&v17;
  result.double right = v21;
  result.double bottom = v20;
  result.double left = v19;
  result.double top = v18;
  return result;
}

- (UIEdgeInsets)retractedReplyStampInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__CKUIBehavior_retractedReplyStampInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (retractedReplyStampInsets_once != -1) {
    dispatch_once(&retractedReplyStampInsets_once, block);
  }
  double v2 = *(double *)&retractedReplyStampInsets_sBehavior_1;
  double v3 = *(double *)&retractedReplyStampInsets_sBehavior_3;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v3;
  result.double bottom = v5;
  result.double left = v2;
  result.double top = v4;
  return result;
}

double __41__CKUIBehavior_retractedReplyStampInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) replyLineViewMaxWidth];
  double v3 = v2 + 10.0;
  [*(id *)(a1 + 32) replyLineViewMaxWidth];
  double result = v4 + 10.0;
  retractedReplyStampInsets_sBehavior_1 = *(void *)&v3;
  retractedReplyStampInsets_sBehavior_3 = *(void *)&result;
  return result;
}

- (double)replyLineWidth
{
  if (replyLineWidth_once != -1) {
    dispatch_once(&replyLineWidth_once, &__block_literal_global_784_0);
  }
  return *(double *)&replyLineWidth_sBehavior;
}

void __30__CKUIBehavior_replyLineWidth__block_invoke()
{
  replyLineWidth_sBehavior = 0x4010000000000000;
}

- (double)replyLineViewVerticalPadding
{
  if (replyLineViewVerticalPadding_once != -1) {
    dispatch_once(&replyLineViewVerticalPadding_once, &__block_literal_global_786_0);
  }
  return *(double *)&replyLineViewVerticalPadding_sBehavior;
}

void __44__CKUIBehavior_replyLineViewVerticalPadding__block_invoke()
{
  replyLineViewVerticalPadding_sBehavior = 0x4014000000000000;
}

- (double)replyLineViewHorizontalPadding
{
  if (replyLineViewHorizontalPadding_once != -1) {
    dispatch_once(&replyLineViewHorizontalPadding_once, &__block_literal_global_788_0);
  }
  return *(double *)&replyLineViewHorizontalPadding_sBehavior;
}

void __46__CKUIBehavior_replyLineViewHorizontalPadding__block_invoke()
{
  replyLineViewHorizontalPadding_sBehavior = 0x4024000000000000;
}

- (double)replyLineViewContactImageLayoutHorizontalPadding
{
  if (replyLineViewContactImageLayoutHorizontalPadding_once != -1) {
    dispatch_once(&replyLineViewContactImageLayoutHorizontalPadding_once, &__block_literal_global_790);
  }
  return *(double *)&replyLineViewContactImageLayoutHorizontalPadding_sBehavior;
}

void __64__CKUIBehavior_replyLineViewContactImageLayoutHorizontalPadding__block_invoke()
{
  replyLineViewContactImageLayoutHorizontalPadding_sBehavior = 0x4000000000000000;
}

- (double)replyLineBracketRadius
{
  if (replyLineBracketRadius_once != -1) {
    dispatch_once(&replyLineBracketRadius_once, &__block_literal_global_792);
  }
  return *(double *)&replyLineBracketRadius_sBehavior;
}

void __38__CKUIBehavior_replyLineBracketRadius__block_invoke()
{
  replyLineBracketRadius_sBehavior = 0x4035000000000000;
}

- (double)replyLineViewMaxWidth
{
  if (replyLineViewMaxWidth_once != -1) {
    dispatch_once(&replyLineViewMaxWidth_once, &__block_literal_global_794_0);
  }
  return *(double *)&replyLineViewMaxWidth_sBehavior;
}

void __37__CKUIBehavior_replyLineViewMaxWidth__block_invoke()
{
  replyLineViewMaxWidth_sBehavior = 0x4042000000000000;
}

- (double)transcriptDrawerSpace
{
  if (transcriptDrawerSpace_once != -1) {
    dispatch_once(&transcriptDrawerSpace_once, &__block_literal_global_796);
  }
  return *(double *)&transcriptDrawerSpace_sBehavior;
}

void __37__CKUIBehavior_transcriptDrawerSpace__block_invoke()
{
  transcriptDrawerSpace_sBehavior = 0x4020000000000000;
}

- (BOOL)ckShouldUpdatetranscriptDrawerGestureAcceleration
{
  return 0;
}

- (double)transcriptDrawerGestureAcceleration
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptDrawerGestureAcceleration_sContentSizeCategory_transcriptDrawerGestureAcceleration, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptDrawerGestureAcceleration](self, "ckShouldUpdatetranscriptDrawerGestureAcceleration")|| v10|| transcriptDrawerGestureAcceleration_sIsBoldTextEnabled_transcriptDrawerGestureAcceleration != IsBoldTextEnabled|| (uint64_t v11 = transcriptDrawerGestureAcceleration_sTextFontSize_transcriptDrawerGestureAcceleration, *(double *)&transcriptDrawerGestureAcceleration_sTextFontSize_transcriptDrawerGestureAcceleration != v5)|| (uint64_t v11 = transcriptDrawerGestureAcceleration_sCustomTextFontSize_transcriptDrawerGestureAcceleration, *(double *)&transcriptDrawerGestureAcceleration_sCustomTextFontSize_transcriptDrawerGestureAcceleration != v6)|| (objc_msgSend((id)transcriptDrawerGestureAcceleration_sCustomTextFontName_transcriptDrawerGestureAcceleration, "isEqualToString:", v9, *(double *)&transcriptDrawerGestureAcceleration_sCustomTextFontSize_transcriptDrawerGestureAcceleration) & 1) == 0)
  {
    BOOL v12 = [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    double v13 = 3.8;
    if (!v12) {
      double v13 = 1.0;
    }
    transcriptDrawerGestureAcceleration_sBehavior = *(void *)&v13;
    objc_storeStrong((id *)&transcriptDrawerGestureAcceleration_sContentSizeCategory_transcriptDrawerGestureAcceleration, v3);
    transcriptDrawerGestureAcceleration_sIsBoldTextEnabled_transcriptDrawerGestureAcceleration = IsBoldTextEnabled;
    transcriptDrawerGestureAcceleration_sTextFontSize_transcriptDrawerGestureAcceleration = *(void *)&v5;
    transcriptDrawerGestureAcceleration_sCustomTextFontSize_transcriptDrawerGestureAcceleration = *(void *)&v6;
    objc_storeStrong((id *)&transcriptDrawerGestureAcceleration_sCustomTextFontName_transcriptDrawerGestureAcceleration, v8);
  }
  double v14 = *(double *)&transcriptDrawerGestureAcceleration_sBehavior;

  return v14;
}

- (double)transcriptDrawerOverlapForMarginInsets:(UIEdgeInsets)a3
{
  double right = a3.right;
  [(CKUIBehavior *)self balloonTranscriptInsets];
  double v6 = right + v5;
  [(CKUIBehavior *)self balloonMaskTailWidth];
  double v8 = v7 + v6;
  [(CKUIBehavior *)self transcriptDrawerSpace];
  return v8 - v9;
}

- (double)transcriptDrawerWidthForMarginInsets:(UIEdgeInsets)a3
{
  double right = a3.right;
  v35[1] = *MEMORY[0x1E4F143B8];
  double v5 = CKPreferredContentSizeCategory();
  double v6 = &messageAcknowledgmentGrayColor_sBehavior;
  if (!+[CKApplicationState isResizing])
  {
    double v7 = CKUserPreferenceFontSize();
    if (UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptDrawerWidthForMarginInsets__sContentSizeCategory_transcriptDrawerWidth, (UIContentSizeCategory)v5)|| (sInvalidTranscriptDrawerWidth == 1 ? (BOOL v8 = v7 == 13.0) : (BOOL v8 = 0), !v8))
    {
      double v9 = +[CKUIBehavior sharedBehaviors];
      NSComparisonResult v10 = [v9 timestampDateFormatter];

      id v11 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
      [v11 setHour:11];
      id v12 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
      [v12 setHour:23];
      double v13 = [MEMORY[0x1E4F1C9A8] currentCalendar];
      double v14 = [v13 dateFromComponents:v11];
      double v31 = v10;
      uint64_t v15 = [v10 stringFromDate:v14];

      uint64_t v16 = [MEMORY[0x1E4F1C9A8] currentCalendar];
      uint64_t v17 = [v16 dateFromComponents:v12];
      double v18 = [v10 stringFromDate:v17];

      uint64_t v34 = *MEMORY[0x1E4FB06F8];
      uint64_t v19 = v34;
      double v20 = [(CKUIBehavior *)self transcriptDrawerFont];
      v35[0] = v20;
      double v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1];
      [v15 sizeWithAttributes:v21];
      double v23 = v22;

      uint64_t v32 = v19;
      double v24 = [(CKUIBehavior *)self transcriptDrawerFont];
      v33 = v24;
      double v6 = &messageAcknowledgmentGrayColor_sBehavior;
      double v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v33 forKeys:&v32 count:1];
      [v18 sizeWithAttributes:v25];
      double v27 = v26;

      if (v23 >= v27) {
        *(double *)&uint64_t v28 = v23;
      }
      else {
        *(double *)&uint64_t v28 = v27;
      }
      transcriptDrawerWidthForMarginInsets__sTranscriptDrawerWidth = v28;
      sInvalidTranscriptDrawerWidth = 1;
      objc_storeStrong((id *)&transcriptDrawerWidthForMarginInsets__sContentSizeCategory_transcriptDrawerWidth, v5);
    }
  }
  double v29 = *((double *)v6 + 158);

  return right + v29;
}

- (void)invalidateTranscriptDrawerWidth
{
  sInvalidTranscriptDrawerWidth = 0;
}

- (BOOL)ckShouldUpdatetranscriptEditingSelectionImageBaseConfiguration
{
  return 0;
}

- (UIImageSymbolConfiguration)transcriptEditingSelectionImageBaseConfiguration
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptEditingSelectionImageBaseConfiguration_sContentSizeCategory_transcriptEditingSelectionImageBaseConfiguration, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptEditingSelectionImageBaseConfiguration](self, "ckShouldUpdatetranscriptEditingSelectionImageBaseConfiguration")|| v10|| transcriptEditingSelectionImageBaseConfiguration_sIsBoldTextEnabled_transcriptEditingSelectionImageBaseConfiguration != IsBoldTextEnabled|| (uint64_t v11 = transcriptEditingSelectionImageBaseConfiguration_sTextFontSize_transcriptEditingSelectionImageBaseConfiguration, *(double *)&transcriptEditingSelectionImageBaseConfiguration_sTextFontSize_transcriptEditingSelectionImageBaseConfiguration != v5)|| (uint64_t v11 = transcriptEditingSelectionImageBaseConfiguration_sCustomTextFontSize_transcriptEditingSelectionImageBaseConfiguration, *(double *)&transcriptEditingSelectionImageBaseConfiguration_sCustomTextFontSize_transcriptEditingSelectionImageBaseConfiguration != v6)|| (objc_msgSend((id)transcriptEditingSelectionImageBaseConfiguration_sCustomTextFontName_transcriptEditingSelectionImageBaseConfiguration, "isEqualToString:", v9, *(double *)&transcriptEditingSelectionImageBaseConfiguration_sCustomTextFontSize_transcriptEditingSelectionImageBaseConfiguration) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4F42A98], "configurationWithScale:", 3, *(double *)&v11);
    double v13 = (void *)transcriptEditingSelectionImageBaseConfiguration_sBehavior;
    transcriptEditingSelectionImageBaseConfiguration_sBehavior = v12;

    objc_storeStrong((id *)&transcriptEditingSelectionImageBaseConfiguration_sContentSizeCategory_transcriptEditingSelectionImageBaseConfiguration, v3);
    transcriptEditingSelectionImageBaseConfiguration_sIsBoldTextEnabled_transcriptEditingSelectionImageBaseConfiguration = IsBoldTextEnabled;
    transcriptEditingSelectionImageBaseConfiguration_sTextFontSize_transcriptEditingSelectionImageBaseConfiguration = *(void *)&v5;
    transcriptEditingSelectionImageBaseConfiguration_sCustomTextFontSize_transcriptEditingSelectionImageBaseConfiguration = *(void *)&v6;
    objc_storeStrong((id *)&transcriptEditingSelectionImageBaseConfiguration_sCustomTextFontName_transcriptEditingSelectionImageBaseConfiguration, v8);
  }
  double v14 = (UIImageSymbolConfiguration *)(id)transcriptEditingSelectionImageBaseConfiguration_sBehavior;

  return v14;
}

- (UIImage)transcriptEditingSelectedImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__CKUIBehavior_transcriptEditingSelectedImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (transcriptEditingSelectedImage_once != -1) {
    dispatch_once(&transcriptEditingSelectedImage_once, block);
  }
  return (UIImage *)(id)transcriptEditingSelectedImage_sBehavior;
}

void __46__CKUIBehavior_transcriptEditingSelectedImage__block_invoke(uint64_t a1)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  double v2 = [MEMORY[0x1E4F428B8] whiteColor];
  v10[0] = v2;
  double v3 = [MEMORY[0x1E4F428B8] systemBlueColor];
  v10[1] = v3;
  double v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:2];

  double v5 = [*(id *)(a1 + 32) transcriptEditingSelectionImageBaseConfiguration];
  double v6 = [MEMORY[0x1E4F42A98] configurationWithPaletteColors:v4];
  double v7 = [v5 configurationByApplyingConfiguration:v6];

  uint64_t v8 = [MEMORY[0x1E4F42A80] systemImageNamed:@"checkmark.circle.fill" withConfiguration:v7];

  double v9 = (void *)transcriptEditingSelectedImage_sBehavior;
  transcriptEditingSelectedImage_sBehavior = v8;
}

- (UIImage)transcriptEditingUnselectedImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __48__CKUIBehavior_transcriptEditingUnselectedImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (transcriptEditingUnselectedImage_once != -1) {
    dispatch_once(&transcriptEditingUnselectedImage_once, block);
  }
  return (UIImage *)(id)transcriptEditingUnselectedImage_sBehavior;
}

void __48__CKUIBehavior_transcriptEditingUnselectedImage__block_invoke(uint64_t a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  double v2 = [MEMORY[0x1E4F428B8] tertiaryLabelColor];
  v9[0] = v2;
  double v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];

  double v4 = [*(id *)(a1 + 32) transcriptEditingSelectionImageBaseConfiguration];
  double v5 = [MEMORY[0x1E4F42A98] configurationWithPaletteColors:v3];
  double v6 = [v4 configurationByApplyingConfiguration:v5];

  uint64_t v7 = [MEMORY[0x1E4F42A80] systemImageNamed:@"circle" withConfiguration:v6];

  uint64_t v8 = (void *)transcriptEditingUnselectedImage_sBehavior;
  transcriptEditingUnselectedImage_sBehavior = v7;
}

- (double)editingCheckmarkLeadingPadding
{
  if (editingCheckmarkLeadingPadding_once != -1) {
    dispatch_once(&editingCheckmarkLeadingPadding_once, &__block_literal_global_804);
  }
  return *(double *)&editingCheckmarkLeadingPadding_sBehavior;
}

void __46__CKUIBehavior_editingCheckmarkLeadingPadding__block_invoke()
{
  editingCheckmarkLeadingPadding_sBehavior = 0x4026000000000000;
}

- (double)editingCheckmarkTrailingPadding
{
  if (editingCheckmarkTrailingPadding_once != -1) {
    dispatch_once(&editingCheckmarkTrailingPadding_once, &__block_literal_global_806);
  }
  return *(double *)&editingCheckmarkTrailingPadding_sBehavior;
}

void __47__CKUIBehavior_editingCheckmarkTrailingPadding__block_invoke()
{
  editingCheckmarkTrailingPadding_sBehavior = 0x4034000000000000;
}

- (BOOL)ckShouldUpdatetopTranscriptSpace
{
  return 0;
}

- (double)topTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)topTranscriptSpace_sContentSizeCategory_topTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetopTranscriptSpace]
    || v10
    || topTranscriptSpace_sIsBoldTextEnabled_topTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = topTranscriptSpace_sTextFontSize_topTranscriptSpace,
        *(double *)&topTranscriptSpace_sTextFontSize_topTranscriptSpace != v5)
    || (uint64_t v11 = topTranscriptSpace_sCustomTextFontSize_topTranscriptSpace,
        *(double *)&topTranscriptSpace_sCustomTextFontSize_topTranscriptSpace != v6)
    || (objc_msgSend((id)topTranscriptSpace_sCustomTextFontName_topTranscriptSpace, "isEqualToString:", v9, *(double *)&topTranscriptSpace_sCustomTextFontSize_topTranscriptSpace) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self transcriptTextFont];
    [v12 _scaledValueForValue:15.5];
    double v14 = v13;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&topTranscriptSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&topTranscriptSpace_sContentSizeCategory_topTranscriptSpace, v3);
    topTranscriptSpace_sIsBoldTextEnabled_topTranscriptSpace = IsBoldTextEnabled;
    topTranscriptSpace_sTextFontSize_topTranscriptSpace = *(void *)&v5;
    topTranscriptSpace_sCustomTextFontSize_topTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&topTranscriptSpace_sCustomTextFontName_topTranscriptSpace, v8);
  }
  double v16 = *(double *)&topTranscriptSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatebottomTranscriptSpace
{
  return 0;
}

- (double)bottomTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)bottomTranscriptSpace_sContentSizeCategory_bottomTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatebottomTranscriptSpace]
    || v10
    || bottomTranscriptSpace_sIsBoldTextEnabled_bottomTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = bottomTranscriptSpace_sTextFontSize_bottomTranscriptSpace,
        *(double *)&bottomTranscriptSpace_sTextFontSize_bottomTranscriptSpace != v5)
    || (uint64_t v11 = bottomTranscriptSpace_sCustomTextFontSize_bottomTranscriptSpace,
        *(double *)&bottomTranscriptSpace_sCustomTextFontSize_bottomTranscriptSpace != v6)
    || (objc_msgSend((id)bottomTranscriptSpace_sCustomTextFontName_bottomTranscriptSpace, "isEqualToString:", v9, *(double *)&bottomTranscriptSpace_sCustomTextFontSize_bottomTranscriptSpace) & 1) == 0)
  {
    -[CKUIBehavior balloonBalloonTranscriptSpace:](self, "balloonBalloonTranscriptSpace:", 0, *(double *)&v11);
    bottomTranscriptSpace_sBehavior = v12;
    objc_storeStrong((id *)&bottomTranscriptSpace_sContentSizeCategory_bottomTranscriptSpace, v3);
    bottomTranscriptSpace_sIsBoldTextEnabled_bottomTranscriptSpace = IsBoldTextEnabled;
    bottomTranscriptSpace_sTextFontSize_bottomTranscriptSpace = *(void *)&v5;
    bottomTranscriptSpace_sCustomTextFontSize_bottomTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&bottomTranscriptSpace_sCustomTextFontName_bottomTranscriptSpace, v8);
  }
  double v13 = *(double *)&bottomTranscriptSpace_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdateunavailabilityIndicatorBottomTranscriptSpace
{
  return 0;
}

- (double)unavailabilityIndicatorBottomTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)unavailabilityIndicatorBottomTranscriptSpace_sContentSizeCategory_unavailabilityIndicatorBottomTranscriptSpace, v3);
  if (-[CKUIBehavior ckShouldUpdateunavailabilityIndicatorBottomTranscriptSpace](self, "ckShouldUpdateunavailabilityIndicatorBottomTranscriptSpace")|| v10|| unavailabilityIndicatorBottomTranscriptSpace_sIsBoldTextEnabled_unavailabilityIndicatorBottomTranscriptSpace != IsBoldTextEnabled|| *(double *)&unavailabilityIndicatorBottomTranscriptSpace_sTextFontSize_unavailabilityIndicatorBottomTranscriptSpace != v5|| *(double *)&unavailabilityIndicatorBottomTranscriptSpace_sCustomTextFontSize_unavailabilityIndicatorBottomTranscriptSpace != v6|| (objc_msgSend((id)unavailabilityIndicatorBottomTranscriptSpace_sCustomTextFontName_unavailabilityIndicatorBottomTranscriptSpace, "isEqualToString:", v9, *(double *)&unavailabilityIndicatorBottomTranscriptSpace_sCustomTextFontSize_unavailabilityIndicatorBottomTranscriptSpace) & 1) == 0)
  {
    unavailabilityIndicatorBottomTranscriptSpace_sBehavior = 0x4030000000000000;
    objc_storeStrong((id *)&unavailabilityIndicatorBottomTranscriptSpace_sContentSizeCategory_unavailabilityIndicatorBottomTranscriptSpace, v3);
    unavailabilityIndicatorBottomTranscriptSpace_sIsBoldTextEnabled_unavailabilityIndicatorBottomTranscriptSpace = IsBoldTextEnabled;
    unavailabilityIndicatorBottomTranscriptSpace_sTextFontSize_unavailabilityIndicatorBottomTranscriptSpace = *(void *)&v5;
    unavailabilityIndicatorBottomTranscriptSpace_sCustomTextFontSize_unavailabilityIndicatorBottomTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&unavailabilityIndicatorBottomTranscriptSpace_sCustomTextFontName_unavailabilityIndicatorBottomTranscriptSpace, v8);
  }
  double v11 = *(double *)&unavailabilityIndicatorBottomTranscriptSpace_sBehavior;

  return v11;
}

- (BOOL)ckShouldUpdatenotifyAnywayBottomTranscriptSpace
{
  return 0;
}

- (double)notifyAnywayBottomTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)notifyAnywayBottomTranscriptSpace_sContentSizeCategory_notifyAnywayBottomTranscriptSpace, v3);
  if (-[CKUIBehavior ckShouldUpdatenotifyAnywayBottomTranscriptSpace](self, "ckShouldUpdatenotifyAnywayBottomTranscriptSpace")|| v10|| notifyAnywayBottomTranscriptSpace_sIsBoldTextEnabled_notifyAnywayBottomTranscriptSpace != IsBoldTextEnabled|| *(double *)&notifyAnywayBottomTranscriptSpace_sTextFontSize_notifyAnywayBottomTranscriptSpace != v5|| *(double *)&notifyAnywayBottomTranscriptSpace_sCustomTextFontSize_notifyAnywayBottomTranscriptSpace != v6|| (objc_msgSend((id)notifyAnywayBottomTranscriptSpace_sCustomTextFontName_notifyAnywayBottomTranscriptSpace, "isEqualToString:", v9, *(double *)&notifyAnywayBottomTranscriptSpace_sCustomTextFontSize_notifyAnywayBottomTranscriptSpace) & 1) == 0)
  {
    notifyAnywayBottomTranscriptSpace_sBehavior = 0x4028000000000000;
    objc_storeStrong((id *)&notifyAnywayBottomTranscriptSpace_sContentSizeCategory_notifyAnywayBottomTranscriptSpace, v3);
    notifyAnywayBottomTranscriptSpace_sIsBoldTextEnabled_notifyAnywayBottomTranscriptSpace = IsBoldTextEnabled;
    notifyAnywayBottomTranscriptSpace_sTextFontSize_notifyAnywayBottomTranscriptSpace = *(void *)&v5;
    notifyAnywayBottomTranscriptSpace_sCustomTextFontSize_notifyAnywayBottomTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&notifyAnywayBottomTranscriptSpace_sCustomTextFontName_notifyAnywayBottomTranscriptSpace, v8);
  }
  double v11 = *(double *)&notifyAnywayBottomTranscriptSpace_sBehavior;

  return v11;
}

- (BOOL)ckShouldUpdatesatelliteAvailabilityIndicatorBottomTranscriptSpace
{
  return 0;
}

- (double)satelliteAvailabilityIndicatorBottomTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)satelliteAvailabilityIndicatorBottomTranscriptSpace_sContentSizeCategory_satelliteAvailabilityIndicatorBottomTranscriptSpace, v3);
  if (-[CKUIBehavior ckShouldUpdatesatelliteAvailabilityIndicatorBottomTranscriptSpace](self, "ckShouldUpdatesatelliteAvailabilityIndicatorBottomTranscriptSpace")|| v10|| satelliteAvailabilityIndicatorBottomTranscriptSpace_sIsBoldTextEnabled_satelliteAvailabilityIndicatorBottomTranscriptSpace != IsBoldTextEnabled|| *(double *)&satelliteAvailabilityIndicatorBottomTranscriptSpace_sTextFontSize_satelliteAvailabilityIndicatorBottomTranscriptSpace != v5|| *(double *)&satelliteAvailabilityIndicatorBottomTranscriptSpace_sCustomTextFontSize_satelliteAvailabilityIndicatorBottomTranscriptSpace != v6|| (objc_msgSend((id)satelliteAvailabilityIndicatorBottomTranscriptSpace_sCustomTextFontName_satelliteAvailabilityIndicatorBottomTranscriptSpace, "isEqualToString:", v9, *(double *)&satelliteAvailabilityIndicatorBottomTranscriptSpace_sCustomTextFontSize_satelliteAvailabilityIndicatorBottomTranscriptSpace) & 1) == 0)
  {
    satelliteAvailabilityIndicatorBottomTranscriptSpace_sBehavior = 0x4030000000000000;
    objc_storeStrong((id *)&satelliteAvailabilityIndicatorBottomTranscriptSpace_sContentSizeCategory_satelliteAvailabilityIndicatorBottomTranscriptSpace, v3);
    satelliteAvailabilityIndicatorBottomTranscriptSpace_sIsBoldTextEnabled_satelliteAvailabilityIndicatorBottomTranscriptSpace = IsBoldTextEnabled;
    satelliteAvailabilityIndicatorBottomTranscriptSpace_sTextFontSize_satelliteAvailabilityIndicatorBottomTranscriptSpace = *(void *)&v5;
    satelliteAvailabilityIndicatorBottomTranscriptSpace_sCustomTextFontSize_satelliteAvailabilityIndicatorBottomTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&satelliteAvailabilityIndicatorBottomTranscriptSpace_sCustomTextFontName_satelliteAvailabilityIndicatorBottomTranscriptSpace, v8);
  }
  double v11 = *(double *)&satelliteAvailabilityIndicatorBottomTranscriptSpace_sBehavior;

  return v11;
}

- (BOOL)ckShouldUpdatesatelliteSuppressedNotificationBottomTranscriptSpace
{
  return 0;
}

- (double)satelliteSuppressedNotificationBottomTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)satelliteSuppressedNotificationBottomTranscriptSpace_sContentSizeCategory_satelliteSuppressedNotificationBottomTranscriptSpace, v3);
  if (-[CKUIBehavior ckShouldUpdatesatelliteSuppressedNotificationBottomTranscriptSpace](self, "ckShouldUpdatesatelliteSuppressedNotificationBottomTranscriptSpace")|| v10|| satelliteSuppressedNotificationBottomTranscriptSpace_sIsBoldTextEnabled_satelliteSuppressedNotificationBottomTranscriptSpace != IsBoldTextEnabled|| *(double *)&satelliteSuppressedNotificationBottomTranscriptSpace_sTextFontSize_satelliteSuppressedNotificationBottomTranscriptSpace != v5|| *(double *)&satelliteSuppressedNotificationBottomTranscriptSpace_sCustomTextFontSize_satelliteSuppressedNotificationBottomTranscriptSpace != v6|| (objc_msgSend((id)satelliteSuppressedNotificationBottomTranscriptSpace_sCustomTextFontName_satelliteSuppressedNotificationBottomTranscriptSpace, "isEqualToString:", v9, *(double *)&satelliteSuppressedNotificationBottomTranscriptSpace_sCustomTextFontSize_satelliteSuppressedNotificationBottomTranscriptSpace) & 1) == 0)
  {
    satelliteSuppressedNotificationBottomTranscriptSpace_sBehavior = 0x4030000000000000;
    objc_storeStrong((id *)&satelliteSuppressedNotificationBottomTranscriptSpace_sContentSizeCategory_satelliteSuppressedNotificationBottomTranscriptSpace, v3);
    satelliteSuppressedNotificationBottomTranscriptSpace_sIsBoldTextEnabled_satelliteSuppressedNotificationBottomTranscriptSpace = IsBoldTextEnabled;
    satelliteSuppressedNotificationBottomTranscriptSpace_sTextFontSize_satelliteSuppressedNotificationBottomTranscriptSpace = *(void *)&v5;
    satelliteSuppressedNotificationBottomTranscriptSpace_sCustomTextFontSize_satelliteSuppressedNotificationBottomTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&satelliteSuppressedNotificationBottomTranscriptSpace_sCustomTextFontName_satelliteSuppressedNotificationBottomTranscriptSpace, v8);
  }
  double v11 = *(double *)&satelliteSuppressedNotificationBottomTranscriptSpace_sBehavior;

  return v11;
}

- (BOOL)ckShouldUpdateminTranscriptSpace
{
  return 0;
}

- (double)minTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)minTranscriptSpace_sContentSizeCategory_minTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateminTranscriptSpace]
    || v10
    || minTranscriptSpace_sIsBoldTextEnabled_minTranscriptSpace != IsBoldTextEnabled
    || *(double *)&minTranscriptSpace_sTextFontSize_minTranscriptSpace != v5
    || *(double *)&minTranscriptSpace_sCustomTextFontSize_minTranscriptSpace != v6
    || (objc_msgSend((id)minTranscriptSpace_sCustomTextFontName_minTranscriptSpace, "isEqualToString:", v9, *(double *)&minTranscriptSpace_sCustomTextFontSize_minTranscriptSpace) & 1) == 0)
  {
    minTranscriptSpace_sBehavior = 0x3FF0000000000000;
    objc_storeStrong((id *)&minTranscriptSpace_sContentSizeCategory_minTranscriptSpace, v3);
    minTranscriptSpace_sIsBoldTextEnabled_minTranscriptSpace = IsBoldTextEnabled;
    minTranscriptSpace_sTextFontSize_minTranscriptSpace = *(void *)&v5;
    minTranscriptSpace_sCustomTextFontSize_minTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&minTranscriptSpace_sCustomTextFontName_minTranscriptSpace, v8);
  }
  double v11 = *(double *)&minTranscriptSpace_sBehavior;

  return v11;
}

- (BOOL)ckShouldUpdatexsTranscriptSpace
{
  return 0;
}

- (double)xsTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)xsTranscriptSpace_sContentSizeCategory_xsTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatexsTranscriptSpace]
    || v10
    || xsTranscriptSpace_sIsBoldTextEnabled_xsTranscriptSpace != IsBoldTextEnabled
    || *(double *)&xsTranscriptSpace_sTextFontSize_xsTranscriptSpace != v5
    || *(double *)&xsTranscriptSpace_sCustomTextFontSize_xsTranscriptSpace != v6
    || (objc_msgSend((id)xsTranscriptSpace_sCustomTextFontName_xsTranscriptSpace, "isEqualToString:", v9, *(double *)&xsTranscriptSpace_sCustomTextFontSize_xsTranscriptSpace) & 1) == 0)
  {
    xsTranscriptSpace_sBehavior = 0x4000000000000000;
    objc_storeStrong((id *)&xsTranscriptSpace_sContentSizeCategory_xsTranscriptSpace, v3);
    xsTranscriptSpace_sIsBoldTextEnabled_xsTranscriptSpace = IsBoldTextEnabled;
    xsTranscriptSpace_sTextFontSize_xsTranscriptSpace = *(void *)&v5;
    xsTranscriptSpace_sCustomTextFontSize_xsTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&xsTranscriptSpace_sCustomTextFontName_xsTranscriptSpace, v8);
  }
  double v11 = *(double *)&xsTranscriptSpace_sBehavior;

  return v11;
}

- (BOOL)ckShouldUpdatesmallTranscriptSpace
{
  return 0;
}

- (double)smallTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)smallTranscriptSpace_sContentSizeCategory_smallTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesmallTranscriptSpace]
    || v10
    || smallTranscriptSpace_sIsBoldTextEnabled_smallTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = smallTranscriptSpace_sTextFontSize_smallTranscriptSpace,
        *(double *)&smallTranscriptSpace_sTextFontSize_smallTranscriptSpace != v5)
    || (uint64_t v11 = smallTranscriptSpace_sCustomTextFontSize_smallTranscriptSpace,
        *(double *)&smallTranscriptSpace_sCustomTextFontSize_smallTranscriptSpace != v6)
    || (objc_msgSend((id)smallTranscriptSpace_sCustomTextFontName_smallTranscriptSpace, "isEqualToString:", v9, *(double *)&smallTranscriptSpace_sCustomTextFontSize_smallTranscriptSpace) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self transcriptTextFont];
    [v12 _scaledValueForValue:5.0];
    double v14 = v13;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&smallTranscriptSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&smallTranscriptSpace_sContentSizeCategory_smallTranscriptSpace, v3);
    smallTranscriptSpace_sIsBoldTextEnabled_smallTranscriptSpace = IsBoldTextEnabled;
    smallTranscriptSpace_sTextFontSize_smallTranscriptSpace = *(void *)&v5;
    smallTranscriptSpace_sCustomTextFontSize_smallTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&smallTranscriptSpace_sCustomTextFontName_smallTranscriptSpace, v8);
  }
  double v16 = *(double *)&smallTranscriptSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatemediumTranscriptSpace
{
  return 0;
}

- (double)mediumTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)mediumTranscriptSpace_sContentSizeCategory_mediumTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatemediumTranscriptSpace]
    || v10
    || mediumTranscriptSpace_sIsBoldTextEnabled_mediumTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = mediumTranscriptSpace_sTextFontSize_mediumTranscriptSpace,
        *(double *)&mediumTranscriptSpace_sTextFontSize_mediumTranscriptSpace != v5)
    || (uint64_t v11 = mediumTranscriptSpace_sCustomTextFontSize_mediumTranscriptSpace,
        *(double *)&mediumTranscriptSpace_sCustomTextFontSize_mediumTranscriptSpace != v6)
    || (objc_msgSend((id)mediumTranscriptSpace_sCustomTextFontName_mediumTranscriptSpace, "isEqualToString:", v9, *(double *)&mediumTranscriptSpace_sCustomTextFontSize_mediumTranscriptSpace) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self transcriptTextFont];
    [v12 _scaledValueForValue:12.0];
    double v14 = v13;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&mediumTranscriptSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&mediumTranscriptSpace_sContentSizeCategory_mediumTranscriptSpace, v3);
    mediumTranscriptSpace_sIsBoldTextEnabled_mediumTranscriptSpace = IsBoldTextEnabled;
    mediumTranscriptSpace_sTextFontSize_mediumTranscriptSpace = *(void *)&v5;
    mediumTranscriptSpace_sCustomTextFontSize_mediumTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&mediumTranscriptSpace_sCustomTextFontName_mediumTranscriptSpace, v8);
  }
  double v16 = *(double *)&mediumTranscriptSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatemediumLargeTranscriptSpace
{
  return 0;
}

- (double)mediumLargeTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)mediumLargeTranscriptSpace_sContentSizeCategory_mediumLargeTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatemediumLargeTranscriptSpace]
    || v10
    || mediumLargeTranscriptSpace_sIsBoldTextEnabled_mediumLargeTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = mediumLargeTranscriptSpace_sTextFontSize_mediumLargeTranscriptSpace,
        *(double *)&mediumLargeTranscriptSpace_sTextFontSize_mediumLargeTranscriptSpace != v5)
    || (uint64_t v11 = mediumLargeTranscriptSpace_sCustomTextFontSize_mediumLargeTranscriptSpace,
        *(double *)&mediumLargeTranscriptSpace_sCustomTextFontSize_mediumLargeTranscriptSpace != v6)
    || (objc_msgSend((id)mediumLargeTranscriptSpace_sCustomTextFontName_mediumLargeTranscriptSpace, "isEqualToString:", v9, *(double *)&mediumLargeTranscriptSpace_sCustomTextFontSize_mediumLargeTranscriptSpace) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self transcriptTextFont];
    [v12 _scaledValueForValue:17.0];
    double v14 = v13;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&mediumLargeTranscriptSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&mediumLargeTranscriptSpace_sContentSizeCategory_mediumLargeTranscriptSpace, v3);
    mediumLargeTranscriptSpace_sIsBoldTextEnabled_mediumLargeTranscriptSpace = IsBoldTextEnabled;
    mediumLargeTranscriptSpace_sTextFontSize_mediumLargeTranscriptSpace = *(void *)&v5;
    mediumLargeTranscriptSpace_sCustomTextFontSize_mediumLargeTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&mediumLargeTranscriptSpace_sCustomTextFontName_mediumLargeTranscriptSpace, v8);
  }
  double v16 = *(double *)&mediumLargeTranscriptSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatelargeTranscriptSpace
{
  return 0;
}

- (double)largeTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)largeTranscriptSpace_sContentSizeCategory_largeTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatelargeTranscriptSpace]
    || v10
    || largeTranscriptSpace_sIsBoldTextEnabled_largeTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = largeTranscriptSpace_sTextFontSize_largeTranscriptSpace,
        *(double *)&largeTranscriptSpace_sTextFontSize_largeTranscriptSpace != v5)
    || (uint64_t v11 = largeTranscriptSpace_sCustomTextFontSize_largeTranscriptSpace,
        *(double *)&largeTranscriptSpace_sCustomTextFontSize_largeTranscriptSpace != v6)
    || (objc_msgSend((id)largeTranscriptSpace_sCustomTextFontName_largeTranscriptSpace, "isEqualToString:", v9, *(double *)&largeTranscriptSpace_sCustomTextFontSize_largeTranscriptSpace) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self transcriptTextFont];
    [v12 _scaledValueForValue:20.0];
    double v14 = v13;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&largeTranscriptSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&largeTranscriptSpace_sContentSizeCategory_largeTranscriptSpace, v3);
    largeTranscriptSpace_sIsBoldTextEnabled_largeTranscriptSpace = IsBoldTextEnabled;
    largeTranscriptSpace_sTextFontSize_largeTranscriptSpace = *(void *)&v5;
    largeTranscriptSpace_sCustomTextFontSize_largeTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&largeTranscriptSpace_sCustomTextFontName_largeTranscriptSpace, v8);
  }
  double v16 = *(double *)&largeTranscriptSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateextraLargeTranscriptSpace
{
  return 0;
}

- (double)extraLargeTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)extraLargeTranscriptSpace_sContentSizeCategory_extraLargeTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateextraLargeTranscriptSpace]
    || v10
    || extraLargeTranscriptSpace_sIsBoldTextEnabled_extraLargeTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = extraLargeTranscriptSpace_sTextFontSize_extraLargeTranscriptSpace,
        *(double *)&extraLargeTranscriptSpace_sTextFontSize_extraLargeTranscriptSpace != v5)
    || (uint64_t v11 = extraLargeTranscriptSpace_sCustomTextFontSize_extraLargeTranscriptSpace,
        *(double *)&extraLargeTranscriptSpace_sCustomTextFontSize_extraLargeTranscriptSpace != v6)
    || (objc_msgSend((id)extraLargeTranscriptSpace_sCustomTextFontName_extraLargeTranscriptSpace, "isEqualToString:", v9, *(double *)&extraLargeTranscriptSpace_sCustomTextFontSize_extraLargeTranscriptSpace) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self transcriptTextFont];
    [v12 _scaledValueForValue:34.0];
    double v14 = v13;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&extraLargeTranscriptSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&extraLargeTranscriptSpace_sContentSizeCategory_extraLargeTranscriptSpace, v3);
    extraLargeTranscriptSpace_sIsBoldTextEnabled_extraLargeTranscriptSpace = IsBoldTextEnabled;
    extraLargeTranscriptSpace_sTextFontSize_extraLargeTranscriptSpace = *(void *)&v5;
    extraLargeTranscriptSpace_sCustomTextFontSize_extraLargeTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&extraLargeTranscriptSpace_sCustomTextFontName_extraLargeTranscriptSpace, v8);
  }
  double v16 = *(double *)&extraLargeTranscriptSpace_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateselfReplyTranscriptSpace
{
  return 0;
}

- (double)selfReplyTranscriptSpace
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)selfReplyTranscriptSpace_sContentSizeCategory_selfReplyTranscriptSpace, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateselfReplyTranscriptSpace]
    || v10
    || selfReplyTranscriptSpace_sIsBoldTextEnabled_selfReplyTranscriptSpace != IsBoldTextEnabled
    || (uint64_t v11 = selfReplyTranscriptSpace_sTextFontSize_selfReplyTranscriptSpace,
        *(double *)&selfReplyTranscriptSpace_sTextFontSize_selfReplyTranscriptSpace != v5)
    || (uint64_t v11 = selfReplyTranscriptSpace_sCustomTextFontSize_selfReplyTranscriptSpace,
        *(double *)&selfReplyTranscriptSpace_sCustomTextFontSize_selfReplyTranscriptSpace != v6)
    || (objc_msgSend(selfReplyTranscriptSpace_sCustomTextFontName_selfReplyTranscriptSpace, "isEqualToString:", v9, *(double *)&selfReplyTranscriptSpace_sCustomTextFontSize_selfReplyTranscriptSpace) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self transcriptTextFont];
    [v12 _scaledValueForValue:24.0];
    double v14 = v13;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v15 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v15 = 1.0;
    }
    *(double *)&selfReplyTranscriptSpace_sBehavior = round(v14 * v15) / v15;

    objc_storeStrong((id *)&selfReplyTranscriptSpace_sContentSizeCategory_selfReplyTranscriptSpace, v3);
    selfReplyTranscriptSpace_sIsBoldTextEnabled_selfReplyTranscriptSpace = IsBoldTextEnabled;
    selfReplyTranscriptSpace_sTextFontSize_selfReplyTranscriptSpace = *(void *)&v5;
    selfReplyTranscriptSpace_sCustomTextFontSize_selfReplyTranscriptSpace = *(void *)&v6;
    objc_storeStrong((id *)&selfReplyTranscriptSpace_sCustomTextFontName_selfReplyTranscriptSpace, v8);
  }
  double v16 = *(double *)&selfReplyTranscriptSpace_sBehavior;

  return v16;
}

- (double)balloonContiguousSpace
{
  if (balloonContiguousSpace_once != -1) {
    dispatch_once(&balloonContiguousSpace_once, &__block_literal_global_808_0);
  }
  return *(double *)&balloonContiguousSpace_sBehavior;
}

void __38__CKUIBehavior_balloonContiguousSpace__block_invoke()
{
  balloonContiguousSpace_sBehavior = 0x3FF0000000000000;
}

- (double)balloonNonContiguousSpace
{
  if (balloonNonContiguousSpace_once != -1) {
    dispatch_once(&balloonNonContiguousSpace_once, &__block_literal_global_810);
  }
  return *(double *)&balloonNonContiguousSpace_sBehavior;
}

void __41__CKUIBehavior_balloonNonContiguousSpace__block_invoke()
{
  balloonNonContiguousSpace_sBehavior = 0x4022000000000000;
}

- (double)balloonBalloonTranscriptSpace:(unsigned __int8)a3
{
  if ((a3 - 1) > 1) {
    [(CKUIBehavior *)self balloonNonContiguousSpace];
  }
  else {
    [(CKUIBehavior *)self balloonContiguousSpace];
  }
  return result;
}

- (double)replyPreviewBalloonAlpha
{
  if (replyPreviewBalloonAlpha_once != -1) {
    dispatch_once(&replyPreviewBalloonAlpha_once, &__block_literal_global_812_0);
  }
  return *(double *)&replyPreviewBalloonAlpha_sBehavior;
}

void __40__CKUIBehavior_replyPreviewBalloonAlpha__block_invoke()
{
  replyPreviewBalloonAlpha_sBehavior = 0x3FE199999999999ALL;
}

- (double)replyPreviewBalloonMinWidth
{
  if (replyPreviewBalloonMinWidth_once != -1) {
    dispatch_once(&replyPreviewBalloonMinWidth_once, &__block_literal_global_814);
  }
  return *(double *)&replyPreviewBalloonMinWidth_sBehavior;
}

void __43__CKUIBehavior_replyPreviewBalloonMinWidth__block_invoke()
{
  replyPreviewBalloonMinWidth_sBehavior = 0x4048000000000000;
}

- (double)replyPreviewImageDiameter
{
  if (replyPreviewImageDiameter_once != -1) {
    dispatch_once(&replyPreviewImageDiameter_once, &__block_literal_global_816);
  }
  return *(double *)&replyPreviewImageDiameter_sBehavior;
}

void __41__CKUIBehavior_replyPreviewImageDiameter__block_invoke()
{
  replyPreviewImageDiameter_sBehavior = 0x4030000000000000;
}

- (double)contactPhotoBalloonMargin
{
  if (contactPhotoBalloonMargin_once != -1) {
    dispatch_once(&contactPhotoBalloonMargin_once, &__block_literal_global_818);
  }
  return *(double *)&contactPhotoBalloonMargin_sBehavior;
}

void __41__CKUIBehavior_contactPhotoBalloonMargin__block_invoke()
{
  contactPhotoBalloonMargin_sBehavior = 0x401C000000000000;
}

- (double)composeBalloonMaxWidthForEntryContentViewWidth:(double)a3
{
  [(CKUIBehavior *)self balloonMaskTailWidth];
  double v6 = v5;
  [(CKUIBehavior *)self balloonLineFragmentInsets];
  double v8 = v7;
  double v10 = v9;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v11 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v11 = 1.0;
  }
  return ceil((v6 + a3 - (v8 + v10) + -2.0) * v11) / v11;
}

- (id)configurationForNoExistingConversations:(id)a3
{
  return 0;
}

- (double)transcriptJunkHeaderButtonHeight
{
  if (transcriptJunkHeaderButtonHeight_once != -1) {
    dispatch_once(&transcriptJunkHeaderButtonHeight_once, &__block_literal_global_823);
  }
  return *(double *)&transcriptJunkHeaderButtonHeight_sBehavior;
}

void __48__CKUIBehavior_transcriptJunkHeaderButtonHeight__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4FB08E8] preferredFontDescriptorWithTextStyle:*MEMORY[0x1E4F43870] addingSymbolicTraits:0 options:1];
  double v1 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v0 size:0.0];
  [v1 _bodyLeading];
  double v3 = v2 * 1.63636364;

  transcriptJunkHeaderButtonHeight_sBehavior = *(void *)&v3;
}

- (double)transcriptScrollToBottomThreshold
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __49__CKUIBehavior_transcriptScrollToBottomThreshold__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (transcriptScrollToBottomThreshold_once != -1) {
    dispatch_once(&transcriptScrollToBottomThreshold_once, block);
  }
  return *(double *)&transcriptScrollToBottomThreshold_sBehavior;
}

double __49__CKUIBehavior_transcriptScrollToBottomThreshold__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskSizeWithTailShape:0 isMultiline:0];
  double v3 = v2;
  [*(id *)(a1 + 32) balloonBalloonTranscriptSpace:2];
  double result = (v3 + v4 * 2.0) * 4.0;
  transcriptScrollToBottomThreshold_sBehavior = *(void *)&result;
  return result;
}

- (double)transcriptScrollToBottomDuration
{
  if (transcriptScrollToBottomDuration_once != -1) {
    dispatch_once(&transcriptScrollToBottomDuration_once, &__block_literal_global_825_0);
  }
  return *(double *)&transcriptScrollToBottomDuration_sBehavior;
}

void __48__CKUIBehavior_transcriptScrollToBottomDuration__block_invoke()
{
  transcriptScrollToBottomDuration_sBehavior = 0x3FD3333333333333;
}

- (BOOL)transcriptMinBottomInsetIsEntryViewHeight
{
  if (transcriptMinBottomInsetIsEntryViewHeight_once != -1) {
    dispatch_once(&transcriptMinBottomInsetIsEntryViewHeight_once, &__block_literal_global_827);
  }
  return 0;
}

- (UIEdgeInsets)defaultAVPlayerViewContorllerControlsInsets
{
  if (defaultAVPlayerViewContorllerControlsInsets_once != -1) {
    dispatch_once(&defaultAVPlayerViewContorllerControlsInsets_once, &__block_literal_global_829);
  }
  double v2 = *(double *)&defaultAVPlayerViewContorllerControlsInsets_sBehavior_0;
  double v3 = *(double *)&defaultAVPlayerViewContorllerControlsInsets_sBehavior_1;
  double v4 = *(double *)&defaultAVPlayerViewContorllerControlsInsets_sBehavior_2;
  double v5 = *(double *)&defaultAVPlayerViewContorllerControlsInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __59__CKUIBehavior_defaultAVPlayerViewContorllerControlsInsets__block_invoke()
{
  defaultAVPlayerViewContorllerControlsInsets_sBehavior_0 = 0x4018000000000000;
  defaultAVPlayerViewContorllerControlsInsets_sBehavior_1 = 0x4018000000000000;
  defaultAVPlayerViewContorllerControlsInsets_sBehavior_2 = 0x4018000000000000;
  defaultAVPlayerViewContorllerControlsInsets_sBehavior_3 = 0x4018000000000000;
}

- (CGSize)tuConversationBalloonButtonAsIconSize
{
  if (tuConversationBalloonButtonAsIconSize_once != -1) {
    dispatch_once(&tuConversationBalloonButtonAsIconSize_once, &__block_literal_global_831_0);
  }
  double v2 = *(double *)&tuConversationBalloonButtonAsIconSize_sBehavior_0;
  double v3 = *(double *)&tuConversationBalloonButtonAsIconSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __53__CKUIBehavior_tuConversationBalloonButtonAsIconSize__block_invoke()
{
  tuConversationBalloonButtonAsIconSize_sBehavior_0 = 0x4041000000000000;
  tuConversationBalloonButtonAsIconSize_sBehavior_1 = 0x4041000000000000;
}

- (double)tuConversationBalloonInteritemSpacing
{
  if (tuConversationBalloonInteritemSpacing_once != -1) {
    dispatch_once(&tuConversationBalloonInteritemSpacing_once, &__block_literal_global_833_0);
  }
  return 0.0;
}

- (BOOL)ckShouldUpdatetuConversationBalloonTitleFont
{
  return 0;
}

- (UIFont)tuConversationBalloonTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)tuConversationBalloonTitleFont_sContentSizeCategory_tuConversationBalloonTitleFont, v3);
  double v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdatetuConversationBalloonTitleFont](self, "ckShouldUpdatetuConversationBalloonTitleFont")|| v11|| tuConversationBalloonTitleFont_sIsIncreaseContrastEnabled_tuConversationBalloonTitleFont != v4|| tuConversationBalloonTitleFont_sIsBoldTextEnabled_tuConversationBalloonTitleFont != IsBoldTextEnabled|| (uint64_t v12 = tuConversationBalloonTitleFont_sTextFontSize_tuConversationBalloonTitleFont, *(double *)&tuConversationBalloonTitleFont_sTextFontSize_tuConversationBalloonTitleFont != v6)|| (uint64_t v12 = tuConversationBalloonTitleFont_sCustomTextFontSize_tuConversationBalloonTitleFont, *(double *)&tuConversationBalloonTitleFont_sCustomTextFontSize_tuConversationBalloonTitleFont != v7)|| (objc_msgSend((id)tuConversationBalloonTitleFont_sCustomTextFontName_tuConversationBalloonTitleFont, "isEqualToString:", v10, *(double *)&tuConversationBalloonTitleFont_sCustomTextFontSize_tuConversationBalloonTitleFont) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    double v15 = [v14 fontDescriptor];
    double v16 = [v15 fontDescriptorWithSymbolicTraits:0x8000];

    uint64_t v17 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v16 size:0.0];

    double v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v18 = (void *)tuConversationBalloonTitleFont_sBehavior;
    tuConversationBalloonTitleFont_sBehavior = v17;

    objc_storeStrong((id *)&tuConversationBalloonTitleFont_sContentSizeCategory_tuConversationBalloonTitleFont, v3);
    tuConversationBalloonTitleFont_sIsIncreaseContrastEnabled_tuConversationBalloonTitleFont = v4;
    tuConversationBalloonTitleFont_sIsBoldTextEnabled_tuConversationBalloonTitleFont = IsBoldTextEnabled;
    tuConversationBalloonTitleFont_sTextFontSize_tuConversationBalloonTitleFont = *(void *)&v6;
    tuConversationBalloonTitleFont_sCustomTextFontSize_tuConversationBalloonTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&tuConversationBalloonTitleFont_sCustomTextFontName_tuConversationBalloonTitleFont, v9);
  }
  uint64_t v19 = (UIFont *)(id)v13[261];

  return v19;
}

- (BOOL)ckShouldUpdatetuConversationBalloonSubtitleFont
{
  return 0;
}

- (UIFont)tuConversationBalloonSubtitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)tuConversationBalloonSubtitleFont_sContentSizeCategory_tuConversationBalloonSubtitleFont, v3);
  uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdatetuConversationBalloonSubtitleFont](self, "ckShouldUpdatetuConversationBalloonSubtitleFont")|| v11|| tuConversationBalloonSubtitleFont_sIsIncreaseContrastEnabled_tuConversationBalloonSubtitleFont != v4|| tuConversationBalloonSubtitleFont_sIsBoldTextEnabled_tuConversationBalloonSubtitleFont != IsBoldTextEnabled|| *(double *)&tuConversationBalloonSubtitleFont_sTextFontSize_tuConversationBalloonSubtitleFont != v6|| *(double *)&tuConversationBalloonSubtitleFont_sCustomTextFontSize_tuConversationBalloonSubtitleFont != v7|| (objc_msgSend((id)tuConversationBalloonSubtitleFont_sCustomTextFontName_tuConversationBalloonSubtitleFont, "isEqualToString:", v10, *(double *)&tuConversationBalloonSubtitleFont_sCustomTextFontSize_tuConversationBalloonSubtitleFont) & 1) == 0)
  {
    double v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_fontForStyle:weight:", *MEMORY[0x1E4F43890], *MEMORY[0x1E4FB09D8]);
    double v14 = [v13 fontDescriptor];
    double v15 = [v14 fontDescriptorWithSymbolicTraits:0x8000];

    uint64_t v16 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v15 size:0.0];

    uint64_t v12 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    uint64_t v17 = (void *)tuConversationBalloonSubtitleFont_sBehavior;
    tuConversationBalloonSubtitleFont_sBehavior = v16;

    objc_storeStrong((id *)&tuConversationBalloonSubtitleFont_sContentSizeCategory_tuConversationBalloonSubtitleFont, v3);
    tuConversationBalloonSubtitleFont_sIsIncreaseContrastEnabled_tuConversationBalloonSubtitleFont = v4;
    tuConversationBalloonSubtitleFont_sIsBoldTextEnabled_tuConversationBalloonSubtitleFont = IsBoldTextEnabled;
    tuConversationBalloonSubtitleFont_sTextFontSize_tuConversationBalloonSubtitleFont = *(void *)&v6;
    tuConversationBalloonSubtitleFont_sCustomTextFontSize_tuConversationBalloonSubtitleFont = *(void *)&v7;
    objc_storeStrong((id *)&tuConversationBalloonSubtitleFont_sCustomTextFontName_tuConversationBalloonSubtitleFont, v9);
  }
  double v18 = (UIFont *)(id)v12[264];

  return v18;
}

- (double)tuConversationBalloonSessionImageTrailingPadding
{
  if (tuConversationBalloonSessionImageTrailingPadding_once != -1) {
    dispatch_once(&tuConversationBalloonSessionImageTrailingPadding_once, &__block_literal_global_835);
  }
  return *(double *)&tuConversationBalloonSessionImageTrailingPadding_sBehavior;
}

void __64__CKUIBehavior_tuConversationBalloonSessionImageTrailingPadding__block_invoke()
{
  tuConversationBalloonSessionImageTrailingPadding_sBehavior = 0x4024000000000000;
}

- (double)tuConversationBalloonContentTopPadding
{
  if (tuConversationBalloonContentTopPadding_once != -1) {
    dispatch_once(&tuConversationBalloonContentTopPadding_once, &__block_literal_global_837);
  }
  return *(double *)&tuConversationBalloonContentTopPadding_sBehavior;
}

void __54__CKUIBehavior_tuConversationBalloonContentTopPadding__block_invoke()
{
  tuConversationBalloonContentTopPadding_sBehavior = 0x4010000000000000;
}

- (double)tuConversationBalloonContentBottomPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __57__CKUIBehavior_tuConversationBalloonContentBottomPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (tuConversationBalloonContentBottomPadding_once != -1) {
    dispatch_once(&tuConversationBalloonContentBottomPadding_once, block);
  }
  return *(double *)&tuConversationBalloonContentBottomPadding_sBehavior;
}

uint64_t __57__CKUIBehavior_tuConversationBalloonContentBottomPadding__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) tuConversationBalloonContentTopPadding];
  tuConversationBalloonContentBottomPadding_sBehavior = v2;
  return result;
}

- (double)tuConversationBalloonLabelLeadingPadding
{
  if (tuConversationBalloonLabelLeadingPadding_once != -1) {
    dispatch_once(&tuConversationBalloonLabelLeadingPadding_once, &__block_literal_global_839);
  }
  return *(double *)&tuConversationBalloonLabelLeadingPadding_sBehavior;
}

void __56__CKUIBehavior_tuConversationBalloonLabelLeadingPadding__block_invoke()
{
  tuConversationBalloonLabelLeadingPadding_sBehavior = 0x3FF0000000000000;
}

- (double)tuConversationBalloonLabelTrailingPadding
{
  if (tuConversationBalloonLabelTrailingPadding_once != -1) {
    dispatch_once(&tuConversationBalloonLabelTrailingPadding_once, &__block_literal_global_841_1);
  }
  return *(double *)&tuConversationBalloonLabelTrailingPadding_sBehavior;
}

void __57__CKUIBehavior_tuConversationBalloonLabelTrailingPadding__block_invoke()
{
  tuConversationBalloonLabelTrailingPadding_sBehavior = 0x4014000000000000;
}

- (double)tuConversationBalloonJoinButtonLeadingPadding
{
  if (tuConversationBalloonJoinButtonLeadingPadding_once != -1) {
    dispatch_once(&tuConversationBalloonJoinButtonLeadingPadding_once, &__block_literal_global_843_0);
  }
  return *(double *)&tuConversationBalloonJoinButtonLeadingPadding_sBehavior;
}

void __61__CKUIBehavior_tuConversationBalloonJoinButtonLeadingPadding__block_invoke()
{
  tuConversationBalloonJoinButtonLeadingPadding_sBehavior = 0x401C000000000000;
}

- (double)tuConversationBalloonJoinButtonTrailingPadding
{
  if (tuConversationBalloonJoinButtonTrailingPadding_once != -1) {
    dispatch_once(&tuConversationBalloonJoinButtonTrailingPadding_once, &__block_literal_global_845);
  }
  return 0.0;
}

- (BOOL)ckShouldUpdatetuConversationBalloonActionButtonFont
{
  return 0;
}

- (UIFont)tuConversationBalloonActionButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)tuConversationBalloonActionButtonFont_sContentSizeCategory_tuConversationBalloonActionButtonFont, v3);
  if (-[CKUIBehavior ckShouldUpdatetuConversationBalloonActionButtonFont](self, "ckShouldUpdatetuConversationBalloonActionButtonFont")|| v11|| tuConversationBalloonActionButtonFont_sIsIncreaseContrastEnabled_tuConversationBalloonActionButtonFont != v4|| tuConversationBalloonActionButtonFont_sIsBoldTextEnabled_tuConversationBalloonActionButtonFont != IsBoldTextEnabled|| (uint64_t v12 = tuConversationBalloonActionButtonFont_sTextFontSize_tuConversationBalloonActionButtonFont, *(double *)&tuConversationBalloonActionButtonFont_sTextFontSize_tuConversationBalloonActionButtonFont != v6)|| (uint64_t v12 = tuConversationBalloonActionButtonFont_sCustomTextFontSize_tuConversationBalloonActionButtonFont, *(double *)&tuConversationBalloonActionButtonFont_sCustomTextFontSize_tuConversationBalloonActionButtonFont != v7)|| (objc_msgSend((id)tuConversationBalloonActionButtonFont_sCustomTextFontName_tuConversationBalloonActionButtonFont, "isEqualToString:", v10, *(double *)&tuConversationBalloonActionButtonFont_sCustomTextFontSize_tuConversationBalloonActionButtonFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self navBarUnifiedCallButtonJoinTextFont];
    double v14 = (void *)tuConversationBalloonActionButtonFont_sBehavior;
    tuConversationBalloonActionButtonFont_sBehavior = v13;

    objc_storeStrong((id *)&tuConversationBalloonActionButtonFont_sContentSizeCategory_tuConversationBalloonActionButtonFont, v3);
    tuConversationBalloonActionButtonFont_sIsIncreaseContrastEnabled_tuConversationBalloonActionButtonFont = v4;
    tuConversationBalloonActionButtonFont_sIsBoldTextEnabled_tuConversationBalloonActionButtonFont = IsBoldTextEnabled;
    tuConversationBalloonActionButtonFont_sTextFontSize_tuConversationBalloonActionButtonFont = *(void *)&v6;
    tuConversationBalloonActionButtonFont_sCustomTextFontSize_tuConversationBalloonActionButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&tuConversationBalloonActionButtonFont_sCustomTextFontName_tuConversationBalloonActionButtonFont, v9);
  }
  double v15 = (UIFont *)(id)tuConversationBalloonActionButtonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatetuConversationBalloonActionButtonFontStyle
{
  return 0;
}

- (NSString)tuConversationBalloonActionButtonFontStyle
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)tuConversationBalloonActionButtonFontStyle_sContentSizeCategory_tuConversationBalloonActionButtonFontStyle, v3);
  if (-[CKUIBehavior ckShouldUpdatetuConversationBalloonActionButtonFontStyle](self, "ckShouldUpdatetuConversationBalloonActionButtonFontStyle")|| v11|| tuConversationBalloonActionButtonFontStyle_sIsIncreaseContrastEnabled_tuConversationBalloonActionButtonFontStyle != v4|| tuConversationBalloonActionButtonFontStyle_sIsBoldTextEnabled_tuConversationBalloonActionButtonFontStyle != IsBoldTextEnabled|| *(double *)&tuConversationBalloonActionButtonFontStyle_sTextFontSize_tuConversationBalloonActionButtonFontStyle != v6|| *(double *)&tuConversationBalloonActionButtonFontStyle_sCustomTextFontSize_tuConversationBalloonActionButtonFontStyle != v7|| (objc_msgSend((id)tuConversationBalloonActionButtonFontStyle_sCustomTextFontName_tuConversationBalloonActionButtonFontStyle, "isEqualToString:", v10, *(double *)&tuConversationBalloonActionButtonFontStyle_sCustomTextFontSize_tuConversationBalloonActionButtonFontStyle) & 1) == 0)
  {
    objc_storeStrong((id *)&tuConversationBalloonActionButtonFontStyle_sBehavior, (id)*MEMORY[0x1E4F43890]);
    objc_storeStrong((id *)&tuConversationBalloonActionButtonFontStyle_sContentSizeCategory_tuConversationBalloonActionButtonFontStyle, v3);
    tuConversationBalloonActionButtonFontStyle_sIsIncreaseContrastEnabled_tuConversationBalloonActionButtonFontStyle = v4;
    tuConversationBalloonActionButtonFontStyle_sIsBoldTextEnabled_tuConversationBalloonActionButtonFontStyle = IsBoldTextEnabled;
    tuConversationBalloonActionButtonFontStyle_sTextFontSize_tuConversationBalloonActionButtonFontStyle = *(void *)&v6;
    tuConversationBalloonActionButtonFontStyle_sCustomTextFontSize_tuConversationBalloonActionButtonFontStyle = *(void *)&v7;
    objc_storeStrong((id *)&tuConversationBalloonActionButtonFontStyle_sCustomTextFontName_tuConversationBalloonActionButtonFontStyle, v9);
  }
  uint64_t v12 = (NSString *)(id)tuConversationBalloonActionButtonFontStyle_sBehavior;

  return v12;
}

- (double)tuConversationBalloonImageDimensions
{
  if (tuConversationBalloonImageDimensions_once != -1) {
    dispatch_once(&tuConversationBalloonImageDimensions_once, &__block_literal_global_847);
  }
  return *(double *)&tuConversationBalloonImageDimensions_sBehavior;
}

void __52__CKUIBehavior_tuConversationBalloonImageDimensions__block_invoke()
{
  tuConversationBalloonImageDimensions_sBehavior = 0x4049000000000000;
}

- (CGSize)tuConversationBalloonFacetimeIconSize
{
  if (tuConversationBalloonFacetimeIconSize_once != -1) {
    dispatch_once(&tuConversationBalloonFacetimeIconSize_once, &__block_literal_global_849);
  }
  double v2 = *(double *)&tuConversationBalloonFacetimeIconSize_sBehavior_0;
  double v3 = *(double *)&tuConversationBalloonFacetimeIconSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __53__CKUIBehavior_tuConversationBalloonFacetimeIconSize__block_invoke()
{
  tuConversationBalloonFacetimeIconSize_sBehavior_0 = 0x4046000000000000;
  tuConversationBalloonFacetimeIconSize_sBehavior_1 = 0x4046000000000000;
}

- (double)tuConversationBalloonFaceTimeIconDimensions
{
  if (tuConversationBalloonFaceTimeIconDimensions_once != -1) {
    dispatch_once(&tuConversationBalloonFaceTimeIconDimensions_once, &__block_literal_global_851);
  }
  return *(double *)&tuConversationBalloonFaceTimeIconDimensions_sBehavior;
}

void __59__CKUIBehavior_tuConversationBalloonFaceTimeIconDimensions__block_invoke()
{
  tuConversationBalloonFaceTimeIconDimensions_sBehavior = 0x4040000000000000;
}

- (UIImageSymbolConfiguration)tuConversationBalloonIconConfiguration
{
  if (tuConversationBalloonIconConfiguration_once != -1) {
    dispatch_once(&tuConversationBalloonIconConfiguration_once, &__block_literal_global_853);
  }
  double v2 = (void *)tuConversationBalloonIconConfiguration_sBehavior;

  return (UIImageSymbolConfiguration *)v2;
}

void __54__CKUIBehavior_tuConversationBalloonIconConfiguration__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A98] configurationWithScale:3];
  double v1 = (void *)tuConversationBalloonIconConfiguration_sBehavior;
  tuConversationBalloonIconConfiguration_sBehavior = v0;
}

- (double)tuConversationBalloonIconDimensions
{
  if (tuConversationBalloonIconDimensions_once != -1) {
    dispatch_once(&tuConversationBalloonIconDimensions_once, &__block_literal_global_855);
  }
  return *(double *)&tuConversationBalloonIconDimensions_sBehavior;
}

void __51__CKUIBehavior_tuConversationBalloonIconDimensions__block_invoke()
{
  tuConversationBalloonIconDimensions_sBehavior = 0x4030000000000000;
}

- (double)tuConversationBalloonAvatarDimensions
{
  if (tuConversationBalloonAvatarDimensions_once != -1) {
    dispatch_once(&tuConversationBalloonAvatarDimensions_once, &__block_literal_global_857);
  }
  return *(double *)&tuConversationBalloonAvatarDimensions_sBehavior;
}

void __53__CKUIBehavior_tuConversationBalloonAvatarDimensions__block_invoke()
{
  tuConversationBalloonAvatarDimensions_sBehavior = 0x4030000000000000;
}

- (double)tuConversationBalloonJoinButtonHeight
{
  if (tuConversationBalloonJoinButtonHeight_once != -1) {
    dispatch_once(&tuConversationBalloonJoinButtonHeight_once, &__block_literal_global_859);
  }
  return *(double *)&tuConversationBalloonJoinButtonHeight_sBehavior;
}

void __53__CKUIBehavior_tuConversationBalloonJoinButtonHeight__block_invoke()
{
  tuConversationBalloonJoinButtonHeight_sBehavior = 0x4042000000000000;
}

- (double)tuConversationBalloonJoinButtonMinWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __55__CKUIBehavior_tuConversationBalloonJoinButtonMinWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (tuConversationBalloonJoinButtonMinWidth_once != -1) {
    dispatch_once(&tuConversationBalloonJoinButtonMinWidth_once, block);
  }
  return *(double *)&tuConversationBalloonJoinButtonMinWidth_sBehavior;
}

uint64_t __55__CKUIBehavior_tuConversationBalloonJoinButtonMinWidth__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) tuConversationJoinButtonMinWidth];
  tuConversationBalloonJoinButtonMinWidth_sBehavior = v2;
  return result;
}

- (double)tuConversationBalloonJoinButtonMaxWidth
{
  if (tuConversationBalloonJoinButtonMaxWidth_once != -1) {
    dispatch_once(&tuConversationBalloonJoinButtonMaxWidth_once, &__block_literal_global_861);
  }
  return *(double *)&tuConversationBalloonJoinButtonMaxWidth_sBehavior;
}

void __55__CKUIBehavior_tuConversationBalloonJoinButtonMaxWidth__block_invoke()
{
  tuConversationBalloonJoinButtonMaxWidth_sBehavior = 0x4059000000000000;
}

- (double)tuConversationBalloonContentMinHeight
{
  if (tuConversationBalloonContentMinHeight_once != -1) {
    dispatch_once(&tuConversationBalloonContentMinHeight_once, &__block_literal_global_863);
  }
  return *(double *)&tuConversationBalloonContentMinHeight_sBehavior;
}

void __53__CKUIBehavior_tuConversationBalloonContentMinHeight__block_invoke()
{
  tuConversationBalloonContentMinHeight_sBehavior = 0x4048000000000000;
}

- (double)tuConversationBalloonContentStandardMinWidth
{
  if (tuConversationBalloonContentStandardMinWidth_once != -1) {
    dispatch_once(&tuConversationBalloonContentStandardMinWidth_once, &__block_literal_global_865);
  }
  return *(double *)&tuConversationBalloonContentStandardMinWidth_sBehavior;
}

void __60__CKUIBehavior_tuConversationBalloonContentStandardMinWidth__block_invoke()
{
  tuConversationBalloonContentStandardMinWidth_sBehavior = 0x4069000000000000;
}

- (double)tuConversationBalloonContentCompressedMinWidth
{
  if (tuConversationBalloonContentCompressedMinWidth_once != -1) {
    dispatch_once(&tuConversationBalloonContentCompressedMinWidth_once, &__block_literal_global_867);
  }
  return *(double *)&tuConversationBalloonContentCompressedMinWidth_sBehavior;
}

void __62__CKUIBehavior_tuConversationBalloonContentCompressedMinWidth__block_invoke()
{
  tuConversationBalloonContentCompressedMinWidth_sBehavior = 0x405E000000000000;
}

- (NSDirectionalEdgeInsets)tuConversationBalloonContentStackedLayoutJoinButtonInsets
{
  if (tuConversationBalloonContentStackedLayoutJoinButtonInsets_once != -1) {
    dispatch_once(&tuConversationBalloonContentStackedLayoutJoinButtonInsets_once, &__block_literal_global_869);
  }
  double v2 = *(double *)&tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_0;
  double v3 = *(double *)&tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_1;
  double v4 = *(double *)&tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_2;
  double v5 = *(double *)&tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_3;
  result.trailing = v5;
  result.double bottom = v4;
  result.leading = v3;
  result.double top = v2;
  return result;
}

void __73__CKUIBehavior_tuConversationBalloonContentStackedLayoutJoinButtonInsets__block_invoke()
{
  tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_0 = 0x4024000000000000;
  tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_1 = 0x403E000000000000;
  tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_2 = 0x4024000000000000;
  tuConversationBalloonContentStackedLayoutJoinButtonInsets_sBehavior_3 = 0x403E000000000000;
}

- (NSDirectionalEdgeInsets)tuConversationBalloonContentStandardLayoutJoinButtonInsets
{
  if (tuConversationBalloonContentStandardLayoutJoinButtonInsets_once != -1) {
    dispatch_once(&tuConversationBalloonContentStandardLayoutJoinButtonInsets_once, &__block_literal_global_871_0);
  }
  double v2 = *(double *)&tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_0;
  double v3 = *(double *)&tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_1;
  double v4 = *(double *)&tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_2;
  double v5 = *(double *)&tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_3;
  result.trailing = v5;
  result.double bottom = v4;
  result.leading = v3;
  result.double top = v2;
  return result;
}

void __74__CKUIBehavior_tuConversationBalloonContentStandardLayoutJoinButtonInsets__block_invoke()
{
  tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_0 = 0x4022000000000000;
  tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_1 = 0x4035000000000000;
  tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_2 = 0x4022000000000000;
  tuConversationBalloonContentStandardLayoutJoinButtonInsets_sBehavior_3 = 0x4035000000000000;
}

- (double)tuConversationInsetPadding
{
  if (tuConversationInsetPadding_once != -1) {
    dispatch_once(&tuConversationInsetPadding_once, &__block_literal_global_873_0);
  }
  return *(double *)&tuConversationInsetPadding_sBehavior;
}

void __42__CKUIBehavior_tuConversationInsetPadding__block_invoke()
{
  tuConversationInsetPadding_sBehavior = 0x4031000000000000;
}

- (double)tuConversationInteritemSpacing
{
  if (tuConversationInteritemSpacing_once != -1) {
    dispatch_once(&tuConversationInteritemSpacing_once, &__block_literal_global_875);
  }
  return *(double *)&tuConversationInteritemSpacing_sBehavior;
}

void __46__CKUIBehavior_tuConversationInteritemSpacing__block_invoke()
{
  tuConversationInteritemSpacing_sBehavior = 0x4028000000000000;
}

- (double)tuConversationIconPointSize
{
  if (tuConversationIconPointSize_once != -1) {
    dispatch_once(&tuConversationIconPointSize_once, &__block_literal_global_877);
  }
  return *(double *)&tuConversationIconPointSize_sBehavior;
}

void __43__CKUIBehavior_tuConversationIconPointSize__block_invoke()
{
  tuConversationIconPointSize_sBehavior = 0x4031000000000000;
}

- (double)tuConversationButtonInteritemSpacing
{
  if (tuConversationButtonInteritemSpacing_once != -1) {
    dispatch_once(&tuConversationButtonInteritemSpacing_once, &__block_literal_global_879);
  }
  return *(double *)&tuConversationButtonInteritemSpacing_sBehavior;
}

void __52__CKUIBehavior_tuConversationButtonInteritemSpacing__block_invoke()
{
  tuConversationButtonInteritemSpacing_sBehavior = 0x4031000000000000;
}

- (double)tuConversationButtonTitleHorizontalSpacing
{
  if (tuConversationButtonTitleHorizontalSpacing_once != -1) {
    dispatch_once(&tuConversationButtonTitleHorizontalSpacing_once, &__block_literal_global_881);
  }
  return *(double *)&tuConversationButtonTitleHorizontalSpacing_sBehavior;
}

void __58__CKUIBehavior_tuConversationButtonTitleHorizontalSpacing__block_invoke()
{
  tuConversationButtonTitleHorizontalSpacing_sBehavior = 0x4031000000000000;
}

- (double)tuConversationButtonTitleVerticalSpacing
{
  if (tuConversationButtonTitleVerticalSpacing_once != -1) {
    dispatch_once(&tuConversationButtonTitleVerticalSpacing_once, &__block_literal_global_883_0);
  }
  return *(double *)&tuConversationButtonTitleVerticalSpacing_sBehavior;
}

void __56__CKUIBehavior_tuConversationButtonTitleVerticalSpacing__block_invoke()
{
  tuConversationButtonTitleVerticalSpacing_sBehavior = 0x4018000000000000;
}

- (BOOL)ckShouldUpdatetuConversationViewActionButtonFont
{
  return 0;
}

- (UIFont)tuConversationViewActionButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)tuConversationViewActionButtonFont_sContentSizeCategory_tuConversationViewActionButtonFont, v3);
  if (-[CKUIBehavior ckShouldUpdatetuConversationViewActionButtonFont](self, "ckShouldUpdatetuConversationViewActionButtonFont")|| v11|| tuConversationViewActionButtonFont_sIsIncreaseContrastEnabled_tuConversationViewActionButtonFont != v4|| tuConversationViewActionButtonFont_sIsBoldTextEnabled_tuConversationViewActionButtonFont != IsBoldTextEnabled|| (uint64_t v12 = tuConversationViewActionButtonFont_sTextFontSize_tuConversationViewActionButtonFont, *(double *)&tuConversationViewActionButtonFont_sTextFontSize_tuConversationViewActionButtonFont != v6)|| (uint64_t v12 = tuConversationViewActionButtonFont_sCustomTextFontSize_tuConversationViewActionButtonFont, *(double *)&tuConversationViewActionButtonFont_sCustomTextFontSize_tuConversationViewActionButtonFont != v7)|| (objc_msgSend((id)tuConversationViewActionButtonFont_sCustomTextFontName_tuConversationViewActionButtonFont, "isEqualToString:", v10, *(double *)&tuConversationViewActionButtonFont_sCustomTextFontSize_tuConversationViewActionButtonFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_emphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    double v14 = (void *)tuConversationViewActionButtonFont_sBehavior;
    tuConversationViewActionButtonFont_sBehavior = v13;

    objc_storeStrong((id *)&tuConversationViewActionButtonFont_sContentSizeCategory_tuConversationViewActionButtonFont, v3);
    tuConversationViewActionButtonFont_sIsIncreaseContrastEnabled_tuConversationViewActionButtonFont = v4;
    tuConversationViewActionButtonFont_sIsBoldTextEnabled_tuConversationViewActionButtonFont = IsBoldTextEnabled;
    tuConversationViewActionButtonFont_sTextFontSize_tuConversationViewActionButtonFont = *(void *)&v6;
    tuConversationViewActionButtonFont_sCustomTextFontSize_tuConversationViewActionButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&tuConversationViewActionButtonFont_sCustomTextFontName_tuConversationViewActionButtonFont, v9);
  }
  double v15 = (UIFont *)(id)tuConversationViewActionButtonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatetranscriptTextFontStyle
{
  return 0;
}

- (NSString)transcriptTextFontStyle
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptTextFontStyle_sContentSizeCategory_transcriptTextFontStyle, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptTextFontStyle]
    || v11
    || transcriptTextFontStyle_sIsIncreaseContrastEnabled_transcriptTextFontStyle != v4
    || transcriptTextFontStyle_sIsBoldTextEnabled_transcriptTextFontStyle != IsBoldTextEnabled
    || *(double *)&transcriptTextFontStyle_sTextFontSize_transcriptTextFontStyle != v6
    || *(double *)&transcriptTextFontStyle_sCustomTextFontSize_transcriptTextFontStyle != v7
    || (objc_msgSend((id)transcriptTextFontStyle_sCustomTextFontName_transcriptTextFontStyle, "isEqualToString:", v10, *(double *)&transcriptTextFontStyle_sCustomTextFontSize_transcriptTextFontStyle) & 1) == 0)
  {
    objc_storeStrong((id *)&transcriptTextFontStyle_sBehavior, (id)*MEMORY[0x1E4F43888]);
    objc_storeStrong((id *)&transcriptTextFontStyle_sContentSizeCategory_transcriptTextFontStyle, v3);
    transcriptTextFontStyle_sIsIncreaseContrastEnabled_transcriptTextFontStyle = v4;
    transcriptTextFontStyle_sIsBoldTextEnabled_transcriptTextFontStyle = IsBoldTextEnabled;
    transcriptTextFontStyle_sTextFontSize_transcriptTextFontStyle = *(void *)&v6;
    transcriptTextFontStyle_sCustomTextFontSize_transcriptTextFontStyle = *(void *)&v7;
    objc_storeStrong((id *)&transcriptTextFontStyle_sCustomTextFontName_transcriptTextFontStyle, v9);
  }
  uint64_t v12 = (NSString *)(id)transcriptTextFontStyle_sBehavior;

  return v12;
}

- (BOOL)ckShouldUpdatetranscriptTextFont
{
  return 0;
}

- (UIFont)transcriptTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptTextFont_sContentSizeCategory_transcriptTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptTextFont]
    || v11
    || transcriptTextFont_sIsIncreaseContrastEnabled_transcriptTextFont != v4
    || transcriptTextFont_sIsBoldTextEnabled_transcriptTextFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptTextFont_sTextFontSize_transcriptTextFont,
        *(double *)&transcriptTextFont_sTextFontSize_transcriptTextFont != v6)
    || (uint64_t v12 = transcriptTextFont_sCustomTextFontSize_transcriptTextFont,
        *(double *)&transcriptTextFont_sCustomTextFontSize_transcriptTextFont != v7)
    || (objc_msgSend((id)transcriptTextFont_sCustomTextFontName_transcriptTextFont, "isEqualToString:", v10, *(double *)&transcriptTextFont_sCustomTextFontSize_transcriptTextFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_preferredFontForStyle:", v14);
    uint64_t v16 = (void *)transcriptTextFont_sBehavior;
    transcriptTextFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptTextFont_sContentSizeCategory_transcriptTextFont, v3);
    transcriptTextFont_sIsIncreaseContrastEnabled_transcriptTextFont = v4;
    transcriptTextFont_sIsBoldTextEnabled_transcriptTextFont = IsBoldTextEnabled;
    transcriptTextFont_sTextFontSize_transcriptTextFont = *(void *)&v6;
    transcriptTextFont_sCustomTextFontSize_transcriptTextFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptTextFont_sCustomTextFontName_transcriptTextFont, v9);
  }
  uint64_t v17 = (UIFont *)(id)transcriptTextFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptMessageStatusFont
{
  return 0;
}

- (UIFont)transcriptMessageStatusFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptMessageStatusFont_sContentSizeCategory_transcriptMessageStatusFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptMessageStatusFont]
    || v11
    || transcriptMessageStatusFont_sIsIncreaseContrastEnabled_transcriptMessageStatusFont != v4
    || transcriptMessageStatusFont_sIsBoldTextEnabled_transcriptMessageStatusFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptMessageStatusFont_sTextFontSize_transcriptMessageStatusFont,
        *(double *)&transcriptMessageStatusFont_sTextFontSize_transcriptMessageStatusFont != v6)
    || (uint64_t v12 = transcriptMessageStatusFont_sCustomTextFontSize_transcriptMessageStatusFont,
        *(double *)&transcriptMessageStatusFont_sCustomTextFontSize_transcriptMessageStatusFont != v7)
    || (objc_msgSend((id)transcriptMessageStatusFont_sCustomTextFontName_transcriptMessageStatusFont, "isEqualToString:", v10, *(double *)&transcriptMessageStatusFont_sCustomTextFontSize_transcriptMessageStatusFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_fontForStyle:weight:", v14, *MEMORY[0x1E4FB09E0]);
    uint64_t v16 = (void *)transcriptMessageStatusFont_sBehavior;
    transcriptMessageStatusFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptMessageStatusFont_sContentSizeCategory_transcriptMessageStatusFont, v3);
    transcriptMessageStatusFont_sIsIncreaseContrastEnabled_transcriptMessageStatusFont = v4;
    transcriptMessageStatusFont_sIsBoldTextEnabled_transcriptMessageStatusFont = IsBoldTextEnabled;
    transcriptMessageStatusFont_sTextFontSize_transcriptMessageStatusFont = *(void *)&v6;
    transcriptMessageStatusFont_sCustomTextFontSize_transcriptMessageStatusFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptMessageStatusFont_sCustomTextFontName_transcriptMessageStatusFont, v9);
  }
  uint64_t v17 = (UIFont *)(id)transcriptMessageStatusFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptBoldFont
{
  return 0;
}

- (UIFont)transcriptBoldFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptBoldFont_sContentSizeCategory_transcriptBoldFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptBoldFont]
    || v11
    || transcriptBoldFont_sIsIncreaseContrastEnabled_transcriptBoldFont != v4
    || transcriptBoldFont_sIsBoldTextEnabled_transcriptBoldFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptBoldFont_sTextFontSize_transcriptBoldFont,
        *(double *)&transcriptBoldFont_sTextFontSize_transcriptBoldFont != v6)
    || (uint64_t v12 = transcriptBoldFont_sCustomTextFontSize_transcriptBoldFont,
        *(double *)&transcriptBoldFont_sCustomTextFontSize_transcriptBoldFont != v7)
    || (objc_msgSend((id)transcriptBoldFont_sCustomTextFontName_transcriptBoldFont, "isEqualToString:", v10, *(double *)&transcriptBoldFont_sCustomTextFontSize_transcriptBoldFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_fontForStyle:weight:", v14, *MEMORY[0x1E4FB09D0]);
    uint64_t v16 = (void *)transcriptBoldFont_sBehavior;
    transcriptBoldFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptBoldFont_sContentSizeCategory_transcriptBoldFont, v3);
    transcriptBoldFont_sIsIncreaseContrastEnabled_transcriptBoldFont = v4;
    transcriptBoldFont_sIsBoldTextEnabled_transcriptBoldFont = IsBoldTextEnabled;
    transcriptBoldFont_sTextFontSize_transcriptBoldFont = *(void *)&v6;
    transcriptBoldFont_sCustomTextFontSize_transcriptBoldFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptBoldFont_sCustomTextFontName_transcriptBoldFont, v9);
  }
  uint64_t v17 = (UIFont *)(id)transcriptBoldFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptBoldPreferredFont
{
  return 0;
}

- (UIFont)transcriptBoldPreferredFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptBoldPreferredFont_sContentSizeCategory_transcriptBoldPreferredFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptBoldPreferredFont]
    || v11
    || transcriptBoldPreferredFont_sIsIncreaseContrastEnabled_transcriptBoldPreferredFont != v4
    || transcriptBoldPreferredFont_sIsBoldTextEnabled_transcriptBoldPreferredFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptBoldPreferredFont_sTextFontSize_transcriptBoldPreferredFont,
        *(double *)&transcriptBoldPreferredFont_sTextFontSize_transcriptBoldPreferredFont != v6)
    || (uint64_t v12 = transcriptBoldPreferredFont_sCustomTextFontSize_transcriptBoldPreferredFont,
        *(double *)&transcriptBoldPreferredFont_sCustomTextFontSize_transcriptBoldPreferredFont != v7)
    || (objc_msgSend((id)transcriptBoldPreferredFont_sCustomTextFontName_transcriptBoldPreferredFont, "isEqualToString:", v10, *(double *)&transcriptBoldPreferredFont_sCustomTextFontSize_transcriptBoldPreferredFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_preferredFontForStyle:weight:", v14, *MEMORY[0x1E4FB09D0]);
    uint64_t v16 = (void *)transcriptBoldPreferredFont_sBehavior;
    transcriptBoldPreferredFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptBoldPreferredFont_sContentSizeCategory_transcriptBoldPreferredFont, v3);
    transcriptBoldPreferredFont_sIsIncreaseContrastEnabled_transcriptBoldPreferredFont = v4;
    transcriptBoldPreferredFont_sIsBoldTextEnabled_transcriptBoldPreferredFont = IsBoldTextEnabled;
    transcriptBoldPreferredFont_sTextFontSize_transcriptBoldPreferredFont = *(void *)&v6;
    transcriptBoldPreferredFont_sCustomTextFontSize_transcriptBoldPreferredFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptBoldPreferredFont_sCustomTextFontName_transcriptBoldPreferredFont, v9);
  }
  uint64_t v17 = (UIFont *)(id)transcriptBoldPreferredFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptRegularFont
{
  return 0;
}

- (UIFont)transcriptRegularFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptRegularFont_sContentSizeCategory_transcriptRegularFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptRegularFont]
    || v11
    || transcriptRegularFont_sIsIncreaseContrastEnabled_transcriptRegularFont != v4
    || transcriptRegularFont_sIsBoldTextEnabled_transcriptRegularFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptRegularFont_sTextFontSize_transcriptRegularFont,
        *(double *)&transcriptRegularFont_sTextFontSize_transcriptRegularFont != v6)
    || (uint64_t v12 = transcriptRegularFont_sCustomTextFontSize_transcriptRegularFont,
        *(double *)&transcriptRegularFont_sCustomTextFontSize_transcriptRegularFont != v7)
    || (objc_msgSend((id)transcriptRegularFont_sCustomTextFontName_transcriptRegularFont, "isEqualToString:", v10, *(double *)&transcriptRegularFont_sCustomTextFontSize_transcriptRegularFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_fontForStyle:weight:", v14, *MEMORY[0x1E4FB09D8]);
    uint64_t v16 = (void *)transcriptRegularFont_sBehavior;
    transcriptRegularFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptRegularFont_sContentSizeCategory_transcriptRegularFont, v3);
    transcriptRegularFont_sIsIncreaseContrastEnabled_transcriptRegularFont = v4;
    transcriptRegularFont_sIsBoldTextEnabled_transcriptRegularFont = IsBoldTextEnabled;
    transcriptRegularFont_sTextFontSize_transcriptRegularFont = *(void *)&v6;
    transcriptRegularFont_sCustomTextFontSize_transcriptRegularFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptRegularFont_sCustomTextFontName_transcriptRegularFont, v9);
  }
  uint64_t v17 = (UIFont *)(id)transcriptRegularFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptRegularPreferredFont
{
  return 0;
}

- (UIFont)transcriptRegularPreferredFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptRegularPreferredFont_sContentSizeCategory_transcriptRegularPreferredFont, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptRegularPreferredFont](self, "ckShouldUpdatetranscriptRegularPreferredFont")|| v11|| transcriptRegularPreferredFont_sIsIncreaseContrastEnabled_transcriptRegularPreferredFont != v4|| transcriptRegularPreferredFont_sIsBoldTextEnabled_transcriptRegularPreferredFont != IsBoldTextEnabled|| (uint64_t v12 = transcriptRegularPreferredFont_sTextFontSize_transcriptRegularPreferredFont, *(double *)&transcriptRegularPreferredFont_sTextFontSize_transcriptRegularPreferredFont != v6)|| (uint64_t v12 = transcriptRegularPreferredFont_sCustomTextFontSize_transcriptRegularPreferredFont, *(double *)&transcriptRegularPreferredFont_sCustomTextFontSize_transcriptRegularPreferredFont != v7)|| (objc_msgSend((id)transcriptRegularPreferredFont_sCustomTextFontName_transcriptRegularPreferredFont, "isEqualToString:", v10, *(double *)&transcriptRegularPreferredFont_sCustomTextFontSize_transcriptRegularPreferredFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_preferredFontForStyle:weight:", v14, *MEMORY[0x1E4FB09D8]);
    uint64_t v16 = (void *)transcriptRegularPreferredFont_sBehavior;
    transcriptRegularPreferredFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptRegularPreferredFont_sContentSizeCategory_transcriptRegularPreferredFont, v3);
    transcriptRegularPreferredFont_sIsIncreaseContrastEnabled_transcriptRegularPreferredFont = v4;
    transcriptRegularPreferredFont_sIsBoldTextEnabled_transcriptRegularPreferredFont = IsBoldTextEnabled;
    transcriptRegularPreferredFont_sTextFontSize_transcriptRegularPreferredFont = *(void *)&v6;
    transcriptRegularPreferredFont_sCustomTextFontSize_transcriptRegularPreferredFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptRegularPreferredFont_sCustomTextFontName_transcriptRegularPreferredFont, v9);
  }
  uint64_t v17 = (UIFont *)(id)transcriptRegularPreferredFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptErrorStampFont
{
  return 0;
}

- (id)transcriptErrorStampFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptErrorStampFont_sContentSizeCategory_transcriptErrorStampFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptErrorStampFont]
    || v11
    || transcriptErrorStampFont_sIsIncreaseContrastEnabled_transcriptErrorStampFont != v4
    || transcriptErrorStampFont_sIsBoldTextEnabled_transcriptErrorStampFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptErrorStampFont_sTextFontSize_transcriptErrorStampFont,
        *(double *)&transcriptErrorStampFont_sTextFontSize_transcriptErrorStampFont != v6)
    || (uint64_t v12 = transcriptErrorStampFont_sCustomTextFontSize_transcriptErrorStampFont,
        *(double *)&transcriptErrorStampFont_sCustomTextFontSize_transcriptErrorStampFont != v7)
    || (objc_msgSend((id)transcriptErrorStampFont_sCustomTextFontName_transcriptErrorStampFont, "isEqualToString:", v10, *(double *)&transcriptErrorStampFont_sCustomTextFontSize_transcriptErrorStampFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_fontForStyle:weight:", v14, *MEMORY[0x1E4FB09E0]);
    uint64_t v16 = (void *)transcriptErrorStampFont_sBehavior;
    transcriptErrorStampFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptErrorStampFont_sContentSizeCategory_transcriptErrorStampFont, v3);
    transcriptErrorStampFont_sIsIncreaseContrastEnabled_transcriptErrorStampFont = v4;
    transcriptErrorStampFont_sIsBoldTextEnabled_transcriptErrorStampFont = IsBoldTextEnabled;
    transcriptErrorStampFont_sTextFontSize_transcriptErrorStampFont = *(void *)&v6;
    transcriptErrorStampFont_sCustomTextFontSize_transcriptErrorStampFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptErrorStampFont_sCustomTextFontName_transcriptErrorStampFont, v9);
  }
  id v17 = (id)transcriptErrorStampFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptErrorStampPreferredFont
{
  return 0;
}

- (id)transcriptErrorStampPreferredFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptErrorStampPreferredFont_sContentSizeCategory_transcriptErrorStampPreferredFont, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptErrorStampPreferredFont](self, "ckShouldUpdatetranscriptErrorStampPreferredFont")|| v11|| transcriptErrorStampPreferredFont_sIsIncreaseContrastEnabled_transcriptErrorStampPreferredFont != v4|| transcriptErrorStampPreferredFont_sIsBoldTextEnabled_transcriptErrorStampPreferredFont != IsBoldTextEnabled|| (uint64_t v12 = transcriptErrorStampPreferredFont_sTextFontSize_transcriptErrorStampPreferredFont, *(double *)&transcriptErrorStampPreferredFont_sTextFontSize_transcriptErrorStampPreferredFont != v6)|| (uint64_t v12 = transcriptErrorStampPreferredFont_sCustomTextFontSize_transcriptErrorStampPreferredFont, *(double *)&transcriptErrorStampPreferredFont_sCustomTextFontSize_transcriptErrorStampPreferredFont != v7)|| (objc_msgSend((id)transcriptErrorStampPreferredFont_sCustomTextFontName_transcriptErrorStampPreferredFont, "isEqualToString:", v10, *(double *)&transcriptErrorStampPreferredFont_sCustomTextFontSize_transcriptErrorStampPreferredFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_preferredFontForStyle:weight:", v14, *MEMORY[0x1E4FB09E0]);
    uint64_t v16 = (void *)transcriptErrorStampPreferredFont_sBehavior;
    transcriptErrorStampPreferredFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptErrorStampPreferredFont_sContentSizeCategory_transcriptErrorStampPreferredFont, v3);
    transcriptErrorStampPreferredFont_sIsIncreaseContrastEnabled_transcriptErrorStampPreferredFont = v4;
    transcriptErrorStampPreferredFont_sIsBoldTextEnabled_transcriptErrorStampPreferredFont = IsBoldTextEnabled;
    transcriptErrorStampPreferredFont_sTextFontSize_transcriptErrorStampPreferredFont = *(void *)&v6;
    transcriptErrorStampPreferredFont_sCustomTextFontSize_transcriptErrorStampPreferredFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptErrorStampPreferredFont_sCustomTextFontName_transcriptErrorStampPreferredFont, v9);
  }
  id v17 = (id)transcriptErrorStampPreferredFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptLightFont
{
  return 0;
}

- (UIFont)transcriptLightFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptLightFont_sContentSizeCategory_transcriptLightFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptLightFont]
    || v11
    || transcriptLightFont_sIsIncreaseContrastEnabled_transcriptLightFont != v4
    || transcriptLightFont_sIsBoldTextEnabled_transcriptLightFont != IsBoldTextEnabled
    || *(double *)&transcriptLightFont_sTextFontSize_transcriptLightFont != v6
    || *(double *)&transcriptLightFont_sCustomTextFontSize_transcriptLightFont != v7
    || (objc_msgSend((id)transcriptLightFont_sCustomTextFontName_transcriptLightFont, "isEqualToString:", v10, *(double *)&transcriptLightFont_sCustomTextFontSize_transcriptLightFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_fontForStyle:weight:", *MEMORY[0x1E4F43888], *MEMORY[0x1E4FB09C8]);
    uint64_t v13 = (void *)transcriptLightFont_sBehavior;
    transcriptLightFont_sBehavior = v12;

    objc_storeStrong((id *)&transcriptLightFont_sContentSizeCategory_transcriptLightFont, v3);
    transcriptLightFont_sIsIncreaseContrastEnabled_transcriptLightFont = v4;
    transcriptLightFont_sIsBoldTextEnabled_transcriptLightFont = IsBoldTextEnabled;
    transcriptLightFont_sTextFontSize_transcriptLightFont = *(void *)&v6;
    transcriptLightFont_sCustomTextFontSize_transcriptLightFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptLightFont_sCustomTextFontName_transcriptLightFont, v9);
  }
  double v14 = (UIFont *)(id)transcriptLightFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatetranscriptAvailabilityFont
{
  return 0;
}

- (UIFont)transcriptAvailabilityFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptAvailabilityFont_sContentSizeCategory_transcriptAvailabilityFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptAvailabilityFont]
    || v11
    || transcriptAvailabilityFont_sIsIncreaseContrastEnabled_transcriptAvailabilityFont != v4
    || transcriptAvailabilityFont_sIsBoldTextEnabled_transcriptAvailabilityFont != IsBoldTextEnabled
    || *(double *)&transcriptAvailabilityFont_sTextFontSize_transcriptAvailabilityFont != v6
    || *(double *)&transcriptAvailabilityFont_sCustomTextFontSize_transcriptAvailabilityFont != v7
    || (objc_msgSend((id)transcriptAvailabilityFont_sCustomTextFontName_transcriptAvailabilityFont, "isEqualToString:", v10, *(double *)&transcriptAvailabilityFont_sCustomTextFontSize_transcriptAvailabilityFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_fontForStyle:weight:", *MEMORY[0x1E4F438C8], *MEMORY[0x1E4FB09D8]);
    uint64_t v13 = (void *)transcriptAvailabilityFont_sBehavior;
    transcriptAvailabilityFont_sBehavior = v12;

    objc_storeStrong((id *)&transcriptAvailabilityFont_sContentSizeCategory_transcriptAvailabilityFont, v3);
    transcriptAvailabilityFont_sIsIncreaseContrastEnabled_transcriptAvailabilityFont = v4;
    transcriptAvailabilityFont_sIsBoldTextEnabled_transcriptAvailabilityFont = IsBoldTextEnabled;
    transcriptAvailabilityFont_sTextFontSize_transcriptAvailabilityFont = *(void *)&v6;
    transcriptAvailabilityFont_sCustomTextFontSize_transcriptAvailabilityFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptAvailabilityFont_sCustomTextFontName_transcriptAvailabilityFont, v9);
  }
  double v14 = (UIFont *)(id)transcriptAvailabilityFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatetranscriptNotifyAnywayFont
{
  return 0;
}

- (UIFont)transcriptNotifyAnywayFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptNotifyAnywayFont_sContentSizeCategory_transcriptNotifyAnywayFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptNotifyAnywayFont]
    || v11
    || transcriptNotifyAnywayFont_sIsIncreaseContrastEnabled_transcriptNotifyAnywayFont != v4
    || transcriptNotifyAnywayFont_sIsBoldTextEnabled_transcriptNotifyAnywayFont != IsBoldTextEnabled
    || *(double *)&transcriptNotifyAnywayFont_sTextFontSize_transcriptNotifyAnywayFont != v6
    || *(double *)&transcriptNotifyAnywayFont_sCustomTextFontSize_transcriptNotifyAnywayFont != v7
    || (objc_msgSend((id)transcriptNotifyAnywayFont_sCustomTextFontName_transcriptNotifyAnywayFont, "isEqualToString:", v10, *(double *)&transcriptNotifyAnywayFont_sCustomTextFontSize_transcriptNotifyAnywayFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_fontForStyle:weight:", *MEMORY[0x1E4F43890], *MEMORY[0x1E4FB09E0]);
    uint64_t v13 = (void *)transcriptNotifyAnywayFont_sBehavior;
    transcriptNotifyAnywayFont_sBehavior = v12;

    objc_storeStrong((id *)&transcriptNotifyAnywayFont_sContentSizeCategory_transcriptNotifyAnywayFont, v3);
    transcriptNotifyAnywayFont_sIsIncreaseContrastEnabled_transcriptNotifyAnywayFont = v4;
    transcriptNotifyAnywayFont_sIsBoldTextEnabled_transcriptNotifyAnywayFont = IsBoldTextEnabled;
    transcriptNotifyAnywayFont_sTextFontSize_transcriptNotifyAnywayFont = *(void *)&v6;
    transcriptNotifyAnywayFont_sCustomTextFontSize_transcriptNotifyAnywayFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptNotifyAnywayFont_sCustomTextFontName_transcriptNotifyAnywayFont, v9);
  }
  double v14 = (UIFont *)(id)transcriptNotifyAnywayFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatetranscriptMessageStatusDateFont
{
  return 0;
}

- (UIFont)transcriptMessageStatusDateFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptMessageStatusDateFont_sContentSizeCategory_transcriptMessageStatusDateFont, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptMessageStatusDateFont](self, "ckShouldUpdatetranscriptMessageStatusDateFont")|| v11|| transcriptMessageStatusDateFont_sIsIncreaseContrastEnabled_transcriptMessageStatusDateFont != v4|| transcriptMessageStatusDateFont_sIsBoldTextEnabled_transcriptMessageStatusDateFont != IsBoldTextEnabled|| (uint64_t v12 = transcriptMessageStatusDateFont_sTextFontSize_transcriptMessageStatusDateFont, *(double *)&transcriptMessageStatusDateFont_sTextFontSize_transcriptMessageStatusDateFont != v6)|| (uint64_t v12 = transcriptMessageStatusDateFont_sCustomTextFontSize_transcriptMessageStatusDateFont, *(double *)&transcriptMessageStatusDateFont_sCustomTextFontSize_transcriptMessageStatusDateFont != v7)|| (objc_msgSend((id)transcriptMessageStatusDateFont_sCustomTextFontName_transcriptMessageStatusDateFont, "isEqualToString:", v10, *(double *)&transcriptMessageStatusDateFont_sCustomTextFontSize_transcriptMessageStatusDateFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_monospacedPreferredFontForTextStyle:", v14);
    uint64_t v16 = (void *)transcriptMessageStatusDateFont_sBehavior;
    transcriptMessageStatusDateFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptMessageStatusDateFont_sContentSizeCategory_transcriptMessageStatusDateFont, v3);
    transcriptMessageStatusDateFont_sIsIncreaseContrastEnabled_transcriptMessageStatusDateFont = v4;
    transcriptMessageStatusDateFont_sIsBoldTextEnabled_transcriptMessageStatusDateFont = IsBoldTextEnabled;
    transcriptMessageStatusDateFont_sTextFontSize_transcriptMessageStatusDateFont = *(void *)&v6;
    transcriptMessageStatusDateFont_sCustomTextFontSize_transcriptMessageStatusDateFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptMessageStatusDateFont_sCustomTextFontName_transcriptMessageStatusDateFont, v9);
  }
  id v17 = (UIFont *)(id)transcriptMessageStatusDateFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptButtonTextFont
{
  return 0;
}

- (id)transcriptButtonTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptButtonTextFont_sContentSizeCategory_transcriptButtonTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptButtonTextFont]
    || v11
    || transcriptButtonTextFont_sIsIncreaseContrastEnabled_transcriptButtonTextFont != v4
    || transcriptButtonTextFont_sIsBoldTextEnabled_transcriptButtonTextFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptButtonTextFont_sTextFontSize_transcriptButtonTextFont,
        *(double *)&transcriptButtonTextFont_sTextFontSize_transcriptButtonTextFont != v6)
    || (uint64_t v12 = transcriptButtonTextFont_sCustomTextFontSize_transcriptButtonTextFont,
        *(double *)&transcriptButtonTextFont_sCustomTextFontSize_transcriptButtonTextFont != v7)
    || (objc_msgSend((id)transcriptButtonTextFont_sCustomTextFontName_transcriptButtonTextFont, "isEqualToString:", v10, *(double *)&transcriptButtonTextFont_sCustomTextFontSize_transcriptButtonTextFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_emphasizedPreferredFontForTextStyle:", v14);
    uint64_t v16 = (void *)transcriptButtonTextFont_sBehavior;
    transcriptButtonTextFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptButtonTextFont_sContentSizeCategory_transcriptButtonTextFont, v3);
    transcriptButtonTextFont_sIsIncreaseContrastEnabled_transcriptButtonTextFont = v4;
    transcriptButtonTextFont_sIsBoldTextEnabled_transcriptButtonTextFont = IsBoldTextEnabled;
    transcriptButtonTextFont_sTextFontSize_transcriptButtonTextFont = *(void *)&v6;
    transcriptButtonTextFont_sCustomTextFontSize_transcriptButtonTextFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptButtonTextFont_sCustomTextFontName_transcriptButtonTextFont, v9);
  }
  id v17 = (id)transcriptButtonTextFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptBodyBoldTextFont
{
  return 0;
}

- (UIFont)transcriptBodyBoldTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptBodyBoldTextFont_sContentSizeCategory_transcriptBodyBoldTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptBodyBoldTextFont]
    || v11
    || transcriptBodyBoldTextFont_sIsIncreaseContrastEnabled_transcriptBodyBoldTextFont != v4
    || transcriptBodyBoldTextFont_sIsBoldTextEnabled_transcriptBodyBoldTextFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptBodyBoldTextFont_sTextFontSize_transcriptBodyBoldTextFont,
        *(double *)&transcriptBodyBoldTextFont_sTextFontSize_transcriptBodyBoldTextFont != v6)
    || (uint64_t v12 = transcriptBodyBoldTextFont_sCustomTextFontSize_transcriptBodyBoldTextFont,
        *(double *)&transcriptBodyBoldTextFont_sCustomTextFontSize_transcriptBodyBoldTextFont != v7)
    || (objc_msgSend((id)transcriptBodyBoldTextFont_sCustomTextFontName_transcriptBodyBoldTextFont, "isEqualToString:", v10, *(double *)&transcriptBodyBoldTextFont_sCustomTextFontSize_transcriptBodyBoldTextFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_emphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    double v14 = (void *)transcriptBodyBoldTextFont_sBehavior;
    transcriptBodyBoldTextFont_sBehavior = v13;

    objc_storeStrong((id *)&transcriptBodyBoldTextFont_sContentSizeCategory_transcriptBodyBoldTextFont, v3);
    transcriptBodyBoldTextFont_sIsIncreaseContrastEnabled_transcriptBodyBoldTextFont = v4;
    transcriptBodyBoldTextFont_sIsBoldTextEnabled_transcriptBodyBoldTextFont = IsBoldTextEnabled;
    transcriptBodyBoldTextFont_sTextFontSize_transcriptBodyBoldTextFont = *(void *)&v6;
    transcriptBodyBoldTextFont_sCustomTextFontSize_transcriptBodyBoldTextFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptBodyBoldTextFont_sCustomTextFontName_transcriptBodyBoldTextFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)transcriptBodyBoldTextFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatetranscriptSenderFont
{
  return 0;
}

- (id)transcriptSenderFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptSenderFont_sContentSizeCategory_transcriptSenderFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptSenderFont]
    || v11
    || transcriptSenderFont_sIsIncreaseContrastEnabled_transcriptSenderFont != v4
    || transcriptSenderFont_sIsBoldTextEnabled_transcriptSenderFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptSenderFont_sTextFontSize_transcriptSenderFont,
        *(double *)&transcriptSenderFont_sTextFontSize_transcriptSenderFont != v6)
    || (uint64_t v12 = transcriptSenderFont_sCustomTextFontSize_transcriptSenderFont,
        *(double *)&transcriptSenderFont_sCustomTextFontSize_transcriptSenderFont != v7)
    || (objc_msgSend((id)transcriptSenderFont_sCustomTextFontName_transcriptSenderFont, "isEqualToString:", v10, *(double *)&transcriptSenderFont_sCustomTextFontSize_transcriptSenderFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_preferredFontForStyle:", v14);
    uint64_t v16 = (void *)transcriptSenderFont_sBehavior;
    transcriptSenderFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptSenderFont_sContentSizeCategory_transcriptSenderFont, v3);
    transcriptSenderFont_sIsIncreaseContrastEnabled_transcriptSenderFont = v4;
    transcriptSenderFont_sIsBoldTextEnabled_transcriptSenderFont = IsBoldTextEnabled;
    transcriptSenderFont_sTextFontSize_transcriptSenderFont = *(void *)&v6;
    transcriptSenderFont_sCustomTextFontSize_transcriptSenderFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptSenderFont_sCustomTextFontName_transcriptSenderFont, v9);
  }
  id v17 = (id)transcriptSenderFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptDrawerFont
{
  return 0;
}

- (id)transcriptDrawerFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptDrawerFont_sContentSizeCategory_transcriptDrawerFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptDrawerFont]
    || v11
    || transcriptDrawerFont_sIsIncreaseContrastEnabled_transcriptDrawerFont != v4
    || transcriptDrawerFont_sIsBoldTextEnabled_transcriptDrawerFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptDrawerFont_sTextFontSize_transcriptDrawerFont,
        *(double *)&transcriptDrawerFont_sTextFontSize_transcriptDrawerFont != v6)
    || (uint64_t v12 = transcriptDrawerFont_sCustomTextFontSize_transcriptDrawerFont,
        *(double *)&transcriptDrawerFont_sCustomTextFontSize_transcriptDrawerFont != v7)
    || (objc_msgSend((id)transcriptDrawerFont_sCustomTextFontName_transcriptDrawerFont, "isEqualToString:", v10, *(double *)&transcriptDrawerFont_sCustomTextFontSize_transcriptDrawerFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_monospacedPreferredFontForTextStyle:", v14);
    uint64_t v16 = (void *)transcriptDrawerFont_sBehavior;
    transcriptDrawerFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptDrawerFont_sContentSizeCategory_transcriptDrawerFont, v3);
    transcriptDrawerFont_sIsIncreaseContrastEnabled_transcriptDrawerFont = v4;
    transcriptDrawerFont_sIsBoldTextEnabled_transcriptDrawerFont = IsBoldTextEnabled;
    transcriptDrawerFont_sTextFontSize_transcriptDrawerFont = *(void *)&v6;
    transcriptDrawerFont_sCustomTextFontSize_transcriptDrawerFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptDrawerFont_sCustomTextFontName_transcriptDrawerFont, v9);
  }
  id v17 = (id)transcriptDrawerFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatetranscriptLoadingViewTextFont
{
  return 0;
}

- (UIFont)transcriptLoadingViewTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptLoadingViewTextFont_sContentSizeCategory_transcriptLoadingViewTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptLoadingViewTextFont]
    || v11
    || transcriptLoadingViewTextFont_sIsIncreaseContrastEnabled_transcriptLoadingViewTextFont != v4
    || transcriptLoadingViewTextFont_sIsBoldTextEnabled_transcriptLoadingViewTextFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptLoadingViewTextFont_sTextFontSize_transcriptLoadingViewTextFont,
        *(double *)&transcriptLoadingViewTextFont_sTextFontSize_transcriptLoadingViewTextFont != v6)
    || (uint64_t v12 = transcriptLoadingViewTextFont_sCustomTextFontSize_transcriptLoadingViewTextFont,
        *(double *)&transcriptLoadingViewTextFont_sCustomTextFontSize_transcriptLoadingViewTextFont != v7)
    || (objc_msgSend((id)transcriptLoadingViewTextFont_sCustomTextFontName_transcriptLoadingViewTextFont, "isEqualToString:", v10, *(double *)&transcriptLoadingViewTextFont_sCustomTextFontSize_transcriptLoadingViewTextFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = [(CKUIBehavior *)self transcriptTextFontStyle];
    uint64_t v15 = objc_msgSend(v13, "__ck_emphasizedPreferredFontForTextStyle:", v14);
    uint64_t v16 = (void *)transcriptLoadingViewTextFont_sBehavior;
    transcriptLoadingViewTextFont_sBehavior = v15;

    objc_storeStrong((id *)&transcriptLoadingViewTextFont_sContentSizeCategory_transcriptLoadingViewTextFont, v3);
    transcriptLoadingViewTextFont_sIsIncreaseContrastEnabled_transcriptLoadingViewTextFont = v4;
    transcriptLoadingViewTextFont_sIsBoldTextEnabled_transcriptLoadingViewTextFont = IsBoldTextEnabled;
    transcriptLoadingViewTextFont_sTextFontSize_transcriptLoadingViewTextFont = *(void *)&v6;
    transcriptLoadingViewTextFont_sCustomTextFontSize_transcriptLoadingViewTextFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptLoadingViewTextFont_sCustomTextFontName_transcriptLoadingViewTextFont, v9);
  }
  id v17 = (UIFont *)(id)transcriptLoadingViewTextFont_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatesystemUIFontExcessiveLineHeightCharacterSet
{
  return 0;
}

- (__CFCharacterSet)systemUIFontExcessiveLineHeightCharacterSet
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)systemUIFontExcessiveLineHeightCharacterSet_sContentSizeCategory_systemUIFontExcessiveLineHeightCharacterSet, v3);
  if (-[CKUIBehavior ckShouldUpdatesystemUIFontExcessiveLineHeightCharacterSet](self, "ckShouldUpdatesystemUIFontExcessiveLineHeightCharacterSet")|| v11|| systemUIFontExcessiveLineHeightCharacterSet_sIsIncreaseContrastEnabled_systemUIFontExcessiveLineHeightCharacterSet != v4|| systemUIFontExcessiveLineHeightCharacterSet_sIsBoldTextEnabled_systemUIFontExcessiveLineHeightCharacterSet != IsBoldTextEnabled|| *(double *)&systemUIFontExcessiveLineHeightCharacterSet_sTextFontSize_systemUIFontExcessiveLineHeightCharacterSet != v6|| *(double *)&systemUIFontExcessiveLineHeightCharacterSet_sCustomTextFontSize_systemUIFontExcessiveLineHeightCharacterSet != v7|| (objc_msgSend((id)systemUIFontExcessiveLineHeightCharacterSet_sCustomTextFontName_systemUIFontExcessiveLineHeightCharacterSet, "isEqualToString:", v10, *(double *)&systemUIFontExcessiveLineHeightCharacterSet_sCustomTextFontSize_systemUIFontExcessiveLineHeightCharacterSet) & 1) == 0)
  {
    systemUIFontExcessiveLineHeightCharacterSet_sBehavior = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
    objc_storeStrong((id *)&systemUIFontExcessiveLineHeightCharacterSet_sContentSizeCategory_systemUIFontExcessiveLineHeightCharacterSet, v3);
    systemUIFontExcessiveLineHeightCharacterSet_sIsIncreaseContrastEnabled_systemUIFontExcessiveLineHeightCharacterSet = v4;
    systemUIFontExcessiveLineHeightCharacterSet_sIsBoldTextEnabled_systemUIFontExcessiveLineHeightCharacterSet = IsBoldTextEnabled;
    systemUIFontExcessiveLineHeightCharacterSet_sTextFontSize_systemUIFontExcessiveLineHeightCharacterSet = *(void *)&v6;
    systemUIFontExcessiveLineHeightCharacterSet_sCustomTextFontSize_systemUIFontExcessiveLineHeightCharacterSet = *(void *)&v7;
    objc_storeStrong((id *)&systemUIFontExcessiveLineHeightCharacterSet_sCustomTextFontName_systemUIFontExcessiveLineHeightCharacterSet, v9);
  }
  uint64_t v12 = (__CFCharacterSet *)systemUIFontExcessiveLineHeightCharacterSet_sBehavior;

  return v12;
}

- (BOOL)ckShouldUpdatetranscriptTextFontLanguageAwareOutsets
{
  return 0;
}

- (UIEdgeInsets)transcriptTextFontLanguageAwareOutsets
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptTextFontLanguageAwareOutsets_sContentSizeCategory_transcriptTextFontLanguageAwareOutsets, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptTextFontLanguageAwareOutsets](self, "ckShouldUpdatetranscriptTextFontLanguageAwareOutsets")|| v10|| transcriptTextFontLanguageAwareOutsets_sIsBoldTextEnabled_transcriptTextFontLanguageAwareOutsets != IsBoldTextEnabled|| *(double *)&transcriptTextFontLanguageAwareOutsets_sTextFontSize_transcriptTextFontLanguageAwareOutsets != v5|| *(double *)&transcriptTextFontLanguageAwareOutsets_sCustomTextFontSize_transcriptTextFontLanguageAwareOutsets != v6|| (objc_msgSend((id)transcriptTextFontLanguageAwareOutsets_sCustomTextFontName_transcriptTextFontLanguageAwareOutsets, "isEqualToString:", v9, *(double *)&transcriptTextFontLanguageAwareOutsets_sCustomTextFontSize_transcriptTextFontLanguageAwareOutsets) & 1) == 0)
  {
    NSComparisonResult v11 = [(CKUIBehavior *)self transcriptTextFont];
    CTFontGetLanguageAwareOutsets();
    transcriptTextFontLanguageAwareOutsets_sBehavior = v19;
    *(_OWORD *)&qword_1E9247138 = v20;

    objc_storeStrong((id *)&transcriptTextFontLanguageAwareOutsets_sContentSizeCategory_transcriptTextFontLanguageAwareOutsets, v3);
    transcriptTextFontLanguageAwareOutsets_sIsBoldTextEnabled_transcriptTextFontLanguageAwareOutsets = IsBoldTextEnabled;
    transcriptTextFontLanguageAwareOutsets_sTextFontSize_transcriptTextFontLanguageAwareOutsets = *(void *)&v5;
    transcriptTextFontLanguageAwareOutsets_sCustomTextFontSize_transcriptTextFontLanguageAwareOutsets = *(void *)&v6;
    objc_storeStrong((id *)&transcriptTextFontLanguageAwareOutsets_sCustomTextFontName_transcriptTextFontLanguageAwareOutsets, v8);
  }
  unsigned long long v12 = transcriptTextFontLanguageAwareOutsets_sBehavior;
  uint64_t v13 = qword_1E9247138;
  double v14 = unk_1E9247140;

  *(void *)&double v16 = v12 >> 64;
  *(void *)&double v15 = v12;
  double v17 = *(double *)&v13;
  double v18 = v14;
  result.double right = v18;
  result.double bottom = v17;
  result.double left = v16;
  result.double top = v15;
  return result;
}

- (BOOL)ckShouldUpdatetranscriptFooterNoteTitleFont
{
  return 0;
}

- (UIFont)transcriptFooterNoteTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptFooterNoteTitleFont_sContentSizeCategory_transcriptFooterNoteTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptFooterNoteTitleFont]
    || v11
    || transcriptFooterNoteTitleFont_sIsIncreaseContrastEnabled_transcriptFooterNoteTitleFont != v4
    || transcriptFooterNoteTitleFont_sIsBoldTextEnabled_transcriptFooterNoteTitleFont != IsBoldTextEnabled
    || *(double *)&transcriptFooterNoteTitleFont_sTextFontSize_transcriptFooterNoteTitleFont != v6
    || *(double *)&transcriptFooterNoteTitleFont_sCustomTextFontSize_transcriptFooterNoteTitleFont != v7
    || (objc_msgSend((id)transcriptFooterNoteTitleFont_sCustomTextFontName_transcriptFooterNoteTitleFont, "isEqualToString:", v10, *(double *)&transcriptFooterNoteTitleFont_sCustomTextFontSize_transcriptFooterNoteTitleFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_fontForStyle:weight:", *MEMORY[0x1E4F43898], *MEMORY[0x1E4FB09E0]);
    uint64_t v13 = (void *)transcriptFooterNoteTitleFont_sBehavior;
    transcriptFooterNoteTitleFont_sBehavior = v12;

    objc_storeStrong((id *)&transcriptFooterNoteTitleFont_sContentSizeCategory_transcriptFooterNoteTitleFont, v3);
    transcriptFooterNoteTitleFont_sIsIncreaseContrastEnabled_transcriptFooterNoteTitleFont = v4;
    transcriptFooterNoteTitleFont_sIsBoldTextEnabled_transcriptFooterNoteTitleFont = IsBoldTextEnabled;
    transcriptFooterNoteTitleFont_sTextFontSize_transcriptFooterNoteTitleFont = *(void *)&v6;
    transcriptFooterNoteTitleFont_sCustomTextFontSize_transcriptFooterNoteTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptFooterNoteTitleFont_sCustomTextFontName_transcriptFooterNoteTitleFont, v9);
  }
  double v14 = (UIFont *)(id)transcriptFooterNoteTitleFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatetranscriptFooterNoteBodyFont
{
  return 0;
}

- (UIFont)transcriptFooterNoteBodyFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptFooterNoteBodyFont_sContentSizeCategory_transcriptFooterNoteBodyFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptFooterNoteBodyFont]
    || v11
    || transcriptFooterNoteBodyFont_sIsIncreaseContrastEnabled_transcriptFooterNoteBodyFont != v4
    || transcriptFooterNoteBodyFont_sIsBoldTextEnabled_transcriptFooterNoteBodyFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptFooterNoteBodyFont_sTextFontSize_transcriptFooterNoteBodyFont,
        *(double *)&transcriptFooterNoteBodyFont_sTextFontSize_transcriptFooterNoteBodyFont != v6)
    || (uint64_t v12 = transcriptFooterNoteBodyFont_sCustomTextFontSize_transcriptFooterNoteBodyFont,
        *(double *)&transcriptFooterNoteBodyFont_sCustomTextFontSize_transcriptFooterNoteBodyFont != v7)
    || (objc_msgSend((id)transcriptFooterNoteBodyFont_sCustomTextFontName_transcriptFooterNoteBodyFont, "isEqualToString:", v10, *(double *)&transcriptFooterNoteBodyFont_sCustomTextFontSize_transcriptFooterNoteBodyFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43898], *(double *)&v12);
    double v14 = (void *)transcriptFooterNoteBodyFont_sBehavior;
    transcriptFooterNoteBodyFont_sBehavior = v13;

    objc_storeStrong((id *)&transcriptFooterNoteBodyFont_sContentSizeCategory_transcriptFooterNoteBodyFont, v3);
    transcriptFooterNoteBodyFont_sIsIncreaseContrastEnabled_transcriptFooterNoteBodyFont = v4;
    transcriptFooterNoteBodyFont_sIsBoldTextEnabled_transcriptFooterNoteBodyFont = IsBoldTextEnabled;
    transcriptFooterNoteBodyFont_sTextFontSize_transcriptFooterNoteBodyFont = *(void *)&v6;
    transcriptFooterNoteBodyFont_sCustomTextFontSize_transcriptFooterNoteBodyFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptFooterNoteBodyFont_sCustomTextFontName_transcriptFooterNoteBodyFont, v9);
  }
  double v15 = (UIFont *)(id)transcriptFooterNoteBodyFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatebrowserCellFont
{
  return 0;
}

- (UIFont)browserCellFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)browserCellFont_sContentSizeCategory_browserCellFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatebrowserCellFont]
    || v11
    || browserCellFont_sIsIncreaseContrastEnabled_browserCellFont != v4
    || browserCellFont_sIsBoldTextEnabled_browserCellFont != IsBoldTextEnabled
    || (uint64_t v12 = browserCellFont_sTextFontSize_browserCellFont,
        *(double *)&browserCellFont_sTextFontSize_browserCellFont != v6)
    || (uint64_t v12 = browserCellFont_sCustomTextFontSize_browserCellFont,
        *(double *)&browserCellFont_sCustomTextFontSize_browserCellFont != v7)
    || (objc_msgSend((id)browserCellFont_sCustomTextFontName_browserCellFont, "isEqualToString:", v10, *(double *)&browserCellFont_sCustomTextFontSize_browserCellFont) & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FB08E0];
    double v14 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    uint64_t v15 = [v13 fontWithDescriptor:v14 size:11.0];
    double v16 = (void *)browserCellFont_sBehavior;
    browserCellFont_sBehavior = v15;

    objc_storeStrong((id *)&browserCellFont_sContentSizeCategory_browserCellFont, v3);
    browserCellFont_sIsIncreaseContrastEnabled_browserCellFont = v4;
    browserCellFont_sIsBoldTextEnabled_browserCellFont = IsBoldTextEnabled;
    browserCellFont_sTextFontSize_browserCellFont = *(void *)&v6;
    browserCellFont_sCustomTextFontSize_browserCellFont = *(void *)&v7;
    objc_storeStrong((id *)&browserCellFont_sCustomTextFontName_browserCellFont, v9);
  }
  double v17 = (UIFont *)(id)browserCellFont_sBehavior;

  return v17;
}

- (NSDictionary)leftStatusTranscriptTextAttributes
{
  double v2 = [(CKUIBehavior *)self _leftStatusTranscriptTextAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_leftStatusTranscriptTextAttributes
{
  return 0;
}

- (id)_leftStatusTranscriptTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_leftStatusTranscriptTextAttributes_sContentSizeCategory__leftStatusTranscriptTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_leftStatusTranscriptTextAttributes](self, "ckShouldUpdate_leftStatusTranscriptTextAttributes")|| v11|| _leftStatusTranscriptTextAttributes_sIsIncreaseContrastEnabled__leftStatusTranscriptTextAttributes != v4|| _leftStatusTranscriptTextAttributes_sIsBoldTextEnabled__leftStatusTranscriptTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = _leftStatusTranscriptTextAttributes_sTextFontSize__leftStatusTranscriptTextAttributes, *(double *)&_leftStatusTranscriptTextAttributes_sTextFontSize__leftStatusTranscriptTextAttributes != v6)|| (uint64_t v12 = _leftStatusTranscriptTextAttributes_sCustomTextFontSize__leftStatusTranscriptTextAttributes, *(double *)&_leftStatusTranscriptTextAttributes_sCustomTextFontSize__leftStatusTranscriptTextAttributes != v7)|| (objc_msgSend((id)_leftStatusTranscriptTextAttributes_sCustomTextFontName__leftStatusTranscriptTextAttributes, "isEqualToString:", v10, *(double *)&_leftStatusTranscriptTextAttributes_sCustomTextFontSize__leftStatusTranscriptTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:0];
    [v15 setLineBreakMode:2];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptMessageStatusFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 transcriptBreadcrumpTextColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_leftStatusTranscriptTextAttributes_sBehavior;
    _leftStatusTranscriptTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_leftStatusTranscriptTextAttributes_sContentSizeCategory__leftStatusTranscriptTextAttributes, v3);
    _leftStatusTranscriptTextAttributes_sIsIncreaseContrastEnabled__leftStatusTranscriptTextAttributes = v4;
    _leftStatusTranscriptTextAttributes_sIsBoldTextEnabled__leftStatusTranscriptTextAttributes = v27;
    _leftStatusTranscriptTextAttributes_sTextFontSize__leftStatusTranscriptTextAttributes = *(void *)&v6;
    _leftStatusTranscriptTextAttributes_sCustomTextFontSize__leftStatusTranscriptTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_leftStatusTranscriptTextAttributes_sCustomTextFontName__leftStatusTranscriptTextAttributes, obj);
  }
  id v25 = (id)v13[373];

  return v25;
}

- (NSDictionary)rightStatusTranscriptTextAttributes
{
  double v2 = [(CKUIBehavior *)self _rightStatusTranscriptTextAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_rightStatusTranscriptTextAttributes
{
  return 0;
}

- (id)_rightStatusTranscriptTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_rightStatusTranscriptTextAttributes_sContentSizeCategory__rightStatusTranscriptTextAttributes, v3);
  uint64_t v13 = &previewPrewarmQueue_once;
  if (-[CKUIBehavior ckShouldUpdate_rightStatusTranscriptTextAttributes](self, "ckShouldUpdate_rightStatusTranscriptTextAttributes")|| v11|| _rightStatusTranscriptTextAttributes_sIsIncreaseContrastEnabled__rightStatusTranscriptTextAttributes != v4|| _rightStatusTranscriptTextAttributes_sIsBoldTextEnabled__rightStatusTranscriptTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = _rightStatusTranscriptTextAttributes_sTextFontSize__rightStatusTranscriptTextAttributes, *(double *)&_rightStatusTranscriptTextAttributes_sTextFontSize__rightStatusTranscriptTextAttributes != v6)|| (uint64_t v12 = _rightStatusTranscriptTextAttributes_sCustomTextFontSize__rightStatusTranscriptTextAttributes, *(double *)&_rightStatusTranscriptTextAttributes_sCustomTextFontSize__rightStatusTranscriptTextAttributes != v7)|| (objc_msgSend((id)_rightStatusTranscriptTextAttributes_sCustomTextFontName__rightStatusTranscriptTextAttributes, "isEqualToString:", v10, *(double *)&_rightStatusTranscriptTextAttributes_sCustomTextFontSize__rightStatusTranscriptTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:2];
    [v15 setLineBreakMode:2];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptMessageStatusFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 transcriptBreadcrumpTextColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &previewPrewarmQueue_once;
    double v24 = (void *)_rightStatusTranscriptTextAttributes_sBehavior;
    _rightStatusTranscriptTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_rightStatusTranscriptTextAttributes_sContentSizeCategory__rightStatusTranscriptTextAttributes, v3);
    _rightStatusTranscriptTextAttributes_sIsIncreaseContrastEnabled__rightStatusTranscriptTextAttributes = v4;
    _rightStatusTranscriptTextAttributes_sIsBoldTextEnabled__rightStatusTranscriptTextAttributes = v27;
    _rightStatusTranscriptTextAttributes_sTextFontSize__rightStatusTranscriptTextAttributes = *(void *)&v6;
    _rightStatusTranscriptTextAttributes_sCustomTextFontSize__rightStatusTranscriptTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_rightStatusTranscriptTextAttributes_sCustomTextFontName__rightStatusTranscriptTextAttributes, obj);
  }
  id v25 = (id)v13[314];

  return v25;
}

- (BOOL)ckShouldUpdateconversationCellSummaryPreviewTextAttributes
{
  return 0;
}

- (NSDictionary)conversationCellSummaryPreviewTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationCellSummaryPreviewTextAttributes_sContentSizeCategory_conversationCellSummaryPreviewTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdateconversationCellSummaryPreviewTextAttributes](self, "ckShouldUpdateconversationCellSummaryPreviewTextAttributes")|| v11|| conversationCellSummaryPreviewTextAttributes_sIsIncreaseContrastEnabled_conversationCellSummaryPreviewTextAttributes != v4|| conversationCellSummaryPreviewTextAttributes_sIsBoldTextEnabled_conversationCellSummaryPreviewTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = conversationCellSummaryPreviewTextAttributes_sTextFontSize_conversationCellSummaryPreviewTextAttributes, *(double *)&conversationCellSummaryPreviewTextAttributes_sTextFontSize_conversationCellSummaryPreviewTextAttributes != v6)|| (uint64_t v12 = conversationCellSummaryPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryPreviewTextAttributes, *(double *)&conversationCellSummaryPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryPreviewTextAttributes != v7)|| (objc_msgSend((id)conversationCellSummaryPreviewTextAttributes_sCustomTextFontName_conversationCellSummaryPreviewTextAttributes, "isEqualToString:", v10, *(double *)&conversationCellSummaryPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryPreviewTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:4];
    [v15 setLineBreakMode:4];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self conversationListSummaryFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 conversationListSummaryColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)conversationCellSummaryPreviewTextAttributes_sBehavior;
    conversationCellSummaryPreviewTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&conversationCellSummaryPreviewTextAttributes_sContentSizeCategory_conversationCellSummaryPreviewTextAttributes, v3);
    conversationCellSummaryPreviewTextAttributes_sIsIncreaseContrastEnabled_conversationCellSummaryPreviewTextAttributes = v4;
    conversationCellSummaryPreviewTextAttributes_sIsBoldTextEnabled_conversationCellSummaryPreviewTextAttributes = v27;
    conversationCellSummaryPreviewTextAttributes_sTextFontSize_conversationCellSummaryPreviewTextAttributes = *(void *)&v6;
    conversationCellSummaryPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryPreviewTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&conversationCellSummaryPreviewTextAttributes_sCustomTextFontName_conversationCellSummaryPreviewTextAttributes, obj);
  }
  id v25 = (NSDictionary *)(id)v13[377];

  return v25;
}

- (BOOL)ckShouldUpdateconversationCellSummaryBoldPreviewTextAttributes
{
  return 0;
}

- (NSDictionary)conversationCellSummaryBoldPreviewTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationCellSummaryBoldPreviewTextAttributes_sContentSizeCategory_conversationCellSummaryBoldPreviewTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdateconversationCellSummaryBoldPreviewTextAttributes](self, "ckShouldUpdateconversationCellSummaryBoldPreviewTextAttributes")|| v11|| conversationCellSummaryBoldPreviewTextAttributes_sIsIncreaseContrastEnabled_conversationCellSummaryBoldPreviewTextAttributes != v4|| conversationCellSummaryBoldPreviewTextAttributes_sIsBoldTextEnabled_conversationCellSummaryBoldPreviewTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = conversationCellSummaryBoldPreviewTextAttributes_sTextFontSize_conversationCellSummaryBoldPreviewTextAttributes, *(double *)&conversationCellSummaryBoldPreviewTextAttributes_sTextFontSize_conversationCellSummaryBoldPreviewTextAttributes != v6)|| (uint64_t v12 = conversationCellSummaryBoldPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryBoldPreviewTextAttributes, *(double *)&conversationCellSummaryBoldPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryBoldPreviewTextAttributes != v7)|| (objc_msgSend((id)conversationCellSummaryBoldPreviewTextAttributes_sCustomTextFontName_conversationCellSummaryBoldPreviewTextAttributes, "isEqualToString:", v10, *(double *)&conversationCellSummaryBoldPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryBoldPreviewTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:4];
    [v15 setLineBreakMode:4];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self conversationListBoldSummaryFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 conversationListSummaryColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)conversationCellSummaryBoldPreviewTextAttributes_sBehavior;
    conversationCellSummaryBoldPreviewTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&conversationCellSummaryBoldPreviewTextAttributes_sContentSizeCategory_conversationCellSummaryBoldPreviewTextAttributes, v3);
    conversationCellSummaryBoldPreviewTextAttributes_sIsIncreaseContrastEnabled_conversationCellSummaryBoldPreviewTextAttributes = v4;
    conversationCellSummaryBoldPreviewTextAttributes_sIsBoldTextEnabled_conversationCellSummaryBoldPreviewTextAttributes = v27;
    conversationCellSummaryBoldPreviewTextAttributes_sTextFontSize_conversationCellSummaryBoldPreviewTextAttributes = *(void *)&v6;
    conversationCellSummaryBoldPreviewTextAttributes_sCustomTextFontSize_conversationCellSummaryBoldPreviewTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&conversationCellSummaryBoldPreviewTextAttributes_sCustomTextFontName_conversationCellSummaryBoldPreviewTextAttributes, obj);
  }
  id v25 = (NSDictionary *)(id)v13[380];

  return v25;
}

- (UIButtonConfiguration)transcriptLabelAccessoryButtonConfiguration
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __59__CKUIBehavior_transcriptLabelAccessoryButtonConfiguration__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (transcriptLabelAccessoryButtonConfiguration_once != -1) {
    dispatch_once(&transcriptLabelAccessoryButtonConfiguration_once, block);
  }
  return (UIButtonConfiguration *)(id)transcriptLabelAccessoryButtonConfiguration_sBehavior;
}

void __59__CKUIBehavior_transcriptLabelAccessoryButtonConfiguration__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _transcriptLabelAccessoryButtonConfiguration];
  double v2 = (void *)transcriptLabelAccessoryButtonConfiguration_sBehavior;
  transcriptLabelAccessoryButtonConfiguration_sBehavior = v1;
}

- (id)_transcriptLabelAccessoryButtonConfiguration
{
  return 0;
}

- (NSDictionary)leftTranscriptButtonTextAttributes
{
  double v2 = [(CKUIBehavior *)self _leftTranscriptButtonTextAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_leftTranscriptButtonTextAttributes
{
  return 0;
}

- (id)_leftTranscriptButtonTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_leftTranscriptButtonTextAttributes_sContentSizeCategory__leftTranscriptButtonTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_leftTranscriptButtonTextAttributes](self, "ckShouldUpdate_leftTranscriptButtonTextAttributes")|| v11|| _leftTranscriptButtonTextAttributes_sIsIncreaseContrastEnabled__leftTranscriptButtonTextAttributes != v4|| _leftTranscriptButtonTextAttributes_sIsBoldTextEnabled__leftTranscriptButtonTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = _leftTranscriptButtonTextAttributes_sTextFontSize__leftTranscriptButtonTextAttributes, *(double *)&_leftTranscriptButtonTextAttributes_sTextFontSize__leftTranscriptButtonTextAttributes != v6)|| (uint64_t v12 = _leftTranscriptButtonTextAttributes_sCustomTextFontSize__leftTranscriptButtonTextAttributes, *(double *)&_leftTranscriptButtonTextAttributes_sCustomTextFontSize__leftTranscriptButtonTextAttributes != v7)|| (objc_msgSend((id)_leftTranscriptButtonTextAttributes_sCustomTextFontName__leftTranscriptButtonTextAttributes, "isEqualToString:", v10, *(double *)&_leftTranscriptButtonTextAttributes_sCustomTextFontSize__leftTranscriptButtonTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:0];
    [v15 setLineBreakMode:0];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptButtonTextFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 attachmentBalloonActionColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_leftTranscriptButtonTextAttributes_sBehavior;
    _leftTranscriptButtonTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_leftTranscriptButtonTextAttributes_sContentSizeCategory__leftTranscriptButtonTextAttributes, v3);
    _leftTranscriptButtonTextAttributes_sIsIncreaseContrastEnabled__leftTranscriptButtonTextAttributes = v4;
    _leftTranscriptButtonTextAttributes_sIsBoldTextEnabled__leftTranscriptButtonTextAttributes = v27;
    _leftTranscriptButtonTextAttributes_sTextFontSize__leftTranscriptButtonTextAttributes = *(void *)&v6;
    _leftTranscriptButtonTextAttributes_sCustomTextFontSize__leftTranscriptButtonTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_leftTranscriptButtonTextAttributes_sCustomTextFontName__leftTranscriptButtonTextAttributes, obj);
  }
  id v25 = (id)v13[384];

  return v25;
}

- (NSDictionary)rightTranscriptButtonTextAttributes
{
  double v2 = [(CKUIBehavior *)self _rightTranscriptButtonTextAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_rightTranscriptButtonTextAttributes
{
  return 0;
}

- (id)_rightTranscriptButtonTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_rightTranscriptButtonTextAttributes_sContentSizeCategory__rightTranscriptButtonTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_rightTranscriptButtonTextAttributes](self, "ckShouldUpdate_rightTranscriptButtonTextAttributes")|| v11|| _rightTranscriptButtonTextAttributes_sIsIncreaseContrastEnabled__rightTranscriptButtonTextAttributes != v4|| _rightTranscriptButtonTextAttributes_sIsBoldTextEnabled__rightTranscriptButtonTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = _rightTranscriptButtonTextAttributes_sTextFontSize__rightTranscriptButtonTextAttributes, *(double *)&_rightTranscriptButtonTextAttributes_sTextFontSize__rightTranscriptButtonTextAttributes != v6)|| (uint64_t v12 = _rightTranscriptButtonTextAttributes_sCustomTextFontSize__rightTranscriptButtonTextAttributes, *(double *)&_rightTranscriptButtonTextAttributes_sCustomTextFontSize__rightTranscriptButtonTextAttributes != v7)|| (objc_msgSend((id)_rightTranscriptButtonTextAttributes_sCustomTextFontName__rightTranscriptButtonTextAttributes, "isEqualToString:", v10, *(double *)&_rightTranscriptButtonTextAttributes_sCustomTextFontSize__rightTranscriptButtonTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:2];
    [v15 setLineBreakMode:0];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptButtonTextFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 attachmentBalloonActionColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_rightTranscriptButtonTextAttributes_sBehavior;
    _rightTranscriptButtonTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_rightTranscriptButtonTextAttributes_sContentSizeCategory__rightTranscriptButtonTextAttributes, v3);
    _rightTranscriptButtonTextAttributes_sIsIncreaseContrastEnabled__rightTranscriptButtonTextAttributes = v4;
    _rightTranscriptButtonTextAttributes_sIsBoldTextEnabled__rightTranscriptButtonTextAttributes = v27;
    _rightTranscriptButtonTextAttributes_sTextFontSize__rightTranscriptButtonTextAttributes = *(void *)&v6;
    _rightTranscriptButtonTextAttributes_sCustomTextFontSize__rightTranscriptButtonTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_rightTranscriptButtonTextAttributes_sCustomTextFontName__rightTranscriptButtonTextAttributes, obj);
  }
  id v25 = (id)v13[387];

  return v25;
}

- (BOOL)ckShouldUpdatecenterTranscriptButtonTextAttributes
{
  return 0;
}

- (NSDictionary)centerTranscriptButtonTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)centerTranscriptButtonTextAttributes_sContentSizeCategory_centerTranscriptButtonTextAttributes, v3);
  uint64_t v13 = (id *)&unk_1E9246000;
  if (-[CKUIBehavior ckShouldUpdatecenterTranscriptButtonTextAttributes](self, "ckShouldUpdatecenterTranscriptButtonTextAttributes")|| v11|| centerTranscriptButtonTextAttributes_sIsIncreaseContrastEnabled_centerTranscriptButtonTextAttributes != v4|| centerTranscriptButtonTextAttributes_sIsBoldTextEnabled_centerTranscriptButtonTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = centerTranscriptButtonTextAttributes_sTextFontSize_centerTranscriptButtonTextAttributes, *(double *)&centerTranscriptButtonTextAttributes_sTextFontSize_centerTranscriptButtonTextAttributes != v6)|| (uint64_t v12 = centerTranscriptButtonTextAttributes_sCustomTextFontSize_centerTranscriptButtonTextAttributes, *(double *)&centerTranscriptButtonTextAttributes_sCustomTextFontSize_centerTranscriptButtonTextAttributes != v7)|| (objc_msgSend((id)centerTranscriptButtonTextAttributes_sCustomTextFontName_centerTranscriptButtonTextAttributes, "isEqualToString:", v10, *(double *)&centerTranscriptButtonTextAttributes_sCustomTextFontSize_centerTranscriptButtonTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptButtonTextFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 attachmentBalloonActionColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = (id *)&unk_1E9246000;
    double v24 = (void *)centerTranscriptButtonTextAttributes_sBehavior;
    centerTranscriptButtonTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&centerTranscriptButtonTextAttributes_sContentSizeCategory_centerTranscriptButtonTextAttributes, v3);
    centerTranscriptButtonTextAttributes_sIsIncreaseContrastEnabled_centerTranscriptButtonTextAttributes = v4;
    centerTranscriptButtonTextAttributes_sIsBoldTextEnabled_centerTranscriptButtonTextAttributes = v27;
    centerTranscriptButtonTextAttributes_sTextFontSize_centerTranscriptButtonTextAttributes = *(void *)&v6;
    centerTranscriptButtonTextAttributes_sCustomTextFontSize_centerTranscriptButtonTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&centerTranscriptButtonTextAttributes_sCustomTextFontName_centerTranscriptButtonTextAttributes, obj);
  }
  id v25 = (NSDictionary *)v13[230];

  return v25;
}

- (id)breadcrumbTranscriptTextAttributes
{
  double v2 = [(CKUIBehavior *)self _breadcrumbTranscriptTextAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return v2;
}

- (BOOL)ckShouldUpdate_breadcrumbTranscriptTextAttributes
{
  return 0;
}

- (id)_breadcrumbTranscriptTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_breadcrumbTranscriptTextAttributes_sContentSizeCategory__breadcrumbTranscriptTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_breadcrumbTranscriptTextAttributes](self, "ckShouldUpdate_breadcrumbTranscriptTextAttributes")|| v11|| _breadcrumbTranscriptTextAttributes_sIsIncreaseContrastEnabled__breadcrumbTranscriptTextAttributes != v4|| _breadcrumbTranscriptTextAttributes_sIsBoldTextEnabled__breadcrumbTranscriptTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = _breadcrumbTranscriptTextAttributes_sTextFontSize__breadcrumbTranscriptTextAttributes, *(double *)&_breadcrumbTranscriptTextAttributes_sTextFontSize__breadcrumbTranscriptTextAttributes != v6)|| (uint64_t v12 = _breadcrumbTranscriptTextAttributes_sCustomTextFontSize__breadcrumbTranscriptTextAttributes, *(double *)&_breadcrumbTranscriptTextAttributes_sCustomTextFontSize__breadcrumbTranscriptTextAttributes != v7)|| (objc_msgSend((id)_breadcrumbTranscriptTextAttributes_sCustomTextFontName__breadcrumbTranscriptTextAttributes, "isEqualToString:", v10, *(double *)&_breadcrumbTranscriptTextAttributes_sCustomTextFontSize__breadcrumbTranscriptTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:0];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptTextFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_breadcrumbTranscriptTextAttributes_sBehavior;
    _breadcrumbTranscriptTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_breadcrumbTranscriptTextAttributes_sContentSizeCategory__breadcrumbTranscriptTextAttributes, v3);
    _breadcrumbTranscriptTextAttributes_sIsIncreaseContrastEnabled__breadcrumbTranscriptTextAttributes = v4;
    _breadcrumbTranscriptTextAttributes_sIsBoldTextEnabled__breadcrumbTranscriptTextAttributes = v27;
    _breadcrumbTranscriptTextAttributes_sTextFontSize__breadcrumbTranscriptTextAttributes = *(void *)&v6;
    _breadcrumbTranscriptTextAttributes_sCustomTextFontSize__breadcrumbTranscriptTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_breadcrumbTranscriptTextAttributes_sCustomTextFontName__breadcrumbTranscriptTextAttributes, obj);
  }
  id v25 = (id)v13[391];

  return v25;
}

- (NSDictionary)senderTranscriptTextAttributes
{
  double v2 = [(CKUIBehavior *)self _senderTranscriptTextAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_senderTranscriptTextAttributes
{
  return 0;
}

- (id)_senderTranscriptTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_senderTranscriptTextAttributes_sContentSizeCategory__senderTranscriptTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_senderTranscriptTextAttributes](self, "ckShouldUpdate_senderTranscriptTextAttributes")|| v11|| _senderTranscriptTextAttributes_sIsIncreaseContrastEnabled__senderTranscriptTextAttributes != v4|| _senderTranscriptTextAttributes_sIsBoldTextEnabled__senderTranscriptTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = _senderTranscriptTextAttributes_sTextFontSize__senderTranscriptTextAttributes, *(double *)&_senderTranscriptTextAttributes_sTextFontSize__senderTranscriptTextAttributes != v6)|| (uint64_t v12 = _senderTranscriptTextAttributes_sCustomTextFontSize__senderTranscriptTextAttributes, *(double *)&_senderTranscriptTextAttributes_sCustomTextFontSize__senderTranscriptTextAttributes != v7)|| (objc_msgSend((id)_senderTranscriptTextAttributes_sCustomTextFontName__senderTranscriptTextAttributes, "isEqualToString:", v10, *(double *)&_senderTranscriptTextAttributes_sCustomTextFontSize__senderTranscriptTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:0];
    [v15 setLineBreakMode:2];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptSenderFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    double v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    long long v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_senderTranscriptTextAttributes_sBehavior;
    _senderTranscriptTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_senderTranscriptTextAttributes_sContentSizeCategory__senderTranscriptTextAttributes, v3);
    _senderTranscriptTextAttributes_sIsIncreaseContrastEnabled__senderTranscriptTextAttributes = v4;
    _senderTranscriptTextAttributes_sIsBoldTextEnabled__senderTranscriptTextAttributes = v27;
    _senderTranscriptTextAttributes_sTextFontSize__senderTranscriptTextAttributes = *(void *)&v6;
    _senderTranscriptTextAttributes_sCustomTextFontSize__senderTranscriptTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_senderTranscriptTextAttributes_sCustomTextFontName__senderTranscriptTextAttributes, obj);
  }
  id v25 = (id)v13[394];

  return v25;
}

- (NSDictionary)stewieTranscriptEmergencyServiceAttributes
{
  double v2 = [(CKUIBehavior *)self _stewieTranscriptEmergencyServiceAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_stewieTranscriptEmergencyServiceAttributes
{
  return 0;
}

- (id)_stewieTranscriptEmergencyServiceAttributes
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_stewieTranscriptEmergencyServiceAttributes_sContentSizeCategory__stewieTranscriptEmergencyServiceAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_stewieTranscriptEmergencyServiceAttributes](self, "ckShouldUpdate_stewieTranscriptEmergencyServiceAttributes")|| v11|| _stewieTranscriptEmergencyServiceAttributes_sIsIncreaseContrastEnabled__stewieTranscriptEmergencyServiceAttributes != v4|| _stewieTranscriptEmergencyServiceAttributes_sIsBoldTextEnabled__stewieTranscriptEmergencyServiceAttributes != IsBoldTextEnabled|| (uint64_t v12 = _stewieTranscriptEmergencyServiceAttributes_sTextFontSize__stewieTranscriptEmergencyServiceAttributes, *(double *)&_stewieTranscriptEmergencyServiceAttributes_sTextFontSize__stewieTranscriptEmergencyServiceAttributes != v6)|| (uint64_t v12 = _stewieTranscriptEmergencyServiceAttributes_sCustomTextFontSize__stewieTranscriptEmergencyServiceAttributes, *(double *)&_stewieTranscriptEmergencyServiceAttributes_sCustomTextFontSize__stewieTranscriptEmergencyServiceAttributes != v7)|| (objc_msgSend((id)_stewieTranscriptEmergencyServiceAttributes_sCustomTextFontName__stewieTranscriptEmergencyServiceAttributes, "isEqualToString:", v10, *(double *)&_stewieTranscriptEmergencyServiceAttributes_sCustomTextFontSize__stewieTranscriptEmergencyServiceAttributes, v3) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12, obj);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:4];
    [v15 setLineBreakMode:2];
    v23[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptBoldFont];
    v24[0] = v16;
    v23[1] = *MEMORY[0x1E4FB0700];
    double v17 = [MEMORY[0x1E4F428B8] systemRedColor];
    v23[2] = *MEMORY[0x1E4FB0738];
    v24[1] = v17;
    v24[2] = v15;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    long long v19 = (void *)_stewieTranscriptEmergencyServiceAttributes_sBehavior;
    _stewieTranscriptEmergencyServiceAttributes_sBehavior = v18;

    objc_storeStrong((id *)&_stewieTranscriptEmergencyServiceAttributes_sContentSizeCategory__stewieTranscriptEmergencyServiceAttributes, obj);
    _stewieTranscriptEmergencyServiceAttributes_sIsIncreaseContrastEnabled__stewieTranscriptEmergencyServiceAttributes = v4;
    _stewieTranscriptEmergencyServiceAttributes_sIsBoldTextEnabled__stewieTranscriptEmergencyServiceAttributes = IsBoldTextEnabled;
    _stewieTranscriptEmergencyServiceAttributes_sTextFontSize__stewieTranscriptEmergencyServiceAttributes = *(void *)&v6;
    _stewieTranscriptEmergencyServiceAttributes_sCustomTextFontSize__stewieTranscriptEmergencyServiceAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_stewieTranscriptEmergencyServiceAttributes_sCustomTextFontName__stewieTranscriptEmergencyServiceAttributes, v9);
  }
  id v20 = (id)v13[397];

  return v20;
}

- (NSDictionary)stewieTranscriptEmergencyUserAttributes
{
  double v2 = [(CKUIBehavior *)self _stewieTranscriptEmergencyUserAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_stewieTranscriptEmergencyUserAttributes
{
  return 0;
}

- (id)_stewieTranscriptEmergencyUserAttributes
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_stewieTranscriptEmergencyUserAttributes_sContentSizeCategory__stewieTranscriptEmergencyUserAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_stewieTranscriptEmergencyUserAttributes](self, "ckShouldUpdate_stewieTranscriptEmergencyUserAttributes")|| v11|| _stewieTranscriptEmergencyUserAttributes_sIsIncreaseContrastEnabled__stewieTranscriptEmergencyUserAttributes != v4|| _stewieTranscriptEmergencyUserAttributes_sIsBoldTextEnabled__stewieTranscriptEmergencyUserAttributes != IsBoldTextEnabled|| (uint64_t v12 = _stewieTranscriptEmergencyUserAttributes_sTextFontSize__stewieTranscriptEmergencyUserAttributes, *(double *)&_stewieTranscriptEmergencyUserAttributes_sTextFontSize__stewieTranscriptEmergencyUserAttributes != v6)|| (uint64_t v12 = _stewieTranscriptEmergencyUserAttributes_sCustomTextFontSize__stewieTranscriptEmergencyUserAttributes, *(double *)&_stewieTranscriptEmergencyUserAttributes_sCustomTextFontSize__stewieTranscriptEmergencyUserAttributes != v7)|| (objc_msgSend((id)_stewieTranscriptEmergencyUserAttributes_sCustomTextFontName__stewieTranscriptEmergencyUserAttributes, "isEqualToString:", v10, *(double *)&_stewieTranscriptEmergencyUserAttributes_sCustomTextFontSize__stewieTranscriptEmergencyUserAttributes, v3) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12, obj);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:4];
    [v15 setLineBreakMode:2];
    v23[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptBoldFont];
    v24[0] = v16;
    v23[1] = *MEMORY[0x1E4FB0700];
    double v17 = [MEMORY[0x1E4F428B8] labelColor];
    v23[2] = *MEMORY[0x1E4FB0738];
    v24[1] = v17;
    v24[2] = v15;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    long long v19 = (void *)_stewieTranscriptEmergencyUserAttributes_sBehavior;
    _stewieTranscriptEmergencyUserAttributes_sBehavior = v18;

    objc_storeStrong((id *)&_stewieTranscriptEmergencyUserAttributes_sContentSizeCategory__stewieTranscriptEmergencyUserAttributes, obj);
    _stewieTranscriptEmergencyUserAttributes_sIsIncreaseContrastEnabled__stewieTranscriptEmergencyUserAttributes = v4;
    _stewieTranscriptEmergencyUserAttributes_sIsBoldTextEnabled__stewieTranscriptEmergencyUserAttributes = IsBoldTextEnabled;
    _stewieTranscriptEmergencyUserAttributes_sTextFontSize__stewieTranscriptEmergencyUserAttributes = *(void *)&v6;
    _stewieTranscriptEmergencyUserAttributes_sCustomTextFontSize__stewieTranscriptEmergencyUserAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_stewieTranscriptEmergencyUserAttributes_sCustomTextFontName__stewieTranscriptEmergencyUserAttributes, v9);
  }
  id v20 = (id)v13[400];

  return v20;
}

- (BOOL)ckShouldUpdatereplySenderTranscriptTextAttributes
{
  return 0;
}

- (NSDictionary)replySenderTranscriptTextAttributes
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)replySenderTranscriptTextAttributes_sContentSizeCategory_replySenderTranscriptTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdatereplySenderTranscriptTextAttributes](self, "ckShouldUpdatereplySenderTranscriptTextAttributes")|| v11|| replySenderTranscriptTextAttributes_sIsIncreaseContrastEnabled_replySenderTranscriptTextAttributes != v4|| replySenderTranscriptTextAttributes_sIsBoldTextEnabled_replySenderTranscriptTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = replySenderTranscriptTextAttributes_sTextFontSize_replySenderTranscriptTextAttributes, *(double *)&replySenderTranscriptTextAttributes_sTextFontSize_replySenderTranscriptTextAttributes != v6)|| (uint64_t v12 = replySenderTranscriptTextAttributes_sCustomTextFontSize_replySenderTranscriptTextAttributes, *(double *)&replySenderTranscriptTextAttributes_sCustomTextFontSize_replySenderTranscriptTextAttributes != v7)|| (objc_msgSend((id)replySenderTranscriptTextAttributes_sCustomTextFontName_replySenderTranscriptTextAttributes, "isEqualToString:", v10, *(double *)&replySenderTranscriptTextAttributes_sCustomTextFontSize_replySenderTranscriptTextAttributes, v3) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12, obj);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:0];
    [v15 setLineBreakMode:2];
    v23[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptTextFont];
    v24[0] = v16;
    v23[1] = *MEMORY[0x1E4FB0700];
    double v17 = [MEMORY[0x1E4F428B8] tertiaryLabelColor];
    v23[2] = *MEMORY[0x1E4FB0738];
    v24[1] = v17;
    v24[2] = v15;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    long long v19 = (void *)replySenderTranscriptTextAttributes_sBehavior;
    replySenderTranscriptTextAttributes_sBehavior = v18;

    objc_storeStrong((id *)&replySenderTranscriptTextAttributes_sContentSizeCategory_replySenderTranscriptTextAttributes, obj);
    replySenderTranscriptTextAttributes_sIsIncreaseContrastEnabled_replySenderTranscriptTextAttributes = v4;
    replySenderTranscriptTextAttributes_sIsBoldTextEnabled_replySenderTranscriptTextAttributes = IsBoldTextEnabled;
    replySenderTranscriptTextAttributes_sTextFontSize_replySenderTranscriptTextAttributes = *(void *)&v6;
    replySenderTranscriptTextAttributes_sCustomTextFontSize_replySenderTranscriptTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&replySenderTranscriptTextAttributes_sCustomTextFontName_replySenderTranscriptTextAttributes, v9);
  }
  id v20 = (NSDictionary *)(id)v13[403];

  return v20;
}

- (BOOL)ckShouldUpdatenickNameTranscriptTextAttributes
{
  return 0;
}

- (NSDictionary)nickNameTranscriptTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)nickNameTranscriptTextAttributes_sContentSizeCategory_nickNameTranscriptTextAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdatenickNameTranscriptTextAttributes](self, "ckShouldUpdatenickNameTranscriptTextAttributes")|| v11|| nickNameTranscriptTextAttributes_sIsIncreaseContrastEnabled_nickNameTranscriptTextAttributes != v4|| nickNameTranscriptTextAttributes_sIsBoldTextEnabled_nickNameTranscriptTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = nickNameTranscriptTextAttributes_sTextFontSize_nickNameTranscriptTextAttributes, *(double *)&nickNameTranscriptTextAttributes_sTextFontSize_nickNameTranscriptTextAttributes != v6)|| (uint64_t v12 = nickNameTranscriptTextAttributes_sCustomTextFontSize_nickNameTranscriptTextAttributes, *(double *)&nickNameTranscriptTextAttributes_sCustomTextFontSize_nickNameTranscriptTextAttributes != v7)|| (objc_msgSend((id)nickNameTranscriptTextAttributes_sCustomTextFontName_nickNameTranscriptTextAttributes, "isEqualToString:", v10, *(double *)&nickNameTranscriptTextAttributes_sCustomTextFontSize_nickNameTranscriptTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:0];
    [v15 setLineBreakMode:2];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptTextFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptNicknameTextColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)nickNameTranscriptTextAttributes_sBehavior;
    nickNameTranscriptTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&nickNameTranscriptTextAttributes_sContentSizeCategory_nickNameTranscriptTextAttributes, v3);
    nickNameTranscriptTextAttributes_sIsIncreaseContrastEnabled_nickNameTranscriptTextAttributes = v4;
    nickNameTranscriptTextAttributes_sIsBoldTextEnabled_nickNameTranscriptTextAttributes = v27;
    nickNameTranscriptTextAttributes_sTextFontSize_nickNameTranscriptTextAttributes = *(void *)&v6;
    nickNameTranscriptTextAttributes_sCustomTextFontSize_nickNameTranscriptTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&nickNameTranscriptTextAttributes_sCustomTextFontName_nickNameTranscriptTextAttributes, obj);
  }
  id v25 = (NSDictionary *)(id)v13[406];

  return v25;
}

- (NSDictionary)transcriptRegularFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptRegularFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptRegularFontAttributes
{
  return 0;
}

- (id)_transcriptRegularFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptRegularFontAttributes_sContentSizeCategory__transcriptRegularFontAttributes, v3);
  uint64_t v13 = &previewPrewarmQueue_once;
  if (-[CKUIBehavior ckShouldUpdate_transcriptRegularFontAttributes](self, "ckShouldUpdate_transcriptRegularFontAttributes")|| v11|| _transcriptRegularFontAttributes_sIsIncreaseContrastEnabled__transcriptRegularFontAttributes != v4|| _transcriptRegularFontAttributes_sIsBoldTextEnabled__transcriptRegularFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptRegularFontAttributes_sTextFontSize__transcriptRegularFontAttributes, *(double *)&_transcriptRegularFontAttributes_sTextFontSize__transcriptRegularFontAttributes != v6)|| (uint64_t v12 = _transcriptRegularFontAttributes_sCustomTextFontSize__transcriptRegularFontAttributes, *(double *)&_transcriptRegularFontAttributes_sCustomTextFontSize__transcriptRegularFontAttributes != v7)|| (objc_msgSend((id)_transcriptRegularFontAttributes_sCustomTextFontName__transcriptRegularFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptRegularFontAttributes_sCustomTextFontSize__transcriptRegularFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptRegularFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &previewPrewarmQueue_once;
    double v24 = (void *)_transcriptRegularFontAttributes_sBehavior;
    _transcriptRegularFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptRegularFontAttributes_sContentSizeCategory__transcriptRegularFontAttributes, v3);
    _transcriptRegularFontAttributes_sIsIncreaseContrastEnabled__transcriptRegularFontAttributes = v4;
    _transcriptRegularFontAttributes_sIsBoldTextEnabled__transcriptRegularFontAttributes = v27;
    _transcriptRegularFontAttributes_sTextFontSize__transcriptRegularFontAttributes = *(void *)&v6;
    _transcriptRegularFontAttributes_sCustomTextFontSize__transcriptRegularFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptRegularFontAttributes_sCustomTextFontName__transcriptRegularFontAttributes, obj);
  }
  id v25 = (id)v13[320];

  return v25;
}

- (NSDictionary)transcriptRegularPreferredFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptRegularPreferredFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptRegularPreferredFontAttributes
{
  return 0;
}

- (id)_transcriptRegularPreferredFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptRegularPreferredFontAttributes_sContentSizeCategory__transcriptRegularPreferredFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptRegularPreferredFontAttributes](self, "ckShouldUpdate_transcriptRegularPreferredFontAttributes")|| v11|| _transcriptRegularPreferredFontAttributes_sIsIncreaseContrastEnabled__transcriptRegularPreferredFontAttributes != v4|| _transcriptRegularPreferredFontAttributes_sIsBoldTextEnabled__transcriptRegularPreferredFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptRegularPreferredFontAttributes_sTextFontSize__transcriptRegularPreferredFontAttributes, *(double *)&_transcriptRegularPreferredFontAttributes_sTextFontSize__transcriptRegularPreferredFontAttributes != v6)|| (uint64_t v12 = _transcriptRegularPreferredFontAttributes_sCustomTextFontSize__transcriptRegularPreferredFontAttributes, *(double *)&_transcriptRegularPreferredFontAttributes_sCustomTextFontSize__transcriptRegularPreferredFontAttributes != v7)|| (objc_msgSend((id)_transcriptRegularPreferredFontAttributes_sCustomTextFontName__transcriptRegularPreferredFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptRegularPreferredFontAttributes_sCustomTextFontSize__transcriptRegularPreferredFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptRegularPreferredFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptRegularPreferredFontAttributes_sBehavior;
    _transcriptRegularPreferredFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptRegularPreferredFontAttributes_sContentSizeCategory__transcriptRegularPreferredFontAttributes, v3);
    _transcriptRegularPreferredFontAttributes_sIsIncreaseContrastEnabled__transcriptRegularPreferredFontAttributes = v4;
    _transcriptRegularPreferredFontAttributes_sIsBoldTextEnabled__transcriptRegularPreferredFontAttributes = v27;
    _transcriptRegularPreferredFontAttributes_sTextFontSize__transcriptRegularPreferredFontAttributes = *(void *)&v6;
    _transcriptRegularPreferredFontAttributes_sCustomTextFontSize__transcriptRegularPreferredFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptRegularPreferredFontAttributes_sCustomTextFontName__transcriptRegularPreferredFontAttributes, obj);
  }
  id v25 = (id)v13[410];

  return v25;
}

- (NSDictionary)transcriptSatelliteFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptSatelliteFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptSatelliteFontAttributes
{
  return 0;
}

- (id)_transcriptSatelliteFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptSatelliteFontAttributes_sContentSizeCategory__transcriptSatelliteFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptSatelliteFontAttributes](self, "ckShouldUpdate_transcriptSatelliteFontAttributes")|| v11|| _transcriptSatelliteFontAttributes_sIsIncreaseContrastEnabled__transcriptSatelliteFontAttributes != v4|| _transcriptSatelliteFontAttributes_sIsBoldTextEnabled__transcriptSatelliteFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptSatelliteFontAttributes_sTextFontSize__transcriptSatelliteFontAttributes, *(double *)&_transcriptSatelliteFontAttributes_sTextFontSize__transcriptSatelliteFontAttributes != v6)|| (uint64_t v12 = _transcriptSatelliteFontAttributes_sCustomTextFontSize__transcriptSatelliteFontAttributes, *(double *)&_transcriptSatelliteFontAttributes_sCustomTextFontSize__transcriptSatelliteFontAttributes != v7)|| (objc_msgSend((id)_transcriptSatelliteFontAttributes_sCustomTextFontName__transcriptSatelliteFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptSatelliteFontAttributes_sCustomTextFontSize__transcriptSatelliteFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptAvailabilityFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptSatelliteFontAttributes_sBehavior;
    _transcriptSatelliteFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptSatelliteFontAttributes_sContentSizeCategory__transcriptSatelliteFontAttributes, v3);
    _transcriptSatelliteFontAttributes_sIsIncreaseContrastEnabled__transcriptSatelliteFontAttributes = v4;
    _transcriptSatelliteFontAttributes_sIsBoldTextEnabled__transcriptSatelliteFontAttributes = v27;
    _transcriptSatelliteFontAttributes_sTextFontSize__transcriptSatelliteFontAttributes = *(void *)&v6;
    _transcriptSatelliteFontAttributes_sCustomTextFontSize__transcriptSatelliteFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptSatelliteFontAttributes_sCustomTextFontName__transcriptSatelliteFontAttributes, obj);
  }
  id v25 = (id)v13[413];

  return v25;
}

- (NSDictionary)transcriptAvailabilityFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptAvailabilityFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptAvailabilityFontAttributes
{
  return 0;
}

- (id)_transcriptAvailabilityFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptAvailabilityFontAttributes_sContentSizeCategory__transcriptAvailabilityFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptAvailabilityFontAttributes](self, "ckShouldUpdate_transcriptAvailabilityFontAttributes")|| v11|| _transcriptAvailabilityFontAttributes_sIsIncreaseContrastEnabled__transcriptAvailabilityFontAttributes != v4|| _transcriptAvailabilityFontAttributes_sIsBoldTextEnabled__transcriptAvailabilityFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptAvailabilityFontAttributes_sTextFontSize__transcriptAvailabilityFontAttributes, *(double *)&_transcriptAvailabilityFontAttributes_sTextFontSize__transcriptAvailabilityFontAttributes != v6)|| (uint64_t v12 = _transcriptAvailabilityFontAttributes_sCustomTextFontSize__transcriptAvailabilityFontAttributes, *(double *)&_transcriptAvailabilityFontAttributes_sCustomTextFontSize__transcriptAvailabilityFontAttributes != v7)|| (objc_msgSend((id)_transcriptAvailabilityFontAttributes_sCustomTextFontName__transcriptAvailabilityFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptAvailabilityFontAttributes_sCustomTextFontSize__transcriptAvailabilityFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptAvailabilityFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptAvailabilityColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptAvailabilityFontAttributes_sBehavior;
    _transcriptAvailabilityFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptAvailabilityFontAttributes_sContentSizeCategory__transcriptAvailabilityFontAttributes, v3);
    _transcriptAvailabilityFontAttributes_sIsIncreaseContrastEnabled__transcriptAvailabilityFontAttributes = v4;
    _transcriptAvailabilityFontAttributes_sIsBoldTextEnabled__transcriptAvailabilityFontAttributes = v27;
    _transcriptAvailabilityFontAttributes_sTextFontSize__transcriptAvailabilityFontAttributes = *(void *)&v6;
    _transcriptAvailabilityFontAttributes_sCustomTextFontSize__transcriptAvailabilityFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptAvailabilityFontAttributes_sCustomTextFontName__transcriptAvailabilityFontAttributes, obj);
  }
  id v25 = (id)v13[416];

  return v25;
}

- (NSDictionary)transcriptAvailabilityDeemphasizedFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptAvailabilityDeemphasizedFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptAvailabilityDeemphasizedFontAttributes
{
  return 0;
}

- (id)_transcriptAvailabilityDeemphasizedFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptAvailabilityDeemphasizedFontAttributes_sContentSizeCategory__transcriptAvailabilityDeemphasizedFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptAvailabilityDeemphasizedFontAttributes](self, "ckShouldUpdate_transcriptAvailabilityDeemphasizedFontAttributes")|| v11|| _transcriptAvailabilityDeemphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptAvailabilityDeemphasizedFontAttributes != v4|| _transcriptAvailabilityDeemphasizedFontAttributes_sIsBoldTextEnabled__transcriptAvailabilityDeemphasizedFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptAvailabilityDeemphasizedFontAttributes_sTextFontSize__transcriptAvailabilityDeemphasizedFontAttributes, *(double *)&_transcriptAvailabilityDeemphasizedFontAttributes_sTextFontSize__transcriptAvailabilityDeemphasizedFontAttributes != v6)|| (uint64_t v12 = _transcriptAvailabilityDeemphasizedFontAttributes_sCustomTextFontSize__transcriptAvailabilityDeemphasizedFontAttributes, *(double *)&_transcriptAvailabilityDeemphasizedFontAttributes_sCustomTextFontSize__transcriptAvailabilityDeemphasizedFontAttributes != v7)|| (objc_msgSend((id)_transcriptAvailabilityDeemphasizedFontAttributes_sCustomTextFontName__transcriptAvailabilityDeemphasizedFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptAvailabilityDeemphasizedFontAttributes_sCustomTextFontSize__transcriptAvailabilityDeemphasizedFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptAvailabilityFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptAvailabilityDeemphasizedColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptAvailabilityDeemphasizedFontAttributes_sBehavior;
    _transcriptAvailabilityDeemphasizedFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptAvailabilityDeemphasizedFontAttributes_sContentSizeCategory__transcriptAvailabilityDeemphasizedFontAttributes, v3);
    _transcriptAvailabilityDeemphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptAvailabilityDeemphasizedFontAttributes = v4;
    _transcriptAvailabilityDeemphasizedFontAttributes_sIsBoldTextEnabled__transcriptAvailabilityDeemphasizedFontAttributes = v27;
    _transcriptAvailabilityDeemphasizedFontAttributes_sTextFontSize__transcriptAvailabilityDeemphasizedFontAttributes = *(void *)&v6;
    _transcriptAvailabilityDeemphasizedFontAttributes_sCustomTextFontSize__transcriptAvailabilityDeemphasizedFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptAvailabilityDeemphasizedFontAttributes_sCustomTextFontName__transcriptAvailabilityDeemphasizedFontAttributes, obj);
  }
  id v25 = (id)v13[419];

  return v25;
}

- (NSDictionary)transcriptNotifyAnywayFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptNotifyAnywayFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptNotifyAnywayFontAttributes
{
  return 0;
}

- (id)_transcriptNotifyAnywayFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptNotifyAnywayFontAttributes_sContentSizeCategory__transcriptNotifyAnywayFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptNotifyAnywayFontAttributes](self, "ckShouldUpdate_transcriptNotifyAnywayFontAttributes")|| v11|| _transcriptNotifyAnywayFontAttributes_sIsIncreaseContrastEnabled__transcriptNotifyAnywayFontAttributes != v4|| _transcriptNotifyAnywayFontAttributes_sIsBoldTextEnabled__transcriptNotifyAnywayFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptNotifyAnywayFontAttributes_sTextFontSize__transcriptNotifyAnywayFontAttributes, *(double *)&_transcriptNotifyAnywayFontAttributes_sTextFontSize__transcriptNotifyAnywayFontAttributes != v6)|| (uint64_t v12 = _transcriptNotifyAnywayFontAttributes_sCustomTextFontSize__transcriptNotifyAnywayFontAttributes, *(double *)&_transcriptNotifyAnywayFontAttributes_sCustomTextFontSize__transcriptNotifyAnywayFontAttributes != v7)|| (objc_msgSend((id)_transcriptNotifyAnywayFontAttributes_sCustomTextFontName__transcriptNotifyAnywayFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptNotifyAnywayFontAttributes_sCustomTextFontSize__transcriptNotifyAnywayFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptNotifyAnywayFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptAvailabilityColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptNotifyAnywayFontAttributes_sBehavior;
    _transcriptNotifyAnywayFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptNotifyAnywayFontAttributes_sContentSizeCategory__transcriptNotifyAnywayFontAttributes, v3);
    _transcriptNotifyAnywayFontAttributes_sIsIncreaseContrastEnabled__transcriptNotifyAnywayFontAttributes = v4;
    _transcriptNotifyAnywayFontAttributes_sIsBoldTextEnabled__transcriptNotifyAnywayFontAttributes = v27;
    _transcriptNotifyAnywayFontAttributes_sTextFontSize__transcriptNotifyAnywayFontAttributes = *(void *)&v6;
    _transcriptNotifyAnywayFontAttributes_sCustomTextFontSize__transcriptNotifyAnywayFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptNotifyAnywayFontAttributes_sCustomTextFontName__transcriptNotifyAnywayFontAttributes, obj);
  }
  id v25 = (id)v13[422];

  return v25;
}

- (NSDictionary)transcriptEmphasizedFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptEmphasizedFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptEmphasizedFontAttributes
{
  return 0;
}

- (id)_transcriptEmphasizedFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptEmphasizedFontAttributes_sContentSizeCategory__transcriptEmphasizedFontAttributes, v3);
  uint64_t v13 = &previewPrewarmQueue_once;
  if (-[CKUIBehavior ckShouldUpdate_transcriptEmphasizedFontAttributes](self, "ckShouldUpdate_transcriptEmphasizedFontAttributes")|| v11|| _transcriptEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptEmphasizedFontAttributes != v4|| _transcriptEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptEmphasizedFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptEmphasizedFontAttributes_sTextFontSize__transcriptEmphasizedFontAttributes, *(double *)&_transcriptEmphasizedFontAttributes_sTextFontSize__transcriptEmphasizedFontAttributes != v6)|| (uint64_t v12 = _transcriptEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmphasizedFontAttributes, *(double *)&_transcriptEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmphasizedFontAttributes != v7)|| (objc_msgSend((id)_transcriptEmphasizedFontAttributes_sCustomTextFontName__transcriptEmphasizedFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmphasizedFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptBoldFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &previewPrewarmQueue_once;
    double v24 = (void *)_transcriptEmphasizedFontAttributes_sBehavior;
    _transcriptEmphasizedFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptEmphasizedFontAttributes_sContentSizeCategory__transcriptEmphasizedFontAttributes, v3);
    _transcriptEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptEmphasizedFontAttributes = v4;
    _transcriptEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptEmphasizedFontAttributes = v27;
    _transcriptEmphasizedFontAttributes_sTextFontSize__transcriptEmphasizedFontAttributes = *(void *)&v6;
    _transcriptEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmphasizedFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptEmphasizedFontAttributes_sCustomTextFontName__transcriptEmphasizedFontAttributes, obj);
  }
  id v25 = (id)v13[318];

  return v25;
}

- (NSDictionary)transcriptEmergencyEmphasizedFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptEmergencyEmphasizedFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptEmergencyEmphasizedFontAttributes
{
  return 0;
}

- (id)_transcriptEmergencyEmphasizedFontAttributes
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptEmergencyEmphasizedFontAttributes_sContentSizeCategory__transcriptEmergencyEmphasizedFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptEmergencyEmphasizedFontAttributes](self, "ckShouldUpdate_transcriptEmergencyEmphasizedFontAttributes")|| v11|| _transcriptEmergencyEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptEmergencyEmphasizedFontAttributes != v4|| _transcriptEmergencyEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptEmergencyEmphasizedFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptEmergencyEmphasizedFontAttributes_sTextFontSize__transcriptEmergencyEmphasizedFontAttributes, *(double *)&_transcriptEmergencyEmphasizedFontAttributes_sTextFontSize__transcriptEmergencyEmphasizedFontAttributes != v6)|| (uint64_t v12 = _transcriptEmergencyEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmergencyEmphasizedFontAttributes, *(double *)&_transcriptEmergencyEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmergencyEmphasizedFontAttributes != v7)|| (objc_msgSend((id)_transcriptEmergencyEmphasizedFontAttributes_sCustomTextFontName__transcriptEmergencyEmphasizedFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptEmergencyEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmergencyEmphasizedFontAttributes, v3) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12, obj);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v23[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptLightFont];
    v24[0] = v16;
    v23[1] = *MEMORY[0x1E4FB0700];
    double v17 = [MEMORY[0x1E4F428B8] redColor];
    v23[2] = *MEMORY[0x1E4FB0738];
    v24[1] = v17;
    v24[2] = v15;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    long long v19 = (void *)_transcriptEmergencyEmphasizedFontAttributes_sBehavior;
    _transcriptEmergencyEmphasizedFontAttributes_sBehavior = v18;

    objc_storeStrong((id *)&_transcriptEmergencyEmphasizedFontAttributes_sContentSizeCategory__transcriptEmergencyEmphasizedFontAttributes, obj);
    _transcriptEmergencyEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptEmergencyEmphasizedFontAttributes = v4;
    _transcriptEmergencyEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptEmergencyEmphasizedFontAttributes = IsBoldTextEnabled;
    _transcriptEmergencyEmphasizedFontAttributes_sTextFontSize__transcriptEmergencyEmphasizedFontAttributes = *(void *)&v6;
    _transcriptEmergencyEmphasizedFontAttributes_sCustomTextFontSize__transcriptEmergencyEmphasizedFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptEmergencyEmphasizedFontAttributes_sCustomTextFontName__transcriptEmergencyEmphasizedFontAttributes, v9);
  }
  id v20 = (id)v13[425];

  return v20;
}

- (NSDictionary)transcriptGroupModificationErrorEmphasizedFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptGroupModificationErrorEmphasizedFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptGroupModificationErrorEmphasizedFontAttributes
{
  return 0;
}

- (id)_transcriptGroupModificationErrorEmphasizedFontAttributes
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptGroupModificationErrorEmphasizedFontAttributes_sContentSizeCategory__transcriptGroupModificationErrorEmphasizedFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptGroupModificationErrorEmphasizedFontAttributes](self, "ckShouldUpdate_transcriptGroupModificationErrorEmphasizedFontAttributes")|| v11|| _transcriptGroupModificationErrorEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptGroupModificationErrorEmphasizedFontAttributes != v4|| _transcriptGroupModificationErrorEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptGroupModificationErrorEmphasizedFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptGroupModificationErrorEmphasizedFontAttributes_sTextFontSize__transcriptGroupModificationErrorEmphasizedFontAttributes, *(double *)&_transcriptGroupModificationErrorEmphasizedFontAttributes_sTextFontSize__transcriptGroupModificationErrorEmphasizedFontAttributes != v6)|| (uint64_t v12 = _transcriptGroupModificationErrorEmphasizedFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorEmphasizedFontAttributes, *(double *)&_transcriptGroupModificationErrorEmphasizedFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorEmphasizedFontAttributes != v7)|| (objc_msgSend((id)_transcriptGroupModificationErrorEmphasizedFontAttributes_sCustomTextFontName__transcriptGroupModificationErrorEmphasizedFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptGroupModificationErrorEmphasizedFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorEmphasizedFontAttributes, v3) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12, obj);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v23[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptBoldFont];
    v24[0] = v16;
    v23[1] = *MEMORY[0x1E4FB0700];
    double v17 = [MEMORY[0x1E4F428B8] systemRedColor];
    v23[2] = *MEMORY[0x1E4FB0738];
    v24[1] = v17;
    v24[2] = v15;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    long long v19 = (void *)_transcriptGroupModificationErrorEmphasizedFontAttributes_sBehavior;
    _transcriptGroupModificationErrorEmphasizedFontAttributes_sBehavior = v18;

    objc_storeStrong((id *)&_transcriptGroupModificationErrorEmphasizedFontAttributes_sContentSizeCategory__transcriptGroupModificationErrorEmphasizedFontAttributes, obj);
    _transcriptGroupModificationErrorEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptGroupModificationErrorEmphasizedFontAttributes = v4;
    _transcriptGroupModificationErrorEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptGroupModificationErrorEmphasizedFontAttributes = IsBoldTextEnabled;
    _transcriptGroupModificationErrorEmphasizedFontAttributes_sTextFontSize__transcriptGroupModificationErrorEmphasizedFontAttributes = *(void *)&v6;
    _transcriptGroupModificationErrorEmphasizedFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorEmphasizedFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptGroupModificationErrorEmphasizedFontAttributes_sCustomTextFontName__transcriptGroupModificationErrorEmphasizedFontAttributes, v9);
  }
  id v20 = (id)v13[428];

  return v20;
}

- (NSDictionary)transcriptGroupModificationErrorRegularFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptGroupModificationErrorRegularFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptGroupModificationErrorRegularFontAttributes
{
  return 0;
}

- (id)_transcriptGroupModificationErrorRegularFontAttributes
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptGroupModificationErrorRegularFontAttributes_sContentSizeCategory__transcriptGroupModificationErrorRegularFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptGroupModificationErrorRegularFontAttributes](self, "ckShouldUpdate_transcriptGroupModificationErrorRegularFontAttributes")|| v11|| _transcriptGroupModificationErrorRegularFontAttributes_sIsIncreaseContrastEnabled__transcriptGroupModificationErrorRegularFontAttributes != v4|| _transcriptGroupModificationErrorRegularFontAttributes_sIsBoldTextEnabled__transcriptGroupModificationErrorRegularFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptGroupModificationErrorRegularFontAttributes_sTextFontSize__transcriptGroupModificationErrorRegularFontAttributes, *(double *)&_transcriptGroupModificationErrorRegularFontAttributes_sTextFontSize__transcriptGroupModificationErrorRegularFontAttributes != v6)|| (uint64_t v12 = _transcriptGroupModificationErrorRegularFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorRegularFontAttributes, *(double *)&_transcriptGroupModificationErrorRegularFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorRegularFontAttributes != v7)|| (objc_msgSend((id)_transcriptGroupModificationErrorRegularFontAttributes_sCustomTextFontName__transcriptGroupModificationErrorRegularFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptGroupModificationErrorRegularFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorRegularFontAttributes, v3) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12, obj);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v23[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptLightFont];
    v24[0] = v16;
    v23[1] = *MEMORY[0x1E4FB0700];
    double v17 = [MEMORY[0x1E4F428B8] systemRedColor];
    v23[2] = *MEMORY[0x1E4FB0738];
    v24[1] = v17;
    v24[2] = v15;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    long long v19 = (void *)_transcriptGroupModificationErrorRegularFontAttributes_sBehavior;
    _transcriptGroupModificationErrorRegularFontAttributes_sBehavior = v18;

    objc_storeStrong((id *)&_transcriptGroupModificationErrorRegularFontAttributes_sContentSizeCategory__transcriptGroupModificationErrorRegularFontAttributes, obj);
    _transcriptGroupModificationErrorRegularFontAttributes_sIsIncreaseContrastEnabled__transcriptGroupModificationErrorRegularFontAttributes = v4;
    _transcriptGroupModificationErrorRegularFontAttributes_sIsBoldTextEnabled__transcriptGroupModificationErrorRegularFontAttributes = IsBoldTextEnabled;
    _transcriptGroupModificationErrorRegularFontAttributes_sTextFontSize__transcriptGroupModificationErrorRegularFontAttributes = *(void *)&v6;
    _transcriptGroupModificationErrorRegularFontAttributes_sCustomTextFontSize__transcriptGroupModificationErrorRegularFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptGroupModificationErrorRegularFontAttributes_sCustomTextFontName__transcriptGroupModificationErrorRegularFontAttributes, v9);
  }
  id v20 = (id)v13[431];

  return v20;
}

- (NSDictionary)transcriptiMessageEmphasizedFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptiMessageEmphasizedFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptiMessageEmphasizedFontAttributes
{
  return 0;
}

- (id)_transcriptiMessageEmphasizedFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptiMessageEmphasizedFontAttributes_sContentSizeCategory__transcriptiMessageEmphasizedFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptiMessageEmphasizedFontAttributes](self, "ckShouldUpdate_transcriptiMessageEmphasizedFontAttributes")|| v11|| _transcriptiMessageEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptiMessageEmphasizedFontAttributes != v4|| _transcriptiMessageEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptiMessageEmphasizedFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptiMessageEmphasizedFontAttributes_sTextFontSize__transcriptiMessageEmphasizedFontAttributes, *(double *)&_transcriptiMessageEmphasizedFontAttributes_sTextFontSize__transcriptiMessageEmphasizedFontAttributes != v6)|| (uint64_t v12 = _transcriptiMessageEmphasizedFontAttributes_sCustomTextFontSize__transcriptiMessageEmphasizedFontAttributes, *(double *)&_transcriptiMessageEmphasizedFontAttributes_sCustomTextFontSize__transcriptiMessageEmphasizedFontAttributes != v7)|| (objc_msgSend((id)_transcriptiMessageEmphasizedFontAttributes_sCustomTextFontName__transcriptiMessageEmphasizedFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptiMessageEmphasizedFontAttributes_sCustomTextFontSize__transcriptiMessageEmphasizedFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptLightFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 recipientTextColorForColorType:1];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptiMessageEmphasizedFontAttributes_sBehavior;
    _transcriptiMessageEmphasizedFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptiMessageEmphasizedFontAttributes_sContentSizeCategory__transcriptiMessageEmphasizedFontAttributes, v3);
    _transcriptiMessageEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptiMessageEmphasizedFontAttributes = v4;
    _transcriptiMessageEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptiMessageEmphasizedFontAttributes = v27;
    _transcriptiMessageEmphasizedFontAttributes_sTextFontSize__transcriptiMessageEmphasizedFontAttributes = *(void *)&v6;
    _transcriptiMessageEmphasizedFontAttributes_sCustomTextFontSize__transcriptiMessageEmphasizedFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptiMessageEmphasizedFontAttributes_sCustomTextFontName__transcriptiMessageEmphasizedFontAttributes, obj);
  }
  id v25 = (id)v13[434];

  return v25;
}

- (NSDictionary)transcriptSMSEmphasizedFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptSMSEmphasizedFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptSMSEmphasizedFontAttributes
{
  return 0;
}

- (id)_transcriptSMSEmphasizedFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptSMSEmphasizedFontAttributes_sContentSizeCategory__transcriptSMSEmphasizedFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptSMSEmphasizedFontAttributes](self, "ckShouldUpdate_transcriptSMSEmphasizedFontAttributes")|| v11|| _transcriptSMSEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptSMSEmphasizedFontAttributes != v4|| _transcriptSMSEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptSMSEmphasizedFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptSMSEmphasizedFontAttributes_sTextFontSize__transcriptSMSEmphasizedFontAttributes, *(double *)&_transcriptSMSEmphasizedFontAttributes_sTextFontSize__transcriptSMSEmphasizedFontAttributes != v6)|| (uint64_t v12 = _transcriptSMSEmphasizedFontAttributes_sCustomTextFontSize__transcriptSMSEmphasizedFontAttributes, *(double *)&_transcriptSMSEmphasizedFontAttributes_sCustomTextFontSize__transcriptSMSEmphasizedFontAttributes != v7)|| (objc_msgSend((id)_transcriptSMSEmphasizedFontAttributes_sCustomTextFontName__transcriptSMSEmphasizedFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptSMSEmphasizedFontAttributes_sCustomTextFontSize__transcriptSMSEmphasizedFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptLightFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 recipientTextColorForColorType:0];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptSMSEmphasizedFontAttributes_sBehavior;
    _transcriptSMSEmphasizedFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptSMSEmphasizedFontAttributes_sContentSizeCategory__transcriptSMSEmphasizedFontAttributes, v3);
    _transcriptSMSEmphasizedFontAttributes_sIsIncreaseContrastEnabled__transcriptSMSEmphasizedFontAttributes = v4;
    _transcriptSMSEmphasizedFontAttributes_sIsBoldTextEnabled__transcriptSMSEmphasizedFontAttributes = v27;
    _transcriptSMSEmphasizedFontAttributes_sTextFontSize__transcriptSMSEmphasizedFontAttributes = *(void *)&v6;
    _transcriptSMSEmphasizedFontAttributes_sCustomTextFontSize__transcriptSMSEmphasizedFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptSMSEmphasizedFontAttributes_sCustomTextFontName__transcriptSMSEmphasizedFontAttributes, obj);
  }
  id v25 = (id)v13[437];

  return v25;
}

- (NSDictionary)transcriptEmphasizedPreferredFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptEmphasizedPreferredFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptEmphasizedPreferredFontAttributes
{
  return 0;
}

- (id)_transcriptEmphasizedPreferredFontAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptEmphasizedPreferredFontAttributes_sContentSizeCategory__transcriptEmphasizedPreferredFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptEmphasizedPreferredFontAttributes](self, "ckShouldUpdate_transcriptEmphasizedPreferredFontAttributes")|| v11|| _transcriptEmphasizedPreferredFontAttributes_sIsIncreaseContrastEnabled__transcriptEmphasizedPreferredFontAttributes != v4|| _transcriptEmphasizedPreferredFontAttributes_sIsBoldTextEnabled__transcriptEmphasizedPreferredFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptEmphasizedPreferredFontAttributes_sTextFontSize__transcriptEmphasizedPreferredFontAttributes, *(double *)&_transcriptEmphasizedPreferredFontAttributes_sTextFontSize__transcriptEmphasizedPreferredFontAttributes != v6)|| (uint64_t v12 = _transcriptEmphasizedPreferredFontAttributes_sCustomTextFontSize__transcriptEmphasizedPreferredFontAttributes, *(double *)&_transcriptEmphasizedPreferredFontAttributes_sCustomTextFontSize__transcriptEmphasizedPreferredFontAttributes != v7)|| (objc_msgSend((id)_transcriptEmphasizedPreferredFontAttributes_sCustomTextFontName__transcriptEmphasizedPreferredFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptEmphasizedPreferredFontAttributes_sCustomTextFontSize__transcriptEmphasizedPreferredFontAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptBoldPreferredFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v24 = (void *)_transcriptEmphasizedPreferredFontAttributes_sBehavior;
    _transcriptEmphasizedPreferredFontAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_transcriptEmphasizedPreferredFontAttributes_sContentSizeCategory__transcriptEmphasizedPreferredFontAttributes, v3);
    _transcriptEmphasizedPreferredFontAttributes_sIsIncreaseContrastEnabled__transcriptEmphasizedPreferredFontAttributes = v4;
    _transcriptEmphasizedPreferredFontAttributes_sIsBoldTextEnabled__transcriptEmphasizedPreferredFontAttributes = v27;
    _transcriptEmphasizedPreferredFontAttributes_sTextFontSize__transcriptEmphasizedPreferredFontAttributes = *(void *)&v6;
    _transcriptEmphasizedPreferredFontAttributes_sCustomTextFontSize__transcriptEmphasizedPreferredFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptEmphasizedPreferredFontAttributes_sCustomTextFontName__transcriptEmphasizedPreferredFontAttributes, obj);
  }
  id v25 = (id)v13[440];

  return v25;
}

- (NSDictionary)transcriptErrorStampPreferredFontAttributes
{
  double v2 = [(CKUIBehavior *)self _transcriptErrorStampPreferredFontAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_transcriptErrorStampPreferredFontAttributes
{
  return 0;
}

- (id)_transcriptErrorStampPreferredFontAttributes
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_transcriptErrorStampPreferredFontAttributes_sContentSizeCategory__transcriptErrorStampPreferredFontAttributes, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdate_transcriptErrorStampPreferredFontAttributes](self, "ckShouldUpdate_transcriptErrorStampPreferredFontAttributes")|| v11|| _transcriptErrorStampPreferredFontAttributes_sIsIncreaseContrastEnabled__transcriptErrorStampPreferredFontAttributes != v4|| _transcriptErrorStampPreferredFontAttributes_sIsBoldTextEnabled__transcriptErrorStampPreferredFontAttributes != IsBoldTextEnabled|| (uint64_t v12 = _transcriptErrorStampPreferredFontAttributes_sTextFontSize__transcriptErrorStampPreferredFontAttributes, *(double *)&_transcriptErrorStampPreferredFontAttributes_sTextFontSize__transcriptErrorStampPreferredFontAttributes != v6)|| (uint64_t v12 = _transcriptErrorStampPreferredFontAttributes_sCustomTextFontSize__transcriptErrorStampPreferredFontAttributes, *(double *)&_transcriptErrorStampPreferredFontAttributes_sCustomTextFontSize__transcriptErrorStampPreferredFontAttributes != v7)|| (objc_msgSend((id)_transcriptErrorStampPreferredFontAttributes_sCustomTextFontName__transcriptErrorStampPreferredFontAttributes, "isEqualToString:", v10, *(double *)&_transcriptErrorStampPreferredFontAttributes_sCustomTextFontSize__transcriptErrorStampPreferredFontAttributes, v3) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12, obj);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:1];
    v23[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptErrorStampPreferredFont];
    v24[0] = v16;
    v23[1] = *MEMORY[0x1E4FB0700];
    double v17 = [MEMORY[0x1E4F428B8] systemRedColor];
    v23[2] = *MEMORY[0x1E4FB0738];
    v24[1] = v17;
    v24[2] = v15;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    long long v19 = (void *)_transcriptErrorStampPreferredFontAttributes_sBehavior;
    _transcriptErrorStampPreferredFontAttributes_sBehavior = v18;

    objc_storeStrong((id *)&_transcriptErrorStampPreferredFontAttributes_sContentSizeCategory__transcriptErrorStampPreferredFontAttributes, obj);
    _transcriptErrorStampPreferredFontAttributes_sIsIncreaseContrastEnabled__transcriptErrorStampPreferredFontAttributes = v4;
    _transcriptErrorStampPreferredFontAttributes_sIsBoldTextEnabled__transcriptErrorStampPreferredFontAttributes = IsBoldTextEnabled;
    _transcriptErrorStampPreferredFontAttributes_sTextFontSize__transcriptErrorStampPreferredFontAttributes = *(void *)&v6;
    _transcriptErrorStampPreferredFontAttributes_sCustomTextFontSize__transcriptErrorStampPreferredFontAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_transcriptErrorStampPreferredFontAttributes_sCustomTextFontName__transcriptErrorStampPreferredFontAttributes, v9);
  }
  id v20 = (id)v13[443];

  return v20;
}

- (NSDictionary)drawerTranscriptTextAttributes
{
  double v2 = [(CKUIBehavior *)self _drawerTranscriptTextAttributes];
  double v3 = +[CKPrintController sharedInstance];
  int v4 = [v3 isPrinting];

  if (v4)
  {
    uint64_t v5 = +[CKPrintController printAttributes:v2];

    double v2 = (void *)v5;
  }

  return (NSDictionary *)v2;
}

- (BOOL)ckShouldUpdate_drawerTranscriptTextAttributes
{
  return 0;
}

- (id)_drawerTranscriptTextAttributes
{
  v30[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)_drawerTranscriptTextAttributes_sContentSizeCategory__drawerTranscriptTextAttributes, v3);
  uint64_t v13 = &previewPrewarmQueue_once;
  if (-[CKUIBehavior ckShouldUpdate_drawerTranscriptTextAttributes](self, "ckShouldUpdate_drawerTranscriptTextAttributes")|| v11|| _drawerTranscriptTextAttributes_sIsIncreaseContrastEnabled__drawerTranscriptTextAttributes != v4|| _drawerTranscriptTextAttributes_sIsBoldTextEnabled__drawerTranscriptTextAttributes != IsBoldTextEnabled|| (uint64_t v12 = _drawerTranscriptTextAttributes_sTextFontSize__drawerTranscriptTextAttributes, *(double *)&_drawerTranscriptTextAttributes_sTextFontSize__drawerTranscriptTextAttributes != v6)|| (uint64_t v12 = _drawerTranscriptTextAttributes_sCustomTextFontSize__drawerTranscriptTextAttributes, *(double *)&_drawerTranscriptTextAttributes_sCustomTextFontSize__drawerTranscriptTextAttributes != v7)|| (objc_msgSend((id)_drawerTranscriptTextAttributes_sCustomTextFontName__drawerTranscriptTextAttributes, "isEqualToString:", v10, *(double *)&_drawerTranscriptTextAttributes_sCustomTextFontSize__drawerTranscriptTextAttributes) & 1) == 0)
  {
    double v14 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v12);
    uint64_t v15 = (void *)[v14 mutableCopy];

    [v15 setAlignment:2];
    [v15 setLineBreakMode:2];
    v29[0] = *MEMORY[0x1E4FB06F8];
    double v16 = [(CKUIBehavior *)self transcriptDrawerFont];
    v30[0] = v16;
    v29[1] = *MEMORY[0x1E4FB0700];
    double v17 = +[CKUIBehavior sharedBehaviors];
    uint64_t v18 = [v17 theme];
    [v18 transcriptTextColor];
    obj = v9;
    long long v19 = v8;
    id v20 = v3;
    v22 = double v21 = v10;
    v29[2] = *MEMORY[0x1E4FB0738];
    v30[1] = v22;
    v30[2] = v15;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
    uint64_t v23 = v27 = IsBoldTextEnabled;

    NSComparisonResult v10 = v21;
    double v3 = v20;
    double v8 = v19;

    uint64_t v13 = &previewPrewarmQueue_once;
    double v24 = (void *)_drawerTranscriptTextAttributes_sBehavior;
    _drawerTranscriptTextAttributes_sBehavior = v23;

    objc_storeStrong((id *)&_drawerTranscriptTextAttributes_sContentSizeCategory__drawerTranscriptTextAttributes, v3);
    _drawerTranscriptTextAttributes_sIsIncreaseContrastEnabled__drawerTranscriptTextAttributes = v4;
    _drawerTranscriptTextAttributes_sIsBoldTextEnabled__drawerTranscriptTextAttributes = v27;
    _drawerTranscriptTextAttributes_sTextFontSize__drawerTranscriptTextAttributes = *(void *)&v6;
    _drawerTranscriptTextAttributes_sCustomTextFontSize__drawerTranscriptTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&_drawerTranscriptTextAttributes_sCustomTextFontName__drawerTranscriptTextAttributes, obj);
  }
  id v25 = (id)v13[307];

  return v25;
}

- (BOOL)ckShouldUpdatephishingWarningTextAttributes
{
  return 0;
}

- (NSDictionary)phishingWarningTextAttributes
{
  v25[3] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  obj = v3;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)phishingWarningTextAttributes_sContentSizeCategory_phishingWarningTextAttributes, v3);
  BOOL v12 = [(CKUIBehavior *)self ckShouldUpdatephishingWarningTextAttributes];
  double v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (v12
    || v11
    || phishingWarningTextAttributes_sIsIncreaseContrastEnabled_phishingWarningTextAttributes != v4
    || phishingWarningTextAttributes_sIsBoldTextEnabled_phishingWarningTextAttributes != IsBoldTextEnabled
    || (uint64_t v13 = phishingWarningTextAttributes_sTextFontSize_phishingWarningTextAttributes,
        *(double *)&phishingWarningTextAttributes_sTextFontSize_phishingWarningTextAttributes != v6)
    || (uint64_t v13 = phishingWarningTextAttributes_sCustomTextFontSize_phishingWarningTextAttributes,
        *(double *)&phishingWarningTextAttributes_sCustomTextFontSize_phishingWarningTextAttributes != v7)
    || (objc_msgSend((id)phishingWarningTextAttributes_sCustomTextFontName_phishingWarningTextAttributes, "isEqualToString:", v10, *(double *)&phishingWarningTextAttributes_sCustomTextFontSize_phishingWarningTextAttributes, v3) & 1) == 0)
  {
    uint64_t v15 = objc_msgSend(MEMORY[0x1E4FB0850], "defaultParagraphStyle", *(double *)&v13, obj);
    double v16 = (void *)[v15 mutableCopy];

    [v16 setAlignment:1];
    v24[0] = *MEMORY[0x1E4FB06F8];
    double v17 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880]);
    v25[0] = v17;
    v24[1] = *MEMORY[0x1E4FB0700];
    uint64_t v18 = [MEMORY[0x1E4F428B8] systemRedColor];
    v24[2] = *MEMORY[0x1E4FB0738];
    v25[1] = v18;
    v25[2] = v16;
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:3];

    double v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    id v20 = (void *)phishingWarningTextAttributes_sBehavior;
    phishingWarningTextAttributes_sBehavior = v19;

    objc_storeStrong((id *)&phishingWarningTextAttributes_sContentSizeCategory_phishingWarningTextAttributes, obj);
    phishingWarningTextAttributes_sIsIncreaseContrastEnabled_phishingWarningTextAttributes = v4;
    phishingWarningTextAttributes_sIsBoldTextEnabled_phishingWarningTextAttributes = IsBoldTextEnabled;
    phishingWarningTextAttributes_sTextFontSize_phishingWarningTextAttributes = *(void *)&v6;
    phishingWarningTextAttributes_sCustomTextFontSize_phishingWarningTextAttributes = *(void *)&v7;
    objc_storeStrong((id *)&phishingWarningTextAttributes_sCustomTextFontName_phishingWarningTextAttributes, v9);
  }
  double v21 = (NSDictionary *)(id)v14[447];

  return v21;
}

- (UIEdgeInsets)phishingWarningEdgeInsets
{
  double v2 = 10.0;
  double v3 = 5.0;
  double v4 = 20.0;
  double v5 = 5.0;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

- (BOOL)ckShouldUpdatetranscriptJunkHeaderTitleFont
{
  return 0;
}

- (UIFont)transcriptJunkHeaderTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptJunkHeaderTitleFont_sContentSizeCategory_transcriptJunkHeaderTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetranscriptJunkHeaderTitleFont]
    || v11
    || transcriptJunkHeaderTitleFont_sIsIncreaseContrastEnabled_transcriptJunkHeaderTitleFont != v4
    || transcriptJunkHeaderTitleFont_sIsBoldTextEnabled_transcriptJunkHeaderTitleFont != IsBoldTextEnabled
    || (uint64_t v12 = transcriptJunkHeaderTitleFont_sTextFontSize_transcriptJunkHeaderTitleFont,
        *(double *)&transcriptJunkHeaderTitleFont_sTextFontSize_transcriptJunkHeaderTitleFont != v6)
    || (uint64_t v12 = transcriptJunkHeaderTitleFont_sCustomTextFontSize_transcriptJunkHeaderTitleFont,
        *(double *)&transcriptJunkHeaderTitleFont_sCustomTextFontSize_transcriptJunkHeaderTitleFont != v7)
    || (objc_msgSend((id)transcriptJunkHeaderTitleFont_sCustomTextFontName_transcriptJunkHeaderTitleFont, "isEqualToString:", v10, *(double *)&transcriptJunkHeaderTitleFont_sCustomTextFontSize_transcriptJunkHeaderTitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F43890], 2, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    uint64_t v15 = (void *)transcriptJunkHeaderTitleFont_sBehavior;
    transcriptJunkHeaderTitleFont_sBehavior = v14;

    objc_storeStrong((id *)&transcriptJunkHeaderTitleFont_sContentSizeCategory_transcriptJunkHeaderTitleFont, v3);
    transcriptJunkHeaderTitleFont_sIsIncreaseContrastEnabled_transcriptJunkHeaderTitleFont = v4;
    transcriptJunkHeaderTitleFont_sIsBoldTextEnabled_transcriptJunkHeaderTitleFont = IsBoldTextEnabled;
    transcriptJunkHeaderTitleFont_sTextFontSize_transcriptJunkHeaderTitleFont = *(void *)&v6;
    transcriptJunkHeaderTitleFont_sCustomTextFontSize_transcriptJunkHeaderTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptJunkHeaderTitleFont_sCustomTextFontName_transcriptJunkHeaderTitleFont, v9);
  }
  double v16 = (UIFont *)(id)transcriptJunkHeaderTitleFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatetranscriptJunkHeaderButtonFont
{
  return 0;
}

- (UIFont)transcriptJunkHeaderButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)transcriptJunkHeaderButtonFont_sContentSizeCategory_transcriptJunkHeaderButtonFont, v3);
  if (-[CKUIBehavior ckShouldUpdatetranscriptJunkHeaderButtonFont](self, "ckShouldUpdatetranscriptJunkHeaderButtonFont")|| v11|| transcriptJunkHeaderButtonFont_sIsIncreaseContrastEnabled_transcriptJunkHeaderButtonFont != v4|| transcriptJunkHeaderButtonFont_sIsBoldTextEnabled_transcriptJunkHeaderButtonFont != IsBoldTextEnabled|| (uint64_t v12 = transcriptJunkHeaderButtonFont_sTextFontSize_transcriptJunkHeaderButtonFont, *(double *)&transcriptJunkHeaderButtonFont_sTextFontSize_transcriptJunkHeaderButtonFont != v6)|| (uint64_t v12 = transcriptJunkHeaderButtonFont_sCustomTextFontSize_transcriptJunkHeaderButtonFont, *(double *)&transcriptJunkHeaderButtonFont_sCustomTextFontSize_transcriptJunkHeaderButtonFont != v7)|| (objc_msgSend((id)transcriptJunkHeaderButtonFont_sCustomTextFontName_transcriptJunkHeaderButtonFont, "isEqualToString:", v10, *(double *)&transcriptJunkHeaderButtonFont_sCustomTextFontSize_transcriptJunkHeaderButtonFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    uint64_t v14 = (void *)transcriptJunkHeaderButtonFont_sBehavior;
    transcriptJunkHeaderButtonFont_sBehavior = v13;

    objc_storeStrong((id *)&transcriptJunkHeaderButtonFont_sContentSizeCategory_transcriptJunkHeaderButtonFont, v3);
    transcriptJunkHeaderButtonFont_sIsIncreaseContrastEnabled_transcriptJunkHeaderButtonFont = v4;
    transcriptJunkHeaderButtonFont_sIsBoldTextEnabled_transcriptJunkHeaderButtonFont = IsBoldTextEnabled;
    transcriptJunkHeaderButtonFont_sTextFontSize_transcriptJunkHeaderButtonFont = *(void *)&v6;
    transcriptJunkHeaderButtonFont_sCustomTextFontSize_transcriptJunkHeaderButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&transcriptJunkHeaderButtonFont_sCustomTextFontName_transcriptJunkHeaderButtonFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)transcriptJunkHeaderButtonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateencryptedServiceIcon
{
  return 0;
}

- (UIImage)encryptedServiceIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)encryptedServiceIcon_sContentSizeCategory_encryptedServiceIcon, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if ([(CKUIBehavior *)self ckShouldUpdateencryptedServiceIcon]
    || v11
    || encryptedServiceIcon_sIsIncreaseContrastEnabled_encryptedServiceIcon != v4
    || encryptedServiceIcon_sIsBoldTextEnabled_encryptedServiceIcon != IsBoldTextEnabled
    || (uint64_t v12 = encryptedServiceIcon_sTextFontSize_encryptedServiceIcon,
        *(double *)&encryptedServiceIcon_sTextFontSize_encryptedServiceIcon != v6)
    || (uint64_t v12 = encryptedServiceIcon_sCustomTextFontSize_encryptedServiceIcon,
        *(double *)&encryptedServiceIcon_sCustomTextFontSize_encryptedServiceIcon != v7)
    || (objc_msgSend((id)encryptedServiceIcon_sCustomTextFontName_encryptedServiceIcon, "isEqualToString:", v10, *(double *)&encryptedServiceIcon_sCustomTextFontSize_encryptedServiceIcon) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"lock.fill", *(double *)&v12);
    uint64_t v15 = (void *)MEMORY[0x1E4F42A98];
    double v16 = [(CKUIBehavior *)self transcriptLightFont];
    double v17 = [v15 configurationWithFont:v16];

    uint64_t v18 = [v14 imageWithSymbolConfiguration:v17];

    uint64_t v19 = [MEMORY[0x1E4F428B8] ckColorNamed:@"CKBlueBalloonColor1"];
    uint64_t v20 = [v18 imageWithTintColor:v19];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v21 = (void *)encryptedServiceIcon_sBehavior;
    encryptedServiceIcon_sBehavior = v20;

    objc_storeStrong((id *)&encryptedServiceIcon_sContentSizeCategory_encryptedServiceIcon, v3);
    encryptedServiceIcon_sIsIncreaseContrastEnabled_encryptedServiceIcon = v4;
    encryptedServiceIcon_sIsBoldTextEnabled_encryptedServiceIcon = IsBoldTextEnabled;
    encryptedServiceIcon_sTextFontSize_encryptedServiceIcon = *(void *)&v6;
    encryptedServiceIcon_sCustomTextFontSize_encryptedServiceIcon = *(void *)&v7;
    objc_storeStrong((id *)&encryptedServiceIcon_sCustomTextFontName_encryptedServiceIcon, v9);
  }
  double v22 = (UIImage *)(id)v13[456];

  return v22;
}

- (BOOL)ckShouldUpdateunencryptedServiceIcon
{
  return 0;
}

- (UIImage)unencryptedServiceIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)unencryptedServiceIcon_sContentSizeCategory_unencryptedServiceIcon, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if ([(CKUIBehavior *)self ckShouldUpdateunencryptedServiceIcon]
    || v11
    || unencryptedServiceIcon_sIsIncreaseContrastEnabled_unencryptedServiceIcon != v4
    || unencryptedServiceIcon_sIsBoldTextEnabled_unencryptedServiceIcon != IsBoldTextEnabled
    || (uint64_t v12 = unencryptedServiceIcon_sTextFontSize_unencryptedServiceIcon,
        *(double *)&unencryptedServiceIcon_sTextFontSize_unencryptedServiceIcon != v6)
    || (uint64_t v12 = unencryptedServiceIcon_sCustomTextFontSize_unencryptedServiceIcon,
        *(double *)&unencryptedServiceIcon_sCustomTextFontSize_unencryptedServiceIcon != v7)
    || (objc_msgSend((id)unencryptedServiceIcon_sCustomTextFontName_unencryptedServiceIcon, "isEqualToString:", v10, *(double *)&unencryptedServiceIcon_sCustomTextFontSize_unencryptedServiceIcon) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"lock.slash.fill", *(double *)&v12);
    uint64_t v15 = (void *)MEMORY[0x1E4F42A98];
    double v16 = [(CKUIBehavior *)self transcriptLightFont];
    double v17 = [v15 configurationWithFont:v16];

    uint64_t v18 = [v14 imageWithSymbolConfiguration:v17];

    uint64_t v19 = [MEMORY[0x1E4F428B8] ckColorNamed:@"CKGreenBalloonColor1"];
    uint64_t v20 = [v18 imageWithTintColor:v19];

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v21 = (void *)unencryptedServiceIcon_sBehavior;
    unencryptedServiceIcon_sBehavior = v20;

    objc_storeStrong((id *)&unencryptedServiceIcon_sContentSizeCategory_unencryptedServiceIcon, v3);
    unencryptedServiceIcon_sIsIncreaseContrastEnabled_unencryptedServiceIcon = v4;
    unencryptedServiceIcon_sIsBoldTextEnabled_unencryptedServiceIcon = IsBoldTextEnabled;
    unencryptedServiceIcon_sTextFontSize_unencryptedServiceIcon = *(void *)&v6;
    unencryptedServiceIcon_sCustomTextFontSize_unencryptedServiceIcon = *(void *)&v7;
    objc_storeStrong((id *)&unencryptedServiceIcon_sCustomTextFontName_unencryptedServiceIcon, v9);
  }
  double v22 = (UIImage *)(id)v13[459];

  return v22;
}

- (BOOL)ckShouldUpdatelocationShareActionIcon
{
  return 0;
}

- (UIImage)locationShareActionIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)locationShareActionIcon_sContentSizeCategory_locationShareActionIcon, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if ([(CKUIBehavior *)self ckShouldUpdatelocationShareActionIcon]
    || v11
    || locationShareActionIcon_sIsIncreaseContrastEnabled_locationShareActionIcon != v4
    || locationShareActionIcon_sIsBoldTextEnabled_locationShareActionIcon != IsBoldTextEnabled
    || (uint64_t v12 = locationShareActionIcon_sTextFontSize_locationShareActionIcon,
        *(double *)&locationShareActionIcon_sTextFontSize_locationShareActionIcon != v6)
    || (uint64_t v12 = locationShareActionIcon_sCustomTextFontSize_locationShareActionIcon,
        *(double *)&locationShareActionIcon_sCustomTextFontSize_locationShareActionIcon != v7)
    || (objc_msgSend((id)locationShareActionIcon_sCustomTextFontName_locationShareActionIcon, "isEqualToString:", v10, *(double *)&locationShareActionIcon_sCustomTextFontSize_locationShareActionIcon) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"location.fill", *(double *)&v12);
    uint64_t v15 = (void *)MEMORY[0x1E4F42A98];
    double v16 = [(CKUIBehavior *)self transcriptTextFont];
    double v17 = [v15 configurationWithFont:v16];

    uint64_t v18 = [v14 imageWithSymbolConfiguration:v17];

    uint64_t v19 = +[CKUIBehavior sharedBehaviors];
    uint64_t v20 = [v19 theme];
    [v20 transcriptTextColor];
    obj = v9;
    double v21 = v8;
    double v22 = v3;
    v24 = uint64_t v23 = v10;
    [v18 imageWithTintColor:v24];
    uint64_t v25 = v29 = IsBoldTextEnabled;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    NSComparisonResult v10 = v23;
    double v3 = v22;
    double v8 = v21;

    double v26 = (void *)locationShareActionIcon_sBehavior;
    locationShareActionIcon_sBehavior = v25;

    objc_storeStrong((id *)&locationShareActionIcon_sContentSizeCategory_locationShareActionIcon, v3);
    locationShareActionIcon_sIsIncreaseContrastEnabled_locationShareActionIcon = v4;
    locationShareActionIcon_sIsBoldTextEnabled_locationShareActionIcon = v29;
    locationShareActionIcon_sTextFontSize_locationShareActionIcon = *(void *)&v6;
    locationShareActionIcon_sCustomTextFontSize_locationShareActionIcon = *(void *)&v7;
    objc_storeStrong((id *)&locationShareActionIcon_sCustomTextFontName_locationShareActionIcon, obj);
  }
  char v27 = (UIImage *)(id)v13[462];

  return v27;
}

- (BOOL)ckShouldUpdateconversationListFocusFilterBannerEnabledIcon
{
  return 0;
}

- (UIImage)conversationListFocusFilterBannerEnabledIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFocusFilterBannerEnabledIcon_sContentSizeCategory_conversationListFocusFilterBannerEnabledIcon, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdateconversationListFocusFilterBannerEnabledIcon](self, "ckShouldUpdateconversationListFocusFilterBannerEnabledIcon")|| v11|| conversationListFocusFilterBannerEnabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerEnabledIcon != v4|| conversationListFocusFilterBannerEnabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerEnabledIcon != IsBoldTextEnabled|| (uint64_t v12 = conversationListFocusFilterBannerEnabledIcon_sTextFontSize_conversationListFocusFilterBannerEnabledIcon, *(double *)&conversationListFocusFilterBannerEnabledIcon_sTextFontSize_conversationListFocusFilterBannerEnabledIcon != v6)|| (uint64_t v12 = conversationListFocusFilterBannerEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerEnabledIcon, *(double *)&conversationListFocusFilterBannerEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerEnabledIcon != v7)|| (objc_msgSend((id)conversationListFocusFilterBannerEnabledIcon_sCustomTextFontName_conversationListFocusFilterBannerEnabledIcon, "isEqualToString:", v10, *(double *)&conversationListFocusFilterBannerEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerEnabledIcon) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"moon.circle.fill", *(double *)&v12);
    uint64_t v15 = [(CKUIBehavior *)self conversationListFocusFilterBannerTitleFont];
    double v16 = [MEMORY[0x1E4F42A98] configurationWithFont:v15];
    double v17 = [v14 imageWithSymbolConfiguration:v16];

    uint64_t v18 = +[CKUIBehavior sharedBehaviors];
    [v18 theme];
    char v29 = v9;
    uint64_t v19 = v10;
    v21 = uint64_t v20 = v3;
    [v21 transcriptAvailabilityColor];
    double v30 = v8;
    double v22 = v28 = IsBoldTextEnabled;
    [v17 imageWithTintColor:v22 renderingMode:2];
    v24 = char v23 = v4;

    double v3 = v20;
    NSComparisonResult v10 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    uint64_t v25 = (void *)conversationListFocusFilterBannerEnabledIcon_sBehavior;
    conversationListFocusFilterBannerEnabledIcon_sBehavior = v24;

    objc_storeStrong((id *)&conversationListFocusFilterBannerEnabledIcon_sContentSizeCategory_conversationListFocusFilterBannerEnabledIcon, v3);
    conversationListFocusFilterBannerEnabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerEnabledIcon = v23;
    conversationListFocusFilterBannerEnabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerEnabledIcon = v28;
    double v8 = v30;
    conversationListFocusFilterBannerEnabledIcon_sTextFontSize_conversationListFocusFilterBannerEnabledIcon = *(void *)&v6;
    conversationListFocusFilterBannerEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerEnabledIcon = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFocusFilterBannerEnabledIcon_sCustomTextFontName_conversationListFocusFilterBannerEnabledIcon, v29);
  }
  double v26 = (UIImage *)(id)v13[465];

  return v26;
}

- (BOOL)ckShouldUpdateconversationListFocusFilterBannerDisabledIcon
{
  return 0;
}

- (UIImage)conversationListFocusFilterBannerDisabledIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFocusFilterBannerDisabledIcon_sContentSizeCategory_conversationListFocusFilterBannerDisabledIcon, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdateconversationListFocusFilterBannerDisabledIcon](self, "ckShouldUpdateconversationListFocusFilterBannerDisabledIcon")|| v11|| conversationListFocusFilterBannerDisabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerDisabledIcon != v4|| conversationListFocusFilterBannerDisabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerDisabledIcon != IsBoldTextEnabled|| (uint64_t v12 = conversationListFocusFilterBannerDisabledIcon_sTextFontSize_conversationListFocusFilterBannerDisabledIcon, *(double *)&conversationListFocusFilterBannerDisabledIcon_sTextFontSize_conversationListFocusFilterBannerDisabledIcon != v6)|| (uint64_t v12 = conversationListFocusFilterBannerDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerDisabledIcon, *(double *)&conversationListFocusFilterBannerDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerDisabledIcon != v7)|| (objc_msgSend((id)conversationListFocusFilterBannerDisabledIcon_sCustomTextFontName_conversationListFocusFilterBannerDisabledIcon, "isEqualToString:", v10, *(double *)&conversationListFocusFilterBannerDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerDisabledIcon) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"moon.circle.fill", *(double *)&v12);
    uint64_t v15 = [(CKUIBehavior *)self conversationListFocusFilterBannerTitleFont];
    double v16 = [MEMORY[0x1E4F42A98] configurationWithFont:v15];
    double v17 = [v14 imageWithSymbolConfiguration:v16];

    uint64_t v18 = +[CKUIBehavior sharedBehaviors];
    [v18 theme];
    char v29 = v9;
    uint64_t v19 = v10;
    v21 = uint64_t v20 = v3;
    [v21 transcriptTextColor];
    double v30 = v8;
    double v22 = v28 = IsBoldTextEnabled;
    [v17 imageWithTintColor:v22 renderingMode:2];
    v24 = char v23 = v4;

    double v3 = v20;
    NSComparisonResult v10 = v19;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    uint64_t v25 = (void *)conversationListFocusFilterBannerDisabledIcon_sBehavior;
    conversationListFocusFilterBannerDisabledIcon_sBehavior = v24;

    objc_storeStrong((id *)&conversationListFocusFilterBannerDisabledIcon_sContentSizeCategory_conversationListFocusFilterBannerDisabledIcon, v3);
    conversationListFocusFilterBannerDisabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerDisabledIcon = v23;
    conversationListFocusFilterBannerDisabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerDisabledIcon = v28;
    double v8 = v30;
    conversationListFocusFilterBannerDisabledIcon_sTextFontSize_conversationListFocusFilterBannerDisabledIcon = *(void *)&v6;
    conversationListFocusFilterBannerDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerDisabledIcon = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFocusFilterBannerDisabledIcon_sCustomTextFontName_conversationListFocusFilterBannerDisabledIcon, v29);
  }
  double v26 = (UIImage *)(id)v13[468];

  return v26;
}

- (BOOL)ckShouldUpdateconversationListFocusFilterBannerCollapsedEnabledIcon
{
  return 0;
}

- (UIImage)conversationListFocusFilterBannerCollapsedEnabledIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [(__CFString *)v8 length];
  NSComparisonResult v10 = @"None";
  if (v9) {
    NSComparisonResult v10 = v8;
  }
  obj = v10;
  NSComparisonResult v11 = v10;
  NSComparisonResult v12 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFocusFilterBannerCollapsedEnabledIcon_sContentSizeCategory_conversationListFocusFilterBannerCollapsedEnabledIcon, v3);
  BOOL v13 = [(CKUIBehavior *)self ckShouldUpdateconversationListFocusFilterBannerCollapsedEnabledIcon];
  uint64_t v15 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (v13
    || v12
    || conversationListFocusFilterBannerCollapsedEnabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerCollapsedEnabledIcon != v4
    || conversationListFocusFilterBannerCollapsedEnabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerCollapsedEnabledIcon != IsBoldTextEnabled
    || (uint64_t v14 = conversationListFocusFilterBannerCollapsedEnabledIcon_sTextFontSize_conversationListFocusFilterBannerCollapsedEnabledIcon,
        *(double *)&conversationListFocusFilterBannerCollapsedEnabledIcon_sTextFontSize_conversationListFocusFilterBannerCollapsedEnabledIcon != v6)
    || (uint64_t v14 = conversationListFocusFilterBannerCollapsedEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedEnabledIcon,
        *(double *)&conversationListFocusFilterBannerCollapsedEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedEnabledIcon != v7)
    || (objc_msgSend((id)conversationListFocusFilterBannerCollapsedEnabledIcon_sCustomTextFontName_conversationListFocusFilterBannerCollapsedEnabledIcon, "isEqualToString:", v11, *(double *)&conversationListFocusFilterBannerCollapsedEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedEnabledIcon) & 1) == 0)
  {
    double v16 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"moon.circle.fill", *(double *)&v14);
    double v17 = [MEMORY[0x1E4F42A98] configurationWithScale:3];
    uint64_t v18 = [v16 imageWithSymbolConfiguration:v17];

    uint64_t v19 = [MEMORY[0x1E4F428B8] systemIndigoColor];
    uint64_t v20 = [v18 imageWithTintColor:v19 renderingMode:1];

    uint64_t v15 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    double v21 = (void *)conversationListFocusFilterBannerCollapsedEnabledIcon_sBehavior;
    conversationListFocusFilterBannerCollapsedEnabledIcon_sBehavior = v20;

    objc_storeStrong((id *)&conversationListFocusFilterBannerCollapsedEnabledIcon_sContentSizeCategory_conversationListFocusFilterBannerCollapsedEnabledIcon, v3);
    conversationListFocusFilterBannerCollapsedEnabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerCollapsedEnabledIcon = v4;
    conversationListFocusFilterBannerCollapsedEnabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerCollapsedEnabledIcon = IsBoldTextEnabled;
    conversationListFocusFilterBannerCollapsedEnabledIcon_sTextFontSize_conversationListFocusFilterBannerCollapsedEnabledIcon = *(void *)&v6;
    conversationListFocusFilterBannerCollapsedEnabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedEnabledIcon = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFocusFilterBannerCollapsedEnabledIcon_sCustomTextFontName_conversationListFocusFilterBannerCollapsedEnabledIcon, obj);
  }
  double v22 = (UIImage *)(id)v15[471];

  return v22;
}

- (BOOL)ckShouldUpdateconversationListFocusFilterBannerCollapsedDisabledIcon
{
  return 0;
}

- (UIImage)conversationListFocusFilterBannerCollapsedDisabledIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFocusFilterBannerCollapsedDisabledIcon_sContentSizeCategory_conversationListFocusFilterBannerCollapsedDisabledIcon, v3);
  BOOL v12 = [(CKUIBehavior *)self ckShouldUpdateconversationListFocusFilterBannerCollapsedDisabledIcon];
  uint64_t v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (v12
    || v11
    || conversationListFocusFilterBannerCollapsedDisabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerCollapsedDisabledIcon != v4
    || conversationListFocusFilterBannerCollapsedDisabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerCollapsedDisabledIcon != IsBoldTextEnabled
    || (uint64_t v13 = conversationListFocusFilterBannerCollapsedDisabledIcon_sTextFontSize_conversationListFocusFilterBannerCollapsedDisabledIcon,
        *(double *)&conversationListFocusFilterBannerCollapsedDisabledIcon_sTextFontSize_conversationListFocusFilterBannerCollapsedDisabledIcon != v6)
    || (uint64_t v13 = conversationListFocusFilterBannerCollapsedDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedDisabledIcon,
        *(double *)&conversationListFocusFilterBannerCollapsedDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedDisabledIcon != v7)
    || (objc_msgSend((id)conversationListFocusFilterBannerCollapsedDisabledIcon_sCustomTextFontName_conversationListFocusFilterBannerCollapsedDisabledIcon, "isEqualToString:", v10, *(double *)&conversationListFocusFilterBannerCollapsedDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedDisabledIcon) & 1) == 0)
  {
    uint64_t v15 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"moon.circle.fill", *(double *)&v13);
    double v16 = [MEMORY[0x1E4F42A98] configurationWithScale:3];
    double v17 = [v15 imageWithSymbolConfiguration:v16];

    uint64_t v18 = +[CKUIBehavior sharedBehaviors];
    uint64_t v19 = [v18 theme];
    [v19 conversationListSummaryColor];
    obj = v9;
    uint64_t v20 = v8;
    double v21 = v3;
    v23 = double v22 = v10;
    [v17 imageWithTintColor:v23 renderingMode:1];
    uint64_t v24 = v28 = IsBoldTextEnabled;

    NSComparisonResult v10 = v22;
    double v3 = v21;
    double v8 = v20;

    uint64_t v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    uint64_t v25 = (void *)conversationListFocusFilterBannerCollapsedDisabledIcon_sBehavior;
    conversationListFocusFilterBannerCollapsedDisabledIcon_sBehavior = v24;

    objc_storeStrong((id *)&conversationListFocusFilterBannerCollapsedDisabledIcon_sContentSizeCategory_conversationListFocusFilterBannerCollapsedDisabledIcon, v3);
    conversationListFocusFilterBannerCollapsedDisabledIcon_sIsIncreaseContrastEnabled_conversationListFocusFilterBannerCollapsedDisabledIcon = v4;
    conversationListFocusFilterBannerCollapsedDisabledIcon_sIsBoldTextEnabled_conversationListFocusFilterBannerCollapsedDisabledIcon = v28;
    conversationListFocusFilterBannerCollapsedDisabledIcon_sTextFontSize_conversationListFocusFilterBannerCollapsedDisabledIcon = *(void *)&v6;
    conversationListFocusFilterBannerCollapsedDisabledIcon_sCustomTextFontSize_conversationListFocusFilterBannerCollapsedDisabledIcon = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFocusFilterBannerCollapsedDisabledIcon_sCustomTextFontName_conversationListFocusFilterBannerCollapsedDisabledIcon, obj);
  }
  double v26 = (UIImage *)(id)v14[474];

  return v26;
}

- (BOOL)ckShouldUpdateunavailabilityIndicatorIcon
{
  return 0;
}

- (UIImage)unavailabilityIndicatorIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)unavailabilityIndicatorIcon_sContentSizeCategory_unavailabilityIndicatorIcon, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if ([(CKUIBehavior *)self ckShouldUpdateunavailabilityIndicatorIcon]
    || v11
    || unavailabilityIndicatorIcon_sIsIncreaseContrastEnabled_unavailabilityIndicatorIcon != v4
    || unavailabilityIndicatorIcon_sIsBoldTextEnabled_unavailabilityIndicatorIcon != IsBoldTextEnabled
    || (uint64_t v12 = unavailabilityIndicatorIcon_sTextFontSize_unavailabilityIndicatorIcon,
        *(double *)&unavailabilityIndicatorIcon_sTextFontSize_unavailabilityIndicatorIcon != v6)
    || (uint64_t v12 = unavailabilityIndicatorIcon_sCustomTextFontSize_unavailabilityIndicatorIcon,
        *(double *)&unavailabilityIndicatorIcon_sCustomTextFontSize_unavailabilityIndicatorIcon != v7)
    || (objc_msgSend((id)unavailabilityIndicatorIcon_sCustomTextFontName_unavailabilityIndicatorIcon, "isEqualToString:", v10, *(double *)&unavailabilityIndicatorIcon_sCustomTextFontSize_unavailabilityIndicatorIcon) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"moon.fill", *(double *)&v12);
    uint64_t v15 = (void *)MEMORY[0x1E4F42A98];
    double v16 = [(CKUIBehavior *)self transcriptAvailabilityFont];
    double v17 = [v15 configurationWithFont:v16];

    uint64_t v18 = [v14 imageWithSymbolConfiguration:v17];

    uint64_t v19 = +[CKUIBehavior sharedBehaviors];
    uint64_t v20 = [v19 theme];
    [v20 transcriptAvailabilityColor];
    obj = v9;
    double v21 = v8;
    double v22 = v3;
    v24 = char v23 = v10;
    [v18 imageWithTintColor:v24];
    uint64_t v25 = v29 = IsBoldTextEnabled;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    NSComparisonResult v10 = v23;
    double v3 = v22;
    double v8 = v21;

    double v26 = (void *)unavailabilityIndicatorIcon_sBehavior;
    unavailabilityIndicatorIcon_sBehavior = v25;

    objc_storeStrong((id *)&unavailabilityIndicatorIcon_sContentSizeCategory_unavailabilityIndicatorIcon, v3);
    unavailabilityIndicatorIcon_sIsIncreaseContrastEnabled_unavailabilityIndicatorIcon = v4;
    unavailabilityIndicatorIcon_sIsBoldTextEnabled_unavailabilityIndicatorIcon = v29;
    unavailabilityIndicatorIcon_sTextFontSize_unavailabilityIndicatorIcon = *(void *)&v6;
    unavailabilityIndicatorIcon_sCustomTextFontSize_unavailabilityIndicatorIcon = *(void *)&v7;
    objc_storeStrong((id *)&unavailabilityIndicatorIcon_sCustomTextFontName_unavailabilityIndicatorIcon, obj);
  }
  char v27 = (UIImage *)(id)v13[477];

  return v27;
}

- (BOOL)ckShouldUpdateunavailabilityIndicatorDeemphasizedIcon
{
  return 0;
}

- (UIImage)unavailabilityIndicatorDeemphasizedIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)unavailabilityIndicatorDeemphasizedIcon_sContentSizeCategory_unavailabilityIndicatorDeemphasizedIcon, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (-[CKUIBehavior ckShouldUpdateunavailabilityIndicatorDeemphasizedIcon](self, "ckShouldUpdateunavailabilityIndicatorDeemphasizedIcon")|| v11|| unavailabilityIndicatorDeemphasizedIcon_sIsIncreaseContrastEnabled_unavailabilityIndicatorDeemphasizedIcon != v4|| unavailabilityIndicatorDeemphasizedIcon_sIsBoldTextEnabled_unavailabilityIndicatorDeemphasizedIcon != IsBoldTextEnabled|| (uint64_t v12 = unavailabilityIndicatorDeemphasizedIcon_sTextFontSize_unavailabilityIndicatorDeemphasizedIcon, *(double *)&unavailabilityIndicatorDeemphasizedIcon_sTextFontSize_unavailabilityIndicatorDeemphasizedIcon != v6)|| (uint64_t v12 = unavailabilityIndicatorDeemphasizedIcon_sCustomTextFontSize_unavailabilityIndicatorDeemphasizedIcon, *(double *)&unavailabilityIndicatorDeemphasizedIcon_sCustomTextFontSize_unavailabilityIndicatorDeemphasizedIcon != v7)|| (objc_msgSend((id)unavailabilityIndicatorDeemphasizedIcon_sCustomTextFontName_unavailabilityIndicatorDeemphasizedIcon, "isEqualToString:", v10, *(double *)&unavailabilityIndicatorDeemphasizedIcon_sCustomTextFontSize_unavailabilityIndicatorDeemphasizedIcon) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"moon.fill", *(double *)&v12);
    uint64_t v15 = (void *)MEMORY[0x1E4F42A98];
    double v16 = [(CKUIBehavior *)self transcriptAvailabilityFont];
    double v17 = [v15 configurationWithFont:v16];

    uint64_t v18 = [v14 imageWithSymbolConfiguration:v17];

    uint64_t v19 = +[CKUIBehavior sharedBehaviors];
    uint64_t v20 = [v19 theme];
    [v20 transcriptAvailabilityDeemphasizedColor];
    obj = v9;
    double v21 = v8;
    double v22 = v3;
    v24 = char v23 = v10;
    [v18 imageWithTintColor:v24];
    uint64_t v25 = v29 = IsBoldTextEnabled;

    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    NSComparisonResult v10 = v23;
    double v3 = v22;
    double v8 = v21;

    double v26 = (void *)unavailabilityIndicatorDeemphasizedIcon_sBehavior;
    unavailabilityIndicatorDeemphasizedIcon_sBehavior = v25;

    objc_storeStrong((id *)&unavailabilityIndicatorDeemphasizedIcon_sContentSizeCategory_unavailabilityIndicatorDeemphasizedIcon, v3);
    unavailabilityIndicatorDeemphasizedIcon_sIsIncreaseContrastEnabled_unavailabilityIndicatorDeemphasizedIcon = v4;
    unavailabilityIndicatorDeemphasizedIcon_sIsBoldTextEnabled_unavailabilityIndicatorDeemphasizedIcon = v29;
    unavailabilityIndicatorDeemphasizedIcon_sTextFontSize_unavailabilityIndicatorDeemphasizedIcon = *(void *)&v6;
    unavailabilityIndicatorDeemphasizedIcon_sCustomTextFontSize_unavailabilityIndicatorDeemphasizedIcon = *(void *)&v7;
    objc_storeStrong((id *)&unavailabilityIndicatorDeemphasizedIcon_sCustomTextFontName_unavailabilityIndicatorDeemphasizedIcon, obj);
  }
  char v27 = (UIImage *)(id)v13[480];

  return v27;
}

- (BOOL)ckShouldUpdatesatelliteAvailabilityIndicatorIcon
{
  return 0;
}

- (UIImage)satelliteAvailabilityIndicatorIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)satelliteAvailabilityIndicatorIcon_sContentSizeCategory_satelliteAvailabilityIndicatorIcon, v3);
  BOOL v12 = [(CKUIBehavior *)self ckShouldUpdatesatelliteAvailabilityIndicatorIcon];
  uint64_t v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (v12
    || v11
    || satelliteAvailabilityIndicatorIcon_sIsIncreaseContrastEnabled_satelliteAvailabilityIndicatorIcon != v4
    || satelliteAvailabilityIndicatorIcon_sIsBoldTextEnabled_satelliteAvailabilityIndicatorIcon != IsBoldTextEnabled
    || (uint64_t v13 = satelliteAvailabilityIndicatorIcon_sTextFontSize_satelliteAvailabilityIndicatorIcon,
        *(double *)&satelliteAvailabilityIndicatorIcon_sTextFontSize_satelliteAvailabilityIndicatorIcon != v6)
    || (uint64_t v13 = satelliteAvailabilityIndicatorIcon_sCustomTextFontSize_satelliteAvailabilityIndicatorIcon,
        *(double *)&satelliteAvailabilityIndicatorIcon_sCustomTextFontSize_satelliteAvailabilityIndicatorIcon != v7)
    || (objc_msgSend((id)satelliteAvailabilityIndicatorIcon_sCustomTextFontName_satelliteAvailabilityIndicatorIcon, "isEqualToString:", v10, *(double *)&satelliteAvailabilityIndicatorIcon_sCustomTextFontSize_satelliteAvailabilityIndicatorIcon) & 1) == 0)
  {
    uint64_t v15 = objc_msgSend(MEMORY[0x1E4F42A80], "_systemImageNamed:", @"satellite.wave.2.fill", *(double *)&v13);
    double v16 = [MEMORY[0x1E4F42A98] configurationWithScale:1];
    double v17 = [v15 imageWithSymbolConfiguration:v16];

    uint64_t v18 = +[CKUIBehavior sharedBehaviors];
    uint64_t v19 = [v18 theme];
    [v19 transcriptAvailabilityColor];
    obj = v9;
    uint64_t v20 = v8;
    double v21 = v3;
    v23 = double v22 = v10;
    [v17 imageWithTintColor:v23];
    uint64_t v24 = v28 = IsBoldTextEnabled;

    NSComparisonResult v10 = v22;
    double v3 = v21;
    double v8 = v20;

    uint64_t v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    uint64_t v25 = (void *)satelliteAvailabilityIndicatorIcon_sBehavior;
    satelliteAvailabilityIndicatorIcon_sBehavior = v24;

    objc_storeStrong((id *)&satelliteAvailabilityIndicatorIcon_sContentSizeCategory_satelliteAvailabilityIndicatorIcon, v3);
    satelliteAvailabilityIndicatorIcon_sIsIncreaseContrastEnabled_satelliteAvailabilityIndicatorIcon = v4;
    satelliteAvailabilityIndicatorIcon_sIsBoldTextEnabled_satelliteAvailabilityIndicatorIcon = v28;
    satelliteAvailabilityIndicatorIcon_sTextFontSize_satelliteAvailabilityIndicatorIcon = *(void *)&v6;
    satelliteAvailabilityIndicatorIcon_sCustomTextFontSize_satelliteAvailabilityIndicatorIcon = *(void *)&v7;
    objc_storeStrong((id *)&satelliteAvailabilityIndicatorIcon_sCustomTextFontName_satelliteAvailabilityIndicatorIcon, obj);
  }
  double v26 = (UIImage *)(id)v14[483];

  return v26;
}

- (BOOL)ckShouldUpdatesatelliteServiceIcon
{
  return 0;
}

- (UIImage)satelliteServiceIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)satelliteServiceIcon_sContentSizeCategory_satelliteServiceIcon, v3);
  BOOL v12 = [(CKUIBehavior *)self ckShouldUpdatesatelliteServiceIcon];
  uint64_t v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if (v12
    || v11
    || satelliteServiceIcon_sIsIncreaseContrastEnabled_satelliteServiceIcon != v4
    || satelliteServiceIcon_sIsBoldTextEnabled_satelliteServiceIcon != IsBoldTextEnabled
    || (uint64_t v13 = satelliteServiceIcon_sTextFontSize_satelliteServiceIcon,
        *(double *)&satelliteServiceIcon_sTextFontSize_satelliteServiceIcon != v6)
    || (uint64_t v13 = satelliteServiceIcon_sCustomTextFontSize_satelliteServiceIcon,
        *(double *)&satelliteServiceIcon_sCustomTextFontSize_satelliteServiceIcon != v7)
    || (objc_msgSend((id)satelliteServiceIcon_sCustomTextFontName_satelliteServiceIcon, "isEqualToString:", v10, *(double *)&satelliteServiceIcon_sCustomTextFontSize_satelliteServiceIcon) & 1) == 0)
  {
    uint64_t v15 = objc_msgSend(MEMORY[0x1E4F42A80], "_systemImageNamed:", @"satellite.wave.2.fill", *(double *)&v13);
    double v16 = [MEMORY[0x1E4F42A98] configurationWithScale:1];
    double v17 = [v15 imageWithSymbolConfiguration:v16];

    uint64_t v18 = +[CKUIBehavior sharedBehaviors];
    uint64_t v19 = [v18 theme];
    [v19 transcriptAvailabilityDeemphasizedColor];
    obj = v9;
    uint64_t v20 = v8;
    double v21 = v3;
    v23 = double v22 = v10;
    [v17 imageWithTintColor:v23];
    uint64_t v24 = v28 = IsBoldTextEnabled;

    NSComparisonResult v10 = v22;
    double v3 = v21;
    double v8 = v20;

    uint64_t v14 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
    uint64_t v25 = (void *)satelliteServiceIcon_sBehavior;
    satelliteServiceIcon_sBehavior = v24;

    objc_storeStrong((id *)&satelliteServiceIcon_sContentSizeCategory_satelliteServiceIcon, v3);
    satelliteServiceIcon_sIsIncreaseContrastEnabled_satelliteServiceIcon = v4;
    satelliteServiceIcon_sIsBoldTextEnabled_satelliteServiceIcon = v28;
    satelliteServiceIcon_sTextFontSize_satelliteServiceIcon = *(void *)&v6;
    satelliteServiceIcon_sCustomTextFontSize_satelliteServiceIcon = *(void *)&v7;
    objc_storeStrong((id *)&satelliteServiceIcon_sCustomTextFontName_satelliteServiceIcon, obj);
  }
  double v26 = (UIImage *)(id)v14[486];

  return v26;
}

- (BOOL)ckShouldUpdatecontextMenuUndoSendIcon
{
  return 0;
}

- (UIImage)contextMenuUndoSendIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)contextMenuUndoSendIcon_sContentSizeCategory_contextMenuUndoSendIcon, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatecontextMenuUndoSendIcon]
    || v11
    || contextMenuUndoSendIcon_sIsIncreaseContrastEnabled_contextMenuUndoSendIcon != v4
    || contextMenuUndoSendIcon_sIsBoldTextEnabled_contextMenuUndoSendIcon != IsBoldTextEnabled
    || (uint64_t v12 = contextMenuUndoSendIcon_sTextFontSize_contextMenuUndoSendIcon,
        *(double *)&contextMenuUndoSendIcon_sTextFontSize_contextMenuUndoSendIcon != v6)
    || (uint64_t v12 = contextMenuUndoSendIcon_sCustomTextFontSize_contextMenuUndoSendIcon,
        *(double *)&contextMenuUndoSendIcon_sCustomTextFontSize_contextMenuUndoSendIcon != v7)
    || (objc_msgSend((id)contextMenuUndoSendIcon_sCustomTextFontName_contextMenuUndoSendIcon, "isEqualToString:", v10, *(double *)&contextMenuUndoSendIcon_sCustomTextFontSize_contextMenuUndoSendIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "_systemImageNamed:", @"arrow.uturn.backward.circle", *(double *)&v12);
    uint64_t v14 = (void *)contextMenuUndoSendIcon_sBehavior;
    contextMenuUndoSendIcon_sBehavior = v13;

    objc_storeStrong((id *)&contextMenuUndoSendIcon_sContentSizeCategory_contextMenuUndoSendIcon, v3);
    contextMenuUndoSendIcon_sIsIncreaseContrastEnabled_contextMenuUndoSendIcon = v4;
    contextMenuUndoSendIcon_sIsBoldTextEnabled_contextMenuUndoSendIcon = IsBoldTextEnabled;
    contextMenuUndoSendIcon_sTextFontSize_contextMenuUndoSendIcon = *(void *)&v6;
    contextMenuUndoSendIcon_sCustomTextFontSize_contextMenuUndoSendIcon = *(void *)&v7;
    objc_storeStrong((id *)&contextMenuUndoSendIcon_sCustomTextFontName_contextMenuUndoSendIcon, v9);
  }
  uint64_t v15 = (UIImage *)(id)contextMenuUndoSendIcon_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatecontextMenuCancelScheduledMessageIcon
{
  return 0;
}

- (UIImage)contextMenuCancelScheduledMessageIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)contextMenuCancelScheduledMessageIcon_sContentSizeCategory_contextMenuCancelScheduledMessageIcon, v3);
  if (-[CKUIBehavior ckShouldUpdatecontextMenuCancelScheduledMessageIcon](self, "ckShouldUpdatecontextMenuCancelScheduledMessageIcon")|| v11|| contextMenuCancelScheduledMessageIcon_sIsIncreaseContrastEnabled_contextMenuCancelScheduledMessageIcon != v4|| contextMenuCancelScheduledMessageIcon_sIsBoldTextEnabled_contextMenuCancelScheduledMessageIcon != IsBoldTextEnabled|| (uint64_t v12 = contextMenuCancelScheduledMessageIcon_sTextFontSize_contextMenuCancelScheduledMessageIcon, *(double *)&contextMenuCancelScheduledMessageIcon_sTextFontSize_contextMenuCancelScheduledMessageIcon != v6)|| (uint64_t v12 = contextMenuCancelScheduledMessageIcon_sCustomTextFontSize_contextMenuCancelScheduledMessageIcon, *(double *)&contextMenuCancelScheduledMessageIcon_sCustomTextFontSize_contextMenuCancelScheduledMessageIcon != v7)|| (objc_msgSend((id)contextMenuCancelScheduledMessageIcon_sCustomTextFontName_contextMenuCancelScheduledMessageIcon, "isEqualToString:", v10, *(double *)&contextMenuCancelScheduledMessageIcon_sCustomTextFontSize_contextMenuCancelScheduledMessageIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "_systemImageNamed:", @"trash", *(double *)&v12);
    uint64_t v14 = (void *)contextMenuCancelScheduledMessageIcon_sBehavior;
    contextMenuCancelScheduledMessageIcon_sBehavior = v13;

    objc_storeStrong((id *)&contextMenuCancelScheduledMessageIcon_sContentSizeCategory_contextMenuCancelScheduledMessageIcon, v3);
    contextMenuCancelScheduledMessageIcon_sIsIncreaseContrastEnabled_contextMenuCancelScheduledMessageIcon = v4;
    contextMenuCancelScheduledMessageIcon_sIsBoldTextEnabled_contextMenuCancelScheduledMessageIcon = IsBoldTextEnabled;
    contextMenuCancelScheduledMessageIcon_sTextFontSize_contextMenuCancelScheduledMessageIcon = *(void *)&v6;
    contextMenuCancelScheduledMessageIcon_sCustomTextFontSize_contextMenuCancelScheduledMessageIcon = *(void *)&v7;
    objc_storeStrong((id *)&contextMenuCancelScheduledMessageIcon_sCustomTextFontName_contextMenuCancelScheduledMessageIcon, v9);
  }
  uint64_t v15 = (UIImage *)(id)contextMenuCancelScheduledMessageIcon_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatehawkingWarningIcon
{
  return 0;
}

- (UIImage)hawkingWarningIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)hawkingWarningIcon_sContentSizeCategory_hawkingWarningIcon, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatehawkingWarningIcon]
    || v11
    || hawkingWarningIcon_sIsIncreaseContrastEnabled_hawkingWarningIcon != v4
    || hawkingWarningIcon_sIsBoldTextEnabled_hawkingWarningIcon != IsBoldTextEnabled
    || (uint64_t v12 = hawkingWarningIcon_sTextFontSize_hawkingWarningIcon,
        *(double *)&hawkingWarningIcon_sTextFontSize_hawkingWarningIcon != v6)
    || (uint64_t v12 = hawkingWarningIcon_sCustomTextFontSize_hawkingWarningIcon,
        *(double *)&hawkingWarningIcon_sCustomTextFontSize_hawkingWarningIcon != v7)
    || (objc_msgSend((id)hawkingWarningIcon_sCustomTextFontName_hawkingWarningIcon, "isEqualToString:", v10, *(double *)&hawkingWarningIcon_sCustomTextFontSize_hawkingWarningIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"exclamationmark.circle", *(double *)&v12);
    uint64_t v14 = +[CKUIBehavior sharedBehaviors];
    uint64_t v15 = [v14 theme];
    double v16 = [v15 transcriptTextColor];
    uint64_t v17 = [v13 imageWithTintColor:v16];
    uint64_t v18 = (void *)hawkingWarningIcon_sBehavior;
    hawkingWarningIcon_sBehavior = v17;

    objc_storeStrong((id *)&hawkingWarningIcon_sContentSizeCategory_hawkingWarningIcon, v3);
    hawkingWarningIcon_sIsIncreaseContrastEnabled_hawkingWarningIcon = v4;
    hawkingWarningIcon_sIsBoldTextEnabled_hawkingWarningIcon = IsBoldTextEnabled;
    hawkingWarningIcon_sTextFontSize_hawkingWarningIcon = *(void *)&v6;
    hawkingWarningIcon_sCustomTextFontSize_hawkingWarningIcon = *(void *)&v7;
    objc_storeStrong((id *)&hawkingWarningIcon_sCustomTextFontName_hawkingWarningIcon, v9);
  }
  uint64_t v19 = (UIImage *)(id)hawkingWarningIcon_sBehavior;

  return v19;
}

- (BOOL)ckShouldUpdatemessageStatusWarningIconRed
{
  return 0;
}

- (UIImage)messageStatusWarningIconRed
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)messageStatusWarningIconRed_sContentSizeCategory_messageStatusWarningIconRed, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if ([(CKUIBehavior *)self ckShouldUpdatemessageStatusWarningIconRed]
    || v11
    || messageStatusWarningIconRed_sIsIncreaseContrastEnabled_messageStatusWarningIconRed != v4
    || messageStatusWarningIconRed_sIsBoldTextEnabled_messageStatusWarningIconRed != IsBoldTextEnabled
    || (uint64_t v12 = messageStatusWarningIconRed_sTextFontSize_messageStatusWarningIconRed,
        *(double *)&messageStatusWarningIconRed_sTextFontSize_messageStatusWarningIconRed != v6)
    || (uint64_t v12 = messageStatusWarningIconRed_sCustomTextFontSize_messageStatusWarningIconRed,
        *(double *)&messageStatusWarningIconRed_sCustomTextFontSize_messageStatusWarningIconRed != v7)
    || (objc_msgSend((id)messageStatusWarningIconRed_sCustomTextFontName_messageStatusWarningIconRed, "isEqualToString:", v10, *(double *)&messageStatusWarningIconRed_sCustomTextFontSize_messageStatusWarningIconRed) & 1) == 0)
  {
    uint64_t v14 = [(CKUIBehavior *)self transcriptMessageStatusFont];
    uint64_t v15 = [MEMORY[0x1E4F42A98] configurationWithFont:v14];
    [MEMORY[0x1E4F42A80] systemImageNamed:@"exclamationmark.circle" withConfiguration:v15];
    double v16 = v8;
    v18 = uint64_t v17 = v3;
    uint64_t v19 = [MEMORY[0x1E4F428B8] systemRedColor];
    [v18 imageWithTintColor:v19];
    obj = v9;
    char v20 = IsBoldTextEnabled;
    v22 = double v21 = v10;

    double v3 = v17;
    double v8 = v16;
    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;

    char v23 = (void *)messageStatusWarningIconRed_sBehavior;
    messageStatusWarningIconRed_sBehavior = v22;
    NSComparisonResult v10 = v21;

    objc_storeStrong((id *)&messageStatusWarningIconRed_sContentSizeCategory_messageStatusWarningIconRed, v3);
    messageStatusWarningIconRed_sIsIncreaseContrastEnabled_messageStatusWarningIconRed = v4;
    messageStatusWarningIconRed_sIsBoldTextEnabled_messageStatusWarningIconRed = v20;
    messageStatusWarningIconRed_sTextFontSize_messageStatusWarningIconRed = *(void *)&v6;
    messageStatusWarningIconRed_sCustomTextFontSize_messageStatusWarningIconRed = *(void *)&v7;
    objc_storeStrong((id *)&messageStatusWarningIconRed_sCustomTextFontName_messageStatusWarningIconRed, obj);
  }
  uint64_t v24 = (UIImage *)(id)v13[498];

  return v24;
}

- (BOOL)ckShouldUpdatemessageStampWarningIconRed
{
  return 0;
}

- (UIImage)messageStampWarningIconRed
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)messageStampWarningIconRed_sContentSizeCategory_messageStampWarningIconRed, v3);
  uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;
  if ([(CKUIBehavior *)self ckShouldUpdatemessageStampWarningIconRed]
    || v11
    || messageStampWarningIconRed_sIsIncreaseContrastEnabled_messageStampWarningIconRed != v4
    || messageStampWarningIconRed_sIsBoldTextEnabled_messageStampWarningIconRed != IsBoldTextEnabled
    || (uint64_t v12 = messageStampWarningIconRed_sTextFontSize_messageStampWarningIconRed,
        *(double *)&messageStampWarningIconRed_sTextFontSize_messageStampWarningIconRed != v6)
    || (uint64_t v12 = messageStampWarningIconRed_sCustomTextFontSize_messageStampWarningIconRed,
        *(double *)&messageStampWarningIconRed_sCustomTextFontSize_messageStampWarningIconRed != v7)
    || (objc_msgSend((id)messageStampWarningIconRed_sCustomTextFontName_messageStampWarningIconRed, "isEqualToString:", v10, *(double *)&messageStampWarningIconRed_sCustomTextFontSize_messageStampWarningIconRed) & 1) == 0)
  {
    uint64_t v14 = [(CKUIBehavior *)self transcriptErrorStampFont];
    uint64_t v15 = [MEMORY[0x1E4F42A98] configurationWithFont:v14];
    [MEMORY[0x1E4F42A80] systemImageNamed:@"exclamationmark.circle" withConfiguration:v15];
    double v16 = v8;
    v18 = uint64_t v17 = v3;
    uint64_t v19 = [MEMORY[0x1E4F428B8] systemRedColor];
    [v18 imageWithTintColor:v19];
    obj = v9;
    char v20 = IsBoldTextEnabled;
    v22 = double v21 = v10;

    double v3 = v17;
    double v8 = v16;
    uint64_t v13 = &conversationListFocusFilterBannerShouldUseAccessabilityLayout_sContentSizeCategory_conversationListFocusFilterBannerShouldUseAccessabilityLayout;

    char v23 = (void *)messageStampWarningIconRed_sBehavior;
    messageStampWarningIconRed_sBehavior = v22;
    NSComparisonResult v10 = v21;

    objc_storeStrong((id *)&messageStampWarningIconRed_sContentSizeCategory_messageStampWarningIconRed, v3);
    messageStampWarningIconRed_sIsIncreaseContrastEnabled_messageStampWarningIconRed = v4;
    messageStampWarningIconRed_sIsBoldTextEnabled_messageStampWarningIconRed = v20;
    messageStampWarningIconRed_sTextFontSize_messageStampWarningIconRed = *(void *)&v6;
    messageStampWarningIconRed_sCustomTextFontSize_messageStampWarningIconRed = *(void *)&v7;
    objc_storeStrong((id *)&messageStampWarningIconRed_sCustomTextFontName_messageStampWarningIconRed, obj);
  }
  uint64_t v24 = (UIImage *)(id)v13[501];

  return v24;
}

- (BOOL)ckShouldUpdateconversationListFacetimeVideoIcon
{
  return 0;
}

- (UIImage)conversationListFacetimeVideoIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFacetimeVideoIcon_sContentSizeCategory_conversationListFacetimeVideoIcon, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListFacetimeVideoIcon](self, "ckShouldUpdateconversationListFacetimeVideoIcon")|| v11|| conversationListFacetimeVideoIcon_sIsIncreaseContrastEnabled_conversationListFacetimeVideoIcon != v4|| conversationListFacetimeVideoIcon_sIsBoldTextEnabled_conversationListFacetimeVideoIcon != IsBoldTextEnabled|| (uint64_t v12 = conversationListFacetimeVideoIcon_sTextFontSize_conversationListFacetimeVideoIcon, *(double *)&conversationListFacetimeVideoIcon_sTextFontSize_conversationListFacetimeVideoIcon != v6)|| (uint64_t v12 = conversationListFacetimeVideoIcon_sCustomTextFontSize_conversationListFacetimeVideoIcon, *(double *)&conversationListFacetimeVideoIcon_sCustomTextFontSize_conversationListFacetimeVideoIcon != v7)|| (objc_msgSend((id)conversationListFacetimeVideoIcon_sCustomTextFontName_conversationListFacetimeVideoIcon, "isEqualToString:", v10, *(double *)&conversationListFacetimeVideoIcon_sCustomTextFontSize_conversationListFacetimeVideoIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"video.fill", *(double *)&v12);
    uint64_t v14 = (void *)conversationListFacetimeVideoIcon_sBehavior;
    conversationListFacetimeVideoIcon_sBehavior = v13;

    objc_storeStrong((id *)&conversationListFacetimeVideoIcon_sContentSizeCategory_conversationListFacetimeVideoIcon, v3);
    conversationListFacetimeVideoIcon_sIsIncreaseContrastEnabled_conversationListFacetimeVideoIcon = v4;
    conversationListFacetimeVideoIcon_sIsBoldTextEnabled_conversationListFacetimeVideoIcon = IsBoldTextEnabled;
    conversationListFacetimeVideoIcon_sTextFontSize_conversationListFacetimeVideoIcon = *(void *)&v6;
    conversationListFacetimeVideoIcon_sCustomTextFontSize_conversationListFacetimeVideoIcon = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFacetimeVideoIcon_sCustomTextFontName_conversationListFacetimeVideoIcon, v9);
  }
  uint64_t v15 = (UIImage *)(id)conversationListFacetimeVideoIcon_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateconversationListFacetimeAudioIcon
{
  return 0;
}

- (UIImage)conversationListFacetimeAudioIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListFacetimeAudioIcon_sContentSizeCategory_conversationListFacetimeAudioIcon, v3);
  if (-[CKUIBehavior ckShouldUpdateconversationListFacetimeAudioIcon](self, "ckShouldUpdateconversationListFacetimeAudioIcon")|| v11|| conversationListFacetimeAudioIcon_sIsIncreaseContrastEnabled_conversationListFacetimeAudioIcon != v4|| conversationListFacetimeAudioIcon_sIsBoldTextEnabled_conversationListFacetimeAudioIcon != IsBoldTextEnabled|| (uint64_t v12 = conversationListFacetimeAudioIcon_sTextFontSize_conversationListFacetimeAudioIcon, *(double *)&conversationListFacetimeAudioIcon_sTextFontSize_conversationListFacetimeAudioIcon != v6)|| (uint64_t v12 = conversationListFacetimeAudioIcon_sCustomTextFontSize_conversationListFacetimeAudioIcon, *(double *)&conversationListFacetimeAudioIcon_sCustomTextFontSize_conversationListFacetimeAudioIcon != v7)|| (objc_msgSend((id)conversationListFacetimeAudioIcon_sCustomTextFontName_conversationListFacetimeAudioIcon, "isEqualToString:", v10, *(double *)&conversationListFacetimeAudioIcon_sCustomTextFontSize_conversationListFacetimeAudioIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"phone.fill", *(double *)&v12);
    uint64_t v14 = (void *)conversationListFacetimeAudioIcon_sBehavior;
    conversationListFacetimeAudioIcon_sBehavior = v13;

    objc_storeStrong((id *)&conversationListFacetimeAudioIcon_sContentSizeCategory_conversationListFacetimeAudioIcon, v3);
    conversationListFacetimeAudioIcon_sIsIncreaseContrastEnabled_conversationListFacetimeAudioIcon = v4;
    conversationListFacetimeAudioIcon_sIsBoldTextEnabled_conversationListFacetimeAudioIcon = IsBoldTextEnabled;
    conversationListFacetimeAudioIcon_sTextFontSize_conversationListFacetimeAudioIcon = *(void *)&v6;
    conversationListFacetimeAudioIcon_sCustomTextFontSize_conversationListFacetimeAudioIcon = *(void *)&v7;
    objc_storeStrong((id *)&conversationListFacetimeAudioIcon_sCustomTextFontName_conversationListFacetimeAudioIcon, v9);
  }
  uint64_t v15 = (UIImage *)(id)conversationListFacetimeAudioIcon_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateconversationListSharePlayIcon
{
  return 0;
}

- (UIImage)conversationListSharePlayIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)conversationListSharePlayIcon_sContentSizeCategory_conversationListSharePlayIcon, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateconversationListSharePlayIcon]
    || v11
    || conversationListSharePlayIcon_sIsIncreaseContrastEnabled_conversationListSharePlayIcon != v4
    || conversationListSharePlayIcon_sIsBoldTextEnabled_conversationListSharePlayIcon != IsBoldTextEnabled
    || (uint64_t v12 = conversationListSharePlayIcon_sTextFontSize_conversationListSharePlayIcon,
        *(double *)&conversationListSharePlayIcon_sTextFontSize_conversationListSharePlayIcon != v6)
    || (uint64_t v12 = conversationListSharePlayIcon_sCustomTextFontSize_conversationListSharePlayIcon,
        *(double *)&conversationListSharePlayIcon_sCustomTextFontSize_conversationListSharePlayIcon != v7)
    || (objc_msgSend((id)conversationListSharePlayIcon_sCustomTextFontName_conversationListSharePlayIcon, "isEqualToString:", v10, *(double *)&conversationListSharePlayIcon_sCustomTextFontSize_conversationListSharePlayIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"shareplay", *(double *)&v12);
    uint64_t v14 = (void *)conversationListSharePlayIcon_sBehavior;
    conversationListSharePlayIcon_sBehavior = v13;

    objc_storeStrong((id *)&conversationListSharePlayIcon_sContentSizeCategory_conversationListSharePlayIcon, v3);
    conversationListSharePlayIcon_sIsIncreaseContrastEnabled_conversationListSharePlayIcon = v4;
    conversationListSharePlayIcon_sIsBoldTextEnabled_conversationListSharePlayIcon = IsBoldTextEnabled;
    conversationListSharePlayIcon_sTextFontSize_conversationListSharePlayIcon = *(void *)&v6;
    conversationListSharePlayIcon_sCustomTextFontSize_conversationListSharePlayIcon = *(void *)&v7;
    objc_storeStrong((id *)&conversationListSharePlayIcon_sCustomTextFontName_conversationListSharePlayIcon, v9);
  }
  uint64_t v15 = (UIImage *)(id)conversationListSharePlayIcon_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatefacetimeAudioIcon
{
  return 0;
}

- (UIImage)facetimeAudioIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)facetimeAudioIcon_sContentSizeCategory_facetimeAudioIcon, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatefacetimeAudioIcon]
    || v11
    || facetimeAudioIcon_sIsIncreaseContrastEnabled_facetimeAudioIcon != v4
    || facetimeAudioIcon_sIsBoldTextEnabled_facetimeAudioIcon != IsBoldTextEnabled
    || (uint64_t v12 = facetimeAudioIcon_sTextFontSize_facetimeAudioIcon,
        *(double *)&facetimeAudioIcon_sTextFontSize_facetimeAudioIcon != v6)
    || (uint64_t v12 = facetimeAudioIcon_sCustomTextFontSize_facetimeAudioIcon,
        *(double *)&facetimeAudioIcon_sCustomTextFontSize_facetimeAudioIcon != v7)
    || (objc_msgSend((id)facetimeAudioIcon_sCustomTextFontName_facetimeAudioIcon, "isEqualToString:", v10, *(double *)&facetimeAudioIcon_sCustomTextFontSize_facetimeAudioIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "ckImageNamed:", @"messages-header-audio-glyph", *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4F428B8] ckColorNamed:@"CKSystemGrayColor"];
    uint64_t v15 = [v13 _flatImageWithColor:v14];
    double v16 = (void *)facetimeAudioIcon_sBehavior;
    facetimeAudioIcon_sBehavior = v15;

    objc_storeStrong((id *)&facetimeAudioIcon_sContentSizeCategory_facetimeAudioIcon, v3);
    facetimeAudioIcon_sIsIncreaseContrastEnabled_facetimeAudioIcon = v4;
    facetimeAudioIcon_sIsBoldTextEnabled_facetimeAudioIcon = IsBoldTextEnabled;
    facetimeAudioIcon_sTextFontSize_facetimeAudioIcon = *(void *)&v6;
    facetimeAudioIcon_sCustomTextFontSize_facetimeAudioIcon = *(void *)&v7;
    objc_storeStrong((id *)&facetimeAudioIcon_sCustomTextFontName_facetimeAudioIcon, v9);
  }
  uint64_t v17 = (UIImage *)(id)facetimeAudioIcon_sBehavior;

  return v17;
}

- (BOOL)ckShouldUpdatescreenTimeConversationListSummaryIcon
{
  return 0;
}

- (UIImage)screenTimeConversationListSummaryIcon
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)screenTimeConversationListSummaryIcon_sContentSizeCategory_screenTimeConversationListSummaryIcon, v3);
  if (-[CKUIBehavior ckShouldUpdatescreenTimeConversationListSummaryIcon](self, "ckShouldUpdatescreenTimeConversationListSummaryIcon")|| v11|| screenTimeConversationListSummaryIcon_sIsIncreaseContrastEnabled_screenTimeConversationListSummaryIcon != v4|| screenTimeConversationListSummaryIcon_sIsBoldTextEnabled_screenTimeConversationListSummaryIcon != IsBoldTextEnabled|| (uint64_t v12 = screenTimeConversationListSummaryIcon_sTextFontSize_screenTimeConversationListSummaryIcon, *(double *)&screenTimeConversationListSummaryIcon_sTextFontSize_screenTimeConversationListSummaryIcon != v6)|| (uint64_t v12 = screenTimeConversationListSummaryIcon_sCustomTextFontSize_screenTimeConversationListSummaryIcon, *(double *)&screenTimeConversationListSummaryIcon_sCustomTextFontSize_screenTimeConversationListSummaryIcon != v7)|| (objc_msgSend((id)screenTimeConversationListSummaryIcon_sCustomTextFontName_screenTimeConversationListSummaryIcon, "isEqualToString:", v10, *(double *)&screenTimeConversationListSummaryIcon_sCustomTextFontSize_screenTimeConversationListSummaryIcon) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A80], "systemImageNamed:", @"hourglass.tophalf.filled", *(double *)&v12);
    uint64_t v14 = (void *)screenTimeConversationListSummaryIcon_sBehavior;
    screenTimeConversationListSummaryIcon_sBehavior = v13;

    objc_storeStrong((id *)&screenTimeConversationListSummaryIcon_sContentSizeCategory_screenTimeConversationListSummaryIcon, v3);
    screenTimeConversationListSummaryIcon_sIsIncreaseContrastEnabled_screenTimeConversationListSummaryIcon = v4;
    screenTimeConversationListSummaryIcon_sIsBoldTextEnabled_screenTimeConversationListSummaryIcon = IsBoldTextEnabled;
    screenTimeConversationListSummaryIcon_sTextFontSize_screenTimeConversationListSummaryIcon = *(void *)&v6;
    screenTimeConversationListSummaryIcon_sCustomTextFontSize_screenTimeConversationListSummaryIcon = *(void *)&v7;
    objc_storeStrong((id *)&screenTimeConversationListSummaryIcon_sCustomTextFontName_screenTimeConversationListSummaryIcon, v9);
  }
  uint64_t v15 = (UIImage *)(id)screenTimeConversationListSummaryIcon_sBehavior;

  return v15;
}

- (double)messageEditingButtonInternalPadding
{
  if (messageEditingButtonInternalPadding_once != -1) {
    dispatch_once(&messageEditingButtonInternalPadding_once, &__block_literal_global_919_0);
  }
  return *(double *)&messageEditingButtonInternalPadding_sBehavior;
}

void __51__CKUIBehavior_messageEditingButtonInternalPadding__block_invoke()
{
  messageEditingButtonInternalPadding_sBehavior = 0x4000000000000000;
}

- (double)messageEditingNonCompactBalloonToLeftButtonPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __66__CKUIBehavior_messageEditingNonCompactBalloonToLeftButtonPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageEditingNonCompactBalloonToLeftButtonPadding_once != -1) {
    dispatch_once(&messageEditingNonCompactBalloonToLeftButtonPadding_once, block);
  }
  return *(double *)&messageEditingNonCompactBalloonToLeftButtonPadding_sBehavior;
}

double __66__CKUIBehavior_messageEditingNonCompactBalloonToLeftButtonPadding__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) messageEditingButtonInternalPadding];
  double result = 8.0 - v1;
  messageEditingNonCompactBalloonToLeftButtonPadding_sBehavior = *(void *)&result;
  return result;
}

- (double)messageEditingNonCompactBalloonPillEdgeToRightButtonPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __75__CKUIBehavior_messageEditingNonCompactBalloonPillEdgeToRightButtonPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageEditingNonCompactBalloonPillEdgeToRightButtonPadding_once != -1) {
    dispatch_once(&messageEditingNonCompactBalloonPillEdgeToRightButtonPadding_once, block);
  }
  return *(double *)&messageEditingNonCompactBalloonPillEdgeToRightButtonPadding_sBehavior;
}

double __75__CKUIBehavior_messageEditingNonCompactBalloonPillEdgeToRightButtonPadding__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) messageEditingButtonInternalPadding];
  double result = 12.0 - v1;
  messageEditingNonCompactBalloonPillEdgeToRightButtonPadding_sBehavior = *(void *)&result;
  return result;
}

- (double)messageEditingNonCompactRightEdgeToButtonPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __64__CKUIBehavior_messageEditingNonCompactRightEdgeToButtonPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageEditingNonCompactRightEdgeToButtonPadding_once != -1) {
    dispatch_once(&messageEditingNonCompactRightEdgeToButtonPadding_once, block);
  }
  return *(double *)&messageEditingNonCompactRightEdgeToButtonPadding_sBehavior;
}

double __64__CKUIBehavior_messageEditingNonCompactRightEdgeToButtonPadding__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) messageEditingButtonInternalPadding];
  double result = 16.0 - v1;
  messageEditingNonCompactRightEdgeToButtonPadding_sBehavior = *(void *)&result;
  return result;
}

- (double)messageEditingNonCompactLeftEdgeToButtonMinimumPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __70__CKUIBehavior_messageEditingNonCompactLeftEdgeToButtonMinimumPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageEditingNonCompactLeftEdgeToButtonMinimumPadding_once != -1) {
    dispatch_once(&messageEditingNonCompactLeftEdgeToButtonMinimumPadding_once, block);
  }
  return *(double *)&messageEditingNonCompactLeftEdgeToButtonMinimumPadding_sBehavior;
}

double __70__CKUIBehavior_messageEditingNonCompactLeftEdgeToButtonMinimumPadding__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) messageEditingButtonInternalPadding];
  double result = 16.0 - v1;
  messageEditingNonCompactLeftEdgeToButtonMinimumPadding_sBehavior = *(void *)&result;
  return result;
}

- (double)messageEditingCompactTrailingEdgeToButtonPadding
{
  if (messageEditingCompactTrailingEdgeToButtonPadding_once != -1) {
    dispatch_once(&messageEditingCompactTrailingEdgeToButtonPadding_once, &__block_literal_global_921);
  }
  return *(double *)&messageEditingCompactTrailingEdgeToButtonPadding_sBehavior;
}

void __64__CKUIBehavior_messageEditingCompactTrailingEdgeToButtonPadding__block_invoke()
{
  messageEditingCompactTrailingEdgeToButtonPadding_sBehavior = 0x4030000000000000;
}

- (double)messageEditingKeyboardToBalloonPreferredPadding
{
  if (messageEditingKeyboardToBalloonPreferredPadding_once != -1) {
    dispatch_once(&messageEditingKeyboardToBalloonPreferredPadding_once, &__block_literal_global_923);
  }
  return *(double *)&messageEditingKeyboardToBalloonPreferredPadding_sBehavior;
}

void __63__CKUIBehavior_messageEditingKeyboardToBalloonPreferredPadding__block_invoke()
{
  messageEditingKeyboardToBalloonPreferredPadding_sBehavior = 0x4034000000000000;
}

- (double)messageEditingKeyboardToBalloonMinimumPadding
{
  if (messageEditingKeyboardToBalloonMinimumPadding_once != -1) {
    dispatch_once(&messageEditingKeyboardToBalloonMinimumPadding_once, &__block_literal_global_925);
  }
  return *(double *)&messageEditingKeyboardToBalloonMinimumPadding_sBehavior;
}

void __61__CKUIBehavior_messageEditingKeyboardToBalloonMinimumPadding__block_invoke()
{
  messageEditingKeyboardToBalloonMinimumPadding_sBehavior = 0x4014000000000000;
}

- (double)messageEditingBalloonToNavBarMinimumPadding
{
  if (messageEditingBalloonToNavBarMinimumPadding_once != -1) {
    dispatch_once(&messageEditingBalloonToNavBarMinimumPadding_once, &__block_literal_global_927);
  }
  return *(double *)&messageEditingBalloonToNavBarMinimumPadding_sBehavior;
}

void __59__CKUIBehavior_messageEditingBalloonToNavBarMinimumPadding__block_invoke()
{
  messageEditingBalloonToNavBarMinimumPadding_sBehavior = 0x4014000000000000;
}

- (double)messageEditingAnimateInDuration
{
  if (messageEditingAnimateInDuration_once != -1) {
    dispatch_once(&messageEditingAnimateInDuration_once, &__block_literal_global_929_0);
  }
  return *(double *)&messageEditingAnimateInDuration_sBehavior;
}

void __47__CKUIBehavior_messageEditingAnimateInDuration__block_invoke()
{
  messageEditingAnimateInDuration_sBehavior = 0x3FE0000000000000;
}

- (double)messageEditingAnimateInDamping
{
  if (messageEditingAnimateInDamping_once != -1) {
    dispatch_once(&messageEditingAnimateInDamping_once, &__block_literal_global_931_0);
  }
  return *(double *)&messageEditingAnimateInDamping_sBehavior;
}

void __46__CKUIBehavior_messageEditingAnimateInDamping__block_invoke()
{
  messageEditingAnimateInDamping_sBehavior = 0x3FF0000000000000;
}

- (double)messageEditingAnimateOutDuration
{
  if (messageEditingAnimateOutDuration_once != -1) {
    dispatch_once(&messageEditingAnimateOutDuration_once, &__block_literal_global_933_0);
  }
  return *(double *)&messageEditingAnimateOutDuration_sBehavior;
}

void __48__CKUIBehavior_messageEditingAnimateOutDuration__block_invoke()
{
  messageEditingAnimateOutDuration_sBehavior = 0x3FE0000000000000;
}

- (double)messageEditingAnimateOutDamping
{
  if (messageEditingAnimateOutDamping_once != -1) {
    dispatch_once(&messageEditingAnimateOutDamping_once, &__block_literal_global_935);
  }
  return *(double *)&messageEditingAnimateOutDamping_sBehavior;
}

void __47__CKUIBehavior_messageEditingAnimateOutDamping__block_invoke()
{
  messageEditingAnimateOutDamping_sBehavior = 0x3FF0000000000000;
}

- (BOOL)ckShouldUpdatereplyPreviewLocationIconName
{
  return 0;
}

- (NSString)replyPreviewLocationIconName
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)replyPreviewLocationIconName_sContentSizeCategory_replyPreviewLocationIconName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatereplyPreviewLocationIconName]
    || v11
    || replyPreviewLocationIconName_sIsIncreaseContrastEnabled_replyPreviewLocationIconName != v4
    || replyPreviewLocationIconName_sIsBoldTextEnabled_replyPreviewLocationIconName != IsBoldTextEnabled
    || *(double *)&replyPreviewLocationIconName_sTextFontSize_replyPreviewLocationIconName != v6
    || *(double *)&replyPreviewLocationIconName_sCustomTextFontSize_replyPreviewLocationIconName != v7
    || (objc_msgSend((id)replyPreviewLocationIconName_sCustomTextFontName_replyPreviewLocationIconName, "isEqualToString:", v10, *(double *)&replyPreviewLocationIconName_sCustomTextFontSize_replyPreviewLocationIconName) & 1) == 0)
  {
    uint64_t v12 = (void *)replyPreviewLocationIconName_sBehavior;
    replyPreviewLocationIconName_sBehavior = @"mappin.circle.fill";

    objc_storeStrong((id *)&replyPreviewLocationIconName_sContentSizeCategory_replyPreviewLocationIconName, v3);
    replyPreviewLocationIconName_sIsIncreaseContrastEnabled_replyPreviewLocationIconName = v4;
    replyPreviewLocationIconName_sIsBoldTextEnabled_replyPreviewLocationIconName = IsBoldTextEnabled;
    replyPreviewLocationIconName_sTextFontSize_replyPreviewLocationIconName = *(void *)&v6;
    replyPreviewLocationIconName_sCustomTextFontSize_replyPreviewLocationIconName = *(void *)&v7;
    objc_storeStrong((id *)&replyPreviewLocationIconName_sCustomTextFontName_replyPreviewLocationIconName, v9);
  }
  uint64_t v13 = (NSString *)(id)replyPreviewLocationIconName_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdatereplyPreviewContactIconName
{
  return 0;
}

- (NSString)replyPreviewContactIconName
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)replyPreviewContactIconName_sContentSizeCategory_replyPreviewContactIconName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatereplyPreviewContactIconName]
    || v11
    || replyPreviewContactIconName_sIsIncreaseContrastEnabled_replyPreviewContactIconName != v4
    || replyPreviewContactIconName_sIsBoldTextEnabled_replyPreviewContactIconName != IsBoldTextEnabled
    || *(double *)&replyPreviewContactIconName_sTextFontSize_replyPreviewContactIconName != v6
    || *(double *)&replyPreviewContactIconName_sCustomTextFontSize_replyPreviewContactIconName != v7
    || (objc_msgSend((id)replyPreviewContactIconName_sCustomTextFontName_replyPreviewContactIconName, "isEqualToString:", v10, *(double *)&replyPreviewContactIconName_sCustomTextFontSize_replyPreviewContactIconName) & 1) == 0)
  {
    uint64_t v12 = (void *)replyPreviewContactIconName_sBehavior;
    replyPreviewContactIconName_sBehavior = @"person.crop.circle";

    objc_storeStrong((id *)&replyPreviewContactIconName_sContentSizeCategory_replyPreviewContactIconName, v3);
    replyPreviewContactIconName_sIsIncreaseContrastEnabled_replyPreviewContactIconName = v4;
    replyPreviewContactIconName_sIsBoldTextEnabled_replyPreviewContactIconName = IsBoldTextEnabled;
    replyPreviewContactIconName_sTextFontSize_replyPreviewContactIconName = *(void *)&v6;
    replyPreviewContactIconName_sCustomTextFontSize_replyPreviewContactIconName = *(void *)&v7;
    objc_storeStrong((id *)&replyPreviewContactIconName_sCustomTextFontName_replyPreviewContactIconName, v9);
  }
  uint64_t v13 = (NSString *)(id)replyPreviewContactIconName_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdatereplyPreviewDocumentIconName
{
  return 0;
}

- (NSString)replyPreviewDocumentIconName
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)replyPreviewDocumentIconName_sContentSizeCategory_replyPreviewDocumentIconName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatereplyPreviewDocumentIconName]
    || v11
    || replyPreviewDocumentIconName_sIsIncreaseContrastEnabled_replyPreviewDocumentIconName != v4
    || replyPreviewDocumentIconName_sIsBoldTextEnabled_replyPreviewDocumentIconName != IsBoldTextEnabled
    || *(double *)&replyPreviewDocumentIconName_sTextFontSize_replyPreviewDocumentIconName != v6
    || *(double *)&replyPreviewDocumentIconName_sCustomTextFontSize_replyPreviewDocumentIconName != v7
    || (objc_msgSend((id)replyPreviewDocumentIconName_sCustomTextFontName_replyPreviewDocumentIconName, "isEqualToString:", v10, *(double *)&replyPreviewDocumentIconName_sCustomTextFontSize_replyPreviewDocumentIconName) & 1) == 0)
  {
    uint64_t v12 = (void *)replyPreviewDocumentIconName_sBehavior;
    replyPreviewDocumentIconName_sBehavior = @"doc";

    objc_storeStrong((id *)&replyPreviewDocumentIconName_sContentSizeCategory_replyPreviewDocumentIconName, v3);
    replyPreviewDocumentIconName_sIsIncreaseContrastEnabled_replyPreviewDocumentIconName = v4;
    replyPreviewDocumentIconName_sIsBoldTextEnabled_replyPreviewDocumentIconName = IsBoldTextEnabled;
    replyPreviewDocumentIconName_sTextFontSize_replyPreviewDocumentIconName = *(void *)&v6;
    replyPreviewDocumentIconName_sCustomTextFontSize_replyPreviewDocumentIconName = *(void *)&v7;
    objc_storeStrong((id *)&replyPreviewDocumentIconName_sCustomTextFontName_replyPreviewDocumentIconName, v9);
  }
  uint64_t v13 = (NSString *)(id)replyPreviewDocumentIconName_sBehavior;

  return v13;
}

- (double)replyTranscriptBackgroundBlurRadius
{
  if (replyTranscriptBackgroundBlurRadius_once != -1) {
    dispatch_once(&replyTranscriptBackgroundBlurRadius_once, &__block_literal_global_946_0);
  }
  return *(double *)&replyTranscriptBackgroundBlurRadius_sBehavior;
}

void __51__CKUIBehavior_replyTranscriptBackgroundBlurRadius__block_invoke()
{
  replyTranscriptBackgroundBlurRadius_sBehavior = 0x401C000000000000;
}

- (BOOL)replyTranscriptBackgroundDoesSupportTransparentBlurVisualEffect
{
  if (replyTranscriptBackgroundDoesSupportTransparentBlurVisualEffect_once != -1) {
    dispatch_once(&replyTranscriptBackgroundDoesSupportTransparentBlurVisualEffect_once, &__block_literal_global_948_0);
  }
  return replyTranscriptBackgroundDoesSupportTransparentBlurVisualEffect_sBehavior;
}

void __79__CKUIBehavior_replyTranscriptBackgroundDoesSupportTransparentBlurVisualEffect__block_invoke()
{
  replyTranscriptBackgroundDoesSupportTransparentBlurVisualEffect_sBehavior = 1;
}

- (double)replyTranscriptBackgroundBlurAnimationTime
{
  if (replyTranscriptBackgroundBlurAnimationTime_once != -1) {
    dispatch_once(&replyTranscriptBackgroundBlurAnimationTime_once, &__block_literal_global_950_0);
  }
  return *(double *)&replyTranscriptBackgroundBlurAnimationTime_sBehavior;
}

void __58__CKUIBehavior_replyTranscriptBackgroundBlurAnimationTime__block_invoke()
{
  replyTranscriptBackgroundBlurAnimationTime_sBehavior = 0x3FD3333333333333;
}

- (double)replyTranscriptUpdateBannerAnimateInTime
{
  if (replyTranscriptUpdateBannerAnimateInTime_once != -1) {
    dispatch_once(&replyTranscriptUpdateBannerAnimateInTime_once, &__block_literal_global_952_0);
  }
  return *(double *)&replyTranscriptUpdateBannerAnimateInTime_sBehavior;
}

void __56__CKUIBehavior_replyTranscriptUpdateBannerAnimateInTime__block_invoke()
{
  replyTranscriptUpdateBannerAnimateInTime_sBehavior = 0x3FC999999999999ALL;
}

- (double)replyTranscriptUpdateBannerAnimateOutTime
{
  if (replyTranscriptUpdateBannerAnimateOutTime_once != -1) {
    dispatch_once(&replyTranscriptUpdateBannerAnimateOutTime_once, &__block_literal_global_954_0);
  }
  return *(double *)&replyTranscriptUpdateBannerAnimateOutTime_sBehavior;
}

void __57__CKUIBehavior_replyTranscriptUpdateBannerAnimateOutTime__block_invoke()
{
  replyTranscriptUpdateBannerAnimateOutTime_sBehavior = 0x3FB999999999999ALL;
}

- (BOOL)ckShouldUpdatereplyButtonFont
{
  return 0;
}

- (UIFont)replyButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)replyButtonFont_sContentSizeCategory_replyButtonFont, v3);
  BOOL v12 = [(CKUIBehavior *)self ckShouldUpdatereplyButtonFont];
  uint64_t v14 = &OBJC_IVAR___CKAudioMessageRecordingView_cornerRadius;
  if (v12
    || v11
    || replyButtonFont_sIsIncreaseContrastEnabled_replyButtonFont != v4
    || replyButtonFont_sIsBoldTextEnabled_replyButtonFont != IsBoldTextEnabled
    || (uint64_t v13 = replyButtonFont_sTextFontSize_replyButtonFont,
        *(double *)&replyButtonFont_sTextFontSize_replyButtonFont != v6)
    || (uint64_t v13 = replyButtonFont_sCustomTextFontSize_replyButtonFont,
        *(double *)&replyButtonFont_sCustomTextFontSize_replyButtonFont != v7)
    || (objc_msgSend((id)replyButtonFont_sCustomTextFontName_replyButtonFont, "isEqualToString:", v10, *(double *)&replyButtonFont_sCustomTextFontSize_replyButtonFont) & 1) == 0)
  {
    uint64_t v15 = *MEMORY[0x1E4F438C8];
    double v16 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:", *MEMORY[0x1E4F438C8], *(double *)&v13);
    uint64_t v17 = [MEMORY[0x1E4F42A40] metricsForTextStyle:v15];
    uint64_t v18 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v16 size:18.0];
    uint64_t v19 = [v17 scaledFontForFont:v18];

    uint64_t v14 = &OBJC_IVAR___CKAudioMessageRecordingView_cornerRadius;
    char v20 = (void *)replyButtonFont_sBehavior;
    replyButtonFont_sBehavior = v19;

    objc_storeStrong((id *)&replyButtonFont_sContentSizeCategory_replyButtonFont, v3);
    replyButtonFont_sIsIncreaseContrastEnabled_replyButtonFont = v4;
    replyButtonFont_sIsBoldTextEnabled_replyButtonFont = IsBoldTextEnabled;
    replyButtonFont_sTextFontSize_replyButtonFont = *(void *)&v6;
    replyButtonFont_sCustomTextFontSize_replyButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&replyButtonFont_sCustomTextFontName_replyButtonFont, v9);
  }
  double v21 = (UIFont *)(id)v14[286];

  return v21;
}

- (double)replyButtonBackgroundBlurRadius
{
  if (replyButtonBackgroundBlurRadius_once != -1) {
    dispatch_once(&replyButtonBackgroundBlurRadius_once, &__block_literal_global_957);
  }
  return *(double *)&replyButtonBackgroundBlurRadius_sBehavior;
}

void __47__CKUIBehavior_replyButtonBackgroundBlurRadius__block_invoke()
{
  replyButtonBackgroundBlurRadius_sBehavior = 0x4014000000000000;
}

- (CGPoint)replyButtonRelativePosition
{
  if (replyButtonRelativePosition_once != -1) {
    dispatch_once(&replyButtonRelativePosition_once, &__block_literal_global_959);
  }
  double v2 = *(double *)&replyButtonRelativePosition_sBehavior_0;
  double v3 = *(double *)&replyButtonRelativePosition_sBehavior_1;
  result.y = v3;
  result.x = v2;
  return result;
}

void __43__CKUIBehavior_replyButtonRelativePosition__block_invoke()
{
  replyButtonRelativePosition_sBehavior_0 = 0x4018000000000000;
  replyButtonRelativePosition_sBehavior_1 = 0x402C000000000000;
}

- (double)replyButtonHorizontalOriginOffsetPercent
{
  if (replyButtonHorizontalOriginOffsetPercent_once != -1) {
    dispatch_once(&replyButtonHorizontalOriginOffsetPercent_once, &__block_literal_global_961);
  }
  return *(double *)&replyButtonHorizontalOriginOffsetPercent_sBehavior;
}

void __56__CKUIBehavior_replyButtonHorizontalOriginOffsetPercent__block_invoke()
{
  replyButtonHorizontalOriginOffsetPercent_sBehavior = 0x3FE3333333333333;
}

- (double)replyButtonVerticalOriginOffsetPercent
{
  if (replyButtonVerticalOriginOffsetPercent_once != -1) {
    dispatch_once(&replyButtonVerticalOriginOffsetPercent_once, &__block_literal_global_963);
  }
  return *(double *)&replyButtonVerticalOriginOffsetPercent_sBehavior;
}

void __54__CKUIBehavior_replyButtonVerticalOriginOffsetPercent__block_invoke()
{
  replyButtonVerticalOriginOffsetPercent_sBehavior = 0x3FC851EB851EB852;
}

- (double)replyButtonAnimationDuration
{
  if (replyButtonAnimationDuration_once != -1) {
    dispatch_once(&replyButtonAnimationDuration_once, &__block_literal_global_965);
  }
  return *(double *)&replyButtonAnimationDuration_sBehavior;
}

void __44__CKUIBehavior_replyButtonAnimationDuration__block_invoke()
{
  replyButtonAnimationDuration_sBehavior = 0x3FD6666666666666;
}

- (double)replyButtonBorderWidth
{
  if (replyButtonBorderWidth_once != -1) {
    dispatch_once(&replyButtonBorderWidth_once, &__block_literal_global_967);
  }
  return *(double *)&replyButtonBorderWidth_sBehavior;
}

void __38__CKUIBehavior_replyButtonBorderWidth__block_invoke()
{
  replyButtonBorderWidth_sBehavior = 0x3FE0000000000000;
}

- (double)replyButtonTouchScale
{
  if (replyButtonTouchScale_once != -1) {
    dispatch_once(&replyButtonTouchScale_once, &__block_literal_global_969);
  }
  return *(double *)&replyButtonTouchScale_sBehavior;
}

void __37__CKUIBehavior_replyButtonTouchScale__block_invoke()
{
  replyButtonTouchScale_sBehavior = 0x3FEB333333333333;
}

- (double)replyButtonTouchAlpha
{
  if (replyButtonTouchAlpha_once != -1) {
    dispatch_once(&replyButtonTouchAlpha_once, &__block_literal_global_971);
  }
  return *(double *)&replyButtonTouchAlpha_sBehavior;
}

void __37__CKUIBehavior_replyButtonTouchAlpha__block_invoke()
{
  replyButtonTouchAlpha_sBehavior = 0x3FD999999999999ALL;
}

- (double)replyButtonPadding
{
  if (replyButtonPadding_once != -1) {
    dispatch_once(&replyButtonPadding_once, &__block_literal_global_973);
  }
  return 0.0;
}

- (UIEdgeInsets)replyButtonEdgeInsets
{
  if (replyButtonEdgeInsets_once != -1) {
    dispatch_once(&replyButtonEdgeInsets_once, &__block_literal_global_975);
  }
  double v2 = *(double *)&replyButtonEdgeInsets_sBehavior_0;
  double v3 = *(double *)&replyButtonEdgeInsets_sBehavior_1;
  double v4 = *(double *)&replyButtonEdgeInsets_sBehavior_2;
  double v5 = *(double *)&replyButtonEdgeInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __37__CKUIBehavior_replyButtonEdgeInsets__block_invoke()
{
  replyButtonEdgeInsets_sBehavior_0 = 0x4020000000000000;
  replyButtonEdgeInsets_sBehavior_1 = 0x402C000000000000;
  replyButtonEdgeInsets_sBehavior_2 = 0x4020000000000000;
  replyButtonEdgeInsets_sBehavior_3 = 0x402C000000000000;
}

- (double)replyEntryViewBackagroundAlpha
{
  if (replyEntryViewBackagroundAlpha_once != -1) {
    dispatch_once(&replyEntryViewBackagroundAlpha_once, &__block_literal_global_977);
  }
  return *(double *)&replyEntryViewBackagroundAlpha_sBehavior;
}

void __46__CKUIBehavior_replyEntryViewBackagroundAlpha__block_invoke()
{
  replyEntryViewBackagroundAlpha_sBehavior = 0x3FD0000000000000;
}

- (BOOL)replyShouldShowKeyboard
{
  if (replyShouldShowKeyboard_once != -1) {
    dispatch_once(&replyShouldShowKeyboard_once, &__block_literal_global_979);
  }
  return replyShouldShowKeyboard_sBehavior;
}

uint64_t __39__CKUIBehavior_replyShouldShowKeyboard__block_invoke()
{
  uint64_t result = CKIsRunningInMacCatalyst();
  replyShouldShowKeyboard_sBehavior = result == 0;
  return result;
}

- (BOOL)restoringDraftShouldShowKeyboard
{
  if (restoringDraftShouldShowKeyboard_once != -1) {
    dispatch_once(&restoringDraftShouldShowKeyboard_once, &__block_literal_global_981);
  }
  return restoringDraftShouldShowKeyboard_sBehavior;
}

void __48__CKUIBehavior_restoringDraftShouldShowKeyboard__block_invoke()
{
  restoringDraftShouldShowKeyboard_sBehavior = 1;
}

- (CGSize)endingReplyIndicatorSize
{
  if (endingReplyIndicatorSize_once != -1) {
    dispatch_once(&endingReplyIndicatorSize_once, &__block_literal_global_983);
  }
  double v2 = *(double *)&endingReplyIndicatorSize_sBehavior_0;
  double v3 = *(double *)&endingReplyIndicatorSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __40__CKUIBehavior_endingReplyIndicatorSize__block_invoke()
{
  endingReplyIndicatorSize_sBehavior_0 = 0x403A000000000000;
  endingReplyIndicatorSize_sBehavior_1 = 0x403A000000000000;
}

- (double)blurBoundOutsetPadding
{
  if (blurBoundOutsetPadding_once != -1) {
    dispatch_once(&blurBoundOutsetPadding_once, &__block_literal_global_985);
  }
  return *(double *)&blurBoundOutsetPadding_sBehavior;
}

void __38__CKUIBehavior_blurBoundOutsetPadding__block_invoke()
{
  blurBoundOutsetPadding_sBehavior = 0x4020000000000000;
}

- (double)initialReplyIndicatorBlurRadius
{
  if (initialReplyIndicatorBlurRadius_once != -1) {
    dispatch_once(&initialReplyIndicatorBlurRadius_once, &__block_literal_global_987);
  }
  return *(double *)&initialReplyIndicatorBlurRadius_sBehavior;
}

void __47__CKUIBehavior_initialReplyIndicatorBlurRadius__block_invoke()
{
  initialReplyIndicatorBlurRadius_sBehavior = 0x4012000000000000;
}

- (double)initialReplyIndicatorScale
{
  if (initialReplyIndicatorScale_once != -1) {
    dispatch_once(&initialReplyIndicatorScale_once, &__block_literal_global_989);
  }
  return *(double *)&initialReplyIndicatorScale_sBehavior;
}

void __42__CKUIBehavior_initialReplyIndicatorScale__block_invoke()
{
  initialReplyIndicatorScale_sBehavior = 0x3FD999999999999ALL;
}

- (double)finalReplyIndicatorScale
{
  if (finalReplyIndicatorScale_once != -1) {
    dispatch_once(&finalReplyIndicatorScale_once, &__block_literal_global_991);
  }
  return *(double *)&finalReplyIndicatorScale_sBehavior;
}

void __40__CKUIBehavior_finalReplyIndicatorScale__block_invoke()
{
  finalReplyIndicatorScale_sBehavior = 0x3FF0000000000000;
}

- (double)maxPulseReplyIndicatorScale
{
  if (maxPulseReplyIndicatorScale_once != -1) {
    dispatch_once(&maxPulseReplyIndicatorScale_once, &__block_literal_global_993);
  }
  return *(double *)&maxPulseReplyIndicatorScale_sBehavior;
}

void __43__CKUIBehavior_maxPulseReplyIndicatorScale__block_invoke()
{
  maxPulseReplyIndicatorScale_sBehavior = 0x3FF2666666666666;
}

- (double)replyToSelfButtonOffset
{
  if (replyToSelfButtonOffset_once != -1) {
    dispatch_once(&replyToSelfButtonOffset_once, &__block_literal_global_995);
  }
  return *(double *)&replyToSelfButtonOffset_sBehavior;
}

void __39__CKUIBehavior_replyToSelfButtonOffset__block_invoke()
{
  replyToSelfButtonOffset_sBehavior = 0x4028000000000000;
}

- (double)swipeToReplyConfirmThreshold
{
  if (swipeToReplyConfirmThreshold_once != -1) {
    dispatch_once(&swipeToReplyConfirmThreshold_once, &__block_literal_global_997_0);
  }
  return *(double *)&swipeToReplyConfirmThreshold_sBehavior;
}

void __44__CKUIBehavior_swipeToReplyConfirmThreshold__block_invoke()
{
  swipeToReplyConfirmThreshold_sBehavior = 0x4044000000000000;
}

- (double)swipeToReplyShowIndicatorThreshold
{
  if (swipeToReplyShowIndicatorThreshold_once != -1) {
    dispatch_once(&swipeToReplyShowIndicatorThreshold_once, &__block_literal_global_999);
  }
  return *(double *)&swipeToReplyShowIndicatorThreshold_sBehavior;
}

void __50__CKUIBehavior_swipeToReplyShowIndicatorThreshold__block_invoke()
{
  swipeToReplyShowIndicatorThreshold_sBehavior = 0x4036000000000000;
}

- (double)replyIndicatorPulseAnimationDuration
{
  if (replyIndicatorPulseAnimationDuration_once != -1) {
    dispatch_once(&replyIndicatorPulseAnimationDuration_once, &__block_literal_global_1001);
  }
  return *(double *)&replyIndicatorPulseAnimationDuration_sBehavior;
}

void __52__CKUIBehavior_replyIndicatorPulseAnimationDuration__block_invoke()
{
  replyIndicatorPulseAnimationDuration_sBehavior = 0x3FD3333333333333;
}

- (double)replyIndicatorResetAnimationDuration
{
  if (replyIndicatorResetAnimationDuration_once != -1) {
    dispatch_once(&replyIndicatorResetAnimationDuration_once, &__block_literal_global_1003);
  }
  return *(double *)&replyIndicatorResetAnimationDuration_sBehavior;
}

void __52__CKUIBehavior_replyIndicatorResetAnimationDuration__block_invoke()
{
  replyIndicatorResetAnimationDuration_sBehavior = 0x3FD999999999999ALL;
}

- (double)balloonResetAnimationDuration
{
  if (balloonResetAnimationDuration_once != -1) {
    dispatch_once(&balloonResetAnimationDuration_once, &__block_literal_global_1005);
  }
  return *(double *)&balloonResetAnimationDuration_sBehavior;
}

void __45__CKUIBehavior_balloonResetAnimationDuration__block_invoke()
{
  balloonResetAnimationDuration_sBehavior = 0x3FD0000000000000;
}

- (double)catchUpButtonPadding
{
  if (catchUpButtonPadding_once != -1) {
    dispatch_once(&catchUpButtonPadding_once, &__block_literal_global_1007);
  }
  return *(double *)&catchUpButtonPadding_sBehavior;
}

void __36__CKUIBehavior_catchUpButtonPadding__block_invoke()
{
  catchUpButtonPadding_sBehavior = 0x402C000000000000;
}

- (double)curveValueForSwipeWithVelocity:(CGPoint)a3 t:(double)a4
{
  cubicPoint(0.0, 1.0, 0.0, 1.5, 0.8, 1.0, 1.0, 0.0, a4);
  return v4;
}

- (UIColor)conversationListSIMLabelBackgroundColor
{
  if (conversationListSIMLabelBackgroundColor_once != -1) {
    dispatch_once(&conversationListSIMLabelBackgroundColor_once, &__block_literal_global_1009);
  }
  double v2 = (void *)conversationListSIMLabelBackgroundColor_sBehavior;

  return (UIColor *)v2;
}

void __55__CKUIBehavior_conversationListSIMLabelBackgroundColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] secondaryLabelColor];
  double v1 = (void *)conversationListSIMLabelBackgroundColor_sBehavior;
  conversationListSIMLabelBackgroundColor_sBehavior = v0;
}

- (UIColor)conversationListSIMLabelTextColor
{
  if (conversationListSIMLabelTextColor_once != -1) {
    dispatch_once(&conversationListSIMLabelTextColor_once, &__block_literal_global_1011);
  }
  double v2 = (void *)conversationListSIMLabelTextColor_sBehavior;

  return (UIColor *)v2;
}

void __49__CKUIBehavior_conversationListSIMLabelTextColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] systemBackgroundColor];
  double v1 = (void *)conversationListSIMLabelTextColor_sBehavior;
  conversationListSIMLabelTextColor_sBehavior = v0;
}

- (double)conversationListSIMLabelHeightTextSizeRatio
{
  if (conversationListSIMLabelHeightTextSizeRatio_once != -1) {
    dispatch_once(&conversationListSIMLabelHeightTextSizeRatio_once, &__block_literal_global_1013);
  }
  return *(double *)&conversationListSIMLabelHeightTextSizeRatio_sBehavior;
}

void __59__CKUIBehavior_conversationListSIMLabelHeightTextSizeRatio__block_invoke()
{
  conversationListSIMLabelHeightTextSizeRatio_sBehavior = 0x3FF6000000000000;
}

- (double)conversationListSIMLabelBaseBuffer
{
  if (conversationListSIMLabelBaseBuffer_once != -1) {
    dispatch_once(&conversationListSIMLabelBaseBuffer_once, &__block_literal_global_1017_0);
  }
  return *(double *)&conversationListSIMLabelBaseBuffer_sBehavior;
}

void __50__CKUIBehavior_conversationListSIMLabelBaseBuffer__block_invoke()
{
  conversationListSIMLabelBaseBuffer_sBehavior = 0x4018000000000000;
}

- (BOOL)shouldUseDynamicGradient
{
  if (shouldUseDynamicGradient_once != -1) {
    dispatch_once(&shouldUseDynamicGradient_once, &__block_literal_global_1019);
  }
  return shouldUseDynamicGradient_sBehavior;
}

void __40__CKUIBehavior_shouldUseDynamicGradient__block_invoke()
{
  if (CKIsP101_onceToken != -1) {
    dispatch_once(&CKIsP101_onceToken, &__block_literal_global_5997);
  }
  shouldUseDynamicGradient_sBehavior = CKIsP101_sIsP101 ^ 1;
}

- (BOOL)hyphenatesTextContent
{
  if (hyphenatesTextContent_once != -1) {
    dispatch_once(&hyphenatesTextContent_once, &__block_literal_global_1021);
  }
  return 0;
}

- (BOOL)shouldAdjustWidthForSendFailure
{
  if (shouldAdjustWidthForSendFailure_once != -1) {
    dispatch_once(&shouldAdjustWidthForSendFailure_once, &__block_literal_global_1023);
  }
  return shouldAdjustWidthForSendFailure_sBehavior;
}

void __47__CKUIBehavior_shouldAdjustWidthForSendFailure__block_invoke()
{
  shouldAdjustWidthForSendFailure_sBehavior = 1;
}

- (BOOL)playsInlineVideo
{
  if (playsInlineVideo_once != -1) {
    dispatch_once(&playsInlineVideo_once, &__block_literal_global_1025);
  }
  return playsInlineVideo_sBehavior;
}

void __32__CKUIBehavior_playsInlineVideo__block_invoke()
{
  playsInlineVideo_sBehavior = 1;
}

- (BOOL)showsBalloonChevron
{
  if (showsBalloonChevron_once != -1) {
    dispatch_once(&showsBalloonChevron_once, &__block_literal_global_1027);
  }
  return showsBalloonChevron_sBehavior;
}

void __35__CKUIBehavior_showsBalloonChevron__block_invoke()
{
  showsBalloonChevron_sBehavior = 1;
}

- (BOOL)handlesBalloonViewTitleTapsSeparately
{
  if (handlesBalloonViewTitleTapsSeparately_once != -1) {
    dispatch_once(&handlesBalloonViewTitleTapsSeparately_once, &__block_literal_global_1029);
  }
  return 0;
}

- (BOOL)showsPlaceCardForBalloonViewTitleTap
{
  if (showsPlaceCardForBalloonViewTitleTap_once != -1) {
    dispatch_once(&showsPlaceCardForBalloonViewTitleTap_once, &__block_literal_global_1031);
  }
  return 0;
}

- (BOOL)opensLocationsInMapsApp
{
  if (opensLocationsInMapsApp_once != -1) {
    dispatch_once(&opensLocationsInMapsApp_once, &__block_literal_global_1033);
  }
  return 0;
}

- (BOOL)showsBalloonBadges
{
  if (showsBalloonBadges_once != -1) {
    dispatch_once(&showsBalloonBadges_once, &__block_literal_global_1035);
  }
  return showsBalloonBadges_sBehavior;
}

void __34__CKUIBehavior_showsBalloonBadges__block_invoke()
{
  showsBalloonBadges_sBehavior = 1;
}

- (BOOL)canPluginBalloonsUseOpaqueMask
{
  if (canPluginBalloonsUseOpaqueMask_once != -1) {
    dispatch_once(&canPluginBalloonsUseOpaqueMask_once, &__block_literal_global_1037);
  }
  return 0;
}

- (int64_t)maxNumExtensionRemoteViewControllers
{
  if (maxNumExtensionRemoteViewControllers_once != -1) {
    dispatch_once(&maxNumExtensionRemoteViewControllers_once, &__block_literal_global_1039);
  }
  if (maxNumExtensionRemoteViewControllers_sBehavior) {
    return 5;
  }
  else {
    return 0;
  }
}

void __52__CKUIBehavior_maxNumExtensionRemoteViewControllers__block_invoke()
{
  maxNumExtensionRemoteViewControllers_sBehavior = 1;
}

- (double)balloonMaskTailHeight
{
  if (balloonMaskTailHeight_once != -1) {
    dispatch_once(&balloonMaskTailHeight_once, &__block_literal_global_1043);
  }
  return 0.0;
}

- (double)skinnyBalloonWidthDifference
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __44__CKUIBehavior_skinnyBalloonWidthDifference__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (skinnyBalloonWidthDifference_once != -1) {
    dispatch_once(&skinnyBalloonWidthDifference_once, block);
  }
  return *(double *)&skinnyBalloonWidthDifference_sBehavior;
}

double __44__CKUIBehavior_skinnyBalloonWidthDifference__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) skinnyBalloonMaskSize];
  double v3 = v2;
  [*(id *)(a1 + 32) balloonMaskSize];
  double result = v3 - v4;
  skinnyBalloonWidthDifference_sBehavior = *(void *)&result;
  return result;
}

- (CGSize)balloonMaskSize
{
  if (balloonMaskSize_once != -1) {
    dispatch_once(&balloonMaskSize_once, &__block_literal_global_1045);
  }
  double v2 = *(double *)&balloonMaskSize_sBehavior_0;
  double v3 = *(double *)&balloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __31__CKUIBehavior_balloonMaskSize__block_invoke()
{
  balloonMaskSize_sBehavior_0 = 0x404C000000000000;
  balloonMaskSize_sBehavior_1 = 0x4041800000000000;
}

- (CGSize)taillessBalloonMaskSize
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_taillessBalloonMaskSize__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (taillessBalloonMaskSize_once != -1) {
    dispatch_once(&taillessBalloonMaskSize_once, block);
  }
  double v2 = *(double *)&taillessBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&taillessBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

uint64_t __39__CKUIBehavior_taillessBalloonMaskSize__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) balloonMaskSize];
  taillessBalloonMaskSize_sBehavior_0 = v2;
  taillessBalloonMaskSize_sBehavior_1 = v3;
  return result;
}

- (CGSize)taillessMultilineBalloonMaskSize
{
  if (taillessMultilineBalloonMaskSize_once != -1) {
    dispatch_once(&taillessMultilineBalloonMaskSize_once, &__block_literal_global_1047);
  }
  double v2 = *(double *)&taillessMultilineBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&taillessMultilineBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __48__CKUIBehavior_taillessMultilineBalloonMaskSize__block_invoke()
{
  taillessMultilineBalloonMaskSize_sBehavior_0 = 0x404C000000000000;
  taillessMultilineBalloonMaskSize_sBehavior_1 = 0x4042800000000000;
}

- (CGSize)skinnyBalloonMaskSize
{
  if (skinnyBalloonMaskSize_once != -1) {
    dispatch_once(&skinnyBalloonMaskSize_once, &__block_literal_global_1049);
  }
  double v2 = *(double *)&skinnyBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&skinnyBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __37__CKUIBehavior_skinnyBalloonMaskSize__block_invoke()
{
  skinnyBalloonMaskSize_sBehavior_0 = 0x4048000000000000;
  skinnyBalloonMaskSize_sBehavior_1 = 0x4041800000000000;
}

- (CGSize)taillessSkinnyBalloonMaskSize
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __45__CKUIBehavior_taillessSkinnyBalloonMaskSize__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (taillessSkinnyBalloonMaskSize_once != -1) {
    dispatch_once(&taillessSkinnyBalloonMaskSize_once, block);
  }
  double v2 = *(double *)&taillessSkinnyBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&taillessSkinnyBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

uint64_t __45__CKUIBehavior_taillessSkinnyBalloonMaskSize__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) skinnyBalloonMaskSize];
  taillessSkinnyBalloonMaskSize_sBehavior_0 = v2;
  taillessSkinnyBalloonMaskSize_sBehavior_1 = v3;
  return result;
}

- (CGSize)multilineBalloonMaskSize
{
  if (multilineBalloonMaskSize_once != -1) {
    dispatch_once(&multilineBalloonMaskSize_once, &__block_literal_global_1051);
  }
  double v2 = *(double *)&multilineBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&multilineBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __40__CKUIBehavior_multilineBalloonMaskSize__block_invoke()
{
  multilineBalloonMaskSize_sBehavior_0 = 0x404C000000000000;
  multilineBalloonMaskSize_sBehavior_1 = 0x4042800000000000;
}

- (CGSize)replyBalloonMaskSize
{
  if (replyBalloonMaskSize_once != -1) {
    dispatch_once(&replyBalloonMaskSize_once, &__block_literal_global_1053);
  }
  double v2 = *(double *)&replyBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&replyBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __36__CKUIBehavior_replyBalloonMaskSize__block_invoke()
{
  replyBalloonMaskSize_sBehavior_0 = 0x4046000000000000;
  replyBalloonMaskSize_sBehavior_1 = 0x403A000000000000;
}

- (CGSize)replySkinnyBalloonMaskSize
{
  if (replySkinnyBalloonMaskSize_once != -1) {
    dispatch_once(&replySkinnyBalloonMaskSize_once, &__block_literal_global_1055);
  }
  double v2 = *(double *)&replySkinnyBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&replySkinnyBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __42__CKUIBehavior_replySkinnyBalloonMaskSize__block_invoke()
{
  replySkinnyBalloonMaskSize_sBehavior_0 = 0x4042800000000000;
  replySkinnyBalloonMaskSize_sBehavior_1 = 0x403A000000000000;
}

- (CGSize)replyMultilineBalloonMaskSize
{
  if (replyMultilineBalloonMaskSize_once != -1) {
    dispatch_once(&replyMultilineBalloonMaskSize_once, &__block_literal_global_1057);
  }
  double v2 = *(double *)&replyMultilineBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&replyMultilineBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __45__CKUIBehavior_replyMultilineBalloonMaskSize__block_invoke()
{
  replyMultilineBalloonMaskSize_sBehavior_0 = 0x4046000000000000;
  replyMultilineBalloonMaskSize_sBehavior_1 = 0x403C000000000000;
}

- (CGSize)replyDeleteBalloonMaskSize
{
  if (replyDeleteBalloonMaskSize_once != -1) {
    dispatch_once(&replyDeleteBalloonMaskSize_once, &__block_literal_global_1059);
  }
  double v2 = *(double *)&replyDeleteBalloonMaskSize_sBehavior_0;
  double v3 = *(double *)&replyDeleteBalloonMaskSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __42__CKUIBehavior_replyDeleteBalloonMaskSize__block_invoke()
{
  replyDeleteBalloonMaskSize_sBehavior_0 = 0x4044000000000000;
  replyDeleteBalloonMaskSize_sBehavior_1 = 0x403A000000000000;
}

- (double)entryViewTaillessBalloonCornerRadius
{
  if (entryViewTaillessBalloonCornerRadius_once != -1) {
    dispatch_once(&entryViewTaillessBalloonCornerRadius_once, &__block_literal_global_1061);
  }
  return *(double *)&entryViewTaillessBalloonCornerRadius_sBehavior;
}

void __52__CKUIBehavior_entryViewTaillessBalloonCornerRadius__block_invoke()
{
  entryViewTaillessBalloonCornerRadius_sBehavior = 0x4020000000000000;
}

- (double)entryViewTaillessBalloonMaskMinHeight
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __53__CKUIBehavior_entryViewTaillessBalloonMaskMinHeight__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewTaillessBalloonMaskMinHeight_once != -1) {
    dispatch_once(&entryViewTaillessBalloonMaskMinHeight_once, block);
  }
  return *(double *)&entryViewTaillessBalloonMaskMinHeight_sBehavior;
}

double __53__CKUIBehavior_entryViewTaillessBalloonMaskMinHeight__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) entryViewTaillessBalloonCornerRadius];
  double result = v1 + v1;
  entryViewTaillessBalloonMaskMinHeight_sBehavior = *(void *)&result;
  return result;
}

- (double)entryViewTaillessBalloonMaskRightImageSpacing
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __61__CKUIBehavior_entryViewTaillessBalloonMaskRightImageSpacing__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewTaillessBalloonMaskRightImageSpacing_once != -1) {
    dispatch_once(&entryViewTaillessBalloonMaskRightImageSpacing_once, block);
  }
  return *(double *)&entryViewTaillessBalloonMaskRightImageSpacing_sBehavior;
}

double __61__CKUIBehavior_entryViewTaillessBalloonMaskRightImageSpacing__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) entryViewTaillessBalloonMaskMinHeight];
  double result = round(v1 * 0.166666667);
  entryViewTaillessBalloonMaskRightImageSpacing_sBehavior = *(void *)&result;
  return result;
}

- (double)extensionIconBadgePaddingAroundBalloon
{
  if (extensionIconBadgePaddingAroundBalloon_once != -1) {
    dispatch_once(&extensionIconBadgePaddingAroundBalloon_once, &__block_literal_global_1063);
  }
  return *(double *)&extensionIconBadgePaddingAroundBalloon_sBehavior;
}

void __54__CKUIBehavior_extensionIconBadgePaddingAroundBalloon__block_invoke()
{
  extensionIconBadgePaddingAroundBalloon_sBehavior = 0x4018000000000000;
}

- (CGRect)extensionIconBadgeRectForOrientation:(char)a3
{
  double v4 = 0.0;
  if (a3 == 2)
  {
    [(CKUIBehavior *)self balloonMaskTailWidth];
    double v4 = v5 + 0.0;
  }
  [(CKUIBehavior *)self iMessageAppIconSize];
  double v7 = v6;
  double v9 = v8;
  NSComparisonResult v10 = +[CKUIBehavior sharedBehaviors];
  [v10 extensionIconBadgePaddingAroundBalloon];
  double v12 = v11;

  double v13 = v4 + v12;
  double v14 = v12;
  double v15 = v7;
  double v16 = v9;
  result.size.double height = v16;
  result.size.double width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

- (CGSize)minimumSizeThatFitsExtensionIconBadge:(BOOL)a3
{
  BOOL v3 = a3;
  double v5 = +[CKUIBehavior sharedBehaviors];
  double v6 = v5;
  if (v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 2;
  }
  [v5 extensionIconBadgeRectForOrientation:v7];
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;

  double v16 = +[CKUIBehavior sharedBehaviors];
  [v16 extensionIconBadgePaddingAroundBalloon];
  double v18 = v17;

  v25.origin.x = v9;
  v25.origin.y = v11;
  v25.size.double width = v13;
  v25.size.double height = v15;
  double MaxY = CGRectGetMaxY(v25);
  v26.origin.x = v9;
  v26.origin.y = v11;
  v26.size.double width = v13;
  v26.size.double height = v15;
  double v20 = v18 + CGRectGetMaxX(v26);
  if (v3)
  {
    [(CKUIBehavior *)self balloonMaskTailWidth];
    double v20 = v20 + v21;
  }
  double v22 = v18 + MaxY;
  double v23 = v20;
  result.double height = v22;
  result.double width = v23;
  return result;
}

- (UIEdgeInsets)extensionBalloonContentInsetsForOrientation:(char)a3
{
  if (a3 == 2)
  {
    [(CKUIBehavior *)self balloonMaskTailWidth];
    double v7 = -v6;
    double v5 = 0.0;
    double v4 = 0.0;
  }
  else
  {
    if (a3)
    {
      double v5 = 0.0;
      double v4 = 0.0;
    }
    else
    {
      [(CKUIBehavior *)self balloonMaskTailWidth];
      double v4 = -v3;
      double v5 = 0.0;
    }
    double v7 = 0.0;
  }
  double v8 = 0.0;
  result.double right = v7;
  result.double bottom = v8;
  result.double left = v4;
  result.double top = v5;
  return result;
}

- (double)extensionBalloonMaximumHeight
{
  return 300.0;
}

- (double)extraTallExtensionBalloonMaximumHeight
{
  return 600.0;
}

- (double)suggestedActionsMenuAdditionalHeightWithChatBotActionButton:(id)a3
{
  id v3 = a3;
  [v3 bounds];
  objc_msgSend(v3, "sizeThatFits:", v4, 1.79769313e308);
  double v6 = v5;

  double result = v6 + 13.0 + 5.0;
  if (result < 52.0) {
    return 52.0;
  }
  return result;
}

- (UIColor)defaultRichCardChinColor
{
  return (UIColor *)[MEMORY[0x1E4F428B8] colorWithRed:0.91372549 green:0.909803922 blue:0.917647059 alpha:1.0];
}

- (CGSize)balloonMaskTailSizeForTailShape:(char)a3
{
  if (a3 == 2)
  {
    double v4 = 6.0;
    double v3 = 6.0;
  }
  else if (a3 == 1)
  {
    [(CKUIBehavior *)self balloonMaskTailWidth];
    double v4 = v6;
    [(CKUIBehavior *)self balloonMaskTailHeight];
    double v3 = v7;
  }
  else
  {
    double v4 = *MEMORY[0x1E4F1DB30];
    double v3 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  }
  double v8 = v4;
  result.double height = v3;
  result.double width = v8;
  return result;
}

- (CGSize)balloonMaskSizeWithTailShape:(char)a3 isMultiline:(BOOL)a4
{
  if (a3 == 2) {
    goto LABEL_6;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      if (a4) {
        [(CKUIBehavior *)self taillessMultilineBalloonMaskSize];
      }
      else {
        [(CKUIBehavior *)self taillessBalloonMaskSize];
      }
      goto LABEL_11;
    }
LABEL_6:
    double v4 = *MEMORY[0x1E4F1DB30];
    double v5 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    goto LABEL_11;
  }
  if (a4) {
    [(CKUIBehavior *)self multilineBalloonMaskSize];
  }
  else {
    [(CKUIBehavior *)self balloonMaskSize];
  }
LABEL_11:
  result.double height = v5;
  result.double width = v4;
  return result;
}

- (CGSize)skinnyBalloonMaskSizeWithTailShape:(char)a3
{
  if (a3 == 2) {
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    [(CKUIBehavior *)self skinnyBalloonMaskSize];
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_5:
    double v3 = *MEMORY[0x1E4F1DB30];
    double v4 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  }
  else
  {
    [(CKUIBehavior *)self taillessSkinnyBalloonMaskSize];
  }
LABEL_7:
  result.double height = v4;
  result.double width = v3;
  return result;
}

- (CGSize)roundBalloonMaskSizeWithTailShape:(char)a3
{
  if (a3 == 2)
  {
    double v3 = 36.0;
    double v4 = 36.0;
  }
  else
  {
    double v3 = *MEMORY[0x1E4F1DB30];
    double v4 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  }
  result.double height = v4;
  result.double width = v3;
  return result;
}

- (CGSize)replyBalloonMaskSizeWithTailShape:(char)a3 isMultiline:(BOOL)a4
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      double v4 = *MEMORY[0x1E4F1DB30];
      double v5 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    }
  }
  else if (a4)
  {
    [(CKUIBehavior *)self replyMultilineBalloonMaskSize];
  }
  else
  {
    [(CKUIBehavior *)self replyBalloonMaskSize];
  }
  result.double height = v5;
  result.double width = v4;
  return result;
}

- (CGSize)skinnyReplyBalloonMaskSizeWithTailShape:(char)a3
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      double v3 = *MEMORY[0x1E4F1DB30];
      double v4 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    }
  }
  else
  {
    [(CKUIBehavior *)self replySkinnyBalloonMaskSize];
  }
  result.double height = v4;
  result.double width = v3;
  return result;
}

- (CGSize)deletedReplyBalloonMaskSizeWithTailShape:(char)a3
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      double v3 = *MEMORY[0x1E4F1DB30];
      double v4 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    }
  }
  else
  {
    [(CKUIBehavior *)self replyDeleteBalloonMaskSize];
  }
  result.double height = v4;
  result.double width = v3;
  return result;
}

- (CGSize)balloonMaskSizeWithBalloonDescriptor:(CKBalloonDescriptor_t *)a3
{
  char var10 = a3->var10;
  if (var10) {
    char var10 = a3->var1;
  }
  BOOL var12 = a3->var12;
  switch(a3->var0)
  {
    case 0:
      [(CKUIBehavior *)self balloonMaskSizeWithTailShape:var10 isMultiline:var12];
      break;
    case 1:
      [(CKUIBehavior *)self skinnyBalloonMaskSizeWithTailShape:var10];
      break;
    case 2:
      [(CKUIBehavior *)self roundBalloonMaskSizeWithTailShape:var10];
      break;
    case 3:
      [(CKUIBehavior *)self replyBalloonMaskSizeWithTailShape:var10 isMultiline:var12];
      break;
    case 4:
      [(CKUIBehavior *)self skinnyReplyBalloonMaskSizeWithTailShape:var10];
      break;
    case 5:
      [(CKUIBehavior *)self deletedReplyBalloonMaskSizeWithTailShape:var10];
      break;
    default:
      double v5 = *MEMORY[0x1E4F1DB30];
      double v6 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
      break;
  }
  result.double height = v6;
  result.double width = v5;
  return result;
}

- (BOOL)ckShouldUpdatetextBalloonMinHeight
{
  return 0;
}

- (double)textBalloonMinHeight
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  CGFloat v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)textBalloonMinHeight_sContentSizeCategory_textBalloonMinHeight, v3);
  CGFloat v11 = &messageAcknowledgmentGrayColor_sBehavior;
  if ([(CKUIBehavior *)self ckShouldUpdatetextBalloonMinHeight]
    || v10
    || textBalloonMinHeight_sIsBoldTextEnabled_textBalloonMinHeight != IsBoldTextEnabled
    || *(double *)&textBalloonMinHeight_sTextFontSize_textBalloonMinHeight != v5
    || *(double *)&textBalloonMinHeight_sCustomTextFontSize_textBalloonMinHeight != v6
    || (objc_msgSend((id)textBalloonMinHeight_sCustomTextFontName_textBalloonMinHeight, "isEqualToString:", v9, *(double *)&textBalloonMinHeight_sCustomTextFontSize_textBalloonMinHeight) & 1) == 0)
  {
    double v12 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:@"A" attributes:0];
    CGFloat v13 = v7;
    double v14 = v3;
    uint64_t v15 = [v12 length];
    uint64_t v16 = *MEMORY[0x1E4FB06F8];
    double v17 = [(CKUIBehavior *)self balloonTextFont];
    objc_msgSend(v12, "addAttribute:value:range:", v16, v17, 0, v15);

    uint64_t v18 = *MEMORY[0x1E4FB0700];
    uint64_t v19 = +[CKUIBehavior sharedBehaviors];
    double v20 = [v19 theme];
    [v20 transcriptTextColor];
    obj = v8;
    double v21 = v9;
    v23 = char v22 = IsBoldTextEnabled;
    uint64_t v24 = v15;
    double v3 = v14;
    double v7 = v13;
    CGFloat v11 = &messageAcknowledgmentGrayColor_sBehavior;
    objc_msgSend(v12, "addAttribute:value:range:", v18, v23, 0, v24);

    CGRect v25 = (objc_class *)objc_opt_class();
    CGRect v26 = CKBalloonViewForClass(v25);
    [v26 setHasTail:1];
    [v26 setAttributedText:v12];
    [v26 prepareForDisplayIfNeeded];
    objc_msgSend(v26, "sizeThatFits:textAlignmentInsets:", 0, 1.79769313e308, 1.79769313e308);
    double v28 = v27 + 1.0;

    textBalloonMinHeight_sBehavior = *(void *)&v28;
    objc_storeStrong((id *)&textBalloonMinHeight_sContentSizeCategory_textBalloonMinHeight, v3);
    textBalloonMinHeight_sIsBoldTextEnabled_textBalloonMinHeight = v22;
    CGFloat v9 = v21;
    textBalloonMinHeight_sTextFontSize_textBalloonMinHeight = *(void *)&v5;
    textBalloonMinHeight_sCustomTextFontSize_textBalloonMinHeight = *(void *)&v6;
    objc_storeStrong((id *)&textBalloonMinHeight_sCustomTextFontName_textBalloonMinHeight, obj);
  }
  double v29 = *((double *)v11 + 125);

  return v29;
}

- (BOOL)ckShouldUpdatetextReplyPreviewBalloonMinHeight
{
  return 0;
}

- (double)textReplyPreviewBalloonMinHeight
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  CGFloat v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)textReplyPreviewBalloonMinHeight_sContentSizeCategory_textReplyPreviewBalloonMinHeight, v3);
  CGFloat v11 = &facetimeAudioIcon_sIsBoldTextEnabled_facetimeAudioIcon;
  if (-[CKUIBehavior ckShouldUpdatetextReplyPreviewBalloonMinHeight](self, "ckShouldUpdatetextReplyPreviewBalloonMinHeight")|| v10|| textReplyPreviewBalloonMinHeight_sIsBoldTextEnabled_textReplyPreviewBalloonMinHeight != IsBoldTextEnabled|| *(double *)&textReplyPreviewBalloonMinHeight_sTextFontSize_textReplyPreviewBalloonMinHeight != v5|| *(double *)&textReplyPreviewBalloonMinHeight_sCustomTextFontSize_textReplyPreviewBalloonMinHeight != v6|| (objc_msgSend((id)textReplyPreviewBalloonMinHeight_sCustomTextFontName_textReplyPreviewBalloonMinHeight, "isEqualToString:", v9, *(double *)&textReplyPreviewBalloonMinHeight_sCustomTextFontSize_textReplyPreviewBalloonMinHeight) & 1) == 0)
  {
    double v12 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:@"A" attributes:0];
    CGFloat v13 = v7;
    double v14 = v3;
    uint64_t v15 = [v12 length];
    uint64_t v16 = *MEMORY[0x1E4FB06F8];
    double v17 = [(CKUIBehavior *)self replyBalloonTextFont];
    objc_msgSend(v12, "addAttribute:value:range:", v16, v17, 0, v15);

    uint64_t v18 = *MEMORY[0x1E4FB0700];
    uint64_t v19 = +[CKUIBehavior sharedBehaviors];
    double v20 = [v19 theme];
    [v20 transcriptTextColor];
    obj = v8;
    double v21 = v9;
    v23 = char v22 = IsBoldTextEnabled;
    uint64_t v24 = v15;
    double v3 = v14;
    double v7 = v13;
    CGFloat v11 = &facetimeAudioIcon_sIsBoldTextEnabled_facetimeAudioIcon;
    objc_msgSend(v12, "addAttribute:value:range:", v18, v23, 0, v24);

    CGRect v25 = (objc_class *)objc_opt_class();
    CGRect v26 = CKBalloonViewForClass(v25);
    [v26 setHasTail:1];
    [v26 setAttributedText:v12];
    [v26 prepareForDisplayIfNeeded];
    objc_msgSend(v26, "sizeThatFits:textAlignmentInsets:", 0, 1.79769313e308, 1.79769313e308);
    double v28 = v27 + 1.0;

    textReplyPreviewBalloonMinHeight_sBehavior = *(void *)&v28;
    objc_storeStrong((id *)&textReplyPreviewBalloonMinHeight_sContentSizeCategory_textReplyPreviewBalloonMinHeight, v3);
    textReplyPreviewBalloonMinHeight_sIsBoldTextEnabled_textReplyPreviewBalloonMinHeight = v22;
    CGFloat v9 = v21;
    textReplyPreviewBalloonMinHeight_sTextFontSize_textReplyPreviewBalloonMinHeight = *(void *)&v5;
    textReplyPreviewBalloonMinHeight_sCustomTextFontSize_textReplyPreviewBalloonMinHeight = *(void *)&v6;
    objc_storeStrong((id *)&textReplyPreviewBalloonMinHeight_sCustomTextFontName_textReplyPreviewBalloonMinHeight, obj);
  }
  double v29 = *((double *)v11 + 128);

  return v29;
}

- (UIEdgeInsets)taillessBalloonMaskAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_taillessBalloonMaskAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (taillessBalloonMaskAlignmentRectInsets_once != -1) {
    dispatch_once(&taillessBalloonMaskAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&taillessBalloonMaskAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&taillessBalloonMaskAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&taillessBalloonMaskAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&taillessBalloonMaskAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

uint64_t __54__CKUIBehavior_taillessBalloonMaskAlignmentRectInsets__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) balloonMaskAlignmentRectInsets];
  taillessBalloonMaskAlignmentRectInsets_sBehavior_0 = v2;
  taillessBalloonMaskAlignmentRectInsets_sBehavior_1 = v3;
  taillessBalloonMaskAlignmentRectInsets_sBehavior_2 = v4;
  taillessBalloonMaskAlignmentRectInsets_sBehavior_3 = v5;
  return result;
}

- (UIEdgeInsets)bigEmojiBalloonMaskAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_bigEmojiBalloonMaskAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (bigEmojiBalloonMaskAlignmentRectInsets_once != -1) {
    dispatch_once(&bigEmojiBalloonMaskAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

uint64_t __54__CKUIBehavior_bigEmojiBalloonMaskAlignmentRectInsets__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) balloonMaskAlignmentRectInsets];
  bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_0 = v2;
  bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_1 = v3;
  bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_2 = v4;
  bigEmojiBalloonMaskAlignmentRectInsets_sBehavior_3 = v5;
  return result;
}

- (UIEdgeInsets)attachmentBalloonAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __52__CKUIBehavior_attachmentBalloonAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (attachmentBalloonAlignmentRectInsets_once != -1) {
    dispatch_once(&attachmentBalloonAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&attachmentBalloonAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&attachmentBalloonAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&attachmentBalloonAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&attachmentBalloonAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

uint64_t __52__CKUIBehavior_attachmentBalloonAlignmentRectInsets__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) balloonMaskAlignmentRectInsets];
  attachmentBalloonAlignmentRectInsets_sBehavior_0 = v2;
  attachmentBalloonAlignmentRectInsets_sBehavior_1 = v3;
  attachmentBalloonAlignmentRectInsets_sBehavior_2 = v4;
  attachmentBalloonAlignmentRectInsets_sBehavior_3 = v5;
  return result;
}

- (UIEdgeInsets)taillessAttachmentBalloonAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __60__CKUIBehavior_taillessAttachmentBalloonAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (taillessAttachmentBalloonAlignmentRectInsets_once != -1) {
    dispatch_once(&taillessAttachmentBalloonAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&taillessAttachmentBalloonAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&taillessAttachmentBalloonAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&taillessAttachmentBalloonAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&taillessAttachmentBalloonAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

uint64_t __60__CKUIBehavior_taillessAttachmentBalloonAlignmentRectInsets__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) attachmentBalloonAlignmentRectInsets];
  taillessAttachmentBalloonAlignmentRectInsets_sBehavior_0 = v2;
  taillessAttachmentBalloonAlignmentRectInsets_sBehavior_1 = v3;
  taillessAttachmentBalloonAlignmentRectInsets_sBehavior_2 = v4;
  taillessAttachmentBalloonAlignmentRectInsets_sBehavior_3 = v5;
  return result;
}

- (UIEdgeInsets)bigEmojiAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__CKUIBehavior_bigEmojiAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (bigEmojiAlignmentRectInsets_once != -1) {
    dispatch_once(&bigEmojiAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&bigEmojiAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&bigEmojiAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&bigEmojiAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&bigEmojiAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

uint64_t __43__CKUIBehavior_bigEmojiAlignmentRectInsets__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(MEMORY[0x1E4F437F8] + 8);
  uint64_t v2 = *(void *)(MEMORY[0x1E4F437F8] + 24);
  uint64_t result = [*(id *)(a1 + 32) bigEmojiBalloonMaskAlignmentRectInsets];
  bigEmojiAlignmentRectInsets_sBehavior_0 = v4;
  bigEmojiAlignmentRectInsets_sBehavior_1 = v1;
  bigEmojiAlignmentRectInsets_sBehavior_2 = v5;
  bigEmojiAlignmentRectInsets_sBehavior_3 = v2;
  return result;
}

- (UIEdgeInsets)textReplyPreviewBalloonAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __58__CKUIBehavior_textReplyPreviewBalloonAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (textReplyPreviewBalloonAlignmentRectInsets_once != -1) {
    dispatch_once(&textReplyPreviewBalloonAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&textReplyPreviewBalloonAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&textReplyPreviewBalloonAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&textReplyPreviewBalloonAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&textReplyPreviewBalloonAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __58__CKUIBehavior_textReplyPreviewBalloonAlignmentRectInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double v2 = v1;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v3 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  double v4 = 1.0;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v3 = 1.0;
  }
  double v5 = ceil(v3 * 6.0) / v3;
  double v6 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v6 = 1.0;
  }
  double v7 = ceil(v6 * 11.0) / v6;
  double v8 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v8 = 1.0;
  }
  double v9 = ceil(v8 * 6.0) / v8;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 != 0.0) {
    double v4 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  }
  textReplyPreviewBalloonAlignmentRectInsets_sBehavior_0 = *(void *)&v5;
  textReplyPreviewBalloonAlignmentRectInsets_sBehavior_1 = *(void *)&v7;
  textReplyPreviewBalloonAlignmentRectInsets_sBehavior_2 = *(void *)&v9;
  *(double *)&textReplyPreviewBalloonAlignmentRectInsets_sBehavior_3 = ceil((v2 + 11.0) * v4) / v4;
}

- (UIEdgeInsets)attachmentReplyPreviewBalloonAlignmentRectInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __64__CKUIBehavior_attachmentReplyPreviewBalloonAlignmentRectInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (attachmentReplyPreviewBalloonAlignmentRectInsets_once != -1) {
    dispatch_once(&attachmentReplyPreviewBalloonAlignmentRectInsets_once, block);
  }
  double v2 = *(double *)&attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_0;
  double v3 = *(double *)&attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_1;
  double v4 = *(double *)&attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_2;
  double v5 = *(double *)&attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

double __64__CKUIBehavior_attachmentReplyPreviewBalloonAlignmentRectInsets__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double v2 = v1;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v3 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  double v4 = 1.0;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v3 = 1.0;
  }
  double v5 = ceil(v3 * 6.0) / v3;
  double v6 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v6 = 1.0;
  }
  double v7 = ceil(v6 * 8.0) / v6;
  double v8 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v8 = 1.0;
  }
  double v9 = ceil(v8 * 6.0) / v8;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 != 0.0) {
    double v4 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  }
  double result = ceil((v2 + 7.0) * v4) / v4;
  attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_0 = *(void *)&v5;
  attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_1 = *(void *)&v7;
  attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_2 = *(void *)&v9;
  attachmentReplyPreviewBalloonAlignmentRectInsets_sBehavior_3 = *(void *)&result;
  return result;
}

- (UIEdgeInsets)audioReplyPreviewBalloonAlignmentInsets
{
  if (audioReplyPreviewBalloonAlignmentInsets_once != -1) {
    dispatch_once(&audioReplyPreviewBalloonAlignmentInsets_once, &__block_literal_global_1071);
  }
  double v2 = *(double *)&audioReplyPreviewBalloonAlignmentInsets_sBehavior_0;
  double v3 = *(double *)&audioReplyPreviewBalloonAlignmentInsets_sBehavior_1;
  double v4 = *(double *)&audioReplyPreviewBalloonAlignmentInsets_sBehavior_2;
  double v5 = *(double *)&audioReplyPreviewBalloonAlignmentInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __55__CKUIBehavior_audioReplyPreviewBalloonAlignmentInsets__block_invoke()
{
  audioReplyPreviewBalloonAlignmentInsets_sBehavior_0 = 0x401C000000000000;
  audioReplyPreviewBalloonAlignmentInsets_sBehavior_1 = 0x4008000000000000;
  audioReplyPreviewBalloonAlignmentInsets_sBehavior_2 = 0x4018000000000000;
  audioReplyPreviewBalloonAlignmentInsets_sBehavior_3 = 0x4000000000000000;
}

- (double)audioReplyPreviewBalloonInset
{
  if (audioReplyPreviewBalloonInset_once != -1) {
    dispatch_once(&audioReplyPreviewBalloonInset_once, &__block_literal_global_1073);
  }
  return *(double *)&audioReplyPreviewBalloonInset_sBehavior;
}

void __45__CKUIBehavior_audioReplyPreviewBalloonInset__block_invoke()
{
  audioReplyPreviewBalloonInset_sBehavior = 0x4022000000000000;
}

- (BOOL)ckShouldUpdatetextAlignmentRectInsetsScaleFactor
{
  return 0;
}

- (double)textAlignmentRectInsetsScaleFactor
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)textAlignmentRectInsetsScaleFactor_sContentSizeCategory_textAlignmentRectInsetsScaleFactor, v3);
  if (-[CKUIBehavior ckShouldUpdatetextAlignmentRectInsetsScaleFactor](self, "ckShouldUpdatetextAlignmentRectInsetsScaleFactor")|| v10|| textAlignmentRectInsetsScaleFactor_sIsBoldTextEnabled_textAlignmentRectInsetsScaleFactor != IsBoldTextEnabled|| (uint64_t v11 = textAlignmentRectInsetsScaleFactor_sTextFontSize_textAlignmentRectInsetsScaleFactor, *(double *)&textAlignmentRectInsetsScaleFactor_sTextFontSize_textAlignmentRectInsetsScaleFactor != v5)|| (uint64_t v11 = textAlignmentRectInsetsScaleFactor_sCustomTextFontSize_textAlignmentRectInsetsScaleFactor, *(double *)&textAlignmentRectInsetsScaleFactor_sCustomTextFontSize_textAlignmentRectInsetsScaleFactor != v6)|| (objc_msgSend((id)textAlignmentRectInsetsScaleFactor_sCustomTextFontName_textAlignmentRectInsetsScaleFactor, "isEqualToString:", v9, *(double *)&textAlignmentRectInsetsScaleFactor_sCustomTextFontSize_textAlignmentRectInsetsScaleFactor) & 1) == 0)
  {
    BOOL v12 = [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    double v13 = 1.6;
    if (!v12) {
      double v13 = 1.0;
    }
    textAlignmentRectInsetsScaleFactor_sBehavior = *(void *)&v13;
    objc_storeStrong((id *)&textAlignmentRectInsetsScaleFactor_sContentSizeCategory_textAlignmentRectInsetsScaleFactor, v3);
    textAlignmentRectInsetsScaleFactor_sIsBoldTextEnabled_textAlignmentRectInsetsScaleFactor = IsBoldTextEnabled;
    textAlignmentRectInsetsScaleFactor_sTextFontSize_textAlignmentRectInsetsScaleFactor = *(void *)&v5;
    textAlignmentRectInsetsScaleFactor_sCustomTextFontSize_textAlignmentRectInsetsScaleFactor = *(void *)&v6;
    objc_storeStrong((id *)&textAlignmentRectInsetsScaleFactor_sCustomTextFontName_textAlignmentRectInsetsScaleFactor, v8);
  }
  double v14 = *(double *)&textAlignmentRectInsetsScaleFactor_sBehavior;

  return v14;
}

- (UIEdgeInsets)attachmentBalloonAlignmentRectInsetsWithTailShape:(char)a3
{
  if (a3 == 2) {
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    [(CKUIBehavior *)self attachmentBalloonAlignmentRectInsets];
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_5:
    double v3 = *MEMORY[0x1E4F437F8];
    double v4 = *(double *)(MEMORY[0x1E4F437F8] + 8);
    double v5 = *(double *)(MEMORY[0x1E4F437F8] + 16);
    double v6 = *(double *)(MEMORY[0x1E4F437F8] + 24);
  }
  else
  {
    [(CKUIBehavior *)self taillessAttachmentBalloonAlignmentRectInsets];
  }
LABEL_7:
  result.double right = v6;
  result.double bottom = v5;
  result.double left = v4;
  result.double top = v3;
  return result;
}

- (BOOL)ckShouldUpdateballoonTextContainerInset
{
  return 0;
}

- (UIEdgeInsets)balloonTextContainerInset
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)balloonTextContainerInset_sContentSizeCategory_balloonTextContainerInset, v3);
  BOOL v12 = &CKMainScreenScale_sMainScreenScale_94;
  if ([(CKUIBehavior *)self ckShouldUpdateballoonTextContainerInset]
    || v10
    || balloonTextContainerInset_sIsBoldTextEnabled_balloonTextContainerInset != IsBoldTextEnabled
    || (uint64_t v11 = balloonTextContainerInset_sTextFontSize_balloonTextContainerInset,
        *(double *)&balloonTextContainerInset_sTextFontSize_balloonTextContainerInset != v5)
    || (uint64_t v11 = balloonTextContainerInset_sCustomTextFontSize_balloonTextContainerInset,
        *(double *)&balloonTextContainerInset_sCustomTextFontSize_balloonTextContainerInset != v6)
    || (objc_msgSend((id)balloonTextContainerInset_sCustomTextFontName_balloonTextContainerInset, "isEqualToString:", v9, *(double *)&balloonTextContainerInset_sCustomTextFontSize_balloonTextContainerInset) & 1) == 0)
  {
    double v13 = [(CKUIBehavior *)self entryViewlayoutMetrics];
    [v13 entryViewContentInsets];
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;
    double v21 = v20;

    char v22 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    int v23 = [v22 isSendMenuEnabled];

    if (v23)
    {
      [(CKUIBehavior *)self entryFieldCoverLineWidth];
      double v15 = v15 - v24;
      double v19 = v19 - v24;
    }
    [(CKUIBehavior *)self textAlignmentRectInsetsScaleFactor];
    *(double *)&balloonTextContainerInset_sBehavior_0 = v15 * v25;
    *(double *)&balloonTextContainerInset_sBehavior_1 = v17 * v25;
    BOOL v12 = &CKMainScreenScale_sMainScreenScale_94;
    *(double *)&balloonTextContainerInset_sBehavior_2 = v19 * v25;
    *(double *)&balloonTextContainerInset_sBehavior_3 = v21 * v25;
    objc_storeStrong((id *)&balloonTextContainerInset_sContentSizeCategory_balloonTextContainerInset, v3);
    balloonTextContainerInset_sIsBoldTextEnabled_balloonTextContainerInset = IsBoldTextEnabled;
    balloonTextContainerInset_sTextFontSize_balloonTextContainerInset = *(void *)&v5;
    balloonTextContainerInset_sCustomTextFontSize_balloonTextContainerInset = *(void *)&v6;
    objc_storeStrong((id *)&balloonTextContainerInset_sCustomTextFontName_balloonTextContainerInset, v8);
  }
  uint64_t v26 = balloonTextContainerInset_sBehavior_0;
  uint64_t v27 = balloonTextContainerInset_sBehavior_1;
  double v28 = *((double *)v12 + 101);
  uint64_t v29 = balloonTextContainerInset_sBehavior_3;

  double v30 = *(double *)&v26;
  double v31 = *(double *)&v27;
  double v32 = v28;
  double v33 = *(double *)&v29;
  result.double right = v33;
  result.double bottom = v32;
  result.double left = v31;
  result.double top = v30;
  return result;
}

- (double)replyBalloonMinHeight
{
  if (replyBalloonMinHeight_once != -1) {
    dispatch_once(&replyBalloonMinHeight_once, &__block_literal_global_1075);
  }
  return *(double *)&replyBalloonMinHeight_sBehavior;
}

void __37__CKUIBehavior_replyBalloonMinHeight__block_invoke()
{
  replyBalloonMinHeight_sBehavior = 0x403A000000000000;
}

- (int64_t)replyBalloonMaximumNumberOfLines
{
  if (replyBalloonMaximumNumberOfLines_once != -1) {
    dispatch_once(&replyBalloonMaximumNumberOfLines_once, &__block_literal_global_1077);
  }
  if (replyBalloonMaximumNumberOfLines_sBehavior) {
    return 3;
  }
  else {
    return 0;
  }
}

void __48__CKUIBehavior_replyBalloonMaximumNumberOfLines__block_invoke()
{
  replyBalloonMaximumNumberOfLines_sBehavior = 1;
}

- (UIEdgeInsets)_replyBalloonTextContainerInset
{
  v48[1] = *MEMORY[0x1E4F143B8];
  double v3 = [MEMORY[0x1E4F42D90] mainScreen];
  [v3 bounds];
  double v6 = fmin(v4, v5);

  double v7 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v8 = [v7 isTextKit2Enabled];

  if (v8)
  {
    double v9 = CKFrameworkBundle();
    NSComparisonResult v10 = [v9 localizedStringForKey:@"MADRID" value:&stru_1EDE4CA38 table:@"ChatKit"];

    uint64_t v47 = *MEMORY[0x1E4FB06F8];
    uint64_t v11 = [(CKUIBehavior *)self replyBalloonTextFont];
    v48[0] = v11;
    BOOL v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v48 forKeys:&v47 count:1];

    double v13 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v10 attributes:v12];
    double v14 = [[CKTextMetricsRequest alloc] initWithAttributedString:v13];
    [(CKUIBehavior *)self balloonLineFragmentPadding];
    -[CKTextMetricsRequest setLineFragmentPadding:](v14, "setLineFragmentPadding:");
    [(CKTextMetricsRequest *)v14 setMaximumNumberOfLines:[(CKUIBehavior *)self replyBalloonMaximumNumberOfLines]];
    [(CKTextMetricsRequest *)v14 setMaximumHeight:10000.0];
    [(CKTextMetricsRequest *)v14 setMaximumWidth:v6];
    double v15 = objc_alloc_init(CKTextMetricsProvider);
    -[CKTextMetricsRequest setContainerInset:](v14, "setContainerInset:", 2.25, 0.0, 2.25, 0.0);
    [(CKUIBehavior *)self replyBalloonMinHeight];
    -[CKTextMetricsRequest setMinimumViewHeight:](v14, "setMinimumViewHeight:");
    double v16 = [(CKTextMetricsProvider *)v15 metricsForRequest:v14];
    [v16 alignmentInset];
    double v18 = v17;
    double v20 = v19;
    double v22 = v21;
    double v24 = v23;
    [(CKUIBehavior *)self textAlignmentRectInsetsScaleFactor];
    double v26 = v18 * v25;
    double v27 = v20 * v25;
    double v28 = v22 * v25;
    double v29 = v24 * v25;
  }
  else
  {
    id v30 = objc_alloc(MEMORY[0x1E4F42F58]);
    NSComparisonResult v10 = objc_msgSend(v30, "initWithFrame:textContainer:", 0, *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
    double v31 = CKFrameworkBundle();
    double v32 = [v31 localizedStringForKey:@"MADRID" value:&stru_1EDE4CA38 table:@"ChatKit"];
    [v10 setText:v32];

    double v33 = +[CKUIBehavior sharedBehaviors];
    uint64_t v34 = [v33 replyBalloonTextFont];
    [v10 setFont:v34];

    objc_msgSend(v10, "setTextContainerInset:", 2.25, 0.0, 2.25, 0.0);
    id v35 = (id)[v10 layoutManager];
    BOOL v12 = [v10 textContainer];
    [(CKUIBehavior *)self balloonLineFragmentPadding];
    objc_msgSend(v12, "setLineFragmentPadding:");
    objc_msgSend(v12, "setMaximumNumberOfLines:", -[CKUIBehavior replyBalloonMaximumNumberOfLines](self, "replyBalloonMaximumNumberOfLines"));
    long long v36 = *(_OWORD *)(MEMORY[0x1E4F437F8] + 16);
    v46[0] = *MEMORY[0x1E4F437F8];
    v46[1] = v36;
    objc_msgSend(v12, "sizeThatFits:textAlignmentInsets:isSingleLine:", v46, 0, v6, 1.79769313e308);
    double v38 = v37 + 2.25 + 2.25;
    [(CKUIBehavior *)self replyBalloonMinHeight];
    if (v38 >= v39) {
      double v40 = 2.25;
    }
    else {
      double v40 = (v39 - v38) * 0.5 + 2.25;
    }
    [(CKUIBehavior *)self textAlignmentRectInsetsScaleFactor];
    double v26 = v41 * v40;
    double v27 = v41 * 0.0;
    double v28 = v26;
    double v29 = v41 * 0.0;
  }

  double v42 = v26;
  double v43 = v27;
  double v44 = v28;
  double v45 = v29;
  result.double right = v45;
  result.double bottom = v44;
  result.double left = v43;
  result.double top = v42;
  return result;
}

- (BOOL)ckShouldUpdatereplyBalloonTextContainerInset
{
  return 0;
}

- (UIEdgeInsets)replyBalloonTextContainerInset
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    int v8 = v7;
  }
  else {
    int v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)replyBalloonTextContainerInset_sContentSizeCategory_replyBalloonTextContainerInset, v3);
  if (-[CKUIBehavior ckShouldUpdatereplyBalloonTextContainerInset](self, "ckShouldUpdatereplyBalloonTextContainerInset")|| v10|| replyBalloonTextContainerInset_sIsBoldTextEnabled_replyBalloonTextContainerInset != IsBoldTextEnabled|| (uint64_t v11 = replyBalloonTextContainerInset_sTextFontSize_replyBalloonTextContainerInset, *(double *)&replyBalloonTextContainerInset_sTextFontSize_replyBalloonTextContainerInset != v5)|| (uint64_t v11 = replyBalloonTextContainerInset_sCustomTextFontSize_replyBalloonTextContainerInset, *(double *)&replyBalloonTextContainerInset_sCustomTextFontSize_replyBalloonTextContainerInset != v6)|| (objc_msgSend((id)replyBalloonTextContainerInset_sCustomTextFontName_replyBalloonTextContainerInset, "isEqualToString:", v9, *(double *)&replyBalloonTextContainerInset_sCustomTextFontSize_replyBalloonTextContainerInset) & 1) == 0)
  {
    [(CKUIBehavior *)self _replyBalloonTextContainerInset];
    replyBalloonTextContainerInset_sBehavior_0 = v12;
    replyBalloonTextContainerInset_sBehavior_1 = v13;
    replyBalloonTextContainerInset_sBehavior_2 = v14;
    replyBalloonTextContainerInset_sBehavior_3 = v15;
    objc_storeStrong((id *)&replyBalloonTextContainerInset_sContentSizeCategory_replyBalloonTextContainerInset, v3);
    replyBalloonTextContainerInset_sIsBoldTextEnabled_replyBalloonTextContainerInset = IsBoldTextEnabled;
    replyBalloonTextContainerInset_sTextFontSize_replyBalloonTextContainerInset = *(void *)&v5;
    replyBalloonTextContainerInset_sCustomTextFontSize_replyBalloonTextContainerInset = *(void *)&v6;
    objc_storeStrong((id *)&replyBalloonTextContainerInset_sCustomTextFontName_replyBalloonTextContainerInset, v8);
  }
  uint64_t v16 = replyBalloonTextContainerInset_sBehavior_0;
  uint64_t v17 = replyBalloonTextContainerInset_sBehavior_1;
  uint64_t v18 = replyBalloonTextContainerInset_sBehavior_2;
  uint64_t v19 = replyBalloonTextContainerInset_sBehavior_3;

  double v20 = *(double *)&v16;
  double v21 = *(double *)&v17;
  double v22 = *(double *)&v18;
  double v23 = *(double *)&v19;
  result.double right = v23;
  result.double bottom = v22;
  result.double left = v21;
  result.double top = v20;
  return result;
}

- (UIEdgeInsets)balloonMaskFrameInsets
{
  if (balloonMaskFrameInsets_once != -1) {
    dispatch_once(&balloonMaskFrameInsets_once, &__block_literal_global_1087);
  }
  double v2 = *(double *)&balloonMaskFrameInsets_sBehavior_0;
  double v3 = *(double *)&balloonMaskFrameInsets_sBehavior_1;
  double v4 = *(double *)&balloonMaskFrameInsets_sBehavior_2;
  double v5 = *(double *)&balloonMaskFrameInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __38__CKUIBehavior_balloonMaskFrameInsets__block_invoke()
{
  balloonMaskFrameInsets_sBehavior_0 = 0x3FF0000000000000;
  balloonMaskFrameInsets_sBehavior_1 = 0x3FF0000000000000;
  balloonMaskFrameInsets_sBehavior_2 = 0x3FF0000000000000;
  balloonMaskFrameInsets_sBehavior_3 = 0x3FF0000000000000;
}

- (UIEdgeInsets)balloonMaskFrameInsetsWithBalloonShape:(char)a3
{
  if (a3 > 5 || a3 == 2)
  {
    double v3 = *MEMORY[0x1E4F437F8];
    double v4 = *(double *)(MEMORY[0x1E4F437F8] + 8);
    double v5 = *(double *)(MEMORY[0x1E4F437F8] + 16);
    double v6 = *(double *)(MEMORY[0x1E4F437F8] + 24);
  }
  else
  {
    [(CKUIBehavior *)self balloonMaskFrameInsets];
  }
  result.double right = v6;
  result.double bottom = v5;
  result.double left = v4;
  result.double top = v3;
  return result;
}

- (double)audioBalloonWaveformTimeSpace
{
  if (audioBalloonWaveformTimeSpace_once != -1) {
    dispatch_once(&audioBalloonWaveformTimeSpace_once, &__block_literal_global_1089);
  }
  return *(double *)&audioBalloonWaveformTimeSpace_sBehavior;
}

void __45__CKUIBehavior_audioBalloonWaveformTimeSpace__block_invoke()
{
  audioBalloonWaveformTimeSpace_sBehavior = 0x4018000000000000;
}

- (CGSize)audioProgressViewSize
{
  if (audioProgressViewSize_once != -1) {
    dispatch_once(&audioProgressViewSize_once, &__block_literal_global_1091);
  }
  double v2 = *(double *)&audioProgressViewSize_sBehavior_0;
  double v3 = *(double *)&audioProgressViewSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __37__CKUIBehavior_audioProgressViewSize__block_invoke()
{
  audioProgressViewSize_sBehavior_0 = 0x403D000000000000;
  audioProgressViewSize_sBehavior_1 = 0x403D000000000000;
}

- (BOOL)ckShouldUpdateaudioBalloonTimeInset
{
  return 0;
}

- (double)audioBalloonTimeInset
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    int v8 = v7;
  }
  else {
    int v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)audioBalloonTimeInset_sContentSizeCategory_audioBalloonTimeInset, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaudioBalloonTimeInset]
    || v10
    || audioBalloonTimeInset_sIsBoldTextEnabled_audioBalloonTimeInset != IsBoldTextEnabled
    || (uint64_t v11 = audioBalloonTimeInset_sTextFontSize_audioBalloonTimeInset,
        *(double *)&audioBalloonTimeInset_sTextFontSize_audioBalloonTimeInset != v5)
    || (uint64_t v11 = audioBalloonTimeInset_sCustomTextFontSize_audioBalloonTimeInset,
        *(double *)&audioBalloonTimeInset_sCustomTextFontSize_audioBalloonTimeInset != v6)
    || (objc_msgSend((id)audioBalloonTimeInset_sCustomTextFontName_audioBalloonTimeInset, "isEqualToString:", v9, *(double *)&audioBalloonTimeInset_sCustomTextFontSize_audioBalloonTimeInset) & 1) == 0)
  {
    BOOL v12 = [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    double v13 = 8.0;
    if (v12) {
      double v13 = 18.0;
    }
    audioBalloonTimeInset_sBehavior = *(void *)&v13;
    objc_storeStrong((id *)&audioBalloonTimeInset_sContentSizeCategory_audioBalloonTimeInset, v3);
    audioBalloonTimeInset_sIsBoldTextEnabled_audioBalloonTimeInset = IsBoldTextEnabled;
    audioBalloonTimeInset_sTextFontSize_audioBalloonTimeInset = *(void *)&v5;
    audioBalloonTimeInset_sCustomTextFontSize_audioBalloonTimeInset = *(void *)&v6;
    objc_storeStrong((id *)&audioBalloonTimeInset_sCustomTextFontName_audioBalloonTimeInset, v8);
  }
  double v14 = *(double *)&audioBalloonTimeInset_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateaudioBalloonProgressInset
{
  return 0;
}

- (double)audioBalloonProgressInset
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    int v8 = v7;
  }
  else {
    int v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)audioBalloonProgressInset_sContentSizeCategory_audioBalloonProgressInset, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaudioBalloonProgressInset]
    || v10
    || audioBalloonProgressInset_sIsBoldTextEnabled_audioBalloonProgressInset != IsBoldTextEnabled
    || (uint64_t v11 = audioBalloonProgressInset_sTextFontSize_audioBalloonProgressInset,
        *(double *)&audioBalloonProgressInset_sTextFontSize_audioBalloonProgressInset != v5)
    || (uint64_t v11 = audioBalloonProgressInset_sCustomTextFontSize_audioBalloonProgressInset,
        *(double *)&audioBalloonProgressInset_sCustomTextFontSize_audioBalloonProgressInset != v6)
    || (objc_msgSend((id)audioBalloonProgressInset_sCustomTextFontName_audioBalloonProgressInset, "isEqualToString:", v9, *(double *)&audioBalloonProgressInset_sCustomTextFontSize_audioBalloonProgressInset) & 1) == 0)
  {
    BOOL v12 = [(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory];
    double v13 = 3.0;
    if (v12) {
      double v13 = 13.0;
    }
    audioBalloonProgressInset_sBehavior = *(void *)&v13;
    objc_storeStrong((id *)&audioBalloonProgressInset_sContentSizeCategory_audioBalloonProgressInset, v3);
    audioBalloonProgressInset_sIsBoldTextEnabled_audioBalloonProgressInset = IsBoldTextEnabled;
    audioBalloonProgressInset_sTextFontSize_audioBalloonProgressInset = *(void *)&v5;
    audioBalloonProgressInset_sCustomTextFontSize_audioBalloonProgressInset = *(void *)&v6;
    objc_storeStrong((id *)&audioBalloonProgressInset_sCustomTextFontName_audioBalloonProgressInset, v8);
  }
  double v14 = *(double *)&audioBalloonProgressInset_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateaudioBalloonAlignmentInsets
{
  return 0;
}

- (UIEdgeInsets)audioBalloonAlignmentInsets
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    int v8 = v7;
  }
  else {
    int v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)audioBalloonAlignmentInsets_sContentSizeCategory_audioBalloonAlignmentInsets, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaudioBalloonAlignmentInsets]
    || v10
    || audioBalloonAlignmentInsets_sIsBoldTextEnabled_audioBalloonAlignmentInsets != IsBoldTextEnabled
    || (uint64_t v11 = audioBalloonAlignmentInsets_sTextFontSize_audioBalloonAlignmentInsets,
        *(double *)&audioBalloonAlignmentInsets_sTextFontSize_audioBalloonAlignmentInsets != v5)
    || (uint64_t v11 = audioBalloonAlignmentInsets_sCustomTextFontSize_audioBalloonAlignmentInsets,
        *(double *)&audioBalloonAlignmentInsets_sCustomTextFontSize_audioBalloonAlignmentInsets != v6)
    || (objc_msgSend((id)audioBalloonAlignmentInsets_sCustomTextFontName_audioBalloonAlignmentInsets, "isEqualToString:", v9, *(double *)&audioBalloonAlignmentInsets_sCustomTextFontSize_audioBalloonAlignmentInsets) & 1) == 0)
  {
    if ([(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory])
    {
      uint64_t v12 = 0;
      double v13 = 2.0;
      double v14 = 2.0;
      uint64_t v15 = 0;
    }
    else
    {
      double v13 = *MEMORY[0x1E4F437F8];
      uint64_t v12 = *(void *)(MEMORY[0x1E4F437F8] + 8);
      double v14 = *(double *)(MEMORY[0x1E4F437F8] + 16);
      uint64_t v15 = *(void *)(MEMORY[0x1E4F437F8] + 24);
    }
    audioBalloonAlignmentInsets_sBehavior_0 = *(void *)&v13;
    audioBalloonAlignmentInsets_sBehavior_1 = v12;
    audioBalloonAlignmentInsets_sBehavior_2 = *(void *)&v14;
    audioBalloonAlignmentInsets_sBehavior_3 = v15;
    objc_storeStrong((id *)&audioBalloonAlignmentInsets_sContentSizeCategory_audioBalloonAlignmentInsets, v3);
    audioBalloonAlignmentInsets_sIsBoldTextEnabled_audioBalloonAlignmentInsets = IsBoldTextEnabled;
    audioBalloonAlignmentInsets_sTextFontSize_audioBalloonAlignmentInsets = *(void *)&v5;
    audioBalloonAlignmentInsets_sCustomTextFontSize_audioBalloonAlignmentInsets = *(void *)&v6;
    objc_storeStrong((id *)&audioBalloonAlignmentInsets_sCustomTextFontName_audioBalloonAlignmentInsets, v8);
  }
  uint64_t v16 = audioBalloonAlignmentInsets_sBehavior_0;
  uint64_t v17 = audioBalloonAlignmentInsets_sBehavior_1;
  uint64_t v18 = audioBalloonAlignmentInsets_sBehavior_2;
  uint64_t v19 = audioBalloonAlignmentInsets_sBehavior_3;

  double v20 = *(double *)&v16;
  double v21 = *(double *)&v17;
  double v22 = *(double *)&v18;
  double v23 = *(double *)&v19;
  result.double right = v23;
  result.double bottom = v22;
  result.double left = v21;
  result.double top = v20;
  return result;
}

- (double)verticalBalloonBadgeInset
{
  if (verticalBalloonBadgeInset_once != -1) {
    dispatch_once(&verticalBalloonBadgeInset_once, &__block_literal_global_1093);
  }
  return *(double *)&verticalBalloonBadgeInset_sBehavior;
}

void __41__CKUIBehavior_verticalBalloonBadgeInset__block_invoke()
{
  verticalBalloonBadgeInset_sBehavior = 0x4022000000000000;
}

- (double)horizontalBalloonBadgeInset
{
  if (horizontalBalloonBadgeInset_once != -1) {
    dispatch_once(&horizontalBalloonBadgeInset_once, &__block_literal_global_1095);
  }
  return *(double *)&horizontalBalloonBadgeInset_sBehavior;
}

void __43__CKUIBehavior_horizontalBalloonBadgeInset__block_invoke()
{
  horizontalBalloonBadgeInset_sBehavior = 0x4026000000000000;
}

- (double)stackBalloonVerticalInset
{
  if (stackBalloonVerticalInset_once != -1) {
    dispatch_once(&stackBalloonVerticalInset_once, &__block_literal_global_1097);
  }
  return *(double *)&stackBalloonVerticalInset_sBehavior;
}

void __41__CKUIBehavior_stackBalloonVerticalInset__block_invoke()
{
  stackBalloonVerticalInset_sBehavior = 0x402E000000000000;
}

- (CGSize)previewBalloonSizeThatFits:(CGSize)a3
{
  double width = a3.width;
  double v4 = +[CKUIBehavior sharedBehaviors];
  [v4 previewMaxWidth];
  double v6 = v5;

  if (width >= v6) {
    double v7 = v6;
  }
  else {
    double v7 = width;
  }
  double v8 = v7 * 1.25;
  double v9 = +[CKUIBehavior sharedBehaviors];
  [v9 stackBalloonVerticalInset];
  double v11 = v10;
  uint64_t v12 = +[CKUIBehavior sharedBehaviors];
  [v12 smallTranscriptSpace];
  double v14 = v8 - (v13 * -2.0 + v11 * 2.0);

  double v15 = v8;
  double v16 = v14;
  result.double height = v16;
  result.double width = v15;
  return result;
}

- (double)audioHintViewPadding
{
  if (audioHintViewPadding_once != -1) {
    dispatch_once(&audioHintViewPadding_once, &__block_literal_global_1099);
  }
  return *(double *)&audioHintViewPadding_sBehavior;
}

void __36__CKUIBehavior_audioHintViewPadding__block_invoke()
{
  audioHintViewPadding_sBehavior = 0x4024000000000000;
}

- (double)audioRecordingViewMaximumDBLevel
{
  if (audioRecordingViewMaximumDBLevel_once != -1) {
    dispatch_once(&audioRecordingViewMaximumDBLevel_once, &__block_literal_global_1101);
  }
  return *(double *)&audioRecordingViewMaximumDBLevel_sBehavior;
}

void __48__CKUIBehavior_audioRecordingViewMaximumDBLevel__block_invoke()
{
  audioRecordingViewMaximumDBLevel_sBehavior = 0xC024000000000000;
}

- (double)audioRecordingViewMinimumDBLevel
{
  if (audioRecordingViewMinimumDBLevel_once != -1) {
    dispatch_once(&audioRecordingViewMinimumDBLevel_once, &__block_literal_global_1103);
  }
  return *(double *)&audioRecordingViewMinimumDBLevel_sBehavior;
}

void __48__CKUIBehavior_audioRecordingViewMinimumDBLevel__block_invoke()
{
  audioRecordingViewMinimumDBLevel_sBehavior = 0xC04E000000000000;
}

- (double)audioRecordingViewTimeBetweenWaveformSegments
{
  if (audioRecordingViewTimeBetweenWaveformSegments_once != -1) {
    dispatch_once(&audioRecordingViewTimeBetweenWaveformSegments_once, &__block_literal_global_1105);
  }
  return *(double *)&audioRecordingViewTimeBetweenWaveformSegments_sBehavior;
}

void __61__CKUIBehavior_audioRecordingViewTimeBetweenWaveformSegments__block_invoke()
{
  audioRecordingViewTimeBetweenWaveformSegments_sBehavior = 0x3FB5555555555555;
}

- (double)audioRecordingViewPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__CKUIBehavior_audioRecordingViewPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (audioRecordingViewPadding_once != -1) {
    dispatch_once(&audioRecordingViewPadding_once, block);
  }
  return *(double *)&audioRecordingViewPadding_sBehavior;
}

uint64_t __41__CKUIBehavior_audioRecordingViewPadding__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) audioRecordingViewPaddingFloat];
  audioRecordingViewPadding_sBehavior = v2;
  return result;
}

- (double)audioRecordingViewPaddingFloat
{
  return 32.0;
}

- (double)audioRecordingViewButtonSpacing
{
  if (audioRecordingViewButtonSpacing_once != -1) {
    dispatch_once(&audioRecordingViewButtonSpacing_once, &__block_literal_global_1107);
  }
  return *(double *)&audioRecordingViewButtonSpacing_sBehavior;
}

void __47__CKUIBehavior_audioRecordingViewButtonSpacing__block_invoke()
{
  audioRecordingViewButtonSpacing_sBehavior = 0x4030000000000000;
}

- (double)audioRecordingViewDurationSpacing
{
  if (audioRecordingViewDurationSpacing_once != -1) {
    dispatch_once(&audioRecordingViewDurationSpacing_once, &__block_literal_global_1109);
  }
  return *(double *)&audioRecordingViewDurationSpacing_sBehavior;
}

void __49__CKUIBehavior_audioRecordingViewDurationSpacing__block_invoke()
{
  audioRecordingViewDurationSpacing_sBehavior = 0x4028000000000000;
}

- (double)audioRecordingViewLeadingButtonPadding
{
  if (audioRecordingViewLeadingButtonPadding_once != -1) {
    dispatch_once(&audioRecordingViewLeadingButtonPadding_once, &__block_literal_global_1111);
  }
  return 0.0;
}

- (double)audioRecordingViewWaveformSpacing
{
  if (audioRecordingViewWaveformSpacing_once != -1) {
    dispatch_once(&audioRecordingViewWaveformSpacing_once, &__block_literal_global_1113);
  }
  return 0.0;
}

- (double)audioBalloonHorizontalSpacing
{
  if (audioBalloonHorizontalSpacing_once != -1) {
    dispatch_once(&audioBalloonHorizontalSpacing_once, &__block_literal_global_1115);
  }
  return *(double *)&audioBalloonHorizontalSpacing_sBehavior;
}

void __45__CKUIBehavior_audioBalloonHorizontalSpacing__block_invoke()
{
  audioBalloonHorizontalSpacing_sBehavior = 0x4024000000000000;
}

- (double)audioBalloonVerticalSpacing
{
  if (audioBalloonVerticalSpacing_once != -1) {
    dispatch_once(&audioBalloonVerticalSpacing_once, &__block_literal_global_1117);
  }
  return *(double *)&audioBalloonVerticalSpacing_sBehavior;
}

void __43__CKUIBehavior_audioBalloonVerticalSpacing__block_invoke()
{
  audioBalloonVerticalSpacing_sBehavior = 0x401C000000000000;
}

- (BOOL)ckShouldUpdateaudioBalloonTimeFont
{
  return 0;
}

- (UIFont)audioBalloonTimeFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)audioBalloonTimeFont_sContentSizeCategory_audioBalloonTimeFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaudioBalloonTimeFont]
    || v11
    || audioBalloonTimeFont_sIsIncreaseContrastEnabled_audioBalloonTimeFont != v4
    || audioBalloonTimeFont_sIsBoldTextEnabled_audioBalloonTimeFont != IsBoldTextEnabled
    || (uint64_t v12 = audioBalloonTimeFont_sTextFontSize_audioBalloonTimeFont,
        *(double *)&audioBalloonTimeFont_sTextFontSize_audioBalloonTimeFont != v6)
    || (uint64_t v12 = audioBalloonTimeFont_sCustomTextFontSize_audioBalloonTimeFont,
        *(double *)&audioBalloonTimeFont_sCustomTextFontSize_audioBalloonTimeFont != v7)
    || (objc_msgSend((id)audioBalloonTimeFont_sCustomTextFontName_audioBalloonTimeFont, "isEqualToString:", v10, *(double *)&audioBalloonTimeFont_sCustomTextFontSize_audioBalloonTimeFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortMonospacedPreferredFontForTextStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    double v14 = (void *)audioBalloonTimeFont_sBehavior;
    audioBalloonTimeFont_sBehavior = v13;

    objc_storeStrong((id *)&audioBalloonTimeFont_sContentSizeCategory_audioBalloonTimeFont, v3);
    audioBalloonTimeFont_sIsIncreaseContrastEnabled_audioBalloonTimeFont = v4;
    audioBalloonTimeFont_sIsBoldTextEnabled_audioBalloonTimeFont = IsBoldTextEnabled;
    audioBalloonTimeFont_sTextFontSize_audioBalloonTimeFont = *(void *)&v6;
    audioBalloonTimeFont_sCustomTextFontSize_audioBalloonTimeFont = *(void *)&v7;
    objc_storeStrong((id *)&audioBalloonTimeFont_sCustomTextFontName_audioBalloonTimeFont, v9);
  }
  double v15 = (UIFont *)(id)audioBalloonTimeFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateaudioBalloonSpeedFont
{
  return 0;
}

- (UIFont)audioBalloonSpeedFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)audioBalloonSpeedFont_sContentSizeCategory_audioBalloonSpeedFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaudioBalloonSpeedFont]
    || v11
    || audioBalloonSpeedFont_sIsIncreaseContrastEnabled_audioBalloonSpeedFont != v4
    || audioBalloonSpeedFont_sIsBoldTextEnabled_audioBalloonSpeedFont != IsBoldTextEnabled
    || (uint64_t v12 = audioBalloonSpeedFont_sTextFontSize_audioBalloonSpeedFont,
        *(double *)&audioBalloonSpeedFont_sTextFontSize_audioBalloonSpeedFont != v6)
    || (uint64_t v12 = audioBalloonSpeedFont_sCustomTextFontSize_audioBalloonSpeedFont,
        *(double *)&audioBalloonSpeedFont_sCustomTextFontSize_audioBalloonSpeedFont != v7)
    || (objc_msgSend((id)audioBalloonSpeedFont_sCustomTextFontName_audioBalloonSpeedFont, "isEqualToString:", v10, *(double *)&audioBalloonSpeedFont_sCustomTextFontSize_audioBalloonSpeedFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortMonospacedPreferredFontForTextStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    uint64_t v14 = objc_msgSend(v13, "__ck_fontWithWeight:", *MEMORY[0x1E4FB09D0]);
    double v15 = (void *)audioBalloonSpeedFont_sBehavior;
    audioBalloonSpeedFont_sBehavior = v14;

    objc_storeStrong((id *)&audioBalloonSpeedFont_sContentSizeCategory_audioBalloonSpeedFont, v3);
    audioBalloonSpeedFont_sIsIncreaseContrastEnabled_audioBalloonSpeedFont = v4;
    audioBalloonSpeedFont_sIsBoldTextEnabled_audioBalloonSpeedFont = IsBoldTextEnabled;
    audioBalloonSpeedFont_sTextFontSize_audioBalloonSpeedFont = *(void *)&v6;
    audioBalloonSpeedFont_sCustomTextFontSize_audioBalloonSpeedFont = *(void *)&v7;
    objc_storeStrong((id *)&audioBalloonSpeedFont_sCustomTextFontName_audioBalloonSpeedFont, v9);
  }
  double v16 = (UIFont *)(id)audioBalloonSpeedFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateaudioBalloonTranscriptionFont
{
  return 0;
}

- (UIFont)audioBalloonTranscriptionFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)audioBalloonTranscriptionFont_sContentSizeCategory_audioBalloonTranscriptionFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaudioBalloonTranscriptionFont]
    || v11
    || audioBalloonTranscriptionFont_sIsIncreaseContrastEnabled_audioBalloonTranscriptionFont != v4
    || audioBalloonTranscriptionFont_sIsBoldTextEnabled_audioBalloonTranscriptionFont != IsBoldTextEnabled
    || (uint64_t v12 = audioBalloonTranscriptionFont_sTextFontSize_audioBalloonTranscriptionFont,
        *(double *)&audioBalloonTranscriptionFont_sTextFontSize_audioBalloonTranscriptionFont != v6)
    || (uint64_t v12 = audioBalloonTranscriptionFont_sCustomTextFontSize_audioBalloonTranscriptionFont,
        *(double *)&audioBalloonTranscriptionFont_sCustomTextFontSize_audioBalloonTranscriptionFont != v7)
    || (objc_msgSend((id)audioBalloonTranscriptionFont_sCustomTextFontName_audioBalloonTranscriptionFont, "isEqualToString:", v10, *(double *)&audioBalloonTranscriptionFont_sCustomTextFontSize_audioBalloonTranscriptionFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    uint64_t v14 = (void *)audioBalloonTranscriptionFont_sBehavior;
    audioBalloonTranscriptionFont_sBehavior = v13;

    objc_storeStrong((id *)&audioBalloonTranscriptionFont_sContentSizeCategory_audioBalloonTranscriptionFont, v3);
    audioBalloonTranscriptionFont_sIsIncreaseContrastEnabled_audioBalloonTranscriptionFont = v4;
    audioBalloonTranscriptionFont_sIsBoldTextEnabled_audioBalloonTranscriptionFont = IsBoldTextEnabled;
    audioBalloonTranscriptionFont_sTextFontSize_audioBalloonTranscriptionFont = *(void *)&v6;
    audioBalloonTranscriptionFont_sCustomTextFontSize_audioBalloonTranscriptionFont = *(void *)&v7;
    objc_storeStrong((id *)&audioBalloonTranscriptionFont_sCustomTextFontName_audioBalloonTranscriptionFont, v9);
  }
  double v15 = (UIFont *)(id)audioBalloonTranscriptionFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatedefaultBalloonTextFont
{
  return 0;
}

- (UIFont)defaultBalloonTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)defaultBalloonTextFont_sContentSizeCategory_defaultBalloonTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatedefaultBalloonTextFont]
    || v11
    || defaultBalloonTextFont_sIsIncreaseContrastEnabled_defaultBalloonTextFont != v4
    || defaultBalloonTextFont_sIsBoldTextEnabled_defaultBalloonTextFont != IsBoldTextEnabled
    || (uint64_t v12 = defaultBalloonTextFont_sTextFontSize_defaultBalloonTextFont,
        *(double *)&defaultBalloonTextFont_sTextFontSize_defaultBalloonTextFont != v6)
    || (uint64_t v12 = defaultBalloonTextFont_sCustomTextFontSize_defaultBalloonTextFont,
        *(double *)&defaultBalloonTextFont_sCustomTextFontSize_defaultBalloonTextFont != v7)
    || (objc_msgSend((id)defaultBalloonTextFont_sCustomTextFontName_defaultBalloonTextFont, "isEqualToString:", v10, *(double *)&defaultBalloonTextFont_sCustomTextFontSize_defaultBalloonTextFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    uint64_t v14 = (void *)defaultBalloonTextFont_sBehavior;
    defaultBalloonTextFont_sBehavior = v13;

    objc_storeStrong((id *)&defaultBalloonTextFont_sContentSizeCategory_defaultBalloonTextFont, v3);
    defaultBalloonTextFont_sIsIncreaseContrastEnabled_defaultBalloonTextFont = v4;
    defaultBalloonTextFont_sIsBoldTextEnabled_defaultBalloonTextFont = IsBoldTextEnabled;
    defaultBalloonTextFont_sTextFontSize_defaultBalloonTextFont = *(void *)&v6;
    defaultBalloonTextFont_sCustomTextFontSize_defaultBalloonTextFont = *(void *)&v7;
    objc_storeStrong((id *)&defaultBalloonTextFont_sCustomTextFontName_defaultBalloonTextFont, v9);
  }
  double v15 = (UIFont *)(id)defaultBalloonTextFont_sBehavior;

  return v15;
}

- (id)_balloonSubjectFont
{
  return (id)objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortEmphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F43870]);
}

- (BOOL)ckShouldUpdateballoonSubjectFont
{
  return 0;
}

- (UIFont)balloonSubjectFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)balloonSubjectFont_sContentSizeCategory_balloonSubjectFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateballoonSubjectFont]
    || v11
    || balloonSubjectFont_sIsIncreaseContrastEnabled_balloonSubjectFont != v4
    || balloonSubjectFont_sIsBoldTextEnabled_balloonSubjectFont != IsBoldTextEnabled
    || (uint64_t v12 = balloonSubjectFont_sTextFontSize_balloonSubjectFont,
        *(double *)&balloonSubjectFont_sTextFontSize_balloonSubjectFont != v6)
    || (uint64_t v12 = balloonSubjectFont_sCustomTextFontSize_balloonSubjectFont,
        *(double *)&balloonSubjectFont_sCustomTextFontSize_balloonSubjectFont != v7)
    || (objc_msgSend((id)balloonSubjectFont_sCustomTextFontName_balloonSubjectFont, "isEqualToString:", v10, *(double *)&balloonSubjectFont_sCustomTextFontSize_balloonSubjectFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self _balloonSubjectFont];
    uint64_t v14 = (void *)balloonSubjectFont_sBehavior;
    balloonSubjectFont_sBehavior = v13;

    objc_storeStrong((id *)&balloonSubjectFont_sContentSizeCategory_balloonSubjectFont, v3);
    balloonSubjectFont_sIsIncreaseContrastEnabled_balloonSubjectFont = v4;
    balloonSubjectFont_sIsBoldTextEnabled_balloonSubjectFont = IsBoldTextEnabled;
    balloonSubjectFont_sTextFontSize_balloonSubjectFont = *(void *)&v6;
    balloonSubjectFont_sCustomTextFontSize_balloonSubjectFont = *(void *)&v7;
    objc_storeStrong((id *)&balloonSubjectFont_sCustomTextFontName_balloonSubjectFont, v9);
  }
  double v15 = (UIFont *)(id)balloonSubjectFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesingleBigEmojiFont
{
  return 0;
}

- (UIFont)singleBigEmojiFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)singleBigEmojiFont_sContentSizeCategory_singleBigEmojiFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesingleBigEmojiFont]
    || v11
    || singleBigEmojiFont_sIsIncreaseContrastEnabled_singleBigEmojiFont != v4
    || singleBigEmojiFont_sIsBoldTextEnabled_singleBigEmojiFont != IsBoldTextEnabled
    || *(double *)&singleBigEmojiFont_sTextFontSize_singleBigEmojiFont != v6
    || *(double *)&singleBigEmojiFont_sCustomTextFontSize_singleBigEmojiFont != v7
    || (objc_msgSend((id)singleBigEmojiFont_sCustomTextFontName_singleBigEmojiFont, "isEqualToString:", v10, *(double *)&singleBigEmojiFont_sCustomTextFontSize_singleBigEmojiFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:72.0];
    uint64_t v13 = (void *)singleBigEmojiFont_sBehavior;
    singleBigEmojiFont_sBehavior = v12;

    objc_storeStrong((id *)&singleBigEmojiFont_sContentSizeCategory_singleBigEmojiFont, v3);
    singleBigEmojiFont_sIsIncreaseContrastEnabled_singleBigEmojiFont = v4;
    singleBigEmojiFont_sIsBoldTextEnabled_singleBigEmojiFont = IsBoldTextEnabled;
    singleBigEmojiFont_sTextFontSize_singleBigEmojiFont = *(void *)&v6;
    singleBigEmojiFont_sCustomTextFontSize_singleBigEmojiFont = *(void *)&v7;
    objc_storeStrong((id *)&singleBigEmojiFont_sCustomTextFontName_singleBigEmojiFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)singleBigEmojiFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatesingleBigAssetFont
{
  return 0;
}

- (UIFont)singleBigAssetFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)singleBigAssetFont_sContentSizeCategory_singleBigAssetFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesingleBigAssetFont]
    || v11
    || singleBigAssetFont_sIsIncreaseContrastEnabled_singleBigAssetFont != v4
    || singleBigAssetFont_sIsBoldTextEnabled_singleBigAssetFont != IsBoldTextEnabled
    || *(double *)&singleBigAssetFont_sTextFontSize_singleBigAssetFont != v6
    || *(double *)&singleBigAssetFont_sCustomTextFontSize_singleBigAssetFont != v7
    || (objc_msgSend((id)singleBigAssetFont_sCustomTextFontName_singleBigAssetFont, "isEqualToString:", v10, *(double *)&singleBigAssetFont_sCustomTextFontSize_singleBigAssetFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:128.0];
    uint64_t v13 = (void *)singleBigAssetFont_sBehavior;
    singleBigAssetFont_sBehavior = v12;

    objc_storeStrong((id *)&singleBigAssetFont_sContentSizeCategory_singleBigAssetFont, v3);
    singleBigAssetFont_sIsIncreaseContrastEnabled_singleBigAssetFont = v4;
    singleBigAssetFont_sIsBoldTextEnabled_singleBigAssetFont = IsBoldTextEnabled;
    singleBigAssetFont_sTextFontSize_singleBigAssetFont = *(void *)&v6;
    singleBigAssetFont_sCustomTextFontSize_singleBigAssetFont = *(void *)&v7;
    objc_storeStrong((id *)&singleBigAssetFont_sCustomTextFontName_singleBigAssetFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)singleBigAssetFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatemultipleBigEmojiFont
{
  return 0;
}

- (UIFont)multipleBigEmojiFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)multipleBigEmojiFont_sContentSizeCategory_multipleBigEmojiFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatemultipleBigEmojiFont]
    || v11
    || multipleBigEmojiFont_sIsIncreaseContrastEnabled_multipleBigEmojiFont != v4
    || multipleBigEmojiFont_sIsBoldTextEnabled_multipleBigEmojiFont != IsBoldTextEnabled
    || *(double *)&multipleBigEmojiFont_sTextFontSize_multipleBigEmojiFont != v6
    || *(double *)&multipleBigEmojiFont_sCustomTextFontSize_multipleBigEmojiFont != v7
    || (objc_msgSend((id)multipleBigEmojiFont_sCustomTextFontName_multipleBigEmojiFont, "isEqualToString:", v10, *(double *)&multipleBigEmojiFont_sCustomTextFontSize_multipleBigEmojiFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:48.0];
    uint64_t v13 = (void *)multipleBigEmojiFont_sBehavior;
    multipleBigEmojiFont_sBehavior = v12;

    objc_storeStrong((id *)&multipleBigEmojiFont_sContentSizeCategory_multipleBigEmojiFont, v3);
    multipleBigEmojiFont_sIsIncreaseContrastEnabled_multipleBigEmojiFont = v4;
    multipleBigEmojiFont_sIsBoldTextEnabled_multipleBigEmojiFont = IsBoldTextEnabled;
    multipleBigEmojiFont_sTextFontSize_multipleBigEmojiFont = *(void *)&v6;
    multipleBigEmojiFont_sCustomTextFontSize_multipleBigEmojiFont = *(void *)&v7;
    objc_storeStrong((id *)&multipleBigEmojiFont_sCustomTextFontName_multipleBigEmojiFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)multipleBigEmojiFont_sBehavior;

  return v14;
}

- (int64_t)maximumEmojiCountForMultipleBigEmojiFont
{
  if (maximumEmojiCountForMultipleBigEmojiFont_once != -1) {
    dispatch_once(&maximumEmojiCountForMultipleBigEmojiFont_once, &__block_literal_global_1119);
  }
  if (maximumEmojiCountForMultipleBigEmojiFont_sBehavior) {
    return 3;
  }
  else {
    return 0;
  }
}

void __56__CKUIBehavior_maximumEmojiCountForMultipleBigEmojiFont__block_invoke()
{
  maximumEmojiCountForMultipleBigEmojiFont_sBehavior = 1;
}

- (BOOL)ckShouldUpdatebigEmojiFont
{
  return 0;
}

- (UIFont)bigEmojiFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)bigEmojiFont_sContentSizeCategory_bigEmojiFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatebigEmojiFont]
    || v11
    || bigEmojiFont_sIsIncreaseContrastEnabled_bigEmojiFont != v4
    || bigEmojiFont_sIsBoldTextEnabled_bigEmojiFont != IsBoldTextEnabled
    || (uint64_t v12 = bigEmojiFont_sTextFontSize_bigEmojiFont, *(double *)&bigEmojiFont_sTextFontSize_bigEmojiFont != v6)
    || (uint64_t v12 = bigEmojiFont_sCustomTextFontSize_bigEmojiFont,
        *(double *)&bigEmojiFont_sCustomTextFontSize_bigEmojiFont != v7)
    || (objc_msgSend((id)bigEmojiFont_sCustomTextFontName_bigEmojiFont, "isEqualToString:", v10, *(double *)&bigEmojiFont_sCustomTextFontSize_bigEmojiFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self multipleBigEmojiFont];
    uint64_t v14 = (void *)bigEmojiFont_sBehavior;
    bigEmojiFont_sBehavior = v13;

    objc_storeStrong((id *)&bigEmojiFont_sContentSizeCategory_bigEmojiFont, v3);
    bigEmojiFont_sIsIncreaseContrastEnabled_bigEmojiFont = v4;
    bigEmojiFont_sIsBoldTextEnabled_bigEmojiFont = IsBoldTextEnabled;
    bigEmojiFont_sTextFontSize_bigEmojiFont = *(void *)&v6;
    bigEmojiFont_sCustomTextFontSize_bigEmojiFont = *(void *)&v7;
    objc_storeStrong((id *)&bigEmojiFont_sCustomTextFontName_bigEmojiFont, v9);
  }
  double v15 = (UIFont *)(id)bigEmojiFont_sBehavior;

  return v15;
}

- (id)_balloonParagraphStyle
{
  double v3 = [MEMORY[0x1E4FB0850] defaultParagraphStyle];
  int v4 = (void *)[v3 mutableCopy];

  if ([(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory])
  {
    LODWORD(v5) = 1.0;
    [v4 setHyphenationFactor:v5];
  }
  double v6 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v7 = [v6 isTextKit2Enabled];

  if (v7) {
    [v4 setHorizontalAlignment:0];
  }

  return v4;
}

- (BOOL)ckShouldUpdateballoonParagraphStyle
{
  return 0;
}

- (NSParagraphStyle)balloonParagraphStyle
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)balloonParagraphStyle_sContentSizeCategory_balloonParagraphStyle, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateballoonParagraphStyle]
    || v11
    || balloonParagraphStyle_sIsIncreaseContrastEnabled_balloonParagraphStyle != v4
    || balloonParagraphStyle_sIsBoldTextEnabled_balloonParagraphStyle != IsBoldTextEnabled
    || (uint64_t v12 = balloonParagraphStyle_sTextFontSize_balloonParagraphStyle,
        *(double *)&balloonParagraphStyle_sTextFontSize_balloonParagraphStyle != v6)
    || (uint64_t v12 = balloonParagraphStyle_sCustomTextFontSize_balloonParagraphStyle,
        *(double *)&balloonParagraphStyle_sCustomTextFontSize_balloonParagraphStyle != v7)
    || (objc_msgSend((id)balloonParagraphStyle_sCustomTextFontName_balloonParagraphStyle, "isEqualToString:", v10, *(double *)&balloonParagraphStyle_sCustomTextFontSize_balloonParagraphStyle) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self _balloonParagraphStyle];
    uint64_t v14 = (void *)balloonParagraphStyle_sBehavior;
    balloonParagraphStyle_sBehavior = v13;

    objc_storeStrong((id *)&balloonParagraphStyle_sContentSizeCategory_balloonParagraphStyle, v3);
    balloonParagraphStyle_sIsIncreaseContrastEnabled_balloonParagraphStyle = v4;
    balloonParagraphStyle_sIsBoldTextEnabled_balloonParagraphStyle = IsBoldTextEnabled;
    balloonParagraphStyle_sTextFontSize_balloonParagraphStyle = *(void *)&v6;
    balloonParagraphStyle_sCustomTextFontSize_balloonParagraphStyle = *(void *)&v7;
    objc_storeStrong((id *)&balloonParagraphStyle_sCustomTextFontName_balloonParagraphStyle, v9);
  }
  double v15 = (NSParagraphStyle *)(id)balloonParagraphStyle_sBehavior;

  return v15;
}

- (id)_replyBalloonTextFont
{
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isTextKit2Enabled];

  uint64_t v4 = *MEMORY[0x1E4F43888];
  if (v3)
  {
    double v5 = [MEMORY[0x1E4FB08E8] preferredFontDescriptorWithTextStyle:v4];
    double v6 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v5 size:0.0];
  }
  else
  {
    double v6 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", v4);
  }

  return v6;
}

- (BOOL)ckShouldUpdatereplyBalloonTextFont
{
  return 0;
}

- (UIFont)replyBalloonTextFont
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)replyBalloonTextFont_sContentSizeCategory_replyBalloonTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatereplyBalloonTextFont]
    || v11
    || replyBalloonTextFont_sIsIncreaseContrastEnabled_replyBalloonTextFont != v4
    || replyBalloonTextFont_sIsBoldTextEnabled_replyBalloonTextFont != IsBoldTextEnabled
    || (uint64_t v12 = replyBalloonTextFont_sTextFontSize_replyBalloonTextFont,
        *(double *)&replyBalloonTextFont_sTextFontSize_replyBalloonTextFont != v6)
    || (uint64_t v12 = replyBalloonTextFont_sCustomTextFontSize_replyBalloonTextFont,
        *(double *)&replyBalloonTextFont_sCustomTextFontSize_replyBalloonTextFont != v7)
    || (objc_msgSend((id)replyBalloonTextFont_sCustomTextFontName_replyBalloonTextFont, "isEqualToString:", v10, *(double *)&replyBalloonTextFont_sCustomTextFontSize_replyBalloonTextFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self _replyBalloonTextFont];
    uint64_t v14 = (void *)replyBalloonTextFont_sBehavior;
    replyBalloonTextFont_sBehavior = v13;

    objc_storeStrong((id *)&replyBalloonTextFont_sContentSizeCategory_replyBalloonTextFont, v3);
    replyBalloonTextFont_sIsIncreaseContrastEnabled_replyBalloonTextFont = v4;
    replyBalloonTextFont_sIsBoldTextEnabled_replyBalloonTextFont = IsBoldTextEnabled;
    replyBalloonTextFont_sTextFontSize_replyBalloonTextFont = *(void *)&v6;
    replyBalloonTextFont_sCustomTextFontSize_replyBalloonTextFont = *(void *)&v7;
    objc_storeStrong((id *)&replyBalloonTextFont_sCustomTextFontName_replyBalloonTextFont, v9);
  }
  double v15 = (UIFont *)(id)replyBalloonTextFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatelocationBoldButtonFont
{
  return 0;
}

- (UIFont)locationBoldButtonFont
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)locationBoldButtonFont_sContentSizeCategory_locationBoldButtonFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatelocationBoldButtonFont]
    || v11
    || locationBoldButtonFont_sIsIncreaseContrastEnabled_locationBoldButtonFont != v4
    || locationBoldButtonFont_sIsBoldTextEnabled_locationBoldButtonFont != IsBoldTextEnabled
    || *(double *)&locationBoldButtonFont_sTextFontSize_locationBoldButtonFont != v6
    || *(double *)&locationBoldButtonFont_sCustomTextFontSize_locationBoldButtonFont != v7
    || (objc_msgSend((id)locationBoldButtonFont_sCustomTextFontName_locationBoldButtonFont, "isEqualToString:", v10, *(double *)&locationBoldButtonFont_sCustomTextFontSize_locationBoldButtonFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] boldSystemFontOfSize:18.0];
    uint64_t v13 = (void *)locationBoldButtonFont_sBehavior;
    locationBoldButtonFont_sBehavior = v12;

    objc_storeStrong((id *)&locationBoldButtonFont_sContentSizeCategory_locationBoldButtonFont, v3);
    locationBoldButtonFont_sIsIncreaseContrastEnabled_locationBoldButtonFont = v4;
    locationBoldButtonFont_sIsBoldTextEnabled_locationBoldButtonFont = IsBoldTextEnabled;
    locationBoldButtonFont_sTextFontSize_locationBoldButtonFont = *(void *)&v6;
    locationBoldButtonFont_sCustomTextFontSize_locationBoldButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&locationBoldButtonFont_sCustomTextFontName_locationBoldButtonFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)locationBoldButtonFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatelocationButtonFont
{
  return 0;
}

- (UIFont)locationButtonFont
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  double v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)locationButtonFont_sContentSizeCategory_locationButtonFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatelocationButtonFont]
    || v11
    || locationButtonFont_sIsIncreaseContrastEnabled_locationButtonFont != v4
    || locationButtonFont_sIsBoldTextEnabled_locationButtonFont != IsBoldTextEnabled
    || *(double *)&locationButtonFont_sTextFontSize_locationButtonFont != v6
    || *(double *)&locationButtonFont_sCustomTextFontSize_locationButtonFont != v7
    || (objc_msgSend((id)locationButtonFont_sCustomTextFontName_locationButtonFont, "isEqualToString:", v10, *(double *)&locationButtonFont_sCustomTextFontSize_locationButtonFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:18.0];
    uint64_t v13 = (void *)locationButtonFont_sBehavior;
    locationButtonFont_sBehavior = v12;

    objc_storeStrong((id *)&locationButtonFont_sContentSizeCategory_locationButtonFont, v3);
    locationButtonFont_sIsIncreaseContrastEnabled_locationButtonFont = v4;
    locationButtonFont_sIsBoldTextEnabled_locationButtonFont = IsBoldTextEnabled;
    locationButtonFont_sTextFontSize_locationButtonFont = *(void *)&v6;
    locationButtonFont_sCustomTextFontSize_locationButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&locationButtonFont_sCustomTextFontName_locationButtonFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)locationButtonFont_sBehavior;

  return v14;
}

- (id)mentionTranscriptFontFromOrignalFont:(id)a3
{
  return (id)objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_emphasizedFontFromFont:", a3);
}

- (NSString)balloonName
{
  if (balloonName_once != -1) {
    dispatch_once(&balloonName_once, &__block_literal_global_1121);
  }
  uint64_t v2 = (void *)balloonName_sBehavior;

  return (NSString *)v2;
}

void __27__CKUIBehavior_balloonName__block_invoke()
{
  uint64_t v0 = (void *)balloonName_sBehavior;
  balloonName_sBehavior = @"bubble";
}

- (NSString)taillessBallonName
{
  if (taillessBallonName_once != -1) {
    dispatch_once(&taillessBallonName_once, &__block_literal_global_1126);
  }
  uint64_t v2 = (void *)taillessBallonName_sBehavior;

  return (NSString *)v2;
}

void __34__CKUIBehavior_taillessBallonName__block_invoke()
{
  uint64_t v0 = (void *)taillessBallonName_sBehavior;
  taillessBallonName_sBehavior = @"bubble-tailless";
}

- (NSString)skinnyBalloonName
{
  if (skinnyBalloonName_once != -1) {
    dispatch_once(&skinnyBalloonName_once, &__block_literal_global_1131);
  }
  uint64_t v2 = (void *)skinnyBalloonName_sBehavior;

  return (NSString *)v2;
}

void __33__CKUIBehavior_skinnyBalloonName__block_invoke()
{
  uint64_t v0 = (void *)skinnyBalloonName_sBehavior;
  skinnyBalloonName_sBehavior = @"bubble-min";
}

- (NSString)skinnyTaillessBalloonName
{
  if (skinnyTaillessBalloonName_once != -1) {
    dispatch_once(&skinnyTaillessBalloonName_once, &__block_literal_global_1136);
  }
  uint64_t v2 = (void *)skinnyTaillessBalloonName_sBehavior;

  return (NSString *)v2;
}

void __41__CKUIBehavior_skinnyTaillessBalloonName__block_invoke()
{
  uint64_t v0 = (void *)skinnyTaillessBalloonName_sBehavior;
  skinnyTaillessBalloonName_sBehavior = @"bubble-min-tailless";
}

- (NSString)strokedBalloonName
{
  if (strokedBalloonName_once != -1) {
    dispatch_once(&strokedBalloonName_once, &__block_literal_global_1141);
  }
  uint64_t v2 = (void *)strokedBalloonName_sBehavior;

  return (NSString *)v2;
}

void __34__CKUIBehavior_strokedBalloonName__block_invoke()
{
  uint64_t v0 = (void *)strokedBalloonName_sBehavior;
  strokedBalloonName_sBehavior = @"bubble-stroked";
}

- (NSString)strokedTaillessBalloonName
{
  if (strokedTaillessBalloonName_once != -1) {
    dispatch_once(&strokedTaillessBalloonName_once, &__block_literal_global_1146);
  }
  uint64_t v2 = (void *)strokedTaillessBalloonName_sBehavior;

  return (NSString *)v2;
}

void __42__CKUIBehavior_strokedTaillessBalloonName__block_invoke()
{
  uint64_t v0 = (void *)strokedTaillessBalloonName_sBehavior;
  strokedTaillessBalloonName_sBehavior = @"bubble-stroked-tailless";
}

- (id)impactBalloonName
{
  if (impactBalloonName_once != -1) {
    dispatch_once(&impactBalloonName_once, &__block_literal_global_1151);
  }
  uint64_t v2 = (void *)impactBalloonName_sBehavior;

  return v2;
}

void __33__CKUIBehavior_impactBalloonName__block_invoke()
{
  uint64_t v0 = (void *)impactBalloonName_sBehavior;
  impactBalloonName_sBehavior = @"impact-bubble";
}

- (id)impactSkinnyBalloonName
{
  if (impactSkinnyBalloonName_once != -1) {
    dispatch_once(&impactSkinnyBalloonName_once, &__block_literal_global_1156);
  }
  uint64_t v2 = (void *)impactSkinnyBalloonName_sBehavior;

  return v2;
}

void __39__CKUIBehavior_impactSkinnyBalloonName__block_invoke()
{
  uint64_t v0 = (void *)impactSkinnyBalloonName_sBehavior;
  impactSkinnyBalloonName_sBehavior = @"impact-bubble-min";
}

- (id)roundBalloonName
{
  if (roundBalloonName_once != -1) {
    dispatch_once(&roundBalloonName_once, &__block_literal_global_1161);
  }
  uint64_t v2 = (void *)roundBalloonName_sBehavior;

  return v2;
}

void __32__CKUIBehavior_roundBalloonName__block_invoke()
{
  uint64_t v0 = (void *)roundBalloonName_sBehavior;
  roundBalloonName_sBehavior = @"ack-bubble";
}

- (id)multilineBalloonName
{
  if (multilineBalloonName_once != -1) {
    dispatch_once(&multilineBalloonName_once, &__block_literal_global_1166);
  }
  uint64_t v2 = (void *)multilineBalloonName_sBehavior;

  return v2;
}

void __36__CKUIBehavior_multilineBalloonName__block_invoke()
{
  uint64_t v0 = (void *)multilineBalloonName_sBehavior;
  multilineBalloonName_sBehavior = @"bubble-multiline";
}

- (id)multilineTaillessBalloonName
{
  if (multilineTaillessBalloonName_once != -1) {
    dispatch_once(&multilineTaillessBalloonName_once, &__block_literal_global_1171);
  }
  uint64_t v2 = (void *)multilineTaillessBalloonName_sBehavior;

  return v2;
}

void __44__CKUIBehavior_multilineTaillessBalloonName__block_invoke()
{
  uint64_t v0 = (void *)multilineTaillessBalloonName_sBehavior;
  multilineTaillessBalloonName_sBehavior = @"bubble-multiline-tailless";
}

- (id)multilineStrokedBalloonName
{
  if (multilineStrokedBalloonName_once != -1) {
    dispatch_once(&multilineStrokedBalloonName_once, &__block_literal_global_1176);
  }
  uint64_t v2 = (void *)multilineStrokedBalloonName_sBehavior;

  return v2;
}

void __43__CKUIBehavior_multilineStrokedBalloonName__block_invoke()
{
  uint64_t v0 = (void *)multilineStrokedBalloonName_sBehavior;
  multilineStrokedBalloonName_sBehavior = @"bubble-stroked-multiline";
}

- (id)multilineStrokedTaillessBalloonName
{
  if (multilineStrokedTaillessBalloonName_once != -1) {
    dispatch_once(&multilineStrokedTaillessBalloonName_once, &__block_literal_global_1181);
  }
  uint64_t v2 = (void *)multilineStrokedTaillessBalloonName_sBehavior;

  return v2;
}

void __51__CKUIBehavior_multilineStrokedTaillessBalloonName__block_invoke()
{
  uint64_t v0 = (void *)multilineStrokedTaillessBalloonName_sBehavior;
  multilineStrokedTaillessBalloonName_sBehavior = @"bubble-stroked-multiline-tailless";
}

- (id)replyBalloonName
{
  if (replyBalloonName_once != -1) {
    dispatch_once(&replyBalloonName_once, &__block_literal_global_1186);
  }
  uint64_t v2 = (void *)replyBalloonName_sBehavior;

  return v2;
}

void __32__CKUIBehavior_replyBalloonName__block_invoke()
{
  uint64_t v0 = (void *)replyBalloonName_sBehavior;
  replyBalloonName_sBehavior = @"bubble-reply";
}

- (id)replySkinnyBalloonName
{
  if (replySkinnyBalloonName_once != -1) {
    dispatch_once(&replySkinnyBalloonName_once, &__block_literal_global_1191);
  }
  uint64_t v2 = (void *)replySkinnyBalloonName_sBehavior;

  return v2;
}

void __38__CKUIBehavior_replySkinnyBalloonName__block_invoke()
{
  uint64_t v0 = (void *)replySkinnyBalloonName_sBehavior;
  replySkinnyBalloonName_sBehavior = @"bubble-reply-min";
}

- (id)replyMultilineBalloonName
{
  if (replyMultilineBalloonName_once != -1) {
    dispatch_once(&replyMultilineBalloonName_once, &__block_literal_global_1196);
  }
  uint64_t v2 = (void *)replyMultilineBalloonName_sBehavior;

  return v2;
}

void __41__CKUIBehavior_replyMultilineBalloonName__block_invoke()
{
  uint64_t v0 = (void *)replyMultilineBalloonName_sBehavior;
  replyMultilineBalloonName_sBehavior = @"bubble-reply-multiline";
}

- (id)replyStrokedBalloonName
{
  if (replyStrokedBalloonName_once != -1) {
    dispatch_once(&replyStrokedBalloonName_once, &__block_literal_global_1201);
  }
  uint64_t v2 = (void *)replyStrokedBalloonName_sBehavior;

  return v2;
}

void __39__CKUIBehavior_replyStrokedBalloonName__block_invoke()
{
  uint64_t v0 = (void *)replyStrokedBalloonName_sBehavior;
  replyStrokedBalloonName_sBehavior = @"bubble-reply-stroked";
}

- (id)replyStrokedSkinnyBalloonName
{
  if (replyStrokedSkinnyBalloonName_once != -1) {
    dispatch_once(&replyStrokedSkinnyBalloonName_once, &__block_literal_global_1206);
  }
  uint64_t v2 = (void *)replyStrokedSkinnyBalloonName_sBehavior;

  return v2;
}

void __45__CKUIBehavior_replyStrokedSkinnyBalloonName__block_invoke()
{
  uint64_t v0 = (void *)replyStrokedSkinnyBalloonName_sBehavior;
  replyStrokedSkinnyBalloonName_sBehavior = @"bubble-reply-stroked-min";
}

- (id)replyStrokedMultilineBalloonName
{
  if (replyStrokedMultilineBalloonName_once != -1) {
    dispatch_once(&replyStrokedMultilineBalloonName_once, &__block_literal_global_1211);
  }
  uint64_t v2 = (void *)replyStrokedMultilineBalloonName_sBehavior;

  return v2;
}

void __48__CKUIBehavior_replyStrokedMultilineBalloonName__block_invoke()
{
  uint64_t v0 = (void *)replyStrokedMultilineBalloonName_sBehavior;
  replyStrokedMultilineBalloonName_sBehavior = @"bubble-reply-stroked-multiline";
}

- (id)replyDeleteBalloonName
{
  if (replyDeleteBalloonName_once != -1) {
    dispatch_once(&replyDeleteBalloonName_once, &__block_literal_global_1216_0);
  }
  uint64_t v2 = (void *)replyDeleteBalloonName_sBehavior;

  return v2;
}

void __38__CKUIBehavior_replyDeleteBalloonName__block_invoke()
{
  uint64_t v0 = (void *)replyDeleteBalloonName_sBehavior;
  replyDeleteBalloonName_sBehavior = @"bubble-reply-delete";
}

- (id)whiteChevronImage
{
  if (whiteChevronImage_once != -1) {
    dispatch_once(&whiteChevronImage_once, &__block_literal_global_1221);
  }
  uint64_t v2 = (void *)whiteChevronImage_sBehavior;

  return v2;
}

void __33__CKUIBehavior_whiteChevronImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v0 = CKChevronImageWithColor(v2);
  double v1 = (void *)whiteChevronImage_sBehavior;
  whiteChevronImage_sBehavior = v0;
}

- (id)systemGrayChevronImage
{
  if (systemGrayChevronImage_once != -1) {
    dispatch_once(&systemGrayChevronImage_once, &__block_literal_global_1223);
  }
  id v2 = (void *)systemGrayChevronImage_sBehavior;

  return v2;
}

void __38__CKUIBehavior_systemGrayChevronImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F428B8] systemGrayColor];
  uint64_t v0 = CKChevronImageWithColor(v2);
  double v1 = (void *)systemGrayChevronImage_sBehavior;
  systemGrayChevronImage_sBehavior = v0;
}

- (id)multiwayGrayChevronImage
{
  if (multiwayGrayChevronImage_once != -1) {
    dispatch_once(&multiwayGrayChevronImage_once, &__block_literal_global_1225);
  }
  id v2 = (void *)multiwayGrayChevronImage_sBehavior;

  return v2;
}

void __40__CKUIBehavior_multiwayGrayChevronImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F428B8] colorWithRed:0.819607843 green:0.819607843 blue:0.835294118 alpha:1.0];
  uint64_t v0 = CKChevronImageWithColor(v2);
  double v1 = (void *)multiwayGrayChevronImage_sBehavior;
  multiwayGrayChevronImage_sBehavior = v0;
}

- (id)chevronImageForColorType:(char)a3
{
  switch(a3)
  {
    case -1:
      double v5 = [(CKUIBehavior *)self gray_chevronImage];
      goto LABEL_22;
    case 0:
      double v5 = [(CKUIBehavior *)self green_chevronImage];
      goto LABEL_22;
    case 1:
      double v5 = [(CKUIBehavior *)self blue_chevronImage];
      goto LABEL_22;
    case 2:
      double v5 = [(CKUIBehavior *)self siri_chevronImage];
      goto LABEL_22;
    case 3:
      double v5 = [(CKUIBehavior *)self red_chevronImage];
      goto LABEL_22;
    case 4:
      double v5 = [(CKUIBehavior *)self white_chevronImage];
      goto LABEL_22;
    case 5:
      double v5 = [(CKUIBehavior *)self black_chevronImage];
      goto LABEL_22;
    case 6:
      double v5 = [(CKUIBehavior *)self business_chevronImage];
      goto LABEL_22;
    case 7:
      double v5 = [(CKUIBehavior *)self multiway_chevronImage];
      goto LABEL_22;
    case 8:
      double v5 = [(CKUIBehavior *)self background_chevronImage];
      goto LABEL_22;
    case 9:
      double v5 = [(CKUIBehavior *)self reply_gray_chevronImage];
      goto LABEL_22;
    case 10:
      double v5 = [(CKUIBehavior *)self reply_blue_chevronImage];
      goto LABEL_22;
    case 11:
      double v5 = [(CKUIBehavior *)self reply_green_chevronImage];
      goto LABEL_22;
    case 12:
      double v5 = [(CKUIBehavior *)self stewie_chevronImage];
      goto LABEL_22;
    case 13:
      double v5 = [(CKUIBehavior *)self message_editing_black_chevronImage];
      goto LABEL_22;
    case 14:
      double v5 = [(CKUIBehavior *)self opaque_orb_gray_chevronImage];
      goto LABEL_22;
    case 15:
      double v5 = [(CKUIBehavior *)self pending_blue_chevronImage];
LABEL_22:
      break;
    default:
      double v5 = 0;
      break;
  }
  return v5;
}

- (id)gray_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__CKUIBehavior_gray_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (gray_chevronImage_once != -1) {
    dispatch_once(&gray_chevronImage_once, block);
  }
  return (id)gray_chevronImage_sBehavior;
}

void __33__CKUIBehavior_gray_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)gray_chevronImage_sBehavior;
  gray_chevronImage_sBehavior = v1;
}

- (id)opaque_orb_gray_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __44__CKUIBehavior_opaque_orb_gray_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (opaque_orb_gray_chevronImage_once != -1) {
    dispatch_once(&opaque_orb_gray_chevronImage_once, block);
  }
  return (id)opaque_orb_gray_chevronImage_sBehavior;
}

void __44__CKUIBehavior_opaque_orb_gray_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)opaque_orb_gray_chevronImage_sBehavior;
  opaque_orb_gray_chevronImage_sBehavior = v1;
}

- (id)green_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __34__CKUIBehavior_green_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (green_chevronImage_once != -1) {
    dispatch_once(&green_chevronImage_once, block);
  }
  return (id)green_chevronImage_sBehavior;
}

void __34__CKUIBehavior_green_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) whiteChevronImage];
  id v2 = (void *)green_chevronImage_sBehavior;
  green_chevronImage_sBehavior = v1;
}

- (id)blue_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__CKUIBehavior_blue_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (blue_chevronImage_once != -1) {
    dispatch_once(&blue_chevronImage_once, block);
  }
  return (id)blue_chevronImage_sBehavior;
}

void __33__CKUIBehavior_blue_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) whiteChevronImage];
  id v2 = (void *)blue_chevronImage_sBehavior;
  blue_chevronImage_sBehavior = v1;
}

- (id)siri_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__CKUIBehavior_siri_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (siri_chevronImage_once != -1) {
    dispatch_once(&siri_chevronImage_once, block);
  }
  return (id)siri_chevronImage_sBehavior;
}

void __33__CKUIBehavior_siri_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) whiteChevronImage];
  id v2 = (void *)siri_chevronImage_sBehavior;
  siri_chevronImage_sBehavior = v1;
}

- (id)red_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __32__CKUIBehavior_red_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (red_chevronImage_once != -1) {
    dispatch_once(&red_chevronImage_once, block);
  }
  return (id)red_chevronImage_sBehavior;
}

void __32__CKUIBehavior_red_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) whiteChevronImage];
  id v2 = (void *)red_chevronImage_sBehavior;
  red_chevronImage_sBehavior = v1;
}

- (id)white_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __34__CKUIBehavior_white_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (white_chevronImage_once != -1) {
    dispatch_once(&white_chevronImage_once, block);
  }
  return (id)white_chevronImage_sBehavior;
}

void __34__CKUIBehavior_white_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) whiteChevronImage];
  id v2 = (void *)white_chevronImage_sBehavior;
  white_chevronImage_sBehavior = v1;
}

- (id)black_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __34__CKUIBehavior_black_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (black_chevronImage_once != -1) {
    dispatch_once(&black_chevronImage_once, block);
  }
  return (id)black_chevronImage_sBehavior;
}

void __34__CKUIBehavior_black_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) whiteChevronImage];
  id v2 = (void *)black_chevronImage_sBehavior;
  black_chevronImage_sBehavior = v1;
}

- (id)business_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__CKUIBehavior_business_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (business_chevronImage_once != -1) {
    dispatch_once(&business_chevronImage_once, block);
  }
  return (id)business_chevronImage_sBehavior;
}

void __37__CKUIBehavior_business_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)business_chevronImage_sBehavior;
  business_chevronImage_sBehavior = v1;
}

- (id)multiway_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__CKUIBehavior_multiway_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (multiway_chevronImage_once != -1) {
    dispatch_once(&multiway_chevronImage_once, block);
  }
  return (id)multiway_chevronImage_sBehavior;
}

void __37__CKUIBehavior_multiway_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) multiwayGrayChevronImage];
  id v2 = (void *)multiway_chevronImage_sBehavior;
  multiway_chevronImage_sBehavior = v1;
}

- (id)background_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_background_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (background_chevronImage_once != -1) {
    dispatch_once(&background_chevronImage_once, block);
  }
  return (id)background_chevronImage_sBehavior;
}

void __39__CKUIBehavior_background_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) whiteChevronImage];
  id v2 = (void *)background_chevronImage_sBehavior;
  background_chevronImage_sBehavior = v1;
}

- (id)message_editing_black_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __50__CKUIBehavior_message_editing_black_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (message_editing_black_chevronImage_once != -1) {
    dispatch_once(&message_editing_black_chevronImage_once, block);
  }
  return (id)message_editing_black_chevronImage_sBehavior;
}

void __50__CKUIBehavior_message_editing_black_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)message_editing_black_chevronImage_sBehavior;
  message_editing_black_chevronImage_sBehavior = v1;
}

- (id)reply_gray_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_reply_gray_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (reply_gray_chevronImage_once != -1) {
    dispatch_once(&reply_gray_chevronImage_once, block);
  }
  return (id)reply_gray_chevronImage_sBehavior;
}

void __39__CKUIBehavior_reply_gray_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)reply_gray_chevronImage_sBehavior;
  reply_gray_chevronImage_sBehavior = v1;
}

- (id)reply_blue_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_reply_blue_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (reply_blue_chevronImage_once != -1) {
    dispatch_once(&reply_blue_chevronImage_once, block);
  }
  return (id)reply_blue_chevronImage_sBehavior;
}

void __39__CKUIBehavior_reply_blue_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)reply_blue_chevronImage_sBehavior;
  reply_blue_chevronImage_sBehavior = v1;
}

- (id)reply_green_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __40__CKUIBehavior_reply_green_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (reply_green_chevronImage_once != -1) {
    dispatch_once(&reply_green_chevronImage_once, block);
  }
  return (id)reply_green_chevronImage_sBehavior;
}

void __40__CKUIBehavior_reply_green_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)reply_green_chevronImage_sBehavior;
  reply_green_chevronImage_sBehavior = v1;
}

- (id)stewie_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __35__CKUIBehavior_stewie_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (stewie_chevronImage_once != -1) {
    dispatch_once(&stewie_chevronImage_once, block);
  }
  return (id)stewie_chevronImage_sBehavior;
}

void __35__CKUIBehavior_stewie_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)stewie_chevronImage_sBehavior;
  stewie_chevronImage_sBehavior = v1;
}

- (id)pending_blue_chevronImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__CKUIBehavior_pending_blue_chevronImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (pending_blue_chevronImage_once != -1) {
    dispatch_once(&pending_blue_chevronImage_once, block);
  }
  return (id)pending_blue_chevronImage_sBehavior;
}

void __41__CKUIBehavior_pending_blue_chevronImage__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) systemGrayChevronImage];
  id v2 = (void *)pending_blue_chevronImage_sBehavior;
  pending_blue_chevronImage_sBehavior = v1;
}

- (id)siriLogoImage
{
  if ([MEMORY[0x1E4F4E638] isSAEEnabled])
  {
    id v2 = (void *)[objc_alloc(MEMORY[0x1E4F6F248]) initWithBundleIdentifier:@"com.apple.siri"];
    uint64_t v3 = objc_opt_new();
    [v3 setShape:0];
    uint64_t v4 = [v2 imageForDescriptor:v3];
    if ([v4 placeholder])
    {
      uint64_t v5 = [v2 prepareImageForDescriptor:v3];

      uint64_t v4 = (void *)v5;
    }
    uint64_t v6 = [v4 CGImage];
    double v7 = [MEMORY[0x1E4F42A80] imageWithCGImage:v6];
  }
  else
  {
    double v7 = [MEMORY[0x1E4F42A80] ckImageNamed:@"SentWithSiri_SiriLogo"];
  }

  return v7;
}

- (id)imageNameForBalloonDescriptorWithFilledStyle:(CKBalloonDescriptor_t *)a3
{
  int var10 = a3->var10;
  if (a3->var10) {
    int var10 = a3->var1;
  }
  switch(a3->var0)
  {
    case 0:
      if (var10 != 1)
      {
        if (var10) {
          goto LABEL_22;
        }
        if (a3->var12) {
          [(CKUIBehavior *)self multilineTaillessBalloonName];
        }
        else {
          [(CKUIBehavior *)self taillessBallonName];
        }
        goto LABEL_34;
      }
      if (!a3->var11)
      {
        if (a3->var12) {
          [(CKUIBehavior *)self multilineBalloonName];
        }
        else {
          [(CKUIBehavior *)self balloonName];
        }
        goto LABEL_34;
      }
      uint64_t v4 = [(CKUIBehavior *)self impactBalloonName];
      break;
    case 1:
      if (var10 != 1) {
        goto LABEL_13;
      }
      if (!a3->var11) {
        goto LABEL_26;
      }
      uint64_t v4 = [(CKUIBehavior *)self impactSkinnyBalloonName];
      break;
    case 2:
      if (var10 == 2)
      {
        uint64_t v4 = [(CKUIBehavior *)self roundBalloonName];
      }
      else if (var10 == 1)
      {
LABEL_26:
        uint64_t v4 = [(CKUIBehavior *)self skinnyBalloonName];
      }
      else
      {
LABEL_13:
        if (var10) {
          goto LABEL_22;
        }
        uint64_t v4 = [(CKUIBehavior *)self skinnyTaillessBalloonName];
      }
      break;
    case 3:
      if (var10 != 1) {
        goto LABEL_22;
      }
      if (a3->var12) {
        [(CKUIBehavior *)self replyMultilineBalloonName];
      }
      else {
        [(CKUIBehavior *)self replyBalloonName];
      }
      uint64_t v4 = LABEL_34:;
      break;
    case 4:
      if (var10 != 1) {
        goto LABEL_22;
      }
      uint64_t v4 = [(CKUIBehavior *)self replySkinnyBalloonName];
      break;
    case 5:
      if (var10 != 1) {
        goto LABEL_22;
      }
      uint64_t v4 = [(CKUIBehavior *)self replyDeleteBalloonName];
      break;
    default:
LABEL_22:
      uint64_t v4 = 0;
      break;
  }

  return v4;
}

- (id)imageNameForBalloonDescriptorWithStrokedStyle:(CKBalloonDescriptor_t *)a3
{
  int var0 = a3->var0;
  if (var0 == 4)
  {
    uint64_t v6 = [(CKUIBehavior *)self replyStrokedSkinnyBalloonName];
    goto LABEL_20;
  }
  if (var0 == 3)
  {
    if (a3->var12) {
      [(CKUIBehavior *)self replyStrokedMultilineBalloonName];
    }
    else {
    uint64_t v6 = [(CKUIBehavior *)self replyStrokedBalloonName];
    }
    goto LABEL_20;
  }
  if (a3->var0) {
    goto LABEL_19;
  }
  if (!a3->var10) {
    goto LABEL_7;
  }
  if (a3->var1 != 1)
  {
    if (!a3->var1)
    {
LABEL_7:
      if (a3->var12)
      {
        uint64_t v6 = [(CKUIBehavior *)self multilineStrokedTaillessBalloonName];
        if (v6) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v6 = [(CKUIBehavior *)self strokedTaillessBalloonName];
        if (v6) {
          goto LABEL_20;
        }
      }
    }
LABEL_19:
    long long v7 = *(_OWORD *)&a3->var6.alpha;
    v10[2] = *(_OWORD *)&a3->var6.green;
    void v10[3] = v7;
    void v10[4] = *(_OWORD *)&a3->var8;
    long long v8 = *(_OWORD *)&a3->var5;
    v10[0] = *(_OWORD *)&a3->var0;
    v10[1] = v8;
    uint64_t v6 = [(CKUIBehavior *)self imageNameForBalloonDescriptorWithFilledStyle:v10];
    goto LABEL_20;
  }
  if (a3->var12)
  {
    uint64_t v6 = [(CKUIBehavior *)self multilineStrokedBalloonName];
    if (v6) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v6 = [(CKUIBehavior *)self strokedBalloonName];
  if (!v6) {
    goto LABEL_19;
  }
LABEL_20:

  return v6;
}

- (id)imageNameForBalloonDescriptor:(CKBalloonDescriptor_t *)a3
{
  uint64_t v3 = 0;
  int var2 = a3->var2;
  if ((var2 - 2) < 3) {
    goto LABEL_9;
  }
  if (var2 == 1)
  {
    long long v9 = *(_OWORD *)&a3->var6.alpha;
    long long v15 = *(_OWORD *)&a3->var6.green;
    long long v16 = v9;
    long long v17 = *(_OWORD *)&a3->var8;
    long long v10 = *(_OWORD *)&a3->var5;
    long long v13 = *(_OWORD *)&a3->var0;
    long long v14 = v10;
    uint64_t v8 = [(CKUIBehavior *)self imageNameForBalloonDescriptorWithStrokedStyle:&v13];
  }
  else
  {
    if (a3->var2) {
      goto LABEL_7;
    }
    long long v6 = *(_OWORD *)&a3->var6.alpha;
    long long v15 = *(_OWORD *)&a3->var6.green;
    long long v16 = v6;
    long long v17 = *(_OWORD *)&a3->var8;
    long long v7 = *(_OWORD *)&a3->var5;
    long long v13 = *(_OWORD *)&a3->var0;
    long long v14 = v7;
    uint64_t v8 = [(CKUIBehavior *)self imageNameForBalloonDescriptorWithFilledStyle:&v13];
  }
  uint64_t v3 = (void *)v8;
LABEL_7:
  if ([(CKUIBehavior *)self isAccessibilityPreferredContentSizeCategory])
  {
    uint64_t v11 = [v3 stringByAppendingString:@"-ax"];

    uint64_t v3 = (void *)v11;
  }
LABEL_9:

  return v3;
}

- (CGSize)thumbnailSizeForAppIconInCollaborationLinks
{
  if (thumbnailSizeForAppIconInCollaborationLinks_once != -1) {
    dispatch_once(&thumbnailSizeForAppIconInCollaborationLinks_once, &__block_literal_global_1239);
  }
  double v2 = *(double *)&thumbnailSizeForAppIconInCollaborationLinks_sBehavior_0;
  double v3 = *(double *)&thumbnailSizeForAppIconInCollaborationLinks_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __59__CKUIBehavior_thumbnailSizeForAppIconInCollaborationLinks__block_invoke()
{
  thumbnailSizeForAppIconInCollaborationLinks_sBehavior_0 = 0x4072C00000000000;
  thumbnailSizeForAppIconInCollaborationLinks_sBehavior_1 = 0x4072C00000000000;
}

- (CGSize)locationOfferMapThumbnailFillSizeForWidth:(double)a3
{
  [(CKUIBehavior *)self mapThumbnailFillSizeForWidth:a3];
  double v5 = v4;
  double v7 = v6;
  [(CKUIBehavior *)self locationShareBalloonAdditionalVertPadding];
  double v9 = (double)(int)(v7 + v8);
  double v10 = v5;
  result.double height = v9;
  result.double width = v10;
  return result;
}

- (double)locationShareBalloonButtonHeight
{
  if (locationShareBalloonButtonHeight_once != -1) {
    dispatch_once(&locationShareBalloonButtonHeight_once, &__block_literal_global_1241);
  }
  return *(double *)&locationShareBalloonButtonHeight_sBehavior;
}

void __48__CKUIBehavior_locationShareBalloonButtonHeight__block_invoke()
{
  locationShareBalloonButtonHeight_sBehavior = 0x4046000000000000;
}

- (double)locationShareBalloonMaxVisibleMapHeight
{
  if (locationShareBalloonMaxVisibleMapHeight_once != -1) {
    dispatch_once(&locationShareBalloonMaxVisibleMapHeight_once, &__block_literal_global_1243);
  }
  return *(double *)&locationShareBalloonMaxVisibleMapHeight_sBehavior;
}

void __55__CKUIBehavior_locationShareBalloonMaxVisibleMapHeight__block_invoke()
{
  locationShareBalloonMaxVisibleMapHeight_sBehavior = 0x4069000000000000;
}

- (double)locationShareBalloonLabelPadding
{
  if (locationShareBalloonLabelPadding_once != -1) {
    dispatch_once(&locationShareBalloonLabelPadding_once, &__block_literal_global_1245);
  }
  return *(double *)&locationShareBalloonLabelPadding_sBehavior;
}

void __48__CKUIBehavior_locationShareBalloonLabelPadding__block_invoke()
{
  locationShareBalloonLabelPadding_sBehavior = 0x4024000000000000;
}

- (double)locationShareBalloonAdditionalVertPadding
{
  if (locationShareBalloonAdditionalVertPadding_once != -1) {
    dispatch_once(&locationShareBalloonAdditionalVertPadding_once, &__block_literal_global_1247);
  }
  return *(double *)&locationShareBalloonAdditionalVertPadding_sBehavior;
}

void __57__CKUIBehavior_locationShareBalloonAdditionalVertPadding__block_invoke()
{
  locationShareBalloonAdditionalVertPadding_sBehavior = 0x4024000000000000;
}

- (double)locationShareBalloonContactImageDiameter
{
  if (locationShareBalloonContactImageDiameter_once != -1) {
    dispatch_once(&locationShareBalloonContactImageDiameter_once, &__block_literal_global_1249);
  }
  return *(double *)&locationShareBalloonContactImageDiameter_sBehavior;
}

void __56__CKUIBehavior_locationShareBalloonContactImageDiameter__block_invoke()
{
  locationShareBalloonContactImageDiameter_sBehavior = 0x4036000000000000;
}

- (double)locationShareBalloonLabelMaxHeightForOfferState:(int64_t)a3
{
  double result = 22.0;
  if ((unint64_t)(a3 - 1) >= 2)
  {
    if (a3)
    {
      return 0.0;
    }
    else
    {
      [(CKUIBehavior *)self locationShareBalloonAdditionalVertPadding];
      return v6 + 44.0;
    }
  }
  return result;
}

- (CGSize)locationShareBalloonSizeForWidth:(double)a3 offerState:(int64_t)a4
{
  [(CKUIBehavior *)self locationOfferMapThumbnailFillSizeForWidth:a3];
  double v7 = v6;
  double v9 = v8;
  if (a4 == 1)
  {
    *(double *)&uint64_t v10 = 44.0;
    goto LABEL_5;
  }
  if (a4 == 2)
  {
    *(double *)&uint64_t v10 = 58.0;
LABEL_5:
    double v11 = *(double *)&v10;
    [(CKUIBehavior *)self locationShareBalloonAdditionalVertPadding];
    double v9 = v9 - (v12 + v11);
  }
  double v13 = v7;
  double v14 = v9;
  result.double height = v14;
  result.double width = v13;
  return result;
}

- (BOOL)enableBalloonTextSelection
{
  if (enableBalloonTextSelection_once != -1) {
    dispatch_once(&enableBalloonTextSelection_once, &__block_literal_global_1251);
  }
  return 0;
}

- (Class)audioBalloonViewClass
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__CKUIBehavior_audioBalloonViewClass__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (audioBalloonViewClass_once != -1) {
    dispatch_once(&audioBalloonViewClass_once, block);
  }
  return (Class)(id)audioBalloonViewClass_sBehavior;
}

uint64_t __37__CKUIBehavior_audioBalloonViewClass__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) audioBalloonClass];
  audioBalloonViewClass_sBehavior = result;
  return result;
}

- (Class)audioBalloonClass
{
  return (Class)objc_opt_class();
}

- (Class)audioBalloonCellClass
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__CKUIBehavior_audioBalloonCellClass__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (audioBalloonCellClass_once != -1) {
    dispatch_once(&audioBalloonCellClass_once, block);
  }
  return (Class)(id)audioBalloonCellClass_sBehavior;
}

uint64_t __37__CKUIBehavior_audioBalloonCellClass__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) isProximityMonitoringSupported];
  uint64_t result = objc_opt_class();
  audioBalloonCellClass_sBehavior = result;
  return result;
}

- (Class)contactBalloonViewClass
{
  if (contactBalloonViewClass_once != -1) {
    dispatch_once(&contactBalloonViewClass_once, &__block_literal_global_1256);
  }
  double v2 = (void *)contactBalloonViewClass_sBehavior;

  return (Class)v2;
}

uint64_t __39__CKUIBehavior_contactBalloonViewClass__block_invoke()
{
  uint64_t result = objc_opt_class();
  contactBalloonViewClass_sBehavior = result;
  return result;
}

- (BOOL)shouldFillAndStrokeAttachmentBalloon
{
  if (shouldFillAndStrokeAttachmentBalloon_once != -1) {
    dispatch_once(&shouldFillAndStrokeAttachmentBalloon_once, &__block_literal_global_1259);
  }
  return 0;
}

- (char)attachmentBalloonFillColor
{
  if (attachmentBalloonFillColor_once != -1) {
    dispatch_once(&attachmentBalloonFillColor_once, &__block_literal_global_1261);
  }
  if (attachmentBalloonFillColor_sBehavior) {
    return 8;
  }
  else {
    return 0;
  }
}

void __42__CKUIBehavior_attachmentBalloonFillColor__block_invoke()
{
  attachmentBalloonFillColor_sBehavior = 1;
}

- (char)attachmentBalloonStrokeColor
{
  if (attachmentBalloonStrokeColor_once != -1) {
    dispatch_once(&attachmentBalloonStrokeColor_once, &__block_literal_global_1263);
  }
  return attachmentBalloonStrokeColor_sBehavior << 31 >> 31;
}

void __44__CKUIBehavior_attachmentBalloonStrokeColor__block_invoke()
{
  attachmentBalloonStrokeColor_sBehavior = 1;
}

- (BOOL)calculatesWidthForAttachmentBalloons
{
  if (calculatesWidthForAttachmentBalloons_once != -1) {
    dispatch_once(&calculatesWidthForAttachmentBalloons_once, &__block_literal_global_1265);
  }
  return 0;
}

- (BOOL)showsFileSizeInSubtitle
{
  if (showsFileSizeInSubtitle_once != -1) {
    dispatch_once(&showsFileSizeInSubtitle_once, &__block_literal_global_1267);
  }
  return 0;
}

- (BOOL)showsVCalViewer
{
  if (showsVCalViewer_once != -1) {
    dispatch_once(&showsVCalViewer_once, &__block_literal_global_1269);
  }
  return showsVCalViewer_sBehavior;
}

void __31__CKUIBehavior_showsVCalViewer__block_invoke()
{
  showsVCalViewer_sBehavior = 1;
}

- (BOOL)useSingleLineForContactVCardNames
{
  if (useSingleLineForContactVCardNames_once != -1) {
    dispatch_once(&useSingleLineForContactVCardNames_once, &__block_literal_global_1271);
  }
  return useSingleLineForContactVCardNames_sBehavior;
}

void __49__CKUIBehavior_useSingleLineForContactVCardNames__block_invoke()
{
  useSingleLineForContactVCardNames_sBehavior = 1;
}

- (BOOL)playButtonPunchesOutArrow
{
  if (playButtonPunchesOutArrow_once != -1) {
    dispatch_once(&playButtonPunchesOutArrow_once, &__block_literal_global_1273);
  }
  return playButtonPunchesOutArrow_sBehavior;
}

void __41__CKUIBehavior_playButtonPunchesOutArrow__block_invoke()
{
  playButtonPunchesOutArrow_sBehavior = 1;
}

- (BOOL)supportsPassbookAttachments
{
  if (supportsPassbookAttachments_once != -1) {
    dispatch_once(&supportsPassbookAttachments_once, &__block_literal_global_1275);
  }
  return supportsPassbookAttachments_sBehavior;
}

uint64_t __43__CKUIBehavior_supportsPassbookAttachments__block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  supportsPassbookAttachments_sBehavior = result;
  return result;
}

- (double)waveformMaxWidthDuration
{
  if (waveformMaxWidthDuration_once != -1) {
    dispatch_once(&waveformMaxWidthDuration_once, &__block_literal_global_1280);
  }
  return *(double *)&waveformMaxWidthDuration_sBehavior;
}

void __40__CKUIBehavior_waveformMaxWidthDuration__block_invoke()
{
  waveformMaxWidthDuration_sBehavior = 0x4034000000000000;
}

- (unint64_t)waveformMaxPowerLevelsCount
{
  if (waveformMaxPowerLevelsCount_once != -1) {
    dispatch_once(&waveformMaxPowerLevelsCount_once, &__block_literal_global_1282);
  }
  if (waveformMaxPowerLevelsCount_sBehavior) {
    return 50;
  }
  else {
    return 0;
  }
}

void __43__CKUIBehavior_waveformMaxPowerLevelsCount__block_invoke()
{
  waveformMaxPowerLevelsCount_sBehavior = 1;
}

- (unint64_t)waveformMinPowerLevelsCount
{
  if (waveformMinPowerLevelsCount_once != -1) {
    dispatch_once(&waveformMinPowerLevelsCount_once, &__block_literal_global_1284_0);
  }
  if (waveformMinPowerLevelsCount_sBehavior) {
    return 25;
  }
  else {
    return 0;
  }
}

void __43__CKUIBehavior_waveformMinPowerLevelsCount__block_invoke()
{
  waveformMinPowerLevelsCount_sBehavior = 1;
}

- (double)waveformMinDbPowerLevel
{
  if (waveformMinDbPowerLevel_once != -1) {
    dispatch_once(&waveformMinDbPowerLevel_once, &__block_literal_global_1286);
  }
  return *(double *)&waveformMinDbPowerLevel_sBehavior;
}

void __39__CKUIBehavior_waveformMinDbPowerLevel__block_invoke()
{
  waveformMinDbPowerLevel_sBehavior = 0xC049000000000000;
}

- (double)waveformMinLinearPowerLevel
{
  if (waveformMinLinearPowerLevel_once != -1) {
    dispatch_once(&waveformMinLinearPowerLevel_once, &__block_literal_global_1288);
  }
  return *(double *)&waveformMinLinearPowerLevel_sBehavior;
}

void __43__CKUIBehavior_waveformMinLinearPowerLevel__block_invoke()
{
  waveformMinLinearPowerLevel_sBehavior = 0x403E000000000000;
}

- (int64_t)playButtonBackdropStyle
{
  if (playButtonBackdropStyle_once != -1) {
    dispatch_once(&playButtonBackdropStyle_once, &__block_literal_global_1290);
  }
  if (playButtonBackdropStyle_sBehavior) {
    return 2020;
  }
  else {
    return 0;
  }
}

void __39__CKUIBehavior_playButtonBackdropStyle__block_invoke()
{
  playButtonBackdropStyle_sBehavior = 1;
}

- (UIEdgeInsets)quickActionPinButtonImageInsets
{
  if (quickActionPinButtonImageInsets_once != -1) {
    dispatch_once(&quickActionPinButtonImageInsets_once, &__block_literal_global_1292);
  }
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

- (UIEdgeInsets)quickActionSaveButtonImageInsets
{
  if (quickActionSaveButtonImageInsets_once != -1) {
    dispatch_once(&quickActionSaveButtonImageInsets_once, &__block_literal_global_1294_0);
  }
  double v2 = *(double *)&quickActionSaveButtonImageInsets_sBehavior_2;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v2;
  result.double left = v4;
  result.double top = v3;
  return result;
}

void __48__CKUIBehavior_quickActionSaveButtonImageInsets__block_invoke()
{
  quickActionSaveButtonImageInsets_sBehavior_2 = 0x4008000000000000;
}

- (CGSize)documentIconSize
{
  if (documentIconSize_once != -1) {
    dispatch_once(&documentIconSize_once, &__block_literal_global_1296);
  }
  double v2 = *(double *)&documentIconSize_sBehavior_0;
  double v3 = *(double *)&documentIconSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __32__CKUIBehavior_documentIconSize__block_invoke()
{
  documentIconSize_sBehavior_0 = 0x403F000000000000;
  documentIconSize_sBehavior_1 = 0x4042800000000000;
}

- (CGSize)attachmentBalloonSize
{
  if (attachmentBalloonSize_once != -1) {
    dispatch_once(&attachmentBalloonSize_once, &__block_literal_global_1298);
  }
  double v2 = *(double *)&attachmentBalloonSize_sBehavior_0;
  double v3 = *(double *)&attachmentBalloonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

double __37__CKUIBehavior_attachmentBalloonSize__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double v1 = ceil(v0 * 187.0) / v0;
  double result = ceil(v0 * 124.5) / v0;
  attachmentBalloonSize_sBehavior_0 = *(void *)&v1;
  attachmentBalloonSize_sBehavior_1 = *(void *)&result;
  return result;
}

- (BOOL)ckShouldUpdateattachmentBalloonRichIconInsets
{
  return 0;
}

- (UIEdgeInsets)attachmentBalloonRichIconInsets
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)attachmentBalloonRichIconInsets_sContentSizeCategory_attachmentBalloonRichIconInsets, v3);
  if (-[CKUIBehavior ckShouldUpdateattachmentBalloonRichIconInsets](self, "ckShouldUpdateattachmentBalloonRichIconInsets")|| v10|| attachmentBalloonRichIconInsets_sIsBoldTextEnabled_attachmentBalloonRichIconInsets != IsBoldTextEnabled|| (uint64_t v11 = attachmentBalloonRichIconInsets_sTextFontSize_attachmentBalloonRichIconInsets, *(double *)&attachmentBalloonRichIconInsets_sTextFontSize_attachmentBalloonRichIconInsets != v5)|| (uint64_t v11 = attachmentBalloonRichIconInsets_sCustomTextFontSize_attachmentBalloonRichIconInsets, *(double *)&attachmentBalloonRichIconInsets_sCustomTextFontSize_attachmentBalloonRichIconInsets != v6)|| (objc_msgSend((id)attachmentBalloonRichIconInsets_sCustomTextFontName_attachmentBalloonRichIconInsets, "isEqualToString:", v9, *(double *)&attachmentBalloonRichIconInsets_sCustomTextFontSize_attachmentBalloonRichIconInsets) & 1) == 0)
  {
    double v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v11);
    [v12 lineHeight];
    *(double *)&attachmentBalloonRichIconInsets_sBehavior_0 = v13 + 16.0;
    attachmentBalloonRichIconInsets_sBehavior_1 = 0x4030000000000000;
    *(double *)&attachmentBalloonRichIconInsets_sBehavior_2 = v13 + 16.0;
    attachmentBalloonRichIconInsets_sBehavior_3 = 0x4030000000000000;

    objc_storeStrong((id *)&attachmentBalloonRichIconInsets_sContentSizeCategory_attachmentBalloonRichIconInsets, v3);
    attachmentBalloonRichIconInsets_sIsBoldTextEnabled_attachmentBalloonRichIconInsets = IsBoldTextEnabled;
    attachmentBalloonRichIconInsets_sTextFontSize_attachmentBalloonRichIconInsets = *(void *)&v5;
    attachmentBalloonRichIconInsets_sCustomTextFontSize_attachmentBalloonRichIconInsets = *(void *)&v6;
    objc_storeStrong((id *)&attachmentBalloonRichIconInsets_sCustomTextFontName_attachmentBalloonRichIconInsets, v8);
  }
  uint64_t v14 = attachmentBalloonRichIconInsets_sBehavior_0;
  uint64_t v15 = attachmentBalloonRichIconInsets_sBehavior_1;
  uint64_t v16 = attachmentBalloonRichIconInsets_sBehavior_2;
  uint64_t v17 = attachmentBalloonRichIconInsets_sBehavior_3;

  double v18 = *(double *)&v14;
  double v19 = *(double *)&v15;
  double v20 = *(double *)&v16;
  double v21 = *(double *)&v17;
  result.double right = v21;
  result.double bottom = v20;
  result.double left = v19;
  result.double top = v18;
  return result;
}

- (CGSize)contactImageSize
{
  if (contactImageSize_once != -1) {
    dispatch_once(&contactImageSize_once, &__block_literal_global_1300);
  }
  double v2 = *(double *)&contactImageSize_sBehavior_0;
  double v3 = *(double *)&contactImageSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __32__CKUIBehavior_contactImageSize__block_invoke()
{
  contactImageSize_sBehavior_0 = 0x4040000000000000;
  contactImageSize_sBehavior_1 = 0x4040000000000000;
}

- (double)contactBalloonInnerItemSpacing
{
  if (contactBalloonInnerItemSpacing_once != -1) {
    dispatch_once(&contactBalloonInnerItemSpacing_once, &__block_literal_global_1302);
  }
  return *(double *)&contactBalloonInnerItemSpacing_sBehavior;
}

void __46__CKUIBehavior_contactBalloonInnerItemSpacing__block_invoke()
{
  contactBalloonInnerItemSpacing_sBehavior = 0x4024000000000000;
}

- (double)contactBalloonMinWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __38__CKUIBehavior_contactBalloonMinWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (contactBalloonMinWidth_once != -1) {
    dispatch_once(&contactBalloonMinWidth_once, block);
  }
  return *(double *)&contactBalloonMinWidth_sBehavior;
}

uint64_t __38__CKUIBehavior_contactBalloonMinWidth__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) attachmentBalloonSize];
  contactBalloonMinWidth_sBehavior = v2;
  return result;
}

- (double)contactBalloonHeight
{
  if (contactBalloonHeight_once != -1) {
    dispatch_once(&contactBalloonHeight_once, &__block_literal_global_1304_0);
  }
  return *(double *)&contactBalloonHeight_sBehavior;
}

double __36__CKUIBehavior_contactBalloonHeight__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = ceil(v0 * 58.5) / v0;
  contactBalloonHeight_sBehavior = *(void *)&result;
  return result;
}

- (double)contactBalloonTopNameSpacing
{
  if (contactBalloonTopNameSpacing_once != -1) {
    dispatch_once(&contactBalloonTopNameSpacing_once, &__block_literal_global_1306);
  }
  return 0.0;
}

- (double)contactBalloonNameOrgSpacing
{
  if (contactBalloonNameOrgSpacing_once != -1) {
    dispatch_once(&contactBalloonNameOrgSpacing_once, &__block_literal_global_1308);
  }
  return 0.0;
}

- (double)contactBalloonOrgBottomSpacing
{
  if (contactBalloonOrgBottomSpacing_once != -1) {
    dispatch_once(&contactBalloonOrgBottomSpacing_once, &__block_literal_global_1310);
  }
  return 0.0;
}

- (UIEdgeInsets)linkPreviewSendLaterInsets
{
  if (linkPreviewSendLaterInsets_once != -1) {
    dispatch_once(&linkPreviewSendLaterInsets_once, &__block_literal_global_1312);
  }
  double v2 = *(double *)&linkPreviewSendLaterInsets_sBehavior_0;
  double v3 = *(double *)&linkPreviewSendLaterInsets_sBehavior_1;
  double v4 = *(double *)&linkPreviewSendLaterInsets_sBehavior_2;
  double v5 = *(double *)&linkPreviewSendLaterInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __42__CKUIBehavior_linkPreviewSendLaterInsets__block_invoke()
{
  linkPreviewSendLaterInsets_sBehavior_0 = 0x4014000000000000;
  linkPreviewSendLaterInsets_sBehavior_1 = 0x4014000000000000;
  linkPreviewSendLaterInsets_sBehavior_2 = 0x4014000000000000;
  linkPreviewSendLaterInsets_sBehavior_3 = 0x4014000000000000;
}

- (UIEdgeInsets)imageSendLaterInsets
{
  if (imageSendLaterInsets_once != -1) {
    dispatch_once(&imageSendLaterInsets_once, &__block_literal_global_1314_0);
  }
  double v2 = *(double *)&imageSendLaterInsets_sBehavior_0;
  double v3 = *(double *)&imageSendLaterInsets_sBehavior_1;
  double v4 = *(double *)&imageSendLaterInsets_sBehavior_2;
  double v5 = *(double *)&imageSendLaterInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __36__CKUIBehavior_imageSendLaterInsets__block_invoke()
{
  imageSendLaterInsets_sBehavior_0 = 0x4014000000000000;
  imageSendLaterInsets_sBehavior_1 = 0x4014000000000000;
  imageSendLaterInsets_sBehavior_2 = 0x4014000000000000;
  imageSendLaterInsets_sBehavior_3 = 0x4014000000000000;
}

- (CGSize)_heightClampedScaleWithAspectRatio:(double)a3 width:(double)a4 imageSize:(CGSize)a5
{
  double height = a5.height;
  double width = a5.width;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  BOOL v9 = a4 / a3 > 500.0;
  BOOL v10 = height > width;
  if (v9 && v10) {
    double v11 = 500.0;
  }
  else {
    double v11 = a4 / a3;
  }
  double v12 = a3 * 500.0;
  if (!v9 || !v10) {
    double v12 = a4;
  }
  double v13 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v13 = 1.0;
  }
  double v14 = ceil(v12 * v13) / v13;
  double v15 = ceil(v11 * v13) / v13;
  result.double height = v15;
  result.double width = v14;
  return result;
}

- (CGSize)unconstrainedAspectFillSizeForWidth:(double)a3 imageSize:(CGSize)a4
{
  double height = a4.height;
  double width = a4.width;
  double v7 = width / height;
  if (height == 0.0) {
    double v7 = 0.0;
  }
  -[CKUIBehavior _heightClampedScaleWithAspectRatio:width:imageSize:](self, "_heightClampedScaleWithAspectRatio:width:imageSize:", v7, a3);
  result.double height = v9;
  result.double width = v8;
  return result;
}

- (CGSize)thumbnailFillSizeForWidth:(double)a3 imageSize:(CGSize)a4
{
  double height = a4.height;
  double width = a4.width;
  double v7 = width / height;
  if (height == 0.0) {
    double v7 = 0.0;
  }
  double v8 = fmax(v7, 0.75);
  if (v8 > 1.77777778) {
    double v8 = 1.77777778;
  }
  -[CKUIBehavior _heightClampedScaleWithAspectRatio:width:imageSize:](self, "_heightClampedScaleWithAspectRatio:width:imageSize:", v8, a3);
  result.double height = v10;
  result.double width = v9;
  return result;
}

- (CGSize)mapThumbnailFillSizeForWidth:(double)a3
{
  -[CKUIBehavior thumbnailFillSizeForWidth:imageSize:](self, "thumbnailFillSizeForWidth:imageSize:", a3, 4.0, 3.0);
  result.double height = v4;
  result.double width = v3;
  return result;
}

- (UIEdgeInsets)minimumPlayButtonInsets
{
  if (minimumPlayButtonInsets_once != -1) {
    dispatch_once(&minimumPlayButtonInsets_once, &__block_literal_global_1316);
  }
  double v2 = *(double *)&minimumPlayButtonInsets_sBehavior_0;
  double v3 = *(double *)&minimumPlayButtonInsets_sBehavior_1;
  double v4 = *(double *)&minimumPlayButtonInsets_sBehavior_2;
  double v5 = *(double *)&minimumPlayButtonInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __39__CKUIBehavior_minimumPlayButtonInsets__block_invoke()
{
  minimumPlayButtonInsets_sBehavior_0 = 0x4020000000000000;
  minimumPlayButtonInsets_sBehavior_1 = 0x4020000000000000;
  minimumPlayButtonInsets_sBehavior_2 = 0x4020000000000000;
  minimumPlayButtonInsets_sBehavior_3 = 0x4020000000000000;
}

- (double)previewTitleBarHeight
{
  if (previewTitleBarHeight_once != -1) {
    dispatch_once(&previewTitleBarHeight_once, &__block_literal_global_1318);
  }
  return *(double *)&previewTitleBarHeight_sBehavior;
}

double __37__CKUIBehavior_previewTitleBarHeight__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = floor(v0 * 37.5) / v0;
  previewTitleBarHeight_sBehavior = *(void *)&result;
  return result;
}

- (UIEdgeInsets)thumbnailContentAlignmentInsetsForOrientation:(char)a3
{
  int v3 = a3;
  [(CKUIBehavior *)self balloonMaskTailWidth];
  double v5 = 0.0;
  if (v3) {
    double v6 = 0.0;
  }
  else {
    double v6 = v4;
  }
  if (v3) {
    double v7 = v4;
  }
  else {
    double v7 = 0.0;
  }
  double v8 = 0.0;
  result.double right = v7;
  result.double bottom = v5;
  result.double left = v6;
  result.double top = v8;
  return result;
}

- (double)waveformViewHeight
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __34__CKUIBehavior_waveformViewHeight__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (waveformViewHeight_once != -1) {
    dispatch_once(&waveformViewHeight_once, block);
  }
  return *(double *)&waveformViewHeight_sBehavior;
}

uint64_t __34__CKUIBehavior_waveformViewHeight__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) audioWaveformViewHeight];
  waveformViewHeight_sBehavior = v2;
  return result;
}

- (double)waveformHeight
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __30__CKUIBehavior_waveformHeight__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (waveformHeight_once != -1) {
    dispatch_once(&waveformHeight_once, block);
  }
  return *(double *)&waveformHeight_sBehavior;
}

uint64_t __30__CKUIBehavior_waveformHeight__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) audioWaveformHeight];
  waveformHeight_sBehavior = v2;
  return result;
}

- (double)waveformWidth
{
  if (waveformWidth_once != -1) {
    dispatch_once(&waveformWidth_once, &__block_literal_global_1320);
  }
  return *(double *)&waveformWidth_sBehavior;
}

void __29__CKUIBehavior_waveformWidth__block_invoke()
{
  waveformWidth_sBehavior = 0x4061800000000000;
}

- (double)minimumWaveformHeight
{
  if (minimumWaveformHeight_once != -1) {
    dispatch_once(&minimumWaveformHeight_once, &__block_literal_global_1322);
  }
  return *(double *)&minimumWaveformHeight_sBehavior;
}

void __37__CKUIBehavior_minimumWaveformHeight__block_invoke()
{
  minimumWaveformHeight_sBehavior = 0x4010000000000000;
}

- (unint64_t)waveformPowerLevelWidth
{
  if (waveformPowerLevelWidth_once != -1) {
    dispatch_once(&waveformPowerLevelWidth_once, &__block_literal_global_1324_0);
  }
  if (waveformPowerLevelWidth_sBehavior) {
    return 2;
  }
  else {
    return 0;
  }
}

void __39__CKUIBehavior_waveformPowerLevelWidth__block_invoke()
{
  waveformPowerLevelWidth_sBehavior = 1;
}

- (unint64_t)waveformGapWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __32__CKUIBehavior_waveformGapWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (waveformGapWidth_once != -1) {
    dispatch_once(&waveformGapWidth_once, block);
  }
  return waveformGapWidth_sBehavior;
}

uint64_t __32__CKUIBehavior_waveformGapWidth__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) audioWaveformGapWidth];
  waveformGapWidth_sBehavior = (unint64_t)v2;
  return result;
}

- (unint64_t)waveformPowerLevelWidthIncrement
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __48__CKUIBehavior_waveformPowerLevelWidthIncrement__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (waveformPowerLevelWidthIncrement_once != -1) {
    dispatch_once(&waveformPowerLevelWidthIncrement_once, block);
  }
  return waveformPowerLevelWidthIncrement_sBehavior;
}

uint64_t __48__CKUIBehavior_waveformPowerLevelWidthIncrement__block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) waveformPowerLevelWidth];
  uint64_t result = [*(id *)(a1 + 32) waveformGapWidth];
  waveformPowerLevelWidthIncrement_sBehavior = result + v2;
  return result;
}

- (double)waveformDefaultImagePowerLevelCount
{
  if (waveformDefaultImagePowerLevelCount_once != -1) {
    dispatch_once(&waveformDefaultImagePowerLevelCount_once, &__block_literal_global_1326);
  }
  return *(double *)&waveformDefaultImagePowerLevelCount_sBehavior;
}

void __51__CKUIBehavior_waveformDefaultImagePowerLevelCount__block_invoke()
{
  waveformDefaultImagePowerLevelCount_sBehavior = 0x4042000000000000;
}

- (double)audioWaveformHeight
{
  return 35.0;
}

- (double)audioWaveformViewHeight
{
  uint64_t v2 = [MEMORY[0x1E4F6BDB8] iMessageService];
  int v3 = +[CKAudioMessageRecordingView buttonFor:3 with:v2];
  objc_msgSend(v3, "sizeThatFits:", 1.79769313e308, 1.79769313e308);
  double v5 = v4;

  double v6 = +[CKUIBehavior sharedBehaviors];
  [v6 audioRecordingViewPadding];
  double v8 = (v5 + v7) * 0.75;

  return v8;
}

- (double)audioWaveformGapWidth
{
  return 2.0;
}

- (double)transcriptWaveformWidthForDuration:(double)a3
{
  unint64_t v5 = [(CKUIBehavior *)self waveformMaxPowerLevelsCount];
  [(CKUIBehavior *)self waveformMaxWidthDuration];
  if (v6 > a3)
  {
    double v7 = v6;
    double v8 = (double)[(CKUIBehavior *)self waveformMaxPowerLevelsCount];
    long double v9 = log2(a3 + 1.0) * v8;
    unint64_t v5 = (unint64_t)(v9 / log2(v7 + 1.0));
    unint64_t v10 = [(CKUIBehavior *)self waveformMinPowerLevelsCount];
    if (v10 > v5) {
      unint64_t v5 = v10;
    }
  }
  return (double)([(CKUIBehavior *)self waveformPowerLevelWidthIncrement] * v5);
}

- (CGSize)photoSheetProgressIndicatorSize
{
  if (photoSheetProgressIndicatorSize_once != -1) {
    dispatch_once(&photoSheetProgressIndicatorSize_once, &__block_literal_global_1330);
  }
  double v2 = *(double *)&photoSheetProgressIndicatorSize_sBehavior_0;
  double v3 = *(double *)&photoSheetProgressIndicatorSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __47__CKUIBehavior_photoSheetProgressIndicatorSize__block_invoke()
{
  photoSheetProgressIndicatorSize_sBehavior_0 = 0x4034000000000000;
  photoSheetProgressIndicatorSize_sBehavior_1 = 0x4034000000000000;
}

- (double)photoSheetVideoIconPadding
{
  if (photoSheetVideoIconPadding_once != -1) {
    dispatch_once(&photoSheetVideoIconPadding_once, &__block_literal_global_1332_0);
  }
  return *(double *)&photoSheetVideoIconPadding_sBehavior;
}

void __42__CKUIBehavior_photoSheetVideoIconPadding__block_invoke()
{
  photoSheetVideoIconPadding_sBehavior = 0x4010000000000000;
}

- (BOOL)ckShouldUpdatepreviewTitleFont
{
  return 0;
}

- (UIFont)previewTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  unint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)previewTitleFont_sContentSizeCategory_previewTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatepreviewTitleFont]
    || v11
    || previewTitleFont_sIsIncreaseContrastEnabled_previewTitleFont != v4
    || previewTitleFont_sIsBoldTextEnabled_previewTitleFont != IsBoldTextEnabled
    || (uint64_t v12 = previewTitleFont_sTextFontSize_previewTitleFont,
        *(double *)&previewTitleFont_sTextFontSize_previewTitleFont != v6)
    || (uint64_t v12 = previewTitleFont_sCustomTextFontSize_previewTitleFont,
        *(double *)&previewTitleFont_sCustomTextFontSize_previewTitleFont != v7)
    || (objc_msgSend((id)previewTitleFont_sCustomTextFontName_previewTitleFont, "isEqualToString:", v10, *(double *)&previewTitleFont_sCustomTextFontSize_previewTitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    double v14 = (void *)previewTitleFont_sBehavior;
    previewTitleFont_sBehavior = v13;

    objc_storeStrong((id *)&previewTitleFont_sContentSizeCategory_previewTitleFont, v3);
    previewTitleFont_sIsIncreaseContrastEnabled_previewTitleFont = v4;
    previewTitleFont_sIsBoldTextEnabled_previewTitleFont = IsBoldTextEnabled;
    previewTitleFont_sTextFontSize_previewTitleFont = *(void *)&v6;
    previewTitleFont_sCustomTextFontSize_previewTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&previewTitleFont_sCustomTextFontName_previewTitleFont, v9);
  }
  double v15 = (UIFont *)(id)previewTitleFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateattachmentTextFont
{
  return 0;
}

- (UIFont)attachmentTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  unint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)attachmentTextFont_sContentSizeCategory_attachmentTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateattachmentTextFont]
    || v11
    || attachmentTextFont_sIsIncreaseContrastEnabled_attachmentTextFont != v4
    || attachmentTextFont_sIsBoldTextEnabled_attachmentTextFont != IsBoldTextEnabled
    || (uint64_t v12 = attachmentTextFont_sTextFontSize_attachmentTextFont,
        *(double *)&attachmentTextFont_sTextFontSize_attachmentTextFont != v6)
    || (uint64_t v12 = attachmentTextFont_sCustomTextFontSize_attachmentTextFont,
        *(double *)&attachmentTextFont_sCustomTextFontSize_attachmentTextFont != v7)
    || (objc_msgSend((id)attachmentTextFont_sCustomTextFontName_attachmentTextFont, "isEqualToString:", v10, *(double *)&attachmentTextFont_sCustomTextFontSize_attachmentTextFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    double v14 = (void *)attachmentTextFont_sBehavior;
    attachmentTextFont_sBehavior = v13;

    objc_storeStrong((id *)&attachmentTextFont_sContentSizeCategory_attachmentTextFont, v3);
    attachmentTextFont_sIsIncreaseContrastEnabled_attachmentTextFont = v4;
    attachmentTextFont_sIsBoldTextEnabled_attachmentTextFont = IsBoldTextEnabled;
    attachmentTextFont_sTextFontSize_attachmentTextFont = *(void *)&v6;
    attachmentTextFont_sCustomTextFontSize_attachmentTextFont = *(void *)&v7;
    objc_storeStrong((id *)&attachmentTextFont_sCustomTextFontName_attachmentTextFont, v9);
  }
  double v15 = (UIFont *)(id)attachmentTextFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateattachmentSubtitleTextFont
{
  return 0;
}

- (UIFont)attachmentSubtitleTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  unint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)attachmentSubtitleTextFont_sContentSizeCategory_attachmentSubtitleTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateattachmentSubtitleTextFont]
    || v11
    || attachmentSubtitleTextFont_sIsIncreaseContrastEnabled_attachmentSubtitleTextFont != v4
    || attachmentSubtitleTextFont_sIsBoldTextEnabled_attachmentSubtitleTextFont != IsBoldTextEnabled
    || (uint64_t v12 = attachmentSubtitleTextFont_sTextFontSize_attachmentSubtitleTextFont,
        *(double *)&attachmentSubtitleTextFont_sTextFontSize_attachmentSubtitleTextFont != v6)
    || (uint64_t v12 = attachmentSubtitleTextFont_sCustomTextFontSize_attachmentSubtitleTextFont,
        *(double *)&attachmentSubtitleTextFont_sCustomTextFontSize_attachmentSubtitleTextFont != v7)
    || (objc_msgSend((id)attachmentSubtitleTextFont_sCustomTextFontName_attachmentSubtitleTextFont, "isEqualToString:", v10, *(double *)&attachmentSubtitleTextFont_sCustomTextFontSize_attachmentSubtitleTextFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43888], *(double *)&v12);
    double v14 = (void *)attachmentSubtitleTextFont_sBehavior;
    attachmentSubtitleTextFont_sBehavior = v13;

    objc_storeStrong((id *)&attachmentSubtitleTextFont_sContentSizeCategory_attachmentSubtitleTextFont, v3);
    attachmentSubtitleTextFont_sIsIncreaseContrastEnabled_attachmentSubtitleTextFont = v4;
    attachmentSubtitleTextFont_sIsBoldTextEnabled_attachmentSubtitleTextFont = IsBoldTextEnabled;
    attachmentSubtitleTextFont_sTextFontSize_attachmentSubtitleTextFont = *(void *)&v6;
    attachmentSubtitleTextFont_sCustomTextFontSize_attachmentSubtitleTextFont = *(void *)&v7;
    objc_storeStrong((id *)&attachmentSubtitleTextFont_sCustomTextFontName_attachmentSubtitleTextFont, v9);
  }
  double v15 = (UIFont *)(id)attachmentSubtitleTextFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatecontactAttachmentNameFont
{
  return 0;
}

- (UIFont)contactAttachmentNameFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  unint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)contactAttachmentNameFont_sContentSizeCategory_contactAttachmentNameFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatecontactAttachmentNameFont]
    || v11
    || contactAttachmentNameFont_sIsIncreaseContrastEnabled_contactAttachmentNameFont != v4
    || contactAttachmentNameFont_sIsBoldTextEnabled_contactAttachmentNameFont != IsBoldTextEnabled
    || (uint64_t v12 = contactAttachmentNameFont_sTextFontSize_contactAttachmentNameFont,
        *(double *)&contactAttachmentNameFont_sTextFontSize_contactAttachmentNameFont != v6)
    || (uint64_t v12 = contactAttachmentNameFont_sCustomTextFontSize_contactAttachmentNameFont,
        *(double *)&contactAttachmentNameFont_sCustomTextFontSize_contactAttachmentNameFont != v7)
    || (objc_msgSend((id)contactAttachmentNameFont_sCustomTextFontName_contactAttachmentNameFont, "isEqualToString:", v10, *(double *)&contactAttachmentNameFont_sCustomTextFontSize_contactAttachmentNameFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_emphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F438D8], *(double *)&v12);
    double v14 = (void *)contactAttachmentNameFont_sBehavior;
    contactAttachmentNameFont_sBehavior = v13;

    objc_storeStrong((id *)&contactAttachmentNameFont_sContentSizeCategory_contactAttachmentNameFont, v3);
    contactAttachmentNameFont_sIsIncreaseContrastEnabled_contactAttachmentNameFont = v4;
    contactAttachmentNameFont_sIsBoldTextEnabled_contactAttachmentNameFont = IsBoldTextEnabled;
    contactAttachmentNameFont_sTextFontSize_contactAttachmentNameFont = *(void *)&v6;
    contactAttachmentNameFont_sCustomTextFontSize_contactAttachmentNameFont = *(void *)&v7;
    objc_storeStrong((id *)&contactAttachmentNameFont_sCustomTextFontName_contactAttachmentNameFont, v9);
  }
  double v15 = (UIFont *)(id)contactAttachmentNameFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatecontactAttachmentOrgFont
{
  return 0;
}

- (UIFont)contactAttachmentOrgFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  unint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)contactAttachmentOrgFont_sContentSizeCategory_contactAttachmentOrgFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatecontactAttachmentOrgFont]
    || v11
    || contactAttachmentOrgFont_sIsIncreaseContrastEnabled_contactAttachmentOrgFont != v4
    || contactAttachmentOrgFont_sIsBoldTextEnabled_contactAttachmentOrgFont != IsBoldTextEnabled
    || (uint64_t v12 = contactAttachmentOrgFont_sTextFontSize_contactAttachmentOrgFont,
        *(double *)&contactAttachmentOrgFont_sTextFontSize_contactAttachmentOrgFont != v6)
    || (uint64_t v12 = contactAttachmentOrgFont_sCustomTextFontSize_contactAttachmentOrgFont,
        *(double *)&contactAttachmentOrgFont_sCustomTextFontSize_contactAttachmentOrgFont != v7)
    || (objc_msgSend((id)contactAttachmentOrgFont_sCustomTextFontName_contactAttachmentOrgFont, "isEqualToString:", v10, *(double *)&contactAttachmentOrgFont_sCustomTextFontSize_contactAttachmentOrgFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    double v14 = (void *)contactAttachmentOrgFont_sBehavior;
    contactAttachmentOrgFont_sBehavior = v13;

    objc_storeStrong((id *)&contactAttachmentOrgFont_sContentSizeCategory_contactAttachmentOrgFont, v3);
    contactAttachmentOrgFont_sIsIncreaseContrastEnabled_contactAttachmentOrgFont = v4;
    contactAttachmentOrgFont_sIsBoldTextEnabled_contactAttachmentOrgFont = IsBoldTextEnabled;
    contactAttachmentOrgFont_sTextFontSize_contactAttachmentOrgFont = *(void *)&v6;
    contactAttachmentOrgFont_sCustomTextFontSize_contactAttachmentOrgFont = *(void *)&v7;
    objc_storeStrong((id *)&contactAttachmentOrgFont_sCustomTextFontName_contactAttachmentOrgFont, v9);
  }
  double v15 = (UIFont *)(id)contactAttachmentOrgFont_sBehavior;

  return v15;
}

- (UIImage)genericDocumentIcon
{
  if (genericDocumentIcon_once != -1) {
    dispatch_once(&genericDocumentIcon_once, &__block_literal_global_1334_0);
  }
  double v2 = (void *)genericDocumentIcon_sBehavior;

  return (UIImage *)v2;
}

void __35__CKUIBehavior_genericDocumentIcon__block_invoke()
{
  double v0 = [MEMORY[0x1E4F6F248] genericDocumentIcon];
  double v1 = [MEMORY[0x1E4F6F258] imageDescriptorNamed:*MEMORY[0x1E4F6F288]];
  double v2 = [v0 prepareImageForDescriptor:v1];
  uint64_t v3 = [v2 CGImage];

  uint64_t v4 = [MEMORY[0x1E4F42A80] imageWithCGImage:v3];

  unint64_t v5 = (void *)genericDocumentIcon_sBehavior;
  genericDocumentIcon_sBehavior = v4;
}

- (UIImage)playButtonImage
{
  if (playButtonImage_once != -1) {
    dispatch_once(&playButtonImage_once, &__block_literal_global_1336);
  }
  double v2 = (void *)playButtonImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_playButtonImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A98] configurationWithPointSize:4 weight:3 scale:25.0];
  double v1 = [MEMORY[0x1E4F42A80] _systemImageNamed:@"circle.fill"];
  uint64_t v2 = [v1 imageWithSymbolConfiguration:v0];

  uint64_t v3 = (void *)playButtonImage_sBehavior;
  playButtonImage_sBehavior = v2;
}

- (UIImage)playButtonArrowImage
{
  if (playButtonArrowImage_once != -1) {
    dispatch_once(&playButtonArrowImage_once, &__block_literal_global_1338);
  }
  uint64_t v2 = (void *)playButtonArrowImage_sBehavior;

  return (UIImage *)v2;
}

void __36__CKUIBehavior_playButtonArrowImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A98] configurationWithPointSize:4 weight:3 scale:14.0];
  double v1 = [MEMORY[0x1E4F42A80] _systemImageNamed:@"play.fill"];
  uint64_t v2 = [v1 imageWithSymbolConfiguration:v0];

  uint64_t v3 = (void *)playButtonArrowImage_sBehavior;
  playButtonArrowImage_sBehavior = v2;
}

- (UIImage)muteButtonImage
{
  if (muteButtonImage_once != -1) {
    dispatch_once(&muteButtonImage_once, &__block_literal_global_1343);
  }
  uint64_t v2 = (void *)muteButtonImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_muteButtonImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F42A80] systemImageNamed:@"speaker.slash.fill"];
  uint64_t v0 = [v2 imageWithRenderingMode:2];
  double v1 = (void *)muteButtonImage_sBehavior;
  muteButtonImage_sBehavior = v0;
}

- (UIImage)unmuteButtonImage
{
  if (unmuteButtonImage_once != -1) {
    dispatch_once(&unmuteButtonImage_once, &__block_literal_global_1348);
  }
  id v2 = (void *)unmuteButtonImage_sBehavior;

  return (UIImage *)v2;
}

void __33__CKUIBehavior_unmuteButtonImage__block_invoke()
{
  id v2 = [MEMORY[0x1E4F42A80] systemImageNamed:@"speaker.wave.2.fill"];
  uint64_t v0 = [v2 imageWithRenderingMode:2];
  double v1 = (void *)unmuteButtonImage_sBehavior;
  unmuteButtonImage_sBehavior = v0;
}

- (UIColor)imageBalloonSelectionOverlayColor
{
  if (imageBalloonSelectionOverlayColor_once != -1) {
    dispatch_once(&imageBalloonSelectionOverlayColor_once, &__block_literal_global_1353);
  }
  id v2 = (void *)imageBalloonSelectionOverlayColor_sBehavior;

  return (UIColor *)v2;
}

void __49__CKUIBehavior_imageBalloonSelectionOverlayColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] colorWithRed:0.0392156863 green:0.0392156863 blue:0.470588235 alpha:0.05];
  double v1 = (void *)imageBalloonSelectionOverlayColor_sBehavior;
  imageBalloonSelectionOverlayColor_sBehavior = v0;
}

- (UIColor)pluginBalloonSelectionOverlayColor
{
  if (pluginBalloonSelectionOverlayColor_once != -1) {
    dispatch_once(&pluginBalloonSelectionOverlayColor_once, &__block_literal_global_1355_0);
  }
  id v2 = (void *)pluginBalloonSelectionOverlayColor_sBehavior;

  return (UIColor *)v2;
}

void __50__CKUIBehavior_pluginBalloonSelectionOverlayColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] colorWithRed:0.0392156863 green:0.0392156863 blue:0.470588235 alpha:0.1];
  double v1 = (void *)pluginBalloonSelectionOverlayColor_sBehavior;
  pluginBalloonSelectionOverlayColor_sBehavior = v0;
}

- (BOOL)shouldShowDisclosureChevronInRecipientAtoms
{
  if (shouldShowDisclosureChevronInRecipientAtoms_once != -1) {
    dispatch_once(&shouldShowDisclosureChevronInRecipientAtoms_once, &__block_literal_global_1357);
  }
  return shouldShowDisclosureChevronInRecipientAtoms_sBehavior;
}

void __59__CKUIBehavior_shouldShowDisclosureChevronInRecipientAtoms__block_invoke()
{
  shouldShowDisclosureChevronInRecipientAtoms_sBehavior = 1;
}

- (BOOL)shouldAutomaticallyCheckAvailabilityOfAlternateAddresses
{
  return [MEMORY[0x1E4F6BDC0] smsEnabled] ^ 1;
}

- (BOOL)shouldRefreshAlternateAddressesSheet
{
  if (shouldRefreshAlternateAddressesSheet_once != -1) {
    dispatch_once(&shouldRefreshAlternateAddressesSheet_once, &__block_literal_global_1360_1);
  }
  return 0;
}

- (BOOL)presentsFullscreenInViewService
{
  if (presentsFullscreenInViewService_once != -1) {
    dispatch_once(&presentsFullscreenInViewService_once, &__block_literal_global_1362_0);
  }
  return presentsFullscreenInViewService_sBehavior;
}

void __47__CKUIBehavior_presentsFullscreenInViewService__block_invoke()
{
  presentsFullscreenInViewService_sBehavior = 1;
}

- (BOOL)presentsAutocompleteInAPopover
{
  if (presentsAutocompleteInAPopover_once != -1) {
    dispatch_once(&presentsAutocompleteInAPopover_once, &__block_literal_global_1364_0);
  }
  return 0;
}

- (UIEdgeInsets)toFieldScrollViewInsets
{
  if (toFieldScrollViewInsets_once != -1) {
    dispatch_once(&toFieldScrollViewInsets_once, &__block_literal_global_1366);
  }
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

- (BOOL)ckShouldUpdatetoFieldPreferredHeight
{
  return 0;
}

- (double)toFieldPreferredHeight
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  long double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)toFieldPreferredHeight_sContentSizeCategory_toFieldPreferredHeight, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetoFieldPreferredHeight]
    || v10
    || toFieldPreferredHeight_sIsBoldTextEnabled_toFieldPreferredHeight != IsBoldTextEnabled
    || (uint64_t v11 = toFieldPreferredHeight_sTextFontSize_toFieldPreferredHeight,
        *(double *)&toFieldPreferredHeight_sTextFontSize_toFieldPreferredHeight != v5)
    || (uint64_t v11 = toFieldPreferredHeight_sCustomTextFontSize_toFieldPreferredHeight,
        *(double *)&toFieldPreferredHeight_sCustomTextFontSize_toFieldPreferredHeight != v6)
    || (objc_msgSend((id)toFieldPreferredHeight_sCustomTextFontName_toFieldPreferredHeight, "isEqualToString:", v9, *(double *)&toFieldPreferredHeight_sCustomTextFontSize_toFieldPreferredHeight) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E4F5A168], "preferredHeight", *(double *)&v11);
    toFieldPreferredHeight_sBehavior = v12;
    objc_storeStrong((id *)&toFieldPreferredHeight_sContentSizeCategory_toFieldPreferredHeight, v3);
    toFieldPreferredHeight_sIsBoldTextEnabled_toFieldPreferredHeight = IsBoldTextEnabled;
    toFieldPreferredHeight_sTextFontSize_toFieldPreferredHeight = *(void *)&v5;
    toFieldPreferredHeight_sCustomTextFontSize_toFieldPreferredHeight = *(void *)&v6;
    objc_storeStrong((id *)&toFieldPreferredHeight_sCustomTextFontName_toFieldPreferredHeight, v8);
  }
  double v13 = *(double *)&toFieldPreferredHeight_sBehavior;

  return v13;
}

- (double)scheduledImageBalloonAlpha
{
  if (scheduledImageBalloonAlpha_once != -1) {
    dispatch_once(&scheduledImageBalloonAlpha_once, &__block_literal_global_1369);
  }
  return *(double *)&scheduledImageBalloonAlpha_sBehavior;
}

void __42__CKUIBehavior_scheduledImageBalloonAlpha__block_invoke()
{
  scheduledImageBalloonAlpha_sBehavior = 0x3FE0000000000000;
}

- (double)minAudioRecordingDuration
{
  if (minAudioRecordingDuration_once != -1) {
    dispatch_once(&minAudioRecordingDuration_once, &__block_literal_global_1371);
  }
  return *(double *)&minAudioRecordingDuration_sBehavior;
}

void __41__CKUIBehavior_minAudioRecordingDuration__block_invoke()
{
  minAudioRecordingDuration_sBehavior = 0x3FD0000000000000;
}

- (double)maxAudioRecordingDuration
{
  if (maxAudioRecordingDuration_once != -1) {
    dispatch_once(&maxAudioRecordingDuration_once, &__block_literal_global_1373);
  }
  return *(double *)&maxAudioRecordingDuration_sBehavior;
}

void __41__CKUIBehavior_maxAudioRecordingDuration__block_invoke()
{
  maxAudioRecordingDuration_sBehavior = 0x404E000000000000;
}

- (BOOL)entryFieldShouldUseBackdropView
{
  if (entryFieldShouldUseBackdropView_once != -1) {
    dispatch_once(&entryFieldShouldUseBackdropView_once, &__block_literal_global_1375);
  }
  return entryFieldShouldUseBackdropView_sBehavior;
}

void __47__CKUIBehavior_entryFieldShouldUseBackdropView__block_invoke()
{
  entryFieldShouldUseBackdropView_sBehavior = 1;
}

- (BOOL)isAppStripInKeyboard
{
  if (isAppStripInKeyboard_once != -1) {
    dispatch_once(&isAppStripInKeyboard_once, &__block_literal_global_1377_0);
  }
  return isAppStripInKeyboard_sBehavior;
}

uint64_t __36__CKUIBehavior_isAppStripInKeyboard__block_invoke()
{
  uint64_t result = CKIsRunningInMessages();
  isAppStripInKeyboard_sBehavior = result != 0;
  return result;
}

- (BOOL)isMentionSuggestionViewInKeyboard
{
  if (isMentionSuggestionViewInKeyboard_once != -1) {
    dispatch_once(&isMentionSuggestionViewInKeyboard_once, &__block_literal_global_1379);
  }
  return isMentionSuggestionViewInKeyboard_sBehavior;
}

uint64_t __49__CKUIBehavior_isMentionSuggestionViewInKeyboard__block_invoke()
{
  uint64_t result = CKIsRunningInMessages();
  isMentionSuggestionViewInKeyboard_sBehavior = result != 0;
  return result;
}

- (BOOL)entryFieldShouldUseNewPhotoUI
{
  if (entryFieldShouldUseNewPhotoUI_once != -1) {
    dispatch_once(&entryFieldShouldUseNewPhotoUI_once, &__block_literal_global_1381);
  }
  return entryFieldShouldUseNewPhotoUI_sBehavior;
}

void __45__CKUIBehavior_entryFieldShouldUseNewPhotoUI__block_invoke()
{
  entryFieldShouldUseNewPhotoUI_sBehavior = 1;
}

- (BOOL)supportsEntryViewPlusButtonLongPress
{
  if (supportsEntryViewPlusButtonLongPress_once != -1) {
    dispatch_once(&supportsEntryViewPlusButtonLongPress_once, &__block_literal_global_1383);
  }
  return supportsEntryViewPlusButtonLongPress_sBehavior;
}

void __52__CKUIBehavior_supportsEntryViewPlusButtonLongPress__block_invoke()
{
  supportsEntryViewPlusButtonLongPress_sBehavior = 1;
}

- (double)entryViewPlusButtonLongPressDuration
{
  if (entryViewPlusButtonLongPressDuration_once != -1) {
    dispatch_once(&entryViewPlusButtonLongPressDuration_once, &__block_literal_global_1385);
  }
  return *(double *)&entryViewPlusButtonLongPressDuration_sBehavior;
}

uint64_t __52__CKUIBehavior_entryViewPlusButtonLongPressDuration__block_invoke()
{
  uint64_t result = _AXSForceTouchTimeDuration();
  double v1 = dbl_18F81CB70[result == 2];
  if (!result) {
    double v1 = 0.5;
  }
  entryViewPlusButtonLongPressDuration_sBehavior = *(void *)&v1;
  return result;
}

- (double)entryViewBackgroundAlpha
{
  if (entryViewBackgroundAlpha_once != -1) {
    dispatch_once(&entryViewBackgroundAlpha_once, &__block_literal_global_1387_0);
  }
  return *(double *)&entryViewBackgroundAlpha_sBehavior;
}

void __40__CKUIBehavior_entryViewBackgroundAlpha__block_invoke()
{
  entryViewBackgroundAlpha_sBehavior = 0x3FE8000000000000;
}

- (BOOL)isSendButtonEnabledOnPlatform
{
  if (isSendButtonEnabledOnPlatform_once != -1) {
    dispatch_once(&isSendButtonEnabledOnPlatform_once, &__block_literal_global_1389);
  }
  return isSendButtonEnabledOnPlatform_sBehavior;
}

void __45__CKUIBehavior_isSendButtonEnabledOnPlatform__block_invoke()
{
  isSendButtonEnabledOnPlatform_sBehavior = 1;
}

- (BOOL)isEntryViewFirstResponderOnViewAppearance
{
  if (isEntryViewFirstResponderOnViewAppearance_once != -1) {
    dispatch_once(&isEntryViewFirstResponderOnViewAppearance_once, &__block_literal_global_1391);
  }
  return 0;
}

- (BOOL)isEntryViewInputAccessory
{
  if (isEntryViewInputAccessory_once != -1) {
    dispatch_once(&isEntryViewInputAccessory_once, &__block_literal_global_1393);
  }
  return isEntryViewInputAccessory_sBehavior;
}

void __41__CKUIBehavior_isEntryViewInputAccessory__block_invoke()
{
  int v0 = CKIsRunningInMessagesNotificationExtension();
  double v1 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v2 = [v1 isEntryViewInTranscriptEnabled];

  char v3 = v2 ^ 1;
  if (v0) {
    char v3 = 1;
  }
  isEntryViewInputAccessory_sBehavior = v3;
}

- (BOOL)entryViewFollowsKeyboardLayoutGuide
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__CKUIBehavior_entryViewFollowsKeyboardLayoutGuide__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewFollowsKeyboardLayoutGuide_once != -1) {
    dispatch_once(&entryViewFollowsKeyboardLayoutGuide_once, block);
  }
  return entryViewFollowsKeyboardLayoutGuide_sBehavior;
}

uint64_t __51__CKUIBehavior_entryViewFollowsKeyboardLayoutGuide__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) isEntryViewInputAccessory];
  entryViewFollowsKeyboardLayoutGuide_sBehavior = result ^ 1;
  return result;
}

- (BOOL)entryViewSupportsPhotoButton
{
  if (entryViewSupportsPhotoButton_once != -1) {
    dispatch_once(&entryViewSupportsPhotoButton_once, &__block_literal_global_1397);
  }
  return entryViewSupportsPhotoButton_sBehavior;
}

void __44__CKUIBehavior_entryViewSupportsPhotoButton__block_invoke()
{
  int v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v1 = [v0 isSendMenuEnabled];

  entryViewSupportsPhotoButton_sBehavior = v1 ^ 1;
}

- (BOOL)entryViewSupportsPlusButton
{
  if (entryViewSupportsPlusButton_once != -1) {
    dispatch_once(&entryViewSupportsPlusButton_once, &__block_literal_global_1399);
  }
  return entryViewSupportsPlusButton_sBehavior;
}

void __43__CKUIBehavior_entryViewSupportsPlusButton__block_invoke()
{
  int v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v1 = [v0 isSendMenuEnabled];

  entryViewSupportsPlusButton_sBehavior = v1;
}

- (BOOL)entryViewSupportsBrowserButton
{
  if (entryViewSupportsBrowserButton_once != -1) {
    dispatch_once(&entryViewSupportsBrowserButton_once, &__block_literal_global_1401);
  }
  return entryViewSupportsBrowserButton_sBehavior;
}

void __46__CKUIBehavior_entryViewSupportsBrowserButton__block_invoke()
{
  int v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v1 = [v0 isSendMenuEnabled];

  entryViewSupportsBrowserButton_sBehavior = v1 ^ 1;
}

- (BOOL)browserButtonShouldUseMenu
{
  if (browserButtonShouldUseMenu_once != -1) {
    dispatch_once(&browserButtonShouldUseMenu_once, &__block_literal_global_1403);
  }
  return 0;
}

- (BOOL)browserButtonShouldUseExternalMenu
{
  if (browserButtonShouldUseExternalMenu_once != -1) {
    dispatch_once(&browserButtonShouldUseExternalMenu_once, &__block_literal_global_1405);
  }
  return 0;
}

- (BOOL)shouldDisableSendButtonClickInteraction
{
  if (shouldDisableSendButtonClickInteraction_once != -1) {
    dispatch_once(&shouldDisableSendButtonClickInteraction_once, &__block_literal_global_1407);
  }
  return 0;
}

- (BOOL)entryViewSupportsSingleBigEmojiFont
{
  if (entryViewSupportsSingleBigEmojiFont_once != -1) {
    dispatch_once(&entryViewSupportsSingleBigEmojiFont_once, &__block_literal_global_1409);
  }
  return entryViewSupportsSingleBigEmojiFont_sBehavior;
}

uint64_t __51__CKUIBehavior_entryViewSupportsSingleBigEmojiFont__block_invoke()
{
  uint64_t result = CKIsRunningInMessagesNotificationExtension();
  entryViewSupportsSingleBigEmojiFont_sBehavior = result == 0;
  return result;
}

- (BOOL)includeKeyboardInEntryViewHeight
{
  if (includeKeyboardInEntryViewHeight_once != -1) {
    dispatch_once(&includeKeyboardInEntryViewHeight_once, &__block_literal_global_1411);
  }
  return includeKeyboardInEntryViewHeight_sBehavior;
}

void __48__CKUIBehavior_includeKeyboardInEntryViewHeight__block_invoke()
{
  includeKeyboardInEntryViewHeight_sBehavior = 1;
}

- (BOOL)keyboardSizeDeterminesAppCardDetentHeight
{
  if (keyboardSizeDeterminesAppCardDetentHeight_once != -1) {
    dispatch_once(&keyboardSizeDeterminesAppCardDetentHeight_once, &__block_literal_global_1413);
  }
  return keyboardSizeDeterminesAppCardDetentHeight_sBehavior;
}

void __57__CKUIBehavior_keyboardSizeDeterminesAppCardDetentHeight__block_invoke()
{
  keyboardSizeDeterminesAppCardDetentHeight_sBehavior = 1;
}

- (BOOL)entryViewButtonWantsVibrancy
{
  if (entryViewButtonWantsVibrancy_once != -1) {
    dispatch_once(&entryViewButtonWantsVibrancy_once, &__block_literal_global_1415);
  }
  return entryViewButtonWantsVibrancy_sBehavior;
}

void __44__CKUIBehavior_entryViewButtonWantsVibrancy__block_invoke()
{
  entryViewButtonWantsVibrancy_sBehavior = 1;
}

- (char)entryViewButtonDefaultColor
{
  if (entryViewButtonDefaultColor_once != -1) {
    dispatch_once(&entryViewButtonDefaultColor_once, &__block_literal_global_1417_0);
  }
  return entryViewButtonDefaultColor_sBehavior << 31 >> 31;
}

void __43__CKUIBehavior_entryViewButtonDefaultColor__block_invoke()
{
  entryViewButtonDefaultColor_sBehavior = 1;
}

- (BOOL)knockoutViewShouldUseBackgroundColor
{
  if (knockoutViewShouldUseBackgroundColor_once != -1) {
    dispatch_once(&knockoutViewShouldUseBackgroundColor_once, &__block_literal_global_1419);
  }
  return knockoutViewShouldUseBackgroundColor_sBehavior;
}

void __52__CKUIBehavior_knockoutViewShouldUseBackgroundColor__block_invoke()
{
  knockoutViewShouldUseBackgroundColor_sBehavior = 1;
}

- (double)entryViewAppButtonImagePointSize
{
  if (entryViewAppButtonImagePointSize_once != -1) {
    dispatch_once(&entryViewAppButtonImagePointSize_once, &__block_literal_global_1421);
  }
  return *(double *)&entryViewAppButtonImagePointSize_sBehavior;
}

void __48__CKUIBehavior_entryViewAppButtonImagePointSize__block_invoke()
{
  entryViewAppButtonImagePointSize_sBehavior = 0x4040000000000000;
}

- (BOOL)entryViewBackgroundShouldUseVariableBlur
{
  if (entryViewBackgroundShouldUseVariableBlur_once != -1) {
    dispatch_once(&entryViewBackgroundShouldUseVariableBlur_once, &__block_literal_global_1423);
  }
  return entryViewBackgroundShouldUseVariableBlur_sBehavior;
}

uint64_t __56__CKUIBehavior_entryViewBackgroundShouldUseVariableBlur__block_invoke()
{
  int v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v1 = [v0 isSendMenuEnabled];

  uint64_t result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  entryViewBackgroundShouldUseVariableBlur_sBehavior = v1 & result;
  return result;
}

- (Class)entryViewBackgroundClass
{
  if (!UIAccessibilityIsReduceTransparencyEnabled() && !CKIsRunningInMessagesNotificationExtension()) {
    [(CKUIBehavior *)self entryViewBackgroundShouldUseVariableBlur];
  }
  char v3 = objc_opt_class();

  return (Class)v3;
}

- (Class)entryRecordingViewClass
{
  if (entryRecordingViewClass_once != -1) {
    dispatch_once(&entryRecordingViewClass_once, &__block_literal_global_1431_0);
  }
  return 0;
}

- (double)entryContentViewTextLeftOffset
{
  if (entryContentViewTextLeftOffset_once != -1) {
    dispatch_once(&entryContentViewTextLeftOffset_once, &__block_literal_global_1433);
  }
  return *(double *)&entryContentViewTextLeftOffset_sBehavior;
}

void __46__CKUIBehavior_entryContentViewTextLeftOffset__block_invoke()
{
  entryContentViewTextLeftOffset_sBehavior = 0x4020000000000000;
}

- (BOOL)shouldShowPluginDividerLineWithPluginShelf
{
  if (shouldShowPluginDividerLineWithPluginShelf_once != -1) {
    dispatch_once(&shouldShowPluginDividerLineWithPluginShelf_once, &__block_literal_global_1435);
  }
  return shouldShowPluginDividerLineWithPluginShelf_sBehavior;
}

void __58__CKUIBehavior_shouldShowPluginDividerLineWithPluginShelf__block_invoke()
{
  shouldShowPluginDividerLineWithPluginShelf_sBehavior = 1;
}

- (double)pluginDividerLineInsetsWithPluginShelf
{
  if (pluginDividerLineInsetsWithPluginShelf_once != -1) {
    dispatch_once(&pluginDividerLineInsetsWithPluginShelf_once, &__block_literal_global_1437);
  }
  return 0.0;
}

- (double)entryViewAttachmentHorizontalOffset
{
  if (entryViewAttachmentHorizontalOffset_once != -1) {
    dispatch_once(&entryViewAttachmentHorizontalOffset_once, &__block_literal_global_1439);
  }
  return *(double *)&entryViewAttachmentHorizontalOffset_sBehavior;
}

void __51__CKUIBehavior_entryViewAttachmentHorizontalOffset__block_invoke()
{
  entryViewAttachmentHorizontalOffset_sBehavior = 0xC014000000000000;
}

- (double)entryViewAttachmentVerticalOffset
{
  if (entryViewAttachmentVerticalOffset_once != -1) {
    dispatch_once(&entryViewAttachmentVerticalOffset_once, &__block_literal_global_1441);
  }
  return 0.0;
}

- (double)messageEntryContentViewClearOffsetFromTop
{
  if (messageEntryContentViewClearOffsetFromTop_once != -1) {
    dispatch_once(&messageEntryContentViewClearOffsetFromTop_once, &__block_literal_global_1443);
  }
  return *(double *)&messageEntryContentViewClearOffsetFromTop_sBehavior;
}

void __57__CKUIBehavior_messageEntryContentViewClearOffsetFromTop__block_invoke()
{
  messageEntryContentViewClearOffsetFromTop_sBehavior = 0x4010000000000000;
}

- (double)messageEntryContentViewClearOffsetFromRight
{
  if (messageEntryContentViewClearOffsetFromRight_once != -1) {
    dispatch_once(&messageEntryContentViewClearOffsetFromRight_once, &__block_literal_global_1445);
  }
  return *(double *)&messageEntryContentViewClearOffsetFromRight_sBehavior;
}

void __59__CKUIBehavior_messageEntryContentViewClearOffsetFromRight__block_invoke()
{
  messageEntryContentViewClearOffsetFromRight_sBehavior = 0x4024000000000000;
}

- (double)messageEntryContentViewGenerationOffsetFromBottom
{
  if (messageEntryContentViewGenerationOffsetFromBottom_once != -1) {
    dispatch_once(&messageEntryContentViewGenerationOffsetFromBottom_once, &__block_literal_global_1447);
  }
  return *(double *)&messageEntryContentViewGenerationOffsetFromBottom_sBehavior;
}

void __65__CKUIBehavior_messageEntryContentViewGenerationOffsetFromBottom__block_invoke()
{
  messageEntryContentViewGenerationOffsetFromBottom_sBehavior = 0x4010000000000000;
}

- (double)messageEntryContentViewGenerationOffsetFromLeft
{
  if (messageEntryContentViewGenerationOffsetFromLeft_once != -1) {
    dispatch_once(&messageEntryContentViewGenerationOffsetFromLeft_once, &__block_literal_global_1449);
  }
  return *(double *)&messageEntryContentViewGenerationOffsetFromLeft_sBehavior;
}

void __63__CKUIBehavior_messageEntryContentViewGenerationOffsetFromLeft__block_invoke()
{
  messageEntryContentViewGenerationOffsetFromLeft_sBehavior = 0x4024000000000000;
}

- (UIEdgeInsets)messageEntryContentViewSendLaterInsets
{
  if (messageEntryContentViewSendLaterInsets_once != -1) {
    dispatch_once(&messageEntryContentViewSendLaterInsets_once, &__block_literal_global_1451);
  }
  double v2 = *(double *)&messageEntryContentViewSendLaterInsets_sBehavior_0;
  double v3 = *(double *)&messageEntryContentViewSendLaterInsets_sBehavior_1;
  double v4 = *(double *)&messageEntryContentViewSendLaterInsets_sBehavior_2;
  double v5 = *(double *)&messageEntryContentViewSendLaterInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __54__CKUIBehavior_messageEntryContentViewSendLaterInsets__block_invoke()
{
  messageEntryContentViewSendLaterInsets_sBehavior_0 = 0x4018000000000000;
  messageEntryContentViewSendLaterInsets_sBehavior_1 = 0x4018000000000000;
  messageEntryContentViewSendLaterInsets_sBehavior_2 = 0x4014000000000000;
  messageEntryContentViewSendLaterInsets_sBehavior_3 = 0x4018000000000000;
}

- (UIEdgeInsets)messageEntryContentViewPluginInsets
{
  if (messageEntryContentViewPluginInsets_once != -1) {
    dispatch_once(&messageEntryContentViewPluginInsets_once, &__block_literal_global_1453);
  }
  double v2 = *(double *)&messageEntryContentViewPluginInsets_sBehavior_0;
  double v3 = *(double *)&messageEntryContentViewPluginInsets_sBehavior_1;
  double v4 = *(double *)&messageEntryContentViewPluginInsets_sBehavior_2;
  double v5 = *(double *)&messageEntryContentViewPluginInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __51__CKUIBehavior_messageEntryContentViewPluginInsets__block_invoke()
{
  messageEntryContentViewPluginInsets_sBehavior_0 = 0x4018000000000000;
  messageEntryContentViewPluginInsets_sBehavior_1 = 0x4018000000000000;
  messageEntryContentViewPluginInsets_sBehavior_2 = 0x4014000000000000;
  messageEntryContentViewPluginInsets_sBehavior_3 = 0x4018000000000000;
}

- (UIEdgeInsets)messageEntryContentViewPhotoPluginInsets
{
  if (messageEntryContentViewPhotoPluginInsets_once != -1) {
    dispatch_once(&messageEntryContentViewPhotoPluginInsets_once, &__block_literal_global_1455);
  }
  double v2 = *(double *)&messageEntryContentViewPhotoPluginInsets_sBehavior_0;
  double v3 = *(double *)&messageEntryContentViewPhotoPluginInsets_sBehavior_2;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v3;
  result.double left = v4;
  result.double top = v2;
  return result;
}

void __56__CKUIBehavior_messageEntryContentViewPhotoPluginInsets__block_invoke()
{
  messageEntryContentViewPhotoPluginInsets_sBehavior_0 = 0x4018000000000000;
  messageEntryContentViewPhotoPluginInsets_sBehavior_2 = 0x4014000000000000;
}

- (BOOL)messageEntryViewUsesAbbreviatedServiceNames
{
  if (messageEntryViewUsesAbbreviatedServiceNames_once != -1) {
    dispatch_once(&messageEntryViewUsesAbbreviatedServiceNames_once, &__block_literal_global_1457);
  }
  return 0;
}

- (UIButtonConfiguration)appButtonConfiguration
{
  if (appButtonConfiguration_once != -1) {
    dispatch_once(&appButtonConfiguration_once, &__block_literal_global_1459);
  }
  return 0;
}

- (UIButtonConfiguration)sendButtonConfiguration
{
  if (sendButtonConfiguration_once != -1) {
    dispatch_once(&sendButtonConfiguration_once, &__block_literal_global_1461);
  }
  return 0;
}

- (UIButtonConfiguration)audioButtonConfiguration
{
  if (audioButtonConfiguration_once != -1) {
    dispatch_once(&audioButtonConfiguration_once, &__block_literal_global_1463);
  }
  return 0;
}

- (UIButtonConfiguration)dictationButtonConfiguration
{
  if (dictationButtonConfiguration_once != -1) {
    dispatch_once(&dictationButtonConfiguration_once, &__block_literal_global_1465);
  }
  return 0;
}

- (double)entryViewLinkViewDiscardButtonDiameter
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_entryViewLinkViewDiscardButtonDiameter__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewLinkViewDiscardButtonDiameter_once != -1) {
    dispatch_once(&entryViewLinkViewDiscardButtonDiameter_once, block);
  }
  return *(double *)&entryViewLinkViewDiscardButtonDiameter_sBehavior;
}

uint64_t __54__CKUIBehavior_entryViewLinkViewDiscardButtonDiameter__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) clearPluginButtonSize];
  entryViewLinkViewDiscardButtonDiameter_sBehavior = v2;
  return result;
}

- (double)entryViewLinkViewDiscardButtonEdgeInset
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __55__CKUIBehavior_entryViewLinkViewDiscardButtonEdgeInset__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewLinkViewDiscardButtonEdgeInset_once != -1) {
    dispatch_once(&entryViewLinkViewDiscardButtonEdgeInset_once, block);
  }
  return *(double *)&entryViewLinkViewDiscardButtonEdgeInset_sBehavior;
}

uint64_t __55__CKUIBehavior_entryViewLinkViewDiscardButtonEdgeInset__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _entryViewLinkViewDiscardButtonEdgeInset];
  entryViewLinkViewDiscardButtonEdgeInset_sBehavior = v2;
  return result;
}

- (double)_entryViewLinkViewDiscardButtonEdgeInset
{
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isRichLinkImprovementsEnabled];

  double result = 10.0;
  if (v3) {
    return 8.0;
  }
  return result;
}

- (double)entryViewLinkViewDiscardButtonExtraHitTestPadding
{
  if (entryViewLinkViewDiscardButtonExtraHitTestPadding_once != -1) {
    dispatch_once(&entryViewLinkViewDiscardButtonExtraHitTestPadding_once, &__block_literal_global_1467);
  }
  return *(double *)&entryViewLinkViewDiscardButtonExtraHitTestPadding_sBehavior;
}

void __65__CKUIBehavior_entryViewLinkViewDiscardButtonExtraHitTestPadding__block_invoke()
{
  entryViewLinkViewDiscardButtonExtraHitTestPadding_sBehavior = 0x4032000000000000;
}

- (CGSize)entryViewLinkViewSize
{
  if (entryViewLinkViewSize_once != -1) {
    dispatch_once(&entryViewLinkViewSize_once, &__block_literal_global_1469);
  }
  double v2 = *(double *)&entryViewLinkViewSize_sBehavior_0;
  double v3 = *(double *)&entryViewLinkViewSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __37__CKUIBehavior_entryViewLinkViewSize__block_invoke()
{
  entryViewLinkViewSize_sBehavior_0 = 0x4072C00000000000;
  entryViewLinkViewSize_sBehavior_1 = 0x406A400000000000;
}

- (double)entryViewGenerationButtonDiameter
{
  if (entryViewGenerationButtonDiameter_once != -1) {
    dispatch_once(&entryViewGenerationButtonDiameter_once, &__block_literal_global_1471);
  }
  return *(double *)&entryViewGenerationButtonDiameter_sBehavior;
}

void __49__CKUIBehavior_entryViewGenerationButtonDiameter__block_invoke()
{
  entryViewGenerationButtonDiameter_sBehavior = 0x403A000000000000;
}

- (double)entryViewGenerationButtonMargin
{
  if (entryViewGenerationButtonMargin_once != -1) {
    dispatch_once(&entryViewGenerationButtonMargin_once, &__block_literal_global_1473);
  }
  return *(double *)&entryViewGenerationButtonMargin_sBehavior;
}

void __47__CKUIBehavior_entryViewGenerationButtonMargin__block_invoke()
{
  entryViewGenerationButtonMargin_sBehavior = 0x4014000000000000;
}

- (UIColor)generationButtonRegularBackgroundColor
{
  if (generationButtonRegularBackgroundColor_once != -1) {
    dispatch_once(&generationButtonRegularBackgroundColor_once, &__block_literal_global_1475);
  }
  double v2 = (void *)generationButtonRegularBackgroundColor_sBehavior;

  return (UIColor *)v2;
}

void __54__CKUIBehavior_generationButtonRegularBackgroundColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] colorWithWhite:0.4 alpha:0.9];
  char v1 = (void *)generationButtonRegularBackgroundColor_sBehavior;
  generationButtonRegularBackgroundColor_sBehavior = v0;
}

- (UIColor)generationButtonRegularTintColor
{
  if (generationButtonRegularTintColor_once != -1) {
    dispatch_once(&generationButtonRegularTintColor_once, &__block_literal_global_1477);
  }
  double v2 = (void *)generationButtonRegularTintColor_sBehavior;

  return (UIColor *)v2;
}

void __48__CKUIBehavior_generationButtonRegularTintColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] colorWithWhite:1.0 alpha:0.84];
  char v1 = (void *)generationButtonRegularTintColor_sBehavior;
  generationButtonRegularTintColor_sBehavior = v0;
}

- (UIColor)generationButtonHighlightedBackgroundColor
{
  if (generationButtonHighlightedBackgroundColor_once != -1) {
    dispatch_once(&generationButtonHighlightedBackgroundColor_once, &__block_literal_global_1479);
  }
  double v2 = (void *)generationButtonHighlightedBackgroundColor_sBehavior;

  return (UIColor *)v2;
}

void __58__CKUIBehavior_generationButtonHighlightedBackgroundColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] colorWithRed:0.05 green:0.64 blue:1.0 alpha:0.9];
  char v1 = (void *)generationButtonHighlightedBackgroundColor_sBehavior;
  generationButtonHighlightedBackgroundColor_sBehavior = v0;
}

- (UIColor)generationButtonHighlightedTintColor
{
  if (generationButtonHighlightedTintColor_once != -1) {
    dispatch_once(&generationButtonHighlightedTintColor_once, &__block_literal_global_1481);
  }
  double v2 = (void *)generationButtonHighlightedTintColor_sBehavior;

  return (UIColor *)v2;
}

void __52__CKUIBehavior_generationButtonHighlightedTintColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] colorWithWhite:1.0 alpha:0.98];
  char v1 = (void *)generationButtonHighlightedTintColor_sBehavior;
  generationButtonHighlightedTintColor_sBehavior = v0;
}

- (NSArray)entryViewDashedLinePattern
{
  if (entryViewDashedLinePattern_once != -1) {
    dispatch_once(&entryViewDashedLinePattern_once, &__block_literal_global_1483);
  }
  double v2 = (void *)entryViewDashedLinePattern_sBehavior;

  return (NSArray *)v2;
}

void __42__CKUIBehavior_entryViewDashedLinePattern__block_invoke()
{
  uint64_t v0 = (void *)entryViewDashedLinePattern_sBehavior;
  entryViewDashedLinePattern_sBehavior = (uint64_t)&unk_1EDF15398;
}

- (UIEdgeInsets)messageEntryContentViewSendLaterDateInsets
{
  if (messageEntryContentViewSendLaterDateInsets_once != -1) {
    dispatch_once(&messageEntryContentViewSendLaterDateInsets_once, &__block_literal_global_1485);
  }
  double v2 = *(double *)&messageEntryContentViewSendLaterDateInsets_sBehavior_0;
  double v3 = *(double *)&messageEntryContentViewSendLaterDateInsets_sBehavior_1;
  double v4 = *(double *)&messageEntryContentViewSendLaterDateInsets_sBehavior_2;
  double v5 = *(double *)&messageEntryContentViewSendLaterDateInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __58__CKUIBehavior_messageEntryContentViewSendLaterDateInsets__block_invoke()
{
  messageEntryContentViewSendLaterDateInsets_sBehavior_0 = 0x4024000000000000;
  messageEntryContentViewSendLaterDateInsets_sBehavior_1 = 0x4028000000000000;
  messageEntryContentViewSendLaterDateInsets_sBehavior_2 = 0x4024000000000000;
  messageEntryContentViewSendLaterDateInsets_sBehavior_3 = 0x4028000000000000;
}

- (CGSize)dictationButtonSize
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __35__CKUIBehavior_dictationButtonSize__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (dictationButtonSize_once != -1) {
    dispatch_once(&dictationButtonSize_once, block);
  }
  double v2 = *(double *)&dictationButtonSize_sBehavior_0;
  double v3 = *(double *)&dictationButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

uint64_t __35__CKUIBehavior_dictationButtonSize__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _dictationButtonSize];
  dictationButtonSize_sBehavior_0 = v2;
  dictationButtonSize_sBehavior_1 = v3;
  return result;
}

- (CGSize)_dictationButtonSize
{
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v3 = [v2 isAudioMessagesEntryViewRecordingEnabled];

  double v4 = 22.0;
  double v5 = 22.0;
  if ((v3 & 1) == 0)
  {
    if (CKPixelWidth_once_7 != -1) {
      dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
    }
    double v4 = *(double *)&CKPixelWidth_sPixel_7 + 27.0;
    double v5 = *(double *)&CKPixelWidth_sPixel_7 + 27.0;
  }
  result.double height = v5;
  result.double width = v4;
  return result;
}

- (CGSize)audioButtonSize
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __31__CKUIBehavior_audioButtonSize__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (audioButtonSize_once != -1) {
    dispatch_once(&audioButtonSize_once, block);
  }
  double v2 = *(double *)&audioButtonSize_sBehavior_0;
  double v3 = *(double *)&audioButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

uint64_t __31__CKUIBehavior_audioButtonSize__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _audioButtonSize];
  audioButtonSize_sBehavior_0 = v2;
  audioButtonSize_sBehavior_1 = v3;
  return result;
}

- (CGSize)_audioButtonSize
{
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v3 = [v2 isAudioMessagesEntryViewRecordingEnabled];

  double v4 = 22.0;
  double v5 = 22.0;
  if ((v3 & 1) == 0)
  {
    if (CKPixelWidth_once_7 != -1) {
      dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
    }
    double v4 = *(double *)&CKPixelWidth_sPixel_7 + 20.0;
    double v5 = *(double *)&CKPixelWidth_sPixel_7 + 20.0;
  }
  result.double height = v5;
  result.double width = v4;
  return result;
}

- (CGSize)browserButtonSize
{
  if (browserButtonSize_once != -1) {
    dispatch_once(&browserButtonSize_once, &__block_literal_global_1491);
  }
  double v2 = *(double *)&browserButtonSize_sBehavior_0;
  double v3 = *(double *)&browserButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __33__CKUIBehavior_browserButtonSize__block_invoke()
{
  browserButtonSize_sBehavior_0 = 0x4044800000000000;
  browserButtonSize_sBehavior_1 = 0x4040000000000000;
}

- (double)arrowButtonRightPadding
{
  if (arrowButtonRightPadding_once != -1) {
    dispatch_once(&arrowButtonRightPadding_once, &__block_literal_global_1493);
  }
  return *(double *)&arrowButtonRightPadding_sBehavior;
}

void __39__CKUIBehavior_arrowButtonRightPadding__block_invoke()
{
  arrowButtonRightPadding_sBehavior = 0x4022000000000000;
}

- (BOOL)ckShouldUpdateentryViewTextOneLineHeight
{
  return 0;
}

- (double)entryViewTextOneLineHeight
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v5 = CKUserPreferenceFontSize();
  double v6 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v7 length]) {
    double v8 = v7;
  }
  else {
    double v8 = @"None";
  }
  long double v9 = v8;
  NSComparisonResult v10 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewTextOneLineHeight_sContentSizeCategory_entryViewTextOneLineHeight, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewTextOneLineHeight]
    || v10
    || entryViewTextOneLineHeight_sIsBoldTextEnabled_entryViewTextOneLineHeight != IsBoldTextEnabled
    || (uint64_t v11 = entryViewTextOneLineHeight_sTextFontSize_entryViewTextOneLineHeight,
        *(double *)&entryViewTextOneLineHeight_sTextFontSize_entryViewTextOneLineHeight != v5)
    || (uint64_t v11 = entryViewTextOneLineHeight_sCustomTextFontSize_entryViewTextOneLineHeight,
        *(double *)&entryViewTextOneLineHeight_sCustomTextFontSize_entryViewTextOneLineHeight != v6)
    || (objc_msgSend((id)entryViewTextOneLineHeight_sCustomTextFontName_entryViewTextOneLineHeight, "isEqualToString:", v9, *(double *)&entryViewTextOneLineHeight_sCustomTextFontSize_entryViewTextOneLineHeight) & 1) == 0)
  {
    uint64_t v12 = [(CKUIBehavior *)self balloonTextFont];
    [v12 lineHeight];
    entryViewTextOneLineHeight_sBehavior = v13;

    objc_storeStrong((id *)&entryViewTextOneLineHeight_sContentSizeCategory_entryViewTextOneLineHeight, v3);
    entryViewTextOneLineHeight_sIsBoldTextEnabled_entryViewTextOneLineHeight = IsBoldTextEnabled;
    entryViewTextOneLineHeight_sTextFontSize_entryViewTextOneLineHeight = *(void *)&v5;
    entryViewTextOneLineHeight_sCustomTextFontSize_entryViewTextOneLineHeight = *(void *)&v6;
    objc_storeStrong((id *)&entryViewTextOneLineHeight_sCustomTextFontName_entryViewTextOneLineHeight, v8);
  }
  double v14 = *(double *)&entryViewTextOneLineHeight_sBehavior;

  return v14;
}

- (double)entryViewMaxHeight
{
  if (entryViewMaxHeight_once != -1) {
    dispatch_once(&entryViewMaxHeight_once, &__block_literal_global_1505);
  }
  return *(double *)&entryViewMaxHeight_sBehavior;
}

void __34__CKUIBehavior_entryViewMaxHeight__block_invoke()
{
  entryViewMaxHeight_sBehavior = 0x7FEFFFFFFFFFFFFFLL;
}

- (double)entryViewMaxSendLaterHeight
{
  if (entryViewMaxSendLaterHeight_once != -1) {
    dispatch_once(&entryViewMaxSendLaterHeight_once, &__block_literal_global_1508);
  }
  return *(double *)&entryViewMaxSendLaterHeight_sBehavior;
}

void __43__CKUIBehavior_entryViewMaxSendLaterHeight__block_invoke()
{
  if (CKIsBigIdiom_onceToken != -1) {
    dispatch_once(&CKIsBigIdiom_onceToken, &__block_literal_global_5993);
  }
  double v0 = 33.0;
  if (CKIsBigIdiom_sBig) {
    double v0 = 27.0;
  }
  entryViewMaxSendLaterHeight_sBehavior = *(void *)&v0;
}

- (double)entryViewMaxPluginShelfHeight
{
  if (entryViewMaxPluginShelfHeight_once != -1) {
    dispatch_once(&entryViewMaxPluginShelfHeight_once, &__block_literal_global_1510);
  }
  return *(double *)&entryViewMaxPluginShelfHeight_sBehavior;
}

double __45__CKUIBehavior_entryViewMaxPluginShelfHeight__block_invoke()
{
  if (CKIsBigIdiom_onceToken != -1) {
    dispatch_once(&CKIsBigIdiom_onceToken, &__block_literal_global_5993);
  }
  double result = dbl_18F81CB80[CKIsBigIdiom_sBig == 0];
  entryViewMaxPluginShelfHeight_sBehavior = *(void *)&result;
  return result;
}

- (double)entryViewMaxExtensionShelfHeight
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __48__CKUIBehavior_entryViewMaxExtensionShelfHeight__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewMaxExtensionShelfHeight_once != -1) {
    dispatch_once(&entryViewMaxExtensionShelfHeight_once, block);
  }
  return *(double *)&entryViewMaxExtensionShelfHeight_sBehavior;
}

uint64_t __48__CKUIBehavior_entryViewMaxExtensionShelfHeight__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) maxTranscriptPortraitHeight];
  entryViewMaxExtensionShelfHeight_sBehavior = v2;
  return result;
}

- (double)entryViewMinPluginShelfHeight
{
  if (entryViewMinPluginShelfHeight_once != -1) {
    dispatch_once(&entryViewMinPluginShelfHeight_once, &__block_literal_global_1512);
  }
  return *(double *)&entryViewMinPluginShelfHeight_sBehavior;
}

void __45__CKUIBehavior_entryViewMinPluginShelfHeight__block_invoke()
{
  entryViewMinPluginShelfHeight_sBehavior = 0x4057000000000000;
}

- (double)entryViewMaxHandWritingPluginShelfHeight
{
  if (entryViewMaxHandWritingPluginShelfHeight_once != -1) {
    dispatch_once(&entryViewMaxHandWritingPluginShelfHeight_once, &__block_literal_global_1514);
  }
  return *(double *)&entryViewMaxHandWritingPluginShelfHeight_sBehavior;
}

void __56__CKUIBehavior_entryViewMaxHandWritingPluginShelfHeight__block_invoke()
{
  entryViewMaxHandWritingPluginShelfHeight_sBehavior = 0x405A000000000000;
}

- (double)entryViewAudioButtonCoverSpace
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__CKUIBehavior_entryViewAudioButtonCoverSpace__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewAudioButtonCoverSpace_once != -1) {
    dispatch_once(&entryViewAudioButtonCoverSpace_once, block);
  }
  return *(double *)&entryViewAudioButtonCoverSpace_sBehavior;
}

uint64_t __46__CKUIBehavior_entryViewAudioButtonCoverSpace__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _entryViewAudioButtonCoverSpace];
  entryViewAudioButtonCoverSpace_sBehavior = v2;
  return result;
}

- (double)_entryViewAudioButtonCoverSpace
{
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isAudioMessagesEntryViewRecordingEnabled];

  if (!v3)
  {
    if (CKPixelWidth_once_7 == -1) {
      return *(double *)&CKPixelWidth_sPixel_7 + 4.5;
    }
LABEL_8:
    dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
    return *(double *)&CKPixelWidth_sPixel_7 + 4.5;
  }
  if (CKIsRunningInMacCatalyst())
  {
    if (CKPixelWidth_once_7 == -1) {
      return *(double *)&CKPixelWidth_sPixel_7 + 4.5;
    }
    goto LABEL_8;
  }
  return 10.0;
}

- (double)entryViewDictationButtonCoverSpace
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __50__CKUIBehavior_entryViewDictationButtonCoverSpace__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewDictationButtonCoverSpace_once != -1) {
    dispatch_once(&entryViewDictationButtonCoverSpace_once, block);
  }
  return *(double *)&entryViewDictationButtonCoverSpace_sBehavior;
}

uint64_t __50__CKUIBehavior_entryViewDictationButtonCoverSpace__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _entryViewDictationButtonCoverSpace];
  entryViewDictationButtonCoverSpace_sBehavior = v2;
  return result;
}

- (double)_entryViewDictationButtonCoverSpace
{
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v3 = [v2 isAudioMessagesEntryViewRecordingEnabled];

  double result = 10.0;
  if ((v3 & 1) == 0)
  {
    if (CKPixelWidth_once_7 != -1) {
      dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
    }
    return *(double *)&CKPixelWidth_sPixel_7 + 4.5;
  }
  return result;
}

- (double)entryViewWithSendMenuBottomContentInsetWithKeyboardVisible
{
  if (entryViewWithSendMenuBottomContentInsetWithKeyboardVisible_once != -1) {
    dispatch_once(&entryViewWithSendMenuBottomContentInsetWithKeyboardVisible_once, &__block_literal_global_1518);
  }
  return *(double *)&entryViewWithSendMenuBottomContentInsetWithKeyboardVisible_sBehavior;
}

void __74__CKUIBehavior_entryViewWithSendMenuBottomContentInsetWithKeyboardVisible__block_invoke()
{
  entryViewWithSendMenuBottomContentInsetWithKeyboardVisible_sBehavior = 0x4024000000000000;
}

- (double)entryViewWithSendMenuBottomContentInsetWithoutKeyboardVisible
{
  if (entryViewWithSendMenuBottomContentInsetWithoutKeyboardVisible_once != -1) {
    dispatch_once(&entryViewWithSendMenuBottomContentInsetWithoutKeyboardVisible_once, &__block_literal_global_1520);
  }
  return *(double *)&entryViewWithSendMenuBottomContentInsetWithoutKeyboardVisible_sBehavior;
}

void __77__CKUIBehavior_entryViewWithSendMenuBottomContentInsetWithoutKeyboardVisible__block_invoke()
{
  entryViewWithSendMenuBottomContentInsetWithoutKeyboardVisible_sBehavior = 0x4010000000000000;
}

- (double)entryViewLeftInsetForRecordedAudioCancelButton
{
  if (entryViewLeftInsetForRecordedAudioCancelButton_once != -1) {
    dispatch_once(&entryViewLeftInsetForRecordedAudioCancelButton_once, &__block_literal_global_1522);
  }
  return *(double *)&entryViewLeftInsetForRecordedAudioCancelButton_sBehavior;
}

double __62__CKUIBehavior_entryViewLeftInsetForRecordedAudioCancelButton__block_invoke()
{
  if (CKPixelWidth_once_7 != -1) {
    dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
  }
  double result = *(double *)&CKPixelWidth_sPixel_7 + 8.0;
  *(double *)&entryViewLeftInsetForRecordedAudioCancelButton_sBehavior = *(double *)&CKPixelWidth_sPixel_7 + 8.0;
  return result;
}

- (CGSize)clearPluginButtonSize
{
  if (clearPluginButtonSize_once != -1) {
    dispatch_once(&clearPluginButtonSize_once, &__block_literal_global_1524);
  }
  double v2 = *(double *)&clearPluginButtonSize_sBehavior_0;
  double v3 = *(double *)&clearPluginButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __37__CKUIBehavior_clearPluginButtonSize__block_invoke()
{
  clearPluginButtonSize_sBehavior_0 = 0x4038000000000000;
  clearPluginButtonSize_sBehavior_1 = 0x4038000000000000;
}

- (CGSize)generationPluginButtonSize
{
  if (generationPluginButtonSize_once != -1) {
    dispatch_once(&generationPluginButtonSize_once, &__block_literal_global_1526);
  }
  double v2 = *(double *)&generationPluginButtonSize_sBehavior_0;
  double v3 = *(double *)&generationPluginButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __42__CKUIBehavior_generationPluginButtonSize__block_invoke()
{
  generationPluginButtonSize_sBehavior_0 = 0x4038000000000000;
  generationPluginButtonSize_sBehavior_1 = 0x4038000000000000;
}

- (UIButtonConfiguration)clearPluginButtonConfiguration
{
  if (clearPluginButtonConfiguration_once != -1) {
    dispatch_once(&clearPluginButtonConfiguration_once, &__block_literal_global_1528);
  }
  double v2 = (void *)clearPluginButtonConfiguration_sBehavior;

  return (UIButtonConfiguration *)v2;
}

void __46__CKUIBehavior_clearPluginButtonConfiguration__block_invoke()
{
  double v0 = [MEMORY[0x1E4F427E8] filledButtonConfiguration];
  char v1 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Plugin-Cancel"];
  [v0 setImage:v1];
  double v2 = [MEMORY[0x1E4F428B8] clearColor];
  [v0 setBaseBackgroundColor:v2];

  double v3 = (void *)clearPluginButtonConfiguration_sBehavior;
  clearPluginButtonConfiguration_sBehavior = (uint64_t)v0;
}

- (UIButtonConfiguration)generationPluginButtonConfiguration
{
  if (generationPluginButtonConfiguration_once != -1) {
    dispatch_once(&generationPluginButtonConfiguration_once, &__block_literal_global_1533);
  }
  double v2 = (void *)generationPluginButtonConfiguration_sBehavior;

  return (UIButtonConfiguration *)v2;
}

void __51__CKUIBehavior_generationPluginButtonConfiguration__block_invoke()
{
  double v0 = [MEMORY[0x1E4F427E8] filledButtonConfiguration];
  char v1 = [MEMORY[0x1E4F42A80] systemImageNamed:@"sparkles"];
  [v0 setImage:v1];
  double v2 = [MEMORY[0x1E4F428B8] clearColor];
  [v0 setBaseBackgroundColor:v2];

  double v3 = (void *)generationPluginButtonConfiguration_sBehavior;
  generationPluginButtonConfiguration_sBehavior = (uint64_t)v0;
}

- (double)paddleOverlayRadius
{
  if (paddleOverlayRadius_once != -1) {
    dispatch_once(&paddleOverlayRadius_once, &__block_literal_global_1538);
  }
  return *(double *)&paddleOverlayRadius_sBehavior;
}

void __35__CKUIBehavior_paddleOverlayRadius__block_invoke()
{
  paddleOverlayRadius_sBehavior = 0x402A000000000000;
}

- (double)paddleDividerInset
{
  if (paddleDividerInset_once != -1) {
    dispatch_once(&paddleDividerInset_once, &__block_literal_global_1540);
  }
  return 0.0;
}

- (BOOL)platformSupportsMentioning
{
  if (platformSupportsMentioning_once != -1) {
    dispatch_once(&platformSupportsMentioning_once, &__block_literal_global_1542);
  }
  return platformSupportsMentioning_sBehavior;
}

void __42__CKUIBehavior_platformSupportsMentioning__block_invoke()
{
  platformSupportsMentioning_sBehavior = 1;
}

- (BOOL)ckShouldUpdatecharacterCountSatelliteFont
{
  return 0;
}

- (UIFont)characterCountSatelliteFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)characterCountSatelliteFont_sContentSizeCategory_characterCountSatelliteFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatecharacterCountSatelliteFont]
    || v11
    || characterCountSatelliteFont_sIsIncreaseContrastEnabled_characterCountSatelliteFont != v4
    || characterCountSatelliteFont_sIsBoldTextEnabled_characterCountSatelliteFont != IsBoldTextEnabled
    || *(double *)&characterCountSatelliteFont_sTextFontSize_characterCountSatelliteFont != v6
    || *(double *)&characterCountSatelliteFont_sCustomTextFontSize_characterCountSatelliteFont != v7
    || (objc_msgSend((id)characterCountSatelliteFont_sCustomTextFontName_characterCountSatelliteFont, "isEqualToString:", v10, *(double *)&characterCountSatelliteFont_sCustomTextFontSize_characterCountSatelliteFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_fontForStyle:weight:", *MEMORY[0x1E4F43888], *MEMORY[0x1E4FB09D0]);
    uint64_t v13 = (void *)characterCountSatelliteFont_sBehavior;
    characterCountSatelliteFont_sBehavior = v12;

    objc_storeStrong((id *)&characterCountSatelliteFont_sContentSizeCategory_characterCountSatelliteFont, v3);
    characterCountSatelliteFont_sIsIncreaseContrastEnabled_characterCountSatelliteFont = v4;
    characterCountSatelliteFont_sIsBoldTextEnabled_characterCountSatelliteFont = IsBoldTextEnabled;
    characterCountSatelliteFont_sTextFontSize_characterCountSatelliteFont = *(void *)&v6;
    characterCountSatelliteFont_sCustomTextFontSize_characterCountSatelliteFont = *(void *)&v7;
    objc_storeStrong((id *)&characterCountSatelliteFont_sCustomTextFontName_characterCountSatelliteFont, v9);
  }
  double v14 = (UIFont *)(id)characterCountSatelliteFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdateaudioHintFont
{
  return 0;
}

- (UIFont)audioHintFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)audioHintFont_sContentSizeCategory_audioHintFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaudioHintFont]
    || v11
    || audioHintFont_sIsIncreaseContrastEnabled_audioHintFont != v4
    || audioHintFont_sIsBoldTextEnabled_audioHintFont != IsBoldTextEnabled
    || (uint64_t v12 = audioHintFont_sTextFontSize_audioHintFont, *(double *)&audioHintFont_sTextFontSize_audioHintFont != v6)
    || (uint64_t v12 = audioHintFont_sCustomTextFontSize_audioHintFont,
        *(double *)&audioHintFont_sCustomTextFontSize_audioHintFont != v7)
    || (objc_msgSend((id)audioHintFont_sCustomTextFontName_audioHintFont, "isEqualToString:", v10, *(double *)&audioHintFont_sCustomTextFontSize_audioHintFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    double v14 = (void *)audioHintFont_sBehavior;
    audioHintFont_sBehavior = v13;

    objc_storeStrong((id *)&audioHintFont_sContentSizeCategory_audioHintFont, v3);
    audioHintFont_sIsIncreaseContrastEnabled_audioHintFont = v4;
    audioHintFont_sIsBoldTextEnabled_audioHintFont = IsBoldTextEnabled;
    audioHintFont_sTextFontSize_audioHintFont = *(void *)&v6;
    audioHintFont_sCustomTextFontSize_audioHintFont = *(void *)&v7;
    objc_storeStrong((id *)&audioHintFont_sCustomTextFontName_audioHintFont, v9);
  }
  double v15 = (UIFont *)(id)audioHintFont_sBehavior;

  return v15;
}

- (UIFont)mentionsCellNameFont
{
  double v2 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43890]);
  double v3 = [v2 fontDescriptor];
  int v4 = [v3 fontDescriptorWithSymbolicTraits:0x8000];

  double v5 = (void *)MEMORY[0x1E4FB08E0];
  [v2 pointSize];
  double v6 = objc_msgSend(v5, "fontWithDescriptor:size:", v4);

  return (UIFont *)v6;
}

- (BOOL)ckShouldUpdateentryViewSendButtonName
{
  return 0;
}

- (NSString)entryViewSendButtonName
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewSendButtonName_sContentSizeCategory_entryViewSendButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewSendButtonName]
    || v11
    || entryViewSendButtonName_sIsIncreaseContrastEnabled_entryViewSendButtonName != v4
    || entryViewSendButtonName_sIsBoldTextEnabled_entryViewSendButtonName != IsBoldTextEnabled
    || *(double *)&entryViewSendButtonName_sTextFontSize_entryViewSendButtonName != v6
    || *(double *)&entryViewSendButtonName_sCustomTextFontSize_entryViewSendButtonName != v7
    || (objc_msgSend((id)entryViewSendButtonName_sCustomTextFontName_entryViewSendButtonName, "isEqualToString:", v10, *(double *)&entryViewSendButtonName_sCustomTextFontSize_entryViewSendButtonName) & 1) == 0)
  {
    uint64_t v12 = (void *)entryViewSendButtonName_sBehavior;
    entryViewSendButtonName_sBehavior = @"SendButton";

    objc_storeStrong((id *)&entryViewSendButtonName_sContentSizeCategory_entryViewSendButtonName, v3);
    entryViewSendButtonName_sIsIncreaseContrastEnabled_entryViewSendButtonName = v4;
    entryViewSendButtonName_sIsBoldTextEnabled_entryViewSendButtonName = IsBoldTextEnabled;
    entryViewSendButtonName_sTextFontSize_entryViewSendButtonName = *(void *)&v6;
    entryViewSendButtonName_sCustomTextFontSize_entryViewSendButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewSendButtonName_sCustomTextFontName_entryViewSendButtonName, v9);
  }
  uint64_t v13 = (NSString *)(id)entryViewSendButtonName_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdateentryViewAudioButtonName
{
  return 0;
}

- (NSString)entryViewAudioButtonName
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewAudioButtonName_sContentSizeCategory_entryViewAudioButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewAudioButtonName]
    || v11
    || entryViewAudioButtonName_sIsIncreaseContrastEnabled_entryViewAudioButtonName != v4
    || entryViewAudioButtonName_sIsBoldTextEnabled_entryViewAudioButtonName != IsBoldTextEnabled
    || (uint64_t v12 = entryViewAudioButtonName_sTextFontSize_entryViewAudioButtonName,
        *(double *)&entryViewAudioButtonName_sTextFontSize_entryViewAudioButtonName != v6)
    || (uint64_t v12 = entryViewAudioButtonName_sCustomTextFontSize_entryViewAudioButtonName,
        *(double *)&entryViewAudioButtonName_sCustomTextFontSize_entryViewAudioButtonName != v7)
    || (objc_msgSend((id)entryViewAudioButtonName_sCustomTextFontName_entryViewAudioButtonName, "isEqualToString:", v10, *(double *)&entryViewAudioButtonName_sCustomTextFontSize_entryViewAudioButtonName) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self audioButtonName];
    double v14 = (void *)entryViewAudioButtonName_sBehavior;
    entryViewAudioButtonName_sBehavior = v13;

    objc_storeStrong((id *)&entryViewAudioButtonName_sContentSizeCategory_entryViewAudioButtonName, v3);
    entryViewAudioButtonName_sIsIncreaseContrastEnabled_entryViewAudioButtonName = v4;
    entryViewAudioButtonName_sIsBoldTextEnabled_entryViewAudioButtonName = IsBoldTextEnabled;
    entryViewAudioButtonName_sTextFontSize_entryViewAudioButtonName = *(void *)&v6;
    entryViewAudioButtonName_sCustomTextFontSize_entryViewAudioButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewAudioButtonName_sCustomTextFontName_entryViewAudioButtonName, v9);
  }
  double v15 = (NSString *)(id)entryViewAudioButtonName_sBehavior;

  return v15;
}

- (id)audioButtonName
{
  double v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isAudioMessagesEntryViewRecordingEnabled];

  if (v3) {
    return @"EntryViewWaveformImage";
  }
  else {
    return @"AudioButton";
  }
}

- (BOOL)ckShouldUpdateentryViewArrowButtonName
{
  return 0;
}

- (NSString)entryViewArrowButtonName
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewArrowButtonName_sContentSizeCategory_entryViewArrowButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewArrowButtonName]
    || v11
    || entryViewArrowButtonName_sIsIncreaseContrastEnabled_entryViewArrowButtonName != v4
    || entryViewArrowButtonName_sIsBoldTextEnabled_entryViewArrowButtonName != IsBoldTextEnabled
    || *(double *)&entryViewArrowButtonName_sTextFontSize_entryViewArrowButtonName != v6
    || *(double *)&entryViewArrowButtonName_sCustomTextFontSize_entryViewArrowButtonName != v7
    || (objc_msgSend((id)entryViewArrowButtonName_sCustomTextFontName_entryViewArrowButtonName, "isEqualToString:", v10, *(double *)&entryViewArrowButtonName_sCustomTextFontSize_entryViewArrowButtonName) & 1) == 0)
  {
    uint64_t v12 = (void *)entryViewArrowButtonName_sBehavior;
    entryViewArrowButtonName_sBehavior = @"chevron.forward.square.fill";

    objc_storeStrong((id *)&entryViewArrowButtonName_sContentSizeCategory_entryViewArrowButtonName, v3);
    entryViewArrowButtonName_sIsIncreaseContrastEnabled_entryViewArrowButtonName = v4;
    entryViewArrowButtonName_sIsBoldTextEnabled_entryViewArrowButtonName = IsBoldTextEnabled;
    entryViewArrowButtonName_sTextFontSize_entryViewArrowButtonName = *(void *)&v6;
    entryViewArrowButtonName_sCustomTextFontSize_entryViewArrowButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewArrowButtonName_sCustomTextFontName_entryViewArrowButtonName, v9);
  }
  uint64_t v13 = (NSString *)(id)entryViewArrowButtonName_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdateentryViewPhotoButtonName
{
  return 0;
}

- (NSString)entryViewPhotoButtonName
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewPhotoButtonName_sContentSizeCategory_entryViewPhotoButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewPhotoButtonName]
    || v11
    || entryViewPhotoButtonName_sIsIncreaseContrastEnabled_entryViewPhotoButtonName != v4
    || entryViewPhotoButtonName_sIsBoldTextEnabled_entryViewPhotoButtonName != IsBoldTextEnabled
    || *(double *)&entryViewPhotoButtonName_sTextFontSize_entryViewPhotoButtonName != v6
    || *(double *)&entryViewPhotoButtonName_sCustomTextFontSize_entryViewPhotoButtonName != v7
    || (objc_msgSend((id)entryViewPhotoButtonName_sCustomTextFontName_entryViewPhotoButtonName, "isEqualToString:", v10, *(double *)&entryViewPhotoButtonName_sCustomTextFontSize_entryViewPhotoButtonName) & 1) == 0)
  {
    uint64_t v12 = (void *)entryViewPhotoButtonName_sBehavior;
    entryViewPhotoButtonName_sBehavior = @"camera.fill";

    objc_storeStrong((id *)&entryViewPhotoButtonName_sContentSizeCategory_entryViewPhotoButtonName, v3);
    entryViewPhotoButtonName_sIsIncreaseContrastEnabled_entryViewPhotoButtonName = v4;
    entryViewPhotoButtonName_sIsBoldTextEnabled_entryViewPhotoButtonName = IsBoldTextEnabled;
    entryViewPhotoButtonName_sTextFontSize_entryViewPhotoButtonName = *(void *)&v6;
    entryViewPhotoButtonName_sCustomTextFontSize_entryViewPhotoButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewPhotoButtonName_sCustomTextFontName_entryViewPhotoButtonName, v9);
  }
  uint64_t v13 = (NSString *)(id)entryViewPhotoButtonName_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdateentryViewPlusButtonName
{
  return 0;
}

- (NSString)entryViewPlusButtonName
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewPlusButtonName_sContentSizeCategory_entryViewPlusButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewPlusButtonName]
    || v11
    || entryViewPlusButtonName_sIsIncreaseContrastEnabled_entryViewPlusButtonName != v4
    || entryViewPlusButtonName_sIsBoldTextEnabled_entryViewPlusButtonName != IsBoldTextEnabled
    || *(double *)&entryViewPlusButtonName_sTextFontSize_entryViewPlusButtonName != v6
    || *(double *)&entryViewPlusButtonName_sCustomTextFontSize_entryViewPlusButtonName != v7
    || (objc_msgSend((id)entryViewPlusButtonName_sCustomTextFontName_entryViewPlusButtonName, "isEqualToString:", v10, *(double *)&entryViewPlusButtonName_sCustomTextFontSize_entryViewPlusButtonName) & 1) == 0)
  {
    uint64_t v12 = (void *)entryViewPlusButtonName_sBehavior;
    entryViewPlusButtonName_sBehavior = @"plus.circle.fill";

    objc_storeStrong((id *)&entryViewPlusButtonName_sContentSizeCategory_entryViewPlusButtonName, v3);
    entryViewPlusButtonName_sIsIncreaseContrastEnabled_entryViewPlusButtonName = v4;
    entryViewPlusButtonName_sIsBoldTextEnabled_entryViewPlusButtonName = IsBoldTextEnabled;
    entryViewPlusButtonName_sTextFontSize_entryViewPlusButtonName = *(void *)&v6;
    entryViewPlusButtonName_sCustomTextFontSize_entryViewPlusButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewPlusButtonName_sCustomTextFontName_entryViewPlusButtonName, v9);
  }
  uint64_t v13 = (NSString *)(id)entryViewPlusButtonName_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdateentryViewAppButtonName
{
  return 0;
}

- (NSString)entryViewAppButtonName
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewAppButtonName_sContentSizeCategory_entryViewAppButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewAppButtonName]
    || v11
    || entryViewAppButtonName_sIsIncreaseContrastEnabled_entryViewAppButtonName != v4
    || entryViewAppButtonName_sIsBoldTextEnabled_entryViewAppButtonName != IsBoldTextEnabled
    || *(double *)&entryViewAppButtonName_sTextFontSize_entryViewAppButtonName != v6
    || *(double *)&entryViewAppButtonName_sCustomTextFontSize_entryViewAppButtonName != v7
    || (objc_msgSend((id)entryViewAppButtonName_sCustomTextFontName_entryViewAppButtonName, "isEqualToString:", v10, *(double *)&entryViewAppButtonName_sCustomTextFontSize_entryViewAppButtonName) & 1) == 0)
  {
    uint64_t v12 = (void *)entryViewAppButtonName_sBehavior;
    entryViewAppButtonName_sBehavior = @"appstore.capsule.2.fill";

    objc_storeStrong((id *)&entryViewAppButtonName_sContentSizeCategory_entryViewAppButtonName, v3);
    entryViewAppButtonName_sIsIncreaseContrastEnabled_entryViewAppButtonName = v4;
    entryViewAppButtonName_sIsBoldTextEnabled_entryViewAppButtonName = IsBoldTextEnabled;
    entryViewAppButtonName_sTextFontSize_entryViewAppButtonName = *(void *)&v6;
    entryViewAppButtonName_sCustomTextFontSize_entryViewAppButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewAppButtonName_sCustomTextFontName_entryViewAppButtonName, v9);
  }
  uint64_t v13 = (NSString *)(id)entryViewAppButtonName_sBehavior;

  return v13;
}

- (BOOL)ckShouldUpdateentryViewDictationButtonName
{
  return 0;
}

- (NSString)entryViewDictationButtonName
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewDictationButtonName_sContentSizeCategory_entryViewDictationButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewDictationButtonName]
    || v11
    || entryViewDictationButtonName_sIsIncreaseContrastEnabled_entryViewDictationButtonName != v4
    || entryViewDictationButtonName_sIsBoldTextEnabled_entryViewDictationButtonName != IsBoldTextEnabled
    || (uint64_t v12 = entryViewDictationButtonName_sTextFontSize_entryViewDictationButtonName,
        *(double *)&entryViewDictationButtonName_sTextFontSize_entryViewDictationButtonName != v6)
    || (uint64_t v12 = entryViewDictationButtonName_sCustomTextFontSize_entryViewDictationButtonName,
        *(double *)&entryViewDictationButtonName_sCustomTextFontSize_entryViewDictationButtonName != v7)
    || (objc_msgSend((id)entryViewDictationButtonName_sCustomTextFontName_entryViewDictationButtonName, "isEqualToString:", v10, *(double *)&entryViewDictationButtonName_sCustomTextFontSize_entryViewDictationButtonName) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self dictationButtonName];
    double v14 = (void *)entryViewDictationButtonName_sBehavior;
    entryViewDictationButtonName_sBehavior = v13;

    objc_storeStrong((id *)&entryViewDictationButtonName_sContentSizeCategory_entryViewDictationButtonName, v3);
    entryViewDictationButtonName_sIsIncreaseContrastEnabled_entryViewDictationButtonName = v4;
    entryViewDictationButtonName_sIsBoldTextEnabled_entryViewDictationButtonName = IsBoldTextEnabled;
    entryViewDictationButtonName_sTextFontSize_entryViewDictationButtonName = *(void *)&v6;
    entryViewDictationButtonName_sCustomTextFontSize_entryViewDictationButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewDictationButtonName_sCustomTextFontName_entryViewDictationButtonName, v9);
  }
  double v15 = (NSString *)(id)entryViewDictationButtonName_sBehavior;

  return v15;
}

- (id)dictationButtonName
{
  double v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isAudioMessagesEntryViewRecordingEnabled];

  if (v3) {
    return @"mic.fill";
  }
  else {
    return @"mic";
  }
}

- (BOOL)ckShouldUpdateentryViewKeyboardButtonName
{
  return 0;
}

- (NSString)entryViewKeyboardButtonName
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  NSComparisonResult v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)entryViewKeyboardButtonName_sContentSizeCategory_entryViewKeyboardButtonName, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateentryViewKeyboardButtonName]
    || v11
    || entryViewKeyboardButtonName_sIsIncreaseContrastEnabled_entryViewKeyboardButtonName != v4
    || entryViewKeyboardButtonName_sIsBoldTextEnabled_entryViewKeyboardButtonName != IsBoldTextEnabled
    || *(double *)&entryViewKeyboardButtonName_sTextFontSize_entryViewKeyboardButtonName != v6
    || *(double *)&entryViewKeyboardButtonName_sCustomTextFontSize_entryViewKeyboardButtonName != v7
    || (objc_msgSend((id)entryViewKeyboardButtonName_sCustomTextFontName_entryViewKeyboardButtonName, "isEqualToString:", v10, *(double *)&entryViewKeyboardButtonName_sCustomTextFontSize_entryViewKeyboardButtonName) & 1) == 0)
  {
    uint64_t v12 = (void *)entryViewKeyboardButtonName_sBehavior;
    entryViewKeyboardButtonName_sBehavior = @"keyboard";

    objc_storeStrong((id *)&entryViewKeyboardButtonName_sContentSizeCategory_entryViewKeyboardButtonName, v3);
    entryViewKeyboardButtonName_sIsIncreaseContrastEnabled_entryViewKeyboardButtonName = v4;
    entryViewKeyboardButtonName_sIsBoldTextEnabled_entryViewKeyboardButtonName = IsBoldTextEnabled;
    entryViewKeyboardButtonName_sTextFontSize_entryViewKeyboardButtonName = *(void *)&v6;
    entryViewKeyboardButtonName_sCustomTextFontSize_entryViewKeyboardButtonName = *(void *)&v7;
    objc_storeStrong((id *)&entryViewKeyboardButtonName_sCustomTextFontName_entryViewKeyboardButtonName, v9);
  }
  uint64_t v13 = (NSString *)(id)entryViewKeyboardButtonName_sBehavior;

  return v13;
}

- (UIColor)entryViewDictationButtonColor
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __45__CKUIBehavior_entryViewDictationButtonColor__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewDictationButtonColor_once != -1) {
    dispatch_once(&entryViewDictationButtonColor_once, block);
  }
  return (UIColor *)(id)entryViewDictationButtonColor_sBehavior;
}

void __45__CKUIBehavior_entryViewDictationButtonColor__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _entryViewDictationButtonColor];
  double v2 = (void *)entryViewDictationButtonColor_sBehavior;
  entryViewDictationButtonColor_sBehavior = v1;
}

- (id)_entryViewDictationButtonColor
{
  double v2 = (void *)MEMORY[0x1E4F428B8];
  int v3 = [MEMORY[0x1E4F428B8] colorWithRed:0.705882353 green:0.721568627 blue:0.749019608 alpha:1.0];
  int v4 = [MEMORY[0x1E4F428B8] colorWithRed:0.290196078 green:0.294117647 blue:0.301960784 alpha:1.0];
  double v5 = [v2 dynamicColorWithLightColor:v3 darkColor:v4];

  return v5;
}

- (UIColor)entryViewPlusButtonDefaultBackgroundColor
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __57__CKUIBehavior_entryViewPlusButtonDefaultBackgroundColor__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (entryViewPlusButtonDefaultBackgroundColor_once != -1) {
    dispatch_once(&entryViewPlusButtonDefaultBackgroundColor_once, block);
  }
  return (UIColor *)(id)entryViewPlusButtonDefaultBackgroundColor_sBehavior;
}

void __57__CKUIBehavior_entryViewPlusButtonDefaultBackgroundColor__block_invoke(uint64_t a1)
{
  int v1 = [*(id *)(a1 + 32) entryViewBackgroundShouldUseVariableBlur];
  double v2 = (void *)MEMORY[0x1E4F428B8];
  if (v1)
  {
    int v3 = [MEMORY[0x1E4F428B8] colorWithRed:0.8235 green:0.8275 blue:0.8471 alpha:0.46];
    int v4 = (void *)MEMORY[0x1E4F428B8];
    double v5 = 0.125490196;
    double v6 = 0.129411765;
    double v7 = 0.133333333;
    double v8 = 1.0;
  }
  else
  {
    int v3 = [MEMORY[0x1E4F428B8] colorWithRed:0.8235 green:0.8275 blue:0.8471 alpha:0.5];
    int v4 = (void *)MEMORY[0x1E4F428B8];
    double v5 = 0.243137255;
    double v6 = 0.247058824;
    double v7 = 0.258823529;
    double v8 = 0.5;
  }
  long double v9 = [v4 colorWithRed:v5 green:v6 blue:v7 alpha:v8];
  uint64_t v10 = [v2 dynamicColorWithLightColor:v3 darkColor:v9];

  NSComparisonResult v11 = (void *)entryViewPlusButtonDefaultBackgroundColor_sBehavior;
  entryViewPlusButtonDefaultBackgroundColor_sBehavior = v10;
}

- (UIColor)entryViewPlusButtonSendMenuOpenBackgroundColor
{
  if (entryViewPlusButtonSendMenuOpenBackgroundColor_once != -1) {
    dispatch_once(&entryViewPlusButtonSendMenuOpenBackgroundColor_once, &__block_literal_global_1574);
  }
  double v2 = (void *)entryViewPlusButtonSendMenuOpenBackgroundColor_sBehavior;

  return (UIColor *)v2;
}

void __62__CKUIBehavior_entryViewPlusButtonSendMenuOpenBackgroundColor__block_invoke()
{
  double v0 = (void *)MEMORY[0x1E4F428B8];
  id v4 = [MEMORY[0x1E4F428B8] colorWithRed:1.0 green:1.0 blue:1.0 alpha:1.0];
  int v1 = [MEMORY[0x1E4F428B8] colorWithRed:0.125490196 green:0.125490196 blue:0.125490196 alpha:0.85];
  uint64_t v2 = [v0 dynamicColorWithLightColor:v4 darkColor:v1];
  int v3 = (void *)entryViewPlusButtonSendMenuOpenBackgroundColor_sBehavior;
  entryViewPlusButtonSendMenuOpenBackgroundColor_sBehavior = v2;
}

- (BOOL)ckShouldUpdatesendMenuListItemFont
{
  return 0;
}

- (UIFont)sendMenuListItemFont
{
  CKPreferredContentSizeCategory();
  int v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    long double v9 = v8;
  }
  else {
    long double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)sendMenuListItemFont_sContentSizeCategory_sendMenuListItemFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesendMenuListItemFont]
    || v11
    || sendMenuListItemFont_sIsIncreaseContrastEnabled_sendMenuListItemFont != v4
    || sendMenuListItemFont_sIsBoldTextEnabled_sendMenuListItemFont != IsBoldTextEnabled
    || (uint64_t v12 = sendMenuListItemFont_sTextFontSize_sendMenuListItemFont,
        *(double *)&sendMenuListItemFont_sTextFontSize_sendMenuListItemFont != v6)
    || (uint64_t v12 = sendMenuListItemFont_sCustomTextFontSize_sendMenuListItemFont,
        *(double *)&sendMenuListItemFont_sCustomTextFontSize_sendMenuListItemFont != v7)
    || (objc_msgSend((id)sendMenuListItemFont_sCustomTextFontName_sendMenuListItemFont, "isEqualToString:", v10, *(double *)&sendMenuListItemFont_sCustomTextFontSize_sendMenuListItemFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F42A40], "metricsForTextStyle:", *MEMORY[0x1E4F438F0], *(double *)&v12);
    double v14 = [MEMORY[0x1E4FB08E0] systemFontOfSize:24.0];
    uint64_t v15 = [v13 scaledFontForFont:v14];
    uint64_t v16 = (void *)sendMenuListItemFont_sBehavior;
    sendMenuListItemFont_sBehavior = v15;

    objc_storeStrong((id *)&sendMenuListItemFont_sContentSizeCategory_sendMenuListItemFont, v3);
    sendMenuListItemFont_sIsIncreaseContrastEnabled_sendMenuListItemFont = v4;
    sendMenuListItemFont_sIsBoldTextEnabled_sendMenuListItemFont = IsBoldTextEnabled;
    sendMenuListItemFont_sTextFontSize_sendMenuListItemFont = *(void *)&v6;
    sendMenuListItemFont_sCustomTextFontSize_sendMenuListItemFont = *(void *)&v7;
    objc_storeStrong((id *)&sendMenuListItemFont_sCustomTextFontName_sendMenuListItemFont, v9);
  }
  uint64_t v17 = (UIFont *)(id)sendMenuListItemFont_sBehavior;

  return v17;
}

- (UIColor)sendMenuListItemTextColor
{
  if (sendMenuListItemTextColor_once != -1) {
    dispatch_once(&sendMenuListItemTextColor_once, &__block_literal_global_1576);
  }
  uint64_t v2 = (void *)sendMenuListItemTextColor_sBehavior;

  return (UIColor *)v2;
}

void __41__CKUIBehavior_sendMenuListItemTextColor__block_invoke()
{
  double v0 = (void *)MEMORY[0x1E4F428B8];
  id v5 = [MEMORY[0x1E4F428B8] colorWithRed:0.06 green:0.06 blue:0.06 alpha:1.0];
  int v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v1 colorWithAlphaComponent:0.7];
  uint64_t v3 = [v0 dynamicColorWithLightColor:v5 darkColor:v2];
  int v4 = (void *)sendMenuListItemTextColor_sBehavior;
  sendMenuListItemTextColor_sBehavior = v3;
}

- (CGSize)sendMenuListItemIconSize
{
  if (sendMenuListItemIconSize_once != -1) {
    dispatch_once(&sendMenuListItemIconSize_once, &__block_literal_global_1578);
  }
  double v2 = *(double *)&sendMenuListItemIconSize_sBehavior_0;
  double v3 = *(double *)&sendMenuListItemIconSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __40__CKUIBehavior_sendMenuListItemIconSize__block_invoke()
{
  sendMenuListItemIconSize_sBehavior_0 = 0x404B000000000000;
  sendMenuListItemIconSize_sBehavior_1 = 0x404B000000000000;
}

- (double)sendMenuListItemIconToLabelPadding
{
  if (sendMenuListItemIconToLabelPadding_once != -1) {
    dispatch_once(&sendMenuListItemIconToLabelPadding_once, &__block_literal_global_1580);
  }
  return *(double *)&sendMenuListItemIconToLabelPadding_sBehavior;
}

void __50__CKUIBehavior_sendMenuListItemIconToLabelPadding__block_invoke()
{
  sendMenuListItemIconToLabelPadding_sBehavior = 0x4032000000000000;
}

- (double)sendMenuListItemIconToEdgePadding
{
  if (sendMenuListItemIconToEdgePadding_once != -1) {
    dispatch_once(&sendMenuListItemIconToEdgePadding_once, &__block_literal_global_1582);
  }
  return *(double *)&sendMenuListItemIconToEdgePadding_sBehavior;
}

void __49__CKUIBehavior_sendMenuListItemIconToEdgePadding__block_invoke()
{
  sendMenuListItemIconToEdgePadding_sBehavior = 0x403B000000000000;
}

- (double)sendMenuListItemIconVerticalPadding
{
  if (sendMenuListItemIconVerticalPadding_once != -1) {
    dispatch_once(&sendMenuListItemIconVerticalPadding_once, &__block_literal_global_1584);
  }
  return *(double *)&sendMenuListItemIconVerticalPadding_sBehavior;
}

void __51__CKUIBehavior_sendMenuListItemIconVerticalPadding__block_invoke()
{
  sendMenuListItemIconVerticalPadding_sBehavior = 0x4018000000000000;
}

- (double)sendMenuPreferredNumberOfItemsToDisplayOnOpen
{
  if (sendMenuPreferredNumberOfItemsToDisplayOnOpen_once != -1) {
    dispatch_once(&sendMenuPreferredNumberOfItemsToDisplayOnOpen_once, &__block_literal_global_1586);
  }
  return *(double *)&sendMenuPreferredNumberOfItemsToDisplayOnOpen_sBehavior;
}

void __61__CKUIBehavior_sendMenuPreferredNumberOfItemsToDisplayOnOpen__block_invoke()
{
  sendMenuPreferredNumberOfItemsToDisplayOnOpen_sBehavior = 0x401E666666666666;
}

- (double)sendMenuCollectionViewBottomContentInset
{
  if (sendMenuCollectionViewBottomContentInset_once != -1) {
    dispatch_once(&sendMenuCollectionViewBottomContentInset_once, &__block_literal_global_1588);
  }
  return *(double *)&sendMenuCollectionViewBottomContentInset_sBehavior;
}

void __56__CKUIBehavior_sendMenuCollectionViewBottomContentInset__block_invoke()
{
  sendMenuCollectionViewBottomContentInset_sBehavior = 0x403B000000000000;
}

- (UIColor)sendMenuBackdropBackgroundColor
{
  if (sendMenuBackdropBackgroundColor_once != -1) {
    dispatch_once(&sendMenuBackdropBackgroundColor_once, &__block_literal_global_1590);
  }
  double v2 = (void *)sendMenuBackdropBackgroundColor_sBehavior;

  return (UIColor *)v2;
}

void __47__CKUIBehavior_sendMenuBackdropBackgroundColor__block_invoke()
{
  double v0 = (void *)MEMORY[0x1E4F428B8];
  id v6 = [MEMORY[0x1E4F428B8] whiteColor];
  int v1 = [v6 colorWithAlphaComponent:0.75];
  double v2 = [MEMORY[0x1E4F428B8] blackColor];
  double v3 = [v2 colorWithAlphaComponent:0.85];
  uint64_t v4 = [v0 dynamicColorWithLightColor:v1 darkColor:v3];
  id v5 = (void *)sendMenuBackdropBackgroundColor_sBehavior;
  sendMenuBackdropBackgroundColor_sBehavior = v4;
}

- (NSArray)sendMenuBackdropBackgroundEffects
{
  if (sendMenuBackdropBackgroundEffects_once != -1) {
    dispatch_once(&sendMenuBackdropBackgroundEffects_once, &__block_literal_global_1592);
  }
  double v2 = (void *)sendMenuBackdropBackgroundEffects_sBehavior;

  return (NSArray *)v2;
}

void __49__CKUIBehavior_sendMenuBackdropBackgroundEffects__block_invoke()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  double v0 = [MEMORY[0x1E4F427D8] effectWithBlurRadius:5.3];
  v3[0] = v0;
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];
  double v2 = (void *)sendMenuBackdropBackgroundEffects_sBehavior;
  sendMenuBackdropBackgroundEffects_sBehavior = v1;
}

- (double)sendMenuAppearAnimationIconBlurInitialRadius
{
  if (sendMenuAppearAnimationIconBlurInitialRadius_once != -1) {
    dispatch_once(&sendMenuAppearAnimationIconBlurInitialRadius_once, &__block_literal_global_1594);
  }
  return *(double *)&sendMenuAppearAnimationIconBlurInitialRadius_sBehavior;
}

void __60__CKUIBehavior_sendMenuAppearAnimationIconBlurInitialRadius__block_invoke()
{
  sendMenuAppearAnimationIconBlurInitialRadius_sBehavior = 0x400AAAAAAAAAAAABLL;
}

- (double)sendMenuAppearAnimationTextBlurInitialRadius
{
  if (sendMenuAppearAnimationTextBlurInitialRadius_once != -1) {
    dispatch_once(&sendMenuAppearAnimationTextBlurInitialRadius_once, &__block_literal_global_1596);
  }
  return *(double *)&sendMenuAppearAnimationTextBlurInitialRadius_sBehavior;
}

void __60__CKUIBehavior_sendMenuAppearAnimationTextBlurInitialRadius__block_invoke()
{
  sendMenuAppearAnimationTextBlurInitialRadius_sBehavior = 0x4031000000000000;
}

- (double)sendMenuDismissAnimationIconBlurFinalRadius
{
  if (sendMenuDismissAnimationIconBlurFinalRadius_once != -1) {
    dispatch_once(&sendMenuDismissAnimationIconBlurFinalRadius_once, &__block_literal_global_1598);
  }
  return *(double *)&sendMenuDismissAnimationIconBlurFinalRadius_sBehavior;
}

void __59__CKUIBehavior_sendMenuDismissAnimationIconBlurFinalRadius__block_invoke()
{
  sendMenuDismissAnimationIconBlurFinalRadius_sBehavior = 0x4012AAAAAAAAAAABLL;
}

- (double)sendMenuDismissAnimationTextBlurFinalRadius
{
  if (sendMenuDismissAnimationTextBlurFinalRadius_once != -1) {
    dispatch_once(&sendMenuDismissAnimationTextBlurFinalRadius_once, &__block_literal_global_1600);
  }
  return *(double *)&sendMenuDismissAnimationTextBlurFinalRadius_sBehavior;
}

void __59__CKUIBehavior_sendMenuDismissAnimationTextBlurFinalRadius__block_invoke()
{
  sendMenuDismissAnimationTextBlurFinalRadius_sBehavior = 0x4040AAAAAAAAAAABLL;
}

- (double)sendMenuEntryViewContentWidthMultiplier
{
  if (sendMenuEntryViewContentWidthMultiplier_once != -1) {
    dispatch_once(&sendMenuEntryViewContentWidthMultiplier_once, &__block_literal_global_1602);
  }
  return *(double *)&sendMenuEntryViewContentWidthMultiplier_sBehavior;
}

void __55__CKUIBehavior_sendMenuEntryViewContentWidthMultiplier__block_invoke()
{
  sendMenuEntryViewContentWidthMultiplier_sBehavior = 0x3FE3333333333333;
}

- (double)sendMenuEntryViewHorizontalPositionAdjustment
{
  if (sendMenuEntryViewHorizontalPositionAdjustment_once != -1) {
    dispatch_once(&sendMenuEntryViewHorizontalPositionAdjustment_once, &__block_literal_global_1604);
  }
  return *(double *)&sendMenuEntryViewHorizontalPositionAdjustment_sBehavior;
}

void __61__CKUIBehavior_sendMenuEntryViewHorizontalPositionAdjustment__block_invoke()
{
  sendMenuEntryViewHorizontalPositionAdjustment_sBehavior = 0x4024000000000000;
}

- (double)sendMenuPrototypeCellMaximumWidth
{
  if (sendMenuPrototypeCellMaximumWidth_once != -1) {
    dispatch_once(&sendMenuPrototypeCellMaximumWidth_once, &__block_literal_global_1606);
  }
  return *(double *)&sendMenuPrototypeCellMaximumWidth_sBehavior;
}

void __49__CKUIBehavior_sendMenuPrototypeCellMaximumWidth__block_invoke()
{
  sendMenuPrototypeCellMaximumWidth_sBehavior = 0x4074000000000000;
}

- (int64_t)sendMenuPlusSymbolScale
{
  if (sendMenuPlusSymbolScale_once != -1) {
    dispatch_once(&sendMenuPlusSymbolScale_once, &__block_literal_global_1608);
  }
  if (sendMenuPlusSymbolScale_sBehavior) {
    return 2;
  }
  else {
    return 0;
  }
}

void __39__CKUIBehavior_sendMenuPlusSymbolScale__block_invoke()
{
  sendMenuPlusSymbolScale_sBehavior = 1;
}

- (UIBlurEffect)sendMenuPopoverBlurEffectForPresenting
{
  return (UIBlurEffect *)[MEMORY[0x1E4F427D8] _effectWithBlurRadius:15.0 scale:1.0];
}

- (id)newEntryViewPlusButtonIconImageView
{
  int64_t v2 = [(CKUIBehavior *)self sendMenuPlusSymbolScale];
  double v3 = [MEMORY[0x1E4F42A98] configurationWithPointSize:5 weight:v2 scale:16.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F428B8];
  id v5 = [MEMORY[0x1E4F428B8] colorWithRed:0.580392157 green:0.584313725 blue:0.6 alpha:1.0];
  id v6 = [MEMORY[0x1E4F428B8] colorWithRed:0.517647059 green:0.517647059 blue:0.517647059 alpha:1.0];
  double v7 = [v4 dynamicColorWithLightColor:v5 darkColor:v6];

  double v8 = [MEMORY[0x1E4F42A98] configurationWithHierarchicalColor:v7];
  long double v9 = [v3 configurationByApplyingConfiguration:v8];
  uint64_t v10 = [MEMORY[0x1E4F42A80] systemImageNamed:@"plus" withConfiguration:v9];
  NSComparisonResult v11 = (void *)[objc_alloc(MEMORY[0x1E4F42AA0]) initWithImage:v10];
  [v11 setContentMode:4];

  return v11;
}

- (UIViewPropertyAnimator)sendMenuAppearanceCollectionViewUpdateAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 340.0, 39.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuAppearanceXPositionAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 340.0, 39.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuAppearanceYPositionAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 340.0, 39.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuBackdropAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 50.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuStatusBarAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 443.0, 36.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuPlusButtonPortalViewPositionAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 36.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuSelectionScaleAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 25.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuTextBlurAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 50.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (double)sendMenuTextOpacityAppearanceAnimationDelay
{
  if (sendMenuTextOpacityAppearanceAnimationDelay_once != -1) {
    dispatch_once(&sendMenuTextOpacityAppearanceAnimationDelay_once, &__block_literal_global_1616);
  }
  return *(double *)&sendMenuTextOpacityAppearanceAnimationDelay_sBehavior;
}

void __59__CKUIBehavior_sendMenuTextOpacityAppearanceAnimationDelay__block_invoke()
{
  sendMenuTextOpacityAppearanceAnimationDelay_sBehavior = 0x3F9999999999999ALL;
}

- (UIViewPropertyAnimator)sendMenuIconBlurAppearanceAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 50.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuIconBlurDismissAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 50.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)sendMenuTextBlurDismissAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 50.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)entryViewSendMenuPresentationStateAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 25.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:1.2];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonAppearanceAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 50.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonSymbolDisappearanceOpacityAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 1480.0, 77.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:0.8];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonDismissBlurAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 206.5, 26.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:1.0];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)entryViewSendMenuPlusButtonDismissScaleAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 130.50717, 17.93564, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:1.0];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)entryViewSendMenuContentViewWidthAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 340.0, 39.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:1.2];

  return (UIViewPropertyAnimator *)v3;
}

- (UIViewPropertyAnimator)entryViewSendMenuContentViewWidthDismissAnimator
{
  int64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42E18]), "initWithMass:stiffness:damping:initialVelocity:", 2.0, 300.0, 40.0, 0.0, 0.0);
  double v3 = (void *)[objc_alloc(MEMORY[0x1E4F43008]) initWithDuration:v2 timingParameters:1.2];

  return (UIViewPropertyAnimator *)v3;
}

- (id)appMenuPhotosIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)appMenuEffectsIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)appMenuHashtagImagesIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)appMenuAnimojiStickersIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)appMenuEmojiIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)appMenuApplePayIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)appMenuTapToRadarIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)appMenuAudioMessagesIconForTraitCollection:(id)a3
{
  return 0;
}

- (id)newSendMenuPopoverLayoutConfiguration
{
  int64_t v2 = objc_alloc_init(CKPopoverViewLayoutConfiguration);
  [(CKPopoverViewLayoutConfiguration *)v2 setMaximumHeight:800.0];
  [(CKPopoverViewLayoutConfiguration *)v2 setMinimumSendMenuDimension:200.0];
  [(CKPopoverViewLayoutConfiguration *)v2 setDefaultAppCompactHeight:350.0];
  [(CKPopoverViewLayoutConfiguration *)v2 setMinimumTopSpacing:75.0];
  [(CKPopoverViewLayoutConfiguration *)v2 setPreferredAppWidth:393.0];
  [(CKPopoverViewLayoutConfiguration *)v2 setMinimumTrailingSpacing:250.0];
  return v2;
}

- (UIEdgeInsets)appCardContainerViewControllerChildEdgeInsetsIfPresentedBySendMenuPopover
{
  [(CKUIBehavior *)self sendMenuPopoverPresentingAppCornerRadius];
  double v4 = v3;
  [(CKUIBehavior *)self sendMenuPopoverPresentingAppCornerRadius];
  double v6 = v5;
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = v4;
  result.double right = v8;
  result.double bottom = v6;
  result.double left = v7;
  result.double top = v9;
  return result;
}

- (id)newSendMenuPresentPopoverAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverWidthAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverHeightAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverCenterXAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverCenterYAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverPlusCenterXAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverPlusCenterYAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverPlusIconScaleXAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverPlusIconScaleYAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverPlusIconBlurRadiusAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentPopoverPlusIconOpacityAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (UIColor)sendMenuPresentPopoverBackdropViewBackgroundColor
{
  int64_t v2 = (void *)MEMORY[0x1E4F428B8];
  double v3 = [(CKUIBehavior *)self sendMenuBackdropBackgroundColor];
  double v4 = [MEMORY[0x1E4F428B8] colorWithWhite:0.121568627 alpha:0.86];
  double v5 = [v2 dynamicColorWithLightColor:v3 darkColor:v4];

  return (UIColor *)v5;
}

- (UIVisualEffect)sendMenuPresentPopoverEffect
{
  return (UIVisualEffect *)[MEMORY[0x1E4F427D8] effectWithBlurRadius:24.0];
}

- (id)newSendMenuDismissPopoverAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverWidthAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverHeightAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverCenterXAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverCenterYAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverPlusCenterXAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverPlusCenterYAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverPlusIconScaleXAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverPlusIconScaleYAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverPlusIconBlurRadiusAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuDismissPopoverPlusIconOpacityAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuTransitionToAppAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (double)sendMenuPopoverPresentingAppCornerRadius
{
  return 34.0;
}

- (id)newSendMenuPresentAppInPopoverWidthAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentAppInPopoverHeightAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentAppInPopoverCenterXAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentAppInPopoverCenterYAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)newSendMenuPresentAppInPopoverOpacityAnimator
{
  return (id)objc_claimAutoreleasedReturnValue();
}

- (UIColor)sendMenuPopoverDimmingViewActiveBackgroundColor
{
  int64_t v2 = (void *)MEMORY[0x1E4F428B8];
  double v3 = [MEMORY[0x1E4F428B8] blackColor];
  double v4 = [v3 colorWithAlphaComponent:0.08];
  double v5 = [MEMORY[0x1E4F428B8] blackColor];
  double v6 = [v5 colorWithAlphaComponent:0.36];
  double v7 = [v2 dynamicColorWithLightColor:v4 darkColor:v6];

  return (UIColor *)v7;
}

- (UIColor)sendMenuPopoverDimmingViewInactiveBackgroundColor
{
  return (UIColor *)[MEMORY[0x1E4F428B8] clearColor];
}

- (BOOL)shouldAnimateGifsInPhotoGrid
{
  if (shouldAnimateGifsInPhotoGrid_once != -1) {
    dispatch_once(&shouldAnimateGifsInPhotoGrid_once, &__block_literal_global_1619);
  }
  return shouldAnimateGifsInPhotoGrid_sBehavior;
}

uint64_t __44__CKUIBehavior_shouldAnimateGifsInPhotoGrid__block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  shouldAnimateGifsInPhotoGrid_sBehavior = result ^ 1;
  return result;
}

- (BOOL)detailsSeperatorsFollowLayoutMargins
{
  if (detailsSeperatorsFollowLayoutMargins_once != -1) {
    dispatch_once(&detailsSeperatorsFollowLayoutMargins_once, &__block_literal_global_1624);
  }
  return 0;
}

- (double)dividerHeight
{
  if (dividerHeight_once != -1) {
    dispatch_once(&dividerHeight_once, &__block_literal_global_1626);
  }
  return *(double *)&dividerHeight_sBehavior;
}

double __29__CKUIBehavior_dividerHeight__block_invoke()
{
  if (CKPixelWidth_once_7 != -1) {
    dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
  }
  double result = *(double *)&CKPixelWidth_sPixel_7;
  dividerHeight_sBehavior = CKPixelWidth_sPixel_7;
  return result;
}

- (unint64_t)detailsSectionCount
{
  if (detailsSectionCount_once != -1) {
    dispatch_once(&detailsSectionCount_once, &__block_literal_global_1628);
  }
  if (detailsSectionCount_sBehavior) {
    return 13;
  }
  else {
    return 0;
  }
}

void __35__CKUIBehavior_detailsSectionCount__block_invoke()
{
  detailsSectionCount_sBehavior = 1;
}

- (CGSize)attachmentBrowserDefaultSizeForSquare
{
  if (attachmentBrowserDefaultSizeForSquare_once != -1) {
    dispatch_once(&attachmentBrowserDefaultSizeForSquare_once, &__block_literal_global_1630);
  }
  double v2 = *(double *)&attachmentBrowserDefaultSizeForSquare_sBehavior_0;
  double v3 = *(double *)&attachmentBrowserDefaultSizeForSquare_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __53__CKUIBehavior_attachmentBrowserDefaultSizeForSquare__block_invoke()
{
  attachmentBrowserDefaultSizeForSquare_sBehavior_0 = 0x4052200000000000;
  attachmentBrowserDefaultSizeForSquare_sBehavior_1 = 0x4052200000000000;
}

- (double)attachmentBrowserGridInterItemSpacing
{
  if (attachmentBrowserGridInterItemSpacing_once != -1) {
    dispatch_once(&attachmentBrowserGridInterItemSpacing_once, &__block_literal_global_1632);
  }
  return *(double *)&attachmentBrowserGridInterItemSpacing_sBehavior;
}

void __53__CKUIBehavior_attachmentBrowserGridInterItemSpacing__block_invoke()
{
  attachmentBrowserGridInterItemSpacing_sBehavior = 0x4010000000000000;
}

- (double)attachmentBrowserGridMinimumLineSpacing
{
  if (attachmentBrowserGridMinimumLineSpacing_once != -1) {
    dispatch_once(&attachmentBrowserGridMinimumLineSpacing_once, &__block_literal_global_1634);
  }
  return *(double *)&attachmentBrowserGridMinimumLineSpacing_sBehavior;
}

void __55__CKUIBehavior_attachmentBrowserGridMinimumLineSpacing__block_invoke()
{
  attachmentBrowserGridMinimumLineSpacing_sBehavior = 0x4010000000000000;
}

- (UIEdgeInsets)attachmentBrowserGridSectionInset
{
  if (attachmentBrowserGridSectionInset_once != -1) {
    dispatch_once(&attachmentBrowserGridSectionInset_once, &__block_literal_global_1636);
  }
  double v2 = *(double *)&attachmentBrowserGridSectionInset_sBehavior_0;
  double v3 = *(double *)&attachmentBrowserGridSectionInset_sBehavior_1;
  double v4 = *(double *)&attachmentBrowserGridSectionInset_sBehavior_2;
  double v5 = *(double *)&attachmentBrowserGridSectionInset_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __49__CKUIBehavior_attachmentBrowserGridSectionInset__block_invoke()
{
  attachmentBrowserGridSectionInset_sBehavior_0 = 0x4020000000000000;
  attachmentBrowserGridSectionInset_sBehavior_1 = 0x4020000000000000;
  attachmentBrowserGridSectionInset_sBehavior_2 = 0x4020000000000000;
  attachmentBrowserGridSectionInset_sBehavior_3 = 0x4020000000000000;
}

- (UIEdgeInsets)attachmentBrowserFeedLayoutSectionInset
{
  if (attachmentBrowserFeedLayoutSectionInset_once != -1) {
    dispatch_once(&attachmentBrowserFeedLayoutSectionInset_once, &__block_literal_global_1638);
  }
  double v3 = *((double *)&attachmentBrowserFeedLayoutSectionInset_sBehavior + 1);
  double v2 = *(double *)&attachmentBrowserFeedLayoutSectionInset_sBehavior;
  double v4 = *(double *)&qword_1E924EF08;
  double v5 = unk_1E924EF10;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

__n128 __55__CKUIBehavior_attachmentBrowserFeedLayoutSectionInset__block_invoke()
{
  __n128 result = *(__n128 *)MEMORY[0x1E4F437F8];
  long long v1 = *(_OWORD *)(MEMORY[0x1E4F437F8] + 16);
  attachmentBrowserFeedLayoutSectionInset_sBehavior = *MEMORY[0x1E4F437F8];
  *(_OWORD *)&qword_1E924EF08 = v1;
  return result;
}

- (double)attachmentBrowserHeaderLabelPadding
{
  if (attachmentBrowserHeaderLabelPadding_once != -1) {
    dispatch_once(&attachmentBrowserHeaderLabelPadding_once, &__block_literal_global_1640);
  }
  return *(double *)&attachmentBrowserHeaderLabelPadding_sBehavior;
}

void __51__CKUIBehavior_attachmentBrowserHeaderLabelPadding__block_invoke()
{
  attachmentBrowserHeaderLabelPadding_sBehavior = 0x4020000000000000;
}

- (double)photoPickerPopoverWidth
{
  if (photoPickerPopoverWidth_once != -1) {
    dispatch_once(&photoPickerPopoverWidth_once, &__block_literal_global_1642);
  }
  return 0.0;
}

- (unint64_t)numberOfButtonsInPhotoPicker
{
  if (numberOfButtonsInPhotoPicker_once != -1) {
    dispatch_once(&numberOfButtonsInPhotoPicker_once, &__block_literal_global_1644);
  }
  if (numberOfButtonsInPhotoPicker_sBehavior) {
    return 3;
  }
  else {
    return 0;
  }
}

void __44__CKUIBehavior_numberOfButtonsInPhotoPicker__block_invoke()
{
  numberOfButtonsInPhotoPicker_sBehavior = 1;
}

- (unint64_t)numberOfAssetsInPhotoPicker
{
  if (numberOfAssetsInPhotoPicker_once != -1) {
    dispatch_once(&numberOfAssetsInPhotoPicker_once, &__block_literal_global_1646);
  }
  if (numberOfAssetsInPhotoPicker_sBehavior) {
    return 50;
  }
  else {
    return 0;
  }
}

void __43__CKUIBehavior_numberOfAssetsInPhotoPicker__block_invoke()
{
  numberOfAssetsInPhotoPicker_sBehavior = 1;
}

- (double)photoPickerInterItemSpacing
{
  if (photoPickerInterItemSpacing_once != -1) {
    dispatch_once(&photoPickerInterItemSpacing_once, &__block_literal_global_1648_0);
  }
  return *(double *)&photoPickerInterItemSpacing_sBehavior;
}

void __43__CKUIBehavior_photoPickerInterItemSpacing__block_invoke()
{
  photoPickerInterItemSpacing_sBehavior = 0x4014000000000000;
}

- (UIEdgeInsets)photoPickerSectionInsets
{
  if (photoPickerSectionInsets_once != -1) {
    dispatch_once(&photoPickerSectionInsets_once, &__block_literal_global_1650);
  }
  double v2 = *(double *)&photoPickerSectionInsets_sBehavior_0;
  double v3 = *(double *)&photoPickerSectionInsets_sBehavior_1;
  double v4 = *(double *)&photoPickerSectionInsets_sBehavior_2;
  double v5 = *(double *)&photoPickerSectionInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __40__CKUIBehavior_photoPickerSectionInsets__block_invoke()
{
  photoPickerSectionInsets_sBehavior_0 = 0x4014000000000000;
  photoPickerSectionInsets_sBehavior_1 = 0x4014000000000000;
  photoPickerSectionInsets_sBehavior_2 = 0x4014000000000000;
  photoPickerSectionInsets_sBehavior_3 = 0x4014000000000000;
}

- (UIImage)livePhotoBadgeImage
{
  if (livePhotoBadgeImage_once != -1) {
    dispatch_once(&livePhotoBadgeImage_once, &__block_literal_global_1652);
  }
  double v2 = (void *)livePhotoBadgeImage_sBehavior;

  return (UIImage *)v2;
}

void __35__CKUIBehavior_livePhotoBadgeImage__block_invoke()
{
  id v5 = [MEMORY[0x1E4F42A80] systemImageNamed:@"livephoto"];
  double v0 = (void *)MEMORY[0x1E4F42A98];
  long long v1 = [MEMORY[0x1E4F428B8] whiteColor];
  double v2 = [v0 configurationWithHierarchicalColor:v1];
  uint64_t v3 = [v5 imageWithSymbolConfiguration:v2];
  double v4 = (void *)livePhotoBadgeImage_sBehavior;
  livePhotoBadgeImage_sBehavior = v3;
}

- (BOOL)photoPickerShouldZoomOnSelection
{
  return (unint64_t)([(id)*MEMORY[0x1E4F43630] statusBarOrientation] - 5) < 0xFFFFFFFFFFFFFFFELL;
}

- (BOOL)photoPickerUsesVitality
{
  if (photoPickerUsesVitality_once != -1) {
    dispatch_once(&photoPickerUsesVitality_once, &__block_literal_global_1657);
  }
  return 0;
}

- (double)photoPickerMaxPhotoWidthForAlertWidth:(double)a3
{
  [(CKUIBehavior *)self photoPickerSectionInsets];
  return a3 - (v4 + v5);
}

- (double)photoPickerMaxZoomedPhotoHeightForAlertWidth:(double)a3
{
  [(CKUIBehavior *)self photoPickerMaxPhotoWidthForAlertWidth:a3];
  return v3 * 0.25 * 3.0;
}

- (double)photoPickerMaxPopoverPhotoHeight
{
  if (photoPickerMaxPopoverPhotoHeight_once != -1) {
    dispatch_once(&photoPickerMaxPopoverPhotoHeight_once, &__block_literal_global_1659);
  }
  return 0.0;
}

- (double)photoPickerMaxPhotoHeight
{
  if (photoPickerMaxPhotoHeight_once != -1) {
    dispatch_once(&photoPickerMaxPhotoHeight_once, &__block_literal_global_1661);
  }
  return *(double *)&photoPickerMaxPhotoHeight_sBehavior;
}

void __41__CKUIBehavior_photoPickerMaxPhotoHeight__block_invoke()
{
  photoPickerMaxPhotoHeight_sBehavior = 0x4060200000000000;
}

- (BOOL)usesFannedBubbleStyle
{
  if (usesFannedBubbleStyle_once != -1) {
    dispatch_once(&usesFannedBubbleStyle_once, &__block_literal_global_1663);
  }
  return usesFannedBubbleStyle_sBehavior;
}

void __37__CKUIBehavior_usesFannedBubbleStyle__block_invoke()
{
  usesFannedBubbleStyle_sBehavior = 1;
}

- (UIEdgeInsets)tapbackEmojiTailGlyphInsets
{
  if (tapbackEmojiTailGlyphInsets_once != -1) {
    dispatch_once(&tapbackEmojiTailGlyphInsets_once, &__block_literal_global_1665);
  }
  double v2 = *(double *)&tapbackEmojiTailGlyphInsets_sBehavior_0;
  double v3 = *(double *)&tapbackEmojiTailGlyphInsets_sBehavior_1;
  double v4 = *(double *)&tapbackEmojiTailGlyphInsets_sBehavior_2;
  double v5 = *(double *)&tapbackEmojiTailGlyphInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __43__CKUIBehavior_tapbackEmojiTailGlyphInsets__block_invoke()
{
  tapbackEmojiTailGlyphInsets_sBehavior_0 = 0x402C000000000000;
  tapbackEmojiTailGlyphInsets_sBehavior_1 = 0x402C000000000000;
  tapbackEmojiTailGlyphInsets_sBehavior_2 = 0x402C000000000000;
  tapbackEmojiTailGlyphInsets_sBehavior_3 = 0x402C000000000000;
}

- (UIEdgeInsets)tapbackEmojiInputGlyphInsets
{
  if (tapbackEmojiInputGlyphInsets_once != -1) {
    dispatch_once(&tapbackEmojiInputGlyphInsets_once, &__block_literal_global_1667);
  }
  double v2 = *(double *)&tapbackEmojiInputGlyphInsets_sBehavior_0;
  double v3 = *(double *)&tapbackEmojiInputGlyphInsets_sBehavior_1;
  double v4 = *(double *)&tapbackEmojiInputGlyphInsets_sBehavior_2;
  double v5 = *(double *)&tapbackEmojiInputGlyphInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __44__CKUIBehavior_tapbackEmojiInputGlyphInsets__block_invoke()
{
  tapbackEmojiInputGlyphInsets_sBehavior_0 = 0x4031000000000000;
  tapbackEmojiInputGlyphInsets_sBehavior_1 = 0x4031000000000000;
  tapbackEmojiInputGlyphInsets_sBehavior_2 = 0x4031000000000000;
  tapbackEmojiInputGlyphInsets_sBehavior_3 = 0x4031000000000000;
}

- (UIEdgeInsets)tapbackQuickLookSourcePointInsets
{
  if (tapbackQuickLookSourcePointInsets_once != -1) {
    dispatch_once(&tapbackQuickLookSourcePointInsets_once, &__block_literal_global_1669);
  }
  double v2 = *(double *)&tapbackQuickLookSourcePointInsets_sBehavior_0;
  double v3 = *(double *)&tapbackQuickLookSourcePointInsets_sBehavior_1;
  double v4 = *(double *)&tapbackQuickLookSourcePointInsets_sBehavior_2;
  double v5 = *(double *)&tapbackQuickLookSourcePointInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __49__CKUIBehavior_tapbackQuickLookSourcePointInsets__block_invoke()
{
  tapbackQuickLookSourcePointInsets_sBehavior_0 = 0xC028000000000000;
  tapbackQuickLookSourcePointInsets_sBehavior_1 = 0xC048000000000000;
  tapbackQuickLookSourcePointInsets_sBehavior_2 = 0x4028000000000000;
  tapbackQuickLookSourcePointInsets_sBehavior_3 = 0x4048000000000000;
}

- (UIEdgeInsets)tapbackCancelButtonGlyphInsets
{
  if (tapbackCancelButtonGlyphInsets_once != -1) {
    dispatch_once(&tapbackCancelButtonGlyphInsets_once, &__block_literal_global_1671);
  }
  double v2 = *(double *)&tapbackCancelButtonGlyphInsets_sBehavior_0;
  double v3 = *(double *)&tapbackCancelButtonGlyphInsets_sBehavior_1;
  double v4 = *(double *)&tapbackCancelButtonGlyphInsets_sBehavior_2;
  double v5 = *(double *)&tapbackCancelButtonGlyphInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __46__CKUIBehavior_tapbackCancelButtonGlyphInsets__block_invoke()
{
  tapbackCancelButtonGlyphInsets_sBehavior_0 = 0x4030000000000000;
  tapbackCancelButtonGlyphInsets_sBehavior_1 = 0x4030000000000000;
  tapbackCancelButtonGlyphInsets_sBehavior_2 = 0x4030000000000000;
  tapbackCancelButtonGlyphInsets_sBehavior_3 = 0x4030000000000000;
}

- (double)tapbackDismissalDuration
{
  if (tapbackDismissalDuration_once != -1) {
    dispatch_once(&tapbackDismissalDuration_once, &__block_literal_global_1673);
  }
  return *(double *)&tapbackDismissalDuration_sBehavior;
}

void __40__CKUIBehavior_tapbackDismissalDuration__block_invoke()
{
  tapbackDismissalDuration_sBehavior = 0x3FE0000000000000;
}

- (double)emojiTapbackScaleFactor
{
  if (emojiTapbackScaleFactor_once != -1) {
    dispatch_once(&emojiTapbackScaleFactor_once, &__block_literal_global_1675);
  }
  return *(double *)&emojiTapbackScaleFactor_sBehavior;
}

void __39__CKUIBehavior_emojiTapbackScaleFactor__block_invoke()
{
  emojiTapbackScaleFactor_sBehavior = 0x3FEA000000000000;
}

- (UIImage)replyImage
{
  if (replyImage_once != -1) {
    dispatch_once(&replyImage_once, &__block_literal_global_1677);
  }
  double v2 = (void *)replyImage_sBehavior;

  return (UIImage *)v2;
}

void __26__CKUIBehavior_replyImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"arrowshape.turn.up.left"];
  long long v1 = (void *)replyImage_sBehavior;
  replyImage_sBehavior = v0;
}

- (double)welcomeViewContentViewLeadingAnchorLayoutConstraintConstant
{
  return 20.0;
}

- (double)welcomeViewContentViewTopAnchorLayoutConstraintConstant
{
  return 45.0;
}

- (double)onBoardingKitWelcomeControllerHeaderViewIconSize
{
  return 80.0;
}

- (BOOL)ckShouldUpdatewelcomeViewCancelButtonFont
{
  return 0;
}

- (UIFont)welcomeViewCancelButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)welcomeViewCancelButtonFont_sContentSizeCategory_welcomeViewCancelButtonFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatewelcomeViewCancelButtonFont]
    || v11
    || welcomeViewCancelButtonFont_sIsIncreaseContrastEnabled_welcomeViewCancelButtonFont != v4
    || welcomeViewCancelButtonFont_sIsBoldTextEnabled_welcomeViewCancelButtonFont != IsBoldTextEnabled
    || (uint64_t v12 = welcomeViewCancelButtonFont_sTextFontSize_welcomeViewCancelButtonFont,
        *(double *)&welcomeViewCancelButtonFont_sTextFontSize_welcomeViewCancelButtonFont != v6)
    || (uint64_t v12 = welcomeViewCancelButtonFont_sCustomTextFontSize_welcomeViewCancelButtonFont,
        *(double *)&welcomeViewCancelButtonFont_sCustomTextFontSize_welcomeViewCancelButtonFont != v7)
    || (objc_msgSend((id)welcomeViewCancelButtonFont_sCustomTextFontName_welcomeViewCancelButtonFont, "isEqualToString:", v10, *(double *)&welcomeViewCancelButtonFont_sCustomTextFontSize_welcomeViewCancelButtonFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F438A0], *(double *)&v12);
    double v14 = (void *)welcomeViewCancelButtonFont_sBehavior;
    welcomeViewCancelButtonFont_sBehavior = v13;

    objc_storeStrong((id *)&welcomeViewCancelButtonFont_sContentSizeCategory_welcomeViewCancelButtonFont, v3);
    welcomeViewCancelButtonFont_sIsIncreaseContrastEnabled_welcomeViewCancelButtonFont = v4;
    welcomeViewCancelButtonFont_sIsBoldTextEnabled_welcomeViewCancelButtonFont = IsBoldTextEnabled;
    welcomeViewCancelButtonFont_sTextFontSize_welcomeViewCancelButtonFont = *(void *)&v6;
    welcomeViewCancelButtonFont_sCustomTextFontSize_welcomeViewCancelButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&welcomeViewCancelButtonFont_sCustomTextFontName_welcomeViewCancelButtonFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)welcomeViewCancelButtonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatewelcomeViewConfirmButtonFont
{
  return 0;
}

- (UIFont)welcomeViewConfirmButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)welcomeViewConfirmButtonFont_sContentSizeCategory_welcomeViewConfirmButtonFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatewelcomeViewConfirmButtonFont]
    || v11
    || welcomeViewConfirmButtonFont_sIsIncreaseContrastEnabled_welcomeViewConfirmButtonFont != v4
    || welcomeViewConfirmButtonFont_sIsBoldTextEnabled_welcomeViewConfirmButtonFont != IsBoldTextEnabled
    || (uint64_t v12 = welcomeViewConfirmButtonFont_sTextFontSize_welcomeViewConfirmButtonFont,
        *(double *)&welcomeViewConfirmButtonFont_sTextFontSize_welcomeViewConfirmButtonFont != v6)
    || (uint64_t v12 = welcomeViewConfirmButtonFont_sCustomTextFontSize_welcomeViewConfirmButtonFont,
        *(double *)&welcomeViewConfirmButtonFont_sCustomTextFontSize_welcomeViewConfirmButtonFont != v7)
    || (objc_msgSend((id)welcomeViewConfirmButtonFont_sCustomTextFontName_welcomeViewConfirmButtonFont, "isEqualToString:", v10, *(double *)&welcomeViewConfirmButtonFont_sCustomTextFontSize_welcomeViewConfirmButtonFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F438A8], *(double *)&v12);
    double v14 = (void *)welcomeViewConfirmButtonFont_sBehavior;
    welcomeViewConfirmButtonFont_sBehavior = v13;

    objc_storeStrong((id *)&welcomeViewConfirmButtonFont_sContentSizeCategory_welcomeViewConfirmButtonFont, v3);
    welcomeViewConfirmButtonFont_sIsIncreaseContrastEnabled_welcomeViewConfirmButtonFont = v4;
    welcomeViewConfirmButtonFont_sIsBoldTextEnabled_welcomeViewConfirmButtonFont = IsBoldTextEnabled;
    welcomeViewConfirmButtonFont_sTextFontSize_welcomeViewConfirmButtonFont = *(void *)&v6;
    welcomeViewConfirmButtonFont_sCustomTextFontSize_welcomeViewConfirmButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&welcomeViewConfirmButtonFont_sCustomTextFontName_welcomeViewConfirmButtonFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)welcomeViewConfirmButtonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatewelcomeViewTitleLabelFont
{
  return 0;
}

- (UIFont)welcomeViewTitleLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)welcomeViewTitleLabelFont_sContentSizeCategory_welcomeViewTitleLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatewelcomeViewTitleLabelFont]
    || v11
    || welcomeViewTitleLabelFont_sIsIncreaseContrastEnabled_welcomeViewTitleLabelFont != v4
    || welcomeViewTitleLabelFont_sIsBoldTextEnabled_welcomeViewTitleLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = welcomeViewTitleLabelFont_sTextFontSize_welcomeViewTitleLabelFont,
        *(double *)&welcomeViewTitleLabelFont_sTextFontSize_welcomeViewTitleLabelFont != v6)
    || (uint64_t v12 = welcomeViewTitleLabelFont_sCustomTextFontSize_welcomeViewTitleLabelFont,
        *(double *)&welcomeViewTitleLabelFont_sCustomTextFontSize_welcomeViewTitleLabelFont != v7)
    || (objc_msgSend((id)welcomeViewTitleLabelFont_sCustomTextFontName_welcomeViewTitleLabelFont, "isEqualToString:", v10, *(double *)&welcomeViewTitleLabelFont_sCustomTextFontSize_welcomeViewTitleLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortEmphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F438E0], *(double *)&v12);
    double v14 = (void *)welcomeViewTitleLabelFont_sBehavior;
    welcomeViewTitleLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&welcomeViewTitleLabelFont_sContentSizeCategory_welcomeViewTitleLabelFont, v3);
    welcomeViewTitleLabelFont_sIsIncreaseContrastEnabled_welcomeViewTitleLabelFont = v4;
    welcomeViewTitleLabelFont_sIsBoldTextEnabled_welcomeViewTitleLabelFont = IsBoldTextEnabled;
    welcomeViewTitleLabelFont_sTextFontSize_welcomeViewTitleLabelFont = *(void *)&v6;
    welcomeViewTitleLabelFont_sCustomTextFontSize_welcomeViewTitleLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&welcomeViewTitleLabelFont_sCustomTextFontName_welcomeViewTitleLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)welcomeViewTitleLabelFont_sBehavior;

  return v15;
}

- (double)whatsNewViewBulletPointSymbolLeadingAnchorLayoutConstraintConstant
{
  return 20.0;
}

- (double)whatsNewViewBulletPointTextTrailingAnchorLayoutConstraintConstant
{
  return 20.0;
}

- (BOOL)ckShouldUpdatewhatsNewViewBulletPointSymbolLabelFont
{
  return 0;
}

- (UIFont)whatsNewViewBulletPointSymbolLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)whatsNewViewBulletPointSymbolLabelFont_sContentSizeCategory_whatsNewViewBulletPointSymbolLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatewhatsNewViewBulletPointSymbolLabelFont](self, "ckShouldUpdatewhatsNewViewBulletPointSymbolLabelFont")|| v11|| whatsNewViewBulletPointSymbolLabelFont_sIsIncreaseContrastEnabled_whatsNewViewBulletPointSymbolLabelFont != v4|| whatsNewViewBulletPointSymbolLabelFont_sIsBoldTextEnabled_whatsNewViewBulletPointSymbolLabelFont != IsBoldTextEnabled|| (uint64_t v12 = whatsNewViewBulletPointSymbolLabelFont_sTextFontSize_whatsNewViewBulletPointSymbolLabelFont, *(double *)&whatsNewViewBulletPointSymbolLabelFont_sTextFontSize_whatsNewViewBulletPointSymbolLabelFont != v6)|| (uint64_t v12 = whatsNewViewBulletPointSymbolLabelFont_sCustomTextFontSize_whatsNewViewBulletPointSymbolLabelFont, *(double *)&whatsNewViewBulletPointSymbolLabelFont_sCustomTextFontSize_whatsNewViewBulletPointSymbolLabelFont != v7)|| (objc_msgSend((id)whatsNewViewBulletPointSymbolLabelFont_sCustomTextFontName_whatsNewViewBulletPointSymbolLabelFont, "isEqualToString:", v10, *(double *)&whatsNewViewBulletPointSymbolLabelFont_sCustomTextFontSize_whatsNewViewBulletPointSymbolLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    double v14 = (void *)whatsNewViewBulletPointSymbolLabelFont_sBehavior;
    whatsNewViewBulletPointSymbolLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&whatsNewViewBulletPointSymbolLabelFont_sContentSizeCategory_whatsNewViewBulletPointSymbolLabelFont, v3);
    whatsNewViewBulletPointSymbolLabelFont_sIsIncreaseContrastEnabled_whatsNewViewBulletPointSymbolLabelFont = v4;
    whatsNewViewBulletPointSymbolLabelFont_sIsBoldTextEnabled_whatsNewViewBulletPointSymbolLabelFont = IsBoldTextEnabled;
    whatsNewViewBulletPointSymbolLabelFont_sTextFontSize_whatsNewViewBulletPointSymbolLabelFont = *(void *)&v6;
    whatsNewViewBulletPointSymbolLabelFont_sCustomTextFontSize_whatsNewViewBulletPointSymbolLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&whatsNewViewBulletPointSymbolLabelFont_sCustomTextFontName_whatsNewViewBulletPointSymbolLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)whatsNewViewBulletPointSymbolLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatewhatsNewViewBulletPointTextLabelFont
{
  return 0;
}

- (UIFont)whatsNewViewBulletPointTextLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)whatsNewViewBulletPointTextLabelFont_sContentSizeCategory_whatsNewViewBulletPointTextLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatewhatsNewViewBulletPointTextLabelFont](self, "ckShouldUpdatewhatsNewViewBulletPointTextLabelFont")|| v11|| whatsNewViewBulletPointTextLabelFont_sIsIncreaseContrastEnabled_whatsNewViewBulletPointTextLabelFont != v4|| whatsNewViewBulletPointTextLabelFont_sIsBoldTextEnabled_whatsNewViewBulletPointTextLabelFont != IsBoldTextEnabled|| (uint64_t v12 = whatsNewViewBulletPointTextLabelFont_sTextFontSize_whatsNewViewBulletPointTextLabelFont, *(double *)&whatsNewViewBulletPointTextLabelFont_sTextFontSize_whatsNewViewBulletPointTextLabelFont != v6)|| (uint64_t v12 = whatsNewViewBulletPointTextLabelFont_sCustomTextFontSize_whatsNewViewBulletPointTextLabelFont, *(double *)&whatsNewViewBulletPointTextLabelFont_sCustomTextFontSize_whatsNewViewBulletPointTextLabelFont != v7)|| (objc_msgSend((id)whatsNewViewBulletPointTextLabelFont_sCustomTextFontName_whatsNewViewBulletPointTextLabelFont, "isEqualToString:", v10, *(double *)&whatsNewViewBulletPointTextLabelFont_sCustomTextFontSize_whatsNewViewBulletPointTextLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    double v14 = (void *)whatsNewViewBulletPointTextLabelFont_sBehavior;
    whatsNewViewBulletPointTextLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&whatsNewViewBulletPointTextLabelFont_sContentSizeCategory_whatsNewViewBulletPointTextLabelFont, v3);
    whatsNewViewBulletPointTextLabelFont_sIsIncreaseContrastEnabled_whatsNewViewBulletPointTextLabelFont = v4;
    whatsNewViewBulletPointTextLabelFont_sIsBoldTextEnabled_whatsNewViewBulletPointTextLabelFont = IsBoldTextEnabled;
    whatsNewViewBulletPointTextLabelFont_sTextFontSize_whatsNewViewBulletPointTextLabelFont = *(void *)&v6;
    whatsNewViewBulletPointTextLabelFont_sCustomTextFontSize_whatsNewViewBulletPointTextLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&whatsNewViewBulletPointTextLabelFont_sCustomTextFontName_whatsNewViewBulletPointTextLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)whatsNewViewBulletPointTextLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatewhatsNewViewDescriptionLabelFont
{
  return 0;
}

- (UIFont)whatsNewViewDescriptionLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)whatsNewViewDescriptionLabelFont_sContentSizeCategory_whatsNewViewDescriptionLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatewhatsNewViewDescriptionLabelFont](self, "ckShouldUpdatewhatsNewViewDescriptionLabelFont")|| v11|| whatsNewViewDescriptionLabelFont_sIsIncreaseContrastEnabled_whatsNewViewDescriptionLabelFont != v4|| whatsNewViewDescriptionLabelFont_sIsBoldTextEnabled_whatsNewViewDescriptionLabelFont != IsBoldTextEnabled|| (uint64_t v12 = whatsNewViewDescriptionLabelFont_sTextFontSize_whatsNewViewDescriptionLabelFont, *(double *)&whatsNewViewDescriptionLabelFont_sTextFontSize_whatsNewViewDescriptionLabelFont != v6)|| (uint64_t v12 = whatsNewViewDescriptionLabelFont_sCustomTextFontSize_whatsNewViewDescriptionLabelFont, *(double *)&whatsNewViewDescriptionLabelFont_sCustomTextFontSize_whatsNewViewDescriptionLabelFont != v7)|| (objc_msgSend((id)whatsNewViewDescriptionLabelFont_sCustomTextFontName_whatsNewViewDescriptionLabelFont, "isEqualToString:", v10, *(double *)&whatsNewViewDescriptionLabelFont_sCustomTextFontSize_whatsNewViewDescriptionLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortEmphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    double v14 = (void *)whatsNewViewDescriptionLabelFont_sBehavior;
    whatsNewViewDescriptionLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&whatsNewViewDescriptionLabelFont_sContentSizeCategory_whatsNewViewDescriptionLabelFont, v3);
    whatsNewViewDescriptionLabelFont_sIsIncreaseContrastEnabled_whatsNewViewDescriptionLabelFont = v4;
    whatsNewViewDescriptionLabelFont_sIsBoldTextEnabled_whatsNewViewDescriptionLabelFont = IsBoldTextEnabled;
    whatsNewViewDescriptionLabelFont_sTextFontSize_whatsNewViewDescriptionLabelFont = *(void *)&v6;
    whatsNewViewDescriptionLabelFont_sCustomTextFontSize_whatsNewViewDescriptionLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&whatsNewViewDescriptionLabelFont_sCustomTextFontName_whatsNewViewDescriptionLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)whatsNewViewDescriptionLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatewhatsNewFeatureViewTitleLabelFont
{
  return 0;
}

- (UIFont)whatsNewFeatureViewTitleLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)whatsNewFeatureViewTitleLabelFont_sContentSizeCategory_whatsNewFeatureViewTitleLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatewhatsNewFeatureViewTitleLabelFont](self, "ckShouldUpdatewhatsNewFeatureViewTitleLabelFont")|| v11|| whatsNewFeatureViewTitleLabelFont_sIsIncreaseContrastEnabled_whatsNewFeatureViewTitleLabelFont != v4|| whatsNewFeatureViewTitleLabelFont_sIsBoldTextEnabled_whatsNewFeatureViewTitleLabelFont != IsBoldTextEnabled|| (uint64_t v12 = whatsNewFeatureViewTitleLabelFont_sTextFontSize_whatsNewFeatureViewTitleLabelFont, *(double *)&whatsNewFeatureViewTitleLabelFont_sTextFontSize_whatsNewFeatureViewTitleLabelFont != v6)|| (uint64_t v12 = whatsNewFeatureViewTitleLabelFont_sCustomTextFontSize_whatsNewFeatureViewTitleLabelFont, *(double *)&whatsNewFeatureViewTitleLabelFont_sCustomTextFontSize_whatsNewFeatureViewTitleLabelFont != v7)|| (objc_msgSend((id)whatsNewFeatureViewTitleLabelFont_sCustomTextFontName_whatsNewFeatureViewTitleLabelFont, "isEqualToString:", v10, *(double *)&whatsNewFeatureViewTitleLabelFont_sCustomTextFontSize_whatsNewFeatureViewTitleLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortEmphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    double v14 = (void *)whatsNewFeatureViewTitleLabelFont_sBehavior;
    whatsNewFeatureViewTitleLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&whatsNewFeatureViewTitleLabelFont_sContentSizeCategory_whatsNewFeatureViewTitleLabelFont, v3);
    whatsNewFeatureViewTitleLabelFont_sIsIncreaseContrastEnabled_whatsNewFeatureViewTitleLabelFont = v4;
    whatsNewFeatureViewTitleLabelFont_sIsBoldTextEnabled_whatsNewFeatureViewTitleLabelFont = IsBoldTextEnabled;
    whatsNewFeatureViewTitleLabelFont_sTextFontSize_whatsNewFeatureViewTitleLabelFont = *(void *)&v6;
    whatsNewFeatureViewTitleLabelFont_sCustomTextFontSize_whatsNewFeatureViewTitleLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&whatsNewFeatureViewTitleLabelFont_sCustomTextFontName_whatsNewFeatureViewTitleLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)whatsNewFeatureViewTitleLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatewhatsNewFeatureViewDescriptionLabelFont
{
  return 0;
}

- (UIFont)whatsNewFeatureViewDescriptionLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)whatsNewFeatureViewDescriptionLabelFont_sContentSizeCategory_whatsNewFeatureViewDescriptionLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatewhatsNewFeatureViewDescriptionLabelFont](self, "ckShouldUpdatewhatsNewFeatureViewDescriptionLabelFont")|| v11|| whatsNewFeatureViewDescriptionLabelFont_sIsIncreaseContrastEnabled_whatsNewFeatureViewDescriptionLabelFont != v4|| whatsNewFeatureViewDescriptionLabelFont_sIsBoldTextEnabled_whatsNewFeatureViewDescriptionLabelFont != IsBoldTextEnabled|| (uint64_t v12 = whatsNewFeatureViewDescriptionLabelFont_sTextFontSize_whatsNewFeatureViewDescriptionLabelFont, *(double *)&whatsNewFeatureViewDescriptionLabelFont_sTextFontSize_whatsNewFeatureViewDescriptionLabelFont != v6)|| (uint64_t v12 = whatsNewFeatureViewDescriptionLabelFont_sCustomTextFontSize_whatsNewFeatureViewDescriptionLabelFont, *(double *)&whatsNewFeatureViewDescriptionLabelFont_sCustomTextFontSize_whatsNewFeatureViewDescriptionLabelFont != v7)|| (objc_msgSend((id)whatsNewFeatureViewDescriptionLabelFont_sCustomTextFontName_whatsNewFeatureViewDescriptionLabelFont, "isEqualToString:", v10, *(double *)&whatsNewFeatureViewDescriptionLabelFont_sCustomTextFontSize_whatsNewFeatureViewDescriptionLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    double v14 = (void *)whatsNewFeatureViewDescriptionLabelFont_sBehavior;
    whatsNewFeatureViewDescriptionLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&whatsNewFeatureViewDescriptionLabelFont_sContentSizeCategory_whatsNewFeatureViewDescriptionLabelFont, v3);
    whatsNewFeatureViewDescriptionLabelFont_sIsIncreaseContrastEnabled_whatsNewFeatureViewDescriptionLabelFont = v4;
    whatsNewFeatureViewDescriptionLabelFont_sIsBoldTextEnabled_whatsNewFeatureViewDescriptionLabelFont = IsBoldTextEnabled;
    whatsNewFeatureViewDescriptionLabelFont_sTextFontSize_whatsNewFeatureViewDescriptionLabelFont = *(void *)&v6;
    whatsNewFeatureViewDescriptionLabelFont_sCustomTextFontSize_whatsNewFeatureViewDescriptionLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&whatsNewFeatureViewDescriptionLabelFont_sCustomTextFontName_whatsNewFeatureViewDescriptionLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)whatsNewFeatureViewDescriptionLabelFont_sBehavior;

  return v15;
}

- (UIImage)whatsNewViewApplePayImage
{
  return (UIImage *)[MEMORY[0x1E4F42A80] ckImageNamed:@"CKSurfEducationScreen"];
}

- (BOOL)shouldAlignRecipientGlyphsWithMargins
{
  if (shouldAlignRecipientGlyphsWithMargins_once != -1) {
    dispatch_once(&shouldAlignRecipientGlyphsWithMargins_once, &__block_literal_global_1685);
  }
  return 0;
}

- (double)detailsGroupHeaderCellInterTextVerticalSpacing
{
  if (detailsGroupHeaderCellInterTextVerticalSpacing_once != -1) {
    dispatch_once(&detailsGroupHeaderCellInterTextVerticalSpacing_once, &__block_literal_global_1687);
  }
  return *(double *)&detailsGroupHeaderCellInterTextVerticalSpacing_sBehavior;
}

void __62__CKUIBehavior_detailsGroupHeaderCellInterTextVerticalSpacing__block_invoke()
{
  detailsGroupHeaderCellInterTextVerticalSpacing_sBehavior = 0x3FF0000000000000;
}

- (double)detailsGroupHeaderCellAvatarViewRightMargin
{
  if (detailsGroupHeaderCellAvatarViewRightMargin_once != -1) {
    dispatch_once(&detailsGroupHeaderCellAvatarViewRightMargin_once, &__block_literal_global_1689);
  }
  return 0.0;
}

- (double)detailsGroupHeaderCellSubtitleViewRightMargin
{
  if (detailsGroupHeaderCellSubtitleViewRightMargin_once != -1) {
    dispatch_once(&detailsGroupHeaderCellSubtitleViewRightMargin_once, &__block_literal_global_1691);
  }
  return *(double *)&detailsGroupHeaderCellSubtitleViewRightMargin_sBehavior;
}

void __61__CKUIBehavior_detailsGroupHeaderCellSubtitleViewRightMargin__block_invoke()
{
  detailsGroupHeaderCellSubtitleViewRightMargin_sBehavior = 0x4020000000000000;
}

- (UIFont)detailsGroupHeaderCellTitleFont
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __47__CKUIBehavior_detailsGroupHeaderCellTitleFont__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (detailsGroupHeaderCellTitleFont_once != -1) {
    dispatch_once(&detailsGroupHeaderCellTitleFont_once, block);
  }
  return (UIFont *)(id)detailsGroupHeaderCellTitleFont_sBehavior;
}

void __47__CKUIBehavior_detailsGroupHeaderCellTitleFont__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) recipientNameFont];
  double v2 = (void *)detailsGroupHeaderCellTitleFont_sBehavior;
  detailsGroupHeaderCellTitleFont_sBehavior = v1;
}

- (UIFont)detailsGroupHeaderCellSubtitleFont
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __50__CKUIBehavior_detailsGroupHeaderCellSubtitleFont__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (detailsGroupHeaderCellSubtitleFont_once != -1) {
    dispatch_once(&detailsGroupHeaderCellSubtitleFont_once, block);
  }
  return (UIFont *)(id)detailsGroupHeaderCellSubtitleFont_sBehavior;
}

void __50__CKUIBehavior_detailsGroupHeaderCellSubtitleFont__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) locationSubtitleFont];
  double v2 = (void *)detailsGroupHeaderCellSubtitleFont_sBehavior;
  detailsGroupHeaderCellSubtitleFont_sBehavior = v1;
}

- (NSString)detailsGroupHeaderCellChevronDownName
{
  if (detailsGroupHeaderCellChevronDownName_once != -1) {
    dispatch_once(&detailsGroupHeaderCellChevronDownName_once, &__block_literal_global_1693_0);
  }
  double v2 = (void *)detailsGroupHeaderCellChevronDownName_sBehavior;

  return (NSString *)v2;
}

void __53__CKUIBehavior_detailsGroupHeaderCellChevronDownName__block_invoke()
{
  uint64_t v0 = (void *)detailsGroupHeaderCellChevronDownName_sBehavior;
  detailsGroupHeaderCellChevronDownName_sBehavior = @"chevron.down.circle";
}

- (NSString)detailsGroupHeaderCellChevronForwardName
{
  if (detailsGroupHeaderCellChevronForwardName_once != -1) {
    dispatch_once(&detailsGroupHeaderCellChevronForwardName_once, &__block_literal_global_1698);
  }
  double v2 = (void *)detailsGroupHeaderCellChevronForwardName_sBehavior;

  return (NSString *)v2;
}

void __56__CKUIBehavior_detailsGroupHeaderCellChevronForwardName__block_invoke()
{
  uint64_t v0 = (void *)detailsGroupHeaderCellChevronForwardName_sBehavior;
  detailsGroupHeaderCellChevronForwardName_sBehavior = @"chevron.forward.circle";
}

- (UIFont)detailsGroupHeaderCellChevronFont
{
  if (detailsGroupHeaderCellChevronFont_once != -1) {
    dispatch_once(&detailsGroupHeaderCellChevronFont_once, &__block_literal_global_1703);
  }
  double v2 = (void *)detailsGroupHeaderCellChevronFont_sBehavior;

  return (UIFont *)v2;
}

void __49__CKUIBehavior_detailsGroupHeaderCellChevronFont__block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43870]);
  uint64_t v1 = [v0 fontDescriptor];

  uint64_t v2 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v1 size:0.0];

  double v3 = (void *)detailsGroupHeaderCellChevronFont_sBehavior;
  detailsGroupHeaderCellChevronFont_sBehavior = v2;
}

- (double)detailsContactCellButtonWidth
{
  if (detailsContactCellButtonWidth_once != -1) {
    dispatch_once(&detailsContactCellButtonWidth_once, &__block_literal_global_1705);
  }
  return *(double *)&detailsContactCellButtonWidth_sBehavior;
}

void __45__CKUIBehavior_detailsContactCellButtonWidth__block_invoke()
{
  detailsContactCellButtonWidth_sBehavior = 0x4042800000000000;
}

- (double)detailsContactCellButtonHeight
{
  if (detailsContactCellButtonHeight_once != -1) {
    dispatch_once(&detailsContactCellButtonHeight_once, &__block_literal_global_1707);
  }
  return *(double *)&detailsContactCellButtonHeight_sBehavior;
}

void __46__CKUIBehavior_detailsContactCellButtonHeight__block_invoke()
{
  detailsContactCellButtonHeight_sBehavior = 0x4042800000000000;
}

- (UIEdgeInsets)detailsContactCellButtonEdgeInsets
{
  if (detailsContactCellButtonEdgeInsets_once != -1) {
    dispatch_once(&detailsContactCellButtonEdgeInsets_once, &__block_literal_global_1709);
  }
  double v2 = *(double *)&detailsContactCellButtonEdgeInsets_sBehavior_0;
  double v3 = *(double *)&detailsContactCellButtonEdgeInsets_sBehavior_1;
  double v4 = *(double *)&detailsContactCellButtonEdgeInsets_sBehavior_2;
  double v5 = *(double *)&detailsContactCellButtonEdgeInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __50__CKUIBehavior_detailsContactCellButtonEdgeInsets__block_invoke()
{
  detailsContactCellButtonEdgeInsets_sBehavior_0 = 0xC000000000000000;
  detailsContactCellButtonEdgeInsets_sBehavior_1 = 0xC014000000000000;
  detailsContactCellButtonEdgeInsets_sBehavior_2 = 0xC000000000000000;
  detailsContactCellButtonEdgeInsets_sBehavior_3 = 0xC014000000000000;
}

- (UIEdgeInsets)detailsTableViewInsets
{
  if (detailsTableViewInsets_once != -1) {
    dispatch_once(&detailsTableViewInsets_once, &__block_literal_global_1711);
  }
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

- (double)detailsContactCellMinimumHeight
{
  if (detailsContactCellMinimumHeight_once != -1) {
    dispatch_once(&detailsContactCellMinimumHeight_once, &__block_literal_global_1713);
  }
  return *(double *)&detailsContactCellMinimumHeight_sBehavior;
}

void __47__CKUIBehavior_detailsContactCellMinimumHeight__block_invoke()
{
  detailsContactCellMinimumHeight_sBehavior = 0x4050000000000000;
}

- (int64_t)detailsGroupChevronImageScale
{
  if (detailsGroupChevronImageScale_once != -1) {
    dispatch_once(&detailsGroupChevronImageScale_once, &__block_literal_global_1715);
  }
  return (uint64_t)((unint64_t)detailsGroupChevronImageScale_sBehavior << 63) >> 63;
}

void __45__CKUIBehavior_detailsGroupChevronImageScale__block_invoke()
{
  detailsGroupChevronImageScale_sBehavior = 1;
}

- (double)detailsViewMapHeight
{
  if (detailsViewMapHeight_once != -1) {
    dispatch_once(&detailsViewMapHeight_once, &__block_literal_global_1717);
  }
  return *(double *)&detailsViewMapHeight_sBehavior;
}

void __36__CKUIBehavior_detailsViewMapHeight__block_invoke()
{
  if (CKIsRunningInMacCatalyst())
  {
    id v5 = [MEMORY[0x1E4F42D90] mainScreen];
    [v5 bounds];
    double v0 = CGRectGetHeight(v8) * 0.394557823;
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v1 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v1 = 1.0;
    }
    double v2 = round(v0 * v1) / v1;
    double v3 = v5;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    BOOL v4 = [v6 isWaldoEnabled] == 0;
    double v3 = v6;
    double v2 = 220.0;
    if (!v4) {
      double v2 = 330.0;
    }
  }
  detailsViewMapHeight_sBehavior = *(void *)&v2;
}

- (double)detailsAvatarPancakeViewWidth3Avatars
{
  if (detailsAvatarPancakeViewWidth3Avatars_once != -1) {
    dispatch_once(&detailsAvatarPancakeViewWidth3Avatars_once, &__block_literal_global_1719);
  }
  return *(double *)&detailsAvatarPancakeViewWidth3Avatars_sBehavior;
}

void __53__CKUIBehavior_detailsAvatarPancakeViewWidth3Avatars__block_invoke()
{
  detailsAvatarPancakeViewWidth3Avatars_sBehavior = 0x4052000000000000;
}

- (double)detailsAvatarPancakeViewWidth2Avatars
{
  if (detailsAvatarPancakeViewWidth2Avatars_once != -1) {
    dispatch_once(&detailsAvatarPancakeViewWidth2Avatars_once, &__block_literal_global_1721);
  }
  return *(double *)&detailsAvatarPancakeViewWidth2Avatars_sBehavior;
}

void __53__CKUIBehavior_detailsAvatarPancakeViewWidth2Avatars__block_invoke()
{
  detailsAvatarPancakeViewWidth2Avatars_sBehavior = 0x404D000000000000;
}

- (double)detailsAvatarPancakeViewOverlapOffset
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __53__CKUIBehavior_detailsAvatarPancakeViewOverlapOffset__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (detailsAvatarPancakeViewOverlapOffset_once != -1) {
    dispatch_once(&detailsAvatarPancakeViewOverlapOffset_once, block);
  }
  return *(double *)&detailsAvatarPancakeViewOverlapOffset_sBehavior;
}

double __53__CKUIBehavior_detailsAvatarPancakeViewOverlapOffset__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) detailsAvatarDiameter];
  double v2 = v1;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v3 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v3 = 1.0;
  }
  double result = round(v2 * 0.36 * v3) / v3;
  detailsAvatarPancakeViewOverlapOffset_sBehavior = *(void *)&result;
  return result;
}

- (double)detailsAvatarDiameter
{
  if (detailsAvatarDiameter_once != -1) {
    dispatch_once(&detailsAvatarDiameter_once, &__block_literal_global_1723);
  }
  return *(double *)&detailsAvatarDiameter_sBehavior;
}

void __37__CKUIBehavior_detailsAvatarDiameter__block_invoke()
{
  detailsAvatarDiameter_sBehavior = 0x4042800000000000;
}

- (double)detailsAvatarCornerRadius
{
  if (detailsAvatarCornerRadius_once != -1) {
    dispatch_once(&detailsAvatarCornerRadius_once, &__block_literal_global_1725);
  }
  return *(double *)&detailsAvatarCornerRadius_sBehavior;
}

void __41__CKUIBehavior_detailsAvatarCornerRadius__block_invoke()
{
  id v1 = +[CKUIBehavior sharedBehaviors];
  [v1 detailsAvatarCutoutDiameter];
  *(double *)&detailsAvatarCornerRadius_sBehavior = v0 * 0.5;
}

- (double)detailsAvatarCutoutDiameter
{
  if (detailsAvatarCutoutDiameter_once != -1) {
    dispatch_once(&detailsAvatarCutoutDiameter_once, &__block_literal_global_1727);
  }
  return *(double *)&detailsAvatarCutoutDiameter_sBehavior;
}

void __43__CKUIBehavior_detailsAvatarCutoutDiameter__block_invoke()
{
  id v1 = +[CKUIBehavior sharedBehaviors];
  [v1 detailsAvatarDiameter];
  *(double *)&detailsAvatarCutoutDiameter_sBehavior = v0 + 4.0;
}

- (int64_t)detailsActionViewStyle
{
  if (detailsActionViewStyle_once != -1) {
    dispatch_once(&detailsActionViewStyle_once, &__block_literal_global_1729);
  }
  if (detailsActionViewStyle_sBehavior) {
    return 7;
  }
  else {
    return 0;
  }
}

void __38__CKUIBehavior_detailsActionViewStyle__block_invoke()
{
  detailsActionViewStyle_sBehavior = 1;
}

- (double)detailsTUConversationCellButtonHeight
{
  if (detailsTUConversationCellButtonHeight_once != -1) {
    dispatch_once(&detailsTUConversationCellButtonHeight_once, &__block_literal_global_1731);
  }
  return *(double *)&detailsTUConversationCellButtonHeight_sBehavior;
}

void __53__CKUIBehavior_detailsTUConversationCellButtonHeight__block_invoke()
{
  detailsTUConversationCellButtonHeight_sBehavior = 0x4042000000000000;
}

- (double)detailsTUConversationCellButtonMinWidth
{
  if (detailsTUConversationCellButtonMinWidth_once != -1) {
    dispatch_once(&detailsTUConversationCellButtonMinWidth_once, &__block_literal_global_1733);
  }
  return *(double *)&detailsTUConversationCellButtonMinWidth_sBehavior;
}

void __55__CKUIBehavior_detailsTUConversationCellButtonMinWidth__block_invoke()
{
  detailsTUConversationCellButtonMinWidth_sBehavior = 0x4052000000000000;
}

- (double)detailsTUConversationDetailsSummaryImageDiameter
{
  if (detailsTUConversationDetailsSummaryImageDiameter_once != -1) {
    dispatch_once(&detailsTUConversationDetailsSummaryImageDiameter_once, &__block_literal_global_1735);
  }
  return *(double *)&detailsTUConversationDetailsSummaryImageDiameter_sBehavior;
}

void __64__CKUIBehavior_detailsTUConversationDetailsSummaryImageDiameter__block_invoke()
{
  detailsTUConversationDetailsSummaryImageDiameter_sBehavior = 0x403D000000000000;
}

- (double)detailsExpanseCellHeight
{
  if (detailsExpanseCellHeight_once != -1) {
    dispatch_once(&detailsExpanseCellHeight_once, &__block_literal_global_1737);
  }
  return *(double *)&detailsExpanseCellHeight_sBehavior;
}

double __40__CKUIBehavior_detailsExpanseCellHeight__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = round(v0 * 173.0) / v0;
  detailsExpanseCellHeight_sBehavior = *(void *)&result;
  return result;
}

- (double)detailsExpanseDescriptionLabelHeight
{
  if (detailsExpanseDescriptionLabelHeight_once != -1) {
    dispatch_once(&detailsExpanseDescriptionLabelHeight_once, &__block_literal_global_1739);
  }
  return 0.0;
}

- (double)detailsExpanseScreenShareCellHeight
{
  if (detailsExpanseScreenShareCellHeight_once != -1) {
    dispatch_once(&detailsExpanseScreenShareCellHeight_once, &__block_literal_global_1741);
  }
  return *(double *)&detailsExpanseScreenShareCellHeight_sBehavior;
}

double __51__CKUIBehavior_detailsExpanseScreenShareCellHeight__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = round(v0 * 64.0) / v0;
  detailsExpanseScreenShareCellHeight_sBehavior = *(void *)&result;
  return result;
}

- (double)detailsExpanseImageFallbackDimension
{
  if (detailsExpanseImageFallbackDimension_once != -1) {
    dispatch_once(&detailsExpanseImageFallbackDimension_once, &__block_literal_global_1743);
  }
  return *(double *)&detailsExpanseImageFallbackDimension_sBehavior;
}

void __52__CKUIBehavior_detailsExpanseImageFallbackDimension__block_invoke()
{
  detailsExpanseImageFallbackDimension_sBehavior = 0x4049000000000000;
}

- (double)detailsExpanseActivityDescriptionVerticalPadding
{
  if (detailsExpanseActivityDescriptionVerticalPadding_once != -1) {
    dispatch_once(&detailsExpanseActivityDescriptionVerticalPadding_once, &__block_literal_global_1745);
  }
  return *(double *)&detailsExpanseActivityDescriptionVerticalPadding_sBehavior;
}

void __64__CKUIBehavior_detailsExpanseActivityDescriptionVerticalPadding__block_invoke()
{
  detailsExpanseActivityDescriptionVerticalPadding_sBehavior = 0x4018000000000000;
}

- (double)detailsExpanseActivityImageInsetPadding
{
  if (detailsExpanseActivityImageInsetPadding_once != -1) {
    dispatch_once(&detailsExpanseActivityImageInsetPadding_once, &__block_literal_global_1747);
  }
  return *(double *)&detailsExpanseActivityImageInsetPadding_sBehavior;
}

void __55__CKUIBehavior_detailsExpanseActivityImageInsetPadding__block_invoke()
{
  detailsExpanseActivityImageInsetPadding_sBehavior = 0x4030000000000000;
}

- (double)detailsExpanseScreenShareIconHorizontalInsetPadding
{
  if (detailsExpanseScreenShareIconHorizontalInsetPadding_once != -1) {
    dispatch_once(&detailsExpanseScreenShareIconHorizontalInsetPadding_once, &__block_literal_global_1749);
  }
  return *(double *)&detailsExpanseScreenShareIconHorizontalInsetPadding_sBehavior;
}

void __67__CKUIBehavior_detailsExpanseScreenShareIconHorizontalInsetPadding__block_invoke()
{
  detailsExpanseScreenShareIconHorizontalInsetPadding_sBehavior = 0x402C000000000000;
}

- (double)detailsExpanseScreenShareIconVerticalInsetPadding
{
  if (detailsExpanseScreenShareIconVerticalInsetPadding_once != -1) {
    dispatch_once(&detailsExpanseScreenShareIconVerticalInsetPadding_once, &__block_literal_global_1751);
  }
  return *(double *)&detailsExpanseScreenShareIconVerticalInsetPadding_sBehavior;
}

void __65__CKUIBehavior_detailsExpanseScreenShareIconVerticalInsetPadding__block_invoke()
{
  detailsExpanseScreenShareIconVerticalInsetPadding_sBehavior = 0x4020000000000000;
}

- (double)tuConversationJoinButtonCornerRadius
{
  if (tuConversationJoinButtonCornerRadius_once != -1) {
    dispatch_once(&tuConversationJoinButtonCornerRadius_once, &__block_literal_global_1753);
  }
  return *(double *)&tuConversationJoinButtonCornerRadius_sBehavior;
}

void __52__CKUIBehavior_tuConversationJoinButtonCornerRadius__block_invoke()
{
  tuConversationJoinButtonCornerRadius_sBehavior = 0x4032000000000000;
}

- (double)tuConversationJoinButtonHeight
{
  if (tuConversationJoinButtonHeight_once != -1) {
    dispatch_once(&tuConversationJoinButtonHeight_once, &__block_literal_global_1755);
  }
  return *(double *)&tuConversationJoinButtonHeight_sBehavior;
}

void __46__CKUIBehavior_tuConversationJoinButtonHeight__block_invoke()
{
  tuConversationJoinButtonHeight_sBehavior = 0x4042000000000000;
}

- (double)tuConversationJoinButtonMinWidth
{
  if (tuConversationJoinButtonMinWidth_once != -1) {
    dispatch_once(&tuConversationJoinButtonMinWidth_once, &__block_literal_global_1757);
  }
  return *(double *)&tuConversationJoinButtonMinWidth_sBehavior;
}

void __48__CKUIBehavior_tuConversationJoinButtonMinWidth__block_invoke()
{
  tuConversationJoinButtonMinWidth_sBehavior = 0x4052000000000000;
}

- (double)detailsSectionHeaderPaddingLeading
{
  if (detailsSectionHeaderPaddingLeading_once != -1) {
    dispatch_once(&detailsSectionHeaderPaddingLeading_once, &__block_literal_global_1759);
  }
  return 0.0;
}

- (double)detailsSectionHeaderPaddingAbove
{
  if (detailsSectionHeaderPaddingAbove_once != -1) {
    dispatch_once(&detailsSectionHeaderPaddingAbove_once, &__block_literal_global_1761);
  }
  return 0.0;
}

- (double)detailsCellLabelPadding
{
  if (detailsCellLabelPadding_once != -1) {
    dispatch_once(&detailsCellLabelPadding_once, &__block_literal_global_1763);
  }
  return 0.0;
}

- (int64_t)groupRecipientSelectionPresentationStyle
{
  if (groupRecipientSelectionPresentationStyle_once != -1) {
    dispatch_once(&groupRecipientSelectionPresentationStyle_once, &__block_literal_global_1765);
  }
  if (groupRecipientSelectionPresentationStyle_sBehavior) {
    return -2;
  }
  else {
    return 0;
  }
}

void __56__CKUIBehavior_groupRecipientSelectionPresentationStyle__block_invoke()
{
  groupRecipientSelectionPresentationStyle_sBehavior = 1;
}

- (double)detailsAddButtonDiameter
{
  if (detailsAddButtonDiameter_once != -1) {
    dispatch_once(&detailsAddButtonDiameter_once, &__block_literal_global_1767);
  }
  return *(double *)&detailsAddButtonDiameter_sBehavior;
}

void __40__CKUIBehavior_detailsAddButtonDiameter__block_invoke()
{
  detailsAddButtonDiameter_sBehavior = 0x4042800000000000;
}

- (double)detailsContactAvatarLabelSpacing
{
  if (detailsContactAvatarLabelSpacing_once != -1) {
    dispatch_once(&detailsContactAvatarLabelSpacing_once, &__block_literal_global_1769);
  }
  return *(double *)&detailsContactAvatarLabelSpacing_sBehavior;
}

void __48__CKUIBehavior_detailsContactAvatarLabelSpacing__block_invoke()
{
  detailsContactAvatarLabelSpacing_sBehavior = 0x4028000000000000;
}

- (double)detailsShareLocationCornerRadius
{
  if (detailsShareLocationCornerRadius_once != -1) {
    dispatch_once(&detailsShareLocationCornerRadius_once, &__block_literal_global_1771);
  }
  return 0.0;
}

- (BOOL)ckShouldUpdatenameFieldFont
{
  return 0;
}

- (UIFont)nameFieldFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)nameFieldFont_sContentSizeCategory_nameFieldFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenameFieldFont]
    || v11
    || nameFieldFont_sIsIncreaseContrastEnabled_nameFieldFont != v4
    || nameFieldFont_sIsBoldTextEnabled_nameFieldFont != IsBoldTextEnabled
    || (uint64_t v12 = nameFieldFont_sTextFontSize_nameFieldFont, *(double *)&nameFieldFont_sTextFontSize_nameFieldFont != v6)
    || (uint64_t v12 = nameFieldFont_sCustomTextFontSize_nameFieldFont,
        *(double *)&nameFieldFont_sCustomTextFontSize_nameFieldFont != v7)
    || (objc_msgSend((id)nameFieldFont_sCustomTextFontName_nameFieldFont, "isEqualToString:", v10, *(double *)&nameFieldFont_sCustomTextFontSize_nameFieldFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    double v14 = (void *)nameFieldFont_sBehavior;
    nameFieldFont_sBehavior = v13;

    objc_storeStrong((id *)&nameFieldFont_sContentSizeCategory_nameFieldFont, v3);
    nameFieldFont_sIsIncreaseContrastEnabled_nameFieldFont = v4;
    nameFieldFont_sIsBoldTextEnabled_nameFieldFont = IsBoldTextEnabled;
    nameFieldFont_sTextFontSize_nameFieldFont = *(void *)&v6;
    nameFieldFont_sCustomTextFontSize_nameFieldFont = *(void *)&v7;
    objc_storeStrong((id *)&nameFieldFont_sCustomTextFontName_nameFieldFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)nameFieldFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdaterecipientNameFont
{
  return 0;
}

- (UIFont)recipientNameFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)recipientNameFont_sContentSizeCategory_recipientNameFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdaterecipientNameFont]
    || v11
    || recipientNameFont_sIsIncreaseContrastEnabled_recipientNameFont != v4
    || recipientNameFont_sIsBoldTextEnabled_recipientNameFont != IsBoldTextEnabled
    || (uint64_t v12 = recipientNameFont_sTextFontSize_recipientNameFont,
        *(double *)&recipientNameFont_sTextFontSize_recipientNameFont != v6)
    || (uint64_t v12 = recipientNameFont_sCustomTextFontSize_recipientNameFont,
        *(double *)&recipientNameFont_sCustomTextFontSize_recipientNameFont != v7)
    || (objc_msgSend((id)recipientNameFont_sCustomTextFontName_recipientNameFont, "isEqualToString:", v10, *(double *)&recipientNameFont_sCustomTextFontSize_recipientNameFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438A0], 0x8000, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    uint64_t v15 = (void *)recipientNameFont_sBehavior;
    recipientNameFont_sBehavior = v14;

    objc_storeStrong((id *)&recipientNameFont_sContentSizeCategory_recipientNameFont, v3);
    recipientNameFont_sIsIncreaseContrastEnabled_recipientNameFont = v4;
    recipientNameFont_sIsBoldTextEnabled_recipientNameFont = IsBoldTextEnabled;
    recipientNameFont_sTextFontSize_recipientNameFont = *(void *)&v6;
    recipientNameFont_sCustomTextFontSize_recipientNameFont = *(void *)&v7;
    objc_storeStrong((id *)&recipientNameFont_sCustomTextFontName_recipientNameFont, v9);
  }
  uint64_t v16 = (UIFont *)(id)recipientNameFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatelocationSubtitleFont
{
  return 0;
}

- (UIFont)locationSubtitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)locationSubtitleFont_sContentSizeCategory_locationSubtitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatelocationSubtitleFont]
    || v11
    || locationSubtitleFont_sIsIncreaseContrastEnabled_locationSubtitleFont != v4
    || locationSubtitleFont_sIsBoldTextEnabled_locationSubtitleFont != IsBoldTextEnabled
    || (uint64_t v12 = locationSubtitleFont_sTextFontSize_locationSubtitleFont,
        *(double *)&locationSubtitleFont_sTextFontSize_locationSubtitleFont != v6)
    || (uint64_t v12 = locationSubtitleFont_sCustomTextFontSize_locationSubtitleFont,
        *(double *)&locationSubtitleFont_sCustomTextFontSize_locationSubtitleFont != v7)
    || (objc_msgSend((id)locationSubtitleFont_sCustomTextFontName_locationSubtitleFont, "isEqualToString:", v10, *(double *)&locationSubtitleFont_sCustomTextFontSize_locationSubtitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438C0], 0x8000, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    uint64_t v15 = (void *)locationSubtitleFont_sBehavior;
    locationSubtitleFont_sBehavior = v14;

    objc_storeStrong((id *)&locationSubtitleFont_sContentSizeCategory_locationSubtitleFont, v3);
    locationSubtitleFont_sIsIncreaseContrastEnabled_locationSubtitleFont = v4;
    locationSubtitleFont_sIsBoldTextEnabled_locationSubtitleFont = IsBoldTextEnabled;
    locationSubtitleFont_sTextFontSize_locationSubtitleFont = *(void *)&v6;
    locationSubtitleFont_sCustomTextFontSize_locationSubtitleFont = *(void *)&v7;
    objc_storeStrong((id *)&locationSubtitleFont_sCustomTextFontName_locationSubtitleFont, v9);
  }
  uint64_t v16 = (UIFont *)(id)locationSubtitleFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateaddContactFont
{
  return 0;
}

- (UIFont)addContactFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)addContactFont_sContentSizeCategory_addContactFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateaddContactFont]
    || v11
    || addContactFont_sIsIncreaseContrastEnabled_addContactFont != v4
    || addContactFont_sIsBoldTextEnabled_addContactFont != IsBoldTextEnabled
    || (uint64_t v12 = addContactFont_sTextFontSize_addContactFont, *(double *)&addContactFont_sTextFontSize_addContactFont != v6)
    || (uint64_t v12 = addContactFont_sCustomTextFontSize_addContactFont,
        *(double *)&addContactFont_sCustomTextFontSize_addContactFont != v7)
    || (objc_msgSend((id)addContactFont_sCustomTextFontName_addContactFont, "isEqualToString:", v10, *(double *)&addContactFont_sCustomTextFontSize_addContactFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F43870], 0x8000, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    uint64_t v15 = (void *)addContactFont_sBehavior;
    addContactFont_sBehavior = v14;

    objc_storeStrong((id *)&addContactFont_sContentSizeCategory_addContactFont, v3);
    addContactFont_sIsIncreaseContrastEnabled_addContactFont = v4;
    addContactFont_sIsBoldTextEnabled_addContactFont = IsBoldTextEnabled;
    addContactFont_sTextFontSize_addContactFont = *(void *)&v6;
    addContactFont_sCustomTextFontSize_addContactFont = *(void *)&v7;
    objc_storeStrong((id *)&addContactFont_sCustomTextFontName_addContactFont, v9);
  }
  uint64_t v16 = (UIFont *)(id)addContactFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdateheaderFont
{
  return 0;
}

- (UIFont)headerFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)headerFont_sContentSizeCategory_headerFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateheaderFont]
    || v11
    || headerFont_sIsIncreaseContrastEnabled_headerFont != v4
    || headerFont_sIsBoldTextEnabled_headerFont != IsBoldTextEnabled
    || (uint64_t v12 = headerFont_sTextFontSize_headerFont, *(double *)&headerFont_sTextFontSize_headerFont != v6)
    || (uint64_t v12 = headerFont_sCustomTextFontSize_headerFont, *(double *)&headerFont_sCustomTextFontSize_headerFont != v7)
    || (objc_msgSend((id)headerFont_sCustomTextFontName_headerFont, "isEqualToString:", v10, *(double *)&headerFont_sCustomTextFontSize_headerFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    uint64_t v14 = (void *)headerFont_sBehavior;
    headerFont_sBehavior = v13;

    objc_storeStrong((id *)&headerFont_sContentSizeCategory_headerFont, v3);
    headerFont_sIsIncreaseContrastEnabled_headerFont = v4;
    headerFont_sIsBoldTextEnabled_headerFont = IsBoldTextEnabled;
    headerFont_sTextFontSize_headerFont = *(void *)&v6;
    headerFont_sCustomTextFontSize_headerFont = *(void *)&v7;
    objc_storeStrong((id *)&headerFont_sCustomTextFontName_headerFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)headerFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatedownloadButtonFont
{
  return 0;
}

- (UIFont)downloadButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)downloadButtonFont_sContentSizeCategory_downloadButtonFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatedownloadButtonFont]
    || v11
    || downloadButtonFont_sIsIncreaseContrastEnabled_downloadButtonFont != v4
    || downloadButtonFont_sIsBoldTextEnabled_downloadButtonFont != IsBoldTextEnabled
    || (uint64_t v12 = downloadButtonFont_sTextFontSize_downloadButtonFont,
        *(double *)&downloadButtonFont_sTextFontSize_downloadButtonFont != v6)
    || (uint64_t v12 = downloadButtonFont_sCustomTextFontSize_downloadButtonFont,
        *(double *)&downloadButtonFont_sCustomTextFontSize_downloadButtonFont != v7)
    || (objc_msgSend((id)downloadButtonFont_sCustomTextFontName_downloadButtonFont, "isEqualToString:", v10, *(double *)&downloadButtonFont_sCustomTextFontSize_downloadButtonFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    uint64_t v14 = (void *)downloadButtonFont_sBehavior;
    downloadButtonFont_sBehavior = v13;

    objc_storeStrong((id *)&downloadButtonFont_sContentSizeCategory_downloadButtonFont, v3);
    downloadButtonFont_sIsIncreaseContrastEnabled_downloadButtonFont = v4;
    downloadButtonFont_sIsBoldTextEnabled_downloadButtonFont = IsBoldTextEnabled;
    downloadButtonFont_sTextFontSize_downloadButtonFont = *(void *)&v6;
    downloadButtonFont_sCustomTextFontSize_downloadButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&downloadButtonFont_sCustomTextFontName_downloadButtonFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)downloadButtonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateiCloudTextFont
{
  return 0;
}

- (UIFont)iCloudTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)iCloudTextFont_sContentSizeCategory_iCloudTextFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateiCloudTextFont]
    || v11
    || iCloudTextFont_sIsIncreaseContrastEnabled_iCloudTextFont != v4
    || iCloudTextFont_sIsBoldTextEnabled_iCloudTextFont != IsBoldTextEnabled
    || (uint64_t v12 = iCloudTextFont_sTextFontSize_iCloudTextFont, *(double *)&iCloudTextFont_sTextFontSize_iCloudTextFont != v6)
    || (uint64_t v12 = iCloudTextFont_sCustomTextFontSize_iCloudTextFont,
        *(double *)&iCloudTextFont_sCustomTextFontSize_iCloudTextFont != v7)
    || (objc_msgSend((id)iCloudTextFont_sCustomTextFontName_iCloudTextFont, "isEqualToString:", v10, *(double *)&iCloudTextFont_sCustomTextFontSize_iCloudTextFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortPreferredFontForTextStyle:", *MEMORY[0x1E4F438A8], *(double *)&v12);
    uint64_t v14 = (void *)iCloudTextFont_sBehavior;
    iCloudTextFont_sBehavior = v13;

    objc_storeStrong((id *)&iCloudTextFont_sContentSizeCategory_iCloudTextFont, v3);
    iCloudTextFont_sIsIncreaseContrastEnabled_iCloudTextFont = v4;
    iCloudTextFont_sIsBoldTextEnabled_iCloudTextFont = IsBoldTextEnabled;
    iCloudTextFont_sTextFontSize_iCloudTextFont = *(void *)&v6;
    iCloudTextFont_sCustomTextFontSize_iCloudTextFont = *(void *)&v7;
    objc_storeStrong((id *)&iCloudTextFont_sCustomTextFontName_iCloudTextFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)iCloudTextFont_sBehavior;

  return v15;
}

- (double)detailsDownloadAttachmentsHeaderiCloudImageAlphaForLightMode
{
  if (detailsDownloadAttachmentsHeaderiCloudImageAlphaForLightMode_once != -1) {
    dispatch_once(&detailsDownloadAttachmentsHeaderiCloudImageAlphaForLightMode_once, &__block_literal_global_1773);
  }
  return *(double *)&detailsDownloadAttachmentsHeaderiCloudImageAlphaForLightMode_sBehavior;
}

void __76__CKUIBehavior_detailsDownloadAttachmentsHeaderiCloudImageAlphaForLightMode__block_invoke()
{
  detailsDownloadAttachmentsHeaderiCloudImageAlphaForLightMode_sBehavior = 0x3FB999999999999ALL;
}

- (double)detailsDownloadAttachmentsHeaderiCloudImageAlphaForDarkMode
{
  if (detailsDownloadAttachmentsHeaderiCloudImageAlphaForDarkMode_once != -1) {
    dispatch_once(&detailsDownloadAttachmentsHeaderiCloudImageAlphaForDarkMode_once, &__block_literal_global_1775);
  }
  return *(double *)&detailsDownloadAttachmentsHeaderiCloudImageAlphaForDarkMode_sBehavior;
}

void __75__CKUIBehavior_detailsDownloadAttachmentsHeaderiCloudImageAlphaForDarkMode__block_invoke()
{
  detailsDownloadAttachmentsHeaderiCloudImageAlphaForDarkMode_sBehavior = 0x3FD999999999999ALL;
}

- (UIImage)detailsViewFaceTimeVideoImage
{
  if (detailsViewFaceTimeVideoImage_once != -1) {
    dispatch_once(&detailsViewFaceTimeVideoImage_once, &__block_literal_global_1777);
  }
  double v2 = (void *)detailsViewFaceTimeVideoImage_sBehavior;

  return (UIImage *)v2;
}

void __45__CKUIBehavior_detailsViewFaceTimeVideoImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"video.fill"];
  id v1 = (void *)detailsViewFaceTimeVideoImage_sBehavior;
  detailsViewFaceTimeVideoImage_sBehavior = v0;
}

- (UIImage)detailsViewPhoneImage
{
  if (detailsViewPhoneImage_once != -1) {
    dispatch_once(&detailsViewPhoneImage_once, &__block_literal_global_1779);
  }
  double v2 = (void *)detailsViewPhoneImage_sBehavior;

  return (UIImage *)v2;
}

void __37__CKUIBehavior_detailsViewPhoneImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"phone.fill"];
  id v1 = (void *)detailsViewPhoneImage_sBehavior;
  detailsViewPhoneImage_sBehavior = v0;
}

- (UIImage)detailsViewMessagesImage
{
  if (detailsViewMessagesImage_once != -1) {
    dispatch_once(&detailsViewMessagesImage_once, &__block_literal_global_1781);
  }
  double v2 = (void *)detailsViewMessagesImage_sBehavior;

  return (UIImage *)v2;
}

void __40__CKUIBehavior_detailsViewMessagesImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"message.fill"];
  id v1 = (void *)detailsViewMessagesImage_sBehavior;
  detailsViewMessagesImage_sBehavior = v0;
}

- (double)ktStatusCellImagePadding
{
  if (ktStatusCellImagePadding_once != -1) {
    dispatch_once(&ktStatusCellImagePadding_once, &__block_literal_global_1786);
  }
  return *(double *)&ktStatusCellImagePadding_sBehavior;
}

void __40__CKUIBehavior_ktStatusCellImagePadding__block_invoke()
{
  ktStatusCellImagePadding_sBehavior = 0x4014000000000000;
}

- (CGRect)ktStringAttachmentPadding
{
  if (ktStringAttachmentPadding_once != -1) {
    dispatch_once(&ktStringAttachmentPadding_once, &__block_literal_global_1788_1);
  }
  double v2 = *(double *)&ktStringAttachmentPadding_sBehavior_2;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.size.double height = v5;
  result.size.double width = v2;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

void __41__CKUIBehavior_ktStringAttachmentPadding__block_invoke()
{
  ktStringAttachmentPadding_sBehavior_2 = 0x4008000000000000;
}

- (CGSize)avatarSize
{
  if (avatarSize_once != -1) {
    dispatch_once(&avatarSize_once, &__block_literal_global_1790);
  }
  double v2 = *(double *)&avatarSize_sBehavior_0;
  double v3 = *(double *)&avatarSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __26__CKUIBehavior_avatarSize__block_invoke()
{
  if (IMEnableTranscriptChromelessNavBar())
  {
    if (CKPixelWidth_once_7 != -1) {
      dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
    }
    double v0 = *(double *)&CKPixelWidth_sPixel_7 + 60.0;
    double v1 = *(double *)&CKPixelWidth_sPixel_7 + 60.0;
  }
  else
  {
    double v0 = 50.0;
    double v1 = 50.0;
  }
  avatarSize_sBehavior_0 = *(void *)&v0;
  avatarSize_sBehavior_1 = *(void *)&v1;
}

- (CGSize)groupAvatarViewSize
{
  if (groupAvatarViewSize_once != -1) {
    dispatch_once(&groupAvatarViewSize_once, &__block_literal_global_1792_0);
  }
  double v2 = *(double *)&groupAvatarViewSize_sBehavior_0;
  double v3 = *(double *)&groupAvatarViewSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __35__CKUIBehavior_groupAvatarViewSize__block_invoke()
{
  groupAvatarViewSize_sBehavior_0 = 0x404E000000000000;
  groupAvatarViewSize_sBehavior_1 = 0x404E000000000000;
}

- (CGSize)avatarCollapsedSize
{
  if (avatarCollapsedSize_once != -1) {
    dispatch_once(&avatarCollapsedSize_once, &__block_literal_global_1794);
  }
  double v2 = *(double *)&avatarCollapsedSize_sBehavior_0;
  double v3 = *(double *)&avatarCollapsedSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

double __35__CKUIBehavior_avatarCollapsedSize__block_invoke()
{
  if (CKPixelWidth_once_7 != -1) {
    dispatch_once(&CKPixelWidth_once_7, &__block_literal_global_6014);
  }
  double result = *(double *)&CKPixelWidth_sPixel_7 + 30.0;
  *(double *)&avatarCollapsedSize_sBehavior_0 = *(double *)&CKPixelWidth_sPixel_7 + 30.0;
  *(double *)&avatarCollapsedSize_sBehavior_1 = *(double *)&CKPixelWidth_sPixel_7 + 30.0;
  return result;
}

- (double)avatarSpacingMargin
{
  if (avatarSpacingMargin_once != -1) {
    dispatch_once(&avatarSpacingMargin_once, &__block_literal_global_1796_0);
  }
  return *(double *)&avatarSpacingMargin_sBehavior;
}

void __35__CKUIBehavior_avatarSpacingMargin__block_invoke()
{
  avatarSpacingMargin_sBehavior = 0x4048000000000000;
}

- (double)avatarNameWidth
{
  if (avatarNameWidth_once != -1) {
    dispatch_once(&avatarNameWidth_once, &__block_literal_global_1798_0);
  }
  return *(double *)&avatarNameWidth_sBehavior;
}

void __31__CKUIBehavior_avatarNameWidth__block_invoke()
{
  avatarNameWidth_sBehavior = 0x4055000000000000;
}

- (double)avatarContactImageNameMargin
{
  if (avatarContactImageNameMargin_once != -1) {
    dispatch_once(&avatarContactImageNameMargin_once, &__block_literal_global_1800);
  }
  return *(double *)&avatarContactImageNameMargin_sBehavior;
}

void __44__CKUIBehavior_avatarContactImageNameMargin__block_invoke()
{
  avatarContactImageNameMargin_sBehavior = 0x4024000000000000;
}

- (double)avatarVerticalOffset
{
  if (avatarVerticalOffset_once != -1) {
    dispatch_once(&avatarVerticalOffset_once, &__block_literal_global_1802);
  }
  return *(double *)&avatarVerticalOffset_sBehavior;
}

void __36__CKUIBehavior_avatarVerticalOffset__block_invoke()
{
  avatarVerticalOffset_sBehavior = 0x4008000000000000;
}

- (CGSize)avatarCutoutSize
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __32__CKUIBehavior_avatarCutoutSize__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (avatarCutoutSize_once != -1) {
    dispatch_once(&avatarCutoutSize_once, block);
  }
  double v2 = *(double *)&avatarCutoutSize_sBehavior_0;
  double v3 = *(double *)&avatarCutoutSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

double __32__CKUIBehavior_avatarCutoutSize__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) avatarSize];
  double v3 = v2 + 4.0;
  [*(id *)(a1 + 32) avatarSize];
  double result = v4 + 4.0;
  avatarCutoutSize_sBehavior_0 = *(void *)&v3;
  *(double *)&avatarCutoutSize_sBehavior_1 = v4 + 4.0;
  return result;
}

- (double)avatarTitleOffset
{
  if (avatarTitleOffset_once != -1) {
    dispatch_once(&avatarTitleOffset_once, &__block_literal_global_1804);
  }
  return *(double *)&avatarTitleOffset_sBehavior;
}

void __33__CKUIBehavior_avatarTitleOffset__block_invoke()
{
  avatarTitleOffset_sBehavior = 0x402E000000000000;
}

- (BOOL)ckShouldUpdateavatarStackTitleFont
{
  return 0;
}

- (UIFont)avatarStackTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)avatarStackTitleFont_sContentSizeCategory_avatarStackTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateavatarStackTitleFont]
    || v11
    || avatarStackTitleFont_sIsIncreaseContrastEnabled_avatarStackTitleFont != v4
    || avatarStackTitleFont_sIsBoldTextEnabled_avatarStackTitleFont != IsBoldTextEnabled
    || (uint64_t v12 = avatarStackTitleFont_sTextFontSize_avatarStackTitleFont,
        *(double *)&avatarStackTitleFont_sTextFontSize_avatarStackTitleFont != v6)
    || (uint64_t v12 = avatarStackTitleFont_sCustomTextFontSize_avatarStackTitleFont,
        *(double *)&avatarStackTitleFont_sCustomTextFontSize_avatarStackTitleFont != v7)
    || (objc_msgSend((id)avatarStackTitleFont_sCustomTextFontName_avatarStackTitleFont, "isEqualToString:", v10, *(double *)&avatarStackTitleFont_sCustomTextFontSize_avatarStackTitleFont) & 1) == 0)
  {
    uint64_t v13 = +[CKUIBehavior fontWithStyle:adjustedForMaxSizeCategory:](CKUIBehavior, "fontWithStyle:adjustedForMaxSizeCategory:", *MEMORY[0x1E4F43888], *MEMORY[0x1E4F43780], *(double *)&v12);
    uint64_t v14 = (void *)avatarStackTitleFont_sBehavior;
    avatarStackTitleFont_sBehavior = v13;

    objc_storeStrong((id *)&avatarStackTitleFont_sContentSizeCategory_avatarStackTitleFont, v3);
    avatarStackTitleFont_sIsIncreaseContrastEnabled_avatarStackTitleFont = v4;
    avatarStackTitleFont_sIsBoldTextEnabled_avatarStackTitleFont = IsBoldTextEnabled;
    avatarStackTitleFont_sTextFontSize_avatarStackTitleFont = *(void *)&v6;
    avatarStackTitleFont_sCustomTextFontSize_avatarStackTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&avatarStackTitleFont_sCustomTextFontName_avatarStackTitleFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)avatarStackTitleFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatenoAvatarTitleFont
{
  return 0;
}

- (UIFont)noAvatarTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)noAvatarTitleFont_sContentSizeCategory_noAvatarTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenoAvatarTitleFont]
    || v11
    || noAvatarTitleFont_sIsIncreaseContrastEnabled_noAvatarTitleFont != v4
    || noAvatarTitleFont_sIsBoldTextEnabled_noAvatarTitleFont != IsBoldTextEnabled
    || (uint64_t v12 = noAvatarTitleFont_sTextFontSize_noAvatarTitleFont,
        *(double *)&noAvatarTitleFont_sTextFontSize_noAvatarTitleFont != v6)
    || (uint64_t v12 = noAvatarTitleFont_sCustomTextFontSize_noAvatarTitleFont,
        *(double *)&noAvatarTitleFont_sCustomTextFontSize_noAvatarTitleFont != v7)
    || (objc_msgSend((id)noAvatarTitleFont_sCustomTextFontName_noAvatarTitleFont, "isEqualToString:", v10, *(double *)&noAvatarTitleFont_sCustomTextFontSize_noAvatarTitleFont) & 1) == 0)
  {
    uint64_t v13 = +[CKUIBehavior fontWithStyle:adjustedForMaxSizeCategory:](CKUIBehavior, "fontWithStyle:adjustedForMaxSizeCategory:", *MEMORY[0x1E4F438A0], *MEMORY[0x1E4F43780], *(double *)&v12);
    uint64_t v14 = (void *)noAvatarTitleFont_sBehavior;
    noAvatarTitleFont_sBehavior = v13;

    objc_storeStrong((id *)&noAvatarTitleFont_sContentSizeCategory_noAvatarTitleFont, v3);
    noAvatarTitleFont_sIsIncreaseContrastEnabled_noAvatarTitleFont = v4;
    noAvatarTitleFont_sIsBoldTextEnabled_noAvatarTitleFont = IsBoldTextEnabled;
    noAvatarTitleFont_sTextFontSize_noAvatarTitleFont = *(void *)&v6;
    noAvatarTitleFont_sCustomTextFontSize_noAvatarTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&noAvatarTitleFont_sCustomTextFontName_noAvatarTitleFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)noAvatarTitleFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateavatarNameFont
{
  return 0;
}

- (UIFont)avatarNameFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)avatarNameFont_sContentSizeCategory_avatarNameFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateavatarNameFont]
    || v11
    || avatarNameFont_sIsIncreaseContrastEnabled_avatarNameFont != v4
    || avatarNameFont_sIsBoldTextEnabled_avatarNameFont != IsBoldTextEnabled
    || (uint64_t v12 = avatarNameFont_sTextFontSize_avatarNameFont, *(double *)&avatarNameFont_sTextFontSize_avatarNameFont != v6)
    || (uint64_t v12 = avatarNameFont_sCustomTextFontSize_avatarNameFont,
        *(double *)&avatarNameFont_sCustomTextFontSize_avatarNameFont != v7)
    || (objc_msgSend((id)avatarNameFont_sCustomTextFontName_avatarNameFont, "isEqualToString:", v10, *(double *)&avatarNameFont_sCustomTextFontSize_avatarNameFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "defaultFontForTextStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    uint64_t v14 = (void *)avatarNameFont_sBehavior;
    avatarNameFont_sBehavior = v13;

    objc_storeStrong((id *)&avatarNameFont_sContentSizeCategory_avatarNameFont, v3);
    avatarNameFont_sIsIncreaseContrastEnabled_avatarNameFont = v4;
    avatarNameFont_sIsBoldTextEnabled_avatarNameFont = IsBoldTextEnabled;
    avatarNameFont_sTextFontSize_avatarNameFont = *(void *)&v6;
    avatarNameFont_sCustomTextFontSize_avatarNameFont = *(void *)&v7;
    objc_storeStrong((id *)&avatarNameFont_sCustomTextFontName_avatarNameFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)avatarNameFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdateavatarNameEmergencyFont
{
  return 0;
}

- (UIFont)avatarNameEmergencyFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)avatarNameEmergencyFont_sContentSizeCategory_avatarNameEmergencyFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateavatarNameEmergencyFont]
    || v11
    || avatarNameEmergencyFont_sIsIncreaseContrastEnabled_avatarNameEmergencyFont != v4
    || avatarNameEmergencyFont_sIsBoldTextEnabled_avatarNameEmergencyFont != IsBoldTextEnabled
    || *(double *)&avatarNameEmergencyFont_sTextFontSize_avatarNameEmergencyFont != v6
    || *(double *)&avatarNameEmergencyFont_sCustomTextFontSize_avatarNameEmergencyFont != v7
    || (objc_msgSend((id)avatarNameEmergencyFont_sCustomTextFontName_avatarNameEmergencyFont, "isEqualToString:", v10, *(double *)&avatarNameEmergencyFont_sCustomTextFontSize_avatarNameEmergencyFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_fontForStyle:weight:", *MEMORY[0x1E4F43880], *MEMORY[0x1E4FB09E0]);
    uint64_t v13 = (void *)avatarNameEmergencyFont_sBehavior;
    avatarNameEmergencyFont_sBehavior = v12;

    objc_storeStrong((id *)&avatarNameEmergencyFont_sContentSizeCategory_avatarNameEmergencyFont, v3);
    avatarNameEmergencyFont_sIsIncreaseContrastEnabled_avatarNameEmergencyFont = v4;
    avatarNameEmergencyFont_sIsBoldTextEnabled_avatarNameEmergencyFont = IsBoldTextEnabled;
    avatarNameEmergencyFont_sTextFontSize_avatarNameEmergencyFont = *(void *)&v6;
    avatarNameEmergencyFont_sCustomTextFontSize_avatarNameEmergencyFont = *(void *)&v7;
    objc_storeStrong((id *)&avatarNameEmergencyFont_sCustomTextFontName_avatarNameEmergencyFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)avatarNameEmergencyFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatenavigationHeaderJoinLabelFont
{
  return 0;
}

- (UIFont)navigationHeaderJoinLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)navigationHeaderJoinLabelFont_sContentSizeCategory_navigationHeaderJoinLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenavigationHeaderJoinLabelFont]
    || v11
    || navigationHeaderJoinLabelFont_sIsIncreaseContrastEnabled_navigationHeaderJoinLabelFont != v4
    || navigationHeaderJoinLabelFont_sIsBoldTextEnabled_navigationHeaderJoinLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = navigationHeaderJoinLabelFont_sTextFontSize_navigationHeaderJoinLabelFont,
        *(double *)&navigationHeaderJoinLabelFont_sTextFontSize_navigationHeaderJoinLabelFont != v6)
    || (uint64_t v12 = navigationHeaderJoinLabelFont_sCustomTextFontSize_navigationHeaderJoinLabelFont,
        *(double *)&navigationHeaderJoinLabelFont_sCustomTextFontSize_navigationHeaderJoinLabelFont != v7)
    || (objc_msgSend((id)navigationHeaderJoinLabelFont_sCustomTextFontName_navigationHeaderJoinLabelFont, "isEqualToString:", v10, *(double *)&navigationHeaderJoinLabelFont_sCustomTextFontSize_navigationHeaderJoinLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43888], *(double *)&v12);
    uint64_t v14 = (void *)navigationHeaderJoinLabelFont_sBehavior;
    navigationHeaderJoinLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&navigationHeaderJoinLabelFont_sContentSizeCategory_navigationHeaderJoinLabelFont, v3);
    navigationHeaderJoinLabelFont_sIsIncreaseContrastEnabled_navigationHeaderJoinLabelFont = v4;
    navigationHeaderJoinLabelFont_sIsBoldTextEnabled_navigationHeaderJoinLabelFont = IsBoldTextEnabled;
    navigationHeaderJoinLabelFont_sTextFontSize_navigationHeaderJoinLabelFont = *(void *)&v6;
    navigationHeaderJoinLabelFont_sCustomTextFontSize_navigationHeaderJoinLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&navigationHeaderJoinLabelFont_sCustomTextFontName_navigationHeaderJoinLabelFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)navigationHeaderJoinLabelFont_sBehavior;

  return v15;
}

- (BOOL)areBannersSupported
{
  if (areBannersSupported_once != -1) {
    dispatch_once(&areBannersSupported_once, &__block_literal_global_1806_0);
  }
  return areBannersSupported_sBehavior;
}

void __35__CKUIBehavior_areBannersSupported__block_invoke()
{
  areBannersSupported_sBehavior = 1;
}

- (CGSize)bannerCellSize
{
  if (bannerCellSize_once != -1) {
    dispatch_once(&bannerCellSize_once, &__block_literal_global_1808);
  }
  double v2 = *(double *)&bannerCellSize_sBehavior_0;
  double v3 = *(double *)&bannerCellSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __30__CKUIBehavior_bannerCellSize__block_invoke()
{
  bannerCellSize_sBehavior_0 = 0x4070800000000000;
  bannerCellSize_sBehavior_1 = 0x4041000000000000;
}

- (double)bannerAdditionalOffset
{
  if (bannerAdditionalOffset_once != -1) {
    dispatch_once(&bannerAdditionalOffset_once, &__block_literal_global_1810);
  }
  return *(double *)&bannerAdditionalOffset_sBehavior;
}

void __38__CKUIBehavior_bannerAdditionalOffset__block_invoke()
{
  bannerAdditionalOffset_sBehavior = 0x4022000000000000;
}

- (double)bannerTitleAdditionalOffset
{
  if (bannerTitleAdditionalOffset_once != -1) {
    dispatch_once(&bannerTitleAdditionalOffset_once, &__block_literal_global_1812_0);
  }
  return *(double *)&bannerTitleAdditionalOffset_sBehavior;
}

void __43__CKUIBehavior_bannerTitleAdditionalOffset__block_invoke()
{
  bannerTitleAdditionalOffset_sBehavior = 0x4020000000000000;
}

- (BOOL)ckShouldUpdatenicknameUpdatesTitleFont
{
  return 0;
}

- (UIFont)nicknameUpdatesTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)nicknameUpdatesTitleFont_sContentSizeCategory_nicknameUpdatesTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenicknameUpdatesTitleFont]
    || v11
    || nicknameUpdatesTitleFont_sIsIncreaseContrastEnabled_nicknameUpdatesTitleFont != v4
    || nicknameUpdatesTitleFont_sIsBoldTextEnabled_nicknameUpdatesTitleFont != IsBoldTextEnabled
    || (uint64_t v12 = nicknameUpdatesTitleFont_sTextFontSize_nicknameUpdatesTitleFont,
        *(double *)&nicknameUpdatesTitleFont_sTextFontSize_nicknameUpdatesTitleFont != v6)
    || (uint64_t v12 = nicknameUpdatesTitleFont_sCustomTextFontSize_nicknameUpdatesTitleFont,
        *(double *)&nicknameUpdatesTitleFont_sCustomTextFontSize_nicknameUpdatesTitleFont != v7)
    || (objc_msgSend((id)nicknameUpdatesTitleFont_sCustomTextFontName_nicknameUpdatesTitleFont, "isEqualToString:", v10, *(double *)&nicknameUpdatesTitleFont_sCustomTextFontSize_nicknameUpdatesTitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43878], *(double *)&v12);
    uint64_t v14 = (void *)nicknameUpdatesTitleFont_sBehavior;
    nicknameUpdatesTitleFont_sBehavior = v13;

    objc_storeStrong((id *)&nicknameUpdatesTitleFont_sContentSizeCategory_nicknameUpdatesTitleFont, v3);
    nicknameUpdatesTitleFont_sIsIncreaseContrastEnabled_nicknameUpdatesTitleFont = v4;
    nicknameUpdatesTitleFont_sIsBoldTextEnabled_nicknameUpdatesTitleFont = IsBoldTextEnabled;
    nicknameUpdatesTitleFont_sTextFontSize_nicknameUpdatesTitleFont = *(void *)&v6;
    nicknameUpdatesTitleFont_sCustomTextFontSize_nicknameUpdatesTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&nicknameUpdatesTitleFont_sCustomTextFontName_nicknameUpdatesTitleFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)nicknameUpdatesTitleFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatenicknameUpdatesSubtitleFont
{
  return 0;
}

- (UIFont)nicknameUpdatesSubtitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  CGRect v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    double v9 = v8;
  }
  else {
    double v9 = @"None";
  }
  uint64_t v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)nicknameUpdatesSubtitleFont_sContentSizeCategory_nicknameUpdatesSubtitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenicknameUpdatesSubtitleFont]
    || v11
    || nicknameUpdatesSubtitleFont_sIsIncreaseContrastEnabled_nicknameUpdatesSubtitleFont != v4
    || nicknameUpdatesSubtitleFont_sIsBoldTextEnabled_nicknameUpdatesSubtitleFont != IsBoldTextEnabled
    || (uint64_t v12 = nicknameUpdatesSubtitleFont_sTextFontSize_nicknameUpdatesSubtitleFont,
        *(double *)&nicknameUpdatesSubtitleFont_sTextFontSize_nicknameUpdatesSubtitleFont != v6)
    || (uint64_t v12 = nicknameUpdatesSubtitleFont_sCustomTextFontSize_nicknameUpdatesSubtitleFont,
        *(double *)&nicknameUpdatesSubtitleFont_sCustomTextFontSize_nicknameUpdatesSubtitleFont != v7)
    || (objc_msgSend((id)nicknameUpdatesSubtitleFont_sCustomTextFontName_nicknameUpdatesSubtitleFont, "isEqualToString:", v10, *(double *)&nicknameUpdatesSubtitleFont_sCustomTextFontSize_nicknameUpdatesSubtitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    uint64_t v14 = (void *)nicknameUpdatesSubtitleFont_sBehavior;
    nicknameUpdatesSubtitleFont_sBehavior = v13;

    objc_storeStrong((id *)&nicknameUpdatesSubtitleFont_sContentSizeCategory_nicknameUpdatesSubtitleFont, v3);
    nicknameUpdatesSubtitleFont_sIsIncreaseContrastEnabled_nicknameUpdatesSubtitleFont = v4;
    nicknameUpdatesSubtitleFont_sIsBoldTextEnabled_nicknameUpdatesSubtitleFont = IsBoldTextEnabled;
    nicknameUpdatesSubtitleFont_sTextFontSize_nicknameUpdatesSubtitleFont = *(void *)&v6;
    nicknameUpdatesSubtitleFont_sCustomTextFontSize_nicknameUpdatesSubtitleFont = *(void *)&v7;
    objc_storeStrong((id *)&nicknameUpdatesSubtitleFont_sCustomTextFontName_nicknameUpdatesSubtitleFont, v9);
  }
  uint64_t v15 = (UIFont *)(id)nicknameUpdatesSubtitleFont_sBehavior;

  return v15;
}

- (UIButtonConfiguration)nicknameUpdatesButtonConfiguration
{
  if (nicknameUpdatesButtonConfiguration_once != -1) {
    dispatch_once(&nicknameUpdatesButtonConfiguration_once, &__block_literal_global_1814);
  }
  double v2 = (void *)nicknameUpdatesButtonConfiguration_sBehavior;

  return (UIButtonConfiguration *)v2;
}

void __50__CKUIBehavior_nicknameUpdatesButtonConfiguration__block_invoke()
{
  double v0 = [MEMORY[0x1E4F427E8] plainButtonConfiguration];
  [v0 contentInsets];
  objc_msgSend(v0, "setContentInsets:");
  double v1 = (void *)nicknameUpdatesButtonConfiguration_sBehavior;
  nicknameUpdatesButtonConfiguration_sBehavior = (uint64_t)v0;
}

- (void)prewarmAcknowledgementsImage
{
  id v3 = [(CKUIBehavior *)self grayHeartAckImage];
  id v4 = [(CKUIBehavior *)self whiteHeartAckImage];
  id v5 = [(CKUIBehavior *)self grayThumbsUpAckImage];
  id v6 = [(CKUIBehavior *)self grayThumbsUpAckImage];
  id v7 = [(CKUIBehavior *)self grayThumbsDownAckImage];
  id v8 = [(CKUIBehavior *)self grayExclamationLeftAckImage];
  id v9 = [(CKUIBehavior *)self grayExclamationRightAckImage];
  id v10 = [(CKUIBehavior *)self grayQuestionMarkGlyphAckImage];
  id v11 = [(CKUIBehavior *)self grayQuestionMarkDotAckImage];
  id v12 = [(CKUIBehavior *)self grayHaAckImage];
  id v13 = [(CKUIBehavior *)self grayH1AckImage];
  id v14 = [(CKUIBehavior *)self grayA1AckImage];
  id v15 = [(CKUIBehavior *)self grayH2AckImage];
  id v16 = [(CKUIBehavior *)self grayA2AckImage];
  id v17 = [(CKUIBehavior *)self redHeartAckImage];
  id v18 = [(CKUIBehavior *)self whiteThumbsUpAckImage];
  id v19 = [(CKUIBehavior *)self whiteThumbsDownAckImage];
  id v20 = [(CKUIBehavior *)self whiteExclamationRightAckImage];
  id v21 = [(CKUIBehavior *)self whiteExclamationLeftAckImage];
  id v22 = [(CKUIBehavior *)self whiteQuestionMarkGlyphAckImage];
  id v23 = [(CKUIBehavior *)self whiteQuestionMarkDotAckImage];
  id v24 = [(CKUIBehavior *)self whiteHaAckImage];
  id v25 = [(CKUIBehavior *)self whiteH1AckImage];
  id v26 = [(CKUIBehavior *)self whiteH2AckImage];
  id v27 = [(CKUIBehavior *)self whiteH2AckImage];
  id v28 = [(CKUIBehavior *)self whiteA1AckImage];
  id v29 = [(CKUIBehavior *)self whiteA2AckImage];
}

- (UIImage)grayHeartAckImage
{
  if (grayHeartAckImage_once != -1) {
    dispatch_once(&grayHeartAckImage_once, &__block_literal_global_1816_0);
  }
  double v2 = (void *)grayHeartAckImage_sBehavior;

  return (UIImage *)v2;
}

void __33__CKUIBehavior_grayHeartAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentGrayColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-Heart", v2);

  id v4 = (void *)grayHeartAckImage_sBehavior;
  grayHeartAckImage_sBehavior = v3;
}

- (UIImage)whiteHeartAckImage
{
  if (whiteHeartAckImage_once != -1) {
    dispatch_once(&whiteHeartAckImage_once, &__block_literal_global_1821);
  }
  double v2 = (void *)whiteHeartAckImage_sBehavior;

  return (UIImage *)v2;
}

void __34__CKUIBehavior_whiteHeartAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentWhiteColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-Heart", v2);

  id v4 = (void *)whiteHeartAckImage_sBehavior;
  whiteHeartAckImage_sBehavior = v3;
}

- (UIImage)grayThumbsUpAckImage
{
  if (grayThumbsUpAckImage_once != -1) {
    dispatch_once(&grayThumbsUpAckImage_once, &__block_literal_global_1823);
  }
  double v2 = (void *)grayThumbsUpAckImage_sBehavior;

  return (UIImage *)v2;
}

void __36__CKUIBehavior_grayThumbsUpAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentGrayColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-ThumbsUp", v2);

  id v4 = (void *)grayThumbsUpAckImage_sBehavior;
  grayThumbsUpAckImage_sBehavior = v3;
}

- (UIImage)grayThumbsDownAckImage
{
  if (grayThumbsDownAckImage_once != -1) {
    dispatch_once(&grayThumbsDownAckImage_once, &__block_literal_global_1828);
  }
  double v2 = (void *)grayThumbsDownAckImage_sBehavior;

  return (UIImage *)v2;
}

void __38__CKUIBehavior_grayThumbsDownAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentGrayColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-ThumbsDown", v2);

  id v4 = (void *)grayThumbsDownAckImage_sBehavior;
  grayThumbsDownAckImage_sBehavior = v3;
}

- (UIImage)grayExclamationLeftAckImage
{
  if (grayExclamationLeftAckImage_once != -1) {
    dispatch_once(&grayExclamationLeftAckImage_once, &__block_literal_global_1833_0);
  }
  double v2 = (void *)grayExclamationLeftAckImage_sBehavior;

  return (UIImage *)v2;
}

void __43__CKUIBehavior_grayExclamationLeftAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentGrayColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-Left-Exclamation", v2);

  id v4 = (void *)grayExclamationLeftAckImage_sBehavior;
  grayExclamationLeftAckImage_sBehavior = v3;
}

- (UIImage)grayExclamationRightAckImage
{
  if (grayExclamationRightAckImage_once != -1) {
    dispatch_once(&grayExclamationRightAckImage_once, &__block_literal_global_1838);
  }
  double v2 = (void *)grayExclamationRightAckImage_sBehavior;

  return (UIImage *)v2;
}

void __44__CKUIBehavior_grayExclamationRightAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentGrayColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-Right-Exclamation", v2);

  id v4 = (void *)grayExclamationRightAckImage_sBehavior;
  grayExclamationRightAckImage_sBehavior = v3;
}

- (UIImage)grayQuestionMarkGlyphAckImage
{
  if (grayQuestionMarkGlyphAckImage_once != -1) {
    dispatch_once(&grayQuestionMarkGlyphAckImage_once, &__block_literal_global_1843);
  }
  double v2 = (void *)grayQuestionMarkGlyphAckImage_sBehavior;

  return (UIImage *)v2;
}

void __45__CKUIBehavior_grayQuestionMarkGlyphAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentGrayColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-QuestionMark-Glyph", v2);

  id v4 = (void *)grayQuestionMarkGlyphAckImage_sBehavior;
  grayQuestionMarkGlyphAckImage_sBehavior = v3;
}

- (UIImage)grayQuestionMarkDotAckImage
{
  if (grayQuestionMarkDotAckImage_once != -1) {
    dispatch_once(&grayQuestionMarkDotAckImage_once, &__block_literal_global_1848);
  }
  double v2 = (void *)grayQuestionMarkDotAckImage_sBehavior;

  return (UIImage *)v2;
}

void __43__CKUIBehavior_grayQuestionMarkDotAckImage__block_invoke()
{
  double v0 = +[CKUIBehavior sharedBehaviors];
  double v1 = [v0 theme];
  double v2 = [v1 messageAcknowledgmentGrayColor];
  uint64_t v3 = CKImageNamedWithDynamicTintColor(@"Acknowledgments-Menu-QuestionMark-Dot", v2);

  id v4 = (void *)grayQuestionMarkDotAckImage_sBehavior;
  grayQuestionMarkDotAckImage_sBehavior = v3;
}

- (UIImage)grayHaAckImage
{
  if (grayHaAckImage_once != -1) {
    dispatch_once(&grayHaAckImage_once, &__block_literal_global_1853);
  }
  double v2 = (void *)grayHaAckImage_sBehavior;

  return (UIImage *)v2;
}

void __30__CKUIBehavior_grayHaAckImage__block_invoke()
{
  double v0 = NSString;
  double v1 = CKFrameworkBundle();
  double v2 = [v1 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
  uint64_t v3 = [v0 stringWithFormat:@"%@-%@", @"Acknowledgments-Menu-HAHA", v2];

  id v4 = +[CKUIBehavior sharedBehaviors];
  id v5 = [v4 theme];
  id v6 = [v5 messageAcknowledgmentGrayColor];
  uint64_t v7 = CKImageNamedWithDynamicTintColor(v3, v6);

  id v8 = (void *)grayHaAckImage_sBehavior;
  grayHaAckImage_sBehavior = v7;
}

- (UIImage)grayH1AckImage
{
  if (grayH1AckImage_once != -1) {
    dispatch_once(&grayH1AckImage_once, &__block_literal_global_1867);
  }
  double v2 = (void *)grayH1AckImage_sBehavior;

  return (UIImage *)v2;
}

void __30__CKUIBehavior_grayH1AckImage__block_invoke()
{
  double v0 = NSString;
  double v1 = CKFrameworkBundle();
  double v2 = [v1 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
  uint64_t v3 = [v0 stringWithFormat:@"%@-%@-1", @"Acknowledgments-Menu-HAHA", v2];

  id v4 = +[CKUIBehavior sharedBehaviors];
  id v5 = [v4 theme];
  id v6 = [v5 messageAcknowledgmentGrayColor];
  uint64_t v7 = CKImageNamedWithDynamicTintColor(v3, v6);

  id v8 = (void *)grayH1AckImage_sBehavior;
  grayH1AckImage_sBehavior = v7;
}

- (UIImage)grayA1AckImage
{
  if (grayA1AckImage_once != -1) {
    dispatch_once(&grayA1AckImage_once, &__block_literal_global_1872);
  }
  double v2 = (void *)grayA1AckImage_sBehavior;

  return (UIImage *)v2;
}

void __30__CKUIBehavior_grayA1AckImage__block_invoke()
{
  double v0 = NSString;
  double v1 = CKFrameworkBundle();
  double v2 = [v1 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
  uint64_t v3 = [v0 stringWithFormat:@"%@-%@-2", @"Acknowledgments-Menu-HAHA", v2];

  id v4 = +[CKUIBehavior sharedBehaviors];
  id v5 = [v4 theme];
  id v6 = [v5 messageAcknowledgmentGrayColor];
  uint64_t v7 = CKImageNamedWithDynamicTintColor(v3, v6);

  id v8 = (void *)grayA1AckImage_sBehavior;
  grayA1AckImage_sBehavior = v7;
}

- (UIImage)grayH2AckImage
{
  if (grayH2AckImage_once != -1) {
    dispatch_once(&grayH2AckImage_once, &__block_literal_global_1877_0);
  }
  double v2 = (void *)grayH2AckImage_sBehavior;

  return (UIImage *)v2;
}

void __30__CKUIBehavior_grayH2AckImage__block_invoke()
{
  double v0 = NSString;
  double v1 = CKFrameworkBundle();
  double v2 = [v1 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
  uint64_t v3 = [v0 stringWithFormat:@"%@-%@-3", @"Acknowledgments-Menu-HAHA", v2];

  id v4 = +[CKUIBehavior sharedBehaviors];
  id v5 = [v4 theme];
  id v6 = [v5 messageAcknowledgmentGrayColor];
  uint64_t v7 = CKImageNamedWithDynamicTintColor(v3, v6);

  id v8 = (void *)grayH2AckImage_sBehavior;
  grayH2AckImage_sBehavior = v7;
}

- (UIImage)grayA2AckImage
{
  if (grayA2AckImage_once != -1) {
    dispatch_once(&grayA2AckImage_once, &__block_literal_global_1882);
  }
  double v2 = (void *)grayA2AckImage_sBehavior;

  return (UIImage *)v2;
}

void __30__CKUIBehavior_grayA2AckImage__block_invoke()
{
  double v0 = NSString;
  double v1 = CKFrameworkBundle();
  double v2 = [v1 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
  uint64_t v3 = [v0 stringWithFormat:@"%@-%@-4", @"Acknowledgments-Menu-HAHA", v2];

  id v4 = +[CKUIBehavior sharedBehaviors];
  id v5 = [v4 theme];
  id v6 = [v5 messageAcknowledgmentGrayColor];
  uint64_t v7 = CKImageNamedWithDynamicTintColor(v3, v6);

  id v8 = (void *)grayA2AckImage_sBehavior;
  grayA2AckImage_sBehavior = v7;
}

- (UIImage)redHeartAckImage
{
  if (redHeartAckImage_once != -1) {
    dispatch_once(&redHeartAckImage_once, &__block_literal_global_1887);
  }
  double v2 = (void *)redHeartAckImage_sBehavior;

  return (UIImage *)v2;
}

void __32__CKUIBehavior_redHeartAckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-Heart"];
  double v1 = +[CKUIBehavior sharedBehaviors];
  double v2 = [v1 theme];
  uint64_t v3 = [v2 messageAcknowledgmentRedColor];
  uint64_t v4 = [v0 _flatImageWithColor:v3];

  id v5 = (void *)redHeartAckImage_sBehavior;
  redHeartAckImage_sBehavior = v4;
}

- (UIImage)whiteThumbsUpAckImage
{
  if (whiteThumbsUpAckImage_once != -1) {
    dispatch_once(&whiteThumbsUpAckImage_once, &__block_literal_global_1889_0);
  }
  double v2 = (void *)whiteThumbsUpAckImage_sBehavior;

  return (UIImage *)v2;
}

void __37__CKUIBehavior_whiteThumbsUpAckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-ThumbsUp"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteThumbsUpAckImage_sBehavior;
  whiteThumbsUpAckImage_sBehavior = v2;
}

- (UIImage)whiteThumbsDownAckImage
{
  if (whiteThumbsDownAckImage_once != -1) {
    dispatch_once(&whiteThumbsDownAckImage_once, &__block_literal_global_1891);
  }
  uint64_t v2 = (void *)whiteThumbsDownAckImage_sBehavior;

  return (UIImage *)v2;
}

void __39__CKUIBehavior_whiteThumbsDownAckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-ThumbsDown"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteThumbsDownAckImage_sBehavior;
  whiteThumbsDownAckImage_sBehavior = v2;
}

- (UIImage)whiteExclamationRightAckImage
{
  if (whiteExclamationRightAckImage_once != -1) {
    dispatch_once(&whiteExclamationRightAckImage_once, &__block_literal_global_1893);
  }
  uint64_t v2 = (void *)whiteExclamationRightAckImage_sBehavior;

  return (UIImage *)v2;
}

void __45__CKUIBehavior_whiteExclamationRightAckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-Right-Exclamation"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteExclamationRightAckImage_sBehavior;
  whiteExclamationRightAckImage_sBehavior = v2;
}

- (UIImage)whiteExclamationLeftAckImage
{
  if (whiteExclamationLeftAckImage_once != -1) {
    dispatch_once(&whiteExclamationLeftAckImage_once, &__block_literal_global_1895);
  }
  uint64_t v2 = (void *)whiteExclamationLeftAckImage_sBehavior;

  return (UIImage *)v2;
}

void __44__CKUIBehavior_whiteExclamationLeftAckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-Left-Exclamation"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteExclamationLeftAckImage_sBehavior;
  whiteExclamationLeftAckImage_sBehavior = v2;
}

- (UIImage)whiteQuestionMarkGlyphAckImage
{
  if (whiteQuestionMarkGlyphAckImage_once != -1) {
    dispatch_once(&whiteQuestionMarkGlyphAckImage_once, &__block_literal_global_1897);
  }
  uint64_t v2 = (void *)whiteQuestionMarkGlyphAckImage_sBehavior;

  return (UIImage *)v2;
}

void __46__CKUIBehavior_whiteQuestionMarkGlyphAckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-QuestionMark-Glyph"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteQuestionMarkGlyphAckImage_sBehavior;
  whiteQuestionMarkGlyphAckImage_sBehavior = v2;
}

- (UIImage)whiteQuestionMarkDotAckImage
{
  if (whiteQuestionMarkDotAckImage_once != -1) {
    dispatch_once(&whiteQuestionMarkDotAckImage_once, &__block_literal_global_1899);
  }
  uint64_t v2 = (void *)whiteQuestionMarkDotAckImage_sBehavior;

  return (UIImage *)v2;
}

void __44__CKUIBehavior_whiteQuestionMarkDotAckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-QuestionMark-Dot"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteQuestionMarkDotAckImage_sBehavior;
  whiteQuestionMarkDotAckImage_sBehavior = v2;
}

- (UIImage)whiteHaAckImage
{
  if (whiteHaAckImage_once != -1) {
    dispatch_once(&whiteHaAckImage_once, &__block_literal_global_1901);
  }
  uint64_t v2 = (void *)whiteHaAckImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_whiteHaAckImage__block_invoke()
{
  double v0 = NSString;
  double v1 = CKFrameworkBundle();
  uint64_t v2 = [v1 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
  uint64_t v3 = [v0 stringWithFormat:@"%@-%@", @"Acknowledgments-Menu-HAHA", v2];

  uint64_t v4 = [MEMORY[0x1E4F42A80] ckImageNamed:v3];
  id v5 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v6 = [v4 _flatImageWithColor:v5];

  uint64_t v7 = (void *)whiteHaAckImage_sBehavior;
  whiteHaAckImage_sBehavior = v6;
}

- (UIImage)whiteH1AckImage
{
  if (whiteH1AckImage_once != -1) {
    dispatch_once(&whiteH1AckImage_once, &__block_literal_global_1903);
  }
  uint64_t v2 = (void *)whiteH1AckImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_whiteH1AckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-HAHA-ENG-1"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteH1AckImage_sBehavior;
  whiteH1AckImage_sBehavior = v2;
}

- (UIImage)whiteH2AckImage
{
  if (whiteH2AckImage_once != -1) {
    dispatch_once(&whiteH2AckImage_once, &__block_literal_global_1908);
  }
  uint64_t v2 = (void *)whiteH2AckImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_whiteH2AckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-HAHA-ENG-2"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteH2AckImage_sBehavior;
  whiteH2AckImage_sBehavior = v2;
}

- (UIImage)whiteA1AckImage
{
  if (whiteA1AckImage_once != -1) {
    dispatch_once(&whiteA1AckImage_once, &__block_literal_global_1913);
  }
  uint64_t v2 = (void *)whiteA1AckImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_whiteA1AckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-HAHA-ENG-3"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteA1AckImage_sBehavior;
  whiteA1AckImage_sBehavior = v2;
}

- (UIImage)whiteA2AckImage
{
  if (whiteA2AckImage_once != -1) {
    dispatch_once(&whiteA2AckImage_once, &__block_literal_global_1918);
  }
  uint64_t v2 = (void *)whiteA2AckImage_sBehavior;

  return (UIImage *)v2;
}

void __31__CKUIBehavior_whiteA2AckImage__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A80] ckImageNamed:@"Acknowledgments-Menu-HAHA-ENG-4"];
  double v1 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v2 = [v0 _flatImageWithColor:v1];

  uint64_t v3 = (void *)whiteA2AckImage_sBehavior;
  whiteA2AckImage_sBehavior = v2;
}

- (UIImage)businessVerifiedImageLarge
{
  if (businessVerifiedImageLarge_once != -1) {
    dispatch_once(&businessVerifiedImageLarge_once, &__block_literal_global_1923);
  }
  uint64_t v2 = (void *)businessVerifiedImageLarge_sBehavior;

  return (UIImage *)v2;
}

void __42__CKUIBehavior_businessVerifiedImageLarge__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A98] configurationWithTextStyle:*MEMORY[0x1E4F438C0] scale:3];
  double v1 = [MEMORY[0x1E4F42A80] systemImageNamed:@"checkmark.seal.fill" withConfiguration:v0];
  uint64_t v2 = [v1 imageWithRenderingMode:2];

  uint64_t v3 = (void *)businessVerifiedImageLarge_sBehavior;
  businessVerifiedImageLarge_sBehavior = v2;
}

- (UIImage)businessVerifiedImageSmall
{
  if (businessVerifiedImageSmall_once != -1) {
    dispatch_once(&businessVerifiedImageSmall_once, &__block_literal_global_1928);
  }
  uint64_t v2 = (void *)businessVerifiedImageSmall_sBehavior;

  return (UIImage *)v2;
}

void __42__CKUIBehavior_businessVerifiedImageSmall__block_invoke()
{
  double v0 = [MEMORY[0x1E4F42A98] configurationWithTextStyle:*MEMORY[0x1E4F438C0] scale:1];
  double v1 = [MEMORY[0x1E4F42A80] systemImageNamed:@"checkmark.seal.fill" withConfiguration:v0];
  uint64_t v2 = [v1 imageWithRenderingMode:2];

  uint64_t v3 = (void *)businessVerifiedImageSmall_sBehavior;
  businessVerifiedImageSmall_sBehavior = v2;
}

- (UIImage)businessFallbackImage
{
  if (businessFallbackImage_once != -1) {
    dispatch_once(&businessFallbackImage_once, &__block_literal_global_1930);
  }
  uint64_t v2 = (void *)businessFallbackImage_sBehavior;

  return (UIImage *)v2;
}

void __37__CKUIBehavior_businessFallbackImage__block_invoke()
{
  double v0 = (void *)MEMORY[0x1E4F42A80];
  double v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.Contacts.ContactsUICore"];
  uint64_t v2 = [v0 imageNamed:@"company-silhouette-S" inBundle:v1 compatibleWithTraitCollection:0];

  uint64_t v3 = (void *)businessFallbackImage_sBehavior;
  businessFallbackImage_sBehavior = v2;
}

- (UIImage)navBarHeaderChevronImageNoAvatar
{
  uint64_t v2 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v3 = [(CKUIBehavior *)self noAvatarTitleFont];
  uint64_t v4 = [v2 configurationWithFont:v3 scale:1];

  id v5 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v6 = [MEMORY[0x1E4F428B8] tertiaryLabelColor];
  uint64_t v7 = [v5 configurationWithHierarchicalColor:v6];
  id v8 = [v4 configurationByApplyingConfiguration:v7];

  id v9 = [MEMORY[0x1E4F42A80] systemImageNamed:@"chevron.forward"];
  id v10 = [v9 imageWithSymbolConfiguration:v8];

  return (UIImage *)v10;
}

- (UIImage)navBarHeaderOpaqueChevronImageNoAvatar
{
  uint64_t v2 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v3 = [(CKUIBehavior *)self noAvatarTitleFont];
  uint64_t v4 = [v2 configurationWithFont:v3 scale:1];

  id v5 = [MEMORY[0x1E4F42A80] systemImageNamed:@"chevron.forward" withConfiguration:v4];
  uint64_t v6 = [v5 imageWithRenderingMode:2];

  return (UIImage *)v6;
}

- (id)navBarHeaderChevronImageDefault
{
  uint64_t v2 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v3 = [(CKUIBehavior *)self avatarStackTitleFont];
  uint64_t v4 = [v2 configurationWithFont:v3 scale:1];

  id v5 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v6 = [MEMORY[0x1E4F428B8] tertiaryLabelColor];
  uint64_t v7 = [v5 configurationWithHierarchicalColor:v6];
  id v8 = [v4 configurationByApplyingConfiguration:v7];

  id v9 = [MEMORY[0x1E4F42A80] systemImageNamed:@"chevron.forward"];
  id v10 = [v9 imageWithSymbolConfiguration:v8];
  id v11 = [v10 imageWithBaselineOffsetFromBottom:1.0];

  return v11;
}

- (id)navBarHeaderOpaqueChevronImageDefault
{
  uint64_t v2 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v3 = [(CKUIBehavior *)self avatarStackTitleFont];
  uint64_t v4 = [v2 configurationWithFont:v3 scale:1];

  id v5 = [MEMORY[0x1E4F42A80] systemImageNamed:@"chevron.forward"];
  uint64_t v6 = [v5 imageWithSymbolConfiguration:v4];
  uint64_t v7 = [v6 imageWithBaselineOffsetFromBottom:1.0];
  id v8 = [v7 imageWithRenderingMode:2];

  return v8;
}

- (UIImage)navBarHeaderChevronImage
{
  if ([(CKUIBehavior *)self contactPhotosEnabled]) {
    [(CKUIBehavior *)self navBarHeaderChevronImageDefault];
  }
  else {
  uint64_t v3 = [(CKUIBehavior *)self navBarHeaderChevronImageNoAvatar];
  }

  return (UIImage *)v3;
}

- (UIImage)navBarHeaderOpaqueChevronImage
{
  if ([(CKUIBehavior *)self contactPhotosEnabled]) {
    [(CKUIBehavior *)self navBarHeaderOpaqueChevronImageDefault];
  }
  else {
  uint64_t v3 = [(CKUIBehavior *)self navBarHeaderOpaqueChevronImageNoAvatar];
  }

  return (UIImage *)v3;
}

- (UIImage)navBarHeaderVideoImage
{
  if (navBarHeaderVideoImage_once != -1) {
    dispatch_once(&navBarHeaderVideoImage_once, &__block_literal_global_1939);
  }
  uint64_t v2 = (void *)navBarHeaderVideoImage_sBehavior;

  return (UIImage *)v2;
}

void __38__CKUIBehavior_navBarHeaderVideoImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"video.fill"];
  double v1 = (void *)navBarHeaderVideoImage_sBehavior;
  navBarHeaderVideoImage_sBehavior = v0;
}

- (UIImage)navBarHeaderAudioImage
{
  if (navBarHeaderAudioImage_once != -1) {
    dispatch_once(&navBarHeaderAudioImage_once, &__block_literal_global_1941_0);
  }
  uint64_t v2 = (void *)navBarHeaderAudioImage_sBehavior;

  return (UIImage *)v2;
}

void __38__CKUIBehavior_navBarHeaderAudioImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"phone.fill"];
  double v1 = (void *)navBarHeaderAudioImage_sBehavior;
  navBarHeaderAudioImage_sBehavior = v0;
}

- (UIImage)navBarHeaderExpanseImage
{
  if (navBarHeaderExpanseImage_once != -1) {
    dispatch_once(&navBarHeaderExpanseImage_once, &__block_literal_global_1943);
  }
  uint64_t v2 = (void *)navBarHeaderExpanseImage_sBehavior;

  return (UIImage *)v2;
}

void __40__CKUIBehavior_navBarHeaderExpanseImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"shareplay"];
  double v1 = (void *)navBarHeaderExpanseImage_sBehavior;
  navBarHeaderExpanseImage_sBehavior = v0;
}

- (BOOL)ckShouldUpdatenavBarGlyphFont
{
  return 0;
}

- (id)navBarGlyphFont
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)navBarGlyphFont_sContentSizeCategory_navBarGlyphFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatenavBarGlyphFont]
    || v11
    || navBarGlyphFont_sIsIncreaseContrastEnabled_navBarGlyphFont != v4
    || navBarGlyphFont_sIsBoldTextEnabled_navBarGlyphFont != IsBoldTextEnabled
    || *(double *)&navBarGlyphFont_sTextFontSize_navBarGlyphFont != v6
    || *(double *)&navBarGlyphFont_sCustomTextFontSize_navBarGlyphFont != v7
    || (objc_msgSend((id)navBarGlyphFont_sCustomTextFontName_navBarGlyphFont, "isEqualToString:", v10, *(double *)&navBarGlyphFont_sCustomTextFontSize_navBarGlyphFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:17.0];
    id v13 = (void *)navBarGlyphFont_sBehavior;
    navBarGlyphFont_sBehavior = v12;

    objc_storeStrong((id *)&navBarGlyphFont_sContentSizeCategory_navBarGlyphFont, v3);
    navBarGlyphFont_sIsIncreaseContrastEnabled_navBarGlyphFont = v4;
    navBarGlyphFont_sIsBoldTextEnabled_navBarGlyphFont = IsBoldTextEnabled;
    navBarGlyphFont_sTextFontSize_navBarGlyphFont = *(void *)&v6;
    navBarGlyphFont_sCustomTextFontSize_navBarGlyphFont = *(void *)&v7;
    objc_storeStrong((id *)&navBarGlyphFont_sCustomTextFontName_navBarGlyphFont, v9);
  }
  id v14 = (id)navBarGlyphFont_sBehavior;

  return v14;
}

- (UIImage)navBarVideoImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __32__CKUIBehavior_navBarVideoImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (navBarVideoImage_once != -1) {
    dispatch_once(&navBarVideoImage_once, block);
  }
  return (UIImage *)(id)navBarVideoImage_sBehavior;
}

void __32__CKUIBehavior_navBarVideoImage__block_invoke(uint64_t a1)
{
  double v1 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v2 = [*(id *)(a1 + 32) navBarGlyphFont];
  uint64_t v3 = [v1 configurationWithFont:v2];

  int v4 = [MEMORY[0x1E4F42A80] systemImageNamed:@"video" withConfiguration:v3];
  uint64_t v5 = [v4 imageWithRenderingMode:2];

  double v6 = (void *)navBarVideoImage_sBehavior;
  navBarVideoImage_sBehavior = v5;
}

- (UIImage)navBarVideoFillImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__CKUIBehavior_navBarVideoFillImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (navBarVideoFillImage_once != -1) {
    dispatch_once(&navBarVideoFillImage_once, block);
  }
  return (UIImage *)(id)navBarVideoFillImage_sBehavior;
}

void __36__CKUIBehavior_navBarVideoFillImage__block_invoke(uint64_t a1)
{
  double v1 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v2 = [*(id *)(a1 + 32) navBarGlyphFont];
  uint64_t v3 = [v1 configurationWithFont:v2];

  int v4 = [MEMORY[0x1E4F42A80] systemImageNamed:@"video.fill" withConfiguration:v3];
  uint64_t v5 = [v4 imageWithRenderingMode:2];

  double v6 = (void *)navBarVideoFillImage_sBehavior;
  navBarVideoFillImage_sBehavior = v5;
}

- (UIImage)navBarAudioImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __32__CKUIBehavior_navBarAudioImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (navBarAudioImage_once != -1) {
    dispatch_once(&navBarAudioImage_once, block);
  }
  return (UIImage *)(id)navBarAudioImage_sBehavior;
}

void __32__CKUIBehavior_navBarAudioImage__block_invoke(uint64_t a1)
{
  double v1 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v2 = [*(id *)(a1 + 32) navBarGlyphFont];
  uint64_t v3 = [v1 configurationWithFont:v2];

  int v4 = [MEMORY[0x1E4F42A80] systemImageNamed:@"phone" withConfiguration:v3];
  uint64_t v5 = [v4 imageWithRenderingMode:2];

  double v6 = (void *)navBarAudioImage_sBehavior;
  navBarAudioImage_sBehavior = v5;
}

- (UIImage)navBarAudioFillImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__CKUIBehavior_navBarAudioFillImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (navBarAudioFillImage_once != -1) {
    dispatch_once(&navBarAudioFillImage_once, block);
  }
  return (UIImage *)(id)navBarAudioFillImage_sBehavior;
}

void __36__CKUIBehavior_navBarAudioFillImage__block_invoke(uint64_t a1)
{
  double v1 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v2 = [*(id *)(a1 + 32) navBarGlyphFont];
  uint64_t v3 = [v1 configurationWithFont:v2];

  int v4 = [MEMORY[0x1E4F42A80] systemImageNamed:@"phone.fill" withConfiguration:v3];
  uint64_t v5 = [v4 imageWithRenderingMode:2];

  double v6 = (void *)navBarAudioFillImage_sBehavior;
  navBarAudioFillImage_sBehavior = v5;
}

- (UIImage)navBarSharePlayImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__CKUIBehavior_navBarSharePlayImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (navBarSharePlayImage_once != -1) {
    dispatch_once(&navBarSharePlayImage_once, block);
  }
  return (UIImage *)(id)navBarSharePlayImage_sBehavior;
}

void __36__CKUIBehavior_navBarSharePlayImage__block_invoke(uint64_t a1)
{
  double v1 = (void *)MEMORY[0x1E4F42A98];
  uint64_t v2 = [*(id *)(a1 + 32) navBarGlyphFont];
  uint64_t v3 = [v1 configurationWithFont:v2];

  int v4 = [MEMORY[0x1E4F42A80] systemImageNamed:@"shareplay" withConfiguration:v3];
  uint64_t v5 = [v4 imageWithRenderingMode:2];

  double v6 = (void *)navBarSharePlayImage_sBehavior;
  navBarSharePlayImage_sBehavior = v5;
}

- (BOOL)ckShouldUpdatenavBarUnifiedCallButtonJoinTextFont
{
  return 0;
}

- (UIFont)navBarUnifiedCallButtonJoinTextFont
{
  CKPreferredContentSizeCategory();
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)navBarUnifiedCallButtonJoinTextFont_sContentSizeCategory_navBarUnifiedCallButtonJoinTextFont, v3);
  if (-[CKUIBehavior ckShouldUpdatenavBarUnifiedCallButtonJoinTextFont](self, "ckShouldUpdatenavBarUnifiedCallButtonJoinTextFont")|| v11|| navBarUnifiedCallButtonJoinTextFont_sIsIncreaseContrastEnabled_navBarUnifiedCallButtonJoinTextFont != v4|| navBarUnifiedCallButtonJoinTextFont_sIsBoldTextEnabled_navBarUnifiedCallButtonJoinTextFont != IsBoldTextEnabled|| (uint64_t v12 = navBarUnifiedCallButtonJoinTextFont_sTextFontSize_navBarUnifiedCallButtonJoinTextFont, *(double *)&navBarUnifiedCallButtonJoinTextFont_sTextFontSize_navBarUnifiedCallButtonJoinTextFont != v6)|| (uint64_t v12 = navBarUnifiedCallButtonJoinTextFont_sCustomTextFontSize_navBarUnifiedCallButtonJoinTextFont, *(double *)&navBarUnifiedCallButtonJoinTextFont_sCustomTextFontSize_navBarUnifiedCallButtonJoinTextFont != v7)|| (objc_msgSend((id)navBarUnifiedCallButtonJoinTextFont_sCustomTextFontName_navBarUnifiedCallButtonJoinTextFont, "isEqualToString:", v10, *(double *)&navBarUnifiedCallButtonJoinTextFont_sCustomTextFontSize_navBarUnifiedCallButtonJoinTextFont) & 1) == 0)
  {
    id v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438C8], 2, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    id v15 = (void *)navBarUnifiedCallButtonJoinTextFont_sBehavior;
    navBarUnifiedCallButtonJoinTextFont_sBehavior = v14;

    objc_storeStrong((id *)&navBarUnifiedCallButtonJoinTextFont_sContentSizeCategory_navBarUnifiedCallButtonJoinTextFont, v3);
    navBarUnifiedCallButtonJoinTextFont_sIsIncreaseContrastEnabled_navBarUnifiedCallButtonJoinTextFont = v4;
    navBarUnifiedCallButtonJoinTextFont_sIsBoldTextEnabled_navBarUnifiedCallButtonJoinTextFont = IsBoldTextEnabled;
    navBarUnifiedCallButtonJoinTextFont_sTextFontSize_navBarUnifiedCallButtonJoinTextFont = *(void *)&v6;
    navBarUnifiedCallButtonJoinTextFont_sCustomTextFontSize_navBarUnifiedCallButtonJoinTextFont = *(void *)&v7;
    objc_storeStrong((id *)&navBarUnifiedCallButtonJoinTextFont_sCustomTextFontName_navBarUnifiedCallButtonJoinTextFont, v9);
  }
  id v16 = (UIFont *)(id)navBarUnifiedCallButtonJoinTextFont_sBehavior;

  return v16;
}

- (BOOL)recipientSelectionCollapsedHeightIncludesNavigationBar
{
  if (recipientSelectionCollapsedHeightIncludesNavigationBar_once != -1) {
    dispatch_once(&recipientSelectionCollapsedHeightIncludesNavigationBar_once, &__block_literal_global_1951_0);
  }
  return 0;
}

- (BOOL)recipientSelectionViewRequiresMainScreenBounds
{
  if (recipientSelectionViewRequiresMainScreenBounds_once != -1) {
    dispatch_once(&recipientSelectionViewRequiresMainScreenBounds_once, &__block_literal_global_1953);
  }
  return recipientSelectionViewRequiresMainScreenBounds_sBehavior;
}

void __62__CKUIBehavior_recipientSelectionViewRequiresMainScreenBounds__block_invoke()
{
  recipientSelectionViewRequiresMainScreenBounds_sBehavior = 1;
}

- (BOOL)recipientSelectionSearchControllerRequiresFlexibleMargins
{
  if (recipientSelectionSearchControllerRequiresFlexibleMargins_once != -1) {
    dispatch_once(&recipientSelectionSearchControllerRequiresFlexibleMargins_once, &__block_literal_global_1955_0);
  }
  return 0;
}

- (BOOL)recipientSelectionSearchControllerHidesInfoButton
{
  if (recipientSelectionSearchControllerHidesInfoButton_once != -1) {
    dispatch_once(&recipientSelectionSearchControllerHidesInfoButton_once, &__block_literal_global_1957);
  }
  return 0;
}

- (BOOL)recipientSelectionShouldSlideToField
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __52__CKUIBehavior_recipientSelectionShouldSlideToField__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (recipientSelectionShouldSlideToField_once != -1) {
    dispatch_once(&recipientSelectionShouldSlideToField_once, block);
  }
  return recipientSelectionShouldSlideToField_sBehavior;
}

uint64_t __52__CKUIBehavior_recipientSelectionShouldSlideToField__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) canAccessContacts];
  recipientSelectionShouldSlideToField_sBehavior = result;
  return result;
}

- (UIEdgeInsets)additionalComposeRecipientLayoutMargins
{
  if (additionalComposeRecipientLayoutMargins_once != -1) {
    dispatch_once(&additionalComposeRecipientLayoutMargins_once, &__block_literal_global_1959_0);
  }
  double v3 = *((double *)&additionalComposeRecipientLayoutMargins_sBehavior + 1);
  double v2 = *(double *)&additionalComposeRecipientLayoutMargins_sBehavior;
  double v4 = *(double *)&qword_1E9249270;
  double v5 = unk_1E9249278;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

__n128 __55__CKUIBehavior_additionalComposeRecipientLayoutMargins__block_invoke()
{
  __n128 result = *(__n128 *)MEMORY[0x1E4F437F8];
  long long v1 = *(_OWORD *)(MEMORY[0x1E4F437F8] + 16);
  additionalComposeRecipientLayoutMargins_sBehavior = *MEMORY[0x1E4F437F8];
  *(_OWORD *)&qword_1E9249270 = v1;
  return result;
}

- (double)recipientSelectionBackgroundPlatterCornerRadius
{
  if (recipientSelectionBackgroundPlatterCornerRadius_once != -1) {
    dispatch_once(&recipientSelectionBackgroundPlatterCornerRadius_once, &__block_literal_global_1961);
  }
  return *(double *)&recipientSelectionBackgroundPlatterCornerRadius_sBehavior;
}

void __63__CKUIBehavior_recipientSelectionBackgroundPlatterCornerRadius__block_invoke()
{
  recipientSelectionBackgroundPlatterCornerRadius_sBehavior = 0x4024000000000000;
}

- (double)recipientSelectionBackgroundPlatterVerticalInset
{
  if (recipientSelectionBackgroundPlatterVerticalInset_once != -1) {
    dispatch_once(&recipientSelectionBackgroundPlatterVerticalInset_once, &__block_literal_global_1963);
  }
  return *(double *)&recipientSelectionBackgroundPlatterVerticalInset_sBehavior;
}

void __64__CKUIBehavior_recipientSelectionBackgroundPlatterVerticalInset__block_invoke()
{
  recipientSelectionBackgroundPlatterVerticalInset_sBehavior = 0x4010000000000000;
}

- (double)defaultToolbarHeight
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__CKUIBehavior_defaultToolbarHeight__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (defaultToolbarHeight_once != -1) {
    dispatch_once(&defaultToolbarHeight_once, block);
  }
  return *(double *)&defaultToolbarHeight_sBehavior;
}

uint64_t __36__CKUIBehavior_defaultToolbarHeight__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) macAppKitToolbarHeight];
  defaultToolbarHeight_sBehavior = v2;
  return result;
}

- (CGSize)businessBannerSize
{
  if (businessBannerSize_once != -1) {
    dispatch_once(&businessBannerSize_once, &__block_literal_global_1965_0);
  }
  double v2 = *(double *)&businessBannerSize_sBehavior_0;
  double v3 = *(double *)&businessBannerSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __34__CKUIBehavior_businessBannerSize__block_invoke()
{
  businessBannerSize_sBehavior_0 = 0x4066800000000000;
  businessBannerSize_sBehavior_1 = 0x403B000000000000;
}

- (double)businessSquareToolbarLogoHeight
{
  if (businessSquareToolbarLogoHeight_once != -1) {
    dispatch_once(&businessSquareToolbarLogoHeight_once, &__block_literal_global_1967);
  }
  return *(double *)&businessSquareToolbarLogoHeight_sBehavior;
}

void __47__CKUIBehavior_businessSquareToolbarLogoHeight__block_invoke()
{
  businessSquareToolbarLogoHeight_sBehavior = 0x4041800000000000;
}

- (unint64_t)messageAcknowledgmentVotingStackSize
{
  if (messageAcknowledgmentVotingStackSize_once != -1) {
    dispatch_once(&messageAcknowledgmentVotingStackSize_once, &__block_literal_global_1969_0);
  }
  if (messageAcknowledgmentVotingStackSize_sBehavior) {
    return 4;
  }
  else {
    return 0;
  }
}

void __52__CKUIBehavior_messageAcknowledgmentVotingStackSize__block_invoke()
{
  messageAcknowledgmentVotingStackSize_sBehavior = 1;
}

- (id)fullscreenPickerActionLayoutAxisPrioritiesForWidth:(double)a3
{
  return &unk_1EDF153B0;
}

- (BOOL)longPressHidesAssociatedAcknowledgments
{
  if (longPressHidesAssociatedAcknowledgments_once != -1) {
    dispatch_once(&longPressHidesAssociatedAcknowledgments_once, &__block_literal_global_1975);
  }
  return 0;
}

- (BOOL)canTapAssociatedAcknowledgment
{
  if (canTapAssociatedAcknowledgment_once != -1) {
    dispatch_once(&canTapAssociatedAcknowledgment_once, &__block_literal_global_1977_0);
  }
  return canTapAssociatedAcknowledgment_sBehavior;
}

void __46__CKUIBehavior_canTapAssociatedAcknowledgment__block_invoke()
{
  canTapAssociatedAcknowledgment_sBehavior = 1;
}

- (unint64_t)suggestedAcknowledgementCount
{
  if (suggestedAcknowledgementCount_once != -1) {
    dispatch_once(&suggestedAcknowledgementCount_once, &__block_literal_global_1979);
  }
  if (suggestedAcknowledgementCount_sBehavior) {
    return 6;
  }
  else {
    return 0;
  }
}

void __45__CKUIBehavior_suggestedAcknowledgementCount__block_invoke()
{
  suggestedAcknowledgementCount_sBehavior = 1;
}

- (CGSize)messageAcknowledgmentTranscriptBalloonSize
{
  if (messageAcknowledgmentTranscriptBalloonSize_once != -1) {
    dispatch_once(&messageAcknowledgmentTranscriptBalloonSize_once, &__block_literal_global_1981);
  }
  double v2 = *(double *)&messageAcknowledgmentTranscriptBalloonSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentTranscriptBalloonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __58__CKUIBehavior_messageAcknowledgmentTranscriptBalloonSize__block_invoke()
{
  messageAcknowledgmentTranscriptBalloonSize_sBehavior_0 = 0x4042000000000000;
  messageAcknowledgmentTranscriptBalloonSize_sBehavior_1 = 0x4042000000000000;
}

- (UIEdgeInsets)messageAcknowledgmentTranscriptGlyphInset
{
  if (messageAcknowledgmentTranscriptGlyphInset_once != -1) {
    dispatch_once(&messageAcknowledgmentTranscriptGlyphInset_once, &__block_literal_global_1983_0);
  }
  double v2 = *(double *)&messageAcknowledgmentTranscriptGlyphInset_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentTranscriptGlyphInset_sBehavior_1;
  double v4 = *(double *)&messageAcknowledgmentTranscriptGlyphInset_sBehavior_2;
  double v5 = *(double *)&messageAcknowledgmentTranscriptGlyphInset_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __57__CKUIBehavior_messageAcknowledgmentTranscriptGlyphInset__block_invoke()
{
  messageAcknowledgmentTranscriptGlyphInset_sBehavior_0 = 0x4010000000000000;
  messageAcknowledgmentTranscriptGlyphInset_sBehavior_1 = 0x4010000000000000;
  messageAcknowledgmentTranscriptGlyphInset_sBehavior_2 = 0x4010000000000000;
  messageAcknowledgmentTranscriptGlyphInset_sBehavior_3 = 0x4010000000000000;
}

- (CGPoint)messageAcknowledgmentTranscriptBalloonRelativePosition
{
  if (messageAcknowledgmentTranscriptBalloonRelativePosition_once != -1) {
    dispatch_once(&messageAcknowledgmentTranscriptBalloonRelativePosition_once, &__block_literal_global_1985);
  }
  double v2 = *(double *)&messageAcknowledgmentTranscriptBalloonRelativePosition_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentTranscriptBalloonRelativePosition_sBehavior_1;
  result.y = v3;
  result.x = v2;
  return result;
}

void __70__CKUIBehavior_messageAcknowledgmentTranscriptBalloonRelativePosition__block_invoke()
{
  id v3 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  if ([v3 isEmojiTapbacksEnabled])
  {
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v0 = 1.0;
    }
    double v1 = round(v0 * 12.5) / v0;
    double v2 = -15.5;
  }
  else
  {
    if (CKMainScreenScale_once_38 != -1) {
      dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
    }
    double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
    if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
      double v0 = 1.0;
    }
    double v1 = round(v0 * 12.5) / v0;
    double v2 = -17.5;
  }
  messageAcknowledgmentTranscriptBalloonRelativePosition_sBehavior_0 = *(void *)&v1;
  *(double *)&messageAcknowledgmentTranscriptBalloonRelativePosition_sBehavior_1 = round(v0 * v2) / v0;
}

- (CGPoint)messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset
{
  if (messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset_once != -1) {
    dispatch_once(&messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset_once, &__block_literal_global_1987);
  }
  double v2 = *(double *)&messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset_sBehavior_1;
  result.y = v3;
  result.x = v2;
  return result;
}

void __77__CKUIBehavior_messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset__block_invoke()
{
  messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset_sBehavior_0 = 0x4008000000000000;
  messageAcknowledgmentTranscriptOrganicBalloonAdditionalOffset_sBehavior_1 = 0xC020000000000000;
}

- (double)messageAcknowledgmentPhotoCarouselXOffsetScalar
{
  if (messageAcknowledgmentPhotoCarouselXOffsetScalar_once != -1) {
    dispatch_once(&messageAcknowledgmentPhotoCarouselXOffsetScalar_once, &__block_literal_global_1989_0);
  }
  return *(double *)&messageAcknowledgmentPhotoCarouselXOffsetScalar_sBehavior;
}

void __63__CKUIBehavior_messageAcknowledgmentPhotoCarouselXOffsetScalar__block_invoke()
{
  messageAcknowledgmentPhotoCarouselXOffsetScalar_sBehavior = 0x3FC99999A0000000;
}

- (double)messageAcknowledgmentPhotoGridXOffsetScalar
{
  if (messageAcknowledgmentPhotoGridXOffsetScalar_once != -1) {
    dispatch_once(&messageAcknowledgmentPhotoGridXOffsetScalar_once, &__block_literal_global_1991);
  }
  return 0.0;
}

- (double)messageAcknowledgmentPhotoGridYOffsetScalar
{
  if (messageAcknowledgmentPhotoGridYOffsetScalar_once != -1) {
    dispatch_once(&messageAcknowledgmentPhotoGridYOffsetScalar_once, &__block_literal_global_1993_0);
  }
  return *(double *)&messageAcknowledgmentPhotoGridYOffsetScalar_sBehavior;
}

void __59__CKUIBehavior_messageAcknowledgmentPhotoGridYOffsetScalar__block_invoke()
{
  messageAcknowledgmentPhotoGridYOffsetScalar_sBehavior = 0x3FC99999A0000000;
}

- (CGSize)messageAcknowledgmentPickerBarSize
{
  if (messageAcknowledgmentPickerBarSize_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarSize_once, &__block_literal_global_1995);
  }
  double v2 = *(double *)&messageAcknowledgmentPickerBarSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentPickerBarSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __50__CKUIBehavior_messageAcknowledgmentPickerBarSize__block_invoke()
{
  messageAcknowledgmentPickerBarSize_sBehavior_0 = 0x4073600000000000;
  messageAcknowledgmentPickerBarSize_sBehavior_1 = 0x4052800000000000;
}

- (CGSize)messageAcknowledgmentPickerBarAcknowledgmentImageSize
{
  if (messageAcknowledgmentPickerBarAcknowledgmentImageSize_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarAcknowledgmentImageSize_once, &__block_literal_global_1997_0);
  }
  double v2 = *(double *)&messageAcknowledgmentPickerBarAcknowledgmentImageSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentPickerBarAcknowledgmentImageSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __69__CKUIBehavior_messageAcknowledgmentPickerBarAcknowledgmentImageSize__block_invoke()
{
  messageAcknowledgmentPickerBarAcknowledgmentImageSize_sBehavior_0 = 0x4042000000000000;
  messageAcknowledgmentPickerBarAcknowledgmentImageSize_sBehavior_1 = 0x4042000000000000;
}

- (CGSize)messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize
{
  if (messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize_once, &__block_literal_global_1999_0);
  }
  double v2 = *(double *)&messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __75__CKUIBehavior_messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize__block_invoke()
{
  messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize_sBehavior_0 = 0x4045000000000000;
  messageAcknowledgmentPickerBarAcknowledgmentItemBalloonSize_sBehavior_1 = 0x4045000000000000;
}

- (CGSize)messageAcknowledgmentPickerBarOffsetFromBalloon
{
  if (messageAcknowledgmentPickerBarOffsetFromBalloon_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarOffsetFromBalloon_once, &__block_literal_global_2001);
  }
  double v2 = *(double *)&messageAcknowledgmentPickerBarOffsetFromBalloon_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentPickerBarOffsetFromBalloon_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __63__CKUIBehavior_messageAcknowledgmentPickerBarOffsetFromBalloon__block_invoke()
{
  messageAcknowledgmentPickerBarOffsetFromBalloon_sBehavior_0 = 0x403E000000000000;
  messageAcknowledgmentPickerBarOffsetFromBalloon_sBehavior_1 = 0x4028000000000000;
}

- (double)messageAcknowledgmentPickerBarPadding
{
  if (messageAcknowledgmentPickerBarPadding_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarPadding_once, &__block_literal_global_2003_0);
  }
  return *(double *)&messageAcknowledgmentPickerBarPadding_sBehavior;
}

void __53__CKUIBehavior_messageAcknowledgmentPickerBarPadding__block_invoke()
{
  messageAcknowledgmentPickerBarPadding_sBehavior = 0x4014000000000000;
}

- (double)messageAcknowledgmentPickerBarArrowPadding
{
  if (messageAcknowledgmentPickerBarArrowPadding_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarArrowPadding_once, &__block_literal_global_2005);
  }
  return *(double *)&messageAcknowledgmentPickerBarArrowPadding_sBehavior;
}

void __58__CKUIBehavior_messageAcknowledgmentPickerBarArrowPadding__block_invoke()
{
  messageAcknowledgmentPickerBarArrowPadding_sBehavior = 0x4020000000000000;
}

- (double)messageAcknowledgmentPickerBarArrowWidth
{
  if (messageAcknowledgmentPickerBarArrowWidth_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarArrowWidth_once, &__block_literal_global_2007_0);
  }
  return *(double *)&messageAcknowledgmentPickerBarArrowWidth_sBehavior;
}

void __56__CKUIBehavior_messageAcknowledgmentPickerBarArrowWidth__block_invoke()
{
  messageAcknowledgmentPickerBarArrowWidth_sBehavior = 0x4038000000000000;
}

- (double)messageAcknowledgmentPickerBarItemSectionScaleFactor
{
  if (messageAcknowledgmentPickerBarItemSectionScaleFactor_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarItemSectionScaleFactor_once, &__block_literal_global_2009);
  }
  return *(double *)&messageAcknowledgmentPickerBarItemSectionScaleFactor_sBehavior;
}

void __68__CKUIBehavior_messageAcknowledgmentPickerBarItemSectionScaleFactor__block_invoke()
{
  messageAcknowledgmentPickerBarItemSectionScaleFactor_sBehavior = 0x3FEB333333333333;
}

- (double)messageAcknowledgmentPickerBarItemSectionPush
{
  if (messageAcknowledgmentPickerBarItemSectionPush_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarItemSectionPush_once, &__block_literal_global_2011_0);
  }
  return *(double *)&messageAcknowledgmentPickerBarItemSectionPush_sBehavior;
}

void __61__CKUIBehavior_messageAcknowledgmentPickerBarItemSectionPush__block_invoke()
{
  messageAcknowledgmentPickerBarItemSectionPush_sBehavior = 0x4020000000000000;
}

- (CGSize)aggregateAcknowledgmentTranscriptBalloonSize
{
  if (aggregateAcknowledgmentTranscriptBalloonSize_once != -1) {
    dispatch_once(&aggregateAcknowledgmentTranscriptBalloonSize_once, &__block_literal_global_2013);
  }
  double v2 = *(double *)&aggregateAcknowledgmentTranscriptBalloonSize_sBehavior_0;
  double v3 = *(double *)&aggregateAcknowledgmentTranscriptBalloonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __60__CKUIBehavior_aggregateAcknowledgmentTranscriptBalloonSize__block_invoke()
{
  aggregateAcknowledgmentTranscriptBalloonSize_sBehavior_0 = 0x4047000000000000;
  aggregateAcknowledgmentTranscriptBalloonSize_sBehavior_1 = 0x4044000000000000;
}

- (CGSize)messageAcknowledgmentVotingAvatarSize
{
  if (messageAcknowledgmentVotingAvatarSize_once != -1) {
    dispatch_once(&messageAcknowledgmentVotingAvatarSize_once, &__block_literal_global_2015_0);
  }
  double v2 = *(double *)&messageAcknowledgmentVotingAvatarSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentVotingAvatarSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __53__CKUIBehavior_messageAcknowledgmentVotingAvatarSize__block_invoke()
{
  messageAcknowledgmentVotingAvatarSize_sBehavior_0 = 0x4044000000000000;
  messageAcknowledgmentVotingAvatarSize_sBehavior_1 = 0x4044000000000000;
}

- (BOOL)ckShouldUpdatemessageAcknowledgmentVoteCountFont
{
  return 0;
}

- (UIFont)messageAcknowledgmentVoteCountFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)messageAcknowledgmentVoteCountFont_sContentSizeCategory_messageAcknowledgmentVoteCountFont, v3);
  if (-[CKUIBehavior ckShouldUpdatemessageAcknowledgmentVoteCountFont](self, "ckShouldUpdatemessageAcknowledgmentVoteCountFont")|| v11|| messageAcknowledgmentVoteCountFont_sIsIncreaseContrastEnabled_messageAcknowledgmentVoteCountFont != v4|| messageAcknowledgmentVoteCountFont_sIsBoldTextEnabled_messageAcknowledgmentVoteCountFont != IsBoldTextEnabled|| (uint64_t v12 = messageAcknowledgmentVoteCountFont_sTextFontSize_messageAcknowledgmentVoteCountFont, *(double *)&messageAcknowledgmentVoteCountFont_sTextFontSize_messageAcknowledgmentVoteCountFont != v6)|| (uint64_t v12 = messageAcknowledgmentVoteCountFont_sCustomTextFontSize_messageAcknowledgmentVoteCountFont, *(double *)&messageAcknowledgmentVoteCountFont_sCustomTextFontSize_messageAcknowledgmentVoteCountFont != v7)|| (objc_msgSend((id)messageAcknowledgmentVoteCountFont_sCustomTextFontName_messageAcknowledgmentVoteCountFont, "isEqualToString:", v10, *(double *)&messageAcknowledgmentVoteCountFont_sCustomTextFontSize_messageAcknowledgmentVoteCountFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    uint64_t v14 = (void *)messageAcknowledgmentVoteCountFont_sBehavior;
    messageAcknowledgmentVoteCountFont_sBehavior = v13;

    objc_storeStrong((id *)&messageAcknowledgmentVoteCountFont_sContentSizeCategory_messageAcknowledgmentVoteCountFont, v3);
    messageAcknowledgmentVoteCountFont_sIsIncreaseContrastEnabled_messageAcknowledgmentVoteCountFont = v4;
    messageAcknowledgmentVoteCountFont_sIsBoldTextEnabled_messageAcknowledgmentVoteCountFont = IsBoldTextEnabled;
    messageAcknowledgmentVoteCountFont_sTextFontSize_messageAcknowledgmentVoteCountFont = *(void *)&v6;
    messageAcknowledgmentVoteCountFont_sCustomTextFontSize_messageAcknowledgmentVoteCountFont = *(void *)&v7;
    objc_storeStrong((id *)&messageAcknowledgmentVoteCountFont_sCustomTextFontName_messageAcknowledgmentVoteCountFont, v9);
  }
  id v15 = (UIFont *)(id)messageAcknowledgmentVoteCountFont_sBehavior;

  return v15;
}

- (double)messageAcknowledgementVotingViewHeight
{
  if (messageAcknowledgementVotingViewHeight_once != -1) {
    dispatch_once(&messageAcknowledgementVotingViewHeight_once, &__block_literal_global_2017);
  }
  return *(double *)&messageAcknowledgementVotingViewHeight_sBehavior;
}

void __54__CKUIBehavior_messageAcknowledgementVotingViewHeight__block_invoke()
{
  messageAcknowledgementVotingViewHeight_sBehavior = 0x4052000000000000;
}

- (double)messageAcknowledgementVotingViewMaxWidth
{
  if (messageAcknowledgementVotingViewMaxWidth_once != -1) {
    dispatch_once(&messageAcknowledgementVotingViewMaxWidth_once, &__block_literal_global_2019_0);
  }
  return *(double *)&messageAcknowledgementVotingViewMaxWidth_sBehavior;
}

void __56__CKUIBehavior_messageAcknowledgementVotingViewMaxWidth__block_invoke()
{
  messageAcknowledgementVotingViewMaxWidth_sBehavior = 0x4079000000000000;
}

- (double)messageAcknowledgementVotingViewMinPadding
{
  if (messageAcknowledgementVotingViewMinPadding_once != -1) {
    dispatch_once(&messageAcknowledgementVotingViewMinPadding_once, &__block_literal_global_2021);
  }
  return *(double *)&messageAcknowledgementVotingViewMinPadding_sBehavior;
}

void __58__CKUIBehavior_messageAcknowledgementVotingViewMinPadding__block_invoke()
{
  messageAcknowledgementVotingViewMinPadding_sBehavior = 0x4020000000000000;
}

- (CGSize)messageAcknowledgmentAnchorBubbleOffset
{
  if (messageAcknowledgmentAnchorBubbleOffset_once != -1) {
    dispatch_once(&messageAcknowledgmentAnchorBubbleOffset_once, &__block_literal_global_2023);
  }
  double v2 = *(double *)&messageAcknowledgmentAnchorBubbleOffset_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentAnchorBubbleOffset_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __55__CKUIBehavior_messageAcknowledgmentAnchorBubbleOffset__block_invoke()
{
  messageAcknowledgmentAnchorBubbleOffset_sBehavior_0 = 0x4020000000000000;
  messageAcknowledgmentAnchorBubbleOffset_sBehavior_1 = 0x4000000000000000;
}

- (double)messageAcknowledgmentPickerMinHorizontalMargin
{
  if (messageAcknowledgmentPickerMinHorizontalMargin_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerMinHorizontalMargin_once, &__block_literal_global_2025_0);
  }
  return *(double *)&messageAcknowledgmentPickerMinHorizontalMargin_sBehavior;
}

void __62__CKUIBehavior_messageAcknowledgmentPickerMinHorizontalMargin__block_invoke()
{
  messageAcknowledgmentPickerMinHorizontalMargin_sBehavior = 0x4014000000000000;
}

- (CGSize)messageAcknowledgmentAnchorBubbleSize
{
  if (messageAcknowledgmentAnchorBubbleSize_once != -1) {
    dispatch_once(&messageAcknowledgmentAnchorBubbleSize_once, &__block_literal_global_2027);
  }
  double v2 = *(double *)&messageAcknowledgmentAnchorBubbleSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentAnchorBubbleSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __53__CKUIBehavior_messageAcknowledgmentAnchorBubbleSize__block_invoke()
{
  messageAcknowledgmentAnchorBubbleSize_sBehavior_0 = 0x4020000000000000;
  messageAcknowledgmentAnchorBubbleSize_sBehavior_1 = 0x401C000000000000;
}

- (CGSize)messageAcknowledgmentIntermediateBubbleSize
{
  if (messageAcknowledgmentIntermediateBubbleSize_once != -1) {
    dispatch_once(&messageAcknowledgmentIntermediateBubbleSize_once, &__block_literal_global_2029_0);
  }
  double v2 = *(double *)&messageAcknowledgmentIntermediateBubbleSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentIntermediateBubbleSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __59__CKUIBehavior_messageAcknowledgmentIntermediateBubbleSize__block_invoke()
{
  messageAcknowledgmentIntermediateBubbleSize_sBehavior_0 = 0x4030000000000000;
  messageAcknowledgmentIntermediateBubbleSize_sBehavior_1 = 0x402E000000000000;
}

- (CGSize)messageAcknowledgmentPillBubbleSize
{
  if (messageAcknowledgmentPillBubbleSize_once != -1) {
    dispatch_once(&messageAcknowledgmentPillBubbleSize_once, &__block_literal_global_2031);
  }
  double v2 = *(double *)&messageAcknowledgmentPillBubbleSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentPillBubbleSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __51__CKUIBehavior_messageAcknowledgmentPillBubbleSize__block_invoke()
{
  messageAcknowledgmentPillBubbleSize_sBehavior_0 = 0x4073600000000000;
  messageAcknowledgmentPillBubbleSize_sBehavior_1 = 0x404A000000000000;
}

- (double)messageAcknowledgmentButtonMargin
{
  if (messageAcknowledgmentButtonMargin_once != -1) {
    dispatch_once(&messageAcknowledgmentButtonMargin_once, &__block_literal_global_2033_0);
  }
  return *(double *)&messageAcknowledgmentButtonMargin_sBehavior;
}

void __49__CKUIBehavior_messageAcknowledgmentButtonMargin__block_invoke()
{
  messageAcknowledgmentButtonMargin_sBehavior = 0x4024000000000000;
}

- (CGSize)messageAcknowledgmentButtonSize
{
  if (messageAcknowledgmentButtonSize_once != -1) {
    dispatch_once(&messageAcknowledgmentButtonSize_once, &__block_literal_global_2035);
  }
  double v2 = *(double *)&messageAcknowledgmentButtonSize_sBehavior_0;
  double v3 = *(double *)&messageAcknowledgmentButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __47__CKUIBehavior_messageAcknowledgmentButtonSize__block_invoke()
{
  messageAcknowledgmentButtonSize_sBehavior_0 = 0x4044000000000000;
  messageAcknowledgmentButtonSize_sBehavior_1 = 0x4044000000000000;
}

- (CGSize)attributionViewAvatarSize
{
  if (attributionViewAvatarSize_once != -1) {
    dispatch_once(&attributionViewAvatarSize_once, &__block_literal_global_2037);
  }
  double v2 = *(double *)&attributionViewAvatarSize_sBehavior_0;
  double v3 = *(double *)&attributionViewAvatarSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __41__CKUIBehavior_attributionViewAvatarSize__block_invoke()
{
  attributionViewAvatarSize_sBehavior_0 = 0x4044000000000000;
  attributionViewAvatarSize_sBehavior_1 = 0x4044000000000000;
}

- (double)attributionViewHeight
{
  if (attributionViewHeight_once != -1) {
    dispatch_once(&attributionViewHeight_once, &__block_literal_global_2039);
  }
  return *(double *)&attributionViewHeight_sBehavior;
}

void __37__CKUIBehavior_attributionViewHeight__block_invoke()
{
  attributionViewHeight_sBehavior = 0x4060800000000000;
}

- (double)attributionViewMaxWidth
{
  if (attributionViewMaxWidth_once != -1) {
    dispatch_once(&attributionViewMaxWidth_once, &__block_literal_global_2041_0);
  }
  return *(double *)&attributionViewMaxWidth_sBehavior;
}

void __39__CKUIBehavior_attributionViewMaxWidth__block_invoke()
{
  attributionViewMaxWidth_sBehavior = 0x4079000000000000;
}

- (double)attributionViewMinPadding
{
  if (attributionViewMinPadding_once != -1) {
    dispatch_once(&attributionViewMinPadding_once, &__block_literal_global_2043);
  }
  return *(double *)&attributionViewMinPadding_sBehavior;
}

void __41__CKUIBehavior_attributionViewMinPadding__block_invoke()
{
  attributionViewMinPadding_sBehavior = 0x4018000000000000;
}

- (BOOL)ckShouldUpdateattributionCountViewFont
{
  return 0;
}

- (UIFont)attributionCountViewFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)attributionCountViewFont_sContentSizeCategory_attributionCountViewFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateattributionCountViewFont]
    || v11
    || attributionCountViewFont_sIsIncreaseContrastEnabled_attributionCountViewFont != v4
    || attributionCountViewFont_sIsBoldTextEnabled_attributionCountViewFont != IsBoldTextEnabled
    || *(double *)&attributionCountViewFont_sTextFontSize_attributionCountViewFont != v6
    || *(double *)&attributionCountViewFont_sCustomTextFontSize_attributionCountViewFont != v7
    || (objc_msgSend((id)attributionCountViewFont_sCustomTextFontName_attributionCountViewFont, "isEqualToString:", v10, *(double *)&attributionCountViewFont_sCustomTextFontSize_attributionCountViewFont) & 1) == 0)
  {
    uint64_t v12 = [MEMORY[0x1E4FB08E0] systemFontOfSize:13.0 weight:*MEMORY[0x1E4FB09C0]];
    uint64_t v13 = (void *)attributionCountViewFont_sBehavior;
    attributionCountViewFont_sBehavior = v12;

    objc_storeStrong((id *)&attributionCountViewFont_sContentSizeCategory_attributionCountViewFont, v3);
    attributionCountViewFont_sIsIncreaseContrastEnabled_attributionCountViewFont = v4;
    attributionCountViewFont_sIsBoldTextEnabled_attributionCountViewFont = IsBoldTextEnabled;
    attributionCountViewFont_sTextFontSize_attributionCountViewFont = *(void *)&v6;
    attributionCountViewFont_sCustomTextFontSize_attributionCountViewFont = *(void *)&v7;
    objc_storeStrong((id *)&attributionCountViewFont_sCustomTextFontName_attributionCountViewFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)attributionCountViewFont_sBehavior;

  return v14;
}

- (CGSize)attributionCountViewImageSize
{
  if (attributionCountViewImageSize_once != -1) {
    dispatch_once(&attributionCountViewImageSize_once, &__block_literal_global_2045);
  }
  double v2 = *(double *)&attributionCountViewImageSize_sBehavior_0;
  double v3 = *(double *)&attributionCountViewImageSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __45__CKUIBehavior_attributionCountViewImageSize__block_invoke()
{
  attributionCountViewImageSize_sBehavior_0 = 0x4034000000000000;
  attributionCountViewImageSize_sBehavior_1 = 0x4034000000000000;
}

- (CGSize)attributionIconSize
{
  if (attributionIconSize_once != -1) {
    dispatch_once(&attributionIconSize_once, &__block_literal_global_2047);
  }
  double v2 = *(double *)&attributionIconSize_sBehavior_0;
  double v3 = *(double *)&attributionIconSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __35__CKUIBehavior_attributionIconSize__block_invoke()
{
  attributionIconSize_sBehavior_0 = 0x4038000000000000;
  attributionIconSize_sBehavior_1 = 0x4038000000000000;
}

- (double)attributionCountAndImageViewPadding
{
  if (attributionCountAndImageViewPadding_once != -1) {
    dispatch_once(&attributionCountAndImageViewPadding_once, &__block_literal_global_2049);
  }
  return *(double *)&attributionCountAndImageViewPadding_sBehavior;
}

void __51__CKUIBehavior_attributionCountAndImageViewPadding__block_invoke()
{
  attributionCountAndImageViewPadding_sBehavior = 0x4000000000000000;
}

- (CGSize)attributionStickerDetailsViewButtonSize
{
  if (attributionStickerDetailsViewButtonSize_once != -1) {
    dispatch_once(&attributionStickerDetailsViewButtonSize_once, &__block_literal_global_2051);
  }
  double v2 = *(double *)&attributionStickerDetailsViewButtonSize_sBehavior_0;
  double v3 = *(double *)&attributionStickerDetailsViewButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __55__CKUIBehavior_attributionStickerDetailsViewButtonSize__block_invoke()
{
  attributionStickerDetailsViewButtonSize_sBehavior_0 = 0x4044000000000000;
  attributionStickerDetailsViewButtonSize_sBehavior_1 = 0x4044000000000000;
}

- (CGSize)attributionStickerDetailsViewAvatarSize
{
  if (attributionStickerDetailsViewAvatarSize_once != -1) {
    dispatch_once(&attributionStickerDetailsViewAvatarSize_once, &__block_literal_global_2053);
  }
  double v2 = *(double *)&attributionStickerDetailsViewAvatarSize_sBehavior_0;
  double v3 = *(double *)&attributionStickerDetailsViewAvatarSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __55__CKUIBehavior_attributionStickerDetailsViewAvatarSize__block_invoke()
{
  attributionStickerDetailsViewAvatarSize_sBehavior_0 = 0x4034000000000000;
  attributionStickerDetailsViewAvatarSize_sBehavior_1 = 0x4034000000000000;
}

- (CGSize)attributionStickerDetailsViewImageSize
{
  if (attributionStickerDetailsViewImageSize_once != -1) {
    dispatch_once(&attributionStickerDetailsViewImageSize_once, &__block_literal_global_2055);
  }
  double v2 = *(double *)&attributionStickerDetailsViewImageSize_sBehavior_0;
  double v3 = *(double *)&attributionStickerDetailsViewImageSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __54__CKUIBehavior_attributionStickerDetailsViewImageSize__block_invoke()
{
  attributionStickerDetailsViewImageSize_sBehavior_0 = 0x404E000000000000;
  attributionStickerDetailsViewImageSize_sBehavior_1 = 0x404E000000000000;
}

- (BOOL)attributionViewShouldCenterInTranscript
{
  if (attributionViewShouldCenterInTranscript_once != -1) {
    dispatch_once(&attributionViewShouldCenterInTranscript_once, &__block_literal_global_2057);
  }
  return 0;
}

- (double)attributionViewAdditionalTopOffset
{
  if (attributionViewAdditionalTopOffset_once != -1) {
    dispatch_once(&attributionViewAdditionalTopOffset_once, &__block_literal_global_2059);
  }
  return *(double *)&attributionViewAdditionalTopOffset_sBehavior;
}

void __50__CKUIBehavior_attributionViewAdditionalTopOffset__block_invoke()
{
  attributionViewAdditionalTopOffset_sBehavior = 0x4010000000000000;
}

- (UIFont)attributionStickerDetailsViewSenderNameFont
{
  if (attributionStickerDetailsViewSenderNameFont_once != -1) {
    dispatch_once(&attributionStickerDetailsViewSenderNameFont_once, &__block_literal_global_2061);
  }
  double v2 = (void *)attributionStickerDetailsViewSenderNameFont_sBehavior;

  return (UIFont *)v2;
}

void __59__CKUIBehavior_attributionStickerDetailsViewSenderNameFont__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4FB08E0] boldSystemFontOfSize:14.0];
  double v1 = (void *)attributionStickerDetailsViewSenderNameFont_sBehavior;
  attributionStickerDetailsViewSenderNameFont_sBehavior = v0;
}

- (UIFont)attributionStickerDetailsViewStickerPackNameFont
{
  if (attributionStickerDetailsViewStickerPackNameFont_once != -1) {
    dispatch_once(&attributionStickerDetailsViewStickerPackNameFont_once, &__block_literal_global_2063);
  }
  double v2 = (void *)attributionStickerDetailsViewStickerPackNameFont_sBehavior;

  return (UIFont *)v2;
}

void __64__CKUIBehavior_attributionStickerDetailsViewStickerPackNameFont__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4FB08E0] systemFontOfSize:12.0];
  double v1 = (void *)attributionStickerDetailsViewStickerPackNameFont_sBehavior;
  attributionStickerDetailsViewStickerPackNameFont_sBehavior = v0;
}

- (CGSize)attributionCollapseButtonSize
{
  if (attributionCollapseButtonSize_once != -1) {
    dispatch_once(&attributionCollapseButtonSize_once, &__block_literal_global_2065);
  }
  double v2 = *(double *)&attributionCollapseButtonSize_sBehavior_0;
  double v3 = *(double *)&attributionCollapseButtonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __45__CKUIBehavior_attributionCollapseButtonSize__block_invoke()
{
  attributionCollapseButtonSize_sBehavior_0 = 0x4046000000000000;
  attributionCollapseButtonSize_sBehavior_1 = 0x4046000000000000;
}

- (UIEdgeInsets)attributionViewCollapsedModeInsets
{
  if (attributionViewCollapsedModeInsets_once != -1) {
    dispatch_once(&attributionViewCollapsedModeInsets_once, &__block_literal_global_2067);
  }
  double v2 = *(double *)&attributionViewCollapsedModeInsets_sBehavior_1;
  double v3 = *(double *)&attributionViewCollapsedModeInsets_sBehavior_3;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v3;
  result.double bottom = v5;
  result.double left = v2;
  result.double top = v4;
  return result;
}

void __50__CKUIBehavior_attributionViewCollapsedModeInsets__block_invoke()
{
  attributionViewCollapsedModeInsets_sBehavior_1 = 0x402C000000000000;
  attributionViewCollapsedModeInsets_sBehavior_3 = 0x402C000000000000;
}

- (double)attributionCollapseButtonLeadingInset
{
  if (attributionCollapseButtonLeadingInset_once != -1) {
    dispatch_once(&attributionCollapseButtonLeadingInset_once, &__block_literal_global_2069);
  }
  return *(double *)&attributionCollapseButtonLeadingInset_sBehavior;
}

void __53__CKUIBehavior_attributionCollapseButtonLeadingInset__block_invoke()
{
  attributionCollapseButtonLeadingInset_sBehavior = 0x4000000000000000;
}

- (double)attributionVoteCountTrailingInset
{
  if (attributionVoteCountTrailingInset_once != -1) {
    dispatch_once(&attributionVoteCountTrailingInset_once, &__block_literal_global_2071);
  }
  return *(double *)&attributionVoteCountTrailingInset_sBehavior;
}

void __49__CKUIBehavior_attributionVoteCountTrailingInset__block_invoke()
{
  attributionVoteCountTrailingInset_sBehavior = 0xC02C000000000000;
}

- (UIImage)attributionCollapseButtonImage
{
  if (attributionCollapseButtonImage_once != -1) {
    dispatch_once(&attributionCollapseButtonImage_once, &__block_literal_global_2073);
  }
  double v2 = (void *)attributionCollapseButtonImage_sBehavior;

  return (UIImage *)v2;
}

void __46__CKUIBehavior_attributionCollapseButtonImage__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42A80] systemImageNamed:@"chevron.backward"];
  double v1 = (void *)attributionCollapseButtonImage_sBehavior;
  attributionCollapseButtonImage_sBehavior = v0;
}

- (NSArray)messageAcknowledgmentPickerBarAcknowledgmentOrder
{
  return (NSArray *)&unk_1EDF153C8;
}

- (id)messageAcknowledgmentImageNameForType:(int64_t)a3
{
  switch(a3)
  {
    case 2000:
      double v3 = @"Acknowledgments-Menu-Heart";
      break;
    case 2001:
      double v3 = @"Acknowledgments-Menu-ThumbsUp";
      break;
    case 2002:
      double v3 = @"Acknowledgments-Menu-ThumbsDown";
      break;
    case 2003:
      double v4 = NSString;
      double v5 = CKFrameworkBundle();
      double v6 = [v5 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
      double v3 = [v4 stringWithFormat:@"%@-%@", @"Acknowledgments-Menu-HAHA", v6];

      break;
    case 2004:
      double v3 = @"Acknowledgments-Menu-Exclamation";
      break;
    case 2005:
      double v3 = @"Acknowledgments-Menu-QuestionMark";
      break;
    default:
      double v3 = 0;
      break;
  }

  return v3;
}

- (id)messageAcknowledgmentPollingImageNameForAcknowledgmentType:(int64_t)a3
{
  switch(a3)
  {
    case 2000:
      double v3 = @"Polling-Heart";
      break;
    case 2001:
      double v3 = @"Polling-ThumbsUp";
      break;
    case 2002:
      double v3 = @"Polling-ThumbsDown";
      break;
    case 2003:
      double v4 = NSString;
      double v5 = CKFrameworkBundle();
      double v6 = [v5 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
      double v3 = [v4 stringWithFormat:@"Polling-HAHA-%@", v6];

      break;
    case 2004:
      double v3 = @"Polling-Exclamation";
      break;
    case 2005:
      double v3 = @"Polling-QuestionMark";
      break;
    default:
      double v3 = 0;
      break;
  }

  return v3;
}

- (id)largeMessageAcknowledgmentPollingImageNameForAcknowledgmentType:(int64_t)a3
{
  switch(a3)
  {
    case 2000:
      double v3 = @"Polling-Heart-Large";
      break;
    case 2001:
      double v3 = @"Polling-ThumbsUp-Large";
      break;
    case 2002:
      double v3 = @"Polling-ThumbsDown-Large";
      break;
    case 2003:
      double v4 = NSString;
      double v5 = CKFrameworkBundle();
      double v6 = [v5 localizedStringForKey:@"ACKNOWLEDGMENT_HAHA_ASSET_NAME_SUFFIX" value:@"ENG" table:@"ChatKit"];
      double v3 = [v4 stringWithFormat:@"Polling-HAHA-%@-Large", v6];

      break;
    case 2004:
      double v3 = @"Polling-Exclamation-Large";
      break;
    case 2005:
      double v3 = @"Polling-QuestionMark-Large";
      break;
    default:
      double v3 = 0;
      break;
  }

  return v3;
}

- (NSString)messageAcknowledgmentPickerBarBubbleName
{
  if (messageAcknowledgmentPickerBarBubbleName_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarBubbleName_once, &__block_literal_global_2135);
  }
  double v2 = (void *)messageAcknowledgmentPickerBarBubbleName_sBehavior;

  return (NSString *)v2;
}

void __56__CKUIBehavior_messageAcknowledgmentPickerBarBubbleName__block_invoke()
{
  uint64_t v0 = (void *)messageAcknowledgmentPickerBarBubbleName_sBehavior;
  messageAcknowledgmentPickerBarBubbleName_sBehavior = @"MenuBubble1";
}

- (NSString)messageAcknowledgmentPickerBarBubbleTailName
{
  if (messageAcknowledgmentPickerBarBubbleTailName_once != -1) {
    dispatch_once(&messageAcknowledgmentPickerBarBubbleTailName_once, &__block_literal_global_2140);
  }
  double v2 = (void *)messageAcknowledgmentPickerBarBubbleTailName_sBehavior;

  return (NSString *)v2;
}

void __60__CKUIBehavior_messageAcknowledgmentPickerBarBubbleTailName__block_invoke()
{
  uint64_t v0 = (void *)messageAcknowledgmentPickerBarBubbleTailName_sBehavior;
  messageAcknowledgmentPickerBarBubbleTailName_sBehavior = @"MenuBubble2";
}

- (id)aggregateAcknowledgmentStackBackgroundName3:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentStackBackground-3Stack";
  }
  else {
    return @"AcknowledgmentStackBackground-3";
  }
}

- (id)aggregateAcknowledgmentStackBackgroundName2:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentStackBackground-2Stack";
  }
  else {
    return @"AcknowledgmentStackBackground-2";
  }
}

- (id)aggregateAcknowledgmentTopBackgroundName:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentTopBackgroundStack";
  }
  else {
    return @"AcknowledgmentTopBackground";
  }
}

- (id)aggregateAcknowledgmentBottomMiddleName:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentBottomMiddleStack";
  }
  else {
    return @"AcknowledgmentBottomMiddle";
  }
}

- (id)aggregateAcknowledgmentBottomTopName:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentBottomTopStack";
  }
  else {
    return @"AcknowledgmentBottomTop";
  }
}

- (id)aggregateAcknowledgmentStackName3:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentStack-3Stack";
  }
  else {
    return @"AcknowledgmentStack-3";
  }
}

- (id)aggregateAcknowledgmentStackName2:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentStack-2Stack";
  }
  else {
    return @"AcknowledgmentStack-2";
  }
}

- (id)aggregateAcknowledgmentMiddleName:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentMiddleStack";
  }
  else {
    return @"AcknowledgmentMiddle";
  }
}

- (id)aggregateAcknowledgmentTopName:(BOOL)a3
{
  if (a3) {
    return @"AcknowledgmentTopStack";
  }
  else {
    return @"AcknowledgmentTop";
  }
}

- (CGPoint)messageHighlightTranscriptBalloonRelativePosition
{
  if (messageHighlightTranscriptBalloonRelativePosition_once != -1) {
    dispatch_once(&messageHighlightTranscriptBalloonRelativePosition_once, &__block_literal_global_2199);
  }
  double v2 = *(double *)&messageHighlightTranscriptBalloonRelativePosition_sBehavior_0;
  double v3 = *(double *)&messageHighlightTranscriptBalloonRelativePosition_sBehavior_1;
  result.y = v3;
  result.x = v2;
  return result;
}

void __65__CKUIBehavior_messageHighlightTranscriptBalloonRelativePosition__block_invoke()
{
  messageHighlightTranscriptBalloonRelativePosition_sBehavior_0 = 0x402A000000000000;
  messageHighlightTranscriptBalloonRelativePosition_sBehavior_1 = 0x402A000000000000;
}

- (double)messageHighlightGlyphSymbolPointSize
{
  if (messageHighlightGlyphSymbolPointSize_once != -1) {
    dispatch_once(&messageHighlightGlyphSymbolPointSize_once, &__block_literal_global_2201);
  }
  return *(double *)&messageHighlightGlyphSymbolPointSize_sBehavior;
}

void __52__CKUIBehavior_messageHighlightGlyphSymbolPointSize__block_invoke()
{
  messageHighlightGlyphSymbolPointSize_sBehavior = 0x402A000000000000;
}

- (CGSize)messageHighlightTranscriptBalloonSize
{
  if (messageHighlightTranscriptBalloonSize_once != -1) {
    dispatch_once(&messageHighlightTranscriptBalloonSize_once, &__block_literal_global_2203);
  }
  double v2 = *(double *)&messageHighlightTranscriptBalloonSize_sBehavior_0;
  double v3 = *(double *)&messageHighlightTranscriptBalloonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __53__CKUIBehavior_messageHighlightTranscriptBalloonSize__block_invoke()
{
  messageHighlightTranscriptBalloonSize_sBehavior_0 = 0x4034000000000000;
  messageHighlightTranscriptBalloonSize_sBehavior_1 = 0x4034000000000000;
}

- (double)messageHighlightTranscriptBalloonBorderWidth
{
  if (messageHighlightTranscriptBalloonBorderWidth_once != -1) {
    dispatch_once(&messageHighlightTranscriptBalloonBorderWidth_once, &__block_literal_global_2205);
  }
  return *(double *)&messageHighlightTranscriptBalloonBorderWidth_sBehavior;
}

void __60__CKUIBehavior_messageHighlightTranscriptBalloonBorderWidth__block_invoke()
{
  messageHighlightTranscriptBalloonBorderWidth_sBehavior = 0x3FF0000000000000;
}

- (UIColor)messageHighlightGoldColor
{
  if (messageHighlightGoldColor_once != -1) {
    dispatch_once(&messageHighlightGoldColor_once, &__block_literal_global_2207);
  }
  double v2 = (void *)messageHighlightGoldColor_sBehavior;

  return (UIColor *)v2;
}

void __41__CKUIBehavior_messageHighlightGoldColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] systemYellowColor];
  double v1 = (void *)messageHighlightGoldColor_sBehavior;
  messageHighlightGoldColor_sBehavior = v0;
}

- (UIColor)messageHighlightGlyphColor
{
  if (messageHighlightGlyphColor_once != -1) {
    dispatch_once(&messageHighlightGlyphColor_once, &__block_literal_global_2209);
  }
  double v2 = (void *)messageHighlightGlyphColor_sBehavior;

  return (UIColor *)v2;
}

void __42__CKUIBehavior_messageHighlightGlyphColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] whiteColor];
  double v1 = (void *)messageHighlightGlyphColor_sBehavior;
  messageHighlightGlyphColor_sBehavior = v0;
}

- (UIImage)messageHighlightImage
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__CKUIBehavior_messageHighlightImage__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageHighlightImage_once != -1) {
    dispatch_once(&messageHighlightImage_once, block);
  }
  return (UIImage *)(id)messageHighlightImage_sBehavior;
}

void __37__CKUIBehavior_messageHighlightImage__block_invoke(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  [v2 messageHighlightGlyphSymbolPointSize];
  double v4 = v3;
  id v7 = [*(id *)(a1 + 32) messageHighlightGlyphColor];
  uint64_t v5 = objc_msgSend(v2, "imageNamed:pointSize:insets:color:", @"pin.fill", v7, v4, *MEMORY[0x1E4F437F8], *(double *)(MEMORY[0x1E4F437F8] + 8), *(double *)(MEMORY[0x1E4F437F8] + 16), *(double *)(MEMORY[0x1E4F437F8] + 24));
  double v6 = (void *)messageHighlightImage_sBehavior;
  messageHighlightImage_sBehavior = v5;
}

- (double)messageHighlightTranscriptBalloonBottomPadding
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __62__CKUIBehavior_messageHighlightTranscriptBalloonBottomPadding__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageHighlightTranscriptBalloonBottomPadding_once != -1) {
    dispatch_once(&messageHighlightTranscriptBalloonBottomPadding_once, block);
  }
  return *(double *)&messageHighlightTranscriptBalloonBottomPadding_sBehavior;
}

double __62__CKUIBehavior_messageHighlightTranscriptBalloonBottomPadding__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) messageHighlightTranscriptBalloonSize];
  double v2 = v1;
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v3 = 1.0;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 != 0.0) {
    double v3 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  }
  double result = round((v2 + 1.0) * 0.5 * v3) / v3;
  messageHighlightTranscriptBalloonBottomPadding_sBehavior = *(void *)&result;
  return result;
}

- (CGPoint)messageHighlightButtonRelativePositionToTranscriptMessageBalloon
{
  if (messageHighlightButtonRelativePositionToTranscriptMessageBalloon_once != -1) {
    dispatch_once(&messageHighlightButtonRelativePositionToTranscriptMessageBalloon_once, &__block_literal_global_2214);
  }
  double v2 = 0.0;
  double v3 = 0.0;
  result.y = v3;
  result.x = v2;
  return result;
}

- (CGSize)messageHighlightButtonVisibleViewSize
{
  if (messageHighlightButtonVisibleViewSize_once != -1) {
    dispatch_once(&messageHighlightButtonVisibleViewSize_once, &__block_literal_global_2216);
  }
  double v2 = *(double *)&messageHighlightButtonVisibleViewSize_sBehavior_0;
  double v3 = *(double *)&messageHighlightButtonVisibleViewSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __53__CKUIBehavior_messageHighlightButtonVisibleViewSize__block_invoke()
{
  messageHighlightButtonVisibleViewSize_sBehavior_0 = 0x4043000000000000;
  messageHighlightButtonVisibleViewSize_sBehavior_1 = 0x4043000000000000;
}

- (UIEdgeInsets)messageHighlightButtonInsets
{
  if (messageHighlightButtonInsets_once != -1) {
    dispatch_once(&messageHighlightButtonInsets_once, &__block_literal_global_2218);
  }
  double v2 = *(double *)&messageHighlightButtonInsets_sBehavior_0;
  double v3 = *(double *)&messageHighlightButtonInsets_sBehavior_1;
  double v4 = *(double *)&messageHighlightButtonInsets_sBehavior_2;
  double v5 = *(double *)&messageHighlightButtonInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __44__CKUIBehavior_messageHighlightButtonInsets__block_invoke()
{
  messageHighlightButtonInsets_sBehavior_0 = 0x4018000000000000;
  messageHighlightButtonInsets_sBehavior_1 = 0x4018000000000000;
  messageHighlightButtonInsets_sBehavior_2 = 0x4018000000000000;
  messageHighlightButtonInsets_sBehavior_3 = 0x4018000000000000;
}

- (double)messageHighlightButtonGlyphSymbolPointSize
{
  if (messageHighlightButtonGlyphSymbolPointSize_once != -1) {
    dispatch_once(&messageHighlightButtonGlyphSymbolPointSize_once, &__block_literal_global_2220);
  }
  return *(double *)&messageHighlightButtonGlyphSymbolPointSize_sBehavior;
}

void __58__CKUIBehavior_messageHighlightButtonGlyphSymbolPointSize__block_invoke()
{
  messageHighlightButtonGlyphSymbolPointSize_sBehavior = 0x4034000000000000;
}

- (UIColor)messageHighlightButtonSelectedBackgroundColor
{
  if (messageHighlightButtonSelectedBackgroundColor_once != -1) {
    dispatch_once(&messageHighlightButtonSelectedBackgroundColor_once, &__block_literal_global_2222);
  }
  double v2 = (void *)messageHighlightButtonSelectedBackgroundColor_sBehavior;

  return (UIColor *)v2;
}

void __61__CKUIBehavior_messageHighlightButtonSelectedBackgroundColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] systemYellowColor];
  double v1 = (void *)messageHighlightButtonSelectedBackgroundColor_sBehavior;
  messageHighlightButtonSelectedBackgroundColor_sBehavior = v0;
}

- (UIColor)messageHighlightButtonUnselectedBackgroundColor
{
  if (messageHighlightButtonUnselectedBackgroundColor_once != -1) {
    dispatch_once(&messageHighlightButtonUnselectedBackgroundColor_once, &__block_literal_global_2224);
  }
  double v2 = (void *)messageHighlightButtonUnselectedBackgroundColor_sBehavior;

  return (UIColor *)v2;
}

void __63__CKUIBehavior_messageHighlightButtonUnselectedBackgroundColor__block_invoke()
{
  id v3 = +[CKUIBehavior sharedBehaviors];
  uint64_t v0 = [v3 theme];
  uint64_t v1 = [v0 replyButtonColor];
  double v2 = (void *)messageHighlightButtonUnselectedBackgroundColor_sBehavior;
  messageHighlightButtonUnselectedBackgroundColor_sBehavior = v1;
}

- (UIImage)messageHighlightButtonImageHighlightOn
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__CKUIBehavior_messageHighlightButtonImageHighlightOn__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageHighlightButtonImageHighlightOn_once != -1) {
    dispatch_once(&messageHighlightButtonImageHighlightOn_once, block);
  }
  return (UIImage *)(id)messageHighlightButtonImageHighlightOn_sBehavior;
}

void __54__CKUIBehavior_messageHighlightButtonImageHighlightOn__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 messageHighlightButtonGlyphSymbolPointSize];
  double v3 = v2;
  id v8 = +[CKUIBehavior sharedBehaviors];
  double v4 = [v8 theme];
  double v5 = [v4 messageAcknowledgmentGrayColor];
  uint64_t v6 = objc_msgSend(v1, "imageNamed:pointSize:insets:color:", @"pin.slash.fill", v5, v3, *MEMORY[0x1E4F437F8], *(double *)(MEMORY[0x1E4F437F8] + 8), *(double *)(MEMORY[0x1E4F437F8] + 16), *(double *)(MEMORY[0x1E4F437F8] + 24));
  id v7 = (void *)messageHighlightButtonImageHighlightOn_sBehavior;
  messageHighlightButtonImageHighlightOn_sBehavior = v6;
}

- (UIImage)messageHighlightButtonImageHighlightOff
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __55__CKUIBehavior_messageHighlightButtonImageHighlightOff__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (messageHighlightButtonImageHighlightOff_once != -1) {
    dispatch_once(&messageHighlightButtonImageHighlightOff_once, block);
  }
  return (UIImage *)(id)messageHighlightButtonImageHighlightOff_sBehavior;
}

void __55__CKUIBehavior_messageHighlightButtonImageHighlightOff__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 messageHighlightButtonGlyphSymbolPointSize];
  double v3 = v2;
  id v8 = +[CKUIBehavior sharedBehaviors];
  double v4 = [v8 theme];
  double v5 = [v4 messageAcknowledgmentGrayColor];
  uint64_t v6 = objc_msgSend(v1, "imageNamed:pointSize:insets:color:", @"pin.fill", v5, v3, *MEMORY[0x1E4F437F8], *(double *)(MEMORY[0x1E4F437F8] + 8), *(double *)(MEMORY[0x1E4F437F8] + 16), *(double *)(MEMORY[0x1E4F437F8] + 24));
  id v7 = (void *)messageHighlightButtonImageHighlightOff_sBehavior;
  messageHighlightButtonImageHighlightOff_sBehavior = v6;
}

- (unint64_t)appIconPrefetchLimit
{
  if (appIconPrefetchLimit_once != -1) {
    dispatch_once(&appIconPrefetchLimit_once, &__block_literal_global_2229);
  }
  if (appIconPrefetchLimit_sBehavior) {
    return 20;
  }
  else {
    return 0;
  }
}

void __36__CKUIBehavior_appIconPrefetchLimit__block_invoke()
{
  appIconPrefetchLimit_sBehavior = 1;
}

- (unint64_t)suggestedAppStripLimit
{
  if (suggestedAppStripLimit_once != -1) {
    dispatch_once(&suggestedAppStripLimit_once, &__block_literal_global_2231);
  }
  if (suggestedAppStripLimit_sBehavior) {
    return 20;
  }
  else {
    return 0;
  }
}

void __38__CKUIBehavior_suggestedAppStripLimit__block_invoke()
{
  suggestedAppStripLimit_sBehavior = 1;
}

- (unint64_t)suggestedMinimumRecentsCount
{
  if (suggestedMinimumRecentsCount_once != -1) {
    dispatch_once(&suggestedMinimumRecentsCount_once, &__block_literal_global_2233);
  }
  if (suggestedMinimumRecentsCount_sBehavior) {
    return 3;
  }
  else {
    return 0;
  }
}

void __44__CKUIBehavior_suggestedMinimumRecentsCount__block_invoke()
{
  suggestedMinimumRecentsCount_sBehavior = 1;
}

- (double)browserSwitcherCollapsedGrabberHeaderHeight
{
  if (browserSwitcherCollapsedGrabberHeaderHeight_once != -1) {
    dispatch_once(&browserSwitcherCollapsedGrabberHeaderHeight_once, &__block_literal_global_2235);
  }
  return *(double *)&browserSwitcherCollapsedGrabberHeaderHeight_sBehavior;
}

void __59__CKUIBehavior_browserSwitcherCollapsedGrabberHeaderHeight__block_invoke()
{
  browserSwitcherCollapsedGrabberHeaderHeight_sBehavior = 0x4031000000000000;
}

- (double)browserSwitcherCompactGrabberVisibleHeight
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __58__CKUIBehavior_browserSwitcherCompactGrabberVisibleHeight__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (browserSwitcherCompactGrabberVisibleHeight_once != -1) {
    dispatch_once(&browserSwitcherCompactGrabberVisibleHeight_once, block);
  }
  return *(double *)&browserSwitcherCompactGrabberVisibleHeight_sBehavior;
}

uint64_t __58__CKUIBehavior_browserSwitcherCompactGrabberVisibleHeight__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) browserSwitcherCollapsedGrabberHeaderHeight];
  browserSwitcherCompactGrabberVisibleHeight_sBehavior = v2;
  return result;
}

- (double)browserSwitcherExpandedGrabberHeaderHeight
{
  if (browserSwitcherExpandedGrabberHeaderHeight_once != -1) {
    dispatch_once(&browserSwitcherExpandedGrabberHeaderHeight_once, &__block_literal_global_2237);
  }
  return *(double *)&browserSwitcherExpandedGrabberHeaderHeight_sBehavior;
}

void __58__CKUIBehavior_browserSwitcherExpandedGrabberHeaderHeight__block_invoke()
{
  browserSwitcherExpandedGrabberHeaderHeight_sBehavior = 0x404D000000000000;
}

- (double)browserSwitcherExpandThreshold
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__CKUIBehavior_browserSwitcherExpandThreshold__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (browserSwitcherExpandThreshold_once != -1) {
    dispatch_once(&browserSwitcherExpandThreshold_once, block);
  }
  return *(double *)&browserSwitcherExpandThreshold_sBehavior;
}

uint64_t __46__CKUIBehavior_browserSwitcherExpandThreshold__block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = CKIsAppCardsEnabled();
  if ((result & 1) == 0)
  {
    uint64_t result = [*(id *)(a1 + 32) chatChromeBottomInset];
    uint64_t v2 = v4;
  }
  browserSwitcherExpandThreshold_sBehavior = v2;
  return result;
}

- (double)browserSwitcherGutterWidth
{
  if (browserSwitcherGutterWidth_once != -1) {
    dispatch_once(&browserSwitcherGutterWidth_once, &__block_literal_global_2239);
  }
  return *(double *)&browserSwitcherGutterWidth_sBehavior;
}

void __42__CKUIBehavior_browserSwitcherGutterWidth__block_invoke()
{
  browserSwitcherGutterWidth_sBehavior = 0x4020000000000000;
}

- (double)browserSwitcherEdgeGestureWidth
{
  if (browserSwitcherEdgeGestureWidth_once != -1) {
    dispatch_once(&browserSwitcherEdgeGestureWidth_once, &__block_literal_global_2241);
  }
  return *(double *)&browserSwitcherEdgeGestureWidth_sBehavior;
}

void __47__CKUIBehavior_browserSwitcherEdgeGestureWidth__block_invoke()
{
  browserSwitcherEdgeGestureWidth_sBehavior = 0x4028000000000000;
}

- (double)chatChromeBottomInset
{
  if (chatChromeBottomInset_once != -1) {
    dispatch_once(&chatChromeBottomInset_once, &__block_literal_global_2243);
  }
  return *(double *)&chatChromeBottomInset_sBehavior;
}

void __37__CKUIBehavior_chatChromeBottomInset__block_invoke()
{
  chatChromeBottomInset_sBehavior = 0x4046000000000000;
}

- (double)chatMagnifiedChromeBottomInset
{
  if (chatMagnifiedChromeBottomInset_once != -1) {
    dispatch_once(&chatMagnifiedChromeBottomInset_once, &__block_literal_global_2245);
  }
  return *(double *)&chatMagnifiedChromeBottomInset_sBehavior;
}

void __46__CKUIBehavior_chatMagnifiedChromeBottomInset__block_invoke()
{
  chatMagnifiedChromeBottomInset_sBehavior = 0x4052C00000000000;
}

- (double)browserSwitcherScrollerHeight
{
  if (browserSwitcherScrollerHeight_once != -1) {
    dispatch_once(&browserSwitcherScrollerHeight_once, &__block_literal_global_2247);
  }
  return *(double *)&browserSwitcherScrollerHeight_sBehavior;
}

void __45__CKUIBehavior_browserSwitcherScrollerHeight__block_invoke()
{
  browserSwitcherScrollerHeight_sBehavior = 0x4010000000000000;
}

- (double)cameraAppsMinimizedDockHeight
{
  if (cameraAppsMinimizedDockHeight_once != -1) {
    dispatch_once(&cameraAppsMinimizedDockHeight_once, &__block_literal_global_2249);
  }
  return *(double *)&cameraAppsMinimizedDockHeight_sBehavior;
}

void __45__CKUIBehavior_cameraAppsMinimizedDockHeight__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F42D90] mainScreen];
  [v0 _referenceBounds];
  double v2 = v1;

  if (v2 == 320.0)
  {
    uint64_t v3 = 0x4043000000000000;
  }
  else
  {
    uint64_t v4 = +[CKUIBehavior sharedBehaviors];
    [v4 chatChromeBottomInset];
    uint64_t v3 = v5;
  }
  cameraAppsMinimizedDockHeight_sBehavior = v3;
}

- (UIEdgeInsets)pluginBalloonInsetsForMessageFromMe:(BOOL)a3
{
  BOOL v3 = a3;
  [(CKUIBehavior *)self balloonMaskTailWidth];
  double v5 = 0.0;
  if (v3) {
    double v6 = 0.0;
  }
  else {
    double v6 = v4;
  }
  if (v3) {
    double v7 = v4;
  }
  else {
    double v7 = 0.0;
  }
  double v8 = 0.0;
  result.double right = v7;
  result.double bottom = v5;
  result.double left = v6;
  result.double top = v8;
  return result;
}

- (BOOL)ckShouldUpdateappLabelFont
{
  return 0;
}

- (UIFont)appLabelFont
{
  CKPreferredContentSizeCategory();
  BOOL v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)appLabelFont_sContentSizeCategory_appLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdateappLabelFont]
    || v11
    || appLabelFont_sIsIncreaseContrastEnabled_appLabelFont != v4
    || appLabelFont_sIsBoldTextEnabled_appLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = appLabelFont_sTextFontSize_appLabelFont, *(double *)&appLabelFont_sTextFontSize_appLabelFont != v6)
    || (uint64_t v12 = appLabelFont_sCustomTextFontSize_appLabelFont,
        *(double *)&appLabelFont_sCustomTextFontSize_appLabelFont != v7)
    || (objc_msgSend((id)appLabelFont_sCustomTextFontName_appLabelFont, "isEqualToString:", v10, *(double *)&appLabelFont_sCustomTextFontSize_appLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_shortEmphasizedPreferredFontForTextStyle:", *MEMORY[0x1E4F438F8], *(double *)&v12);
    uint64_t v14 = (void *)appLabelFont_sBehavior;
    appLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&appLabelFont_sContentSizeCategory_appLabelFont, v3);
    appLabelFont_sIsIncreaseContrastEnabled_appLabelFont = v4;
    appLabelFont_sIsBoldTextEnabled_appLabelFont = IsBoldTextEnabled;
    appLabelFont_sTextFontSize_appLabelFont = *(void *)&v6;
    appLabelFont_sCustomTextFontSize_appLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&appLabelFont_sCustomTextFontName_appLabelFont, v9);
  }
  id v15 = (UIFont *)(id)appLabelFont_sBehavior;

  return v15;
}

- (double)dragPinchGestureScaleFactor
{
  if (dragPinchGestureScaleFactor_once != -1) {
    dispatch_once(&dragPinchGestureScaleFactor_once, &__block_literal_global_2251);
  }
  return *(double *)&dragPinchGestureScaleFactor_sBehavior;
}

void __43__CKUIBehavior_dragPinchGestureScaleFactor__block_invoke()
{
  dragPinchGestureScaleFactor_sBehavior = 0x4052C00000000000;
}

- (double)dragBalloonHeightReducedAttractorThreshold
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __58__CKUIBehavior_dragBalloonHeightReducedAttractorThreshold__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (dragBalloonHeightReducedAttractorThreshold_once != -1) {
    dispatch_once(&dragBalloonHeightReducedAttractorThreshold_once, block);
  }
  return *(double *)&dragBalloonHeightReducedAttractorThreshold_sBehavior;
}

double __58__CKUIBehavior_dragBalloonHeightReducedAttractorThreshold__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskSizeWithTailShape:1 isMultiline:0];
  double v3 = v2;
  [*(id *)(a1 + 32) balloonBalloonTranscriptSpace:2];
  double result = v3 + v4 * 2.0;
  dragBalloonHeightReducedAttractorThreshold_sBehavior = *(void *)&result;
  return result;
}

- (double)dragBalloonWidthIncreasedAttractorThreshold
{
  if (dragBalloonWidthIncreasedAttractorThreshold_once != -1) {
    dispatch_once(&dragBalloonWidthIncreasedAttractorThreshold_once, &__block_literal_global_2253);
  }
  return *(double *)&dragBalloonWidthIncreasedAttractorThreshold_sBehavior;
}

void __59__CKUIBehavior_dragBalloonWidthIncreasedAttractorThreshold__block_invoke()
{
  dragBalloonWidthIncreasedAttractorThreshold_sBehavior = 0x4044000000000000;
}

- (double)dragBalloonCornerRadius
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __39__CKUIBehavior_dragBalloonCornerRadius__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (dragBalloonCornerRadius_once != -1) {
    dispatch_once(&dragBalloonCornerRadius_once, block);
  }
  return *(double *)&dragBalloonCornerRadius_sBehavior;
}

double __39__CKUIBehavior_dragBalloonCornerRadius__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskSize];
  double result = v1 * 0.5 + 2.5;
  *(double *)&dragBalloonCornerRadius_sBehavior = result;
  return result;
}

- (double)composeBalloonCornerRadius
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __42__CKUIBehavior_composeBalloonCornerRadius__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (composeBalloonCornerRadius_once != -1) {
    dispatch_once(&composeBalloonCornerRadius_once, block);
  }
  return *(double *)&composeBalloonCornerRadius_sBehavior;
}

uint64_t __42__CKUIBehavior_composeBalloonCornerRadius__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) dragBalloonCornerRadius];
  composeBalloonCornerRadius_sBehavior = v2;
  return result;
}

- (double)dragBalloonTailCropWidth
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __40__CKUIBehavior_dragBalloonTailCropWidth__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (dragBalloonTailCropWidth_once != -1) {
    dispatch_once(&dragBalloonTailCropWidth_once, block);
  }
  return *(double *)&dragBalloonTailCropWidth_sBehavior;
}

void __40__CKUIBehavior_dragBalloonTailCropWidth__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) balloonMaskTailWidth];
  double v2 = v1;
  id v4 = [MEMORY[0x1E4F42D90] mainScreen];
  [v4 scale];
  *(double *)&dragBalloonTailCropWidth_sBehavior = v2 + 1.0 / v3;
}

- (double)dragEdgeLayoutIntentPadding
{
  if (dragEdgeLayoutIntentPadding_once != -1) {
    dispatch_once(&dragEdgeLayoutIntentPadding_once, &__block_literal_global_2255);
  }
  return *(double *)&dragEdgeLayoutIntentPadding_sBehavior;
}

void __43__CKUIBehavior_dragEdgeLayoutIntentPadding__block_invoke()
{
  dragEdgeLayoutIntentPadding_sBehavior = 0x4024000000000000;
}

- (double)dragTranscriptScrollThreshold
{
  if (dragTranscriptScrollThreshold_once != -1) {
    dispatch_once(&dragTranscriptScrollThreshold_once, &__block_literal_global_2257);
  }
  return *(double *)&dragTranscriptScrollThreshold_sBehavior;
}

void __45__CKUIBehavior_dragTranscriptScrollThreshold__block_invoke()
{
  dragTranscriptScrollThreshold_sBehavior = 0x4056800000000000;
}

- (double)dragTranscriptScrollDisplayLinkMaxDelta
{
  if (dragTranscriptScrollDisplayLinkMaxDelta_once != -1) {
    dispatch_once(&dragTranscriptScrollDisplayLinkMaxDelta_once, &__block_literal_global_2259);
  }
  return *(double *)&dragTranscriptScrollDisplayLinkMaxDelta_sBehavior;
}

void __55__CKUIBehavior_dragTranscriptScrollDisplayLinkMaxDelta__block_invoke()
{
  dragTranscriptScrollDisplayLinkMaxDelta_sBehavior = 0x4039000000000000;
}

- (double)stickerScreenScale
{
  if (stickerScreenScale_once != -1) {
    dispatch_once(&stickerScreenScale_once, &__block_literal_global_2261);
  }
  return *(double *)&stickerScreenScale_sBehavior;
}

void __34__CKUIBehavior_stickerScreenScale__block_invoke()
{
  stickerScreenScale_sBehavior = 0x4008000000000000;
}

- (double)stickerDisplaySizeScale
{
  if (stickerDisplaySizeScale_once != -1) {
    dispatch_once(&stickerDisplaySizeScale_once, &__block_literal_global_2263);
  }
  return *(double *)&stickerDisplaySizeScale_sBehavior;
}

void __39__CKUIBehavior_stickerDisplaySizeScale__block_invoke()
{
  stickerDisplaySizeScale_sBehavior = 0x3FF0000000000000;
}

- (double)emojiStickerImageGenerationFontSize
{
  if (emojiStickerImageGenerationFontSize_once != -1) {
    dispatch_once(&emojiStickerImageGenerationFontSize_once, &__block_literal_global_2265);
  }
  return *(double *)&emojiStickerImageGenerationFontSize_sBehavior;
}

void __51__CKUIBehavior_emojiStickerImageGenerationFontSize__block_invoke()
{
  emojiStickerImageGenerationFontSize_sBehavior = 0x4060000000000000;
}

- (UIFont)emojiStickerTranscriptCellFont
{
  if (emojiStickerTranscriptCellFont_once != -1) {
    dispatch_once(&emojiStickerTranscriptCellFont_once, &__block_literal_global_2267);
  }
  double v2 = (void *)emojiStickerTranscriptCellFont_sBehavior;

  return (UIFont *)v2;
}

void __46__CKUIBehavior_emojiStickerTranscriptCellFont__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4FB08E0] systemFontOfSize:80.0];
  double v1 = (void *)emojiStickerTranscriptCellFont_sBehavior;
  emojiStickerTranscriptCellFont_sBehavior = v0;
}

- (CGSize)emojiStickerTranscriptBalloonSize
{
  if (emojiStickerTranscriptBalloonSize_once != -1) {
    dispatch_once(&emojiStickerTranscriptBalloonSize_once, &__block_literal_global_2269);
  }
  double v2 = *(double *)&emojiStickerTranscriptBalloonSize_sBehavior_0;
  double v3 = *(double *)&emojiStickerTranscriptBalloonSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __49__CKUIBehavior_emojiStickerTranscriptBalloonSize__block_invoke()
{
  emojiStickerTranscriptBalloonSize_sBehavior_0 = 0x4048000000000000;
  emojiStickerTranscriptBalloonSize_sBehavior_1 = 0x4048000000000000;
}

- (BOOL)ckShouldUpdatetapbackPickerSizingFont
{
  return 0;
}

- (UIFont)tapbackPickerSizingFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)tapbackPickerSizingFont_sContentSizeCategory_tapbackPickerSizingFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatetapbackPickerSizingFont]
    || v11
    || tapbackPickerSizingFont_sIsIncreaseContrastEnabled_tapbackPickerSizingFont != v4
    || tapbackPickerSizingFont_sIsBoldTextEnabled_tapbackPickerSizingFont != IsBoldTextEnabled
    || (uint64_t v12 = tapbackPickerSizingFont_sTextFontSize_tapbackPickerSizingFont,
        *(double *)&tapbackPickerSizingFont_sTextFontSize_tapbackPickerSizingFont != v6)
    || (uint64_t v12 = tapbackPickerSizingFont_sCustomTextFontSize_tapbackPickerSizingFont,
        *(double *)&tapbackPickerSizingFont_sCustomTextFontSize_tapbackPickerSizingFont != v7)
    || (objc_msgSend((id)tapbackPickerSizingFont_sCustomTextFontName_tapbackPickerSizingFont, "isEqualToString:", v10, *(double *)&tapbackPickerSizingFont_sCustomTextFontSize_tapbackPickerSizingFont) & 1) == 0)
  {
    uint64_t v13 = +[CKUIBehavior fontWithStyle:adjustedForMaxSizeCategory:](CKUIBehavior, "fontWithStyle:adjustedForMaxSizeCategory:", *MEMORY[0x1E4F438B8], *MEMORY[0x1E4F43798], *(double *)&v12);
    uint64_t v14 = [v13 _fontScaledByScaleFactor:0.8];

    id v15 = (void *)tapbackPickerSizingFont_sBehavior;
    tapbackPickerSizingFont_sBehavior = v14;

    objc_storeStrong((id *)&tapbackPickerSizingFont_sContentSizeCategory_tapbackPickerSizingFont, v3);
    tapbackPickerSizingFont_sIsIncreaseContrastEnabled_tapbackPickerSizingFont = v4;
    tapbackPickerSizingFont_sIsBoldTextEnabled_tapbackPickerSizingFont = IsBoldTextEnabled;
    tapbackPickerSizingFont_sTextFontSize_tapbackPickerSizingFont = *(void *)&v6;
    tapbackPickerSizingFont_sCustomTextFontSize_tapbackPickerSizingFont = *(void *)&v7;
    objc_storeStrong((id *)&tapbackPickerSizingFont_sCustomTextFontName_tapbackPickerSizingFont, v9);
  }
  id v16 = (UIFont *)(id)tapbackPickerSizingFont_sBehavior;

  return v16;
}

- (CGSize)stickerSizeScaledWithInitialSize:(CGSize)a3 imageScale:(double)a4 userScale:(double)a5 rectifiedScreenScale:(double)a6 maxWidth:(double)a7
{
  double height = a3.height;
  double width = a3.width;
  [(CKUIBehavior *)self stickerDisplaySizeScale];
  double v14 = height * v13 * a4 * a5;
  double v15 = 1.0 / a6 * (width * v13 * a4 * a5);
  double v16 = 1.0 / a6 * v14;
  if (v15 <= a7 || v15 == 0.0) {
    a7 = v15;
  }
  else {
    double v16 = v16 * (a7 / v15);
  }
  double v17 = round(a7 * a6) / a6;
  double v18 = round(v16 * a6) / a6;
  result.double height = v18;
  result.double width = v17;
  return result;
}

- (BOOL)stickerSavingEnabled
{
  if (stickerSavingEnabled_once != -1) {
    dispatch_once(&stickerSavingEnabled_once, &__block_literal_global_2271);
  }
  return stickerSavingEnabled_sBehavior;
}

void __36__CKUIBehavior_stickerSavingEnabled__block_invoke()
{
  stickerSavingEnabled_sBehavior = 1;
}

- (double)stickersCellCornerRadius
{
  if (stickersCellCornerRadius_once != -1) {
    dispatch_once(&stickersCellCornerRadius_once, &__block_literal_global_2273);
  }
  return *(double *)&stickersCellCornerRadius_sBehavior;
}

void __40__CKUIBehavior_stickersCellCornerRadius__block_invoke()
{
  stickersCellCornerRadius_sBehavior = 0x4020000000000000;
}

- (BOOL)ckShouldUpdatestickerDetailsCellTitleFont
{
  return 0;
}

- (UIFont)stickerDetailsCellTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)stickerDetailsCellTitleFont_sContentSizeCategory_stickerDetailsCellTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatestickerDetailsCellTitleFont]
    || v11
    || stickerDetailsCellTitleFont_sIsIncreaseContrastEnabled_stickerDetailsCellTitleFont != v4
    || stickerDetailsCellTitleFont_sIsBoldTextEnabled_stickerDetailsCellTitleFont != IsBoldTextEnabled
    || (uint64_t v12 = stickerDetailsCellTitleFont_sTextFontSize_stickerDetailsCellTitleFont,
        *(double *)&stickerDetailsCellTitleFont_sTextFontSize_stickerDetailsCellTitleFont != v6)
    || (uint64_t v12 = stickerDetailsCellTitleFont_sCustomTextFontSize_stickerDetailsCellTitleFont,
        *(double *)&stickerDetailsCellTitleFont_sCustomTextFontSize_stickerDetailsCellTitleFont != v7)
    || (objc_msgSend((id)stickerDetailsCellTitleFont_sCustomTextFontName_stickerDetailsCellTitleFont, "isEqualToString:", v10, *(double *)&stickerDetailsCellTitleFont_sCustomTextFontSize_stickerDetailsCellTitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F438A0], *(double *)&v12);
    double v14 = (void *)stickerDetailsCellTitleFont_sBehavior;
    stickerDetailsCellTitleFont_sBehavior = v13;

    objc_storeStrong((id *)&stickerDetailsCellTitleFont_sContentSizeCategory_stickerDetailsCellTitleFont, v3);
    stickerDetailsCellTitleFont_sIsIncreaseContrastEnabled_stickerDetailsCellTitleFont = v4;
    stickerDetailsCellTitleFont_sIsBoldTextEnabled_stickerDetailsCellTitleFont = IsBoldTextEnabled;
    stickerDetailsCellTitleFont_sTextFontSize_stickerDetailsCellTitleFont = *(void *)&v6;
    stickerDetailsCellTitleFont_sCustomTextFontSize_stickerDetailsCellTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&stickerDetailsCellTitleFont_sCustomTextFontName_stickerDetailsCellTitleFont, v9);
  }
  double v15 = (UIFont *)(id)stickerDetailsCellTitleFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatestickerDetailsCellSubtitleFont
{
  return 0;
}

- (UIFont)stickerDetailsCellSubtitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)stickerDetailsCellSubtitleFont_sContentSizeCategory_stickerDetailsCellSubtitleFont, v3);
  if (-[CKUIBehavior ckShouldUpdatestickerDetailsCellSubtitleFont](self, "ckShouldUpdatestickerDetailsCellSubtitleFont")|| v11|| stickerDetailsCellSubtitleFont_sIsIncreaseContrastEnabled_stickerDetailsCellSubtitleFont != v4|| stickerDetailsCellSubtitleFont_sIsBoldTextEnabled_stickerDetailsCellSubtitleFont != IsBoldTextEnabled|| (uint64_t v12 = stickerDetailsCellSubtitleFont_sTextFontSize_stickerDetailsCellSubtitleFont, *(double *)&stickerDetailsCellSubtitleFont_sTextFontSize_stickerDetailsCellSubtitleFont != v6)|| (uint64_t v12 = stickerDetailsCellSubtitleFont_sCustomTextFontSize_stickerDetailsCellSubtitleFont, *(double *)&stickerDetailsCellSubtitleFont_sCustomTextFontSize_stickerDetailsCellSubtitleFont != v7)|| (objc_msgSend((id)stickerDetailsCellSubtitleFont_sCustomTextFontName_stickerDetailsCellSubtitleFont, "isEqualToString:", v10, *(double *)&stickerDetailsCellSubtitleFont_sCustomTextFontSize_stickerDetailsCellSubtitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F438C8], *(double *)&v12);
    double v14 = (void *)stickerDetailsCellSubtitleFont_sBehavior;
    stickerDetailsCellSubtitleFont_sBehavior = v13;

    objc_storeStrong((id *)&stickerDetailsCellSubtitleFont_sContentSizeCategory_stickerDetailsCellSubtitleFont, v3);
    stickerDetailsCellSubtitleFont_sIsIncreaseContrastEnabled_stickerDetailsCellSubtitleFont = v4;
    stickerDetailsCellSubtitleFont_sIsBoldTextEnabled_stickerDetailsCellSubtitleFont = IsBoldTextEnabled;
    stickerDetailsCellSubtitleFont_sTextFontSize_stickerDetailsCellSubtitleFont = *(void *)&v6;
    stickerDetailsCellSubtitleFont_sCustomTextFontSize_stickerDetailsCellSubtitleFont = *(void *)&v7;
    objc_storeStrong((id *)&stickerDetailsCellSubtitleFont_sCustomTextFontName_stickerDetailsCellSubtitleFont, v9);
  }
  double v15 = (UIFont *)(id)stickerDetailsCellSubtitleFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatestickerDetailsCellTimestampFont
{
  return 0;
}

- (UIFont)stickerDetailsCellTimestampFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)stickerDetailsCellTimestampFont_sContentSizeCategory_stickerDetailsCellTimestampFont, v3);
  if (-[CKUIBehavior ckShouldUpdatestickerDetailsCellTimestampFont](self, "ckShouldUpdatestickerDetailsCellTimestampFont")|| v11|| stickerDetailsCellTimestampFont_sIsIncreaseContrastEnabled_stickerDetailsCellTimestampFont != v4|| stickerDetailsCellTimestampFont_sIsBoldTextEnabled_stickerDetailsCellTimestampFont != IsBoldTextEnabled|| (uint64_t v12 = stickerDetailsCellTimestampFont_sTextFontSize_stickerDetailsCellTimestampFont, *(double *)&stickerDetailsCellTimestampFont_sTextFontSize_stickerDetailsCellTimestampFont != v6)|| (uint64_t v12 = stickerDetailsCellTimestampFont_sCustomTextFontSize_stickerDetailsCellTimestampFont, *(double *)&stickerDetailsCellTimestampFont_sCustomTextFontSize_stickerDetailsCellTimestampFont != v7)|| (objc_msgSend((id)stickerDetailsCellTimestampFont_sCustomTextFontName_stickerDetailsCellTimestampFont, "isEqualToString:", v10, *(double *)&stickerDetailsCellTimestampFont_sCustomTextFontSize_stickerDetailsCellTimestampFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    double v14 = (void *)stickerDetailsCellTimestampFont_sBehavior;
    stickerDetailsCellTimestampFont_sBehavior = v13;

    objc_storeStrong((id *)&stickerDetailsCellTimestampFont_sContentSizeCategory_stickerDetailsCellTimestampFont, v3);
    stickerDetailsCellTimestampFont_sIsIncreaseContrastEnabled_stickerDetailsCellTimestampFont = v4;
    stickerDetailsCellTimestampFont_sIsBoldTextEnabled_stickerDetailsCellTimestampFont = IsBoldTextEnabled;
    stickerDetailsCellTimestampFont_sTextFontSize_stickerDetailsCellTimestampFont = *(void *)&v6;
    stickerDetailsCellTimestampFont_sCustomTextFontSize_stickerDetailsCellTimestampFont = *(void *)&v7;
    objc_storeStrong((id *)&stickerDetailsCellTimestampFont_sCustomTextFontName_stickerDetailsCellTimestampFont, v9);
  }
  double v15 = (UIFont *)(id)stickerDetailsCellTimestampFont_sBehavior;

  return v15;
}

- (UIColor)stickerDetailsCellBackgroundColor
{
  if (stickerDetailsCellBackgroundColor_once != -1) {
    dispatch_once(&stickerDetailsCellBackgroundColor_once, &__block_literal_global_2275);
  }
  return 0;
}

- (UIButtonConfiguration)stickerViewButtonConfiguration
{
  if (stickerViewButtonConfiguration_once != -1) {
    dispatch_once(&stickerViewButtonConfiguration_once, &__block_literal_global_2277);
  }
  double v2 = (void *)stickerViewButtonConfiguration_sBehavior;

  return (UIButtonConfiguration *)v2;
}

void __46__CKUIBehavior_stickerViewButtonConfiguration__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F427E8] grayButtonConfiguration];
  double v1 = [MEMORY[0x1E4F42A80] _systemImageNamed:@"appstore"];
  [v0 setImage:v1];

  [v0 setButtonSize:1];
  [v0 setCornerStyle:4];
  [v0 setMacIdiomStyle:1];
  objc_msgSend(v0, "setContentInsets:", 14.0, 14.0, 14.0, 14.0);
  double v2 = (void *)stickerViewButtonConfiguration_sBehavior;
  stickerViewButtonConfiguration_sBehavior = (uint64_t)v0;
}

- (UIButtonConfiguration)stickerSaveButtonConfiguration
{
  if (stickerSaveButtonConfiguration_once != -1) {
    dispatch_once(&stickerSaveButtonConfiguration_once, &__block_literal_global_2282);
  }
  double v2 = (void *)stickerSaveButtonConfiguration_sBehavior;

  return (UIButtonConfiguration *)v2;
}

void __46__CKUIBehavior_stickerSaveButtonConfiguration__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F427E8] grayButtonConfiguration];
  double v1 = [MEMORY[0x1E4F42A80] _systemImageNamed:@"square.and.arrow.down"];
  [v0 setImage:v1];

  [v0 setButtonSize:1];
  [v0 setCornerStyle:4];
  [v0 setMacIdiomStyle:1];
  objc_msgSend(v0, "setContentInsets:", 14.0, 14.0, 14.0, 14.0);
  double v2 = (void *)stickerSaveButtonConfiguration_sBehavior;
  stickerSaveButtonConfiguration_sBehavior = (uint64_t)v0;
}

- (BOOL)shouldPopoverSuggestionsBanner
{
  return 1;
}

- (BOOL)ckShouldUpdatebusinessInfoViewGreetingTextFont
{
  return 0;
}

- (UIFont)businessInfoViewGreetingTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)businessInfoViewGreetingTextFont_sContentSizeCategory_businessInfoViewGreetingTextFont, v3);
  if (-[CKUIBehavior ckShouldUpdatebusinessInfoViewGreetingTextFont](self, "ckShouldUpdatebusinessInfoViewGreetingTextFont")|| v11|| businessInfoViewGreetingTextFont_sIsIncreaseContrastEnabled_businessInfoViewGreetingTextFont != v4|| businessInfoViewGreetingTextFont_sIsBoldTextEnabled_businessInfoViewGreetingTextFont != IsBoldTextEnabled|| (uint64_t v12 = businessInfoViewGreetingTextFont_sTextFontSize_businessInfoViewGreetingTextFont, *(double *)&businessInfoViewGreetingTextFont_sTextFontSize_businessInfoViewGreetingTextFont != v6)|| (uint64_t v12 = businessInfoViewGreetingTextFont_sCustomTextFontSize_businessInfoViewGreetingTextFont, *(double *)&businessInfoViewGreetingTextFont_sCustomTextFontSize_businessInfoViewGreetingTextFont != v7)|| (objc_msgSend((id)businessInfoViewGreetingTextFont_sCustomTextFontName_businessInfoViewGreetingTextFont, "isEqualToString:", v10, *(double *)&businessInfoViewGreetingTextFont_sCustomTextFontSize_businessInfoViewGreetingTextFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43878], *(double *)&v12);
    double v14 = (void *)businessInfoViewGreetingTextFont_sBehavior;
    businessInfoViewGreetingTextFont_sBehavior = v13;

    objc_storeStrong((id *)&businessInfoViewGreetingTextFont_sContentSizeCategory_businessInfoViewGreetingTextFont, v3);
    businessInfoViewGreetingTextFont_sIsIncreaseContrastEnabled_businessInfoViewGreetingTextFont = v4;
    businessInfoViewGreetingTextFont_sIsBoldTextEnabled_businessInfoViewGreetingTextFont = IsBoldTextEnabled;
    businessInfoViewGreetingTextFont_sTextFontSize_businessInfoViewGreetingTextFont = *(void *)&v6;
    businessInfoViewGreetingTextFont_sCustomTextFontSize_businessInfoViewGreetingTextFont = *(void *)&v7;
    objc_storeStrong((id *)&businessInfoViewGreetingTextFont_sCustomTextFontName_businessInfoViewGreetingTextFont, v9);
  }
  double v15 = (UIFont *)(id)businessInfoViewGreetingTextFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatebusinessInfoViewDescriptionTextFont
{
  return 0;
}

- (UIFont)businessInfoViewDescriptionTextFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)businessInfoViewDescriptionTextFont_sContentSizeCategory_businessInfoViewDescriptionTextFont, v3);
  if (-[CKUIBehavior ckShouldUpdatebusinessInfoViewDescriptionTextFont](self, "ckShouldUpdatebusinessInfoViewDescriptionTextFont")|| v11|| businessInfoViewDescriptionTextFont_sIsIncreaseContrastEnabled_businessInfoViewDescriptionTextFont != v4|| businessInfoViewDescriptionTextFont_sIsBoldTextEnabled_businessInfoViewDescriptionTextFont != IsBoldTextEnabled|| (uint64_t v12 = businessInfoViewDescriptionTextFont_sTextFontSize_businessInfoViewDescriptionTextFont, *(double *)&businessInfoViewDescriptionTextFont_sTextFontSize_businessInfoViewDescriptionTextFont != v6)|| (uint64_t v12 = businessInfoViewDescriptionTextFont_sCustomTextFontSize_businessInfoViewDescriptionTextFont, *(double *)&businessInfoViewDescriptionTextFont_sCustomTextFontSize_businessInfoViewDescriptionTextFont != v7)|| (objc_msgSend((id)businessInfoViewDescriptionTextFont_sCustomTextFontName_businessInfoViewDescriptionTextFont, "isEqualToString:", v10, *(double *)&businessInfoViewDescriptionTextFont_sCustomTextFontSize_businessInfoViewDescriptionTextFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    double v14 = (void *)businessInfoViewDescriptionTextFont_sBehavior;
    businessInfoViewDescriptionTextFont_sBehavior = v13;

    objc_storeStrong((id *)&businessInfoViewDescriptionTextFont_sContentSizeCategory_businessInfoViewDescriptionTextFont, v3);
    businessInfoViewDescriptionTextFont_sIsIncreaseContrastEnabled_businessInfoViewDescriptionTextFont = v4;
    businessInfoViewDescriptionTextFont_sIsBoldTextEnabled_businessInfoViewDescriptionTextFont = IsBoldTextEnabled;
    businessInfoViewDescriptionTextFont_sTextFontSize_businessInfoViewDescriptionTextFont = *(void *)&v6;
    businessInfoViewDescriptionTextFont_sCustomTextFontSize_businessInfoViewDescriptionTextFont = *(void *)&v7;
    objc_storeStrong((id *)&businessInfoViewDescriptionTextFont_sCustomTextFontName_businessInfoViewDescriptionTextFont, v9);
  }
  double v15 = (UIFont *)(id)businessInfoViewDescriptionTextFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatebusinessInfoViewTitleLabelFont
{
  return 0;
}

- (UIFont)businessInfoViewTitleLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)businessInfoViewTitleLabelFont_sContentSizeCategory_businessInfoViewTitleLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatebusinessInfoViewTitleLabelFont](self, "ckShouldUpdatebusinessInfoViewTitleLabelFont")|| v11|| businessInfoViewTitleLabelFont_sIsIncreaseContrastEnabled_businessInfoViewTitleLabelFont != v4|| businessInfoViewTitleLabelFont_sIsBoldTextEnabled_businessInfoViewTitleLabelFont != IsBoldTextEnabled|| (uint64_t v12 = businessInfoViewTitleLabelFont_sTextFontSize_businessInfoViewTitleLabelFont, *(double *)&businessInfoViewTitleLabelFont_sTextFontSize_businessInfoViewTitleLabelFont != v6)|| (uint64_t v12 = businessInfoViewTitleLabelFont_sCustomTextFontSize_businessInfoViewTitleLabelFont, *(double *)&businessInfoViewTitleLabelFont_sCustomTextFontSize_businessInfoViewTitleLabelFont != v7)|| (objc_msgSend((id)businessInfoViewTitleLabelFont_sCustomTextFontName_businessInfoViewTitleLabelFont, "isEqualToString:", v10, *(double *)&businessInfoViewTitleLabelFont_sCustomTextFontSize_businessInfoViewTitleLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    double v14 = (void *)businessInfoViewTitleLabelFont_sBehavior;
    businessInfoViewTitleLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&businessInfoViewTitleLabelFont_sContentSizeCategory_businessInfoViewTitleLabelFont, v3);
    businessInfoViewTitleLabelFont_sIsIncreaseContrastEnabled_businessInfoViewTitleLabelFont = v4;
    businessInfoViewTitleLabelFont_sIsBoldTextEnabled_businessInfoViewTitleLabelFont = IsBoldTextEnabled;
    businessInfoViewTitleLabelFont_sTextFontSize_businessInfoViewTitleLabelFont = *(void *)&v6;
    businessInfoViewTitleLabelFont_sCustomTextFontSize_businessInfoViewTitleLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&businessInfoViewTitleLabelFont_sCustomTextFontName_businessInfoViewTitleLabelFont, v9);
  }
  double v15 = (UIFont *)(id)businessInfoViewTitleLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatebusinessDescriptionVCTextViewFont
{
  return 0;
}

- (UIFont)businessDescriptionVCTextViewFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)businessDescriptionVCTextViewFont_sContentSizeCategory_businessDescriptionVCTextViewFont, v3);
  if (-[CKUIBehavior ckShouldUpdatebusinessDescriptionVCTextViewFont](self, "ckShouldUpdatebusinessDescriptionVCTextViewFont")|| v11|| businessDescriptionVCTextViewFont_sIsIncreaseContrastEnabled_businessDescriptionVCTextViewFont != v4|| businessDescriptionVCTextViewFont_sIsBoldTextEnabled_businessDescriptionVCTextViewFont != IsBoldTextEnabled|| (uint64_t v12 = businessDescriptionVCTextViewFont_sTextFontSize_businessDescriptionVCTextViewFont, *(double *)&businessDescriptionVCTextViewFont_sTextFontSize_businessDescriptionVCTextViewFont != v6)|| (uint64_t v12 = businessDescriptionVCTextViewFont_sCustomTextFontSize_businessDescriptionVCTextViewFont, *(double *)&businessDescriptionVCTextViewFont_sCustomTextFontSize_businessDescriptionVCTextViewFont != v7)|| (objc_msgSend((id)businessDescriptionVCTextViewFont_sCustomTextFontName_businessDescriptionVCTextViewFont, "isEqualToString:", v10, *(double *)&businessDescriptionVCTextViewFont_sCustomTextFontSize_businessDescriptionVCTextViewFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    double v14 = (void *)businessDescriptionVCTextViewFont_sBehavior;
    businessDescriptionVCTextViewFont_sBehavior = v13;

    objc_storeStrong((id *)&businessDescriptionVCTextViewFont_sContentSizeCategory_businessDescriptionVCTextViewFont, v3);
    businessDescriptionVCTextViewFont_sIsIncreaseContrastEnabled_businessDescriptionVCTextViewFont = v4;
    businessDescriptionVCTextViewFont_sIsBoldTextEnabled_businessDescriptionVCTextViewFont = IsBoldTextEnabled;
    businessDescriptionVCTextViewFont_sTextFontSize_businessDescriptionVCTextViewFont = *(void *)&v6;
    businessDescriptionVCTextViewFont_sCustomTextFontSize_businessDescriptionVCTextViewFont = *(void *)&v7;
    objc_storeStrong((id *)&businessDescriptionVCTextViewFont_sCustomTextFontName_businessDescriptionVCTextViewFont, v9);
  }
  double v15 = (UIFont *)(id)businessDescriptionVCTextViewFont_sBehavior;

  return v15;
}

- (double)businessBrandingAnimationDuration
{
  if (businessBrandingAnimationDuration_once != -1) {
    dispatch_once(&businessBrandingAnimationDuration_once, &__block_literal_global_2284);
  }
  return *(double *)&businessBrandingAnimationDuration_sBehavior;
}

void __49__CKUIBehavior_businessBrandingAnimationDuration__block_invoke()
{
  businessBrandingAnimationDuration_sBehavior = 0x3FD6666666666666;
}

- (double)businessBrandingBannerInset
{
  if (businessBrandingBannerInset_once != -1) {
    dispatch_once(&businessBrandingBannerInset_once, &__block_literal_global_2286);
  }
  return *(double *)&businessBrandingBannerInset_sBehavior;
}

void __43__CKUIBehavior_businessBrandingBannerInset__block_invoke()
{
  businessBrandingBannerInset_sBehavior = 0x4018000000000000;
}

- (BOOL)ckShouldUpdatesyncProgressLabelFont
{
  return 0;
}

- (UIFont)syncProgressLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)syncProgressLabelFont_sContentSizeCategory_syncProgressLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesyncProgressLabelFont]
    || v11
    || syncProgressLabelFont_sIsIncreaseContrastEnabled_syncProgressLabelFont != v4
    || syncProgressLabelFont_sIsBoldTextEnabled_syncProgressLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = syncProgressLabelFont_sTextFontSize_syncProgressLabelFont,
        *(double *)&syncProgressLabelFont_sTextFontSize_syncProgressLabelFont != v6)
    || (uint64_t v12 = syncProgressLabelFont_sCustomTextFontSize_syncProgressLabelFont,
        *(double *)&syncProgressLabelFont_sCustomTextFontSize_syncProgressLabelFont != v7)
    || (objc_msgSend((id)syncProgressLabelFont_sCustomTextFontName_syncProgressLabelFont, "isEqualToString:", v10, *(double *)&syncProgressLabelFont_sCustomTextFontSize_syncProgressLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "_preferredFontForTextStyle:maximumContentSizeCategory:", *MEMORY[0x1E4F43888], *MEMORY[0x1E4F437A0], *(double *)&v12);
    double v14 = (void *)syncProgressLabelFont_sBehavior;
    syncProgressLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&syncProgressLabelFont_sContentSizeCategory_syncProgressLabelFont, v3);
    syncProgressLabelFont_sIsIncreaseContrastEnabled_syncProgressLabelFont = v4;
    syncProgressLabelFont_sIsBoldTextEnabled_syncProgressLabelFont = IsBoldTextEnabled;
    syncProgressLabelFont_sTextFontSize_syncProgressLabelFont = *(void *)&v6;
    syncProgressLabelFont_sCustomTextFontSize_syncProgressLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&syncProgressLabelFont_sCustomTextFontName_syncProgressLabelFont, v9);
  }
  double v15 = (UIFont *)(id)syncProgressLabelFont_sBehavior;

  return v15;
}

- (UIColor)syncBarHairlineColor
{
  if (syncBarHairlineColor_once != -1) {
    dispatch_once(&syncBarHairlineColor_once, &__block_literal_global_2288);
  }
  double v2 = (void *)syncBarHairlineColor_sBehavior;

  return (UIColor *)v2;
}

void __36__CKUIBehavior_syncBarHairlineColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] systemGray5Color];
  double v1 = (void *)syncBarHairlineColor_sBehavior;
  syncBarHairlineColor_sBehavior = v0;
}

- (UIColor)syncProgressTrackColor
{
  if (syncProgressTrackColor_once != -1) {
    dispatch_once(&syncProgressTrackColor_once, &__block_literal_global_2290);
  }
  double v2 = (void *)syncProgressTrackColor_sBehavior;

  return (UIColor *)v2;
}

void __38__CKUIBehavior_syncProgressTrackColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] clearColor];
  double v1 = (void *)syncProgressTrackColor_sBehavior;
  syncProgressTrackColor_sBehavior = v0;
}

- (UIColor)syncProgressColor
{
  if (syncProgressColor_once != -1) {
    dispatch_once(&syncProgressColor_once, &__block_literal_global_2292);
  }
  double v2 = (void *)syncProgressColor_sBehavior;

  return (UIColor *)v2;
}

void __33__CKUIBehavior_syncProgressColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] systemBlueColor];
  double v1 = (void *)syncProgressColor_sBehavior;
  syncProgressColor_sBehavior = v0;
}

- (double)syncBarFooterHeight
{
  if (syncBarFooterHeight_once != -1) {
    dispatch_once(&syncBarFooterHeight_once, &__block_literal_global_2294);
  }
  return *(double *)&syncBarFooterHeight_sBehavior;
}

void __35__CKUIBehavior_syncBarFooterHeight__block_invoke()
{
  syncBarFooterHeight_sBehavior = 0x4048800000000000;
}

- (int64_t)syncBarBlurEffectStyle
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __38__CKUIBehavior_syncBarBlurEffectStyle__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (syncBarBlurEffectStyle_once != -1) {
    dispatch_once(&syncBarBlurEffectStyle_once, block);
  }
  return syncBarBlurEffectStyle_sBehavior;
}

uint64_t __38__CKUIBehavior_syncBarBlurEffectStyle__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _syncBarBlurEffectStyle];
  syncBarBlurEffectStyle_sBehavior = result;
  return result;
}

- (int64_t)_syncBarBlurEffectStyle
{
  return 10;
}

- (double)syncProgressLeadingPadding
{
  if (syncProgressLeadingPadding_once != -1) {
    dispatch_once(&syncProgressLeadingPadding_once, &__block_literal_global_2296);
  }
  return 0.0;
}

- (double)syncProgressTrailingPadding
{
  if (syncProgressTrailingPadding_once != -1) {
    dispatch_once(&syncProgressTrailingPadding_once, &__block_literal_global_2298);
  }
  return 0.0;
}

- (double)syncProgressTopPadding
{
  if (syncProgressTopPadding_once != -1) {
    dispatch_once(&syncProgressTopPadding_once, &__block_literal_global_2300);
  }
  return 0.0;
}

- (int64_t)syncProgressBarStyle
{
  if (syncProgressBarStyle_once != -1) {
    dispatch_once(&syncProgressBarStyle_once, &__block_literal_global_2302);
  }
  return syncProgressBarStyle_sBehavior;
}

void __36__CKUIBehavior_syncProgressBarStyle__block_invoke()
{
  syncProgressBarStyle_sBehavior = 1;
}

- (double)callButtonSize
{
  if (callButtonSize_once != -1) {
    dispatch_once(&callButtonSize_once, &__block_literal_global_2304);
  }
  return *(double *)&callButtonSize_sBehavior;
}

void __30__CKUIBehavior_callButtonSize__block_invoke()
{
  callButtonSize_sBehavior = 0x4040000000000000;
}

- (UIEdgeInsets)callButtonImageInsets
{
  if (callButtonImageInsets_once != -1) {
    dispatch_once(&callButtonImageInsets_once, &__block_literal_global_2306);
  }
  double v2 = *(double *)&callButtonImageInsets_sBehavior_0;
  double v3 = *(double *)&callButtonImageInsets_sBehavior_1;
  double v4 = *(double *)&callButtonImageInsets_sBehavior_2;
  double v5 = *(double *)&callButtonImageInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

void __37__CKUIBehavior_callButtonImageInsets__block_invoke()
{
  callButtonImageInsets_sBehavior_0 = 0x401C000000000000;
  callButtonImageInsets_sBehavior_1 = 0x401C000000000000;
  callButtonImageInsets_sBehavior_2 = 0x401C000000000000;
  callButtonImageInsets_sBehavior_3 = 0x401C000000000000;
}

- (double)callButtonLongPressDuration
{
  if (callButtonLongPressDuration_once != -1) {
    dispatch_once(&callButtonLongPressDuration_once, &__block_literal_global_2308);
  }
  return *(double *)&callButtonLongPressDuration_sBehavior;
}

void __43__CKUIBehavior_callButtonLongPressDuration__block_invoke()
{
  callButtonLongPressDuration_sBehavior = 0x4000000000000000;
}

- (double)searchCellPreferredWidth
{
  if (searchCellPreferredWidth_once != -1) {
    dispatch_once(&searchCellPreferredWidth_once, &__block_literal_global_2310);
  }
  return *(double *)&searchCellPreferredWidth_sBehavior;
}

void __40__CKUIBehavior_searchCellPreferredWidth__block_invoke()
{
  searchCellPreferredWidth_sBehavior = 0x4064000000000000;
}

- (unint64_t)searchDefaultMaxResults
{
  if (searchDefaultMaxResults_once != -1) {
    dispatch_once(&searchDefaultMaxResults_once, &__block_literal_global_2312);
  }
  if (searchDefaultMaxResults_sBehavior) {
    return 4;
  }
  else {
    return 0;
  }
}

void __39__CKUIBehavior_searchDefaultMaxResults__block_invoke()
{
  searchDefaultMaxResults_sBehavior = 1;
}

- (UIEdgeInsets)searchSectionInsets
{
  if (searchSectionInsets_once != -1) {
    dispatch_once(&searchSectionInsets_once, &__block_literal_global_2314);
  }
  double v2 = *(double *)&searchSectionInsets_sBehavior_3;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v2;
  result.double bottom = v5;
  result.double left = v4;
  result.double top = v3;
  return result;
}

void __35__CKUIBehavior_searchSectionInsets__block_invoke()
{
  searchSectionInsets_sBehavior_3 = 0x4020000000000000;
}

- (UIEdgeInsets)searchSectionMarginInsets
{
  if (searchSectionMarginInsets_once != -1) {
    dispatch_once(&searchSectionMarginInsets_once, &__block_literal_global_2316);
  }
  double v2 = *(double *)&searchSectionMarginInsets_sBehavior_1;
  double v3 = *(double *)&searchSectionMarginInsets_sBehavior_3;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v3;
  result.double bottom = v5;
  result.double left = v2;
  result.double top = v4;
  return result;
}

void __41__CKUIBehavior_searchSectionMarginInsets__block_invoke()
{
  searchSectionMarginInsets_sBehavior_1 = 0x4030000000000000;
  searchSectionMarginInsets_sBehavior_3 = 0x4030000000000000;
}

- (UIEdgeInsets)searchDetailsSectionMarginInsets
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __48__CKUIBehavior_searchDetailsSectionMarginInsets__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchDetailsSectionMarginInsets_once != -1) {
    dispatch_once(&searchDetailsSectionMarginInsets_once, block);
  }
  double v2 = *(double *)&searchDetailsSectionMarginInsets_sBehavior_0;
  double v3 = *(double *)&searchDetailsSectionMarginInsets_sBehavior_1;
  double v4 = *(double *)&searchDetailsSectionMarginInsets_sBehavior_2;
  double v5 = *(double *)&searchDetailsSectionMarginInsets_sBehavior_3;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

uint64_t __48__CKUIBehavior_searchDetailsSectionMarginInsets__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchSectionMarginInsets];
  searchDetailsSectionMarginInsets_sBehavior_0 = v2;
  searchDetailsSectionMarginInsets_sBehavior_1 = v3;
  searchDetailsSectionMarginInsets_sBehavior_2 = v4;
  searchDetailsSectionMarginInsets_sBehavior_3 = v5;
  return result;
}

- (double)searchLeadingAndTrailingMaxPadding
{
  if (searchLeadingAndTrailingMaxPadding_once != -1) {
    dispatch_once(&searchLeadingAndTrailingMaxPadding_once, &__block_literal_global_2318);
  }
  return *(double *)&searchLeadingAndTrailingMaxPadding_sBehavior;
}

void __50__CKUIBehavior_searchLeadingAndTrailingMaxPadding__block_invoke()
{
  searchLeadingAndTrailingMaxPadding_sBehavior = 0x4030000000000000;
}

- (double)searchDetailsLeadingAndTrailingMaxPadding
{
  if (searchDetailsLeadingAndTrailingMaxPadding_once != -1) {
    dispatch_once(&searchDetailsLeadingAndTrailingMaxPadding_once, &__block_literal_global_2320);
  }
  return *(double *)&searchDetailsLeadingAndTrailingMaxPadding_sBehavior;
}

void __57__CKUIBehavior_searchDetailsLeadingAndTrailingMaxPadding__block_invoke()
{
  searchDetailsLeadingAndTrailingMaxPadding_sBehavior = 0x4030000000000000;
}

- (NSDirectionalEdgeInsets)searchResultsInsets
{
  if (searchResultsInsets_once != -1) {
    dispatch_once(&searchResultsInsets_once, &__block_literal_global_2322);
  }
  double v3 = *((double *)&searchResultsInsets_sBehavior + 1);
  double v2 = *(double *)&searchResultsInsets_sBehavior;
  double v4 = *(double *)&qword_1E9242CC8;
  double v5 = unk_1E9242CD0;
  result.trailing = v5;
  result.double bottom = v4;
  result.leading = v3;
  result.double top = v2;
  return result;
}

__n128 __35__CKUIBehavior_searchResultsInsets__block_invoke()
{
  __n128 result = *(__n128 *)MEMORY[0x1E4F424F0];
  long long v1 = *(_OWORD *)(MEMORY[0x1E4F424F0] + 16);
  searchResultsInsets_sBehavior = *MEMORY[0x1E4F424F0];
  *(_OWORD *)&qword_1E9242CC8 = v1;
  return result;
}

- (NSDirectionalEdgeInsets)searchDetailsResultsInsets
{
  if (searchDetailsResultsInsets_once != -1) {
    dispatch_once(&searchDetailsResultsInsets_once, &__block_literal_global_2324);
  }
  double v2 = *(double *)&searchDetailsResultsInsets_sBehavior_0;
  double v3 = *(double *)&searchDetailsResultsInsets_sBehavior_1;
  double v4 = *(double *)&searchDetailsResultsInsets_sBehavior_2;
  double v5 = *(double *)&searchDetailsResultsInsets_sBehavior_3;
  result.trailing = v5;
  result.double bottom = v4;
  result.leading = v3;
  result.double top = v2;
  return result;
}

void __42__CKUIBehavior_searchDetailsResultsInsets__block_invoke()
{
  searchDetailsResultsInsets_sBehavior_0 = 0x4028000000000000;
  searchDetailsResultsInsets_sBehavior_1 = 0x4030000000000000;
  searchDetailsResultsInsets_sBehavior_2 = 0x4030000000000000;
  searchDetailsResultsInsets_sBehavior_3 = 0x4030000000000000;
}

- (double)searchSuggestionsSeparatorLeadingInset
{
  if (searchSuggestionsSeparatorLeadingInset_once != -1) {
    dispatch_once(&searchSuggestionsSeparatorLeadingInset_once, &__block_literal_global_2326);
  }
  return *(double *)&searchSuggestionsSeparatorLeadingInset_sBehavior;
}

void __54__CKUIBehavior_searchSuggestionsSeparatorLeadingInset__block_invoke()
{
  searchSuggestionsSeparatorLeadingInset_sBehavior = 0x402C000000000000;
}

- (double)searchSuggestionsImageToTextPadding
{
  if (searchSuggestionsImageToTextPadding_once != -1) {
    dispatch_once(&searchSuggestionsImageToTextPadding_once, &__block_literal_global_2328);
  }
  return *(double *)&searchSuggestionsImageToTextPadding_sBehavior;
}

void __51__CKUIBehavior_searchSuggestionsImageToTextPadding__block_invoke()
{
  searchSuggestionsImageToTextPadding_sBehavior = 0x4028000000000000;
}

- (BOOL)searchSectionHeadersPinToBounds
{
  if (searchSectionHeadersPinToBounds_once != -1) {
    dispatch_once(&searchSectionHeadersPinToBounds_once, &__block_literal_global_2330);
  }
  return searchSectionHeadersPinToBounds_sBehavior;
}

void __47__CKUIBehavior_searchSectionHeadersPinToBounds__block_invoke()
{
  searchSectionHeadersPinToBounds_sBehavior = 1;
}

- (double)searchSeeAllButtonTrailingMargin
{
  if (searchSeeAllButtonTrailingMargin_once != -1) {
    dispatch_once(&searchSeeAllButtonTrailingMargin_once, &__block_literal_global_2332);
  }
  return 0.0;
}

- (double)searchResultsTitleHeaderTopPadding
{
  if (searchResultsTitleHeaderTopPadding_once != -1) {
    dispatch_once(&searchResultsTitleHeaderTopPadding_once, &__block_literal_global_2334);
  }
  return *(double *)&searchResultsTitleHeaderTopPadding_sBehavior;
}

void __50__CKUIBehavior_searchResultsTitleHeaderTopPadding__block_invoke()
{
  searchResultsTitleHeaderTopPadding_sBehavior = 0x4028000000000000;
}

- (double)searchResultsTitleHeaderBottomPadding
{
  if (searchResultsTitleHeaderBottomPadding_once != -1) {
    dispatch_once(&searchResultsTitleHeaderBottomPadding_once, &__block_literal_global_2336);
  }
  return *(double *)&searchResultsTitleHeaderBottomPadding_sBehavior;
}

void __53__CKUIBehavior_searchResultsTitleHeaderBottomPadding__block_invoke()
{
  searchResultsTitleHeaderBottomPadding_sBehavior = 0x4028000000000000;
}

- (double)searchResultsTitleHeaderAXTopPadding
{
  if (searchResultsTitleHeaderAXTopPadding_once != -1) {
    dispatch_once(&searchResultsTitleHeaderAXTopPadding_once, &__block_literal_global_2338);
  }
  return *(double *)&searchResultsTitleHeaderAXTopPadding_sBehavior;
}

void __52__CKUIBehavior_searchResultsTitleHeaderAXTopPadding__block_invoke()
{
  searchResultsTitleHeaderAXTopPadding_sBehavior = 0x4038000000000000;
}

- (double)searchResultsTitleHeaderAXBottomPadding
{
  if (searchResultsTitleHeaderAXBottomPadding_once != -1) {
    dispatch_once(&searchResultsTitleHeaderAXBottomPadding_once, &__block_literal_global_2340);
  }
  return *(double *)&searchResultsTitleHeaderAXBottomPadding_sBehavior;
}

void __55__CKUIBehavior_searchResultsTitleHeaderAXBottomPadding__block_invoke()
{
  searchResultsTitleHeaderAXBottomPadding_sBehavior = 0x4031000000000000;
}

- (double)searchResultsTitleHeaderDetailsTopPadding
{
  if (searchResultsTitleHeaderDetailsTopPadding_once != -1) {
    dispatch_once(&searchResultsTitleHeaderDetailsTopPadding_once, &__block_literal_global_2342);
  }
  return *(double *)&searchResultsTitleHeaderDetailsTopPadding_sBehavior;
}

void __57__CKUIBehavior_searchResultsTitleHeaderDetailsTopPadding__block_invoke()
{
  searchResultsTitleHeaderDetailsTopPadding_sBehavior = 0x4028000000000000;
}

- (double)searchResultsTitleHeaderInterItemSpacing
{
  if (searchResultsTitleHeaderInterItemSpacing_once != -1) {
    dispatch_once(&searchResultsTitleHeaderInterItemSpacing_once, &__block_literal_global_2344);
  }
  return *(double *)&searchResultsTitleHeaderInterItemSpacing_sBehavior;
}

void __56__CKUIBehavior_searchResultsTitleHeaderInterItemSpacing__block_invoke()
{
  searchResultsTitleHeaderInterItemSpacing_sBehavior = 0x4030000000000000;
}

- (double)searchHeaderHeight
{
  if (searchHeaderHeight_once != -1) {
    dispatch_once(&searchHeaderHeight_once, &__block_literal_global_2346);
  }
  return *(double *)&searchHeaderHeight_sBehavior;
}

void __34__CKUIBehavior_searchHeaderHeight__block_invoke()
{
  searchHeaderHeight_sBehavior = 0x4046000000000000;
}

- (BOOL)ckShouldUpdatesearchHeaderFont
{
  return 0;
}

- (UIFont)searchHeaderFont
{
  v30[1] = *MEMORY[0x1E4F143B8];
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchHeaderFont_sContentSizeCategory_searchHeaderFont, v3);
  BOOL v12 = [(CKUIBehavior *)self ckShouldUpdatesearchHeaderFont];
  double v14 = &previewPrewarmQueue_once;
  if (v12
    || v11
    || searchHeaderFont_sIsIncreaseContrastEnabled_searchHeaderFont != v4
    || searchHeaderFont_sIsBoldTextEnabled_searchHeaderFont != IsBoldTextEnabled
    || (uint64_t v13 = searchHeaderFont_sTextFontSize_searchHeaderFont,
        *(double *)&searchHeaderFont_sTextFontSize_searchHeaderFont != v6)
    || (uint64_t v13 = searchHeaderFont_sCustomTextFontSize_searchHeaderFont,
        *(double *)&searchHeaderFont_sCustomTextFontSize_searchHeaderFont != v7)
    || (objc_msgSend((id)searchHeaderFont_sCustomTextFontName_searchHeaderFont, "isEqualToString:", v10, *(double *)&searchHeaderFont_sCustomTextFontSize_searchHeaderFont) & 1) == 0)
  {
    double v15 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438F8], 0x8000, 0, *(double *)&v13);
    uint64_t v29 = *MEMORY[0x1E4FB0950];
    uint64_t v27 = *MEMORY[0x1E4FB09F0];
    double v16 = [NSNumber numberWithDouble:*MEMORY[0x1E4FB09E0]];
    id v28 = v16;
    obj = v9;
    double v17 = v10;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    v19 = double v18 = v3;
    v30[0] = v19;
    id v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:&v29 count:1];
    id v21 = [v15 fontDescriptorByAddingAttributes:v20];

    double v3 = v18;
    double v14 = &previewPrewarmQueue_once;
    uint64_t v22 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v21 size:0.0];

    id v10 = v17;
    id v23 = (void *)searchHeaderFont_sBehavior;
    searchHeaderFont_sBehavior = v22;

    objc_storeStrong((id *)&searchHeaderFont_sContentSizeCategory_searchHeaderFont, v18);
    searchHeaderFont_sIsIncreaseContrastEnabled_searchHeaderFont = v4;
    searchHeaderFont_sIsBoldTextEnabled_searchHeaderFont = IsBoldTextEnabled;
    searchHeaderFont_sTextFontSize_searchHeaderFont = *(void *)&v6;
    searchHeaderFont_sCustomTextFontSize_searchHeaderFont = *(void *)&v7;
    objc_storeStrong((id *)&searchHeaderFont_sCustomTextFontName_searchHeaderFont, obj);
  }
  id v24 = (UIFont *)(id)v14[10];

  return v24;
}

- (BOOL)ckShouldUpdatesearchHeaderButtonFont
{
  return 0;
}

- (UIFont)searchHeaderButtonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchHeaderButtonFont_sContentSizeCategory_searchHeaderButtonFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchHeaderButtonFont]
    || v11
    || searchHeaderButtonFont_sIsIncreaseContrastEnabled_searchHeaderButtonFont != v4
    || searchHeaderButtonFont_sIsBoldTextEnabled_searchHeaderButtonFont != IsBoldTextEnabled
    || (uint64_t v12 = searchHeaderButtonFont_sTextFontSize_searchHeaderButtonFont,
        *(double *)&searchHeaderButtonFont_sTextFontSize_searchHeaderButtonFont != v6)
    || (uint64_t v12 = searchHeaderButtonFont_sCustomTextFontSize_searchHeaderButtonFont,
        *(double *)&searchHeaderButtonFont_sCustomTextFontSize_searchHeaderButtonFont != v7)
    || (objc_msgSend((id)searchHeaderButtonFont_sCustomTextFontName_searchHeaderButtonFont, "isEqualToString:", v10, *(double *)&searchHeaderButtonFont_sCustomTextFontSize_searchHeaderButtonFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43870], *(double *)&v12);
    double v14 = (void *)searchHeaderButtonFont_sBehavior;
    searchHeaderButtonFont_sBehavior = v13;

    objc_storeStrong((id *)&searchHeaderButtonFont_sContentSizeCategory_searchHeaderButtonFont, v3);
    searchHeaderButtonFont_sIsIncreaseContrastEnabled_searchHeaderButtonFont = v4;
    searchHeaderButtonFont_sIsBoldTextEnabled_searchHeaderButtonFont = IsBoldTextEnabled;
    searchHeaderButtonFont_sTextFontSize_searchHeaderButtonFont = *(void *)&v6;
    searchHeaderButtonFont_sCustomTextFontSize_searchHeaderButtonFont = *(void *)&v7;
    objc_storeStrong((id *)&searchHeaderButtonFont_sCustomTextFontName_searchHeaderButtonFont, v9);
  }
  double v15 = (UIFont *)(id)searchHeaderButtonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesearchDetailsHeaderFont
{
  return 0;
}

- (UIFont)searchDetailsHeaderFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchDetailsHeaderFont_sContentSizeCategory_searchDetailsHeaderFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchDetailsHeaderFont]
    || v11
    || searchDetailsHeaderFont_sIsIncreaseContrastEnabled_searchDetailsHeaderFont != v4
    || searchDetailsHeaderFont_sIsBoldTextEnabled_searchDetailsHeaderFont != IsBoldTextEnabled
    || (uint64_t v12 = searchDetailsHeaderFont_sTextFontSize_searchDetailsHeaderFont,
        *(double *)&searchDetailsHeaderFont_sTextFontSize_searchDetailsHeaderFont != v6)
    || (uint64_t v12 = searchDetailsHeaderFont_sCustomTextFontSize_searchDetailsHeaderFont,
        *(double *)&searchDetailsHeaderFont_sCustomTextFontSize_searchDetailsHeaderFont != v7)
    || (objc_msgSend((id)searchDetailsHeaderFont_sCustomTextFontName_searchDetailsHeaderFont, "isEqualToString:", v10, *(double *)&searchDetailsHeaderFont_sCustomTextFontSize_searchDetailsHeaderFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43890], *(double *)&v12);
    double v14 = (void *)searchDetailsHeaderFont_sBehavior;
    searchDetailsHeaderFont_sBehavior = v13;

    objc_storeStrong((id *)&searchDetailsHeaderFont_sContentSizeCategory_searchDetailsHeaderFont, v3);
    searchDetailsHeaderFont_sIsIncreaseContrastEnabled_searchDetailsHeaderFont = v4;
    searchDetailsHeaderFont_sIsBoldTextEnabled_searchDetailsHeaderFont = IsBoldTextEnabled;
    searchDetailsHeaderFont_sTextFontSize_searchDetailsHeaderFont = *(void *)&v6;
    searchDetailsHeaderFont_sCustomTextFontSize_searchDetailsHeaderFont = *(void *)&v7;
    objc_storeStrong((id *)&searchDetailsHeaderFont_sCustomTextFontName_searchDetailsHeaderFont, v9);
  }
  double v15 = (UIFont *)(id)searchDetailsHeaderFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesearchDetailsHeaderFontIdentity
{
  return 0;
}

- (UIFont)searchDetailsHeaderFontIdentity
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchDetailsHeaderFontIdentity_sContentSizeCategory_searchDetailsHeaderFontIdentity, v3);
  if (-[CKUIBehavior ckShouldUpdatesearchDetailsHeaderFontIdentity](self, "ckShouldUpdatesearchDetailsHeaderFontIdentity")|| v11|| searchDetailsHeaderFontIdentity_sIsIncreaseContrastEnabled_searchDetailsHeaderFontIdentity != v4|| searchDetailsHeaderFontIdentity_sIsBoldTextEnabled_searchDetailsHeaderFontIdentity != IsBoldTextEnabled|| (uint64_t v12 = searchDetailsHeaderFontIdentity_sTextFontSize_searchDetailsHeaderFontIdentity, *(double *)&searchDetailsHeaderFontIdentity_sTextFontSize_searchDetailsHeaderFontIdentity != v6)|| (uint64_t v12 = searchDetailsHeaderFontIdentity_sCustomTextFontSize_searchDetailsHeaderFontIdentity, *(double *)&searchDetailsHeaderFontIdentity_sCustomTextFontSize_searchDetailsHeaderFontIdentity != v7)|| (objc_msgSend((id)searchDetailsHeaderFontIdentity_sCustomTextFontName_searchDetailsHeaderFontIdentity, "isEqualToString:", v10, *(double *)&searchDetailsHeaderFontIdentity_sCustomTextFontSize_searchDetailsHeaderFontIdentity) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:", *MEMORY[0x1E4F438A0], *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)searchDetailsHeaderFontIdentity_sBehavior;
    searchDetailsHeaderFontIdentity_sBehavior = v14;

    objc_storeStrong((id *)&searchDetailsHeaderFontIdentity_sContentSizeCategory_searchDetailsHeaderFontIdentity, v3);
    searchDetailsHeaderFontIdentity_sIsIncreaseContrastEnabled_searchDetailsHeaderFontIdentity = v4;
    searchDetailsHeaderFontIdentity_sIsBoldTextEnabled_searchDetailsHeaderFontIdentity = IsBoldTextEnabled;
    searchDetailsHeaderFontIdentity_sTextFontSize_searchDetailsHeaderFontIdentity = *(void *)&v6;
    searchDetailsHeaderFontIdentity_sCustomTextFontSize_searchDetailsHeaderFontIdentity = *(void *)&v7;
    objc_storeStrong((id *)&searchDetailsHeaderFontIdentity_sCustomTextFontName_searchDetailsHeaderFontIdentity, v9);
  }
  double v16 = (UIFont *)(id)searchDetailsHeaderFontIdentity_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatesearchAttachmentResultLabelFont
{
  return 0;
}

- (UIFont)searchAttachmentResultLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchAttachmentResultLabelFont_sContentSizeCategory_searchAttachmentResultLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatesearchAttachmentResultLabelFont](self, "ckShouldUpdatesearchAttachmentResultLabelFont")|| v11|| searchAttachmentResultLabelFont_sIsIncreaseContrastEnabled_searchAttachmentResultLabelFont != v4|| searchAttachmentResultLabelFont_sIsBoldTextEnabled_searchAttachmentResultLabelFont != IsBoldTextEnabled|| (uint64_t v12 = searchAttachmentResultLabelFont_sTextFontSize_searchAttachmentResultLabelFont, *(double *)&searchAttachmentResultLabelFont_sTextFontSize_searchAttachmentResultLabelFont != v6)|| (uint64_t v12 = searchAttachmentResultLabelFont_sCustomTextFontSize_searchAttachmentResultLabelFont, *(double *)&searchAttachmentResultLabelFont_sCustomTextFontSize_searchAttachmentResultLabelFont != v7)|| (objc_msgSend((id)searchAttachmentResultLabelFont_sCustomTextFontName_searchAttachmentResultLabelFont, "isEqualToString:", v10, *(double *)&searchAttachmentResultLabelFont_sCustomTextFontSize_searchAttachmentResultLabelFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self searchResultLabelFont];
    uint64_t v14 = (void *)searchAttachmentResultLabelFont_sBehavior;
    searchAttachmentResultLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&searchAttachmentResultLabelFont_sContentSizeCategory_searchAttachmentResultLabelFont, v3);
    searchAttachmentResultLabelFont_sIsIncreaseContrastEnabled_searchAttachmentResultLabelFont = v4;
    searchAttachmentResultLabelFont_sIsBoldTextEnabled_searchAttachmentResultLabelFont = IsBoldTextEnabled;
    searchAttachmentResultLabelFont_sTextFontSize_searchAttachmentResultLabelFont = *(void *)&v6;
    searchAttachmentResultLabelFont_sCustomTextFontSize_searchAttachmentResultLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&searchAttachmentResultLabelFont_sCustomTextFontName_searchAttachmentResultLabelFont, v9);
  }
  double v15 = (UIFont *)(id)searchAttachmentResultLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesearchAttachmentResultDateLabelFont
{
  return 0;
}

- (UIFont)searchAttachmentResultDateLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchAttachmentResultDateLabelFont_sContentSizeCategory_searchAttachmentResultDateLabelFont, v3);
  if (-[CKUIBehavior ckShouldUpdatesearchAttachmentResultDateLabelFont](self, "ckShouldUpdatesearchAttachmentResultDateLabelFont")|| v11|| searchAttachmentResultDateLabelFont_sIsIncreaseContrastEnabled_searchAttachmentResultDateLabelFont != v4|| searchAttachmentResultDateLabelFont_sIsBoldTextEnabled_searchAttachmentResultDateLabelFont != IsBoldTextEnabled|| (uint64_t v12 = searchAttachmentResultDateLabelFont_sTextFontSize_searchAttachmentResultDateLabelFont, *(double *)&searchAttachmentResultDateLabelFont_sTextFontSize_searchAttachmentResultDateLabelFont != v6)|| (uint64_t v12 = searchAttachmentResultDateLabelFont_sCustomTextFontSize_searchAttachmentResultDateLabelFont, *(double *)&searchAttachmentResultDateLabelFont_sCustomTextFontSize_searchAttachmentResultDateLabelFont != v7)|| (objc_msgSend((id)searchAttachmentResultDateLabelFont_sCustomTextFontName_searchAttachmentResultDateLabelFont, "isEqualToString:", v10, *(double *)&searchAttachmentResultDateLabelFont_sCustomTextFontSize_searchAttachmentResultDateLabelFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self searchResultLabelFont];
    uint64_t v14 = (void *)searchAttachmentResultDateLabelFont_sBehavior;
    searchAttachmentResultDateLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&searchAttachmentResultDateLabelFont_sContentSizeCategory_searchAttachmentResultDateLabelFont, v3);
    searchAttachmentResultDateLabelFont_sIsIncreaseContrastEnabled_searchAttachmentResultDateLabelFont = v4;
    searchAttachmentResultDateLabelFont_sIsBoldTextEnabled_searchAttachmentResultDateLabelFont = IsBoldTextEnabled;
    searchAttachmentResultDateLabelFont_sTextFontSize_searchAttachmentResultDateLabelFont = *(void *)&v6;
    searchAttachmentResultDateLabelFont_sCustomTextFontSize_searchAttachmentResultDateLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&searchAttachmentResultDateLabelFont_sCustomTextFontName_searchAttachmentResultDateLabelFont, v9);
  }
  double v15 = (UIFont *)(id)searchAttachmentResultDateLabelFont_sBehavior;

  return v15;
}

- (double)searchSectionTitleVertPadding
{
  if (searchSectionTitleVertPadding_once != -1) {
    dispatch_once(&searchSectionTitleVertPadding_once, &__block_literal_global_2348);
  }
  return *(double *)&searchSectionTitleVertPadding_sBehavior;
}

void __45__CKUIBehavior_searchSectionTitleVertPadding__block_invoke()
{
  searchSectionTitleVertPadding_sBehavior = 0x4018000000000000;
}

- (NSDirectionalEdgeInsets)searchConversationSectionInsets
{
  if (searchConversationSectionInsets_once != -1) {
    dispatch_once(&searchConversationSectionInsets_once, &__block_literal_global_2350);
  }
  double v2 = *(double *)&searchConversationSectionInsets_sBehavior_0;
  double v3 = *(double *)&searchConversationSectionInsets_sBehavior_2;
  double v4 = 0.0;
  double v5 = 0.0;
  result.trailing = v5;
  result.double bottom = v3;
  result.leading = v4;
  result.double top = v2;
  return result;
}

void __47__CKUIBehavior_searchConversationSectionInsets__block_invoke()
{
  searchConversationSectionInsets_sBehavior_0 = 0x4034000000000000;
  searchConversationSectionInsets_sBehavior_2 = 0x4034000000000000;
}

- (double)searchConversationMinAvatarLabelSpacing
{
  if (searchConversationMinAvatarLabelSpacing_once != -1) {
    dispatch_once(&searchConversationMinAvatarLabelSpacing_once, &__block_literal_global_2352);
  }
  return *(double *)&searchConversationMinAvatarLabelSpacing_sBehavior;
}

void __55__CKUIBehavior_searchConversationMinAvatarLabelSpacing__block_invoke()
{
  searchConversationMinAvatarLabelSpacing_sBehavior = 0x4024000000000000;
}

- (double)searchConversationCellPadding
{
  if (searchConversationCellPadding_once != -1) {
    dispatch_once(&searchConversationCellPadding_once, &__block_literal_global_2354);
  }
  return 0.0;
}

- (double)searchConversationAvatarCellInterItemSpacing
{
  if (searchConversationAvatarCellInterItemSpacing_once != -1) {
    dispatch_once(&searchConversationAvatarCellInterItemSpacing_once, &__block_literal_global_2356);
  }
  return 0.0;
}

- (double)searchResultsInterItemSpacing
{
  if (searchResultsInterItemSpacing_once != -1) {
    dispatch_once(&searchResultsInterItemSpacing_once, &__block_literal_global_2358);
  }
  return *(double *)&searchResultsInterItemSpacing_sBehavior;
}

void __45__CKUIBehavior_searchResultsInterItemSpacing__block_invoke()
{
  searchResultsInterItemSpacing_sBehavior = 0x4024000000000000;
}

- (double)searchResultsCellCornerRadius
{
  if (searchResultsCellCornerRadius_once != -1) {
    dispatch_once(&searchResultsCellCornerRadius_once, &__block_literal_global_2360);
  }
  return *(double *)&searchResultsCellCornerRadius_sBehavior;
}

void __45__CKUIBehavior_searchResultsCellCornerRadius__block_invoke()
{
  searchResultsCellCornerRadius_sBehavior = 0x4024000000000000;
}

- (double)searchResultAvatarSize
{
  if (searchResultAvatarSize_once != -1) {
    dispatch_once(&searchResultAvatarSize_once, &__block_literal_global_2362);
  }
  return *(double *)&searchResultAvatarSize_sBehavior;
}

void __38__CKUIBehavior_searchResultAvatarSize__block_invoke()
{
  searchResultAvatarSize_sBehavior = 0x4040000000000000;
}

- (NSDirectionalEdgeInsets)searchMessagesSectionInsets
{
  if (searchMessagesSectionInsets_once != -1) {
    dispatch_once(&searchMessagesSectionInsets_once, &__block_literal_global_2364);
  }
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.trailing = v5;
  result.double bottom = v4;
  result.leading = v3;
  result.double top = v2;
  return result;
}

- (double)searchMessagesTopSpacing
{
  if (searchMessagesTopSpacing_once != -1) {
    dispatch_once(&searchMessagesTopSpacing_once, &__block_literal_global_2366);
  }
  return *(double *)&searchMessagesTopSpacing_sBehavior;
}

void __40__CKUIBehavior_searchMessagesTopSpacing__block_invoke()
{
  searchMessagesTopSpacing_sBehavior = 0x4028000000000000;
}

- (double)searchMessagesBottomSpacing
{
  if (searchMessagesBottomSpacing_once != -1) {
    dispatch_once(&searchMessagesBottomSpacing_once, &__block_literal_global_2368);
  }
  return *(double *)&searchMessagesBottomSpacing_sBehavior;
}

void __43__CKUIBehavior_searchMessagesBottomSpacing__block_invoke()
{
  searchMessagesBottomSpacing_sBehavior = 0x4032000000000000;
}

- (double)searchMessagesInterGroupSpacing
{
  if (searchMessagesInterGroupSpacing_once != -1) {
    dispatch_once(&searchMessagesInterGroupSpacing_once, &__block_literal_global_2370);
  }
  return 0.0;
}

- (NSDirectionalEdgeInsets)searchMessagesContentInsets
{
  if (searchMessagesContentInsets_once != -1) {
    dispatch_once(&searchMessagesContentInsets_once, &__block_literal_global_2372);
  }
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.trailing = v5;
  result.double bottom = v4;
  result.leading = v3;
  result.double top = v2;
  return result;
}

- (double)searchMessagesConversationToSenderSpacing
{
  if (searchMessagesConversationToSenderSpacing_once != -1) {
    dispatch_once(&searchMessagesConversationToSenderSpacing_once, &__block_literal_global_2374);
  }
  return *(double *)&searchMessagesConversationToSenderSpacing_sBehavior;
}

void __57__CKUIBehavior_searchMessagesConversationToSenderSpacing__block_invoke()
{
  searchMessagesConversationToSenderSpacing_sBehavior = 0x4010000000000000;
}

- (double)searchMessagesSenderToBalloonSpacing
{
  if (searchMessagesSenderToBalloonSpacing_once != -1) {
    dispatch_once(&searchMessagesSenderToBalloonSpacing_once, &__block_literal_global_2376);
  }
  return *(double *)&searchMessagesSenderToBalloonSpacing_sBehavior;
}

void __52__CKUIBehavior_searchMessagesSenderToBalloonSpacing__block_invoke()
{
  searchMessagesSenderToBalloonSpacing_sBehavior = 0x4020000000000000;
}

- (double)searchMessagesBalloonToChevronSpacing
{
  if (searchMessagesBalloonToChevronSpacing_once != -1) {
    dispatch_once(&searchMessagesBalloonToChevronSpacing_once, &__block_literal_global_2378);
  }
  return *(double *)&searchMessagesBalloonToChevronSpacing_sBehavior;
}

void __53__CKUIBehavior_searchMessagesBalloonToChevronSpacing__block_invoke()
{
  searchMessagesBalloonToChevronSpacing_sBehavior = 0x4028000000000000;
}

- (double)searchMessagesHorizontalBalloonMargin
{
  if (searchMessagesHorizontalBalloonMargin_once != -1) {
    dispatch_once(&searchMessagesHorizontalBalloonMargin_once, &__block_literal_global_2380);
  }
  return *(double *)&searchMessagesHorizontalBalloonMargin_sBehavior;
}

void __53__CKUIBehavior_searchMessagesHorizontalBalloonMargin__block_invoke()
{
  searchMessagesHorizontalBalloonMargin_sBehavior = 0x4052000000000000;
}

- (CGSize)searchMessagesAvatarSize
{
  if (searchMessagesAvatarSize_once != -1) {
    dispatch_once(&searchMessagesAvatarSize_once, &__block_literal_global_2382);
  }
  double v2 = *(double *)&searchMessagesAvatarSize_sBehavior_0;
  double v3 = *(double *)&searchMessagesAvatarSize_sBehavior_1;
  result.double height = v3;
  result.double width = v2;
  return result;
}

void __40__CKUIBehavior_searchMessagesAvatarSize__block_invoke()
{
  searchMessagesAvatarSize_sBehavior_0 = 0x403C000000000000;
  searchMessagesAvatarSize_sBehavior_1 = 0x403C000000000000;
}

- (unint64_t)searchMessagesMaxSummaryLength
{
  if (searchMessagesMaxSummaryLength_once != -1) {
    dispatch_once(&searchMessagesMaxSummaryLength_once, &__block_literal_global_2384);
  }
  if (searchMessagesMaxSummaryLength_sBehavior) {
    return 200;
  }
  else {
    return 0;
  }
}

void __46__CKUIBehavior_searchMessagesMaxSummaryLength__block_invoke()
{
  searchMessagesMaxSummaryLength_sBehavior = 1;
}

- (UIColor)searchMessagesConversationLabelColor
{
  if (searchMessagesConversationLabelColor_once != -1) {
    dispatch_once(&searchMessagesConversationLabelColor_once, &__block_literal_global_2386);
  }
  double v2 = (void *)searchMessagesConversationLabelColor_sBehavior;

  return (UIColor *)v2;
}

void __52__CKUIBehavior_searchMessagesConversationLabelColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] labelColor];
  long long v1 = (void *)searchMessagesConversationLabelColor_sBehavior;
  searchMessagesConversationLabelColor_sBehavior = v0;
}

- (UIColor)searchMessagesSenderLabelColor
{
  if (searchMessagesSenderLabelColor_once != -1) {
    dispatch_once(&searchMessagesSenderLabelColor_once, &__block_literal_global_2388);
  }
  double v2 = (void *)searchMessagesSenderLabelColor_sBehavior;

  return (UIColor *)v2;
}

void __46__CKUIBehavior_searchMessagesSenderLabelColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] secondaryLabelColor];
  long long v1 = (void *)searchMessagesSenderLabelColor_sBehavior;
  searchMessagesSenderLabelColor_sBehavior = v0;
}

- (UIColor)searchMessagesFromMeUnannotatedLabelColor
{
  if (searchMessagesFromMeUnannotatedLabelColor_once != -1) {
    dispatch_once(&searchMessagesFromMeUnannotatedLabelColor_once, &__block_literal_global_2390);
  }
  double v2 = (void *)searchMessagesFromMeUnannotatedLabelColor_sBehavior;

  return (UIColor *)v2;
}

void __57__CKUIBehavior_searchMessagesFromMeUnannotatedLabelColor__block_invoke()
{
  id v2 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v0 = [v2 colorWithAlphaComponent:0.6];
  long long v1 = (void *)searchMessagesFromMeUnannotatedLabelColor_sBehavior;
  searchMessagesFromMeUnannotatedLabelColor_sBehavior = v0;
}

- (BOOL)ckShouldUpdatesearchMessagesSenderFont
{
  return 0;
}

- (UIFont)searchMessagesSenderFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchMessagesSenderFont_sContentSizeCategory_searchMessagesSenderFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchMessagesSenderFont]
    || v11
    || searchMessagesSenderFont_sIsIncreaseContrastEnabled_searchMessagesSenderFont != v4
    || searchMessagesSenderFont_sIsBoldTextEnabled_searchMessagesSenderFont != IsBoldTextEnabled
    || (uint64_t v12 = searchMessagesSenderFont_sTextFontSize_searchMessagesSenderFont,
        *(double *)&searchMessagesSenderFont_sTextFontSize_searchMessagesSenderFont != v6)
    || (uint64_t v12 = searchMessagesSenderFont_sCustomTextFontSize_searchMessagesSenderFont,
        *(double *)&searchMessagesSenderFont_sCustomTextFontSize_searchMessagesSenderFont != v7)
    || (objc_msgSend((id)searchMessagesSenderFont_sCustomTextFontName_searchMessagesSenderFont, "isEqualToString:", v10, *(double *)&searchMessagesSenderFont_sCustomTextFontSize_searchMessagesSenderFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    uint64_t v14 = (void *)searchMessagesSenderFont_sBehavior;
    searchMessagesSenderFont_sBehavior = v13;

    objc_storeStrong((id *)&searchMessagesSenderFont_sContentSizeCategory_searchMessagesSenderFont, v3);
    searchMessagesSenderFont_sIsIncreaseContrastEnabled_searchMessagesSenderFont = v4;
    searchMessagesSenderFont_sIsBoldTextEnabled_searchMessagesSenderFont = IsBoldTextEnabled;
    searchMessagesSenderFont_sTextFontSize_searchMessagesSenderFont = *(void *)&v6;
    searchMessagesSenderFont_sCustomTextFontSize_searchMessagesSenderFont = *(void *)&v7;
    objc_storeStrong((id *)&searchMessagesSenderFont_sCustomTextFontName_searchMessagesSenderFont, v9);
  }
  double v15 = (UIFont *)(id)searchMessagesSenderFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesearchMessagesDMConversationFont
{
  return 0;
}

- (UIFont)searchMessagesDMConversationFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchMessagesDMConversationFont_sContentSizeCategory_searchMessagesDMConversationFont, v3);
  if (-[CKUIBehavior ckShouldUpdatesearchMessagesDMConversationFont](self, "ckShouldUpdatesearchMessagesDMConversationFont")|| v11|| searchMessagesDMConversationFont_sIsIncreaseContrastEnabled_searchMessagesDMConversationFont != v4|| searchMessagesDMConversationFont_sIsBoldTextEnabled_searchMessagesDMConversationFont != IsBoldTextEnabled|| *(double *)&searchMessagesDMConversationFont_sTextFontSize_searchMessagesDMConversationFont != v6|| *(double *)&searchMessagesDMConversationFont_sCustomTextFontSize_searchMessagesDMConversationFont != v7|| (objc_msgSend((id)searchMessagesDMConversationFont_sCustomTextFontName_searchMessagesDMConversationFont, "isEqualToString:", v10, *(double *)&searchMessagesDMConversationFont_sCustomTextFontSize_searchMessagesDMConversationFont) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:weight:", *MEMORY[0x1E4F43880], *MEMORY[0x1E4FB09D0]);
    uint64_t v13 = (void *)searchMessagesDMConversationFont_sBehavior;
    searchMessagesDMConversationFont_sBehavior = v12;

    objc_storeStrong((id *)&searchMessagesDMConversationFont_sContentSizeCategory_searchMessagesDMConversationFont, v3);
    searchMessagesDMConversationFont_sIsIncreaseContrastEnabled_searchMessagesDMConversationFont = v4;
    searchMessagesDMConversationFont_sIsBoldTextEnabled_searchMessagesDMConversationFont = IsBoldTextEnabled;
    searchMessagesDMConversationFont_sTextFontSize_searchMessagesDMConversationFont = *(void *)&v6;
    searchMessagesDMConversationFont_sCustomTextFontSize_searchMessagesDMConversationFont = *(void *)&v7;
    objc_storeStrong((id *)&searchMessagesDMConversationFont_sCustomTextFontName_searchMessagesDMConversationFont, v9);
  }
  uint64_t v14 = (UIFont *)(id)searchMessagesDMConversationFont_sBehavior;

  return v14;
}

- (BOOL)ckShouldUpdatesearchMessagesGroupConversationFont
{
  return 0;
}

- (UIFont)searchMessagesGroupConversationFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchMessagesGroupConversationFont_sContentSizeCategory_searchMessagesGroupConversationFont, v3);
  if (-[CKUIBehavior ckShouldUpdatesearchMessagesGroupConversationFont](self, "ckShouldUpdatesearchMessagesGroupConversationFont")|| v11|| searchMessagesGroupConversationFont_sIsIncreaseContrastEnabled_searchMessagesGroupConversationFont != v4|| searchMessagesGroupConversationFont_sIsBoldTextEnabled_searchMessagesGroupConversationFont != IsBoldTextEnabled|| (uint64_t v12 = searchMessagesGroupConversationFont_sTextFontSize_searchMessagesGroupConversationFont, *(double *)&searchMessagesGroupConversationFont_sTextFontSize_searchMessagesGroupConversationFont != v6)|| (uint64_t v12 = searchMessagesGroupConversationFont_sCustomTextFontSize_searchMessagesGroupConversationFont, *(double *)&searchMessagesGroupConversationFont_sCustomTextFontSize_searchMessagesGroupConversationFont != v7)|| (objc_msgSend((id)searchMessagesGroupConversationFont_sCustomTextFontName_searchMessagesGroupConversationFont, "isEqualToString:", v10, *(double *)&searchMessagesGroupConversationFont_sCustomTextFontSize_searchMessagesGroupConversationFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self searchMessagesDMConversationFont];
    uint64_t v14 = (void *)searchMessagesGroupConversationFont_sBehavior;
    searchMessagesGroupConversationFont_sBehavior = v13;

    objc_storeStrong((id *)&searchMessagesGroupConversationFont_sContentSizeCategory_searchMessagesGroupConversationFont, v3);
    searchMessagesGroupConversationFont_sIsIncreaseContrastEnabled_searchMessagesGroupConversationFont = v4;
    searchMessagesGroupConversationFont_sIsBoldTextEnabled_searchMessagesGroupConversationFont = IsBoldTextEnabled;
    searchMessagesGroupConversationFont_sTextFontSize_searchMessagesGroupConversationFont = *(void *)&v6;
    searchMessagesGroupConversationFont_sCustomTextFontSize_searchMessagesGroupConversationFont = *(void *)&v7;
    objc_storeStrong((id *)&searchMessagesGroupConversationFont_sCustomTextFontName_searchMessagesGroupConversationFont, v9);
  }
  double v15 = (UIFont *)(id)searchMessagesGroupConversationFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesearchMessagesBalloonFont
{
  return 0;
}

- (UIFont)searchMessagesBalloonFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchMessagesBalloonFont_sContentSizeCategory_searchMessagesBalloonFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchMessagesBalloonFont]
    || v11
    || searchMessagesBalloonFont_sIsIncreaseContrastEnabled_searchMessagesBalloonFont != v4
    || searchMessagesBalloonFont_sIsBoldTextEnabled_searchMessagesBalloonFont != IsBoldTextEnabled
    || (uint64_t v12 = searchMessagesBalloonFont_sTextFontSize_searchMessagesBalloonFont,
        *(double *)&searchMessagesBalloonFont_sTextFontSize_searchMessagesBalloonFont != v6)
    || (uint64_t v12 = searchMessagesBalloonFont_sCustomTextFontSize_searchMessagesBalloonFont,
        *(double *)&searchMessagesBalloonFont_sCustomTextFontSize_searchMessagesBalloonFont != v7)
    || (objc_msgSend((id)searchMessagesBalloonFont_sCustomTextFontName_searchMessagesBalloonFont, "isEqualToString:", v10, *(double *)&searchMessagesBalloonFont_sCustomTextFontSize_searchMessagesBalloonFont) & 1) == 0)
  {
    uint64_t v13 = [(CKUIBehavior *)self balloonTextFont];
    uint64_t v14 = (void *)searchMessagesBalloonFont_sBehavior;
    searchMessagesBalloonFont_sBehavior = v13;

    objc_storeStrong((id *)&searchMessagesBalloonFont_sContentSizeCategory_searchMessagesBalloonFont, v3);
    searchMessagesBalloonFont_sIsIncreaseContrastEnabled_searchMessagesBalloonFont = v4;
    searchMessagesBalloonFont_sIsBoldTextEnabled_searchMessagesBalloonFont = IsBoldTextEnabled;
    searchMessagesBalloonFont_sTextFontSize_searchMessagesBalloonFont = *(void *)&v6;
    searchMessagesBalloonFont_sCustomTextFontSize_searchMessagesBalloonFont = *(void *)&v7;
    objc_storeStrong((id *)&searchMessagesBalloonFont_sCustomTextFontName_searchMessagesBalloonFont, v9);
  }
  double v15 = (UIFont *)(id)searchMessagesBalloonFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesearchMessagesDateFont
{
  return 0;
}

- (UIFont)searchMessagesDateFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchMessagesDateFont_sContentSizeCategory_searchMessagesDateFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchMessagesDateFont]
    || v11
    || searchMessagesDateFont_sIsIncreaseContrastEnabled_searchMessagesDateFont != v4
    || searchMessagesDateFont_sIsBoldTextEnabled_searchMessagesDateFont != IsBoldTextEnabled
    || (uint64_t v12 = searchMessagesDateFont_sTextFontSize_searchMessagesDateFont,
        *(double *)&searchMessagesDateFont_sTextFontSize_searchMessagesDateFont != v6)
    || (uint64_t v12 = searchMessagesDateFont_sCustomTextFontSize_searchMessagesDateFont,
        *(double *)&searchMessagesDateFont_sCustomTextFontSize_searchMessagesDateFont != v7)
    || (objc_msgSend((id)searchMessagesDateFont_sCustomTextFontName_searchMessagesDateFont, "isEqualToString:", v10, *(double *)&searchMessagesDateFont_sCustomTextFontSize_searchMessagesDateFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    uint64_t v14 = (void *)searchMessagesDateFont_sBehavior;
    searchMessagesDateFont_sBehavior = v13;

    objc_storeStrong((id *)&searchMessagesDateFont_sContentSizeCategory_searchMessagesDateFont, v3);
    searchMessagesDateFont_sIsIncreaseContrastEnabled_searchMessagesDateFont = v4;
    searchMessagesDateFont_sIsBoldTextEnabled_searchMessagesDateFont = IsBoldTextEnabled;
    searchMessagesDateFont_sTextFontSize_searchMessagesDateFont = *(void *)&v6;
    searchMessagesDateFont_sCustomTextFontSize_searchMessagesDateFont = *(void *)&v7;
    objc_storeStrong((id *)&searchMessagesDateFont_sCustomTextFontName_searchMessagesDateFont, v9);
  }
  double v15 = (UIFont *)(id)searchMessagesDateFont_sBehavior;

  return v15;
}

- (double)searchPhotosThumbnailWidth
{
  if (searchPhotosThumbnailWidth_once != -1) {
    dispatch_once(&searchPhotosThumbnailWidth_once, &__block_literal_global_2392);
  }
  return *(double *)&searchPhotosThumbnailWidth_sBehavior;
}

void __42__CKUIBehavior_searchPhotosThumbnailWidth__block_invoke()
{
  id v0 = [MEMORY[0x1E4F42D90] mainScreen];
  [v0 _referenceBounds];
  *(double *)&searchPhotosThumbnailWidth_sBehavior = CGRectGetWidth(v2) * 0.5;
}

- (double)searchPhotosSeeAllCellCornerRadius
{
  if (searchPhotosSeeAllCellCornerRadius_once != -1) {
    dispatch_once(&searchPhotosSeeAllCellCornerRadius_once, &__block_literal_global_2394);
  }
  return 0.0;
}

- (double)searchPhotosCellZKWAndDetailsCornerRadius
{
  if (searchPhotosCellZKWAndDetailsCornerRadius_once != -1) {
    dispatch_once(&searchPhotosCellZKWAndDetailsCornerRadius_once, &__block_literal_global_2396);
  }
  return *(double *)&searchPhotosCellZKWAndDetailsCornerRadius_sBehavior;
}

void __57__CKUIBehavior_searchPhotosCellZKWAndDetailsCornerRadius__block_invoke()
{
  searchPhotosCellZKWAndDetailsCornerRadius_sBehavior = 0x4010000000000000;
}

- (double)searchPhotosInterItemSpacing
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __44__CKUIBehavior_searchPhotosInterItemSpacing__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchPhotosInterItemSpacing_once != -1) {
    dispatch_once(&searchPhotosInterItemSpacing_once, block);
  }
  return *(double *)&searchPhotosInterItemSpacing_sBehavior;
}

uint64_t __44__CKUIBehavior_searchPhotosInterItemSpacing__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsInterItemSpacing];
  searchPhotosInterItemSpacing_sBehavior = v2;
  return result;
}

- (double)searchPhotosInterItemSpacingDetailsView
{
  if (searchPhotosInterItemSpacingDetailsView_once != -1) {
    dispatch_once(&searchPhotosInterItemSpacingDetailsView_once, &__block_literal_global_2398);
  }
  return *(double *)&searchPhotosInterItemSpacingDetailsView_sBehavior;
}

double __55__CKUIBehavior_searchPhotosInterItemSpacingDetailsView__block_invoke()
{
  if (CKMainScreenScale_once_38 != -1) {
    dispatch_once(&CKMainScreenScale_once_38, &__block_literal_global_5995);
  }
  double v0 = *(double *)&CKMainScreenScale_sMainScreenScale_38;
  if (*(double *)&CKMainScreenScale_sMainScreenScale_38 == 0.0) {
    double v0 = 1.0;
  }
  double result = round(v0 * 1.5) / v0;
  searchPhotosInterItemSpacingDetailsView_sBehavior = *(void *)&result;
  return result;
}

- (double)searchPhotosZKWAndDetailsInterItemSpacing
{
  if (searchPhotosZKWAndDetailsInterItemSpacing_once != -1) {
    dispatch_once(&searchPhotosZKWAndDetailsInterItemSpacing_once, &__block_literal_global_2400);
  }
  return *(double *)&searchPhotosZKWAndDetailsInterItemSpacing_sBehavior;
}

void __57__CKUIBehavior_searchPhotosZKWAndDetailsInterItemSpacing__block_invoke()
{
  searchPhotosZKWAndDetailsInterItemSpacing_sBehavior = 0x4000000000000000;
}

- (double)searchPhotosSegmentedControlBottomPadding
{
  if (searchPhotosSegmentedControlBottomPadding_once != -1) {
    dispatch_once(&searchPhotosSegmentedControlBottomPadding_once, &__block_literal_global_2402);
  }
  return *(double *)&searchPhotosSegmentedControlBottomPadding_sBehavior;
}

void __57__CKUIBehavior_searchPhotosSegmentedControlBottomPadding__block_invoke()
{
  searchPhotosSegmentedControlBottomPadding_sBehavior = 0x4034000000000000;
}

- (double)searchLinksThumbnailWidth
{
  if (searchLinksThumbnailWidth_once != -1) {
    dispatch_once(&searchLinksThumbnailWidth_once, &__block_literal_global_2404);
  }
  return *(double *)&searchLinksThumbnailWidth_sBehavior;
}

void __41__CKUIBehavior_searchLinksThumbnailWidth__block_invoke()
{
  id v0 = [MEMORY[0x1E4F42D90] mainScreen];
  [v0 _referenceBounds];
  searchLinksThumbnailWidth_sBehavior = CGRectGetWidth(v2);
}

- (double)searchLinksInterItemSpacing
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__CKUIBehavior_searchLinksInterItemSpacing__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchLinksInterItemSpacing_once != -1) {
    dispatch_once(&searchLinksInterItemSpacing_once, block);
  }
  return *(double *)&searchLinksInterItemSpacing_sBehavior;
}

uint64_t __43__CKUIBehavior_searchLinksInterItemSpacing__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsInterItemSpacing];
  searchLinksInterItemSpacing_sBehavior = v2;
  return result;
}

- (double)searchLinksCellCornerRadius
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__CKUIBehavior_searchLinksCellCornerRadius__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchLinksCellCornerRadius_once != -1) {
    dispatch_once(&searchLinksCellCornerRadius_once, block);
  }
  return *(double *)&searchLinksCellCornerRadius_sBehavior;
}

uint64_t __43__CKUIBehavior_searchLinksCellCornerRadius__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsCellCornerRadius];
  searchLinksCellCornerRadius_sBehavior = v2;
  return result;
}

- (double)searchLinksFractionalHeightScale
{
  if (searchLinksFractionalHeightScale_once != -1) {
    dispatch_once(&searchLinksFractionalHeightScale_once, &__block_literal_global_2406);
  }
  return *(double *)&searchLinksFractionalHeightScale_sBehavior;
}

void __48__CKUIBehavior_searchLinksFractionalHeightScale__block_invoke()
{
  searchLinksFractionalHeightScale_sBehavior = 0x3FEB333333333333;
}

- (double)searchLinksFractionalWidthScale
{
  if (searchLinksFractionalWidthScale_once != -1) {
    dispatch_once(&searchLinksFractionalWidthScale_once, &__block_literal_global_2408);
  }
  return *(double *)&searchLinksFractionalWidthScale_sBehavior;
}

void __47__CKUIBehavior_searchLinksFractionalWidthScale__block_invoke()
{
  searchLinksFractionalWidthScale_sBehavior = 0x3FF3333333333333;
}

- (double)searchAttachmentsInterItemSpacing
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __49__CKUIBehavior_searchAttachmentsInterItemSpacing__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchAttachmentsInterItemSpacing_once != -1) {
    dispatch_once(&searchAttachmentsInterItemSpacing_once, block);
  }
  return *(double *)&searchAttachmentsInterItemSpacing_sBehavior;
}

uint64_t __49__CKUIBehavior_searchAttachmentsInterItemSpacing__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsInterItemSpacing];
  searchAttachmentsInterItemSpacing_sBehavior = v2;
  return result;
}

- (double)searchAttachmentsCellCornerRadius
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __49__CKUIBehavior_searchAttachmentsCellCornerRadius__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchAttachmentsCellCornerRadius_once != -1) {
    dispatch_once(&searchAttachmentsCellCornerRadius_once, block);
  }
  return *(double *)&searchAttachmentsCellCornerRadius_sBehavior;
}

uint64_t __49__CKUIBehavior_searchAttachmentsCellCornerRadius__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsCellCornerRadius];
  searchAttachmentsCellCornerRadius_sBehavior = v2;
  return result;
}

- (double)searchAttachmentsCellDatePadding
{
  if (searchAttachmentsCellDatePadding_once != -1) {
    dispatch_once(&searchAttachmentsCellDatePadding_once, &__block_literal_global_2410);
  }
  return *(double *)&searchAttachmentsCellDatePadding_sBehavior;
}

void __48__CKUIBehavior_searchAttachmentsCellDatePadding__block_invoke()
{
  searchAttachmentsCellDatePadding_sBehavior = 0x4010000000000000;
}

- (double)searchAttachmentsCellPadding
{
  if (searchAttachmentsCellPadding_once != -1) {
    dispatch_once(&searchAttachmentsCellPadding_once, &__block_literal_global_2412);
  }
  return 0.0;
}

- (double)searchAttachmentsImageTopPadding
{
  if (searchAttachmentsImageTopPadding_once != -1) {
    dispatch_once(&searchAttachmentsImageTopPadding_once, &__block_literal_global_2414);
  }
  return 0.0;
}

- (double)searchAttachmentsTitleTopPadding
{
  if (searchAttachmentsTitleTopPadding_once != -1) {
    dispatch_once(&searchAttachmentsTitleTopPadding_once, &__block_literal_global_2416);
  }
  return *(double *)&searchAttachmentsTitleTopPadding_sBehavior;
}

void __48__CKUIBehavior_searchAttachmentsTitleTopPadding__block_invoke()
{
  searchAttachmentsTitleTopPadding_sBehavior = 0x4028000000000000;
}

- (CGSize)searchAttachmentsThumbnailAlignmentSize
{
  if (searchAttachmentsThumbnailAlignmentSize_once != -1) {
    dispatch_once(&searchAttachmentsThumbnailAlignmentSize_once, &__block_literal_global_2418);
  }
  double v3 = *((double *)&searchAttachmentsThumbnailAlignmentSize_sBehavior + 1);
  double v2 = *(double *)&searchAttachmentsThumbnailAlignmentSize_sBehavior;
  result.double height = v3;
  result.double width = v2;
  return result;
}

__n128 __55__CKUIBehavior_searchAttachmentsThumbnailAlignmentSize__block_invoke()
{
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB30];
  searchAttachmentsThumbnailAlignmentSize_sBehavior = *MEMORY[0x1E4F1DB30];
  return result;
}

- (double)searchLocationsInterItemSpacing
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __47__CKUIBehavior_searchLocationsInterItemSpacing__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchLocationsInterItemSpacing_once != -1) {
    dispatch_once(&searchLocationsInterItemSpacing_once, block);
  }
  return *(double *)&searchLocationsInterItemSpacing_sBehavior;
}

uint64_t __47__CKUIBehavior_searchLocationsInterItemSpacing__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsInterItemSpacing];
  searchLocationsInterItemSpacing_sBehavior = v2;
  return result;
}

- (double)searchLocationCellCornerRadius
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__CKUIBehavior_searchLocationCellCornerRadius__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchLocationCellCornerRadius_once != -1) {
    dispatch_once(&searchLocationCellCornerRadius_once, block);
  }
  return *(double *)&searchLocationCellCornerRadius_sBehavior;
}

uint64_t __46__CKUIBehavior_searchLocationCellCornerRadius__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsCellCornerRadius];
  searchLocationCellCornerRadius_sBehavior = v2;
  return result;
}

- (double)searchHighlightsInterItemSpacing
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __48__CKUIBehavior_searchHighlightsInterItemSpacing__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchHighlightsInterItemSpacing_once != -1) {
    dispatch_once(&searchHighlightsInterItemSpacing_once, block);
  }
  return *(double *)&searchHighlightsInterItemSpacing_sBehavior;
}

uint64_t __48__CKUIBehavior_searchHighlightsInterItemSpacing__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsInterItemSpacing];
  searchHighlightsInterItemSpacing_sBehavior = v2;
  return result;
}

- (double)searchCollaborationInterItemSpacing
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__CKUIBehavior_searchCollaborationInterItemSpacing__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (searchCollaborationInterItemSpacing_once != -1) {
    dispatch_once(&searchCollaborationInterItemSpacing_once, block);
  }
  return *(double *)&searchCollaborationInterItemSpacing_sBehavior;
}

uint64_t __51__CKUIBehavior_searchCollaborationInterItemSpacing__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) searchResultsInterItemSpacing];
  searchCollaborationInterItemSpacing_sBehavior = v2;
  return result;
}

- (double)searchMessageCellHeightForDisplayScale:(double)a3
{
  +[CKConversationListCell cellHeightForDisplayScale:a3];
  return result;
}

- (BOOL)ckShouldUpdatesearchResultLabelFont
{
  return 0;
}

- (UIFont)searchResultLabelFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchResultLabelFont_sContentSizeCategory_searchResultLabelFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchResultLabelFont]
    || v11
    || searchResultLabelFont_sIsIncreaseContrastEnabled_searchResultLabelFont != v4
    || searchResultLabelFont_sIsBoldTextEnabled_searchResultLabelFont != IsBoldTextEnabled
    || (uint64_t v12 = searchResultLabelFont_sTextFontSize_searchResultLabelFont,
        *(double *)&searchResultLabelFont_sTextFontSize_searchResultLabelFont != v6)
    || (uint64_t v12 = searchResultLabelFont_sCustomTextFontSize_searchResultLabelFont,
        *(double *)&searchResultLabelFont_sCustomTextFontSize_searchResultLabelFont != v7)
    || (objc_msgSend((id)searchResultLabelFont_sCustomTextFontName_searchResultLabelFont, "isEqualToString:", v10, *(double *)&searchResultLabelFont_sCustomTextFontSize_searchResultLabelFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F43880], *(double *)&v12);
    uint64_t v14 = (void *)searchResultLabelFont_sBehavior;
    searchResultLabelFont_sBehavior = v13;

    objc_storeStrong((id *)&searchResultLabelFont_sContentSizeCategory_searchResultLabelFont, v3);
    searchResultLabelFont_sIsIncreaseContrastEnabled_searchResultLabelFont = v4;
    searchResultLabelFont_sIsBoldTextEnabled_searchResultLabelFont = IsBoldTextEnabled;
    searchResultLabelFont_sTextFontSize_searchResultLabelFont = *(void *)&v6;
    searchResultLabelFont_sCustomTextFontSize_searchResultLabelFont = *(void *)&v7;
    objc_storeStrong((id *)&searchResultLabelFont_sCustomTextFontName_searchResultLabelFont, v9);
  }
  double v15 = (UIFont *)(id)searchResultLabelFont_sBehavior;

  return v15;
}

- (BOOL)ckShouldUpdatesearchResultLabelBoldFont
{
  return 0;
}

- (UIFont)searchResultLabelBoldFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchResultLabelBoldFont_sContentSizeCategory_searchResultLabelBoldFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchResultLabelBoldFont]
    || v11
    || searchResultLabelBoldFont_sIsIncreaseContrastEnabled_searchResultLabelBoldFont != v4
    || searchResultLabelBoldFont_sIsBoldTextEnabled_searchResultLabelBoldFont != IsBoldTextEnabled
    || (uint64_t v12 = searchResultLabelBoldFont_sTextFontSize_searchResultLabelBoldFont,
        *(double *)&searchResultLabelBoldFont_sTextFontSize_searchResultLabelBoldFont != v6)
    || (uint64_t v12 = searchResultLabelBoldFont_sCustomTextFontSize_searchResultLabelBoldFont,
        *(double *)&searchResultLabelBoldFont_sCustomTextFontSize_searchResultLabelBoldFont != v7)
    || (objc_msgSend((id)searchResultLabelBoldFont_sCustomTextFontName_searchResultLabelBoldFont, "isEqualToString:", v10, *(double *)&searchResultLabelBoldFont_sCustomTextFontSize_searchResultLabelBoldFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F43880], 2, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)searchResultLabelBoldFont_sBehavior;
    searchResultLabelBoldFont_sBehavior = v14;

    objc_storeStrong((id *)&searchResultLabelBoldFont_sContentSizeCategory_searchResultLabelBoldFont, v3);
    searchResultLabelBoldFont_sIsIncreaseContrastEnabled_searchResultLabelBoldFont = v4;
    searchResultLabelBoldFont_sIsBoldTextEnabled_searchResultLabelBoldFont = IsBoldTextEnabled;
    searchResultLabelBoldFont_sTextFontSize_searchResultLabelBoldFont = *(void *)&v6;
    searchResultLabelBoldFont_sCustomTextFontSize_searchResultLabelBoldFont = *(void *)&v7;
    objc_storeStrong((id *)&searchResultLabelBoldFont_sCustomTextFontName_searchResultLabelBoldFont, v9);
  }
  double v16 = (UIFont *)(id)searchResultLabelBoldFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatesearchIndexingTitleFont
{
  return 0;
}

- (UIFont)searchIndexingTitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchIndexingTitleFont_sContentSizeCategory_searchIndexingTitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchIndexingTitleFont]
    || v11
    || searchIndexingTitleFont_sIsIncreaseContrastEnabled_searchIndexingTitleFont != v4
    || searchIndexingTitleFont_sIsBoldTextEnabled_searchIndexingTitleFont != IsBoldTextEnabled
    || (uint64_t v12 = searchIndexingTitleFont_sTextFontSize_searchIndexingTitleFont,
        *(double *)&searchIndexingTitleFont_sTextFontSize_searchIndexingTitleFont != v6)
    || (uint64_t v12 = searchIndexingTitleFont_sCustomTextFontSize_searchIndexingTitleFont,
        *(double *)&searchIndexingTitleFont_sCustomTextFontSize_searchIndexingTitleFont != v7)
    || (objc_msgSend((id)searchIndexingTitleFont_sCustomTextFontName_searchIndexingTitleFont, "isEqualToString:", v10, *(double *)&searchIndexingTitleFont_sCustomTextFontSize_searchIndexingTitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E8], "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", *MEMORY[0x1E4F438F0], 0x8000, 0, *(double *)&v12);
    uint64_t v14 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v13 size:0.0];

    double v15 = (void *)searchIndexingTitleFont_sBehavior;
    searchIndexingTitleFont_sBehavior = v14;

    objc_storeStrong((id *)&searchIndexingTitleFont_sContentSizeCategory_searchIndexingTitleFont, v3);
    searchIndexingTitleFont_sIsIncreaseContrastEnabled_searchIndexingTitleFont = v4;
    searchIndexingTitleFont_sIsBoldTextEnabled_searchIndexingTitleFont = IsBoldTextEnabled;
    searchIndexingTitleFont_sTextFontSize_searchIndexingTitleFont = *(void *)&v6;
    searchIndexingTitleFont_sCustomTextFontSize_searchIndexingTitleFont = *(void *)&v7;
    objc_storeStrong((id *)&searchIndexingTitleFont_sCustomTextFontName_searchIndexingTitleFont, v9);
  }
  double v16 = (UIFont *)(id)searchIndexingTitleFont_sBehavior;

  return v16;
}

- (BOOL)ckShouldUpdatesearchIndexingSubtitleFont
{
  return 0;
}

- (UIFont)searchIndexingSubtitleFont
{
  CKPreferredContentSizeCategory();
  double v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v4 = UIAccessibilityDarkerSystemColorsEnabled();
  int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  double v6 = CKUserPreferenceFontSize();
  double v7 = CKAccessibilityCustomTextFontSize();
  CKAccessibilityCustomTextFontName();
  double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v8 length]) {
    id v9 = v8;
  }
  else {
    id v9 = @"None";
  }
  id v10 = v9;
  NSComparisonResult v11 = UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)searchIndexingSubtitleFont_sContentSizeCategory_searchIndexingSubtitleFont, v3);
  if ([(CKUIBehavior *)self ckShouldUpdatesearchIndexingSubtitleFont]
    || v11
    || searchIndexingSubtitleFont_sIsIncreaseContrastEnabled_searchIndexingSubtitleFont != v4
    || searchIndexingSubtitleFont_sIsBoldTextEnabled_searchIndexingSubtitleFont != IsBoldTextEnabled
    || (uint64_t v12 = searchIndexingSubtitleFont_sTextFontSize_searchIndexingSubtitleFont,
        *(double *)&searchIndexingSubtitleFont_sTextFontSize_searchIndexingSubtitleFont != v6)
    || (uint64_t v12 = searchIndexingSubtitleFont_sCustomTextFontSize_searchIndexingSubtitleFont,
        *(double *)&searchIndexingSubtitleFont_sCustomTextFontSize_searchIndexingSubtitleFont != v7)
    || (objc_msgSend((id)searchIndexingSubtitleFont_sCustomTextFontName_searchIndexingSubtitleFont, "isEqualToString:", v10, *(double *)&searchIndexingSubtitleFont_sCustomTextFontSize_searchIndexingSubtitleFont) & 1) == 0)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4FB08E0], "__ck_preferredFontForStyle:", *MEMORY[0x1E4F438C0], *(double *)&v12);
    uint64_t v14 = (void *)searchIndexingSubtitleFont_sBehavior;
    searchIndexingSubtitleFont_sBehavior = v13;

    objc_storeStrong((id *)&searchIndexingSubtitleFont_sContentSizeCategory_searchIndexingSubtitleFont, v3);
    searchIndexingSubtitleFont_sIsIncreaseContrastEnabled_searchIndexingSubtitleFont = v4;
    searchIndexingSubtitleFont_sIsBoldTextEnabled_searchIndexingSubtitleFont = IsBoldTextEnabled;
    searchIndexingSubtitleFont_sTextFontSize_searchIndexingSubtitleFont = *(void *)&v6;
    searchIndexingSubtitleFont_sCustomTextFontSize_searchIndexingSubtitleFont = *(void *)&v7;
    objc_storeStrong((id *)&searchIndexingSubtitleFont_sCustomTextFontName_searchIndexingSubtitleFont, v9);
  }
  double v15 = (UIFont *)(id)searchIndexingSubtitleFont_sBehavior;

  return v15;
}

- (UIFont)signInTitleFont
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4FB08E8] preferredFontDescriptorWithTextStyle:*MEMORY[0x1E4F438B8]];
  uint64_t v11 = *MEMORY[0x1E4FB0950];
  uint64_t v9 = *MEMORY[0x1E4FB09F0];
  double v3 = [NSNumber numberWithDouble:*MEMORY[0x1E4FB09B8]];
  id v10 = v3;
  int v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  v12[0] = v4;
  double v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  double v6 = [v2 fontDescriptorByAddingAttributes:v5];

  double v7 = [MEMORY[0x1E4FB08E0] fontWithDescriptor:v6 size:0.0];

  return (UIFont *)v7;
}

- (UIImage)signInAppIconImage
{
  if (signInAppIconImage_once != -1) {
    dispatch_once(&signInAppIconImage_once, &__block_literal_global_2421);
  }
  uint64_t v2 = (void *)signInAppIconImage_sBehavior;

  return (UIImage *)v2;
}

void __34__CKUIBehavior_signInAppIconImage__block_invoke()
{
  id v0 = (void *)MEMORY[0x1E4F42A80];
  id v3 = [MEMORY[0x1E4F42D90] mainScreen];
  [v3 scale];
  uint64_t v1 = objc_msgSend(v0, "_applicationIconImageForBundleIdentifier:format:scale:", @"com.apple.MobileSMS", 2);
  uint64_t v2 = (void *)signInAppIconImage_sBehavior;
  signInAppIconImage_sBehavior = v1;
}

- (double)signInSplashImageTopPadding
{
  if (signInSplashImageTopPadding_once != -1) {
    dispatch_once(&signInSplashImageTopPadding_once, &__block_literal_global_2423);
  }
  return *(double *)&signInSplashImageTopPadding_sBehavior;
}

void __43__CKUIBehavior_signInSplashImageTopPadding__block_invoke()
{
  signInSplashImageTopPadding_sBehavior = 0x4034000000000000;
}

- (double)signInSplashImageBottomPadding
{
  if (signInSplashImageBottomPadding_once != -1) {
    dispatch_once(&signInSplashImageBottomPadding_once, &__block_literal_global_2425);
  }
  return *(double *)&signInSplashImageBottomPadding_sBehavior;
}

void __46__CKUIBehavior_signInSplashImageBottomPadding__block_invoke()
{
  signInSplashImageBottomPadding_sBehavior = 0x402E000000000000;
}

- (double)signInPrivacyWidthMultiplier
{
  if (signInPrivacyWidthMultiplier_once != -1) {
    dispatch_once(&signInPrivacyWidthMultiplier_once, &__block_literal_global_2427);
  }
  return *(double *)&signInPrivacyWidthMultiplier_sBehavior;
}

void __44__CKUIBehavior_signInPrivacyWidthMultiplier__block_invoke()
{
  signInPrivacyWidthMultiplier_sBehavior = 0x3FE0000000000000;
}

- (double)signInTitleBottomPadding
{
  if (signInTitleBottomPadding_once != -1) {
    dispatch_once(&signInTitleBottomPadding_once, &__block_literal_global_2429);
  }
  return *(double *)&signInTitleBottomPadding_sBehavior;
}

void __40__CKUIBehavior_signInTitleBottomPadding__block_invoke()
{
  signInTitleBottomPadding_sBehavior = 0x4014000000000000;
}

- (UIColor)signInTintColor
{
  if (signInTintColor_once != -1) {
    dispatch_once(&signInTintColor_once, &__block_literal_global_2431);
  }
  return 0;
}

- (UIColor)signInActivityIndicatorColor
{
  if (signInActivityIndicatorColor_once != -1) {
    dispatch_once(&signInActivityIndicatorColor_once, &__block_literal_global_2433);
  }
  uint64_t v2 = (void *)signInActivityIndicatorColor_sBehavior;

  return (UIColor *)v2;
}

void __44__CKUIBehavior_signInActivityIndicatorColor__block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F428B8] blackColor];
  uint64_t v1 = (void *)signInActivityIndicatorColor_sBehavior;
  signInActivityIndicatorColor_sBehavior = v0;
}

- (double)signInContainerWidth
{
  if (signInContainerWidth_once != -1) {
    dispatch_once(&signInContainerWidth_once, &__block_literal_global_2435);
  }
  return *(double *)&signInContainerWidth_sBehavior;
}

void __36__CKUIBehavior_signInContainerWidth__block_invoke()
{
  signInContainerWidth_sBehavior = 0x407E000000000000;
}

- (double)signInAuthKitViewWidth
{
  if (signInAuthKitViewWidth_once != -1) {
    dispatch_once(&signInAuthKitViewWidth_once, &__block_literal_global_2437);
  }
  return *(double *)&signInAuthKitViewWidth_sBehavior;
}

void __38__CKUIBehavior_signInAuthKitViewWidth__block_invoke()
{
  signInAuthKitViewWidth_sBehavior = 0x4079000000000000;
}

- (double)signInAuthKitViewHeight
{
  if (signInAuthKitViewHeight_once != -1) {
    dispatch_once(&signInAuthKitViewHeight_once, &__block_literal_global_2439);
  }
  return *(double *)&signInAuthKitViewHeight_sBehavior;
}

void __39__CKUIBehavior_signInAuthKitViewHeight__block_invoke()
{
  signInAuthKitViewHeight_sBehavior = 0x406B800000000000;
}

- (double)signInPrivacyLinkHeight
{
  if (signInPrivacyLinkHeight_once != -1) {
    dispatch_once(&signInPrivacyLinkHeight_once, &__block_literal_global_2441);
  }
  return *(double *)&signInPrivacyLinkHeight_sBehavior;
}

void __39__CKUIBehavior_signInPrivacyLinkHeight__block_invoke()
{
  signInPrivacyLinkHeight_sBehavior = 0x4059000000000000;
}

- (double)tipCellLeadingInset
{
  if (tipCellLeadingInset_once != -1) {
    dispatch_once(&tipCellLeadingInset_once, &__block_literal_global_2443);
  }
  return *(double *)&tipCellLeadingInset_sBehavior;
}

void __35__CKUIBehavior_tipCellLeadingInset__block_invoke()
{
  tipCellLeadingInset_sBehavior = 0x4030000000000000;
}

- (double)tipCellTrailingInset
{
  if (tipCellTrailingInset_once != -1) {
    dispatch_once(&tipCellTrailingInset_once, &__block_literal_global_2445);
  }
  return *(double *)&tipCellTrailingInset_sBehavior;
}

void __36__CKUIBehavior_tipCellTrailingInset__block_invoke()
{
  tipCellTrailingInset_sBehavior = 0xC030000000000000;
}

- (double)tipCellMicaAnimationSize
{
  if (tipCellMicaAnimationSize_once != -1) {
    dispatch_once(&tipCellMicaAnimationSize_once, &__block_literal_global_2447);
  }
  return *(double *)&tipCellMicaAnimationSize_sBehavior;
}

void __40__CKUIBehavior_tipCellMicaAnimationSize__block_invoke()
{
  tipCellMicaAnimationSize_sBehavior = 0x4050000000000000;
}

- (double)tipCellCornerRadius
{
  if (tipCellCornerRadius_once != -1) {
    dispatch_once(&tipCellCornerRadius_once, &__block_literal_global_2449);
  }
  return *(double *)&tipCellCornerRadius_sBehavior;
}

void __35__CKUIBehavior_tipCellCornerRadius__block_invoke()
{
  tipCellCornerRadius_sBehavior = 0x402A000000000000;
}

- (double)tipCellMicaAnimationPadding
{
  if (tipCellMicaAnimationPadding_once != -1) {
    dispatch_once(&tipCellMicaAnimationPadding_once, &__block_literal_global_2451);
  }
  return *(double *)&tipCellMicaAnimationPadding_sBehavior;
}

void __43__CKUIBehavior_tipCellMicaAnimationPadding__block_invoke()
{
  tipCellMicaAnimationPadding_sBehavior = 0x4024000000000000;
}

- (UIColor)suggestedRepliesViewBackgroundColor
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__CKUIBehavior_suggestedRepliesViewBackgroundColor__block_invoke;
  block[3] = &unk_1E5620C40;
  block[4] = self;
  if (suggestedRepliesViewBackgroundColor_once != -1) {
    dispatch_once(&suggestedRepliesViewBackgroundColor_once, block);
  }
  return (UIColor *)(id)suggestedRepliesViewBackgroundColor_sBehavior;
}

void __51__CKUIBehavior_suggestedRepliesViewBackgroundColor__block_invoke(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _suggestedRepliesViewBackgroundColor];
  uint64_t v2 = (void *)suggestedRepliesViewBackgroundColor_sBehavior;
  suggestedRepliesViewBackgroundColor_sBehavior = v1;
}

- (id)_suggestedRepliesViewBackgroundColor
{
  uint64_t v2 = (void *)MEMORY[0x1E4F428B8];
  id v3 = [MEMORY[0x1E4F428B8] colorWithRed:0.894117647 green:0.898039216 blue:0.909803922 alpha:1.0];
  int v4 = [MEMORY[0x1E4F428B8] colorWithRed:0.149019608 green:0.149019608 blue:0.160784314 alpha:1.0];
  double v5 = [v2 dynamicColorWithLightColor:v3 darkColor:v4];

  return v5;
}

- (double)suggestedRepliesViewMaxWidth
{
  if (suggestedRepliesViewMaxWidth_once != -1) {
    dispatch_once(&suggestedRepliesViewMaxWidth_once, &__block_literal_global_2453);
  }
  return *(double *)&suggestedRepliesViewMaxWidth_sBehavior;
}

void __44__CKUIBehavior_suggestedRepliesViewMaxWidth__block_invoke()
{
  suggestedRepliesViewMaxWidth_sBehavior = 0x4070700000000000;
}

- (int64_t)HUDStyle
{
  return self->_HUDStyle;
}

- (Class)conversationListTableViewClass
{
  return self->_conversationListTableViewClass;
}

- (UIImage)dndActionImage
{
  return self->_dndActionImage;
}

- (UIImage)unDNDActionImage
{
  return self->_unDNDActionImage;
}

- (BOOL)shouldInsetForStatusBarWithSafeArea
{
  return self->_shouldInsetForStatusBarWithSafeArea;
}

- (NSDictionary)transcriptErrorStampFontAttributes
{
  return self->_transcriptErrorStampFontAttributes;
}

- (UIImage)messageReplyImage
{
  return self->_messageReplyImage;
}

- (double)quickReplyListBottomTranscriptSpace
{
  return self->_quickReplyListBottomTranscriptSpace;
}

- (double)quickReplyListTopTranscriptSpace
{
  return self->_quickReplyListTopTranscriptSpace;
}

- (double)additionalQuickReplyListPadding
{
  return self->_additionalQuickReplyListPadding;
}

- (double)spaceBetweenQuickReplyRows
{
  return self->_spaceBetweenQuickReplyRows;
}

- (double)waveformMaxWidth
{
  return self->_waveformMaxWidth;
}

- (double)toFieldInterItemSpacing
{
  return self->_toFieldInterItemSpacing;
}

- (double)toFieldXOffset
{
  return self->_toFieldXOffset;
}

- (double)toFieldYOffset
{
  return self->_toFieldYOffset;
}

- (double)bubbleLeftInsetForQuicktationInEntryView
{
  return self->_bubbleLeftInsetForQuicktationInEntryView;
}

- (CGSize)navBarUnifiedCallButtonSize
{
  double width = self->_navBarUnifiedCallButtonSize.width;
  double height = self->_navBarUnifiedCallButtonSize.height;
  result.double height = height;
  result.double width = width;
  return result;
}

- (double)messageHighlightButtonGlyphPointSize
{
  return self->_messageHighlightButtonGlyphPointSize;
}

- (double)appDrawerTitleIconWidth
{
  return self->_appDrawerTitleIconWidth;
}

- (double)appDrawerTitleIconHeight
{
  return self->_appDrawerTitleIconHeight;
}

- (double)searchDetailsSeeAllButtonTrailingMargin
{
  return self->_searchDetailsSeeAllButtonTrailingMargin;
}

- (double)searchResultsTitleHeaderTextLeadingMargin
{
  return self->_searchResultsTitleHeaderTextLeadingMargin;
}

- (double)searchResultsDetailsTitleHeaderTextLeadingMargin
{
  return self->_searchResultsDetailsTitleHeaderTextLeadingMargin;
}

- (double)searchDetailsPhotosShowAllSectionMarginHorizonalInset
{
  return self->_searchDetailsPhotosShowAllSectionMarginHorizonalInset;
}

- (UIFont)searchDetailsSubHeaderFont
{
  return self->_searchDetailsSubHeaderFont;
}

- (double)searchResultsInterItemSpacingDetailsView
{
  return self->_searchResultsInterItemSpacingDetailsView;
}

- (double)searchResultsItemFractionalHeight
{
  return self->_searchResultsItemFractionalHeight;
}

- (double)searchResultsDetailsItemFractionalHeight
{
  return self->_searchResultsDetailsItemFractionalHeight;
}

- (double)searchPhotosCellCornerRadius
{
  return self->_searchPhotosCellCornerRadius;
}

- (double)searchPassesInterItemSpacing
{
  return self->_searchPassesInterItemSpacing;
}

- (double)searchDropdownAvatarDiameter
{
  return self->_searchDropdownAvatarDiameter;
}

- (double)balloonSelectionScrollThresholdTop
{
  return self->_balloonSelectionScrollThresholdTop;
}

- (double)balloonSelectionScrollThresholdBottom
{
  return self->_balloonSelectionScrollThresholdBottom;
}

- (double)balloonSelectionLoadMoreSpinnerHeight
{
  return self->_balloonSelectionLoadMoreSpinnerHeight;
}

- (double)balloonSelectionMaxScrollSpeed
{
  return self->_balloonSelectionMaxScrollSpeed;
}

- (CGSize)signInSplashImageSize
{
  double width = self->_signInSplashImageSize.width;
  double height = self->_signInSplashImageSize.height;
  result.double height = height;
  result.double width = width;
  return result;
}

- (CGSize)detonatedItemBalloonViewSize
{
  double width = self->_detonatedItemBalloonViewSize.width;
  double height = self->_detonatedItemBalloonViewSize.height;
  result.double height = height;
  result.double width = width;
  return result;
}

- (CGSize)detonatedItemDocumentIconSize
{
  double width = self->_detonatedItemDocumentIconSize.width;
  double height = self->_detonatedItemDocumentIconSize.height;
  result.double height = height;
  result.double width = width;
  return result;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_searchDetailsSubHeaderFont, 0);
  objc_storeStrong((id *)&self->_messageReplyImage, 0);
  objc_storeStrong((id *)&self->_transcriptErrorStampFontAttributes, 0);
  objc_storeStrong((id *)&self->_unDNDActionImage, 0);
  objc_storeStrong((id *)&self->_dndActionImage, 0);

  objc_storeStrong((id *)&self->_conversationListTableViewClass, 0);
}

@end